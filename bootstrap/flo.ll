; ModuleID = 'src/main.flo'
source_filename = "src/main.flo"
target triple = "x86_64-pc-linux-gnu"

%string = type <{ ptr, ptr, i64, i64 }>
%Array_string_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_string_ = type <{ i1, i64, i64, ptr }>
%Compiler = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%GeneratedModule = type <{ ptr, ptr, ptr, ptr }>
%Array_FloError_ = type <{ ptr, ptr, i64, i64 }>
%FileId = type <{ i64 }>
%FloFile = type <{ ptr, ptr }>
%FloRange = type <{ i64, i64, i64, i64 }>
%FloError = type <{ i64, ptr, ptr }>
%ArrayIterator_FloError_ = type <{ i1, i64, i64, ptr }>
%Array_FloFile_ = type <{ ptr, ptr, i64, i64 }>
%File = type <{ ptr, i64 }>
%ArrayIterator_FloFile_ = type <{ i1, i64, i64, ptr }>
%MapIterator_string_FileId_ = type <{ i1, ptr, i64, i64 }>
%Map_string_FileId_ = type <{ ptr, i64, i64 }>
%MapEntry_string_FileId_ = type <{ ptr, ptr }>
%StringBuilder = type <{ ptr, ptr, i64, ptr, i64 }>
%Range = type <{ i64, i64 }>
%RangeIterator = type <{ i1, i64, i64 }>
%Program = type <{ i1, ptr }>
%ArrayIterator_Module_ = type <{ i1, i64, i64, ptr }>
%ScopeId = type <{ i64, i64 }>
%Array_ScopeId_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_ScopeId_ = type <{ i1, i64, i64, ptr }>
%Map_string_VarId_ = type <{ ptr, i64, i64 }>
%MapEntry_string_VarId_ = type <{ ptr, ptr }>
%VarId = type <{ i64, i64, i64 }>
%MapIterator_string_VarId_ = type <{ i1, ptr, i64, i64 }>
%Scope = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%Map_string_EnumId_ = type <{ ptr, i64, i64 }>
%MapEntry_string_EnumId_ = type <{ ptr, ptr }>
%TypeId = type <{ i64, i64, i64 }>
%MapIterator_string_EnumId_ = type <{ i1, ptr, i64, i64 }>
%Map_string_Type_ = type <{ ptr, i64, i64 }>
%MapEntry_string_Type_ = type <{ ptr, ptr }>
%Type = type <{ i64 }>
%MapIterator_string_Type_ = type <{ i1, ptr, i64, i64 }>
%Map_string_ClassId_ = type <{ ptr, i64, i64 }>
%MapEntry_string_ClassId_ = type <{ ptr, ptr }>
%MapIterator_string_ClassId_ = type <{ i1, ptr, i64, i64 }>
%Array_Scope_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_Scope_ = type <{ i1, i64, i64, ptr }>
%VarDeclaration = type <{ i64, ptr, ptr, i1 }>
%Statement = type <{ i64 }>
%Array_VarDeclaration_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_VarDeclaration_ = type <{ i1, i64, i64, ptr }>
%Expression = type <{ i64, i1, i64, ptr }>
%Var = type <{ ptr, ptr, ptr }>
%Value = type <{ ptr }>
%Array_Var_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_Var_ = type <{ i1, i64, i64, ptr }>
%ConstDeclaration = type <{ i64, ptr, ptr, i1 }>
%Array_ConstDeclaration_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_ConstDeclaration_ = type <{ i1, i64, i64, ptr }>
%Module = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%ArrayIterator_Function_ = type <{ i1, i64, i64, ptr }>
%ArrayIterator_Class_ = type <{ i1, i64, i64, ptr }>
%ArrayIterator_Enum_ = type <{ i1, i64, i64, ptr }>
%Map_string_PropId_ = type <{ ptr, i64, i64 }>
%MapEntry_string_PropId_ = type <{ ptr, ptr }>
%PropId = type <{ i64, ptr, i64 }>
%MapIterator_string_PropId_ = type <{ i1, ptr, i64, i64 }>
%EnumField = type <{ ptr, ptr, ptr }>
%Array_EnumField_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_EnumField_ = type <{ i1, i64, i64, ptr }>
%Enum = type <{ ptr, ptr, ptr, ptr }>
%Array_Enum_ = type <{ ptr, ptr, i64, i64 }>
%Const = type <{ ptr, ptr, ptr }>
%Array_Const_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_Const_ = type <{ i1, i64, i64, ptr }>
%Array_FunctionArg_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_FunctionArg_ = type <{ i1, i64, i64, ptr }>
%Array_Statement_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_Statement_ = type <{ i1, i64, i64, ptr }>
%Block = type <{ ptr, i1, i1, i1, ptr }>
%Array_Type_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_Type_ = type <{ i1, i64, i64, ptr }>
%FunctionType = type <{ i64, ptr, ptr, i1 }>
%ClassMethod = type <{ ptr, i1, i64, ptr, ptr, ptr, ptr, i1, ptr, i64 }>
%Array_ClassMethod_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_ClassMethod_ = type <{ i1, i64, i64, ptr }>
%ClassField = type <{ ptr, i1, i64, ptr, ptr, ptr, i64 }>
%Array_ClassField_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_ClassField_ = type <{ i1, i64, i64, ptr }>
%Class = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64, i64, i1 }>
%Array_Class_ = type <{ ptr, ptr, i64, i64 }>
%Function = type <{ ptr, ptr, ptr, ptr, ptr, ptr, i1 }>
%Array_Function_ = type <{ ptr, ptr, i64, i64 }>
%Array_Module_ = type <{ ptr, ptr, i64, i64 }>
%IdentifierToken = type <{ i64, ptr, ptr }>
%Token = type <{ i64, ptr }>
%Array_Token_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_Token_ = type <{ i1, i64, i64, ptr }>
%Array_Array_Token__ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_Array_Token__ = type <{ i1, i64, i64, ptr }>
%Array_uint_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_uint_ = type <{ i1, i64, i64, ptr }>
%StrToken = type <{ i64, ptr, ptr, ptr, ptr }>
%ImportClause = type <{ ptr, ptr }>
%Array_ImportClause_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_ImportClause_ = type <{ i1, i64, i64, ptr }>
%ImportNode = type <{ ptr, ptr, ptr }>
%Array_ImportNode_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_ImportNode_ = type <{ i1, i64, i64, ptr }>
%TypeNode = type <{ ptr, i64 }>
%Node = type <{ ptr }>
%ExpressionNode = type <{ ptr, i64, i64 }>
%StatementNode = type <{ ptr, i64 }>
%VarDeclarationStatement = type <{ ptr, i64, ptr, ptr, ptr }>
%Array_VarDeclarationStatement_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_VarDeclarationStatement_ = type <{ i1, i64, i64, ptr }>
%EnumNodeField = type <{ ptr, ptr }>
%Array_EnumNodeField_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_EnumNodeField_ = type <{ i1, i64, i64, ptr }>
%EnumNode = type <{ ptr, ptr, ptr }>
%Array_EnumNode_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_EnumNode_ = type <{ i1, i64, i64, ptr }>
%TypeAliasNode = type <{ ptr, ptr }>
%Array_TypeAliasNode_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_TypeAliasNode_ = type <{ i1, i64, i64, ptr }>
%ConstDeclarationStatement = type <{ ptr, i64, ptr, ptr, ptr }>
%Array_ConstDeclarationStatement_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_ConstDeclarationStatement_ = type <{ i1, i64, i64, ptr }>
%ArgNode = type <{ ptr, ptr, ptr }>
%Array_ArgNode_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_ArgNode_ = type <{ i1, i64, i64, ptr }>
%Array_StatementNode_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_StatementNode_ = type <{ i1, i64, i64, ptr }>
%BlockNode = type <{ ptr, ptr }>
%MethodNode = type <{ ptr, ptr, ptr, i64, ptr, i1, i1 }>
%Array_MethodNode_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_MethodNode_ = type <{ i1, i64, i64, ptr }>
%FieldNode = type <{ ptr, i64, ptr, ptr }>
%Array_FieldNode_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_FieldNode_ = type <{ i1, i64, i64, ptr }>
%Array_TypeNode_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_TypeNode_ = type <{ i1, i64, i64, ptr }>
%RecordTypeNode = type <{ ptr, i64, ptr, ptr }>
%GenericParameterNode = type <{ ptr }>
%Array_GenericParameterNode_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_GenericParameterNode_ = type <{ i1, i64, i64, ptr }>
%ClassDeclarationNode = type <{ ptr, ptr, ptr, ptr, ptr }>
%Array_ClassDeclarationNode_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_ClassDeclarationNode_ = type <{ i1, i64, i64, ptr }>
%FunctionDeclarationNode = type <{ ptr, ptr, ptr, ptr, i1 }>
%Array_FunctionDeclarationNode_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_FunctionDeclarationNode_ = type <{ i1, i64, i64, ptr }>
%ModuleAST = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%Lexer = type <{ i8, ptr, ptr, i64, i64, i64 }>
%IntToken = type <{ i64, ptr, i64 }>
%CharToken = type <{ i64, ptr, i8 }>
%FloatToken = type <{ i64, ptr, double }>
%Parser = type <{ ptr, ptr, ptr, i64 }>
%PointerTypeNode = type <{ ptr, i64, ptr }>
%ArrayTypeNode = type <{ ptr, i64, ptr, ptr }>
%Array_ExpressionNode_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_ExpressionNode_ = type <{ i1, i64, i64, ptr }>
%StringExpressionNode = type <{ ptr, i64, i64, ptr, ptr }>
%IfStatementNode = type <{ ptr, i64, ptr, ptr, ptr }>
%WhileStatementNode = type <{ ptr, i64, ptr, ptr }>
%ForStatementNode = type <{ ptr, i64, ptr, ptr, ptr, ptr, i64, ptr, ptr }>
%NewExpressionNode = type <{ ptr, i64, i64, ptr, i1, ptr }>
%ReturnStatementNode = type <{ ptr, i64, ptr }>
%TupleExpressionNode = type <{ ptr, i64, i64, ptr }>
%IntExpressionNode = type <{ ptr, i64, i64, ptr }>
%FloatExpressionNode = type <{ ptr, i64, i64, ptr }>
%CharExpressionNode = type <{ ptr, i64, i64, ptr }>
%VarAccessExpressionNode = type <{ ptr, i64, i64, ptr }>
%UnaryExpressionNode = type <{ ptr, i64, i64, i64, ptr }>
%TupleTypeNode = type <{ ptr, i64, ptr }>
%FunctionTypeNode = type <{ ptr, i64, ptr, ptr }>
%ArrayExpressionNode = type <{ ptr, i64, i64, ptr }>
%ExpressionIndexNode = type <{ ptr, i64, i64, ptr, ptr }>
%CallExpressionNode = type <{ ptr, i64, i64, ptr, ptr }>
%MemberExpressionNode = type <{ ptr, i64, i64, ptr, ptr }>
%BinaryExpressionNode = type <{ ptr, i64, i64, ptr, i64, ptr }>
%TypeCastExpressionNode = type <{ ptr, i64, i64, ptr, ptr }>
%TernaryExpressionNode = type <{ ptr, i64, i64, ptr, ptr, ptr }>
%MatchExpressionNode = type <{ ptr, i64, i64, ptr, ptr, ptr }>
%MatchExpressionCaseNode = type <{ ptr, ptr }>
%Array_MatchExpressionCaseNode_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_MatchExpressionCaseNode_ = type <{ i1, i64, i64, ptr }>
%TypeChecker = type <{ ptr, ptr, ptr, ptr, ptr, ptr, i1, i1, ptr }>
%ClassVarId = type <{ i64, i64, i64 }>
%EnumVarId = type <{ i64, i64, i64 }>
%StringExpression = type <{ i64, i1, i64, ptr, ptr, ptr, ptr }>
%Array_Expression_ = type <{ ptr, ptr, i64, i64 }>
%IntrinsicCall = type <{ i64, i1, i64, ptr, i64, ptr }>
%TypeCastExpression = type <{ i64, i1, i64, ptr, ptr }>
%ArrayIterator_Expression_ = type <{ i1, i64, i64, ptr }>
%FunctionArg = type <{ i64, i1, i64, ptr, ptr, ptr, ptr }>
%MatchExpressionCase = type <{ i64, ptr, ptr }>
%Array_MatchExpressionCase_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_MatchExpressionCase_ = type <{ i1, i64, i64, ptr }>
%MatchExpression = type <{ i64, i1, i64, ptr, ptr, ptr, ptr, i1 }>
%ReturnStatement = type <{ i64, ptr }>
%ObjectType = type <{ i64, ptr }>
%EnumType = type <{ i64, ptr }>
%ConstId = type <{ i64, i64, i64 }>
%MemberExpression = type <{ i64, i1, i64, ptr, ptr, ptr }>
%CallExpression = type <{ i64, i1, i64, ptr, ptr, ptr }>
%WhileStatement = type <{ i64, ptr, ptr }>
%BinaryExpression = type <{ i64, i1, i64, ptr, ptr, i64, ptr }>
%BooleanType = type <{ i64 }>
%IntType = type <{ i64, i1 }>
%NewExpression = type <{ i64, i1, i64, ptr, ptr, i1, ptr }>
%PointerType = type <{ i64, ptr }>
%ArrayType = type <{ i64, ptr, i64 }>
%TupleType = type <{ i64, ptr }>
%ForStatement = type <{ i64, ptr, ptr, ptr, ptr, ptr }>
%VarAccessExpression = type <{ i64, i1, i64, ptr, ptr }>
%UnaryExpression = type <{ i64, i1, i64, ptr, i64, ptr }>
%GenericType = type <{ i64, ptr, ptr, ptr }>
%TernaryExpression = type <{ i64, i1, i64, ptr, ptr, ptr, ptr }>
%IfStatement = type <{ i64, ptr, ptr, ptr }>
%Generic = type <{ i64, ptr }>
%EnumId = type <{ i64, i64, i64 }>
%ClassId = type <{ i64, i64, i64 }>
%IndexExpression = type <{ i64, i1, i64, ptr, ptr, ptr }>
%IntExpression = type <{ i64, i1, i64, ptr, i64 }>
%Map_string_Generic_ = type <{ ptr, i64, i64 }>
%MapEntry_string_Generic_ = type <{ ptr, ptr }>
%MapIterator_string_Generic_ = type <{ i1, ptr, i64, i64 }>
%ModuleVarId = type <{ i64, i64, i64, ptr }>
%TupleExpression = type <{ i64, i1, i64, ptr, ptr }>
%ArrayExpression = type <{ i64, i1, i64, ptr, ptr }>
%FloatExpression = type <{ i64, i1, i64, ptr, double }>
%BooleanExpression = type <{ i64, i1, i64, ptr, i1 }>
%NullExpression = type <{ i64, i1, i64, ptr }>
%CodeGen = type <{ ptr, ptr, ptr, ptr, ptr, i1, ptr, ptr, ptr, ptr, ptr }>
%IntrinsicResult = type <{ ptr, ptr }>
%Map_string_LLVMValueRef_ = type <{ ptr, i64, i64 }>
%MapEntry_string_LLVMValueRef_ = type <{ ptr, ptr }>
%MapIterator_string_LLVMValueRef_ = type <{ i1, ptr, i64, i64 }>
%CGEnumType = type <{ ptr, ptr, ptr }>
%CGClassType = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%Map_string_uint_ = type <{ ptr, i64, i64 }>
%MapEntry_string_uint_ = type <{ ptr, i64 }>
%MapIterator_string_uint_ = type <{ i1, ptr, i64, i64 }>
%Map_string_CGClassType_ = type <{ ptr, i64, i64 }>
%MapEntry_string_CGClassType_ = type <{ ptr, ptr }>
%MapIterator_string_CGClassType_ = type <{ i1, ptr, i64, i64 }>
%Array_LLVMValueRef_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_LLVMValueRef_ = type <{ i1, i64, i64, ptr }>
%Array_LLVMTypeRef_ = type <{ ptr, ptr, i64, i64 }>
%MapIterator_string_CGEnumType_ = type <{ i1, ptr, i64, i64 }>
%MapEntry_string_CGEnumType_ = type <{ ptr, ptr }>
%ArrayIterator_LLVMTypeRef_ = type <{ i1, i64, i64, ptr }>
%Map_string_CGEnumType_ = type <{ ptr, i64, i64 }>

@VTablestring = global { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr } { ptr @string_find, ptr @string_substring, ptr @string_get_byte, ptr @string_get_bytes, ptr @string_replace, ptr @string_to_cstring, ptr @string_ends_with, ptr @string_starts_with }
@VTableArray_string_ = global { ptr, ptr, ptr } { ptr @Array_string__pop, ptr @Array_string__ensure_capacity, ptr @Array_string__find }
@STDOUT = constant i64 1
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@1 = private unnamed_addr constant [28 x i8] c"Usage: %s <path> [OPTIONS]\0A\00", align 1
@2 = private unnamed_addr constant [9 x i8] c"OPTIONS:\00", align 1
@3 = private unnamed_addr constant [38 x i8] c" -h, --help\09\09\09Show this help message.\00", align 1
@4 = private unnamed_addr constant [36 x i8] c" --print-ast\09\09\09Print generated AST.\00", align 1
@5 = private unnamed_addr constant [294 x i8] c" --emit <format>\09\09Emit output in a particular format. Options are:\0A  \09\09\09\09\09exe - Generates an executable.\0A  \09\09\09\09\09llvm-ir - Generates a file containing LLVM IR.\0A  \09\09\09\09\09llvm-bc - Generates a file containing LLVM bitcode.\0A  \09\09\09\09\09obj - Generates an object file\0A  \09\09\09\09\09asm - Generates Assembly code.\00", align 1
@6 = private unnamed_addr constant [50 x i8] c" -o <file>\09\09\09Specify file to put the output into.\00", align 1
@7 = private unnamed_addr constant [55 x i8] c" --target <triple>\09\09Compile to specific target triple.\00", align 1
@8 = private unnamed_addr constant [47 x i8] c" -l <lib>\09\09\09Specify a library to link against.\00", align 1
@9 = private unnamed_addr constant [34 x i8] c" -I\09\09\09\09Specify runtime directory.\00", align 1
@10 = private unnamed_addr constant [91 x i8] c" -O OPT_LEVEL \09\09\09Specify the compiler's optimization level which is a\0A \09\09\09\09value from 0-3.\00", align 1
@11 = private unnamed_addr constant [31 x i8] c" -v, --version\09\09\09Show version.\00", align 1
@12 = global [22 x i8] c"ErrorKind.ILLEGALCHAR\00"
@13 = global [15 x i8] c"ErrorKind.NAME\00"
@14 = global [17 x i8] c"ErrorKind.SYNTAX\00"
@15 = global [13 x i8] c"ErrorKind.IO\00"
@16 = global [14 x i8] c"ErrorKind.GEN\00"
@17 = global [15 x i8] c"ErrorKind.TYPE\00"
@ErrorKind_names = global [6 x ptr] [ptr @12, ptr @13, ptr @14, ptr @15, ptr @16, ptr @17]
@18 = global [11 x i8] c"COLORS.RED\00"
@19 = global [13 x i8] c"COLORS.RESET\00"
@COLORS_names = global [2 x ptr] [ptr @18, ptr @19]
@20 = private unnamed_addr constant [8 x i8] c"\1B[1;31m\00", align 1
@21 = private unnamed_addr constant [5 x i8] c"\1B[0m\00", align 1
@22 = private unnamed_addr constant [22 x i8] c"[Illegal Character]: \00", align 1
@23 = private unnamed_addr constant [17 x i8] c"[Syntax Error]: \00", align 1
@24 = private unnamed_addr constant [13 x i8] c"[IO Error]: \00", align 1
@25 = private unnamed_addr constant [15 x i8] c"[Type Error]: \00", align 1
@26 = private unnamed_addr constant [15 x i8] c"[Name Error]: \00", align 1
@27 = private unnamed_addr constant [10 x i8] c"[Error]: \00", align 1
@28 = private unnamed_addr constant [35 x i8] c"Missing value after '%s' argument.\00", align 1
@VTableGeneratedModule = global { ptr, ptr, ptr, ptr, ptr, ptr, ptr } { ptr @GeneratedModule_run_passes, ptr @GeneratedModule_exec, ptr @GeneratedModule_set_target_machine, ptr @GeneratedModule_write_obj, ptr @GeneratedModule_write_ir, ptr @GeneratedModule_write_bc, ptr @GeneratedModule_write_asm }
@29 = global [49 x i8] c"LLVMVerifierFailureAction.LLVMAbortProcessAction\00"
@30 = global [49 x i8] c"LLVMVerifierFailureAction.LLVMPrintMessageAction\00"
@31 = global [49 x i8] c"LLVMVerifierFailureAction.LLVMReturnStatusAction\00"
@LLVMVerifierFailureAction_names = global [3 x ptr] [ptr @29, ptr @30, ptr @31]
@32 = private unnamed_addr constant [9 x i8] c"error.ll\00", align 1
@33 = private unnamed_addr constant [8 x i8] c"Panic: \00", align 1
@34 = private unnamed_addr constant [10 x i8] c"error: %s\00", align 1
@35 = private unnamed_addr constant [5 x i8] c"main\00", align 1
@36 = private unnamed_addr constant [49 x i8] c"Main function not found in module; can't execute\00", align 1
@37 = global [41 x i8] c"LLVMCodeGenOptLevel.LLVMCodeGenLevelNone\00"
@38 = global [41 x i8] c"LLVMCodeGenOptLevel.LLVMCodeGenLevelLess\00"
@39 = global [44 x i8] c"LLVMCodeGenOptLevel.LLVMCodeGenLevelDefault\00"
@40 = global [47 x i8] c"LLVMCodeGenOptLevel.LLVMCodeGenLevelAggressive\00"
@LLVMCodeGenOptLevel_names = global [4 x ptr] [ptr @37, ptr @38, ptr @39, ptr @40]
@41 = global [31 x i8] c"LLVMRelocMode.LLVMRelocDefault\00"
@42 = global [30 x i8] c"LLVMRelocMode.LLVMRelocStatic\00"
@43 = global [27 x i8] c"LLVMRelocMode.LLVMRelocPIC\00"
@44 = global [36 x i8] c"LLVMRelocMode.LLVMRelocDynamicNoPic\00"
@45 = global [28 x i8] c"LLVMRelocMode.LLVMRelocROPI\00"
@46 = global [28 x i8] c"LLVMRelocMode.LLVMRelocRWPI\00"
@47 = global [33 x i8] c"LLVMRelocMode.LLVMRelocROPI_RWPI\00"
@LLVMRelocMode_names = global [7 x ptr] [ptr @41, ptr @42, ptr @43, ptr @44, ptr @45, ptr @46, ptr @47]
@48 = global [35 x i8] c"LLVMCodeModel.LLVMCodeModelDefault\00"
@49 = global [38 x i8] c"LLVMCodeModel.LLVMCodeModelJITDefault\00"
@50 = global [32 x i8] c"LLVMCodeModel.LLVMCodeModelTiny\00"
@51 = global [33 x i8] c"LLVMCodeModel.LLVMCodeModelSmall\00"
@52 = global [34 x i8] c"LLVMCodeModel.LLVMCodeModelKernel\00"
@53 = global [34 x i8] c"LLVMCodeModel.LLVMCodeModelMedium\00"
@54 = global [33 x i8] c"LLVMCodeModel.LLVMCodeModelLarge\00"
@LLVMCodeModel_names = global [7 x ptr] [ptr @48, ptr @49, ptr @50, ptr @51, ptr @52, ptr @53, ptr @54]
@55 = private unnamed_addr constant [8 x i8] c"generic\00", align 1
@56 = global [37 x i8] c"LLVMCodeGenFileType.LLVMAssemblyFile\00"
@57 = global [35 x i8] c"LLVMCodeGenFileType.LLVMObjectFile\00"
@LLVMCodeGenFileType_names = global [2 x ptr] [ptr @56, ptr @57]
@VTableArray_FloError_ = global { ptr, ptr, ptr } { ptr @Array_FloError__pop, ptr @Array_FloError__ensure_capacity, ptr @Array_FloError__find }
@VTableArray_FloFile_ = global { ptr, ptr, ptr } { ptr @Array_FloFile__pop, ptr @Array_FloFile__ensure_capacity, ptr @Array_FloFile__find }
@58 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@VTableCompiler = global { ptr, ptr, ptr, ptr, ptr, ptr } { ptr @Compiler_set_std_path, ptr @Compiler_register_file, ptr @Compiler_set_current_file, ptr @Compiler_print_errors, ptr @Compiler_add_builtins, ptr @Compiler___del__ }
@59 = private unnamed_addr constant [20 x i8] c"/usr/local/flo/lib/\00", align 1
@60 = private unnamed_addr constant [22 x i8] c"builtins/builtins.flo\00", align 1
@61 = private unnamed_addr constant [6 x i8] c"%s/%s\00", align 1
@62 = private unnamed_addr constant [2 x i8] c"@\00", align 1
@63 = private unnamed_addr constant [5 x i8] c".flo\00", align 1
@VTableFile = global { ptr, ptr, ptr, ptr, ptr } { ptr @File_read_all, ptr @File_read_bytes_length, ptr @File_write_bytes_length, ptr @File_write_string, ptr @File_close }
@R_OK = constant i64 4
@DEFFILEMODE = constant i64 438
@W_OK = constant i64 2
@O_CREAT = constant i64 64
@VTableStringBuilder = global { ptr, ptr, ptr, ptr } { ptr @StringBuilder_add_bytes_length, ptr @StringBuilder_append_string, ptr @StringBuilder_add_byte, ptr @StringBuilder_get_string }
@F_OK = constant i64 0
@64 = private unnamed_addr constant [19 x i8] c"File '%s', line %u\00", align 1
@65 = private unnamed_addr constant [2 x i8] c" \00", align 1
@66 = private unnamed_addr constant [2 x i8] c"^\00", align 1
@VTableArray_ScopeId_ = global { ptr, ptr, ptr } { ptr @Array_ScopeId__pop, ptr @Array_ScopeId__ensure_capacity, ptr @Array_ScopeId__find }
@67 = global [14 x i8] c"VarIdKind.FNC\00"
@68 = global [14 x i8] c"VarIdKind.VAR\00"
@69 = global [16 x i8] c"VarIdKind.CONST\00"
@70 = global [16 x i8] c"VarIdKind.CLASS\00"
@71 = global [15 x i8] c"VarIdKind.ENUM\00"
@72 = global [17 x i8] c"VarIdKind.MODULE\00"
@VarIdKind_names = global [6 x ptr] [ptr @67, ptr @68, ptr @69, ptr @70, ptr @71, ptr @72]
@73 = global [17 x i8] c"TypeIdKind.CLASS\00"
@74 = global [16 x i8] c"TypeIdKind.ENUM\00"
@TypeIdKind_names = global [2 x ptr] [ptr @73, ptr @74]
@75 = global [14 x i8] c"TypeKind.BOOL\00"
@76 = global [12 x i8] c"TypeKind.I4\00"
@77 = global [12 x i8] c"TypeKind.I8\00"
@78 = global [13 x i8] c"TypeKind.I16\00"
@79 = global [13 x i8] c"TypeKind.I32\00"
@80 = global [13 x i8] c"TypeKind.I64\00"
@81 = global [13 x i8] c"TypeKind.INT\00"
@82 = global [14 x i8] c"TypeKind.I128\00"
@83 = global [13 x i8] c"TypeKind.F32\00"
@84 = global [13 x i8] c"TypeKind.F64\00"
@85 = global [14 x i8] c"TypeKind.VOID\00"
@86 = global [16 x i8] c"TypeKind.OBJECT\00"
@87 = global [14 x i8] c"TypeKind.ENUM\00"
@88 = global [13 x i8] c"TypeKind.PTR\00"
@89 = global [15 x i8] c"TypeKind.ARRAY\00"
@90 = global [15 x i8] c"TypeKind.TUPLE\00"
@91 = global [13 x i8] c"TypeKind.FNC\00"
@92 = global [16 x i8] c"TypeKind.RECORD\00"
@93 = global [16 x i8] c"TypeKind.MODULE\00"
@94 = global [26 x i8] c"TypeKind.GENERIC_TEMPLATE\00"
@95 = global [26 x i8] c"TypeKind.RESOLVED_GENERIC\00"
@96 = global [17 x i8] c"TypeKind.UNKNOWN\00"
@TypeKind_names = global [22 x ptr] [ptr @75, ptr @76, ptr @77, ptr @78, ptr @79, ptr @80, ptr @81, ptr @82, ptr @83, ptr @84, ptr @85, ptr @86, ptr @87, ptr @88, ptr @89, ptr @90, ptr @91, ptr @92, ptr @93, ptr @94, ptr @95, ptr @96]
@VTableArray_Scope_ = global { ptr, ptr, ptr } { ptr @Array_Scope__pop, ptr @Array_Scope__ensure_capacity, ptr @Array_Scope__find }
@97 = global [17 x i8] c"StatementKind.IF\00"
@98 = global [18 x i8] c"StatementKind.VAR\00"
@99 = global [20 x i8] c"StatementKind.CONST\00"
@100 = global [18 x i8] c"StatementKind.FOR\00"
@101 = global [20 x i8] c"StatementKind.WHILE\00"
@102 = global [23 x i8] c"StatementKind.CONTINUE\00"
@103 = global [20 x i8] c"StatementKind.BREAK\00"
@104 = global [21 x i8] c"StatementKind.RETURN\00"
@105 = global [25 x i8] c"StatementKind.EXPRESSION\00"
@StatementKind_names = global [9 x ptr] [ptr @97, ptr @98, ptr @99, ptr @100, ptr @101, ptr @102, ptr @103, ptr @104, ptr @105]
@VTableArray_VarDeclaration_ = global { ptr, ptr, ptr } { ptr @Array_VarDeclaration__pop, ptr @Array_VarDeclaration__ensure_capacity, ptr @Array_VarDeclaration__find }
@106 = global [19 x i8] c"ExpressionKind.INT\00"
@107 = global [21 x i8] c"ExpressionKind.FLOAT\00"
@108 = global [22 x i8] c"ExpressionKind.STRING\00"
@109 = global [20 x i8] c"ExpressionKind.CHAR\00"
@110 = global [20 x i8] c"ExpressionKind.BOOL\00"
@111 = global [20 x i8] c"ExpressionKind.NULL\00"
@112 = global [21 x i8] c"ExpressionKind.ARRAY\00"
@113 = global [21 x i8] c"ExpressionKind.TUPLE\00"
@114 = global [22 x i8] c"ExpressionKind.ACCESS\00"
@115 = global [19 x i8] c"ExpressionKind.BIN\00"
@116 = global [21 x i8] c"ExpressionKind.UNARY\00"
@117 = global [20 x i8] c"ExpressionKind.CAST\00"
@118 = global [19 x i8] c"ExpressionKind.NEW\00"
@119 = global [22 x i8] c"ExpressionKind.MEMBER\00"
@120 = global [21 x i8] c"ExpressionKind.INDEX\00"
@121 = global [20 x i8] c"ExpressionKind.CALL\00"
@122 = global [23 x i8] c"ExpressionKind.TERNARY\00"
@123 = global [21 x i8] c"ExpressionKind.MATCH\00"
@124 = global [25 x i8] c"ExpressionKind.INTRINSIC\00"
@ExpressionKind_names = global [19 x ptr] [ptr @106, ptr @107, ptr @108, ptr @109, ptr @110, ptr @111, ptr @112, ptr @113, ptr @114, ptr @115, ptr @116, ptr @117, ptr @118, ptr @119, ptr @120, ptr @121, ptr @122, ptr @123, ptr @124]
@VTableArray_Var_ = global { ptr, ptr, ptr } { ptr @Array_Var__pop, ptr @Array_Var__ensure_capacity, ptr @Array_Var__find }
@VTableArray_ConstDeclaration_ = global { ptr, ptr, ptr } { ptr @Array_ConstDeclaration__pop, ptr @Array_ConstDeclaration__ensure_capacity, ptr @Array_ConstDeclaration__find }
@125 = global [18 x i8] c"PropIdKind.METHOD\00"
@126 = global [17 x i8] c"PropIdKind.FIELD\00"
@PropIdKind_names = global [2 x ptr] [ptr @125, ptr @126]
@VTableArray_EnumField_ = global { ptr, ptr, ptr } { ptr @Array_EnumField__pop, ptr @Array_EnumField__ensure_capacity, ptr @Array_EnumField__find }
@VTableArray_Enum_ = global { ptr, ptr, ptr } { ptr @Array_Enum__pop, ptr @Array_Enum__ensure_capacity, ptr @Array_Enum__find }
@VTableArray_Const_ = global { ptr, ptr, ptr } { ptr @Array_Const__pop, ptr @Array_Const__ensure_capacity, ptr @Array_Const__find }
@VTableArray_FunctionArg_ = global { ptr, ptr, ptr } { ptr @Array_FunctionArg__pop, ptr @Array_FunctionArg__ensure_capacity, ptr @Array_FunctionArg__find }
@VTableArray_Statement_ = global { ptr, ptr, ptr } { ptr @Array_Statement__pop, ptr @Array_Statement__ensure_capacity, ptr @Array_Statement__find }
@127 = global [18 x i8] c"ACCESS_ATTR.UNDEF\00"
@128 = global [20 x i8] c"ACCESS_ATTR.PRIVATE\00"
@129 = global [19 x i8] c"ACCESS_ATTR.PUBLIC\00"
@130 = global [22 x i8] c"ACCESS_ATTR.PROTECTED\00"
@ACCESS_ATTR_names = global [4 x ptr] [ptr @127, ptr @128, ptr @129, ptr @130]
@VTableArray_Type_ = global { ptr, ptr, ptr } { ptr @Array_Type__pop, ptr @Array_Type__ensure_capacity, ptr @Array_Type__find }
@VTableArray_ClassMethod_ = global { ptr, ptr, ptr } { ptr @Array_ClassMethod__pop, ptr @Array_ClassMethod__ensure_capacity, ptr @Array_ClassMethod__find }
@VTableArray_ClassField_ = global { ptr, ptr, ptr } { ptr @Array_ClassField__pop, ptr @Array_ClassField__ensure_capacity, ptr @Array_ClassField__find }
@VTableArray_Class_ = global { ptr, ptr, ptr } { ptr @Array_Class__pop, ptr @Array_Class__ensure_capacity, ptr @Array_Class__find }
@VTableArray_Function_ = global { ptr, ptr, ptr } { ptr @Array_Function__pop, ptr @Array_Function__ensure_capacity, ptr @Array_Function__find }
@VTableArray_Module_ = global { ptr, ptr, ptr } { ptr @Array_Module__pop, ptr @Array_Module__ensure_capacity, ptr @Array_Module__find }
@131 = global [16 x i8] c"TokType.ILLEGAL\00"
@132 = global [12 x i8] c"TokType.COL\00"
@133 = global [16 x i8] c"TokType.SEMICOL\00"
@134 = global [14 x i8] c"TokType.COMMA\00"
@135 = global [13 x i8] c"TokType.MULT\00"
@136 = global [14 x i8] c"TokType.MINUS\00"
@137 = global [13 x i8] c"TokType.PLUS\00"
@138 = global [12 x i8] c"TokType.DIV\00"
@139 = global [15 x i8] c"TokType.AND_KW\00"
@140 = global [14 x i8] c"TokType.OR_KW\00"
@141 = global [12 x i8] c"TokType.MOD\00"
@142 = global [12 x i8] c"TokType.POW\00"
@143 = global [16 x i8] c"TokType.MULT_EQ\00"
@144 = global [17 x i8] c"TokType.MINUS_EQ\00"
@145 = global [16 x i8] c"TokType.PLUS_EQ\00"
@146 = global [15 x i8] c"TokType.DIV_EQ\00"
@147 = global [15 x i8] c"TokType.MOD_EQ\00"
@148 = global [15 x i8] c"TokType.POW_EQ\00"
@149 = global [15 x i8] c"TokType.AND_EQ\00"
@150 = global [14 x i8] c"TokType.OR_EQ\00"
@151 = global [15 x i8] c"TokType.XOR_EQ\00"
@152 = global [14 x i8] c"TokType.SR_EQ\00"
@153 = global [14 x i8] c"TokType.SL_EQ\00"
@154 = global [18 x i8] c"TokType.PLUS_PLUS\00"
@155 = global [20 x i8] c"TokType.MINUS_MINUS\00"
@156 = global [13 x i8] c"TokType.LPAR\00"
@157 = global [13 x i8] c"TokType.RPAR\00"
@158 = global [15 x i8] c"TokType.LBRACE\00"
@159 = global [15 x i8] c"TokType.RBRACE\00"
@160 = global [17 x i8] c"TokType.LBRACKET\00"
@161 = global [17 x i8] c"TokType.RBRACKET\00"
@162 = global [12 x i8] c"TokType.INT\00"
@163 = global [14 x i8] c"TokType.FLOAT\00"
@164 = global [11 x i8] c"TokType.LN\00"
@165 = global [12 x i8] c"TokType.STR\00"
@166 = global [13 x i8] c"TokType.CHAR\00"
@167 = global [13 x i8] c"TokType.QUES\00"
@168 = global [12 x i8] c"TokType.AMP\00"
@169 = global [11 x i8] c"TokType.EQ\00"
@170 = global [12 x i8] c"TokType.EEQ\00"
@171 = global [12 x i8] c"TokType.NEQ\00"
@172 = global [11 x i8] c"TokType.GT\00"
@173 = global [11 x i8] c"TokType.LT\00"
@174 = global [12 x i8] c"TokType.LTE\00"
@175 = global [12 x i8] c"TokType.GTE\00"
@176 = global [14 x i8] c"TokType.ARROW\00"
@177 = global [12 x i8] c"TokType.EOF\00"
@178 = global [12 x i8] c"TokType.NOT\00"
@179 = global [11 x i8] c"TokType.SL\00"
@180 = global [11 x i8] c"TokType.SR\00"
@181 = global [12 x i8] c"TokType.DOT\00"
@182 = global [12 x i8] c"TokType.XOR\00"
@183 = global [16 x i8] c"TokType.DOT_DOT\00"
@184 = global [18 x i8] c"TokType.IDENTIFER\00"
@185 = global [17 x i8] c"TokType.CONST_KW\00"
@186 = global [15 x i8] c"TokType.LET_KW\00"
@187 = global [14 x i8] c"TokType.IF_KW\00"
@188 = global [17 x i8] c"TokType.MATCH_KW\00"
@189 = global [16 x i8] c"TokType.ELSE_KW\00"
@190 = global [15 x i8] c"TokType.FOR_KW\00"
@191 = global [17 x i8] c"TokType.WHILE_KW\00"
@192 = global [15 x i8] c"TokType.FNC_KW\00"
@193 = global [17 x i8] c"TokType.BREAK_KW\00"
@194 = global [20 x i8] c"TokType.CONTINUE_KW\00"
@195 = global [18 x i8] c"TokType.RETURN_KW\00"
@196 = global [18 x i8] c"TokType.IMPORT_KW\00"
@197 = global [19 x i8] c"TokType.PRIVATE_KW\00"
@198 = global [18 x i8] c"TokType.PUBLIC_KW\00"
@199 = global [21 x i8] c"TokType.PROTECTED_KW\00"
@200 = global [14 x i8] c"TokType.IN_KW\00"
@201 = global [17 x i8] c"TokType.CLASS_KW\00"
@202 = global [16 x i8] c"TokType.ENUM_KW\00"
@203 = global [15 x i8] c"TokType.NEW_KW\00"
@204 = global [15 x i8] c"TokType.DEL_KW\00"
@205 = global [14 x i8] c"TokType.AS_KW\00"
@TokType_names = global [75 x ptr] [ptr @131, ptr @132, ptr @133, ptr @134, ptr @135, ptr @136, ptr @137, ptr @138, ptr @139, ptr @140, ptr @141, ptr @142, ptr @143, ptr @144, ptr @145, ptr @146, ptr @147, ptr @148, ptr @149, ptr @150, ptr @151, ptr @152, ptr @153, ptr @154, ptr @155, ptr @156, ptr @157, ptr @158, ptr @159, ptr @160, ptr @161, ptr @162, ptr @163, ptr @164, ptr @165, ptr @166, ptr @167, ptr @168, ptr @169, ptr @170, ptr @171, ptr @172, ptr @173, ptr @174, ptr @175, ptr @176, ptr @177, ptr @178, ptr @179, ptr @180, ptr @181, ptr @182, ptr @183, ptr @184, ptr @185, ptr @186, ptr @187, ptr @188, ptr @189, ptr @190, ptr @191, ptr @192, ptr @193, ptr @194, ptr @195, ptr @196, ptr @197, ptr @198, ptr @199, ptr @200, ptr @201, ptr @202, ptr @203, ptr @204, ptr @205]
@VTableArray_Token_ = global { ptr, ptr, ptr } { ptr @Array_Token__pop, ptr @Array_Token__ensure_capacity, ptr @Array_Token__find }
@VTableArray_Array_Token__ = global { ptr, ptr, ptr } { ptr @Array_Array_Token___pop, ptr @Array_Array_Token___ensure_capacity, ptr @Array_Array_Token___find }
@VTableArray_uint_ = global { ptr, ptr, ptr } { ptr @Array_uint__pop, ptr @Array_uint__ensure_capacity, ptr @Array_uint__find }
@VTableArray_ImportClause_ = global { ptr, ptr, ptr } { ptr @Array_ImportClause__pop, ptr @Array_ImportClause__ensure_capacity, ptr @Array_ImportClause__find }
@VTableArray_ImportNode_ = global { ptr, ptr, ptr } { ptr @Array_ImportNode__pop, ptr @Array_ImportNode__ensure_capacity, ptr @Array_ImportNode__find }
@VTableArray_VarDeclarationStatement_ = global { ptr, ptr, ptr } { ptr @Array_VarDeclarationStatement__pop, ptr @Array_VarDeclarationStatement__ensure_capacity, ptr @Array_VarDeclarationStatement__find }
@VTableArray_EnumNodeField_ = global { ptr, ptr, ptr } { ptr @Array_EnumNodeField__pop, ptr @Array_EnumNodeField__ensure_capacity, ptr @Array_EnumNodeField__find }
@VTableArray_EnumNode_ = global { ptr, ptr, ptr } { ptr @Array_EnumNode__pop, ptr @Array_EnumNode__ensure_capacity, ptr @Array_EnumNode__find }
@VTableArray_TypeAliasNode_ = global { ptr, ptr, ptr } { ptr @Array_TypeAliasNode__pop, ptr @Array_TypeAliasNode__ensure_capacity, ptr @Array_TypeAliasNode__find }
@VTableArray_ConstDeclarationStatement_ = global { ptr, ptr, ptr } { ptr @Array_ConstDeclarationStatement__pop, ptr @Array_ConstDeclarationStatement__ensure_capacity, ptr @Array_ConstDeclarationStatement__find }
@VTableArray_ArgNode_ = global { ptr, ptr, ptr } { ptr @Array_ArgNode__pop, ptr @Array_ArgNode__ensure_capacity, ptr @Array_ArgNode__find }
@VTableArray_StatementNode_ = global { ptr, ptr, ptr } { ptr @Array_StatementNode__pop, ptr @Array_StatementNode__ensure_capacity, ptr @Array_StatementNode__find }
@VTableArray_MethodNode_ = global { ptr, ptr, ptr } { ptr @Array_MethodNode__pop, ptr @Array_MethodNode__ensure_capacity, ptr @Array_MethodNode__find }
@VTableArray_FieldNode_ = global { ptr, ptr, ptr } { ptr @Array_FieldNode__pop, ptr @Array_FieldNode__ensure_capacity, ptr @Array_FieldNode__find }
@VTableArray_TypeNode_ = global { ptr, ptr, ptr } { ptr @Array_TypeNode__pop, ptr @Array_TypeNode__ensure_capacity, ptr @Array_TypeNode__find }
@VTableArray_GenericParameterNode_ = global { ptr, ptr, ptr } { ptr @Array_GenericParameterNode__pop, ptr @Array_GenericParameterNode__ensure_capacity, ptr @Array_GenericParameterNode__find }
@VTableArray_ClassDeclarationNode_ = global { ptr, ptr, ptr } { ptr @Array_ClassDeclarationNode__pop, ptr @Array_ClassDeclarationNode__ensure_capacity, ptr @Array_ClassDeclarationNode__find }
@VTableArray_FunctionDeclarationNode_ = global { ptr, ptr, ptr } { ptr @Array_FunctionDeclarationNode__pop, ptr @Array_FunctionDeclarationNode__ensure_capacity, ptr @Array_FunctionDeclarationNode__find }
@206 = private unnamed_addr constant [3 x i8] c"-v\00", align 1
@207 = private unnamed_addr constant [10 x i8] c"--version\00", align 1
@208 = private unnamed_addr constant [6 x i8] c"0.0.1\00", align 1
@209 = private unnamed_addr constant [3 x i8] c"-h\00", align 1
@210 = private unnamed_addr constant [7 x i8] c"--help\00", align 1
@211 = private unnamed_addr constant [3 x i8] c"-I\00", align 1
@212 = private unnamed_addr constant [32 x i8] c"No such file or directory: '%s'\00", align 1
@213 = private unnamed_addr constant [4 x i8] c"and\00", align 1
@214 = private unnamed_addr constant [3 x i8] c"or\00", align 1
@215 = private unnamed_addr constant [6 x i8] c"const\00", align 1
@216 = private unnamed_addr constant [4 x i8] c"let\00", align 1
@217 = private unnamed_addr constant [3 x i8] c"if\00", align 1
@218 = private unnamed_addr constant [6 x i8] c"match\00", align 1
@219 = private unnamed_addr constant [5 x i8] c"else\00", align 1
@220 = private unnamed_addr constant [4 x i8] c"for\00", align 1
@221 = private unnamed_addr constant [6 x i8] c"while\00", align 1
@222 = private unnamed_addr constant [4 x i8] c"fnc\00", align 1
@223 = private unnamed_addr constant [6 x i8] c"break\00", align 1
@224 = private unnamed_addr constant [9 x i8] c"continue\00", align 1
@225 = private unnamed_addr constant [7 x i8] c"return\00", align 1
@226 = private unnamed_addr constant [7 x i8] c"import\00", align 1
@227 = private unnamed_addr constant [8 x i8] c"private\00", align 1
@228 = private unnamed_addr constant [7 x i8] c"public\00", align 1
@229 = private unnamed_addr constant [10 x i8] c"protected\00", align 1
@230 = private unnamed_addr constant [3 x i8] c"in\00", align 1
@231 = private unnamed_addr constant [6 x i8] c"class\00", align 1
@232 = private unnamed_addr constant [5 x i8] c"enum\00", align 1
@233 = private unnamed_addr constant [4 x i8] c"new\00", align 1
@234 = private unnamed_addr constant [4 x i8] c"del\00", align 1
@235 = private unnamed_addr constant [3 x i8] c"as\00", align 1
@236 = private unnamed_addr constant [4 x i8] c"033\00", align 1
@237 = private unnamed_addr constant [4 x i8] c"x1b\00", align 1
@238 = private unnamed_addr constant [2 x i8] c"\1B\00", align 1
@239 = private unnamed_addr constant [6 x i8] c"u001b\00", align 1
@240 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@241 = private unnamed_addr constant [24 x i8] c"Illegal character: '%s'\00", align 1
@242 = global [15 x i8] c"BinaryOp.UNDEF\00"
@243 = global [13 x i8] c"BinaryOp.ADD\00"
@244 = global [13 x i8] c"BinaryOp.SUB\00"
@245 = global [13 x i8] c"BinaryOp.MUL\00"
@246 = global [13 x i8] c"BinaryOp.DIV\00"
@247 = global [13 x i8] c"BinaryOp.MOD\00"
@248 = global [13 x i8] c"BinaryOp.POW\00"
@249 = global [12 x i8] c"BinaryOp.GT\00"
@250 = global [13 x i8] c"BinaryOp.GTE\00"
@251 = global [12 x i8] c"BinaryOp.LT\00"
@252 = global [13 x i8] c"BinaryOp.LTE\00"
@253 = global [13 x i8] c"BinaryOp.EEQ\00"
@254 = global [13 x i8] c"BinaryOp.NEQ\00"
@255 = global [12 x i8] c"BinaryOp.SL\00"
@256 = global [12 x i8] c"BinaryOp.SR\00"
@257 = global [12 x i8] c"BinaryOp.OR\00"
@258 = global [13 x i8] c"BinaryOp.AND\00"
@259 = global [13 x i8] c"BinaryOp.XOR\00"
@260 = global [12 x i8] c"BinaryOp.IN\00"
@261 = global [16 x i8] c"BinaryOp.ASSIGN\00"
@262 = global [20 x i8] c"BinaryOp.ADD_ASSIGN\00"
@263 = global [20 x i8] c"BinaryOp.SUB_ASSIGN\00"
@264 = global [20 x i8] c"BinaryOp.MUL_ASSIGN\00"
@265 = global [20 x i8] c"BinaryOp.DIV_ASSIGN\00"
@266 = global [20 x i8] c"BinaryOp.MOD_ASSIGN\00"
@267 = global [20 x i8] c"BinaryOp.POW_ASSIGN\00"
@268 = global [20 x i8] c"BinaryOp.AND_ASSIGN\00"
@269 = global [19 x i8] c"BinaryOp.OR_ASSIGN\00"
@270 = global [20 x i8] c"BinaryOp.XOR_ASSIGN\00"
@271 = global [19 x i8] c"BinaryOp.SL_ASSIGN\00"
@272 = global [19 x i8] c"BinaryOp.SR_ASSIGN\00"
@273 = global [15 x i8] c"BinaryOp.RANGE\00"
@BinaryOp_names = global [32 x ptr] [ptr @242, ptr @243, ptr @244, ptr @245, ptr @246, ptr @247, ptr @248, ptr @249, ptr @250, ptr @251, ptr @252, ptr @253, ptr @254, ptr @255, ptr @256, ptr @257, ptr @258, ptr @259, ptr @260, ptr @261, ptr @262, ptr @263, ptr @264, ptr @265, ptr @266, ptr @267, ptr @268, ptr @269, ptr @270, ptr @271, ptr @272, ptr @273]
@VTableArray_ExpressionNode_ = global { ptr, ptr, ptr } { ptr @Array_ExpressionNode__pop, ptr @Array_ExpressionNode__ensure_capacity, ptr @Array_ExpressionNode__find }
@274 = global [12 x i8] c"ForKind.DEF\00"
@275 = global [11 x i8] c"ForKind.IN\00"
@ForKind_names = global [2 x ptr] [ptr @274, ptr @275]
@276 = global [14 x i8] c"UnaryOp.UNDEF\00"
@277 = global [12 x i8] c"UnaryOp.DEL\00"
@278 = global [16 x i8] c"UnaryOp.PREINCR\00"
@279 = global [16 x i8] c"UnaryOp.PREDECR\00"
@280 = global [17 x i8] c"UnaryOp.POSTINCR\00"
@281 = global [17 x i8] c"UnaryOp.POSTDECR\00"
@282 = global [12 x i8] c"UnaryOp.NEG\00"
@283 = global [12 x i8] c"UnaryOp.NOT\00"
@284 = global [15 x i8] c"UnaryOp.ADDROF\00"
@UnaryOp_names = global [9 x ptr] [ptr @276, ptr @277, ptr @278, ptr @279, ptr @280, ptr @281, ptr @282, ptr @283, ptr @284]
@285 = private unnamed_addr constant [23 x i8] c"Expected an Identifier\00", align 1
@286 = private unnamed_addr constant [13 x i8] c"Expected '='\00", align 1
@287 = private unnamed_addr constant [13 x i8] c"Expected ':'\00", align 1
@288 = private unnamed_addr constant [13 x i8] c"Expected '('\00", align 1
@289 = private unnamed_addr constant [13 x i8] c"Expected ')'\00", align 1
@290 = private unnamed_addr constant [13 x i8] c"Expected '{'\00", align 1
@291 = private unnamed_addr constant [13 x i8] c"Expected '}'\00", align 1
@292 = private unnamed_addr constant [13 x i8] c"Expected ','\00", align 1
@293 = private unnamed_addr constant [13 x i8] c"Expected '<'\00", align 1
@294 = private unnamed_addr constant [13 x i8] c"Expected '>'\00", align 1
@295 = private unnamed_addr constant [14 x i8] c"Expected '->'\00", align 1
@296 = private unnamed_addr constant [4 x i8] c"Map\00", align 1
@297 = private unnamed_addr constant [6 x i8] c"Array\00", align 1
@298 = private unnamed_addr constant [29 x i8] c"Expected an Expression value\00", align 1
@VTableArray_MatchExpressionCaseNode_ = global { ptr, ptr, ptr } { ptr @Array_MatchExpressionCaseNode__pop, ptr @Array_MatchExpressionCaseNode__ensure_capacity, ptr @Array_MatchExpressionCaseNode__find }
@299 = private unnamed_addr constant [29 x i8] c"'%s' has no type information\00", align 1
@300 = private unnamed_addr constant [5 x i8] c"void\00", align 1
@301 = private unnamed_addr constant [5 x i8] c"this\00", align 1
@302 = private unnamed_addr constant [20 x i8] c"Expected ':' or '('\00", align 1
@303 = private unnamed_addr constant [5 x i8] c"type\00", align 1
@304 = private unnamed_addr constant [88 x i8] c"Illegal expression expected: 'fnc', 'class', 'type', 'enum', 'import', 'const' or 'let'\00", align 1
@VTableArray_Expression_ = global { ptr, ptr, ptr } { ptr @Array_Expression__pop, ptr @Array_Expression__ensure_capacity, ptr @Array_Expression__find }
@305 = global [18 x i8] c"MatchCaseKind.VAL\00"
@306 = global [18 x i8] c"MatchCaseKind.EEQ\00"
@MatchCaseKind_names = global [2 x ptr] [ptr @305, ptr @306]
@VTableArray_MatchExpressionCase_ = global { ptr, ptr, ptr } { ptr @Array_MatchExpressionCase__pop, ptr @Array_MatchExpressionCase__ensure_capacity, ptr @Array_MatchExpressionCase__find }
@307 = global [20 x i8] c"Intrinsics.STR_TO_F\00"
@308 = global [20 x i8] c"Intrinsics.STR_TO_I\00"
@309 = global [20 x i8] c"Intrinsics.STR_TO_L\00"
@310 = global [18 x i8] c"Intrinsics.MEMCPY\00"
@311 = global [19 x i8] c"Intrinsics.MEMMOVE\00"
@312 = global [18 x i8] c"Intrinsics.MEMSET\00"
@313 = global [21 x i8] c"Intrinsics.MEMRESIZE\00"
@314 = global [18 x i8] c"Intrinsics.MEMCMP\00"
@Intrinsics_names = global [8 x ptr] [ptr @307, ptr @308, ptr @309, ptr @310, ptr @311, ptr @312, ptr @313, ptr @314]
@315 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@316 = private unnamed_addr constant [3 x i8] c", \00", align 1
@317 = private unnamed_addr constant [11 x i8] c"(%s) => %s\00", align 1
@318 = private unnamed_addr constant [4 x i8] c"%s*\00", align 1
@319 = private unnamed_addr constant [7 x i8] c"%s[%u]\00", align 1
@320 = private unnamed_addr constant [5 x i8] c"(%s)\00", align 1
@321 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@322 = private unnamed_addr constant [2 x i8] c">\00", align 1
@323 = private unnamed_addr constant [10 x i8] c"Namespace\00", align 1
@324 = private unnamed_addr constant [7 x i8] c"Record\00", align 1
@325 = private unnamed_addr constant [5 x i8] c"bool\00", align 1
@ARCH_WORD_SIZE = constant i64 64
@326 = private unnamed_addr constant [4 x i8] c"i%u\00", align 1
@327 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@328 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@329 = private unnamed_addr constant [2 x i8] c"i\00", align 1
@330 = private unnamed_addr constant [2 x i8] c"u\00", align 1
@331 = private unnamed_addr constant [4 x i8] c"%s4\00", align 1
@332 = private unnamed_addr constant [4 x i8] c"%s8\00", align 1
@333 = private unnamed_addr constant [5 x i8] c"%s16\00", align 1
@334 = private unnamed_addr constant [5 x i8] c"%s32\00", align 1
@335 = private unnamed_addr constant [5 x i8] c"%s64\00", align 1
@336 = private unnamed_addr constant [6 x i8] c"%s128\00", align 1
@337 = private unnamed_addr constant [4 x i8] c"f32\00", align 1
@338 = private unnamed_addr constant [4 x i8] c"f64\00", align 1
@339 = private unnamed_addr constant [7 x i8] c"record\00", align 1
@340 = private unnamed_addr constant [8 x i8] c"unknown\00", align 1
@341 = private unnamed_addr constant [13 x i8] c"__generics__\00", align 1
@342 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@343 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@344 = private unnamed_addr constant [5 x i8] c"null\00", align 1
@345 = private unnamed_addr constant [68 x i8] c"Name '%s' has already been used for another type. consider renaming\00", align 1
@346 = private unnamed_addr constant [41 x i8] c"Generic expects %u parameters but got %u\00", align 1
@347 = private unnamed_addr constant [4 x i8] c"%s_\00", align 1
@348 = private unnamed_addr constant [6 x i8] c"%s_%s\00", align 1
@349 = private unnamed_addr constant [55 x i8] c"Initilializer for global variable has to be a constant\00", align 1
@350 = private unnamed_addr constant [56 x i8] c"Expected type of '%s' but got type of '%s' on signature\00", align 1
@351 = private unnamed_addr constant [52 x i8] c"Import statement path can't be a a formatted string\00", align 1
@352 = private unnamed_addr constant [28 x i8] c"%s not found in module \22\22%s\00", align 1
@353 = private unnamed_addr constant [37 x i8] c"Illegal re-declaration of const '%s'\00", align 1
@354 = private unnamed_addr constant [48 x i8] c"Illegal re-declaration of type '%s' as function\00", align 1
@355 = private unnamed_addr constant [53 x i8] c"Expected an int type for enum type but got type '%s'\00", align 1
@356 = private unnamed_addr constant [38 x i8] c"Enum initializer has to be a constant\00", align 1
@357 = private unnamed_addr constant [36 x i8] c"Expected type '%s' but got type '%s\00", align 1
@358 = private unnamed_addr constant [7 x i8] c"__eq__\00", align 1
@359 = private unnamed_addr constant [8 x i8] c"__add__\00", align 1
@360 = private unnamed_addr constant [8 x i8] c"__sub__\00", align 1
@361 = private unnamed_addr constant [8 x i8] c"__mul__\00", align 1
@362 = private unnamed_addr constant [8 x i8] c"__div__\00", align 1
@363 = private unnamed_addr constant [7 x i8] c"__or__\00", align 1
@364 = private unnamed_addr constant [9 x i8] c"__adda__\00", align 1
@365 = private unnamed_addr constant [9 x i8] c"__suba__\00", align 1
@366 = private unnamed_addr constant [9 x i8] c"__mula__\00", align 1
@367 = private unnamed_addr constant [9 x i8] c"__diva__\00", align 1
@368 = private unnamed_addr constant [8 x i8] c"__ora__\00", align 1
@369 = private unnamed_addr constant [9 x i8] c"__anda__\00", align 1
@370 = private unnamed_addr constant [9 x i8] c"__xora__\00", align 1
@371 = private unnamed_addr constant [12 x i8] c"__getitem__\00", align 1
@372 = private unnamed_addr constant [12 x i8] c"__setitem__\00", align 1
@373 = private unnamed_addr constant [7 x i8] c"__sl__\00", align 1
@374 = private unnamed_addr constant [7 x i8] c"__sr__\00", align 1
@375 = private unnamed_addr constant [8 x i8] c"__sla__\00", align 1
@376 = private unnamed_addr constant [8 x i8] c"__sra__\00", align 1
@377 = private unnamed_addr constant [7 x i8] c"__in__\00", align 1
@378 = private unnamed_addr constant [7 x i8] c"__lt__\00", align 1
@379 = private unnamed_addr constant [7 x i8] c"__lg__\00", align 1
@380 = private unnamed_addr constant [7 x i8] c"__ne__\00", align 1
@381 = private unnamed_addr constant [7 x i8] c"__le__\00", align 1
@382 = private unnamed_addr constant [7 x i8] c"__ge__\00", align 1
@383 = private unnamed_addr constant [8 x i8] c"__pow__\00", align 1
@384 = private unnamed_addr constant [8 x i8] c"__mod__\00", align 1
@385 = private unnamed_addr constant [9 x i8] c"__powa__\00", align 1
@386 = private unnamed_addr constant [9 x i8] c"__moda__\00", align 1
@387 = private unnamed_addr constant [9 x i8] c"__iter__\00", align 1
@388 = private unnamed_addr constant [8 x i8] c"__del__\00", align 1
@389 = private unnamed_addr constant [76 x i8] c" is reserved only for operator overloads and cannot be used as a field name\00", align 1
@390 = private unnamed_addr constant [36 x i8] c"Field %s in class %s already exists\00", align 1
@391 = private unnamed_addr constant [89 x i8] c"Signature of inherited field %s in class %s does not match expected parent signature '%s\00", align 1
@392 = private unnamed_addr constant [49 x i8] c"Expected inherited field %s in class %s to be %s\00", align 1
@393 = private unnamed_addr constant [68 x i8] c"Expected type '%s' but got type '%s' on static field initialization\00", align 1
@394 = private unnamed_addr constant [46 x i8] c"Static field initializer has to be a constant\00", align 1
@395 = private unnamed_addr constant [5 x i8] c"done\00", align 1
@396 = private unnamed_addr constant [5 x i8] c"next\00", align 1
@397 = private unnamed_addr constant [65 x i8] c"Expected %u arguments for binary operator overload %s but got %u\00", align 1
@398 = private unnamed_addr constant [45 x i8] c"Binary operator overload %s cannot be static\00", align 1
@399 = private unnamed_addr constant [75 x i8] c"__iter__ method must return an iteratable object {done: bool, next(): any}\00", align 1
@400 = private unnamed_addr constant [37 x i8] c"Method %s in class %s already exists\00", align 1
@401 = private unnamed_addr constant [91 x i8] c"Signature of inherited method %s in class %s does not match expected parent signature '%s'\00", align 1
@402 = private unnamed_addr constant [50 x i8] c"Expected inherited method %s in class %s to be %s\00", align 1
@403 = private unnamed_addr constant [32 x i8] c"Static method can't be abstract\00", align 1
@404 = private unnamed_addr constant [12 x i8] c"constructor\00", align 1
@405 = private unnamed_addr constant [34 x i8] c"Class constructor can't be static\00", align 1
@406 = private unnamed_addr constant [36 x i8] c"Class constructor can't be abstract\00", align 1
@407 = private unnamed_addr constant [59 x i8] c"Can't have a abstract private method use protected instead\00", align 1
@408 = private unnamed_addr constant [6 x i8] c"super\00", align 1
@409 = private unnamed_addr constant [42 x i8] c"Can only inherit from class not type '%s'\00", align 1
@410 = private unnamed_addr constant [81 x i8] c"Class with constructor must implement all it's methods missing %s implementation\00", align 1
@411 = private unnamed_addr constant [39 x i8] c"Method missing ending return statement\00", align 1
@412 = private unnamed_addr constant [41 x i8] c"Function missing ending return statement\00", align 1
@413 = private unnamed_addr constant [24 x i8] c"length has to be an int\00", align 1
@414 = private unnamed_addr constant [24 x i8] c"length has to be a uint\00", align 1
@415 = private unnamed_addr constant [31 x i8] c"length is a non-constant value\00", align 1
@416 = private unnamed_addr constant [29 x i8] c"length should be an unsigned\00", align 1
@417 = private unnamed_addr constant [3 x i8] c"u4\00", align 1
@418 = private unnamed_addr constant [3 x i8] c"u8\00", align 1
@419 = private unnamed_addr constant [4 x i8] c"u16\00", align 1
@420 = private unnamed_addr constant [4 x i8] c"u32\00", align 1
@421 = private unnamed_addr constant [4 x i8] c"u64\00", align 1
@422 = private unnamed_addr constant [5 x i8] c"u128\00", align 1
@423 = private unnamed_addr constant [3 x i8] c"i4\00", align 1
@424 = private unnamed_addr constant [3 x i8] c"i8\00", align 1
@425 = private unnamed_addr constant [4 x i8] c"i16\00", align 1
@426 = private unnamed_addr constant [4 x i8] c"i32\00", align 1
@427 = private unnamed_addr constant [4 x i8] c"i64\00", align 1
@428 = private unnamed_addr constant [5 x i8] c"i128\00", align 1
@429 = private unnamed_addr constant [20 x i8] c"Undefined type '%s'\00", align 1
@430 = private unnamed_addr constant [48 x i8] c"Expected element type of '%s' but got type '%s'\00", align 1
@431 = private unnamed_addr constant [38 x i8] c"Const 'null' cannot be of type 'void'\00", align 1
@432 = private unnamed_addr constant [24 x i8] c"Undefined variable '%s'\00", align 1
@433 = private unnamed_addr constant [34 x i8] c"Assigment target is not a mutable\00", align 1
@434 = private unnamed_addr constant [52 x i8] c"Illegal assignment of variable of type '%s' to '%s'\00", align 1
@435 = private unnamed_addr constant [7 x i8] c"__gt__\00", align 1
@436 = private unnamed_addr constant [8 x i8] c"__and__\00", align 1
@437 = private unnamed_addr constant [8 x i8] c"__xor__\00", align 1
@438 = private unnamed_addr constant [37 x i8] c"Expected type '%s' but got type '%s'\00", align 1
@439 = private unnamed_addr constant [2 x i8] c"+\00", align 1
@440 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@441 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@442 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@443 = private unnamed_addr constant [3 x i8] c"**\00", align 1
@444 = private unnamed_addr constant [3 x i8] c">=\00", align 1
@445 = private unnamed_addr constant [3 x i8] c"<=\00", align 1
@446 = private unnamed_addr constant [3 x i8] c"==\00", align 1
@447 = private unnamed_addr constant [3 x i8] c"!=\00", align 1
@448 = private unnamed_addr constant [3 x i8] c"<<\00", align 1
@449 = private unnamed_addr constant [3 x i8] c">>\00", align 1
@450 = private unnamed_addr constant [2 x i8] c"=\00", align 1
@451 = private unnamed_addr constant [3 x i8] c"..\00", align 1
@452 = private unnamed_addr constant [55 x i8] c"Unsupported binary operator overload for operator '%s'\00", align 1
@453 = private unnamed_addr constant [108 x i8] c"No binary operator overload for '%s' in object of class '%s' please implement the method %s to support this\00", align 1
@454 = private unnamed_addr constant [114 x i8] c"No operator overload for index set operator on %s object please implement method __setitem__ to use in this class\00", align 1
@455 = private unnamed_addr constant [6 x i8] c"Range\00", align 1
@456 = private unnamed_addr constant [58 x i8] c"Illegal binary operation '%s' between types '%s' and '%s'\00", align 1
@457 = private unnamed_addr constant [8 x i8] c"++(pre)\00", align 1
@458 = private unnamed_addr constant [8 x i8] c"--(pre)\00", align 1
@459 = private unnamed_addr constant [9 x i8] c"(post)++\00", align 1
@460 = private unnamed_addr constant [9 x i8] c"(post)--\00", align 1
@461 = private unnamed_addr constant [2 x i8] c"!\00", align 1
@462 = private unnamed_addr constant [2 x i8] c"&\00", align 1
@463 = private unnamed_addr constant [39 x i8] c"Illegal unary operation %s on constant\00", align 1
@464 = private unnamed_addr constant [40 x i8] c"Illegal unary operation %s on type '%s'\00", align 1
@465 = private unnamed_addr constant [7 x i8] c"string\00", align 1
@466 = private unnamed_addr constant [30 x i8] c"Cannot cast type '%s' to '%s'\00", align 1
@467 = private unnamed_addr constant [45 x i8] c"Cannot construct an object of abstract class\00", align 1
@468 = private unnamed_addr constant [55 x i8] c"Expected %u argument(s) on constructor call but got %u\00", align 1
@469 = private unnamed_addr constant [71 x i8] c"Expected type '%s' but got type '%s' as constructor call argument (%d)\00", align 1
@470 = private unnamed_addr constant [68 x i8] c"New operator expects 1 argument for pointers but got %u argument(s)\00", align 1
@471 = private unnamed_addr constant [74 x i8] c"New operator for pointers expects argument of type '%s' but got type '%s'\00", align 1
@472 = private unnamed_addr constant [68 x i8] c"New operator expects either an a pointer or an object not a(n) '%s'\00", align 1
@473 = private unnamed_addr constant [76 x i8] c"Property '%s' is defined as private and only accessible within the class %s\00", align 1
@474 = private unnamed_addr constant [71 x i8] c"Property '%s' is defined as %s and only accessible within the class %s\00", align 1
@475 = private unnamed_addr constant [52 x i8] c"Property '%s' doesn't exist in object of class '%s'\00", align 1
@476 = private unnamed_addr constant [50 x i8] c"Property '%s' is not a static member in class '%s\00", align 1
@477 = private unnamed_addr constant [40 x i8] c"'%s' is not an element of enum the '%s'\00", align 1
@478 = private unnamed_addr constant [10 x i8] c"copy_from\00", align 1
@479 = private unnamed_addr constant [10 x i8] c"move_from\00", align 1
@480 = private unnamed_addr constant [10 x i8] c"fill_with\00", align 1
@481 = private unnamed_addr constant [7 x i8] c"resize\00", align 1
@482 = private unnamed_addr constant [8 x i8] c"compare\00", align 1
@483 = private unnamed_addr constant [28 x i8] c"intrinsic %s is not defined\00", align 1
@484 = private unnamed_addr constant [5 x i8] c"size\00", align 1
@485 = private unnamed_addr constant [38 x i8] c"Cannot get property '%s' of type '%s'\00", align 1
@486 = private unnamed_addr constant [53 x i8] c"Expected type '%s' from first case but got type '%s'\00", align 1
@487 = private unnamed_addr constant [122 x i8] c"No operator overload for indexing operator on %s object please implement method __getitem__ to use indexing in this class\00", align 1
@488 = private unnamed_addr constant [35 x i8] c"Expected an integer type for index\00", align 1
@489 = private unnamed_addr constant [87 x i8] c"Expected an unsigned integer for tuple index but index value is '%s' (which is signed)\00", align 1
@490 = private unnamed_addr constant [41 x i8] c"Expected an constant int for tuple index\00", align 1
@491 = private unnamed_addr constant [37 x i8] c"Index out of range for tuple type %s\00", align 1
@492 = private unnamed_addr constant [39 x i8] c"Cannot index into a value of type '%s'\00", align 1
@493 = private unnamed_addr constant [47 x i8] c"Expected a function type for call but got '%s'\00", align 1
@494 = private unnamed_addr constant [52 x i8] c"Expected %u argument(s) on function call but got %u\00", align 1
@495 = private unnamed_addr constant [63 x i8] c"Expected type '%s' but got type '%s' as function call argument\00", align 1
@496 = private unnamed_addr constant [58 x i8] c"Expected argument %u to be of type '%s' but got type '%s'\00", align 1
@497 = private unnamed_addr constant [66 x i8] c"Expected argument 1 to be of type to be of a pointer but got '%s'\00", align 1
@498 = private unnamed_addr constant [49 x i8] c"Expected 2 arguments on function call but got %u\00", align 1
@499 = private unnamed_addr constant [49 x i8] c"Expected 3 arguments on function call but got %u\00", align 1
@500 = private unnamed_addr constant [7 x i8] c"3.4E38\00", align 1
@501 = private unnamed_addr constant [32 x i8] c"Cannot match on constant 'null'\00", align 1
@502 = private unnamed_addr constant [85 x i8] c"Operator overload == for '%s' should return a boolean to be used in match expression\00", align 1
@503 = private unnamed_addr constant [67 x i8] c"Expected type '%s' from match expression subject but got type '%s'\00", align 1
@504 = private unnamed_addr constant [57 x i8] c"Expected match case block to yield '%s' but yielded '%s'\00", align 1
@505 = private unnamed_addr constant [56 x i8] c"Non-exhaustable match expression, expected an else-case\00", align 1
@506 = private unnamed_addr constant [62 x i8] c"Expected match else-case block to yield '%s' but yielded '%s'\00", align 1
@507 = private unnamed_addr constant [26 x i8] c"Variable '%s' has no type\00", align 1
@508 = private unnamed_addr constant [70 x i8] c"Cannot declare a value as null without any type hint for future usage\00", align 1
@509 = private unnamed_addr constant [61 x i8] c"Expected type '%s' but got type '%s' on variable declaration\00", align 1
@510 = private unnamed_addr constant [39 x i8] c"Cannot declare a variable of type void\00", align 1
@511 = private unnamed_addr constant [57 x i8] c"Illegal re-declaration of already declared variable '%s'\00", align 1
@512 = private unnamed_addr constant [49 x i8] c"Cannot assign a non-constant value to a constant\00", align 1
@513 = private unnamed_addr constant [58 x i8] c"Expected type '%s' but got type '%s' on const declaration\00", align 1
@514 = private unnamed_addr constant [36 x i8] c"Cannot declare a const of type void\00", align 1
@515 = private unnamed_addr constant [29 x i8] c"Iterator has to be an object\00", align 1
@516 = private unnamed_addr constant [47 x i8] c"Iterator type has to have __iter__ as property\00", align 1
@517 = private unnamed_addr constant [7 x i8] c"tmp_it\00", align 1
@518 = private unnamed_addr constant [30 x i8] c"Illegal break outside of loop\00", align 1
@519 = private unnamed_addr constant [33 x i8] c"Illegal continue outside of loop\00", align 1
@520 = private unnamed_addr constant [57 x i8] c"Expected return type of '%s' but got return type of '%s'\00", align 1
@521 = private unnamed_addr constant [33 x i8] c"Function return type is not void\00", align 1
@VTableArray_LLVMValueRef_ = global { ptr, ptr, ptr } { ptr @Array_LLVMValueRef__pop, ptr @Array_LLVMValueRef__ensure_capacity, ptr @Array_LLVMValueRef__find }
@VTableArray_LLVMTypeRef_ = global { ptr, ptr, ptr } { ptr @Array_LLVMTypeRef__pop, ptr @Array_LLVMTypeRef__ensure_capacity, ptr @Array_LLVMTypeRef__find }
@522 = private unnamed_addr constant [9 x i8] c"%u;%d;%u\00", align 1
@523 = private unnamed_addr constant [33 x i8] c"Type could not be code generated\00", align 1
@524 = private unnamed_addr constant [5 x i8] c"atof\00", align 1
@525 = private unnamed_addr constant [5 x i8] c"atoi\00", align 1
@526 = private unnamed_addr constant [5 x i8] c"atol\00", align 1
@527 = private unnamed_addr constant [8 x i8] c"realloc\00", align 1
@528 = private unnamed_addr constant [7 x i8] c"memcmp\00", align 1
@529 = private unnamed_addr constant [9 x i8] c"asprintf\00", align 1
@530 = private unnamed_addr constant [6 x i8] c"%s {\0A\00", align 1
@531 = private unnamed_addr constant [7 x i8] c" ... }\00", align 1
@532 = global [30 x i8] c"LLVMTypeKind.LLVMVoidTypeKind\00"
@533 = global [30 x i8] c"LLVMTypeKind.LLVMHalfTypeKind\00"
@534 = global [31 x i8] c"LLVMTypeKind.LLVMFloatTypeKind\00"
@535 = global [32 x i8] c"LLVMTypeKind.LLVMDoubleTypeKind\00"
@536 = global [34 x i8] c"LLVMTypeKind.LLVMX86_FP80TypeKind\00"
@537 = global [31 x i8] c"LLVMTypeKind.LLVMFP128TypeKind\00"
@538 = global [35 x i8] c"LLVMTypeKind.LLVMPPC_FP128TypeKind\00"
@539 = global [31 x i8] c"LLVMTypeKind.LLVMLabelTypeKind\00"
@540 = global [33 x i8] c"LLVMTypeKind.LLVMIntegerTypeKind\00"
@541 = global [34 x i8] c"LLVMTypeKind.LLVMFunctionTypeKind\00"
@542 = global [32 x i8] c"LLVMTypeKind.LLVMStructTypeKind\00"
@543 = global [31 x i8] c"LLVMTypeKind.LLVMArrayTypeKind\00"
@544 = global [33 x i8] c"LLVMTypeKind.LLVMPointerTypeKind\00"
@545 = global [32 x i8] c"LLVMTypeKind.LLVMVectorTypeKind\00"
@546 = global [34 x i8] c"LLVMTypeKind.LLVMMetadataTypeKind\00"
@547 = global [33 x i8] c"LLVMTypeKind.LLVMX86_MMXTypeKind\00"
@548 = global [31 x i8] c"LLVMTypeKind.LLVMTokenTypeKind\00"
@549 = global [40 x i8] c"LLVMTypeKind.LLVMScalableVectorTypeKind\00"
@550 = global [32 x i8] c"LLVMTypeKind.LLVMBFloatTypeKind\00"
@551 = global [33 x i8] c"LLVMTypeKind.LLVMX86_AMXTypeKind\00"
@552 = global [35 x i8] c"LLVMTypeKind.LLVMTargetExtTypeKind\00"
@LLVMTypeKind_names = global [21 x ptr] [ptr @532, ptr @533, ptr @534, ptr @535, ptr @536, ptr @537, ptr @538, ptr @539, ptr @540, ptr @541, ptr @542, ptr @543, ptr @544, ptr @545, ptr @546, ptr @547, ptr @548, ptr @549, ptr @550, ptr @551, ptr @552]
@553 = private unnamed_addr constant [5 x i8] c"%lld\00", align 1
@554 = private unnamed_addr constant [5 x i8] c"%llu\00", align 1
@555 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@556 = private unnamed_addr constant [4 x i8] c"%lu\00", align 1
@557 = private unnamed_addr constant [3 x i8] c"%u\00", align 1
@558 = private unnamed_addr constant [3 x i8] c"%f\00", align 1
@559 = private unnamed_addr constant [4 x i8] c"%lf\00", align 1
@560 = private unnamed_addr constant [5 x i8] c"0x%X\00", align 1
@561 = private unnamed_addr constant [13 x i8] c" '%s': %s, \0A\00", align 1
@562 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@563 = private unnamed_addr constant [11 x i8] c"<function>\00", align 1
@564 = private unnamed_addr constant [18 x i8] c"string_from_bytes\00", align 1
@565 = private unnamed_addr constant [55 x i8] c"Could not find function 'string.from_bytes' in program\00", align 1
@566 = private unnamed_addr constant [55 x i8] c"Array expression is not a constant (codegen_array_exp)\00", align 1
@567 = private unnamed_addr constant [55 x i8] c"Array expression is not a constant (codegen_tuple_exp)\00", align 1
@568 = private unnamed_addr constant [46 x i8] c"This should never happen! (get_expr_mem: var)\00", align 1
@569 = private unnamed_addr constant [9 x i8] c"%s;%d;%u\00", align 1
@570 = private unnamed_addr constant [10 x i8] c"memberidx\00", align 1
@571 = private unnamed_addr constant [7 x i8] c"buffer\00", align 1
@572 = private unnamed_addr constant [7 x i8] c"length\00", align 1
@573 = private unnamed_addr constant [12 x i8] c"llvm.pow.%s\00", align 1
@574 = global [27 x i8] c"LLVMIntPredicate.LLVMIntEQ\00"
@575 = global [27 x i8] c"LLVMIntPredicate.LLVMIntNE\00"
@576 = global [28 x i8] c"LLVMIntPredicate.LLVMIntUGT\00"
@577 = global [28 x i8] c"LLVMIntPredicate.LLVMIntUGE\00"
@578 = global [28 x i8] c"LLVMIntPredicate.LLVMIntULT\00"
@579 = global [28 x i8] c"LLVMIntPredicate.LLVMIntULE\00"
@580 = global [28 x i8] c"LLVMIntPredicate.LLVMIntSGT\00"
@581 = global [28 x i8] c"LLVMIntPredicate.LLVMIntSGE\00"
@582 = global [28 x i8] c"LLVMIntPredicate.LLVMIntSLT\00"
@583 = global [28 x i8] c"LLVMIntPredicate.LLVMIntSLE\00"
@LLVMIntPredicate_names = global [10 x ptr] [ptr @574, ptr @575, ptr @576, ptr @577, ptr @578, ptr @579, ptr @580, ptr @581, ptr @582, ptr @583]
@584 = global [41 x i8] c"LLVMRealPredicate.LLVMRealPredicateFalse\00"
@585 = global [30 x i8] c"LLVMRealPredicate.LLVMRealOEQ\00"
@586 = global [30 x i8] c"LLVMRealPredicate.LLVMRealOGT\00"
@587 = global [30 x i8] c"LLVMRealPredicate.LLVMRealOGE\00"
@588 = global [30 x i8] c"LLVMRealPredicate.LLVMRealOLT\00"
@589 = global [30 x i8] c"LLVMRealPredicate.LLVMRealOLE\00"
@590 = global [30 x i8] c"LLVMRealPredicate.LLVMRealONE\00"
@591 = global [30 x i8] c"LLVMRealPredicate.LLVMRealORD\00"
@592 = global [30 x i8] c"LLVMRealPredicate.LLVMRealUNO\00"
@593 = global [30 x i8] c"LLVMRealPredicate.LLVMRealUEQ\00"
@594 = global [30 x i8] c"LLVMRealPredicate.LLVMRealUGT\00"
@595 = global [30 x i8] c"LLVMRealPredicate.LLVMRealUGE\00"
@596 = global [30 x i8] c"LLVMRealPredicate.LLVMRealULT\00"
@597 = global [30 x i8] c"LLVMRealPredicate.LLVMRealULE\00"
@598 = global [30 x i8] c"LLVMRealPredicate.LLVMRealUNE\00"
@599 = global [40 x i8] c"LLVMRealPredicate.LLVMRealPredicateTrue\00"
@LLVMRealPredicate_names = global [16 x ptr] [ptr @584, ptr @585, ptr @586, ptr @587, ptr @588, ptr @589, ptr @590, ptr @591, ptr @592, ptr @593, ptr @594, ptr @595, ptr @596, ptr @597, ptr @598, ptr @599]
@600 = private unnamed_addr constant [34 x i8] c"Unknown bin expression case case!\00", align 1
@601 = private unnamed_addr constant [11 x i8] c"incdec.ptr\00", align 1
@602 = private unnamed_addr constant [51 x i8] c"This should never happen; (codegen_var_access_exp)\00", align 1
@603 = private unnamed_addr constant [11 x i8] c"true_block\00", align 1
@604 = private unnamed_addr constant [12 x i8] c"false_block\00", align 1
@605 = private unnamed_addr constant [4 x i8] c"end\00", align 1
@606 = private unnamed_addr constant [8 x i8] c"ternary\00", align 1
@607 = private unnamed_addr constant [11 x i8] c"match.else\00", align 1
@608 = private unnamed_addr constant [10 x i8] c"match.end\00", align 1
@609 = private unnamed_addr constant [11 x i8] c"match.case\00", align 1
@610 = private unnamed_addr constant [16 x i8] c"match.case.else\00", align 1
@611 = private unnamed_addr constant [15 x i8] c"match.phi.node\00", align 1
@612 = private unnamed_addr constant [52 x i8] c"this should not happen; (codegen_member_exp); class\00", align 1
@613 = private unnamed_addr constant [60 x i8] c"This should never happen; (codegen_member_expr; class prop)\00", align 1
@614 = private unnamed_addr constant [51 x i8] c"this should not happen; (codegen_member_exp); enum\00", align 1
@615 = private unnamed_addr constant [11 x i8] c"to_cstring\00", align 1
@616 = private unnamed_addr constant [22 x i8] c"instrinsic not found!\00", align 1
@617 = private unnamed_addr constant [9 x i8] c"if.entry\00", align 1
@618 = private unnamed_addr constant [6 x i8] c"ifend\00", align 1
@619 = private unnamed_addr constant [10 x i8] c"for.entry\00", align 1
@620 = private unnamed_addr constant [9 x i8] c"for.cond\00", align 1
@621 = private unnamed_addr constant [9 x i8] c"for.body\00", align 1
@622 = private unnamed_addr constant [9 x i8] c"for.incr\00", align 1
@623 = private unnamed_addr constant [8 x i8] c"for.end\00", align 1
@624 = private unnamed_addr constant [12 x i8] c"while.entry\00", align 1
@625 = private unnamed_addr constant [10 x i8] c"while.end\00", align 1
@626 = private unnamed_addr constant [48 x i8] c"Could not find constructor for constructor call\00", align 1
@627 = global [32 x i8] c"LLVMLinkage.LLVMExternalLinkage\00"
@628 = global [43 x i8] c"LLVMLinkage.LLVMAvailableExternallyLinkage\00"
@629 = global [35 x i8] c"LLVMLinkage.LLVMLinkOnceAnyLinkage\00"
@630 = global [35 x i8] c"LLVMLinkage.LLVMLinkOnceODRLinkage\00"
@631 = global [43 x i8] c"LLVMLinkage.LLVMLinkOnceODRAutoHideLinkage\00"
@632 = global [31 x i8] c"LLVMLinkage.LLVMWeakAnyLinkage\00"
@633 = global [31 x i8] c"LLVMLinkage.LLVMWeakODRLinkage\00"
@634 = global [33 x i8] c"LLVMLinkage.LLVMAppendingLinkage\00"
@635 = global [32 x i8] c"LLVMLinkage.LLVMInternalLinkage\00"
@636 = global [31 x i8] c"LLVMLinkage.LLVMPrivateLinkage\00"
@637 = global [33 x i8] c"LLVMLinkage.LLVMDLLImportLinkage\00"
@638 = global [33 x i8] c"LLVMLinkage.LLVMDLLExportLinkage\00"
@639 = global [36 x i8] c"LLVMLinkage.LLVMExternalWeakLinkage\00"
@640 = global [29 x i8] c"LLVMLinkage.LLVMGhostLinkage\00"
@641 = global [30 x i8] c"LLVMLinkage.LLVMCommonLinkage\00"
@642 = global [37 x i8] c"LLVMLinkage.LLVMLinkerPrivateLinkage\00"
@643 = global [41 x i8] c"LLVMLinkage.LLVMLinkerPrivateWeakLinkage\00"
@LLVMLinkage_names = global [17 x ptr] [ptr @627, ptr @628, ptr @629, ptr @630, ptr @631, ptr @632, ptr @633, ptr @634, ptr @635, ptr @636, ptr @637, ptr @638, ptr @639, ptr @640, ptr @641, ptr @642, ptr @643]
@644 = private unnamed_addr constant [76 x i8] c"This should not happen: could not find function %s_%s (declare_class_props)\00", align 1
@645 = private unnamed_addr constant [9 x i8] c"VTable%s\00", align 1
@646 = private unnamed_addr constant [15 x i8] c"%s_constructor\00", align 1
@647 = private unnamed_addr constant [6 x i8] c"%s.%s\00", align 1
@648 = private unnamed_addr constant [9 x i8] c"%s_names\00", align 1
@649 = private unnamed_addr constant [3 x i8] c"-O\00", align 1
@650 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@651 = private unnamed_addr constant [7 x i8] c"--emit\00", align 1
@652 = private unnamed_addr constant [3 x i8] c"-o\00", align 1
@653 = private unnamed_addr constant [3 x i8] c"-l\00", align 1
@654 = private unnamed_addr constant [9 x i8] c"--target\00", align 1
@655 = private unnamed_addr constant [4 x i8] c"exe\00", align 1
@656 = private unnamed_addr constant [14 x i8] c"/tmp/output.o\00", align 1
@657 = private unnamed_addr constant [7 x i8] c"output\00", align 1
@658 = private unnamed_addr constant [5 x i8] c"-l%s\00", align 1
@659 = private unnamed_addr constant [9 x i8] c"clang-15\00", align 1
@660 = private unnamed_addr constant [11 x i8] c"-target %s\00", align 1
@661 = private unnamed_addr constant [37 x i8] c"%s -no-pie %s /tmp/output.o %s -o %s\00", align 1
@662 = private unnamed_addr constant [8 x i8] c"llvm-ir\00", align 1
@663 = private unnamed_addr constant [10 x i8] c"output.ll\00", align 1
@664 = private unnamed_addr constant [8 x i8] c"llvm-bc\00", align 1
@665 = private unnamed_addr constant [10 x i8] c"output.bc\00", align 1
@666 = private unnamed_addr constant [4 x i8] c"obj\00", align 1
@667 = private unnamed_addr constant [9 x i8] c"output.o\00", align 1
@668 = private unnamed_addr constant [4 x i8] c"asm\00", align 1
@669 = private unnamed_addr constant [9 x i8] c"output.s\00", align 1
@670 = private unnamed_addr constant [25 x i8] c"No input file specified.\00", align 1

define ptr @string_from_cstring(ptr %0) {
  %str = alloca ptr, align 8
  %buf = alloca ptr, align 8
  %len = alloca i64, align 8
  store ptr %0, ptr %str, align 8
  %2 = load ptr, ptr %str, align 8
  %3 = call i64 @strlen(ptr %2)
  store i64 %3, ptr %len, align 4
  %4 = load i64, ptr %len, align 4
  %5 = trunc i64 %4 to i32
  %mallocsize = mul i32 %5, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i32)
  %6 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %6, ptr %buf, align 8
  %7 = load ptr, ptr %buf, align 8
  %8 = load ptr, ptr %str, align 8
  %9 = load i64, ptr %len, align 4
  %10 = mul i64 %9, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %8, i64 %10, i1 false)
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  %12 = load ptr, ptr %buf, align 8
  %13 = load i64, ptr %len, align 4
  call void @string_constructor(ptr %11, ptr %12, i64 %13)
  ret ptr %11
}

define ptr @string_from_bytes(ptr %0, i64 %1) {
  %len = alloca i64, align 8
  %bytes = alloca ptr, align 8
  %buf = alloca ptr, align 8
  store ptr %0, ptr %bytes, align 8
  store i64 %1, ptr %len, align 4
  %3 = load i64, ptr %len, align 4
  %4 = trunc i64 %3 to i32
  %mallocsize = mul i32 %4, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i32)
  %5 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %5, ptr %buf, align 8
  %6 = load ptr, ptr %buf, align 8
  %7 = load ptr, ptr %bytes, align 8
  %8 = load i64, ptr %len, align 4
  %9 = mul i64 %8, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %7, i64 %9, i1 false)
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  %11 = load ptr, ptr %buf, align 8
  %12 = load i64, ptr %len, align 4
  call void @string_constructor(ptr %10, ptr %11, i64 %12)
  ret ptr %10
}

define i64 @string_find(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %start = alloca i64, align 8
  %search = alloca ptr, align 8
  %end = alloca i64, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  store i64 %2, ptr %start, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %string, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = load ptr, ptr %search, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %6, i32 0, i32 2
  %7 = load i64, ptr %memberidx1, align 4
  %8 = sub nuw i64 %5, %7
  store i64 %8, ptr %end, align 4
  br label %for.entry

for.entry:                                        ; preds = %3
  %9 = load i64, ptr %start, align 4
  store i64 %9, ptr %index, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %10 = load i64, ptr %index, align 4
  %11 = load i64, ptr %end, align 4
  %12 = icmp sle i64 %10, %11
  br i1 %12, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load ptr, ptr %search, align 8
  %memberidx2 = getelementptr inbounds %string, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx2, align 8
  %15 = getelementptr inbounds i8, ptr %14, i64 0
  %16 = load i8, ptr %15, align 1
  %17 = load i64, ptr %index, align 4
  %18 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %string, ptr %18, i32 0, i32 1
  %19 = load ptr, ptr %memberidx3, align 8
  %20 = getelementptr inbounds i8, ptr %19, i64 %17
  %21 = load i8, ptr %20, align 1
  %22 = icmp eq i8 %16, %21
  br i1 %22, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %23 = load i64, ptr %index, align 4
  %24 = add nsw i64 %23, 1
  store i64 %24, ptr %index, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %25 = load ptr, ptr %search, align 8
  %memberidx4 = getelementptr inbounds %string, ptr %25, i32 0, i32 1
  %26 = load ptr, ptr %memberidx4, align 8
  %27 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %string, ptr %27, i32 0, i32 1
  %28 = load ptr, ptr %memberidx5, align 8
  %29 = load i64, ptr %index, align 4
  %30 = getelementptr inbounds i8, ptr %28, i64 %29
  %31 = load ptr, ptr %search, align 8
  %memberidx6 = getelementptr inbounds %string, ptr %31, i32 0, i32 2
  %32 = load i64, ptr %memberidx6, align 4
  %33 = mul i64 %32, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %34 = call i64 @memcmp(ptr %26, ptr %30, i64 %33)
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %if.entry7, label %else8

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else, %ifend9
  br label %for.incr

if.entry7:                                        ; preds = %if.entry
  %36 = load i64, ptr %index, align 4
  ret i64 %36

else8:                                            ; preds = %if.entry
  br label %ifend9

ifend9:                                           ; preds = %else8
  br label %ifend
}

define ptr @string_substring(ptr %0, i64 %1, i64 %2) {
  %length = alloca i64, align 8
  %this = alloca ptr, align 8
  %start = alloca i64, align 8
  %new_str_buff = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %start, align 4
  store i64 %2, ptr %length, align 4
  %4 = load i64, ptr %length, align 4
  %5 = trunc i64 %4 to i32
  %mallocsize = mul i32 %5, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i32)
  %6 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %6, ptr %new_str_buff, align 8
  %7 = load ptr, ptr %new_str_buff, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %string, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx, align 8
  %10 = load i64, ptr %start, align 4
  %11 = getelementptr inbounds i8, ptr %9, i64 %10
  %12 = load i64, ptr %length, align 4
  %13 = mul i64 %12, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 2147483648 %11, i64 %13, i1 false)
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  %15 = load ptr, ptr %new_str_buff, align 8
  %16 = load i64, ptr %length, align 4
  call void @string_constructor(ptr %14, ptr %15, i64 %16)
  ret ptr %14
}

define ptr @string_replace(ptr %0, ptr %1, ptr %2) {
  %val = alloca ptr, align 8
  %repl = alloca ptr, align 8
  %this = alloca ptr, align 8
  %idx = alloca i64, align 8
  %nlen = alloca i64, align 8
  %nbuff = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %val, align 8
  store ptr %2, ptr %repl, align 8
  %4 = load ptr, ptr %this, align 8
  %5 = getelementptr inbounds %string, ptr %4, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %6, i32 0, i32 0
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load ptr, ptr %val, align 8
  %9 = call i64 %7(ptr %4, ptr %8, i64 0)
  store i64 %9, ptr %idx, align 4
  %10 = load i64, ptr %idx, align 4
  %11 = icmp sge i64 %10, 0
  br i1 %11, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %12 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %12, i32 0, i32 2
  %13 = load i64, ptr %memberidx1, align 4
  %14 = load ptr, ptr %val, align 8
  %memberidx2 = getelementptr inbounds %string, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx2, align 4
  %16 = sub nuw i64 %13, %15
  %17 = load ptr, ptr %repl, align 8
  %memberidx3 = getelementptr inbounds %string, ptr %17, i32 0, i32 2
  %18 = load i64, ptr %memberidx3, align 4
  %19 = add nuw i64 %16, %18
  store i64 %19, ptr %nlen, align 4
  %20 = load i64, ptr %nlen, align 4
  %21 = trunc i64 %20 to i32
  %mallocsize = mul i32 %21, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i32)
  %22 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %22, ptr %nbuff, align 8
  %23 = load ptr, ptr %nbuff, align 8
  %24 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %string, ptr %24, i32 0, i32 1
  %25 = load ptr, ptr %memberidx4, align 8
  %26 = load i64, ptr %idx, align 4
  %27 = mul i64 %26, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %23, ptr align 8 %25, i64 %27, i1 false)
  %28 = load i64, ptr %idx, align 4
  %29 = load ptr, ptr %nbuff, align 8
  %30 = getelementptr inbounds i8, ptr %29, i64 %28
  %31 = load i8, ptr %30, align 1
  %32 = load i64, ptr %idx, align 4
  %33 = load ptr, ptr %nbuff, align 8
  %34 = getelementptr inbounds i8, ptr %33, i64 %32
  %35 = load ptr, ptr %repl, align 8
  %memberidx5 = getelementptr inbounds %string, ptr %35, i32 0, i32 1
  %36 = load ptr, ptr %memberidx5, align 8
  %37 = load ptr, ptr %repl, align 8
  %memberidx6 = getelementptr inbounds %string, ptr %37, i32 0, i32 2
  %38 = load i64, ptr %memberidx6, align 4
  %39 = mul i64 %38, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %34, ptr align 8 %36, i64 %39, i1 false)
  %40 = load i64, ptr %idx, align 4
  %41 = load ptr, ptr %repl, align 8
  %memberidx7 = getelementptr inbounds %string, ptr %41, i32 0, i32 2
  %42 = load i64, ptr %memberidx7, align 4
  %43 = add nsw i64 %40, %42
  %44 = load ptr, ptr %nbuff, align 8
  %45 = getelementptr inbounds i8, ptr %44, i64 %43
  %46 = load i8, ptr %45, align 1
  %47 = load i64, ptr %idx, align 4
  %48 = load ptr, ptr %repl, align 8
  %memberidx8 = getelementptr inbounds %string, ptr %48, i32 0, i32 2
  %49 = load i64, ptr %memberidx8, align 4
  %50 = add nsw i64 %47, %49
  %51 = load ptr, ptr %nbuff, align 8
  %52 = getelementptr inbounds i8, ptr %51, i64 %50
  %53 = load i64, ptr %idx, align 4
  %54 = load ptr, ptr %val, align 8
  %memberidx9 = getelementptr inbounds %string, ptr %54, i32 0, i32 2
  %55 = load i64, ptr %memberidx9, align 4
  %56 = add nsw i64 %53, %55
  %57 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %string, ptr %57, i32 0, i32 1
  %58 = load ptr, ptr %memberidx10, align 8
  %59 = getelementptr inbounds i8, ptr %58, i64 %56
  %60 = load i8, ptr %59, align 1
  %61 = load i64, ptr %idx, align 4
  %62 = load ptr, ptr %val, align 8
  %memberidx11 = getelementptr inbounds %string, ptr %62, i32 0, i32 2
  %63 = load i64, ptr %memberidx11, align 4
  %64 = add nsw i64 %61, %63
  %65 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %string, ptr %65, i32 0, i32 1
  %66 = load ptr, ptr %memberidx12, align 8
  %67 = getelementptr inbounds i8, ptr %66, i64 %64
  %68 = load ptr, ptr %this, align 8
  %memberidx13 = getelementptr inbounds %string, ptr %68, i32 0, i32 2
  %69 = load i64, ptr %memberidx13, align 4
  %70 = load i64, ptr %idx, align 4
  %71 = load ptr, ptr %val, align 8
  %memberidx14 = getelementptr inbounds %string, ptr %71, i32 0, i32 2
  %72 = load i64, ptr %memberidx14, align 4
  %73 = add nsw i64 %70, %72
  %74 = sub nuw i64 %69, %73
  %75 = mul i64 %74, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %52, ptr align 2147483648 %67, i64 %75, i1 false)
  %76 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  %77 = load ptr, ptr %nbuff, align 8
  %78 = load i64, ptr %nlen, align 4
  call void @string_constructor(ptr %76, ptr %77, i64 %78)
  ret ptr %76

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %79 = load ptr, ptr %this, align 8
  ret ptr %79
}

define ptr @string_get_bytes(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %string, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  ret ptr %3
}

define ptr @string_to_cstring(ptr %0) {
  %this = alloca ptr, align 8
  %c_string = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %string, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = add nuw i64 %3, 1
  %5 = trunc i64 %4 to i32
  %mallocsize = mul i32 %5, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i32)
  %6 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %6, ptr %c_string, align 8
  %7 = load ptr, ptr %c_string, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %string, ptr %10, i32 0, i32 2
  %11 = load i64, ptr %memberidx2, align 4
  %12 = mul i64 %11, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %9, i64 %12, i1 false)
  %13 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %string, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx3, align 4
  %15 = load ptr, ptr %c_string, align 8
  %16 = getelementptr inbounds i8, ptr %15, i64 %14
  store i8 0, ptr %16, align 1
  %17 = load ptr, ptr %c_string, align 8
  ret ptr %17
}

define ptr @string___adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %new_length = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %string, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = add nuw i64 %4, %6
  store i64 %7, ptr %new_length, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %string, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %string, ptr %9, i32 0, i32 1
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = load i64, ptr %new_length, align 4
  %12 = mul i64 %11, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %13 = call ptr @realloc(ptr %10, i64 %12)
  store ptr %13, ptr %memberidx2, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %string, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %string, ptr %16, i32 0, i32 2
  %17 = load i64, ptr %memberidx5, align 4
  %18 = getelementptr inbounds i8, ptr %15, i64 %17
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %string, ptr %19, i32 0, i32 1
  %20 = load ptr, ptr %memberidx6, align 8
  %21 = load ptr, ptr %other, align 8
  %memberidx7 = getelementptr inbounds %string, ptr %21, i32 0, i32 2
  %22 = load i64, ptr %memberidx7, align 4
  %23 = mul i64 %22, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %18, ptr align 8 %20, i64 %23, i1 false)
  %24 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %string, ptr %24, i32 0, i32 2
  %25 = load i64, ptr %new_length, align 4
  store i64 %25, ptr %memberidx8, align 4
  %26 = load ptr, ptr %this, align 8
  ret ptr %26
}

define i8 @string_get_byte(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %string, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 %3
  %7 = load i8, ptr %6, align 1
  ret i8 %7
}

define ptr @string___add__(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %data = alloca ptr, align 8
  %new_str_len = alloca i64, align 8
  %new_buffer = alloca ptr, align 8
  %trailing_buffer = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %data, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %string, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %data, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = add nuw i64 %4, %6
  store i64 %7, ptr %new_str_len, align 4
  %8 = load i64, ptr %new_str_len, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %new_buffer, align 8
  %11 = load ptr, ptr %new_buffer, align 8
  %12 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %string, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx2, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %string, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx3, align 4
  %16 = mul i64 %15, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %11, ptr align 8 %13, i64 %16, i1 false)
  %17 = load ptr, ptr %new_buffer, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %string, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx4, align 4
  %20 = getelementptr inbounds i8, ptr %17, i64 %19
  store ptr %20, ptr %trailing_buffer, align 8
  %21 = load ptr, ptr %trailing_buffer, align 8
  %22 = load ptr, ptr %data, align 8
  %memberidx5 = getelementptr inbounds %string, ptr %22, i32 0, i32 1
  %23 = load ptr, ptr %memberidx5, align 8
  %24 = load ptr, ptr %data, align 8
  %memberidx6 = getelementptr inbounds %string, ptr %24, i32 0, i32 2
  %25 = load i64, ptr %memberidx6, align 4
  %26 = mul i64 %25, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %21, ptr align 8 %23, i64 %26, i1 false)
  %27 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  %28 = load ptr, ptr %new_buffer, align 8
  %29 = load i64, ptr %new_str_len, align 4
  call void @string_constructor(ptr %27, ptr %28, i64 %29)
  ret ptr %27
}

define void @string___del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %string, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define ptr @string___getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  %new_buffer = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = trunc i64 1 to i32
  %mallocsize = mul i32 %3, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i32)
  %4 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %4, ptr %new_buffer, align 8
  %5 = load ptr, ptr %new_buffer, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 0
  %7 = load i64, ptr %index, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %string, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 %7
  %11 = load i8, ptr %10, align 1
  store i8 %11, ptr %6, align 1
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  %13 = load ptr, ptr %new_buffer, align 8
  call void @string_constructor(ptr %12, ptr %13, i64 2)
  ret ptr %12
}

define i1 @string___eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %string, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %8 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %string, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = load ptr, ptr %other, align 8
  %memberidx3 = getelementptr inbounds %string, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx3, align 8
  %12 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %string, ptr %12, i32 0, i32 2
  %13 = load i64, ptr %memberidx4, align 4
  %14 = mul i64 %13, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %15 = call i64 @memcmp(ptr %9, ptr %11, i64 %14)
  %16 = icmp eq i64 %15, 0
  ret i1 %16
}

define i1 @string___in__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %string, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %5, i32 0, i32 0
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %other, align 8
  %8 = call i64 %6(ptr %3, ptr %7, i64 0)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define i1 @string___ne__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @string___eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define i1 @string_ends_with(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %suffix = alloca ptr, align 8
  %end_buff = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %suffix, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %string, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %suffix, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp slt i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %8 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %string, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %string, ptr %10, i32 0, i32 2
  %11 = load i64, ptr %memberidx3, align 4
  %12 = getelementptr inbounds i8, ptr %9, i64 %11
  %13 = load ptr, ptr %suffix, align 8
  %memberidx4 = getelementptr inbounds %string, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx4, align 4
  %15 = sub i64 0, %14
  %16 = getelementptr inbounds i8, ptr %12, i64 %15
  store ptr %16, ptr %end_buff, align 8
  %17 = load ptr, ptr %end_buff, align 8
  %18 = load ptr, ptr %suffix, align 8
  %memberidx5 = getelementptr inbounds %string, ptr %18, i32 0, i32 1
  %19 = load ptr, ptr %memberidx5, align 8
  %20 = load ptr, ptr %suffix, align 8
  %memberidx6 = getelementptr inbounds %string, ptr %20, i32 0, i32 2
  %21 = load i64, ptr %memberidx6, align 4
  %22 = mul i64 %21, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %23 = call i64 @memcmp(ptr %17, ptr %19, i64 %22)
  %24 = icmp eq i64 %23, 0
  ret i1 %24
}

define i1 @string_starts_with(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %preffix = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %preffix, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %string, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %preffix, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp slt i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %8 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %string, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = load ptr, ptr %preffix, align 8
  %memberidx3 = getelementptr inbounds %string, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx3, align 8
  %12 = load ptr, ptr %preffix, align 8
  %memberidx4 = getelementptr inbounds %string, ptr %12, i32 0, i32 2
  %13 = load i64, ptr %memberidx4, align 4
  %14 = mul i64 %13, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %15 = call i64 @memcmp(ptr %9, ptr %11, i64 %14)
  %16 = icmp eq i64 %15, 0
  ret i1 %16
}

define void @string_constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %len = alloca i64, align 8
  %data = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %4 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTablestring, ptr %4, align 8
  store ptr %1, ptr %data, align 8
  store i64 %2, ptr %len, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %string, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %data, align 8
  store ptr %6, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %len, align 4
  store i64 %8, ptr %memberidx1, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %string, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %len, align 4
  store i64 %10, ptr %memberidx2, align 4
  ret void
}

declare noalias ptr @malloc(i32)

; Function Attrs: argmemonly nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #0

declare ptr @realloc(ptr, i64)

declare i64 @memcmp(ptr, ptr, i64)

declare void @free(ptr)

declare i64 @strlen(ptr)

define ptr @Array_string__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_string_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_string_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_string_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_string__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_string_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_string_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = call i1 @string___eq__(ptr %11, ptr %12)
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_string__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_string_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_string_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_string_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_string_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_string_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_string____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_string_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_string_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_string__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_string_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_string_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_string_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_string____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_string_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_string_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_string_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_string_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_string_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_string_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_string_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_string_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_string_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_string_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_string____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_string_, ptr null, i32 1) to i32))
  call void @Array_string__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_string_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_string_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_string_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_string_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_string_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_string_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_string_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_string_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_string_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_string_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_string____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_string____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_string____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_string__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_string_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_string_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_string_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_string_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_string_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_string_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_string__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_string_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_string_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_string_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_string_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_string____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_string_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_string_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_string_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_string__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_string____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_string_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_string____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_string_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_string____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_string_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_string____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_string_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_string_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_string_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_string____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_string____getitem__(ptr %15, i64 %16)
  %18 = call i1 @string___ne__(ptr %14, ptr %17)
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_string____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_string_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_string__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_string_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_string__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_string_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_string__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_string_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_string_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_string_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_string_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define ptr @parse_args(i64 %0, ptr %1) {
  %args = alloca ptr, align 8
  %size = alloca i64, align 8
  %arr = alloca ptr, align 8
  %i = alloca i64, align 8
  store i64 %0, ptr %size, align 4
  store ptr %1, ptr %args, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_string_, ptr null, i32 1) to i32))
  call void @Array_string__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_string_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_string_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %5 = load i64, ptr %i, align 4
  %6 = load i64, ptr %size, align 4
  %7 = icmp slt i64 %5, %6
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load ptr, ptr %arr, align 8
  %9 = load i64, ptr %i, align 4
  %10 = load ptr, ptr %args, align 8
  %11 = getelementptr inbounds ptr, ptr %10, i64 %9
  %12 = load ptr, ptr %11, align 8
  %13 = call ptr @string_from_cstring(ptr %12)
  call void @Array_string____sl__(ptr %8, ptr %13)
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load ptr, ptr %arr, align 8
  ret ptr %16
}

declare void @system(ptr)

define void @help(ptr %0) {
  %exec_file = alloca ptr, align 8
  store ptr %0, ptr %exec_file, align 8
  %2 = load ptr, ptr %exec_file, align 8
  %3 = getelementptr inbounds %string, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr %5(ptr %2)
  %7 = alloca ptr, align 8
  %8 = call i64 (ptr, ptr, ...) @asprintf(ptr %7, ptr @1, ptr %6)
  %9 = load ptr, ptr %7, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %10, ptr %9, i64 %8)
  tail call void @free(ptr %6)
  call void @flo_println(ptr %10)
  %11 = call ptr @string_from_bytes(ptr @2, i64 8)
  call void @flo_println(ptr %11)
  %12 = call ptr @string_from_bytes(ptr @3, i64 37)
  call void @flo_println(ptr %12)
  %13 = call ptr @string_from_bytes(ptr @4, i64 35)
  call void @flo_println(ptr %13)
  %14 = call ptr @string_from_bytes(ptr @5, i64 293)
  call void @flo_println(ptr %14)
  %15 = call ptr @string_from_bytes(ptr @6, i64 49)
  call void @flo_println(ptr %15)
  %16 = call ptr @string_from_bytes(ptr @7, i64 54)
  call void @flo_println(ptr %16)
  %17 = call ptr @string_from_bytes(ptr @8, i64 46)
  call void @flo_println(ptr %17)
  %18 = call ptr @string_from_bytes(ptr @9, i64 33)
  call void @flo_println(ptr %18)
  %19 = call ptr @string_from_bytes(ptr @10, i64 90)
  call void @flo_println(ptr %19)
  %20 = call ptr @string_from_bytes(ptr @11, i64 30)
  call void @flo_println(ptr %20)
  ret void
}

define void @flo_println(ptr %0) {
  %msg = alloca ptr, align 8
  store ptr %0, ptr %msg, align 8
  %2 = load ptr, ptr %msg, align 8
  call void @println(ptr %2)
  %3 = load ptr, ptr %msg, align 8
  call void @string___del__(ptr %3)
  tail call void @free(ptr %3)
  ret void
}

define void @println(ptr %0) {
  %str = alloca ptr, align 8
  store ptr %0, ptr %str, align 8
  %2 = load ptr, ptr %str, align 8
  call void @print(ptr %2)
  %3 = load i64, ptr @STDOUT, align 4
  %4 = call i64 @write(i64 %3, ptr @0, i64 1)
  ret void
}

define void @print(ptr %0) {
  %str = alloca ptr, align 8
  store ptr %0, ptr %str, align 8
  %2 = load i64, ptr @STDOUT, align 4
  %3 = load ptr, ptr %str, align 8
  %4 = getelementptr inbounds %string, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %5, i32 0, i32 3
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr %6(ptr %3)
  %8 = load ptr, ptr %str, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %memberidx1, align 4
  %10 = call i64 @write(i64 %2, ptr %7, i64 %9)
  ret void
}

declare i64 @write(i64, ptr, i64)

declare i64 @asprintf(ptr, ptr, ...)

define i1 @flag(ptr %0, ptr %1) {
  %args = alloca ptr, align 8
  %name = alloca ptr, align 8
  store ptr %0, ptr %args, align 8
  store ptr %1, ptr %name, align 8
  %3 = load ptr, ptr %args, align 8
  %4 = load ptr, ptr %name, align 8
  %5 = call i1 @Array_string____in__(ptr %3, ptr %4)
  ret i1 %5
}

define ptr @flag_value_or(ptr %0, ptr %1, ptr %2) {
  %args = alloca ptr, align 8
  %default = alloca ptr, align 8
  %name = alloca ptr, align 8
  %idx = alloca i64, align 8
  store ptr %0, ptr %args, align 8
  store ptr %1, ptr %name, align 8
  store ptr %2, ptr %default, align 8
  %4 = load ptr, ptr %args, align 8
  %5 = getelementptr inbounds %Array_string_, ptr %4, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load ptr, ptr %name, align 8
  %9 = call i64 %7(ptr %4, ptr %8)
  store i64 %9, ptr %idx, align 4
  %10 = load i64, ptr %idx, align 4
  %11 = icmp ne i64 %10, -1
  br i1 %11, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %12 = load ptr, ptr %args, align 8
  %memberidx1 = getelementptr inbounds %Array_string_, ptr %12, i32 0, i32 2
  %13 = load i64, ptr %memberidx1, align 4
  %14 = load i64, ptr %idx, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %idx, align 4
  %16 = icmp sgt i64 %13, %15
  br i1 %16, label %if.entry2, label %else3

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %ifend4
  %17 = load ptr, ptr %name, align 8
  call void @string___del__(ptr %17)
  tail call void @free(ptr %17)
  %18 = load ptr, ptr %default, align 8
  ret ptr %18

if.entry2:                                        ; preds = %if.entry
  %19 = load ptr, ptr %default, align 8
  %20 = icmp ne ptr %19, null
  br i1 %20, label %if.entry5, label %else6

else3:                                            ; preds = %if.entry
  %21 = load ptr, ptr %name, align 8
  %22 = getelementptr inbounds %string, ptr %21, i32 0, i32 0
  %23 = load ptr, ptr %22, align 8
  %memberidx8 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %23, i32 0, i32 5
  %24 = load ptr, ptr %memberidx8, align 8
  %25 = call ptr %24(ptr %21)
  %26 = alloca ptr, align 8
  %27 = call i64 (ptr, ptr, ...) @asprintf(ptr %26, ptr @28, ptr %25)
  %28 = load ptr, ptr %26, align 8
  %29 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %29, ptr %28, i64 %27)
  tail call void @free(ptr %25)
  call void @print_message_error(i64 4, ptr %29)
  br label %ifend4

ifend4:                                           ; preds = %else3
  br label %ifend

if.entry5:                                        ; preds = %if.entry2
  %30 = load ptr, ptr %default, align 8
  call void @string___del__(ptr %30)
  tail call void @free(ptr %30)
  br label %ifend7

else6:                                            ; preds = %if.entry2
  br label %ifend7

ifend7:                                           ; preds = %else6, %if.entry5
  %31 = load ptr, ptr %args, align 8
  %32 = load i64, ptr %idx, align 4
  %33 = call ptr @Array_string____getitem__(ptr %31, i64 %32)
  ret ptr %33
}

define void @print_message_error(i64 %0, ptr %1) {
  %kind = alloca i64, align 8
  %message = alloca ptr, align 8
  store i64 %0, ptr %kind, align 4
  store ptr %1, ptr %message, align 8
  call void @change_print_color(i64 0)
  %3 = load i64, ptr %kind, align 4
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %5 = call ptr @string_from_bytes(ptr @22, i64 21)
  call void @flo_print(ptr %5)
  br label %ifend

else:                                             ; preds = %2
  %6 = load i64, ptr %kind, align 4
  %7 = icmp eq i64 %6, 2
  br i1 %7, label %if.entry1, label %else2

ifend:                                            ; preds = %ifend3, %if.entry
  call void @change_print_color(i64 1)
  %8 = load ptr, ptr %message, align 8
  call void @flo_println(ptr %8)
  ret void

if.entry1:                                        ; preds = %else
  %9 = call ptr @string_from_bytes(ptr @23, i64 16)
  call void @flo_print(ptr %9)
  br label %ifend3

else2:                                            ; preds = %else
  %10 = load i64, ptr %kind, align 4
  %11 = icmp eq i64 %10, 3
  br i1 %11, label %if.entry4, label %else5

ifend3:                                           ; preds = %ifend6, %if.entry1
  br label %ifend

if.entry4:                                        ; preds = %else2
  %12 = call ptr @string_from_bytes(ptr @24, i64 12)
  call void @flo_print(ptr %12)
  br label %ifend6

else5:                                            ; preds = %else2
  %13 = load i64, ptr %kind, align 4
  %14 = icmp eq i64 %13, 5
  br i1 %14, label %if.entry7, label %else8

ifend6:                                           ; preds = %ifend9, %if.entry4
  br label %ifend3

if.entry7:                                        ; preds = %else5
  %15 = call ptr @string_from_bytes(ptr @25, i64 14)
  call void @flo_print(ptr %15)
  br label %ifend9

else8:                                            ; preds = %else5
  %16 = load i64, ptr %kind, align 4
  %17 = icmp eq i64 %16, 1
  br i1 %17, label %if.entry10, label %else11

ifend9:                                           ; preds = %ifend12, %if.entry7
  br label %ifend6

if.entry10:                                       ; preds = %else8
  %18 = call ptr @string_from_bytes(ptr @26, i64 14)
  call void @flo_print(ptr %18)
  br label %ifend12

else11:                                           ; preds = %else8
  %19 = call ptr @string_from_bytes(ptr @27, i64 9)
  call void @flo_print(ptr %19)
  br label %ifend12

ifend12:                                          ; preds = %else11, %if.entry10
  br label %ifend9
}

define void @change_print_color(i64 %0) {
  %color = alloca i64, align 8
  store i64 %0, ptr %color, align 4
  %2 = load i64, ptr %color, align 4
  %3 = icmp eq i64 %2, 0
  br i1 %3, label %true_block, label %false_block

true_block:                                       ; preds = %1
  %4 = call ptr @string_from_bytes(ptr @20, i64 7)
  br label %end

false_block:                                      ; preds = %1
  %5 = call ptr @string_from_bytes(ptr @21, i64 4)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %4, %true_block ], [ %5, %false_block ]
  call void @flo_print(ptr %ternary)
  ret void
}

define void @flo_print(ptr %0) {
  %msg = alloca ptr, align 8
  store ptr %0, ptr %msg, align 8
  %2 = load ptr, ptr %msg, align 8
  call void @print(ptr %2)
  %3 = load ptr, ptr %msg, align 8
  call void @string___del__(ptr %3)
  tail call void @free(ptr %3)
  ret void
}

define i64 @main(i64 %0, ptr %1) {
  %argc = alloca i64, align 8
  %argv = alloca ptr, align 8
  %code = alloca i64, align 8
  %flo_module = alloca ptr, align 8
  %args = alloca ptr, align 8
  %compiler = alloca ptr, align 8
  %output_fn = alloca ptr, align 8
  %file_id = alloca ptr, align 8
  %filename = alloca ptr, align 8
  %program = alloca ptr, align 8
  %module_node = alloca ptr, align 8
  %link_libs = alloca ptr, align 8
  %target_triple = alloca ptr, align 8
  %tokens = alloca ptr, align 8
  %emit_type = alloca ptr, align 8
  %rt_path = alloca ptr, align 8
  %linker_exec = alloca ptr, align 8
  %target_option = alloca ptr, align 8
  %tmp_file = alloca ptr, align 8
  store i64 %0, ptr %argc, align 4
  store ptr %1, ptr %argv, align 8
  store i64 0, ptr %code, align 4
  %3 = load i64, ptr %argc, align 4
  %4 = icmp sge i64 %3, 2
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %5 = load i64, ptr %argc, align 4
  %6 = load ptr, ptr %argv, align 8
  %7 = call ptr @parse_args(i64 %5, ptr %6)
  store ptr %7, ptr %args, align 8
  %8 = load ptr, ptr %args, align 8
  %9 = call ptr @string_from_bytes(ptr @206, i64 2)
  %10 = call i1 @flag(ptr %8, ptr %9)
  %11 = load ptr, ptr %args, align 8
  %12 = call ptr @string_from_bytes(ptr @207, i64 9)
  %13 = call i1 @flag(ptr %11, ptr %12)
  %14 = or i1 %10, %13
  br i1 %14, label %if.entry1, label %else2

else:                                             ; preds = %2
  %15 = call ptr @string_from_bytes(ptr @670, i64 24)
  call void @print_message_error(i64 4, ptr %15)
  ret i64 1

ifend:                                            ; preds = %ifend39
  %16 = load i64, ptr %code, align 4
  ret i64 %16

if.entry1:                                        ; preds = %if.entry
  %17 = call ptr @string_from_bytes(ptr @208, i64 5)
  call void @flo_println(ptr %17)
  ret i64 0

else2:                                            ; preds = %if.entry
  br label %ifend3

ifend3:                                           ; preds = %else2
  %18 = load ptr, ptr %args, align 8
  %19 = call ptr @string_from_bytes(ptr @209, i64 2)
  %20 = call i1 @flag(ptr %18, ptr %19)
  %21 = load ptr, ptr %args, align 8
  %22 = call ptr @string_from_bytes(ptr @210, i64 6)
  %23 = call i1 @flag(ptr %21, ptr %22)
  %24 = or i1 %20, %23
  br i1 %24, label %if.entry4, label %else5

if.entry4:                                        ; preds = %ifend3
  %25 = load ptr, ptr %args, align 8
  %26 = call ptr @Array_string____getitem__(ptr %25, i64 0)
  call void @help(ptr %26)
  ret i64 0

else5:                                            ; preds = %ifend3
  br label %ifend6

ifend6:                                           ; preds = %else5
  %27 = load ptr, ptr %args, align 8
  %28 = call ptr @Array_string____getitem__(ptr %27, i64 1)
  store ptr %28, ptr %filename, align 8
  %29 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Compiler, ptr null, i32 1) to i32))
  call void @Compiler_constructor(ptr %29)
  store ptr %29, ptr %compiler, align 8
  %30 = load ptr, ptr %args, align 8
  %31 = call ptr @string_from_bytes(ptr @211, i64 2)
  %32 = call i1 @flag(ptr %30, ptr %31)
  br i1 %32, label %if.entry7, label %else8

if.entry7:                                        ; preds = %ifend6
  %33 = load ptr, ptr %args, align 8
  %34 = call ptr @string_from_bytes(ptr @211, i64 2)
  %35 = call ptr @flag_value_or(ptr %33, ptr %34, ptr null)
  store ptr %35, ptr %rt_path, align 8
  %36 = load ptr, ptr %rt_path, align 8
  %37 = icmp ne ptr %36, null
  br i1 %37, label %if.entry10, label %else11

else8:                                            ; preds = %ifend6
  br label %ifend9

ifend9:                                           ; preds = %else8, %ifend12
  %38 = load ptr, ptr %compiler, align 8
  %39 = getelementptr inbounds %Compiler, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %memberidx13 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr }, ptr %40, i32 0, i32 1
  %41 = load ptr, ptr %memberidx13, align 8
  %42 = load ptr, ptr %filename, align 8
  %43 = call ptr %41(ptr %38, ptr %42)
  store ptr %43, ptr %file_id, align 8
  %44 = load ptr, ptr %compiler, align 8
  %45 = getelementptr inbounds %Compiler, ptr %44, i32 0, i32 0
  %46 = load ptr, ptr %45, align 8
  %memberidx14 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr }, ptr %46, i32 0, i32 2
  %47 = load ptr, ptr %memberidx14, align 8
  %48 = load ptr, ptr %file_id, align 8
  %49 = call i1 %47(ptr %44, ptr %48)
  %50 = xor i1 %49, true
  br i1 %50, label %if.entry15, label %else16

if.entry10:                                       ; preds = %if.entry7
  %51 = load ptr, ptr %compiler, align 8
  %52 = getelementptr inbounds %Compiler, ptr %51, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr }, ptr %53, i32 0, i32 0
  %54 = load ptr, ptr %memberidx, align 8
  %55 = load ptr, ptr %rt_path, align 8
  call void %54(ptr %51, ptr %55)
  br label %ifend12

else11:                                           ; preds = %if.entry7
  br label %ifend12

ifend12:                                          ; preds = %else11, %if.entry10
  br label %ifend9

if.entry15:                                       ; preds = %ifend9
  %56 = load ptr, ptr %filename, align 8
  %57 = getelementptr inbounds %string, ptr %56, i32 0, i32 0
  %58 = load ptr, ptr %57, align 8
  %memberidx18 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %58, i32 0, i32 5
  %59 = load ptr, ptr %memberidx18, align 8
  %60 = call ptr %59(ptr %56)
  %61 = alloca ptr, align 8
  %62 = call i64 (ptr, ptr, ...) @asprintf(ptr %61, ptr @212, ptr %60)
  %63 = load ptr, ptr %61, align 8
  %64 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %64, ptr %63, i64 %62)
  tail call void @free(ptr %60)
  call void @print_message_error(i64 3, ptr %64)
  ret i64 1

else16:                                           ; preds = %ifend9
  br label %ifend17

ifend17:                                          ; preds = %else16
  %65 = load ptr, ptr %compiler, align 8
  %memberidx19 = getelementptr inbounds %Compiler, ptr %65, i32 0, i32 3
  %66 = load ptr, ptr %memberidx19, align 8
  %67 = load ptr, ptr %compiler, align 8
  %memberidx20 = getelementptr inbounds %Compiler, ptr %67, i32 0, i32 6
  %68 = load ptr, ptr %memberidx20, align 8
  %69 = call ptr @Lexer_tokenize(ptr %66, ptr %68)
  store ptr %69, ptr %tokens, align 8
  %70 = load ptr, ptr %compiler, align 8
  %71 = getelementptr inbounds %Compiler, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %memberidx21 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr }, ptr %72, i32 0, i32 3
  %73 = load ptr, ptr %memberidx21, align 8
  %74 = call i1 %73(ptr %70)
  br i1 %74, label %if.entry22, label %else23

if.entry22:                                       ; preds = %ifend17
  ret i64 1

else23:                                           ; preds = %ifend17
  br label %ifend24

ifend24:                                          ; preds = %else23
  %75 = load ptr, ptr %tokens, align 8
  %76 = load ptr, ptr %compiler, align 8
  %memberidx25 = getelementptr inbounds %Compiler, ptr %76, i32 0, i32 6
  %77 = load ptr, ptr %memberidx25, align 8
  %78 = call ptr @Parser_parse(ptr %75, ptr %77)
  store ptr %78, ptr %module_node, align 8
  %79 = load ptr, ptr %compiler, align 8
  %80 = getelementptr inbounds %Compiler, ptr %79, i32 0, i32 0
  %81 = load ptr, ptr %80, align 8
  %memberidx26 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr }, ptr %81, i32 0, i32 3
  %82 = load ptr, ptr %memberidx26, align 8
  %83 = call i1 %82(ptr %79)
  br i1 %83, label %if.entry27, label %else28

if.entry27:                                       ; preds = %ifend24
  ret i64 1

else28:                                           ; preds = %ifend24
  br label %ifend29

ifend29:                                          ; preds = %else28
  %84 = load ptr, ptr %module_node, align 8
  %85 = load ptr, ptr %compiler, align 8
  %86 = load ptr, ptr %filename, align 8
  %87 = call ptr @TypeChecker_check(ptr %84, ptr %85, ptr %86)
  store ptr %87, ptr %program, align 8
  %88 = load ptr, ptr %compiler, align 8
  %89 = getelementptr inbounds %Compiler, ptr %88, i32 0, i32 0
  %90 = load ptr, ptr %89, align 8
  %memberidx30 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr }, ptr %90, i32 0, i32 3
  %91 = load ptr, ptr %memberidx30, align 8
  %92 = call i1 %91(ptr %88)
  br i1 %92, label %if.entry31, label %else32

if.entry31:                                       ; preds = %ifend29
  ret i64 1

else32:                                           ; preds = %ifend29
  br label %ifend33

ifend33:                                          ; preds = %else32
  %93 = load ptr, ptr %program, align 8
  %94 = call ptr @CodeGen_codegen(ptr %93)
  store ptr %94, ptr %flo_module, align 8
  %95 = load ptr, ptr %flo_module, align 8
  %96 = getelementptr inbounds %GeneratedModule, ptr %95, i32 0, i32 0
  %97 = load ptr, ptr %96, align 8
  %memberidx34 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %97, i32 0, i32 0
  %98 = load ptr, ptr %memberidx34, align 8
  %99 = load ptr, ptr %args, align 8
  %100 = call ptr @string_from_bytes(ptr @649, i64 2)
  %101 = call ptr @string_from_bytes(ptr @650, i64 1)
  %102 = call ptr @flag_value_or(ptr %99, ptr %100, ptr %101)
  %103 = getelementptr inbounds %string, ptr %102, i32 0, i32 0
  %104 = load ptr, ptr %103, align 8
  %memberidx35 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %104, i32 0, i32 5
  %105 = load ptr, ptr %memberidx35, align 8
  %106 = call ptr %105(ptr %102)
  %107 = call i64 @atol(ptr %106)
  tail call void @free(ptr %106)
  call void %98(ptr %95, i64 %107)
  %108 = load ptr, ptr %args, align 8
  %109 = call ptr @string_from_bytes(ptr @651, i64 6)
  %110 = call ptr @flag_value_or(ptr %108, ptr %109, ptr null)
  store ptr %110, ptr %emit_type, align 8
  %111 = load ptr, ptr %args, align 8
  %112 = call ptr @string_from_bytes(ptr @652, i64 2)
  %113 = call ptr @flag_value_or(ptr %111, ptr %112, ptr null)
  store ptr %113, ptr %output_fn, align 8
  %114 = load ptr, ptr %args, align 8
  %115 = call ptr @string_from_bytes(ptr @653, i64 2)
  %116 = call ptr @flag_value_or(ptr %114, ptr %115, ptr null)
  store ptr %116, ptr %link_libs, align 8
  %117 = load ptr, ptr %args, align 8
  %118 = call ptr @string_from_bytes(ptr @654, i64 8)
  %119 = call ptr @string_from_bytes(ptr @315, i64 0)
  %120 = call ptr @flag_value_or(ptr %117, ptr %118, ptr %119)
  store ptr %120, ptr %target_triple, align 8
  %121 = load ptr, ptr %flo_module, align 8
  %122 = getelementptr inbounds %GeneratedModule, ptr %121, i32 0, i32 0
  %123 = load ptr, ptr %122, align 8
  %memberidx36 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %123, i32 0, i32 2
  %124 = load ptr, ptr %memberidx36, align 8
  %125 = load ptr, ptr %target_triple, align 8
  call void %124(ptr %121, ptr %125)
  %126 = load ptr, ptr %emit_type, align 8
  %127 = icmp ne ptr %126, null
  br i1 %127, label %if.entry37, label %else38

if.entry37:                                       ; preds = %ifend33
  %128 = load ptr, ptr %emit_type, align 8
  %129 = call ptr @string_from_bytes(ptr @655, i64 3)
  %130 = call i1 @string___eq__(ptr %128, ptr %129)
  br i1 %130, label %if.entry40, label %else41

else38:                                           ; preds = %ifend33
  %131 = load ptr, ptr %flo_module, align 8
  %132 = getelementptr inbounds %GeneratedModule, ptr %131, i32 0, i32 0
  %133 = load ptr, ptr %132, align 8
  %memberidx90 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %133, i32 0, i32 1
  %134 = load ptr, ptr %memberidx90, align 8
  %135 = call i64 %134(ptr %131)
  store i64 %135, ptr %code, align 4
  br label %ifend39

ifend39:                                          ; preds = %else38, %ifend42
  %136 = load ptr, ptr %args, align 8
  call void @Array_string____del__(ptr %136)
  tail call void @free(ptr %136)
  %137 = load ptr, ptr %module_node, align 8
  tail call void @free(ptr %137)
  br label %ifend

if.entry40:                                       ; preds = %if.entry37
  %138 = call ptr @string_from_bytes(ptr @656, i64 13)
  store ptr %138, ptr %tmp_file, align 8
  %139 = load ptr, ptr %flo_module, align 8
  %140 = getelementptr inbounds %GeneratedModule, ptr %139, i32 0, i32 0
  %141 = load ptr, ptr %140, align 8
  %memberidx43 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %141, i32 0, i32 3
  %142 = load ptr, ptr %memberidx43, align 8
  %143 = load ptr, ptr %tmp_file, align 8
  call void %142(ptr %139, ptr %143)
  %144 = load ptr, ptr %output_fn, align 8
  %145 = icmp ne ptr %144, null
  br i1 %145, label %true_block, label %false_block

else41:                                           ; preds = %if.entry37
  %146 = load ptr, ptr %emit_type, align 8
  %147 = call ptr @string_from_bytes(ptr @662, i64 7)
  %148 = call i1 @string___eq__(ptr %146, ptr %147)
  br i1 %148, label %if.entry58, label %else59

ifend42:                                          ; preds = %ifend60, %end51
  br label %ifend39

true_block:                                       ; preds = %if.entry40
  %149 = load ptr, ptr %output_fn, align 8
  br label %end

false_block:                                      ; preds = %if.entry40
  %150 = call ptr @string_from_bytes(ptr @657, i64 6)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %149, %true_block ], [ %150, %false_block ]
  store ptr %ternary, ptr %output_fn, align 8
  %151 = load ptr, ptr %link_libs, align 8
  %152 = icmp ne ptr %151, null
  br i1 %152, label %true_block44, label %false_block45

true_block44:                                     ; preds = %end
  %153 = load ptr, ptr %link_libs, align 8
  %154 = getelementptr inbounds %string, ptr %153, i32 0, i32 0
  %155 = load ptr, ptr %154, align 8
  %memberidx47 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %155, i32 0, i32 5
  %156 = load ptr, ptr %memberidx47, align 8
  %157 = call ptr %156(ptr %153)
  %158 = alloca ptr, align 8
  %159 = call i64 (ptr, ptr, ...) @asprintf(ptr %158, ptr @658, ptr %157)
  %160 = load ptr, ptr %158, align 8
  %161 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %161, ptr %160, i64 %159)
  tail call void @free(ptr %157)
  br label %end46

false_block45:                                    ; preds = %end
  %162 = call ptr @string_from_bytes(ptr @315, i64 0)
  br label %end46

end46:                                            ; preds = %false_block45, %true_block44
  %ternary48 = phi ptr [ %161, %true_block44 ], [ %162, %false_block45 ]
  store ptr %ternary48, ptr %link_libs, align 8
  %163 = call ptr @string_from_bytes(ptr @659, i64 8)
  store ptr %163, ptr %linker_exec, align 8
  %164 = load ptr, ptr %target_triple, align 8
  %165 = call ptr @string_from_bytes(ptr @315, i64 0)
  %166 = call i1 @string___eq__(ptr %164, ptr %165)
  br i1 %166, label %true_block49, label %false_block50

true_block49:                                     ; preds = %end46
  %167 = load ptr, ptr %target_triple, align 8
  %168 = getelementptr inbounds %string, ptr %167, i32 0, i32 0
  %169 = load ptr, ptr %168, align 8
  %memberidx52 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %169, i32 0, i32 5
  %170 = load ptr, ptr %memberidx52, align 8
  %171 = call ptr %170(ptr %167)
  %172 = alloca ptr, align 8
  %173 = call i64 (ptr, ptr, ...) @asprintf(ptr %172, ptr @660, ptr %171)
  %174 = load ptr, ptr %172, align 8
  %175 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %175, ptr %174, i64 %173)
  tail call void @free(ptr %171)
  br label %end51

false_block50:                                    ; preds = %end46
  %176 = call ptr @string_from_bytes(ptr @315, i64 0)
  br label %end51

end51:                                            ; preds = %false_block50, %true_block49
  %ternary53 = phi ptr [ %175, %true_block49 ], [ %176, %false_block50 ]
  store ptr %ternary53, ptr %target_option, align 8
  %177 = load ptr, ptr %linker_exec, align 8
  %178 = getelementptr inbounds %string, ptr %177, i32 0, i32 0
  %179 = load ptr, ptr %178, align 8
  %memberidx54 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %179, i32 0, i32 5
  %180 = load ptr, ptr %memberidx54, align 8
  %181 = call ptr %180(ptr %177)
  %182 = load ptr, ptr %target_option, align 8
  %183 = getelementptr inbounds %string, ptr %182, i32 0, i32 0
  %184 = load ptr, ptr %183, align 8
  %memberidx55 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %184, i32 0, i32 5
  %185 = load ptr, ptr %memberidx55, align 8
  %186 = call ptr %185(ptr %182)
  %187 = load ptr, ptr %link_libs, align 8
  %188 = getelementptr inbounds %string, ptr %187, i32 0, i32 0
  %189 = load ptr, ptr %188, align 8
  %memberidx56 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %189, i32 0, i32 5
  %190 = load ptr, ptr %memberidx56, align 8
  %191 = call ptr %190(ptr %187)
  %192 = load ptr, ptr %output_fn, align 8
  %193 = getelementptr inbounds %string, ptr %192, i32 0, i32 0
  %194 = load ptr, ptr %193, align 8
  %memberidx57 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %194, i32 0, i32 5
  %195 = load ptr, ptr %memberidx57, align 8
  %196 = call ptr %195(ptr %192)
  %197 = alloca ptr, align 8
  %198 = call i64 (ptr, ptr, ...) @asprintf(ptr %197, ptr @661, ptr %181, ptr %186, ptr %191, ptr %196)
  %199 = load ptr, ptr %197, align 8
  tail call void @free(ptr %181)
  tail call void @free(ptr %186)
  tail call void @free(ptr %191)
  tail call void @free(ptr %196)
  call void @system(ptr %199)
  %200 = load ptr, ptr %target_option, align 8
  call void @string___del__(ptr %200)
  tail call void @free(ptr %200)
  br label %ifend42

if.entry58:                                       ; preds = %else41
  %201 = load ptr, ptr %flo_module, align 8
  %202 = getelementptr inbounds %GeneratedModule, ptr %201, i32 0, i32 0
  %203 = load ptr, ptr %202, align 8
  %memberidx61 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %203, i32 0, i32 4
  %204 = load ptr, ptr %memberidx61, align 8
  %205 = load ptr, ptr %output_fn, align 8
  %206 = icmp ne ptr %205, null
  br i1 %206, label %true_block62, label %false_block63

else59:                                           ; preds = %else41
  %207 = load ptr, ptr %emit_type, align 8
  %208 = call ptr @string_from_bytes(ptr @664, i64 7)
  %209 = call i1 @string___eq__(ptr %207, ptr %208)
  br i1 %209, label %if.entry66, label %else67

ifend60:                                          ; preds = %ifend68, %end64
  br label %ifend42

true_block62:                                     ; preds = %if.entry58
  %210 = load ptr, ptr %output_fn, align 8
  br label %end64

false_block63:                                    ; preds = %if.entry58
  %211 = call ptr @string_from_bytes(ptr @663, i64 9)
  br label %end64

end64:                                            ; preds = %false_block63, %true_block62
  %ternary65 = phi ptr [ %210, %true_block62 ], [ %211, %false_block63 ]
  call void %204(ptr %201, ptr %ternary65)
  br label %ifend60

if.entry66:                                       ; preds = %else59
  %212 = load ptr, ptr %flo_module, align 8
  %213 = getelementptr inbounds %GeneratedModule, ptr %212, i32 0, i32 0
  %214 = load ptr, ptr %213, align 8
  %memberidx69 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %214, i32 0, i32 5
  %215 = load ptr, ptr %memberidx69, align 8
  %216 = load ptr, ptr %output_fn, align 8
  %217 = icmp ne ptr %216, null
  br i1 %217, label %true_block70, label %false_block71

else67:                                           ; preds = %else59
  %218 = load ptr, ptr %emit_type, align 8
  %219 = call ptr @string_from_bytes(ptr @666, i64 3)
  %220 = call i1 @string___eq__(ptr %218, ptr %219)
  br i1 %220, label %if.entry74, label %else75

ifend68:                                          ; preds = %ifend76, %end72
  br label %ifend60

true_block70:                                     ; preds = %if.entry66
  %221 = load ptr, ptr %output_fn, align 8
  br label %end72

false_block71:                                    ; preds = %if.entry66
  %222 = call ptr @string_from_bytes(ptr @665, i64 9)
  br label %end72

end72:                                            ; preds = %false_block71, %true_block70
  %ternary73 = phi ptr [ %221, %true_block70 ], [ %222, %false_block71 ]
  call void %215(ptr %212, ptr %ternary73)
  br label %ifend68

if.entry74:                                       ; preds = %else67
  %223 = load ptr, ptr %flo_module, align 8
  %224 = getelementptr inbounds %GeneratedModule, ptr %223, i32 0, i32 0
  %225 = load ptr, ptr %224, align 8
  %memberidx77 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %225, i32 0, i32 3
  %226 = load ptr, ptr %memberidx77, align 8
  %227 = load ptr, ptr %output_fn, align 8
  %228 = icmp ne ptr %227, null
  br i1 %228, label %true_block78, label %false_block79

else75:                                           ; preds = %else67
  %229 = load ptr, ptr %emit_type, align 8
  %230 = call ptr @string_from_bytes(ptr @668, i64 3)
  %231 = call i1 @string___eq__(ptr %229, ptr %230)
  br i1 %231, label %if.entry82, label %else83

ifend76:                                          ; preds = %ifend84, %end80
  br label %ifend68

true_block78:                                     ; preds = %if.entry74
  %232 = load ptr, ptr %output_fn, align 8
  br label %end80

false_block79:                                    ; preds = %if.entry74
  %233 = call ptr @string_from_bytes(ptr @667, i64 8)
  br label %end80

end80:                                            ; preds = %false_block79, %true_block78
  %ternary81 = phi ptr [ %232, %true_block78 ], [ %233, %false_block79 ]
  call void %226(ptr %223, ptr %ternary81)
  br label %ifend76

if.entry82:                                       ; preds = %else75
  %234 = load ptr, ptr %flo_module, align 8
  %235 = getelementptr inbounds %GeneratedModule, ptr %234, i32 0, i32 0
  %236 = load ptr, ptr %235, align 8
  %memberidx85 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %236, i32 0, i32 6
  %237 = load ptr, ptr %memberidx85, align 8
  %238 = load ptr, ptr %output_fn, align 8
  %239 = icmp ne ptr %238, null
  br i1 %239, label %true_block86, label %false_block87

else83:                                           ; preds = %else75
  br label %ifend84

ifend84:                                          ; preds = %else83, %end88
  br label %ifend76

true_block86:                                     ; preds = %if.entry82
  %240 = load ptr, ptr %output_fn, align 8
  br label %end88

false_block87:                                    ; preds = %if.entry82
  %241 = call ptr @string_from_bytes(ptr @669, i64 8)
  br label %end88

end88:                                            ; preds = %false_block87, %true_block86
  %ternary89 = phi ptr [ %240, %true_block86 ], [ %241, %false_block87 ]
  call void %237(ptr %234, ptr %ternary89)
  br label %ifend84
}

define void @GeneratedModule_print_errors(ptr %0) {
  %this = alloca ptr, align 8
  %error = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %2, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr @string_from_cstring(ptr %3)
  store ptr %4, ptr %error, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %GeneratedModule, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx1, align 8
  call void @LLVMDisposeMessage(ptr %6)
  %7 = load ptr, ptr %error, align 8
  %8 = getelementptr inbounds %string, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx2, align 8
  %11 = call ptr %10(ptr %7)
  %12 = alloca ptr, align 8
  %13 = call i64 (ptr, ptr, ...) @asprintf(ptr %12, ptr @34, ptr %11)
  %14 = load ptr, ptr %12, align 8
  %15 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %15, ptr %14, i64 %13)
  tail call void @free(ptr %11)
  call void @panic(ptr %15)
  ret void
}

define void @GeneratedModule_write_bc(ptr %0, ptr %1) {
  %filename = alloca ptr, align 8
  %this = alloca ptr, align 8
  %filename_cstr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %filename, align 8
  %3 = load ptr, ptr %filename, align 8
  %4 = getelementptr inbounds %string, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr %6(ptr %3)
  store ptr %7, ptr %filename_cstr, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %GeneratedModule, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = load ptr, ptr %filename_cstr, align 8
  %11 = call i64 @LLVMWriteBitcodeToFile(ptr %9, ptr %10)
  %12 = load ptr, ptr %filename_cstr, align 8
  tail call void @free(ptr %12)
  %13 = load ptr, ptr %filename, align 8
  call void @string___del__(ptr %13)
  tail call void @free(ptr %13)
  ret void
}

define i64 @GeneratedModule_exec(ptr %0) {
  %this = alloca ptr, align 8
  %ret = alloca i64, align 8
  %main_fnc = alloca ptr, align 8
  %engine = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  call void @LLVMLinkInMCJIT()
  store ptr null, ptr %engine, align 8
  %2 = load ptr, ptr %engine, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %GeneratedModule, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %GeneratedModule, ptr %7, i32 0, i32 2
  %8 = call i1 @LLVMCreateExecutionEngineForModule(ptr %engine, ptr %4, ptr %memberidx2)
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %9 = load ptr, ptr %this, align 8
  call void @GeneratedModule_print_errors(ptr %9)
  br label %ifend

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %GeneratedModule, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx3, align 8
  %12 = call ptr @LLVMGetNamedFunction(ptr %11, ptr @35)
  store ptr %12, ptr %main_fnc, align 8
  %13 = load ptr, ptr %main_fnc, align 8
  %14 = icmp eq ptr %13, null
  br i1 %14, label %if.entry4, label %else5

if.entry4:                                        ; preds = %ifend
  %15 = call ptr @string_from_bytes(ptr @36, i64 48)
  call void @panic(ptr %15)
  %16 = load ptr, ptr %engine, align 8
  call void @LLVMDisposeExecutionEngine(ptr %16)
  ret i64 1

else5:                                            ; preds = %ifend
  br label %ifend6

ifend6:                                           ; preds = %else5
  %17 = load ptr, ptr %engine, align 8
  %18 = load ptr, ptr %main_fnc, align 8
  %19 = call i64 @LLVMRunFunctionAsMain(ptr %17, ptr %18, i64 0, ptr null, ptr null)
  store i64 %19, ptr %ret, align 4
  %20 = load ptr, ptr %engine, align 8
  %21 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %GeneratedModule, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx7, align 8
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %GeneratedModule, ptr %23, i32 0, i32 1
  %24 = load ptr, ptr %memberidx8, align 8
  %25 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %GeneratedModule, ptr %25, i32 0, i32 1
  %26 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %GeneratedModule, ptr %26, i32 0, i32 2
  %27 = load ptr, ptr %memberidx10, align 8
  %28 = load ptr, ptr %this, align 8
  %memberidx11 = getelementptr inbounds %GeneratedModule, ptr %28, i32 0, i32 2
  %29 = call i1 @LLVMRemoveModule(ptr %20, ptr %22, ptr %memberidx9, ptr %memberidx11)
  br i1 %29, label %if.entry12, label %else13

if.entry12:                                       ; preds = %ifend6
  %30 = load ptr, ptr %this, align 8
  call void @GeneratedModule_print_errors(ptr %30)
  br label %ifend14

else13:                                           ; preds = %ifend6
  br label %ifend14

ifend14:                                          ; preds = %else13, %if.entry12
  %31 = load ptr, ptr %engine, align 8
  call void @LLVMDisposeExecutionEngine(ptr %31)
  %32 = load i64, ptr %ret, align 4
  ret i64 %32
}

define void @GeneratedModule_set_target_machine(ptr %0, ptr %1) {
  %triple_str = alloca ptr, align 8
  %this = alloca ptr, align 8
  %triple = alloca ptr, align 8
  %target = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %triple_str, align 8
  %3 = load ptr, ptr %triple_str, align 8
  %memberidx = getelementptr inbounds %string, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = add nuw i64 %4, 1
  %6 = alloca i8, i64 %5, align 1
  store ptr %6, ptr %triple, align 8
  %7 = load ptr, ptr %triple_str, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %10 = call ptr @LLVMGetDefaultTargetTriple()
  store ptr %10, ptr %triple, align 8
  br label %ifend

else:                                             ; preds = %2
  %11 = load ptr, ptr %triple, align 8
  %12 = load ptr, ptr %triple_str, align 8
  %13 = getelementptr inbounds %string, ptr %12, i32 0, i32 0
  %14 = load ptr, ptr %13, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %14, i32 0, i32 3
  %15 = load ptr, ptr %memberidx2, align 8
  %16 = call ptr %15(ptr %12)
  %17 = load ptr, ptr %triple_str, align 8
  %memberidx3 = getelementptr inbounds %string, ptr %17, i32 0, i32 2
  %18 = load i64, ptr %memberidx3, align 4
  %19 = mul i64 %18, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %11, ptr align 8 %16, i64 %19, i1 false)
  %20 = load ptr, ptr %triple_str, align 8
  %memberidx4 = getelementptr inbounds %string, ptr %20, i32 0, i32 2
  %21 = load i64, ptr %memberidx4, align 4
  %22 = load ptr, ptr %triple, align 8
  %23 = getelementptr inbounds i8, ptr %22, i64 %21
  store i8 0, ptr %23, align 1
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  store ptr null, ptr %target, align 8
  %24 = load ptr, ptr %triple, align 8
  %25 = load ptr, ptr %target, align 8
  %26 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %GeneratedModule, ptr %26, i32 0, i32 2
  %27 = load ptr, ptr %memberidx5, align 8
  %28 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %GeneratedModule, ptr %28, i32 0, i32 2
  %29 = call i1 @LLVMGetTargetFromTriple(ptr %24, ptr %target, ptr %memberidx6)
  br i1 %29, label %if.entry7, label %else8

if.entry7:                                        ; preds = %ifend
  %30 = load ptr, ptr %this, align 8
  call void @GeneratedModule_print_errors(ptr %30)
  br label %ifend9

else8:                                            ; preds = %ifend
  br label %ifend9

ifend9:                                           ; preds = %else8, %if.entry7
  %31 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %GeneratedModule, ptr %31, i32 0, i32 3
  %32 = load ptr, ptr %target, align 8
  %33 = load ptr, ptr %triple, align 8
  %34 = call ptr @LLVMGetHostCPUFeatures()
  %35 = call ptr @LLVMCreateTargetMachine(ptr %32, ptr %33, ptr @55, ptr %34, i64 3, i64 0, i64 0)
  store ptr %35, ptr %memberidx10, align 8
  %36 = load ptr, ptr %this, align 8
  %memberidx11 = getelementptr inbounds %GeneratedModule, ptr %36, i32 0, i32 1
  %37 = load ptr, ptr %memberidx11, align 8
  %38 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %GeneratedModule, ptr %38, i32 0, i32 3
  %39 = load ptr, ptr %memberidx12, align 8
  %40 = call ptr @LLVMCreateTargetDataLayout(ptr %39)
  call void @LLVMSetDataLayout(ptr %37, ptr %40)
  %41 = load ptr, ptr %this, align 8
  %memberidx13 = getelementptr inbounds %GeneratedModule, ptr %41, i32 0, i32 1
  %42 = load ptr, ptr %memberidx13, align 8
  %43 = load ptr, ptr %this, align 8
  %memberidx14 = getelementptr inbounds %GeneratedModule, ptr %43, i32 0, i32 3
  %44 = load ptr, ptr %memberidx14, align 8
  %45 = call ptr @LLVMGetTargetMachineTriple(ptr %44)
  call void @LLVMSetTarget(ptr %42, ptr %45)
  ret void
}

define void @GeneratedModule_write_ir(ptr %0, ptr %1) {
  %filename = alloca ptr, align 8
  %this = alloca ptr, align 8
  %filename_cstr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %filename, align 8
  %3 = load ptr, ptr %filename, align 8
  %4 = getelementptr inbounds %string, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr %6(ptr %3)
  store ptr %7, ptr %filename_cstr, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %GeneratedModule, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = load ptr, ptr %filename_cstr, align 8
  %11 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %GeneratedModule, ptr %11, i32 0, i32 2
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %GeneratedModule, ptr %13, i32 0, i32 2
  %14 = call i1 @LLVMPrintModuleToFile(ptr %9, ptr %10, ptr %memberidx3)
  br i1 %14, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %15 = load ptr, ptr %this, align 8
  call void @GeneratedModule_print_errors(ptr %15)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %16 = load ptr, ptr %filename_cstr, align 8
  tail call void @free(ptr %16)
  %17 = load ptr, ptr %filename, align 8
  call void @string___del__(ptr %17)
  tail call void @free(ptr %17)
  ret void
}

define void @GeneratedModule_run_passes(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %level = alloca i64, align 8
  %func = alloca ptr, align 8
  %pm = alloca ptr, align 8
  %fpm = alloca ptr, align 8
  %pmb = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %level, align 4
  %3 = load i64, ptr %level, align 4
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret void

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %5 = call ptr @LLVMCreatePassManager()
  store ptr %5, ptr %pm, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx, align 8
  %8 = call ptr @LLVMCreateFunctionPassManagerForModule(ptr %7)
  store ptr %8, ptr %fpm, align 8
  %9 = call ptr @LLVMPassManagerBuilderCreate()
  store ptr %9, ptr %pmb, align 8
  %10 = load ptr, ptr %pm, align 8
  call void @LLVMAddInternalizePass(ptr %10, i64 1)
  %11 = load ptr, ptr %pm, align 8
  call void @LLVMAddGlobalDCEPass(ptr %11)
  %12 = load ptr, ptr %pm, align 8
  call void @LLVMAddGlobalOptimizerPass(ptr %12)
  %13 = load ptr, ptr %pm, align 8
  call void @LLVMAddInstructionCombiningPass(ptr %13)
  %14 = load ptr, ptr %pm, align 8
  call void @LLVMAddScalarReplAggregatesPass(ptr %14)
  %15 = load ptr, ptr %pm, align 8
  call void @LLVMAddFunctionInliningPass(ptr %15)
  %16 = load ptr, ptr %pmb, align 8
  %17 = load i64, ptr %level, align 4
  call void @LLVMPassManagerBuilderSetOptLevel(ptr %16, i64 %17)
  %18 = load ptr, ptr %pmb, align 8
  call void @LLVMPassManagerBuilderUseInlinerWithThreshold(ptr %18, i64 255)
  %19 = load ptr, ptr %pmb, align 8
  %20 = load ptr, ptr %fpm, align 8
  call void @LLVMPassManagerBuilderPopulateFunctionPassManager(ptr %19, ptr %20)
  %21 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %GeneratedModule, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx1, align 8
  %23 = call ptr @LLVMGetFirstFunction(ptr %22)
  store ptr %23, ptr %func, align 8
  %24 = load ptr, ptr %func, align 8
  %25 = icmp ne ptr %24, null
  br i1 %25, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %ifend
  %26 = load ptr, ptr %fpm, align 8
  %27 = load ptr, ptr %func, align 8
  %28 = call i1 @LLVMRunFunctionPassManager(ptr %26, ptr %27)
  %29 = load ptr, ptr %func, align 8
  %30 = call ptr @LLVMGetNextFunction(ptr %29)
  store ptr %30, ptr %func, align 8
  %31 = load ptr, ptr %func, align 8
  %32 = icmp ne ptr %31, null
  br i1 %32, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %ifend
  %33 = load ptr, ptr %pmb, align 8
  %34 = load ptr, ptr %pm, align 8
  call void @LLVMPassManagerBuilderPopulateModulePassManager(ptr %33, ptr %34)
  %35 = load ptr, ptr %pm, align 8
  %36 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %GeneratedModule, ptr %36, i32 0, i32 1
  %37 = load ptr, ptr %memberidx2, align 8
  %38 = call i1 @LLVMRunPassManager(ptr %35, ptr %37)
  %39 = load ptr, ptr %fpm, align 8
  call void @LLVMDisposePassManager(ptr %39)
  %40 = load ptr, ptr %pmb, align 8
  call void @LLVMPassManagerBuilderDispose(ptr %40)
  %41 = load ptr, ptr %pm, align 8
  call void @LLVMDisposePassManager(ptr %41)
  ret void
}

define void @GeneratedModule___del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  call void @LLVMShutdown()
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  call void @LLVMDisposeTargetMachine(ptr %3)
  ret void
}

define void @GeneratedModule_write_asm(ptr %0, ptr %1) {
  %filename = alloca ptr, align 8
  %this = alloca ptr, align 8
  %filename_cstr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %filename, align 8
  %3 = load ptr, ptr %filename, align 8
  %4 = getelementptr inbounds %string, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr %6(ptr %3)
  store ptr %7, ptr %filename_cstr, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %GeneratedModule, ptr %8, i32 0, i32 3
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %GeneratedModule, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx2, align 8
  %12 = load ptr, ptr %filename_cstr, align 8
  %13 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %GeneratedModule, ptr %13, i32 0, i32 2
  %14 = load ptr, ptr %memberidx3, align 8
  %15 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %GeneratedModule, ptr %15, i32 0, i32 2
  %16 = call i1 @LLVMTargetMachineEmitToFile(ptr %9, ptr %11, ptr %12, i64 0, ptr %memberidx4)
  br i1 %16, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %17 = load ptr, ptr %this, align 8
  call void @GeneratedModule_print_errors(ptr %17)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %18 = load ptr, ptr %filename_cstr, align 8
  tail call void @free(ptr %18)
  %19 = load ptr, ptr %filename, align 8
  call void @string___del__(ptr %19)
  tail call void @free(ptr %19)
  ret void
}

define void @GeneratedModule_write_obj(ptr %0, ptr %1) {
  %filename = alloca ptr, align 8
  %this = alloca ptr, align 8
  %filename_cstr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %filename, align 8
  %3 = load ptr, ptr %filename, align 8
  %4 = getelementptr inbounds %string, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr %6(ptr %3)
  store ptr %7, ptr %filename_cstr, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %GeneratedModule, ptr %8, i32 0, i32 3
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %GeneratedModule, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx2, align 8
  %12 = load ptr, ptr %filename_cstr, align 8
  %13 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %GeneratedModule, ptr %13, i32 0, i32 2
  %14 = load ptr, ptr %memberidx3, align 8
  %15 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %GeneratedModule, ptr %15, i32 0, i32 2
  %16 = call i1 @LLVMTargetMachineEmitToFile(ptr %9, ptr %11, ptr %12, i64 1, ptr %memberidx4)
  br i1 %16, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %17 = load ptr, ptr %this, align 8
  call void @GeneratedModule_print_errors(ptr %17)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %18 = load ptr, ptr %filename_cstr, align 8
  tail call void @free(ptr %18)
  %19 = load ptr, ptr %filename, align 8
  call void @string___del__(ptr %19)
  tail call void @free(ptr %19)
  ret void
}

define void @GeneratedModule_constructor(ptr %0, ptr %1) {
  %llvm_mod = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableGeneratedModule, ptr %3, align 8
  store ptr %1, ptr %llvm_mod, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %llvm_mod, align 8
  store ptr %5, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %GeneratedModule, ptr %6, i32 0, i32 2
  store ptr null, ptr %memberidx1, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %GeneratedModule, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %GeneratedModule, ptr %9, i32 0, i32 2
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %GeneratedModule, ptr %11, i32 0, i32 2
  %12 = call i1 @LLVMVerifyModule(ptr %8, i64 1, ptr %memberidx4)
  br i1 %12, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %13 = load ptr, ptr %this, align 8
  %14 = getelementptr inbounds %GeneratedModule, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %memberidx5 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %15, i32 0, i32 4
  %16 = load ptr, ptr %memberidx5, align 8
  %17 = call ptr @string_from_bytes(ptr @32, i64 8)
  call void %16(ptr %13, ptr %17)
  %18 = load ptr, ptr %this, align 8
  call void @GeneratedModule_print_errors(ptr %18)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  call void @LLVM_InitializeAllTargetInfos()
  call void @LLVM_InitializeAllTargets()
  call void @LLVM_InitializeAllTargetMCs()
  call void @LLVM_InitializeAllAsmParsers()
  call void @LLVM_InitializeAllAsmPrinters()
  ret void
}

declare i1 @LLVMVerifyModule(ptr, i64, ptr)

declare void @LLVM_InitializeAllTargetInfos()

declare void @LLVM_InitializeAllTargets()

declare void @LLVM_InitializeAllTargetMCs()

declare void @LLVM_InitializeAllAsmParsers()

declare void @LLVM_InitializeAllAsmPrinters()

declare void @LLVMDisposeMessage(ptr)

define void @panic(ptr %0) {
  %message = alloca ptr, align 8
  store ptr %0, ptr %message, align 8
  %2 = call ptr @string_from_bytes(ptr @33, i64 7)
  call void @flo_print(ptr %2)
  %3 = load ptr, ptr %message, align 8
  call void @flo_println(ptr %3)
  call void @exit(i64 -1)
  ret void
}

declare void @exit(i64)

declare ptr @LLVMCreatePassManager()

declare ptr @LLVMCreateFunctionPassManagerForModule(ptr)

declare ptr @LLVMPassManagerBuilderCreate()

declare void @LLVMAddInternalizePass(ptr, i64)

declare void @LLVMAddGlobalDCEPass(ptr)

declare void @LLVMAddGlobalOptimizerPass(ptr)

declare void @LLVMAddInstructionCombiningPass(ptr)

declare void @LLVMAddScalarReplAggregatesPass(ptr)

declare void @LLVMAddFunctionInliningPass(ptr)

declare void @LLVMPassManagerBuilderSetOptLevel(ptr, i64)

declare void @LLVMPassManagerBuilderUseInlinerWithThreshold(ptr, i64)

declare void @LLVMPassManagerBuilderPopulateFunctionPassManager(ptr, ptr)

declare ptr @LLVMGetFirstFunction(ptr)

declare i1 @LLVMRunFunctionPassManager(ptr, ptr)

declare ptr @LLVMGetNextFunction(ptr)

declare void @LLVMPassManagerBuilderPopulateModulePassManager(ptr, ptr)

declare i1 @LLVMRunPassManager(ptr, ptr)

declare void @LLVMDisposePassManager(ptr)

declare void @LLVMPassManagerBuilderDispose(ptr)

declare void @LLVMLinkInMCJIT()

declare i1 @LLVMCreateExecutionEngineForModule(ptr, ptr, ptr)

declare ptr @LLVMGetNamedFunction(ptr, ptr)

declare void @LLVMDisposeExecutionEngine(ptr)

declare i64 @LLVMRunFunctionAsMain(ptr, ptr, i64, ptr, ptr)

declare i1 @LLVMRemoveModule(ptr, ptr, ptr, ptr)

declare ptr @LLVMGetDefaultTargetTriple()

declare i1 @LLVMGetTargetFromTriple(ptr, ptr, ptr)

declare ptr @LLVMCreateTargetMachine(ptr, ptr, ptr, ptr, i64, i64, i64)

declare ptr @LLVMGetHostCPUFeatures()

declare void @LLVMSetDataLayout(ptr, ptr)

declare ptr @LLVMCreateTargetDataLayout(ptr)

declare void @LLVMSetTarget(ptr, ptr)

declare ptr @LLVMGetTargetMachineTriple(ptr)

declare i1 @LLVMTargetMachineEmitToFile(ptr, ptr, ptr, i64, ptr)

declare i1 @LLVMPrintModuleToFile(ptr, ptr, ptr)

declare i64 @LLVMWriteBitcodeToFile(ptr, ptr)

declare void @LLVMShutdown()

declare void @LLVMDisposeTargetMachine(ptr)

define i1 @Compiler_print_errors(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Compiler, ptr %2, i32 0, i32 6
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_FloError_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sgt i64 %4, 0
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Compiler, ptr %6, i32 0, i32 6
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = call ptr @Array_FloError____getitem__(ptr %7, i64 0)
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Compiler, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Compiler, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %FileId, ptr %12, i32 0, i32 0
  %13 = load i64, ptr %memberidx5, align 4
  %14 = call ptr @Array_FloFile____getitem__(ptr %10, i64 %13)
  %memberidx6 = getelementptr inbounds %FloFile, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx6, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Compiler, ptr %16, i32 0, i32 3
  %17 = load ptr, ptr %memberidx7, align 8
  call void @print_error(ptr %8, ptr %15, ptr %17)
  ret i1 true

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  ret i1 false
}

define void @Compiler_set_std_path(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %std_dir_path = alloca ptr, align 8
  %builtins_file_path = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %std_dir_path, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Compiler, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %std_dir_path, align 8
  store ptr %4, ptr %memberidx, align 8
  %5 = call ptr @string_from_bytes(ptr @60, i64 21)
  store ptr %5, ptr %builtins_file_path, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Compiler, ptr %6, i32 0, i32 4
  %7 = load ptr, ptr %std_dir_path, align 8
  %8 = load ptr, ptr %builtins_file_path, align 8
  %9 = call ptr @Path_join(ptr %7, ptr %8)
  store ptr %9, ptr %memberidx1, align 8
  %10 = load ptr, ptr %builtins_file_path, align 8
  call void @string___del__(ptr %10)
  tail call void @free(ptr %10)
  ret void
}

define ptr @FloRange_merge(ptr %0, ptr %1) {
  %r1 = alloca ptr, align 8
  %r2 = alloca ptr, align 8
  store ptr %0, ptr %r1, align 8
  store ptr %1, ptr %r2, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloRange, ptr null, i32 1) to i32))
  %4 = load ptr, ptr %r1, align 8
  %memberidx = getelementptr inbounds %FloRange, ptr %4, i32 0, i32 0
  %5 = load i64, ptr %memberidx, align 4
  %6 = load ptr, ptr %r2, align 8
  %memberidx1 = getelementptr inbounds %FloRange, ptr %6, i32 0, i32 1
  %7 = load i64, ptr %memberidx1, align 4
  %8 = load ptr, ptr %r1, align 8
  %memberidx2 = getelementptr inbounds %FloRange, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %memberidx2, align 4
  %10 = load ptr, ptr %r2, align 8
  %memberidx3 = getelementptr inbounds %FloRange, ptr %10, i32 0, i32 3
  %11 = load i64, ptr %memberidx3, align 4
  call void @FloRange_constructor(ptr %3, i64 %5, i64 %7, i64 %9, i64 %11)
  ret ptr %3
}

define void @FloRange_constructor(ptr %0, i64 %1, i64 %2, i64 %3, i64 %4) {
  %line = alloca i64, align 8
  %this = alloca ptr, align 8
  %start = alloca i64, align 8
  %end = alloca i64, align 8
  %col = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %start, align 4
  store i64 %2, ptr %end, align 4
  store i64 %3, ptr %col, align 4
  store i64 %4, ptr %line, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %FloRange, ptr %6, i32 0, i32 0
  %7 = load i64, ptr %start, align 4
  store i64 %7, ptr %memberidx, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %FloRange, ptr %8, i32 0, i32 1
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx1, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %FloRange, ptr %10, i32 0, i32 2
  %11 = load i64, ptr %col, align 4
  store i64 %11, ptr %memberidx2, align 4
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %FloRange, ptr %12, i32 0, i32 3
  %13 = load i64, ptr %line, align 4
  store i64 %13, ptr %memberidx3, align 4
  ret void
}

define void @FloError_constructor(ptr %0, i64 %1, ptr %2, ptr %3) {
  %range = alloca ptr, align 8
  %kind = alloca i64, align 8
  %message = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %kind, align 4
  store ptr %2, ptr %message, align 8
  store ptr %3, ptr %range, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %FloError, ptr %5, i32 0, i32 0
  %6 = load i64, ptr %kind, align 4
  store i64 %6, ptr %memberidx, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %FloError, ptr %7, i32 0, i32 2
  %8 = load ptr, ptr %range, align 8
  store ptr %8, ptr %memberidx1, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %FloError, ptr %9, i32 0, i32 1
  %10 = load ptr, ptr %message, align 8
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define ptr @Array_FloError__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FloError_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FloError_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_FloError__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FloError_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_FloError__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FloError_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FloError_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_FloError_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_FloError_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_FloError____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FloError_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_FloError__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FloError_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_FloError_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_FloError_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_FloError____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_FloError_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FloError_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_FloError_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_FloError_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_FloError_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_FloError_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_FloError_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_FloError_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_FloError_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_FloError_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_FloError____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_FloError_, ptr null, i32 1) to i32))
  call void @Array_FloError__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_FloError_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_FloError_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_FloError_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_FloError_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_FloError_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_FloError_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_FloError_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_FloError_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_FloError_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_FloError____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_FloError____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_FloError____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_FloError__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_FloError_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_FloError_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_FloError_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_FloError_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_FloError_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_FloError_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_FloError__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_FloError_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_FloError_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_FloError_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_FloError_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_FloError____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_FloError_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FloError_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_FloError__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_FloError____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_FloError____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_FloError____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_FloError____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_FloError_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FloError_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_FloError____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_FloError____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_FloError____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_FloError_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_FloError__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_FloError__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FloError_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_FloError__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_FloError_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FloError_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FloError_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define ptr @Compiler_find_module_path(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %fpath = alloca ptr, align 8
  %extension = alloca ptr, align 8
  %path = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %fpath, align 8
  %3 = load ptr, ptr %fpath, align 8
  %4 = getelementptr inbounds %string, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %5, i32 0, i32 4
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr @string_from_bytes(ptr @62, i64 1)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Compiler, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = call ptr %6(ptr %3, ptr %7, ptr %9)
  store ptr %10, ptr %path, align 8
  %11 = call ptr @string_from_bytes(ptr @63, i64 4)
  store ptr %11, ptr %extension, align 8
  %12 = load ptr, ptr %path, align 8
  %13 = getelementptr inbounds %string, ptr %12, i32 0, i32 0
  %14 = load ptr, ptr %13, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %14, i32 0, i32 6
  %15 = load ptr, ptr %memberidx2, align 8
  %16 = load ptr, ptr %extension, align 8
  %17 = call i1 %15(ptr %12, ptr %16)
  %18 = xor i1 %17, true
  br i1 %18, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %19 = load ptr, ptr %path, align 8
  %20 = load ptr, ptr %extension, align 8
  %21 = call ptr @string___adda__(ptr %19, ptr %20)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %22 = load ptr, ptr %path, align 8
  %23 = call ptr @Path_abspath(ptr %22)
  ret ptr %23
}

define void @Compiler_unlink_current_file_contents(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Compiler, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %4 = icmp ne ptr %3, null
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Compiler, ptr %5, i32 0, i32 3
  %6 = load ptr, ptr %memberidx1, align 8
  call void @string___del__(ptr %6)
  tail call void @free(ptr %6)
  br label %ifend

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  ret void
}

define void @FileId_constructor(ptr %0, i64 %1) {
  %id = alloca i64, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %id, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %FileId, ptr %3, i32 0, i32 0
  %4 = load i64, ptr %id, align 4
  store i64 %4, ptr %memberidx, align 4
  ret void
}

define ptr @Compiler_register_file(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %fpath = alloca ptr, align 8
  %abspath = alloca ptr, align 8
  %file_id = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %fpath, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %fpath, align 8
  %5 = call ptr @Compiler_find_module_path(ptr %3, ptr %4)
  store ptr %5, ptr %abspath, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Compiler, ptr %6, i32 0, i32 7
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load ptr, ptr %abspath, align 8
  %9 = call ptr @Map_string_FileId____getitem__(ptr %7, ptr %8)
  store ptr %9, ptr %file_id, align 8
  %10 = load ptr, ptr %file_id, align 8
  %11 = icmp ne ptr %10, null
  br i1 %11, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %12 = load ptr, ptr %file_id, align 8
  ret ptr %12

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %13 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FileId, ptr null, i32 1) to i32))
  %14 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Compiler, ptr %14, i32 0, i32 5
  %15 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_FloFile_, ptr %15, i32 0, i32 2
  %16 = load i64, ptr %memberidx2, align 4
  call void @FileId_constructor(ptr %13, i64 %16)
  store ptr %13, ptr %file_id, align 8
  %17 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Compiler, ptr %17, i32 0, i32 7
  %18 = load ptr, ptr %memberidx3, align 8
  %19 = load ptr, ptr %abspath, align 8
  %20 = load ptr, ptr %file_id, align 8
  call void @Map_string_FileId____setitem__(ptr %18, ptr %19, ptr %20)
  %21 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Compiler, ptr %21, i32 0, i32 5
  %22 = load ptr, ptr %memberidx4, align 8
  %23 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloFile, ptr null, i32 1) to i32))
  %24 = load ptr, ptr %abspath, align 8
  %25 = load ptr, ptr %fpath, align 8
  call void @FloFile_constructor(ptr %23, ptr %24, ptr %25)
  call void @Array_FloFile____sl__(ptr %22, ptr %23)
  %26 = load ptr, ptr %file_id, align 8
  ret ptr %26
}

define i1 @Compiler_set_current_file(ptr %0, ptr %1) {
  %file_id = alloca ptr, align 8
  %this = alloca ptr, align 8
  %file = alloca ptr, align 8
  %file_path = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %file_id, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Compiler, ptr %3, i32 0, i32 5
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %file_id, align 8
  %memberidx1 = getelementptr inbounds %FileId, ptr %5, i32 0, i32 0
  %6 = load i64, ptr %memberidx1, align 4
  %7 = call ptr @Array_FloFile____getitem__(ptr %4, i64 %6)
  store ptr %7, ptr %file_path, align 8
  %8 = load ptr, ptr %file_path, align 8
  %memberidx2 = getelementptr inbounds %FloFile, ptr %8, i32 0, i32 0
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = call i1 @File_exists(ptr %9)
  %11 = xor i1 %10, true
  br i1 %11, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %12 = load ptr, ptr %file_path, align 8
  %memberidx3 = getelementptr inbounds %FloFile, ptr %12, i32 0, i32 0
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = call ptr @File_open_for_reading(ptr %13)
  store ptr %14, ptr %file, align 8
  %15 = load ptr, ptr %this, align 8
  call void @Compiler_unlink_current_file_contents(ptr %15)
  %16 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Compiler, ptr %16, i32 0, i32 3
  %17 = load ptr, ptr %file, align 8
  %18 = getelementptr inbounds %File, ptr %17, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  %memberidx5 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr }, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx5, align 8
  %21 = call ptr %20(ptr %17)
  store ptr %21, ptr %memberidx4, align 8
  %22 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Compiler, ptr %22, i32 0, i32 1
  %23 = load ptr, ptr %file_id, align 8
  store ptr %23, ptr %memberidx6, align 8
  %24 = load ptr, ptr %file, align 8
  %25 = getelementptr inbounds %File, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %memberidx7 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr }, ptr %26, i32 0, i32 4
  %27 = load ptr, ptr %memberidx7, align 8
  call void %27(ptr %24)
  ret i1 true
}

define void @FloFile___del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %FloFile, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %memberidx, align 8
  call void @string___del__(ptr %3)
  tail call void @free(ptr %3)
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %FloFile, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  call void @string___del__(ptr %5)
  tail call void @free(ptr %5)
  ret void
}

define void @FloFile_constructor(ptr %0, ptr %1, ptr %2) {
  %abspath = alloca ptr, align 8
  %relpath = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %abspath, align 8
  store ptr %2, ptr %relpath, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %FloFile, ptr %4, i32 0, i32 0
  %5 = load ptr, ptr %abspath, align 8
  store ptr %5, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %FloFile, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %relpath, align 8
  store ptr %7, ptr %memberidx1, align 8
  ret void
}

define ptr @Array_FloFile__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FloFile_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FloFile_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_FloFile__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FloFile_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_FloFile__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FloFile_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FloFile_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_FloFile_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_FloFile_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_FloFile____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FloFile_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_FloFile__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FloFile_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_FloFile_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_FloFile_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_FloFile____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_FloFile_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FloFile_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_FloFile_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_FloFile_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_FloFile_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_FloFile_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_FloFile_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_FloFile_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_FloFile_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_FloFile_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_FloFile____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_FloFile_, ptr null, i32 1) to i32))
  call void @Array_FloFile__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_FloFile_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_FloFile_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_FloFile_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_FloFile_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_FloFile_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_FloFile_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_FloFile_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_FloFile_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_FloFile_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_FloFile____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_FloFile____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_FloFile____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_FloFile__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_FloFile_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_FloFile_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_FloFile_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_FloFile_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_FloFile_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_FloFile_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_FloFile__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_FloFile_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_FloFile_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_FloFile_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_FloFile_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_FloFile____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_FloFile_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FloFile_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_FloFile__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_FloFile____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_FloFile____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_FloFile____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_FloFile____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_FloFile_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FloFile_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_FloFile____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_FloFile____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_FloFile____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_FloFile_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_FloFile__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_FloFile__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FloFile_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_FloFile__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_FloFile_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FloFile_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FloFile_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define ptr @Compiler_add_builtins(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = getelementptr inbounds %Compiler, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr }, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Compiler, ptr %6, i32 0, i32 4
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = call ptr %5(ptr %2, ptr %7)
  ret ptr %8
}

define void @Compiler___del__(ptr %0) {
  %this = alloca ptr, align 8
  %file = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %tmp_it1 = alloca ptr, align 8
  %error = alloca ptr, align 8
  %file_id = alloca ptr, align 8
  %tmp_it2 = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Compiler, ptr %2, i32 0, i32 5
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr @Array_FloFile____iter__(ptr %3)
  store ptr %4, ptr %tmp_it, align 8
  %5 = load ptr, ptr %tmp_it, align 8
  %6 = call ptr @ArrayIterator_FloFile__next(ptr %5)
  store ptr %6, ptr %file, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %7 = load ptr, ptr %tmp_it, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_FloFile_, ptr %7, i32 0, i32 0
  %8 = load i1, ptr %memberidx3, align 1
  %9 = xor i1 %8, true
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load ptr, ptr %file, align 8
  call void @FloFile___del__(ptr %10)
  tail call void @free(ptr %10)
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %11 = load ptr, ptr %tmp_it, align 8
  %12 = call ptr @ArrayIterator_FloFile__next(ptr %11)
  store ptr %12, ptr %file, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %13)
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Compiler, ptr %14, i32 0, i32 5
  %15 = load ptr, ptr %memberidx4, align 8
  call void @Array_FloFile____del__(ptr %15)
  tail call void @free(ptr %15)
  br label %for.entry5

for.entry5:                                       ; preds = %for.end
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Compiler, ptr %16, i32 0, i32 6
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = call ptr @Array_FloError____iter__(ptr %17)
  store ptr %18, ptr %tmp_it1, align 8
  %19 = load ptr, ptr %tmp_it1, align 8
  %20 = call ptr @ArrayIterator_FloError__next(ptr %19)
  store ptr %20, ptr %error, align 8
  br label %for.cond7

for.cond7:                                        ; preds = %for.incr9, %for.entry5
  %21 = load ptr, ptr %tmp_it1, align 8
  %memberidx11 = getelementptr inbounds %ArrayIterator_FloError_, ptr %21, i32 0, i32 0
  %22 = load i1, ptr %memberidx11, align 1
  %23 = xor i1 %22, true
  br i1 %23, label %for.body8, label %for.end10

for.body8:                                        ; preds = %for.cond7
  %24 = load ptr, ptr %error, align 8
  tail call void @free(ptr %24)
  br label %for.incr9

for.incr9:                                        ; preds = %for.body8
  %25 = load ptr, ptr %tmp_it1, align 8
  %26 = call ptr @ArrayIterator_FloError__next(ptr %25)
  store ptr %26, ptr %error, align 8
  br label %for.cond7

for.end10:                                        ; preds = %for.cond7
  %27 = load ptr, ptr %tmp_it1, align 8
  tail call void @free(ptr %27)
  %28 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %Compiler, ptr %28, i32 0, i32 6
  %29 = load ptr, ptr %memberidx12, align 8
  call void @Array_FloError____del__(ptr %29)
  tail call void @free(ptr %29)
  br label %for.entry13

for.entry13:                                      ; preds = %for.end10
  %30 = load ptr, ptr %this, align 8
  %memberidx14 = getelementptr inbounds %Compiler, ptr %30, i32 0, i32 7
  %31 = load ptr, ptr %memberidx14, align 8
  %32 = call ptr @Map_string_FileId____iter__(ptr %31)
  store ptr %32, ptr %tmp_it2, align 8
  %33 = load ptr, ptr %tmp_it2, align 8
  %34 = call ptr @MapIterator_string_FileId__next(ptr %33)
  store ptr %34, ptr %file_id, align 8
  br label %for.cond15

for.cond15:                                       ; preds = %for.incr17, %for.entry13
  %35 = load ptr, ptr %tmp_it2, align 8
  %memberidx19 = getelementptr inbounds %MapIterator_string_FileId_, ptr %35, i32 0, i32 0
  %36 = load i1, ptr %memberidx19, align 1
  %37 = xor i1 %36, true
  br i1 %37, label %for.body16, label %for.end18

for.body16:                                       ; preds = %for.cond15
  %38 = load ptr, ptr %file_id, align 8
  tail call void @free(ptr %38)
  br label %for.incr17

for.incr17:                                       ; preds = %for.body16
  %39 = load ptr, ptr %tmp_it2, align 8
  %40 = call ptr @MapIterator_string_FileId__next(ptr %39)
  store ptr %40, ptr %file_id, align 8
  br label %for.cond15

for.end18:                                        ; preds = %for.cond15
  %41 = load ptr, ptr %tmp_it2, align 8
  tail call void @free(ptr %41)
  %42 = load ptr, ptr %this, align 8
  %memberidx20 = getelementptr inbounds %Compiler, ptr %42, i32 0, i32 7
  %43 = load ptr, ptr %memberidx20, align 8
  call void @Map_string_FileId____del__(ptr %43)
  tail call void @free(ptr %43)
  %44 = load ptr, ptr %this, align 8
  call void @Compiler_unlink_current_file_contents(ptr %44)
  ret void
}

define void @Map_string_FileId__resize(ptr %0) {
  %this = alloca ptr, align 8
  %old_entries = alloca ptr, align 8
  %old_size = alloca i64, align 8
  %i = alloca i64, align 8
  %i1 = alloca i64, align 8
  %entry = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_FileId_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = alloca ptr, i64 %3, align 8
  store ptr %4, ptr %old_entries, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_FileId_, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx2, align 4
  store i64 %6, ptr %old_size, align 4
  %7 = load ptr, ptr %old_entries, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_FileId_, ptr %8, i32 0, i32 0
  %9 = load ptr, ptr %memberidx3, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_FileId_, ptr %10, i32 0, i32 1
  %11 = load i64, ptr %memberidx4, align 4
  %12 = mul i64 %11, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %9, i64 %12, i1 false)
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Map_string_FileId_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Map_string_FileId_, ptr %14, i32 0, i32 1
  %15 = load i64, ptr %memberidx6, align 4
  %16 = mul nuw i64 %15, 2
  store i64 %16, ptr %memberidx5, align 4
  %17 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Map_string_FileId_, ptr %17, i32 0, i32 2
  store i64 0, ptr %memberidx7, align 4
  %18 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Map_string_FileId_, ptr %18, i32 0, i32 0
  %19 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Map_string_FileId_, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx9, align 8
  %21 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_FileId_, ptr %21, i32 0, i32 1
  %22 = load i64, ptr %memberidx10, align 4
  %23 = mul i64 %22, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %24 = call ptr @realloc(ptr %20, i64 %23)
  store ptr %24, ptr %memberidx8, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %25 = load i64, ptr %i, align 4
  %26 = load ptr, ptr %this, align 8
  %memberidx11 = getelementptr inbounds %Map_string_FileId_, ptr %26, i32 0, i32 1
  %27 = load i64, ptr %memberidx11, align 4
  %28 = icmp slt i64 %25, %27
  br i1 %28, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load i64, ptr %i, align 4
  %30 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %Map_string_FileId_, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx12, align 8
  %32 = getelementptr inbounds ptr, ptr %31, i64 %29
  store ptr null, ptr %32, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %33 = load i64, ptr %i, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.entry13

for.entry13:                                      ; preds = %for.end
  store i64 0, ptr %i1, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.incr16, %for.entry13
  %35 = load i64, ptr %i1, align 4
  %36 = load i64, ptr %old_size, align 4
  %37 = icmp slt i64 %35, %36
  br i1 %37, label %for.body15, label %for.end17

for.body15:                                       ; preds = %for.cond14
  %38 = load i64, ptr %i1, align 4
  %39 = load ptr, ptr %old_entries, align 8
  %40 = getelementptr inbounds ptr, ptr %39, i64 %38
  %41 = load ptr, ptr %40, align 8
  store ptr %41, ptr %entry, align 8
  %42 = load ptr, ptr %entry, align 8
  %43 = icmp ne ptr %42, null
  br i1 %43, label %if.entry, label %else

for.incr16:                                       ; preds = %ifend
  %44 = load i64, ptr %i1, align 4
  %45 = add nsw i64 %44, 1
  store i64 %45, ptr %i1, align 4
  br label %for.cond14

for.end17:                                        ; preds = %for.cond14
  ret void

if.entry:                                         ; preds = %for.body15
  %46 = load ptr, ptr %this, align 8
  %47 = load ptr, ptr %entry, align 8
  %memberidx18 = getelementptr inbounds %MapEntry_string_FileId_, ptr %47, i32 0, i32 0
  %48 = load ptr, ptr %memberidx18, align 8
  %49 = load ptr, ptr %entry, align 8
  %memberidx19 = getelementptr inbounds %MapEntry_string_FileId_, ptr %49, i32 0, i32 1
  %50 = load ptr, ptr %memberidx19, align 8
  call void @Map_string_FileId____setitem__(ptr %46, ptr %48, ptr %50)
  br label %ifend

else:                                             ; preds = %for.body15
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  br label %for.incr16
}

define void @MapEntry_string_FileId__constructor(ptr %0, ptr %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  store ptr %2, ptr %value, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapEntry_string_FileId_, ptr %4, i32 0, i32 0
  %5 = load ptr, ptr %key, align 8
  store ptr %5, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapEntry_string_FileId_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %value, align 8
  store ptr %7, ptr %memberidx1, align 8
  ret void
}

define ptr @MapIterator_string_FileId__next(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapIterator_string_FileId_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapIterator_string_FileId_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = icmp sgt i64 %3, 0
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %1
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %MapIterator_string_FileId_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %MapIterator_string_FileId_, ptr %9, i32 0, i32 1
  %incdec.ptr = getelementptr inbounds ptr, ptr %8, i32 1
  store ptr %incdec.ptr, ptr %memberidx3, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %MapIterator_string_FileId_, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx4, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 -1
  %13 = load ptr, ptr %12, align 8
  %14 = icmp ne ptr %13, null
  br i1 %14, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %if.entry, %1
  %15 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %MapIterator_string_FileId_, ptr %15, i32 0, i32 0
  %16 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %MapIterator_string_FileId_, ptr %16, i32 0, i32 3
  %17 = load i64, ptr %memberidx8, align 4
  %18 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %MapIterator_string_FileId_, ptr %18, i32 0, i32 3
  %19 = add nsw i64 %17, -1
  store i64 %19, ptr %memberidx9, align 4
  %20 = icmp sle i64 %17, 0
  store i1 %20, ptr %memberidx7, align 1
  %21 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %MapIterator_string_FileId_, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx10, align 8
  %23 = getelementptr inbounds ptr, ptr %22, i64 -1
  %24 = load ptr, ptr %23, align 8
  ret ptr %24

if.entry:                                         ; preds = %while.entry
  br label %while.end

else:                                             ; preds = %while.entry
  br label %ifend

ifend:                                            ; preds = %else
  %25 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %MapIterator_string_FileId_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx5, align 4
  %27 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %MapIterator_string_FileId_, ptr %27, i32 0, i32 2
  %28 = add nsw i64 %26, -1
  store i64 %28, ptr %memberidx6, align 4
  %29 = icmp sgt i64 %26, 0
  br i1 %29, label %while.entry, label %while.end
}

define void @MapIterator_string_FileId__constructor(ptr %0, ptr %1, i64 %2, i64 %3) {
  %remaining_size = alloca i64, align 8
  %this = alloca ptr, align 8
  %entries = alloca ptr, align 8
  %items_remaining = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %entries, align 8
  store i64 %2, ptr %remaining_size, align 4
  store i64 %3, ptr %items_remaining, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapIterator_string_FileId_, ptr %5, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapIterator_string_FileId_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %entries, align 8
  store ptr %7, ptr %memberidx1, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %MapIterator_string_FileId_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %remaining_size, align 4
  store i64 %9, ptr %memberidx2, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %MapIterator_string_FileId_, ptr %10, i32 0, i32 3
  %11 = load i64, ptr %items_remaining, align 4
  store i64 %11, ptr %memberidx3, align 4
  ret void
}

define ptr @Map_string_FileId____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MapIterator_string_FileId_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_FileId_, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_FileId_, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_FileId_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx2, align 4
  call void @MapIterator_string_FileId__constructor(ptr %2, ptr %4, i64 %6, i64 %8)
  ret ptr %2
}

define void @Map_string_FileId____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_FileId_, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Map_string_FileId____setitem__(ptr %0, ptr %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  %should_add = alloca i1, align 1
  %ratio = alloca double, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  store ptr %2, ptr %value, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_FileId_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = sitofp i64 %5 to double
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_FileId_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %memberidx1, align 4
  %9 = sitofp i64 %8 to double
  %10 = fdiv double %6, %9
  store double %10, ptr %ratio, align 8
  %11 = load double, ptr %ratio, align 8
  %12 = fcmp ogt double %11, 7.500000e-01
  br i1 %12, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %13 = load ptr, ptr %this, align 8
  call void @Map_string_FileId__resize(ptr %13)
  br label %ifend

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %14 = load ptr, ptr %this, align 8
  %15 = load ptr, ptr %key, align 8
  %16 = call i64 @Map_string_FileId__hash_fnc(ptr %14, ptr %15)
  %17 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_FileId_, ptr %17, i32 0, i32 1
  %18 = load i64, ptr %memberidx2, align 4
  %19 = urem i64 %16, %18
  store i64 %19, ptr %hash, align 4
  store i1 true, ptr %should_add, align 1
  %20 = load i64, ptr %hash, align 4
  %21 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_FileId_, ptr %21, i32 0, i32 0
  %22 = load ptr, ptr %memberidx3, align 8
  %23 = getelementptr inbounds ptr, ptr %22, i64 %20
  %24 = load ptr, ptr %23, align 8
  %25 = icmp ne ptr %24, null
  br i1 %25, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend8, %ifend
  %26 = load i64, ptr %hash, align 4
  %27 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_FileId_, ptr %27, i32 0, i32 0
  %28 = load ptr, ptr %memberidx4, align 8
  %29 = getelementptr inbounds ptr, ptr %28, i64 %26
  %30 = load ptr, ptr %29, align 8
  %memberidx5 = getelementptr inbounds %MapEntry_string_FileId_, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx5, align 8
  %32 = load ptr, ptr %key, align 8
  %33 = call i1 @string___eq__(ptr %31, ptr %32)
  br i1 %33, label %if.entry6, label %else7

while.end:                                        ; preds = %ifend8, %if.entry6, %ifend
  %34 = load i1, ptr %should_add, align 1
  br i1 %34, label %if.entry11, label %else12

if.entry6:                                        ; preds = %while.entry
  store i1 false, ptr %should_add, align 1
  br label %while.end

else7:                                            ; preds = %while.entry
  br label %ifend8

ifend8:                                           ; preds = %else7
  %35 = load i64, ptr %hash, align 4
  %36 = add nuw i64 %35, 1
  %37 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Map_string_FileId_, ptr %37, i32 0, i32 1
  %38 = load i64, ptr %memberidx9, align 4
  %39 = urem i64 %36, %38
  store i64 %39, ptr %hash, align 4
  %40 = load i64, ptr %hash, align 4
  %41 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_FileId_, ptr %41, i32 0, i32 0
  %42 = load ptr, ptr %memberidx10, align 8
  %43 = getelementptr inbounds ptr, ptr %42, i64 %40
  %44 = load ptr, ptr %43, align 8
  %45 = icmp ne ptr %44, null
  br i1 %45, label %while.entry, label %while.end

if.entry11:                                       ; preds = %while.end
  %46 = load ptr, ptr %this, align 8
  %memberidx14 = getelementptr inbounds %Map_string_FileId_, ptr %46, i32 0, i32 2
  %47 = load i64, ptr %memberidx14, align 4
  %48 = load ptr, ptr %this, align 8
  %memberidx15 = getelementptr inbounds %Map_string_FileId_, ptr %48, i32 0, i32 2
  %49 = add nsw i64 %47, 1
  store i64 %49, ptr %memberidx15, align 4
  br label %ifend13

else12:                                           ; preds = %while.end
  br label %ifend13

ifend13:                                          ; preds = %else12, %if.entry11
  %50 = load i64, ptr %hash, align 4
  %51 = load ptr, ptr %this, align 8
  %memberidx16 = getelementptr inbounds %Map_string_FileId_, ptr %51, i32 0, i32 0
  %52 = load ptr, ptr %memberidx16, align 8
  %53 = getelementptr inbounds ptr, ptr %52, i64 %50
  %54 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MapEntry_string_FileId_, ptr null, i32 1) to i32))
  %55 = load ptr, ptr %key, align 8
  %56 = load ptr, ptr %value, align 8
  call void @MapEntry_string_FileId__constructor(ptr %54, ptr %55, ptr %56)
  store ptr %54, ptr %53, align 8
  ret void
}

define ptr @Map_string_FileId____getitem__(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %key, align 8
  %5 = call i64 @Map_string_FileId__hash_fnc(ptr %3, ptr %4)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_FileId_, ptr %6, i32 0, i32 1
  %7 = load i64, ptr %memberidx, align 4
  %8 = urem i64 %5, %7
  store i64 %8, ptr %hash, align 4
  %9 = load i64, ptr %hash, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_FileId_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 %9
  %13 = load ptr, ptr %12, align 8
  %14 = icmp ne ptr %13, null
  br i1 %14, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %2
  %15 = load i64, ptr %hash, align 4
  %16 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_FileId_, ptr %16, i32 0, i32 0
  %17 = load ptr, ptr %memberidx2, align 8
  %18 = getelementptr inbounds ptr, ptr %17, i64 %15
  %19 = load ptr, ptr %18, align 8
  %memberidx3 = getelementptr inbounds %MapEntry_string_FileId_, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx3, align 8
  %21 = load ptr, ptr %key, align 8
  %22 = call i1 @string___eq__(ptr %20, ptr %21)
  br i1 %22, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %if.entry, %2
  %23 = load i64, ptr %hash, align 4
  %24 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Map_string_FileId_, ptr %24, i32 0, i32 0
  %25 = load ptr, ptr %memberidx6, align 8
  %26 = getelementptr inbounds ptr, ptr %25, i64 %23
  %27 = load ptr, ptr %26, align 8
  %28 = icmp ne ptr %27, null
  br i1 %28, label %if.entry7, label %else8

if.entry:                                         ; preds = %while.entry
  br label %while.end

else:                                             ; preds = %while.entry
  %29 = load i64, ptr %hash, align 4
  %30 = add nuw i64 %29, 1
  %31 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_FileId_, ptr %31, i32 0, i32 1
  %32 = load i64, ptr %memberidx4, align 4
  %33 = urem i64 %30, %32
  store i64 %33, ptr %hash, align 4
  br label %ifend

ifend:                                            ; preds = %else
  %34 = load i64, ptr %hash, align 4
  %35 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Map_string_FileId_, ptr %35, i32 0, i32 0
  %36 = load ptr, ptr %memberidx5, align 8
  %37 = getelementptr inbounds ptr, ptr %36, i64 %34
  %38 = load ptr, ptr %37, align 8
  %39 = icmp ne ptr %38, null
  br i1 %39, label %while.entry, label %while.end

if.entry7:                                        ; preds = %while.end
  %40 = load i64, ptr %hash, align 4
  %41 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_FileId_, ptr %41, i32 0, i32 0
  %42 = load ptr, ptr %memberidx10, align 8
  %43 = getelementptr inbounds ptr, ptr %42, i64 %40
  %44 = load ptr, ptr %43, align 8
  %memberidx11 = getelementptr inbounds %MapEntry_string_FileId_, ptr %44, i32 0, i32 1
  %45 = load ptr, ptr %memberidx11, align 8
  ret ptr %45

else8:                                            ; preds = %while.end
  br label %ifend9

ifend9:                                           ; preds = %else8
  ret ptr null
}

define i64 @Map_string_FileId__hash_fnc(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  %str = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  %3 = load ptr, ptr %key, align 8
  %4 = getelementptr inbounds %string, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr %6(ptr %3)
  %8 = alloca ptr, align 8
  %9 = call i64 (ptr, ptr, ...) @asprintf(ptr %8, ptr @58, ptr %7)
  %10 = load ptr, ptr %8, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %11, ptr %10, i64 %9)
  tail call void @free(ptr %7)
  store ptr %11, ptr %str, align 8
  store i64 0, ptr %hash, align 4
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %12 = load i64, ptr %i, align 4
  %13 = load ptr, ptr %str, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx1, align 4
  %15 = icmp slt i64 %12, %14
  br i1 %15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i64, ptr %hash, align 4
  %17 = shl i64 %16, 1
  %18 = load ptr, ptr %str, align 8
  %19 = getelementptr inbounds %string, ptr %18, i32 0, i32 0
  %20 = load ptr, ptr %19, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %20, i32 0, i32 2
  %21 = load ptr, ptr %memberidx2, align 8
  %22 = load i64, ptr %i, align 4
  %23 = call i8 %21(ptr %18, i64 %22)
  %24 = zext i8 %23 to i64
  %25 = add nuw i64 %17, %24
  store i64 %25, ptr %hash, align 4
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %26 = load i64, ptr %i, align 4
  %27 = add nsw i64 %26, 1
  store i64 %27, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load ptr, ptr %str, align 8
  call void @string___del__(ptr %28)
  tail call void @free(ptr %28)
  %29 = load i64, ptr %hash, align 4
  ret i64 %29
}

define void @Map_string_FileId__constructor(ptr %0) {
  %this = alloca ptr, align 8
  %initial_capacity = alloca i64, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 256, ptr %initial_capacity, align 4
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_FileId_, ptr %2, i32 0, i32 0
  %3 = load i64, ptr %initial_capacity, align 4
  %4 = trunc i64 %3 to i32
  %mallocsize = mul i32 %4, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %5 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %5, ptr %memberidx, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %initial_capacity, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i64, ptr %i, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_FileId_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 %9
  store ptr null, ptr %12, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %13 = load i64, ptr %i, align 4
  %14 = add nsw i64 %13, 1
  store i64 %14, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_FileId_, ptr %15, i32 0, i32 1
  %16 = load i64, ptr %initial_capacity, align 4
  store i64 %16, ptr %memberidx2, align 4
  %17 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_FileId_, ptr %17, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  ret void
}

define void @Compiler_constructor(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableCompiler, ptr %2, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Compiler, ptr %3, i32 0, i32 5
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_FloFile_, ptr null, i32 1) to i32))
  call void @Array_FloFile__constructor(ptr %4, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx1 = getelementptr inbounds %Array_FloFile_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_FloFile_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  store ptr %4, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Compiler, ptr %6, i32 0, i32 1
  store ptr null, ptr %memberidx3, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Compiler, ptr %7, i32 0, i32 3
  store ptr null, ptr %memberidx4, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Compiler, ptr %8, i32 0, i32 6
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_FloError_, ptr null, i32 1) to i32))
  call void @Array_FloError__constructor(ptr %9, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx6 = getelementptr inbounds %Array_FloError_, ptr %9, i32 0, i32 1
  %10 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %Array_FloError_, ptr %9, i32 0, i32 2
  store i64 0, ptr %memberidx7, align 4
  store ptr %9, ptr %memberidx5, align 8
  %11 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Compiler, ptr %11, i32 0, i32 7
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_FileId_, ptr null, i32 1) to i32))
  call void @Map_string_FileId__constructor(ptr %12)
  store ptr %12, ptr %memberidx8, align 8
  %13 = load ptr, ptr %this, align 8
  %14 = getelementptr inbounds %Compiler, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %memberidx9 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr }, ptr %15, i32 0, i32 0
  %16 = load ptr, ptr %memberidx9, align 8
  %17 = call ptr @string_from_bytes(ptr @59, i64 19)
  call void %16(ptr %13, ptr %17)
  ret void
}

define ptr @Path_abspath(ptr %0) {
  %p = alloca ptr, align 8
  %buf = alloca [400 x i8], align 1
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %3 = getelementptr inbounds %string, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr %5(ptr %2)
  %7 = getelementptr inbounds [400 x i8], ptr %buf, i64 0, i64 0
  %8 = load i8, ptr %7, align 1
  %9 = getelementptr inbounds [400 x i8], ptr %buf, i64 0, i64 0
  %10 = call ptr @realpath(ptr %6, ptr %9)
  %11 = getelementptr inbounds [400 x i8], ptr %buf, i64 0, i64 0
  %12 = load i8, ptr %11, align 1
  %13 = getelementptr inbounds [400 x i8], ptr %buf, i64 0, i64 0
  %14 = call ptr @string_from_cstring(ptr %13)
  ret ptr %14
}

define ptr @Path_join(ptr %0, ptr %1) {
  %rest = alloca ptr, align 8
  %root = alloca ptr, align 8
  store ptr %0, ptr %root, align 8
  store ptr %1, ptr %rest, align 8
  %3 = load ptr, ptr %root, align 8
  %4 = getelementptr inbounds %string, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr %6(ptr %3)
  %8 = load ptr, ptr %rest, align 8
  %9 = getelementptr inbounds %string, ptr %8, i32 0, i32 0
  %10 = load ptr, ptr %9, align 8
  %memberidx1 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %10, i32 0, i32 5
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = call ptr %11(ptr %8)
  %13 = alloca ptr, align 8
  %14 = call i64 (ptr, ptr, ...) @asprintf(ptr %13, ptr @61, ptr %7, ptr %12)
  %15 = load ptr, ptr %13, align 8
  %16 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %16, ptr %15, i64 %14)
  tail call void @free(ptr %7)
  tail call void @free(ptr %12)
  ret ptr %16
}

define ptr @Path_dirname(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %3 = getelementptr inbounds %string, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr %5(ptr %2)
  %7 = call ptr @dirname(ptr %6)
  %8 = call ptr @string_from_cstring(ptr %7)
  ret ptr %8
}

declare ptr @realpath(ptr, ptr)

declare ptr @dirname(ptr)

define i1 @File_exists(ptr %0) {
  %path = alloca ptr, align 8
  %res = alloca i1, align 1
  %filename = alloca ptr, align 8
  store ptr %0, ptr %path, align 8
  %2 = load ptr, ptr %path, align 8
  %3 = getelementptr inbounds %string, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr %5(ptr %2)
  store ptr %6, ptr %filename, align 8
  %7 = load ptr, ptr %filename, align 8
  %8 = load i64, ptr @F_OK, align 4
  %9 = call i64 @access(ptr %7, i64 %8)
  %10 = icmp eq i64 %9, 0
  store i1 %10, ptr %res, align 1
  %11 = load ptr, ptr %filename, align 8
  tail call void @free(ptr %11)
  %12 = load i1, ptr %res, align 1
  ret i1 %12
}

define ptr @File_open_for_writing(ptr %0) {
  %path = alloca ptr, align 8
  %fd = alloca i64, align 8
  %filename = alloca ptr, align 8
  store ptr %0, ptr %path, align 8
  %2 = load ptr, ptr %path, align 8
  %3 = getelementptr inbounds %string, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr %5(ptr %2)
  store ptr %6, ptr %filename, align 8
  %7 = load ptr, ptr %filename, align 8
  %8 = load i64, ptr @W_OK, align 4
  %9 = load i64, ptr @O_CREAT, align 4
  %10 = or i64 %8, %9
  %11 = load i64, ptr @DEFFILEMODE, align 4
  %12 = call i64 @open(ptr %7, i64 %10, i64 %11)
  store i64 %12, ptr %fd, align 4
  %13 = load ptr, ptr %filename, align 8
  tail call void @free(ptr %13)
  %14 = load i64, ptr %fd, align 4
  %15 = icmp slt i64 %14, 0
  br i1 %15, label %if.entry, label %else

if.entry:                                         ; preds = %1
  ret ptr null

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %16 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%File, ptr null, i32 1) to i32))
  %17 = load i64, ptr %fd, align 4
  call void @File_constructor(ptr %16, i64 %17)
  ret ptr %16
}

define ptr @File_open_for_reading(ptr %0) {
  %path = alloca ptr, align 8
  %fd = alloca i64, align 8
  %filename = alloca ptr, align 8
  store ptr %0, ptr %path, align 8
  %2 = load ptr, ptr %path, align 8
  %3 = getelementptr inbounds %string, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr %5(ptr %2)
  store ptr %6, ptr %filename, align 8
  %7 = load ptr, ptr %filename, align 8
  %8 = load i64, ptr @R_OK, align 4
  %9 = load i64, ptr @DEFFILEMODE, align 4
  %10 = call i64 @open(ptr %7, i64 %8, i64 %9)
  store i64 %10, ptr %fd, align 4
  %11 = load ptr, ptr %filename, align 8
  tail call void @free(ptr %11)
  %12 = load i64, ptr %fd, align 4
  %13 = icmp slt i64 %12, 0
  br i1 %13, label %if.entry, label %else

if.entry:                                         ; preds = %1
  ret ptr null

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%File, ptr null, i32 1) to i32))
  %15 = load i64, ptr %fd, align 4
  call void @File_constructor(ptr %14, i64 %15)
  ret ptr %14
}

define i64 @File_write_string(ptr %0, ptr %1) {
  %s = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %s, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %File, ptr %3, i32 0, i32 1
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %s, align 8
  %6 = getelementptr inbounds %string, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx1 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %7, i32 0, i32 3
  %8 = load ptr, ptr %memberidx1, align 8
  %9 = call ptr %8(ptr %5)
  %10 = load ptr, ptr %s, align 8
  %memberidx2 = getelementptr inbounds %string, ptr %10, i32 0, i32 2
  %11 = load i64, ptr %memberidx2, align 4
  %12 = call i64 @write(i64 %4, ptr %9, i64 %11)
  ret i64 %12
}

define ptr @File_read_all(ptr %0) {
  %this = alloca ptr, align 8
  %string_builder = alloca ptr, align 8
  %read_len = alloca i64, align 8
  %buffer = alloca [1024 x i8], align 1
  store ptr %0, ptr %this, align 8
  store [1024 x i8] zeroinitializer, ptr %buffer, align 1
  %2 = alloca %StringBuilder, align 8
  call void @StringBuilder_constructor(ptr %2, i64 1024)
  store ptr %2, ptr %string_builder, align 8
  store i64 0, ptr %read_len, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %File, ptr %3, i32 0, i32 1
  %4 = load i64, ptr %memberidx, align 4
  %5 = getelementptr inbounds [1024 x i8], ptr %buffer, i64 0, i64 0
  %6 = load i8, ptr %5, align 1
  %7 = getelementptr inbounds [1024 x i8], ptr %buffer, i64 0, i64 0
  %8 = call i64 @read(i64 %4, ptr %7, i64 1024)
  store i64 %8, ptr %read_len, align 4
  %9 = icmp ne i64 %8, 0
  br i1 %9, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %1
  %10 = load ptr, ptr %string_builder, align 8
  %11 = getelementptr inbounds %StringBuilder, ptr %10, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %memberidx1 = getelementptr inbounds { ptr, ptr, ptr, ptr }, ptr %12, i32 0, i32 0
  %13 = load ptr, ptr %memberidx1, align 8
  %14 = getelementptr inbounds [1024 x i8], ptr %buffer, i64 0, i64 0
  %15 = load i8, ptr %14, align 1
  %16 = getelementptr inbounds [1024 x i8], ptr %buffer, i64 0, i64 0
  %17 = load i64, ptr %read_len, align 4
  call void %13(ptr %10, ptr %16, i64 %17)
  %18 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %File, ptr %18, i32 0, i32 1
  %19 = load i64, ptr %memberidx2, align 4
  %20 = getelementptr inbounds [1024 x i8], ptr %buffer, i64 0, i64 0
  %21 = load i8, ptr %20, align 1
  %22 = getelementptr inbounds [1024 x i8], ptr %buffer, i64 0, i64 0
  %23 = call i64 @read(i64 %19, ptr %22, i64 1024)
  store i64 %23, ptr %read_len, align 4
  %24 = icmp ne i64 %23, 0
  br i1 %24, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %1
  %25 = load ptr, ptr %string_builder, align 8
  %26 = getelementptr inbounds %StringBuilder, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %memberidx3 = getelementptr inbounds { ptr, ptr, ptr, ptr }, ptr %27, i32 0, i32 3
  %28 = load ptr, ptr %memberidx3, align 8
  %29 = call ptr %28(ptr %25)
  ret ptr %29
}

define i64 @File_read_bytes_length(ptr %0, ptr %1, i64 %2) {
  %length = alloca i64, align 8
  %this = alloca ptr, align 8
  %buffer = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %buffer, align 8
  store i64 %2, ptr %length, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %File, ptr %4, i32 0, i32 1
  %5 = load i64, ptr %memberidx, align 4
  %6 = load ptr, ptr %buffer, align 8
  %7 = load i64, ptr %length, align 4
  %8 = call i64 @read(i64 %5, ptr %6, i64 %7)
  ret i64 %8
}

define i64 @File_write_bytes_length(ptr %0, ptr %1, i64 %2) {
  %length = alloca i64, align 8
  %this = alloca ptr, align 8
  %buffer = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %buffer, align 8
  store i64 %2, ptr %length, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %File, ptr %4, i32 0, i32 1
  %5 = load i64, ptr %memberidx, align 4
  %6 = load ptr, ptr %buffer, align 8
  %7 = load i64, ptr %length, align 4
  %8 = call i64 @write(i64 %5, ptr %6, i64 %7)
  ret i64 %8
}

define void @File_close(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %File, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = call i64 @close(i64 %3)
  ret void
}

define void @File_constructor(ptr %0, i64 %1) {
  %fd = alloca i64, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableFile, ptr %3, align 8
  store i64 %1, ptr %fd, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %File, ptr %4, i32 0, i32 1
  %5 = load i64, ptr %fd, align 4
  store i64 %5, ptr %memberidx, align 4
  ret void
}

declare i64 @open(ptr, i64, i64)

define void @StringBuilder_resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %StringBuilder, ptr %2, i32 0, i32 2
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %StringBuilder, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %StringBuilder, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %StringBuilder, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %StringBuilder, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %StringBuilder, ptr %13, i32 0, i32 3
  %14 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %StringBuilder, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx6, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %StringBuilder, ptr %16, i32 0, i32 4
  %17 = load i64, ptr %memberidx7, align 4
  %18 = getelementptr inbounds i8, ptr %15, i64 %17
  store ptr %18, ptr %memberidx5, align 8
  ret void
}

define void @StringBuilder_add_byte(ptr %0, i8 %1) {
  %byte = alloca i8, align 1
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store i8 %1, ptr %byte, align 1
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %StringBuilder, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %StringBuilder, ptr %5, i32 0, i32 4
  %6 = load i64, ptr %memberidx1, align 4
  %7 = sub nuw i64 %4, %6
  %8 = icmp sle i64 %7, 1
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %9 = load ptr, ptr %this, align 8
  call void @StringBuilder_resize(ptr %9)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %10 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %StringBuilder, ptr %10, i32 0, i32 3
  %11 = load ptr, ptr %memberidx2, align 8
  %12 = getelementptr inbounds i8, ptr %11, i64 0
  %13 = load i8, ptr %byte, align 1
  store i8 %13, ptr %12, align 1
  %14 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %StringBuilder, ptr %14, i32 0, i32 3
  %15 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %StringBuilder, ptr %15, i32 0, i32 3
  %16 = load ptr, ptr %memberidx4, align 8
  %17 = getelementptr inbounds i8, ptr %16, i64 1
  store ptr %17, ptr %memberidx3, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %StringBuilder, ptr %18, i32 0, i32 4
  %19 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %StringBuilder, ptr %19, i32 0, i32 4
  %20 = load i64, ptr %memberidx6, align 4
  %21 = add nuw i64 %20, 1
  store i64 %21, ptr %memberidx5, align 4
  ret void
}

define void @StringBuilder_add_bytes_length(ptr %0, ptr %1, i64 %2) {
  %length = alloca i64, align 8
  %this = alloca ptr, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %length, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %StringBuilder, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %StringBuilder, ptr %6, i32 0, i32 4
  %7 = load i64, ptr %memberidx1, align 4
  %8 = sub nuw i64 %5, %7
  %9 = load i64, ptr %length, align 4
  %10 = icmp sle i64 %8, %9
  br i1 %10, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %3
  %11 = load ptr, ptr %this, align 8
  call void @StringBuilder_resize(ptr %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %StringBuilder, ptr %12, i32 0, i32 2
  %13 = load i64, ptr %memberidx2, align 4
  %14 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %StringBuilder, ptr %14, i32 0, i32 4
  %15 = load i64, ptr %memberidx3, align 4
  %16 = sub nuw i64 %13, %15
  %17 = load i64, ptr %length, align 4
  %18 = icmp sle i64 %16, %17
  br i1 %18, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %3
  %19 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %StringBuilder, ptr %19, i32 0, i32 3
  %20 = load ptr, ptr %memberidx4, align 8
  %21 = load ptr, ptr %bytes, align 8
  %22 = load i64, ptr %length, align 4
  %23 = mul i64 %22, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %20, ptr align 8 %21, i64 %23, i1 false)
  %24 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %StringBuilder, ptr %24, i32 0, i32 3
  %25 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %StringBuilder, ptr %25, i32 0, i32 3
  %26 = load ptr, ptr %memberidx6, align 8
  %27 = load i64, ptr %length, align 4
  %28 = getelementptr inbounds i8, ptr %26, i64 %27
  store ptr %28, ptr %memberidx5, align 8
  %29 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %StringBuilder, ptr %29, i32 0, i32 4
  %30 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %StringBuilder, ptr %30, i32 0, i32 4
  %31 = load i64, ptr %memberidx8, align 4
  %32 = load i64, ptr %length, align 4
  %33 = add nuw i64 %31, %32
  store i64 %33, ptr %memberidx7, align 4
  ret void
}

define void @StringBuilder_append_string(ptr %0, ptr %1) {
  %str = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %str, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %StringBuilder, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr }, ptr %5, i32 0, i32 0
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %str, align 8
  %8 = getelementptr inbounds %string, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %memberidx1 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %9, i32 0, i32 3
  %10 = load ptr, ptr %memberidx1, align 8
  %11 = call ptr %10(ptr %7)
  %12 = load ptr, ptr %str, align 8
  %memberidx2 = getelementptr inbounds %string, ptr %12, i32 0, i32 2
  %13 = load i64, ptr %memberidx2, align 4
  call void %6(ptr %3, ptr %11, i64 %13)
  ret void
}

define ptr @StringBuilder_get_string(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %StringBuilder, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %StringBuilder, ptr %5, i32 0, i32 4
  %6 = load i64, ptr %memberidx1, align 4
  call void @string_constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @StringBuilder_constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableStringBuilder, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %StringBuilder, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %size, align 4
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %true_block, label %false_block

true_block:                                       ; preds = %2
  br label %end

false_block:                                      ; preds = %2
  %7 = load i64, ptr %size, align 4
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi i64 [ 1, %true_block ], [ %7, %false_block ]
  store i64 %ternary, ptr %memberidx, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %StringBuilder, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %StringBuilder, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = trunc i64 %10 to i32
  %mallocsize = mul i32 %11, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i32)
  %12 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %12, ptr %memberidx1, align 8
  %13 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %StringBuilder, ptr %13, i32 0, i32 3
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %StringBuilder, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  store ptr %15, ptr %memberidx3, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %StringBuilder, ptr %16, i32 0, i32 4
  store i64 0, ptr %memberidx5, align 4
  ret void
}

declare i64 @read(i64, ptr, i64)

declare i64 @access(ptr, i64)

declare i64 @close(i64)

define void @print_error(ptr %0, ptr %1, ptr %2) {
  %content = alloca ptr, align 8
  %filename = alloca ptr, align 8
  %error = alloca ptr, align 8
  store ptr %0, ptr %error, align 8
  store ptr %1, ptr %filename, align 8
  store ptr %2, ptr %content, align 8
  %4 = load ptr, ptr %error, align 8
  %memberidx = getelementptr inbounds %FloError, ptr %4, i32 0, i32 0
  %5 = load i64, ptr %memberidx, align 4
  %6 = load ptr, ptr %error, align 8
  %memberidx1 = getelementptr inbounds %FloError, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx1, align 8
  call void @print_message_error(i64 %5, ptr %7)
  %8 = load ptr, ptr %filename, align 8
  %9 = getelementptr inbounds %string, ptr %8, i32 0, i32 0
  %10 = load ptr, ptr %9, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %10, i32 0, i32 5
  %11 = load ptr, ptr %memberidx2, align 8
  %12 = call ptr %11(ptr %8)
  %13 = load ptr, ptr %error, align 8
  %memberidx3 = getelementptr inbounds %FloError, ptr %13, i32 0, i32 2
  %14 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %FloRange, ptr %14, i32 0, i32 3
  %15 = load i64, ptr %memberidx4, align 4
  %16 = alloca ptr, align 8
  %17 = call i64 (ptr, ptr, ...) @asprintf(ptr %16, ptr @64, ptr %12, i64 %15)
  %18 = load ptr, ptr %16, align 8
  %19 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %19, ptr %18, i64 %17)
  tail call void @free(ptr %12)
  call void @flo_println(ptr %19)
  %20 = load ptr, ptr %content, align 8
  %21 = load ptr, ptr %error, align 8
  %memberidx5 = getelementptr inbounds %FloError, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %memberidx5, align 8
  call void @print_error_line(ptr %20, ptr %22)
  ret void
}

define void @print_error_line(ptr %0, ptr %1) {
  %range = alloca ptr, align 8
  %text = alloca ptr, align 8
  %line = alloca ptr, align 8
  %start_line = alloca i64, align 8
  %end = alloca i64, align 8
  %arrow_num = alloca i64, align 8
  %space_num = alloca i64, align 8
  %_ = alloca i64, align 8
  %tmp_it = alloca ptr, align 8
  %_1 = alloca i64, align 8
  %tmp_it2 = alloca ptr, align 8
  store ptr %0, ptr %text, align 8
  store ptr %1, ptr %range, align 8
  %3 = load ptr, ptr %text, align 8
  %4 = load ptr, ptr %range, align 8
  %memberidx = getelementptr inbounds %FloRange, ptr %4, i32 0, i32 1
  %5 = load i64, ptr %memberidx, align 4
  %6 = call i64 @get_next_line_index(ptr %3, i64 %5)
  store i64 %6, ptr %end, align 4
  %7 = load ptr, ptr %range, align 8
  %memberidx3 = getelementptr inbounds %FloRange, ptr %7, i32 0, i32 0
  %8 = load i64, ptr %memberidx3, align 4
  %9 = load ptr, ptr %range, align 8
  %memberidx4 = getelementptr inbounds %FloRange, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx4, align 4
  %11 = sub nsw i64 %8, %10
  store i64 %11, ptr %start_line, align 4
  %12 = load ptr, ptr %text, align 8
  %13 = getelementptr inbounds %string, ptr %12, i32 0, i32 0
  %14 = load ptr, ptr %13, align 8
  %memberidx5 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load i64, ptr %start_line, align 4
  %17 = load i64, ptr %end, align 4
  %18 = load i64, ptr %start_line, align 4
  %19 = sub nuw i64 %17, %18
  %20 = call ptr %15(ptr %12, i64 %16, i64 %19)
  store ptr %20, ptr %line, align 8
  %21 = load ptr, ptr %line, align 8
  call void @flo_println(ptr %21)
  %22 = load ptr, ptr %range, align 8
  %memberidx6 = getelementptr inbounds %FloRange, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx6, align 4
  store i64 %23, ptr %space_num, align 4
  %24 = load ptr, ptr %range, align 8
  %memberidx7 = getelementptr inbounds %FloRange, ptr %24, i32 0, i32 1
  %25 = load i64, ptr %memberidx7, align 4
  %26 = load ptr, ptr %range, align 8
  %memberidx8 = getelementptr inbounds %FloRange, ptr %26, i32 0, i32 0
  %27 = load i64, ptr %memberidx8, align 4
  %28 = sub nuw i64 %25, %27
  store i64 %28, ptr %arrow_num, align 4
  br label %for.entry

for.entry:                                        ; preds = %2
  %29 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %30 = load i64, ptr %space_num, align 4
  call void @Range_constructor(ptr %29, i64 0, i64 %30)
  %31 = call ptr @Range___iter__(ptr %29)
  store ptr %31, ptr %tmp_it, align 8
  %32 = load ptr, ptr %tmp_it, align 8
  %33 = call i64 @RangeIterator_next(ptr %32)
  store i64 %33, ptr %_, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %34 = load ptr, ptr %tmp_it, align 8
  %memberidx9 = getelementptr inbounds %RangeIterator, ptr %34, i32 0, i32 0
  %35 = load i1, ptr %memberidx9, align 1
  %36 = xor i1 %35, true
  br i1 %36, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %37 = call ptr @string_from_bytes(ptr @65, i64 1)
  call void @flo_print(ptr %37)
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %38 = load ptr, ptr %tmp_it, align 8
  %39 = call i64 @RangeIterator_next(ptr %38)
  store i64 %39, ptr %_, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %40 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %40)
  call void @change_print_color(i64 0)
  br label %for.entry10

for.entry10:                                      ; preds = %for.end
  %41 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Range, ptr null, i32 1) to i32))
  %42 = load i64, ptr %arrow_num, align 4
  call void @Range_constructor(ptr %41, i64 0, i64 %42)
  %43 = call ptr @Range___iter__(ptr %41)
  store ptr %43, ptr %tmp_it2, align 8
  %44 = load ptr, ptr %tmp_it2, align 8
  %45 = call i64 @RangeIterator_next(ptr %44)
  store i64 %45, ptr %_1, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.incr13, %for.entry10
  %46 = load ptr, ptr %tmp_it2, align 8
  %memberidx15 = getelementptr inbounds %RangeIterator, ptr %46, i32 0, i32 0
  %47 = load i1, ptr %memberidx15, align 1
  %48 = xor i1 %47, true
  br i1 %48, label %for.body12, label %for.end14

for.body12:                                       ; preds = %for.cond11
  %49 = call ptr @string_from_bytes(ptr @66, i64 1)
  call void @flo_print(ptr %49)
  br label %for.incr13

for.incr13:                                       ; preds = %for.body12
  %50 = load ptr, ptr %tmp_it2, align 8
  %51 = call i64 @RangeIterator_next(ptr %50)
  store i64 %51, ptr %_1, align 4
  br label %for.cond11

for.end14:                                        ; preds = %for.cond11
  %52 = load ptr, ptr %tmp_it2, align 8
  tail call void @free(ptr %52)
  call void @change_print_color(i64 1)
  %53 = call ptr @string_from_bytes(ptr @0, i64 1)
  call void @flo_print(ptr %53)
  ret void
}

define i64 @RangeIterator_next(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %RangeIterator, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %RangeIterator, ptr %3, i32 0, i32 1
  %4 = load i64, ptr %memberidx1, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %RangeIterator, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx2, align 4
  %7 = icmp sge i64 %4, %6
  store i1 %7, ptr %memberidx, align 1
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %RangeIterator, ptr %8, i32 0, i32 1
  %9 = load i64, ptr %memberidx3, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %RangeIterator, ptr %10, i32 0, i32 1
  %11 = add nsw i64 %9, 1
  store i64 %11, ptr %memberidx4, align 4
  ret i64 %9
}

define void @RangeIterator_constructor(ptr %0, i64 %1, i64 %2) {
  %pos = alloca i64, align 8
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %pos, align 4
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %RangeIterator, ptr %4, i32 0, i32 1
  %5 = load i64, ptr %pos, align 4
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %RangeIterator, ptr %6, i32 0, i32 2
  %7 = load i64, ptr %end, align 4
  store i64 %7, ptr %memberidx1, align 4
  ret void
}

define i64 @get_next_line_index(ptr %0, i64 %1) {
  %text = alloca ptr, align 8
  %start = alloca i64, align 8
  store ptr %0, ptr %text, align 8
  store i64 %1, ptr %start, align 4
  %3 = load ptr, ptr %text, align 8
  %4 = getelementptr inbounds %string, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load i64, ptr %start, align 4
  %8 = call i8 %6(ptr %3, i64 %7)
  %9 = icmp ne i8 %8, 10
  %10 = load i64, ptr %start, align 4
  %11 = load ptr, ptr %text, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx1, align 4
  %13 = icmp slt i64 %10, %12
  %14 = and i1 %9, %13
  br i1 %14, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %15 = load i64, ptr %start, align 4
  %16 = add nsw i64 %15, 1
  store i64 %16, ptr %start, align 4
  %17 = load ptr, ptr %text, align 8
  %18 = getelementptr inbounds %string, ptr %17, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %19, i32 0, i32 2
  %20 = load ptr, ptr %memberidx2, align 8
  %21 = load i64, ptr %start, align 4
  %22 = call i8 %20(ptr %17, i64 %21)
  %23 = icmp ne i8 %22, 10
  %24 = load i64, ptr %start, align 4
  %25 = load ptr, ptr %text, align 8
  %memberidx3 = getelementptr inbounds %string, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx3, align 4
  %27 = icmp slt i64 %24, %26
  %28 = and i1 %23, %27
  br i1 %28, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  %29 = load i64, ptr %start, align 4
  ret i64 %29
}

define ptr @Range___iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%RangeIterator, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Range, ptr %3, i32 0, i32 0
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Range, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  call void @RangeIterator_constructor(ptr %2, i64 %4, i64 %6)
  ret ptr %2
}

define i1 @Range___in__(ptr %0, i64 %1) {
  %num = alloca i64, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %num, align 4
  %3 = load i64, ptr %num, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Range, ptr %4, i32 0, i32 0
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp sge i64 %3, %5
  %7 = load i64, ptr %num, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Range, ptr %8, i32 0, i32 1
  %9 = load i64, ptr %memberidx1, align 4
  %10 = icmp slt i64 %7, %9
  %11 = and i1 %6, %10
  ret i1 %11
}

define void @Range_constructor(ptr %0, i64 %1, i64 %2) {
  %this = alloca ptr, align 8
  %start = alloca i64, align 8
  %end = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %start, align 4
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Range, ptr %4, i32 0, i32 0
  %5 = load i64, ptr %start, align 4
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Range, ptr %6, i32 0, i32 1
  %7 = load i64, ptr %end, align 4
  store i64 %7, ptr %memberidx1, align 4
  ret void
}

define void @Program___del__(ptr %0) {
  %this = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %module = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Program, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr @Array_Module____iter__(ptr %3)
  store ptr %4, ptr %tmp_it, align 8
  %5 = load ptr, ptr %tmp_it, align 8
  %6 = call ptr @ArrayIterator_Module__next(ptr %5)
  store ptr %6, ptr %module, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %7 = load ptr, ptr %tmp_it, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Module_, ptr %7, i32 0, i32 0
  %8 = load i1, ptr %memberidx1, align 1
  %9 = xor i1 %8, true
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load ptr, ptr %module, align 8
  call void @Module___del__(ptr %10)
  tail call void @free(ptr %10)
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %11 = load ptr, ptr %tmp_it, align 8
  %12 = call ptr @ArrayIterator_Module__next(ptr %11)
  store ptr %12, ptr %module, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %13)
  %14 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Program, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx2, align 8
  call void @Array_Module____del__(ptr %15)
  tail call void @free(ptr %15)
  ret void
}

define void @ScopeId_constructor(ptr %0, i64 %1, i64 %2) {
  %id = alloca i64, align 8
  %this = alloca ptr, align 8
  %module_id = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %module_id, align 4
  store i64 %2, ptr %id, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ScopeId, ptr %4, i32 0, i32 0
  %5 = load i64, ptr %module_id, align 4
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ScopeId, ptr %6, i32 0, i32 1
  %7 = load i64, ptr %id, align 4
  store i64 %7, ptr %memberidx1, align 4
  ret void
}

define ptr @Array_ScopeId__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ScopeId_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ScopeId_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ScopeId_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_ScopeId__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ScopeId_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ScopeId_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_ScopeId__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ScopeId_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ScopeId_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ScopeId_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ScopeId_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ScopeId_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_ScopeId____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ScopeId_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ScopeId_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_ScopeId__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ScopeId_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ScopeId_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ScopeId_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_ScopeId____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_ScopeId_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ScopeId_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_ScopeId_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ScopeId_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ScopeId_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_ScopeId_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_ScopeId_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_ScopeId_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_ScopeId_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_ScopeId_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_ScopeId____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ScopeId_, ptr null, i32 1) to i32))
  call void @Array_ScopeId__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_ScopeId_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_ScopeId_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_ScopeId_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ScopeId_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_ScopeId_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_ScopeId_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_ScopeId_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_ScopeId_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_ScopeId_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_ScopeId_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_ScopeId____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_ScopeId____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_ScopeId____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_ScopeId__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_ScopeId_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_ScopeId_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_ScopeId_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_ScopeId_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_ScopeId_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_ScopeId_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_ScopeId__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_ScopeId_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_ScopeId_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_ScopeId_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_ScopeId_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_ScopeId____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_ScopeId_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ScopeId_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ScopeId_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_ScopeId__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_ScopeId____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ScopeId_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_ScopeId____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ScopeId_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_ScopeId____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ScopeId_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_ScopeId____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ScopeId_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_ScopeId_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ScopeId_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_ScopeId____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_ScopeId____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_ScopeId____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_ScopeId_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_ScopeId__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ScopeId_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_ScopeId__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ScopeId_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_ScopeId__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_ScopeId_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ScopeId_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ScopeId_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ScopeId_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @Map_string_VarId__resize(ptr %0) {
  %this = alloca ptr, align 8
  %old_entries = alloca ptr, align 8
  %old_size = alloca i64, align 8
  %i = alloca i64, align 8
  %i1 = alloca i64, align 8
  %entry = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_VarId_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = alloca ptr, i64 %3, align 8
  store ptr %4, ptr %old_entries, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_VarId_, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx2, align 4
  store i64 %6, ptr %old_size, align 4
  %7 = load ptr, ptr %old_entries, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_VarId_, ptr %8, i32 0, i32 0
  %9 = load ptr, ptr %memberidx3, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_VarId_, ptr %10, i32 0, i32 1
  %11 = load i64, ptr %memberidx4, align 4
  %12 = mul i64 %11, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %9, i64 %12, i1 false)
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Map_string_VarId_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Map_string_VarId_, ptr %14, i32 0, i32 1
  %15 = load i64, ptr %memberidx6, align 4
  %16 = mul nuw i64 %15, 2
  store i64 %16, ptr %memberidx5, align 4
  %17 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Map_string_VarId_, ptr %17, i32 0, i32 2
  store i64 0, ptr %memberidx7, align 4
  %18 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Map_string_VarId_, ptr %18, i32 0, i32 0
  %19 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Map_string_VarId_, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx9, align 8
  %21 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_VarId_, ptr %21, i32 0, i32 1
  %22 = load i64, ptr %memberidx10, align 4
  %23 = mul i64 %22, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %24 = call ptr @realloc(ptr %20, i64 %23)
  store ptr %24, ptr %memberidx8, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %25 = load i64, ptr %i, align 4
  %26 = load ptr, ptr %this, align 8
  %memberidx11 = getelementptr inbounds %Map_string_VarId_, ptr %26, i32 0, i32 1
  %27 = load i64, ptr %memberidx11, align 4
  %28 = icmp slt i64 %25, %27
  br i1 %28, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load i64, ptr %i, align 4
  %30 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %Map_string_VarId_, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx12, align 8
  %32 = getelementptr inbounds ptr, ptr %31, i64 %29
  store ptr null, ptr %32, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %33 = load i64, ptr %i, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.entry13

for.entry13:                                      ; preds = %for.end
  store i64 0, ptr %i1, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.incr16, %for.entry13
  %35 = load i64, ptr %i1, align 4
  %36 = load i64, ptr %old_size, align 4
  %37 = icmp slt i64 %35, %36
  br i1 %37, label %for.body15, label %for.end17

for.body15:                                       ; preds = %for.cond14
  %38 = load i64, ptr %i1, align 4
  %39 = load ptr, ptr %old_entries, align 8
  %40 = getelementptr inbounds ptr, ptr %39, i64 %38
  %41 = load ptr, ptr %40, align 8
  store ptr %41, ptr %entry, align 8
  %42 = load ptr, ptr %entry, align 8
  %43 = icmp ne ptr %42, null
  br i1 %43, label %if.entry, label %else

for.incr16:                                       ; preds = %ifend
  %44 = load i64, ptr %i1, align 4
  %45 = add nsw i64 %44, 1
  store i64 %45, ptr %i1, align 4
  br label %for.cond14

for.end17:                                        ; preds = %for.cond14
  ret void

if.entry:                                         ; preds = %for.body15
  %46 = load ptr, ptr %this, align 8
  %47 = load ptr, ptr %entry, align 8
  %memberidx18 = getelementptr inbounds %MapEntry_string_VarId_, ptr %47, i32 0, i32 0
  %48 = load ptr, ptr %memberidx18, align 8
  %49 = load ptr, ptr %entry, align 8
  %memberidx19 = getelementptr inbounds %MapEntry_string_VarId_, ptr %49, i32 0, i32 1
  %50 = load ptr, ptr %memberidx19, align 8
  call void @Map_string_VarId____setitem__(ptr %46, ptr %48, ptr %50)
  br label %ifend

else:                                             ; preds = %for.body15
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  br label %for.incr16
}

define void @VarId_constructor(ptr %0, i64 %1, i64 %2, i64 %3) {
  %id = alloca i64, align 8
  %kind = alloca i64, align 8
  %this = alloca ptr, align 8
  %module_id = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %kind, align 4
  store i64 %2, ptr %module_id, align 4
  store i64 %3, ptr %id, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %VarId, ptr %5, i32 0, i32 0
  %6 = load i64, ptr %kind, align 4
  store i64 %6, ptr %memberidx, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %VarId, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %module_id, align 4
  store i64 %8, ptr %memberidx1, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %VarId, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %id, align 4
  store i64 %10, ptr %memberidx2, align 4
  ret void
}

define void @MapEntry_string_VarId__constructor(ptr %0, ptr %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  store ptr %2, ptr %value, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapEntry_string_VarId_, ptr %4, i32 0, i32 0
  %5 = load ptr, ptr %key, align 8
  store ptr %5, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapEntry_string_VarId_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %value, align 8
  store ptr %7, ptr %memberidx1, align 8
  ret void
}

define ptr @MapIterator_string_VarId__next(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapIterator_string_VarId_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapIterator_string_VarId_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = icmp sgt i64 %3, 0
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %1
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %MapIterator_string_VarId_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %MapIterator_string_VarId_, ptr %9, i32 0, i32 1
  %incdec.ptr = getelementptr inbounds ptr, ptr %8, i32 1
  store ptr %incdec.ptr, ptr %memberidx3, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %MapIterator_string_VarId_, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx4, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 -1
  %13 = load ptr, ptr %12, align 8
  %14 = icmp ne ptr %13, null
  br i1 %14, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %if.entry, %1
  %15 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %MapIterator_string_VarId_, ptr %15, i32 0, i32 0
  %16 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %MapIterator_string_VarId_, ptr %16, i32 0, i32 3
  %17 = load i64, ptr %memberidx8, align 4
  %18 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %MapIterator_string_VarId_, ptr %18, i32 0, i32 3
  %19 = add nsw i64 %17, -1
  store i64 %19, ptr %memberidx9, align 4
  %20 = icmp sle i64 %17, 0
  store i1 %20, ptr %memberidx7, align 1
  %21 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %MapIterator_string_VarId_, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx10, align 8
  %23 = getelementptr inbounds ptr, ptr %22, i64 -1
  %24 = load ptr, ptr %23, align 8
  ret ptr %24

if.entry:                                         ; preds = %while.entry
  br label %while.end

else:                                             ; preds = %while.entry
  br label %ifend

ifend:                                            ; preds = %else
  %25 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %MapIterator_string_VarId_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx5, align 4
  %27 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %MapIterator_string_VarId_, ptr %27, i32 0, i32 2
  %28 = add nsw i64 %26, -1
  store i64 %28, ptr %memberidx6, align 4
  %29 = icmp sgt i64 %26, 0
  br i1 %29, label %while.entry, label %while.end
}

define void @MapIterator_string_VarId__constructor(ptr %0, ptr %1, i64 %2, i64 %3) {
  %remaining_size = alloca i64, align 8
  %this = alloca ptr, align 8
  %entries = alloca ptr, align 8
  %items_remaining = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %entries, align 8
  store i64 %2, ptr %remaining_size, align 4
  store i64 %3, ptr %items_remaining, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapIterator_string_VarId_, ptr %5, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapIterator_string_VarId_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %entries, align 8
  store ptr %7, ptr %memberidx1, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %MapIterator_string_VarId_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %remaining_size, align 4
  store i64 %9, ptr %memberidx2, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %MapIterator_string_VarId_, ptr %10, i32 0, i32 3
  %11 = load i64, ptr %items_remaining, align 4
  store i64 %11, ptr %memberidx3, align 4
  ret void
}

define ptr @Map_string_VarId____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MapIterator_string_VarId_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_VarId_, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_VarId_, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_VarId_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx2, align 4
  call void @MapIterator_string_VarId__constructor(ptr %2, ptr %4, i64 %6, i64 %8)
  ret ptr %2
}

define void @Map_string_VarId____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_VarId_, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Map_string_VarId____setitem__(ptr %0, ptr %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  %should_add = alloca i1, align 1
  %ratio = alloca double, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  store ptr %2, ptr %value, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_VarId_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = sitofp i64 %5 to double
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_VarId_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %memberidx1, align 4
  %9 = sitofp i64 %8 to double
  %10 = fdiv double %6, %9
  store double %10, ptr %ratio, align 8
  %11 = load double, ptr %ratio, align 8
  %12 = fcmp ogt double %11, 7.500000e-01
  br i1 %12, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %13 = load ptr, ptr %this, align 8
  call void @Map_string_VarId__resize(ptr %13)
  br label %ifend

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %14 = load ptr, ptr %this, align 8
  %15 = load ptr, ptr %key, align 8
  %16 = call i64 @Map_string_VarId__hash_fnc(ptr %14, ptr %15)
  %17 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_VarId_, ptr %17, i32 0, i32 1
  %18 = load i64, ptr %memberidx2, align 4
  %19 = urem i64 %16, %18
  store i64 %19, ptr %hash, align 4
  store i1 true, ptr %should_add, align 1
  %20 = load i64, ptr %hash, align 4
  %21 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_VarId_, ptr %21, i32 0, i32 0
  %22 = load ptr, ptr %memberidx3, align 8
  %23 = getelementptr inbounds ptr, ptr %22, i64 %20
  %24 = load ptr, ptr %23, align 8
  %25 = icmp ne ptr %24, null
  br i1 %25, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend8, %ifend
  %26 = load i64, ptr %hash, align 4
  %27 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_VarId_, ptr %27, i32 0, i32 0
  %28 = load ptr, ptr %memberidx4, align 8
  %29 = getelementptr inbounds ptr, ptr %28, i64 %26
  %30 = load ptr, ptr %29, align 8
  %memberidx5 = getelementptr inbounds %MapEntry_string_VarId_, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx5, align 8
  %32 = load ptr, ptr %key, align 8
  %33 = call i1 @string___eq__(ptr %31, ptr %32)
  br i1 %33, label %if.entry6, label %else7

while.end:                                        ; preds = %ifend8, %if.entry6, %ifend
  %34 = load i1, ptr %should_add, align 1
  br i1 %34, label %if.entry11, label %else12

if.entry6:                                        ; preds = %while.entry
  store i1 false, ptr %should_add, align 1
  br label %while.end

else7:                                            ; preds = %while.entry
  br label %ifend8

ifend8:                                           ; preds = %else7
  %35 = load i64, ptr %hash, align 4
  %36 = add nuw i64 %35, 1
  %37 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Map_string_VarId_, ptr %37, i32 0, i32 1
  %38 = load i64, ptr %memberidx9, align 4
  %39 = urem i64 %36, %38
  store i64 %39, ptr %hash, align 4
  %40 = load i64, ptr %hash, align 4
  %41 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_VarId_, ptr %41, i32 0, i32 0
  %42 = load ptr, ptr %memberidx10, align 8
  %43 = getelementptr inbounds ptr, ptr %42, i64 %40
  %44 = load ptr, ptr %43, align 8
  %45 = icmp ne ptr %44, null
  br i1 %45, label %while.entry, label %while.end

if.entry11:                                       ; preds = %while.end
  %46 = load ptr, ptr %this, align 8
  %memberidx14 = getelementptr inbounds %Map_string_VarId_, ptr %46, i32 0, i32 2
  %47 = load i64, ptr %memberidx14, align 4
  %48 = load ptr, ptr %this, align 8
  %memberidx15 = getelementptr inbounds %Map_string_VarId_, ptr %48, i32 0, i32 2
  %49 = add nsw i64 %47, 1
  store i64 %49, ptr %memberidx15, align 4
  br label %ifend13

else12:                                           ; preds = %while.end
  br label %ifend13

ifend13:                                          ; preds = %else12, %if.entry11
  %50 = load i64, ptr %hash, align 4
  %51 = load ptr, ptr %this, align 8
  %memberidx16 = getelementptr inbounds %Map_string_VarId_, ptr %51, i32 0, i32 0
  %52 = load ptr, ptr %memberidx16, align 8
  %53 = getelementptr inbounds ptr, ptr %52, i64 %50
  %54 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MapEntry_string_VarId_, ptr null, i32 1) to i32))
  %55 = load ptr, ptr %key, align 8
  %56 = load ptr, ptr %value, align 8
  call void @MapEntry_string_VarId__constructor(ptr %54, ptr %55, ptr %56)
  store ptr %54, ptr %53, align 8
  ret void
}

define ptr @Map_string_VarId____getitem__(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %key, align 8
  %5 = call i64 @Map_string_VarId__hash_fnc(ptr %3, ptr %4)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_VarId_, ptr %6, i32 0, i32 1
  %7 = load i64, ptr %memberidx, align 4
  %8 = urem i64 %5, %7
  store i64 %8, ptr %hash, align 4
  %9 = load i64, ptr %hash, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_VarId_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 %9
  %13 = load ptr, ptr %12, align 8
  %14 = icmp ne ptr %13, null
  br i1 %14, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %2
  %15 = load i64, ptr %hash, align 4
  %16 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_VarId_, ptr %16, i32 0, i32 0
  %17 = load ptr, ptr %memberidx2, align 8
  %18 = getelementptr inbounds ptr, ptr %17, i64 %15
  %19 = load ptr, ptr %18, align 8
  %memberidx3 = getelementptr inbounds %MapEntry_string_VarId_, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx3, align 8
  %21 = load ptr, ptr %key, align 8
  %22 = call i1 @string___eq__(ptr %20, ptr %21)
  br i1 %22, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %if.entry, %2
  %23 = load i64, ptr %hash, align 4
  %24 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Map_string_VarId_, ptr %24, i32 0, i32 0
  %25 = load ptr, ptr %memberidx6, align 8
  %26 = getelementptr inbounds ptr, ptr %25, i64 %23
  %27 = load ptr, ptr %26, align 8
  %28 = icmp ne ptr %27, null
  br i1 %28, label %if.entry7, label %else8

if.entry:                                         ; preds = %while.entry
  br label %while.end

else:                                             ; preds = %while.entry
  %29 = load i64, ptr %hash, align 4
  %30 = add nuw i64 %29, 1
  %31 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_VarId_, ptr %31, i32 0, i32 1
  %32 = load i64, ptr %memberidx4, align 4
  %33 = urem i64 %30, %32
  store i64 %33, ptr %hash, align 4
  br label %ifend

ifend:                                            ; preds = %else
  %34 = load i64, ptr %hash, align 4
  %35 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Map_string_VarId_, ptr %35, i32 0, i32 0
  %36 = load ptr, ptr %memberidx5, align 8
  %37 = getelementptr inbounds ptr, ptr %36, i64 %34
  %38 = load ptr, ptr %37, align 8
  %39 = icmp ne ptr %38, null
  br i1 %39, label %while.entry, label %while.end

if.entry7:                                        ; preds = %while.end
  %40 = load i64, ptr %hash, align 4
  %41 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_VarId_, ptr %41, i32 0, i32 0
  %42 = load ptr, ptr %memberidx10, align 8
  %43 = getelementptr inbounds ptr, ptr %42, i64 %40
  %44 = load ptr, ptr %43, align 8
  %memberidx11 = getelementptr inbounds %MapEntry_string_VarId_, ptr %44, i32 0, i32 1
  %45 = load ptr, ptr %memberidx11, align 8
  ret ptr %45

else8:                                            ; preds = %while.end
  br label %ifend9

ifend9:                                           ; preds = %else8
  ret ptr null
}

define i64 @Map_string_VarId__hash_fnc(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  %str = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  %3 = load ptr, ptr %key, align 8
  %4 = getelementptr inbounds %string, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr %6(ptr %3)
  %8 = alloca ptr, align 8
  %9 = call i64 (ptr, ptr, ...) @asprintf(ptr %8, ptr @58, ptr %7)
  %10 = load ptr, ptr %8, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %11, ptr %10, i64 %9)
  tail call void @free(ptr %7)
  store ptr %11, ptr %str, align 8
  store i64 0, ptr %hash, align 4
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %12 = load i64, ptr %i, align 4
  %13 = load ptr, ptr %str, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx1, align 4
  %15 = icmp slt i64 %12, %14
  br i1 %15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i64, ptr %hash, align 4
  %17 = shl i64 %16, 1
  %18 = load ptr, ptr %str, align 8
  %19 = getelementptr inbounds %string, ptr %18, i32 0, i32 0
  %20 = load ptr, ptr %19, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %20, i32 0, i32 2
  %21 = load ptr, ptr %memberidx2, align 8
  %22 = load i64, ptr %i, align 4
  %23 = call i8 %21(ptr %18, i64 %22)
  %24 = zext i8 %23 to i64
  %25 = add nuw i64 %17, %24
  store i64 %25, ptr %hash, align 4
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %26 = load i64, ptr %i, align 4
  %27 = add nsw i64 %26, 1
  store i64 %27, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load ptr, ptr %str, align 8
  call void @string___del__(ptr %28)
  tail call void @free(ptr %28)
  %29 = load i64, ptr %hash, align 4
  ret i64 %29
}

define void @Map_string_VarId__constructor(ptr %0) {
  %this = alloca ptr, align 8
  %initial_capacity = alloca i64, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 256, ptr %initial_capacity, align 4
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_VarId_, ptr %2, i32 0, i32 0
  %3 = load i64, ptr %initial_capacity, align 4
  %4 = trunc i64 %3 to i32
  %mallocsize = mul i32 %4, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %5 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %5, ptr %memberidx, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %initial_capacity, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i64, ptr %i, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_VarId_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 %9
  store ptr null, ptr %12, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %13 = load i64, ptr %i, align 4
  %14 = add nsw i64 %13, 1
  store i64 %14, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_VarId_, ptr %15, i32 0, i32 1
  %16 = load i64, ptr %initial_capacity, align 4
  store i64 %16, ptr %memberidx2, align 4
  %17 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_VarId_, ptr %17, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  ret void
}

define void @Scope___del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Scope, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Scope, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  call void @Map_string_VarId____del__(ptr %5)
  tail call void @free(ptr %5)
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Scope, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %memberidx2, align 8
  call void @Map_string_ClassId____del__(ptr %7)
  tail call void @free(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Scope, ptr %8, i32 0, i32 3
  %9 = load ptr, ptr %memberidx3, align 8
  call void @Map_string_VarId____del__(ptr %9)
  tail call void @free(ptr %9)
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Scope, ptr %10, i32 0, i32 4
  %11 = load ptr, ptr %memberidx4, align 8
  call void @Map_string_EnumId____del__(ptr %11)
  tail call void @free(ptr %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Scope, ptr %12, i32 0, i32 6
  %13 = load ptr, ptr %memberidx5, align 8
  call void @Map_string_Type____del__(ptr %13)
  tail call void @free(ptr %13)
  ret void
}

define void @Map_string_EnumId__resize(ptr %0) {
  %this = alloca ptr, align 8
  %old_entries = alloca ptr, align 8
  %old_size = alloca i64, align 8
  %i = alloca i64, align 8
  %i1 = alloca i64, align 8
  %entry = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_EnumId_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = alloca ptr, i64 %3, align 8
  store ptr %4, ptr %old_entries, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_EnumId_, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx2, align 4
  store i64 %6, ptr %old_size, align 4
  %7 = load ptr, ptr %old_entries, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_EnumId_, ptr %8, i32 0, i32 0
  %9 = load ptr, ptr %memberidx3, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_EnumId_, ptr %10, i32 0, i32 1
  %11 = load i64, ptr %memberidx4, align 4
  %12 = mul i64 %11, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %9, i64 %12, i1 false)
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Map_string_EnumId_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Map_string_EnumId_, ptr %14, i32 0, i32 1
  %15 = load i64, ptr %memberidx6, align 4
  %16 = mul nuw i64 %15, 2
  store i64 %16, ptr %memberidx5, align 4
  %17 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Map_string_EnumId_, ptr %17, i32 0, i32 2
  store i64 0, ptr %memberidx7, align 4
  %18 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Map_string_EnumId_, ptr %18, i32 0, i32 0
  %19 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Map_string_EnumId_, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx9, align 8
  %21 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_EnumId_, ptr %21, i32 0, i32 1
  %22 = load i64, ptr %memberidx10, align 4
  %23 = mul i64 %22, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %24 = call ptr @realloc(ptr %20, i64 %23)
  store ptr %24, ptr %memberidx8, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %25 = load i64, ptr %i, align 4
  %26 = load ptr, ptr %this, align 8
  %memberidx11 = getelementptr inbounds %Map_string_EnumId_, ptr %26, i32 0, i32 1
  %27 = load i64, ptr %memberidx11, align 4
  %28 = icmp slt i64 %25, %27
  br i1 %28, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load i64, ptr %i, align 4
  %30 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %Map_string_EnumId_, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx12, align 8
  %32 = getelementptr inbounds ptr, ptr %31, i64 %29
  store ptr null, ptr %32, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %33 = load i64, ptr %i, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.entry13

for.entry13:                                      ; preds = %for.end
  store i64 0, ptr %i1, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.incr16, %for.entry13
  %35 = load i64, ptr %i1, align 4
  %36 = load i64, ptr %old_size, align 4
  %37 = icmp slt i64 %35, %36
  br i1 %37, label %for.body15, label %for.end17

for.body15:                                       ; preds = %for.cond14
  %38 = load i64, ptr %i1, align 4
  %39 = load ptr, ptr %old_entries, align 8
  %40 = getelementptr inbounds ptr, ptr %39, i64 %38
  %41 = load ptr, ptr %40, align 8
  store ptr %41, ptr %entry, align 8
  %42 = load ptr, ptr %entry, align 8
  %43 = icmp ne ptr %42, null
  br i1 %43, label %if.entry, label %else

for.incr16:                                       ; preds = %ifend
  %44 = load i64, ptr %i1, align 4
  %45 = add nsw i64 %44, 1
  store i64 %45, ptr %i1, align 4
  br label %for.cond14

for.end17:                                        ; preds = %for.cond14
  ret void

if.entry:                                         ; preds = %for.body15
  %46 = load ptr, ptr %this, align 8
  %47 = load ptr, ptr %entry, align 8
  %memberidx18 = getelementptr inbounds %MapEntry_string_EnumId_, ptr %47, i32 0, i32 0
  %48 = load ptr, ptr %memberidx18, align 8
  %49 = load ptr, ptr %entry, align 8
  %memberidx19 = getelementptr inbounds %MapEntry_string_EnumId_, ptr %49, i32 0, i32 1
  %50 = load ptr, ptr %memberidx19, align 8
  call void @Map_string_EnumId____setitem__(ptr %46, ptr %48, ptr %50)
  br label %ifend

else:                                             ; preds = %for.body15
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  br label %for.incr16
}

define void @EnumId_constructor(ptr %0, i64 %1, i64 %2) {
  %id = alloca i64, align 8
  %this = alloca ptr, align 8
  %module_id = alloca i64, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @TypeId_constructor, ptr %super, align 8
  store i64 %1, ptr %module_id, align 4
  store i64 %2, ptr %id, align 4
  %4 = load ptr, ptr %super, align 8
  %5 = load i64, ptr %module_id, align 4
  %6 = load i64, ptr %id, align 4
  call void %4(ptr %0, i64 %5, i64 1, i64 %6)
  ret void
}

define void @TypeId_constructor(ptr %0, i64 %1, i64 %2, i64 %3) {
  %id = alloca i64, align 8
  %kind = alloca i64, align 8
  %this = alloca ptr, align 8
  %module_id = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %module_id, align 4
  store i64 %2, ptr %kind, align 4
  store i64 %3, ptr %id, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeId, ptr %5, i32 0, i32 0
  %6 = load i64, ptr %module_id, align 4
  store i64 %6, ptr %memberidx, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %TypeId, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %kind, align 4
  store i64 %8, ptr %memberidx1, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %TypeId, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %id, align 4
  store i64 %10, ptr %memberidx2, align 4
  ret void
}

define void @MapEntry_string_EnumId__constructor(ptr %0, ptr %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  store ptr %2, ptr %value, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapEntry_string_EnumId_, ptr %4, i32 0, i32 0
  %5 = load ptr, ptr %key, align 8
  store ptr %5, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapEntry_string_EnumId_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %value, align 8
  store ptr %7, ptr %memberidx1, align 8
  ret void
}

define ptr @MapIterator_string_EnumId__next(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapIterator_string_EnumId_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapIterator_string_EnumId_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = icmp sgt i64 %3, 0
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %1
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %MapIterator_string_EnumId_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %MapIterator_string_EnumId_, ptr %9, i32 0, i32 1
  %incdec.ptr = getelementptr inbounds ptr, ptr %8, i32 1
  store ptr %incdec.ptr, ptr %memberidx3, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %MapIterator_string_EnumId_, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx4, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 -1
  %13 = load ptr, ptr %12, align 8
  %14 = icmp ne ptr %13, null
  br i1 %14, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %if.entry, %1
  %15 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %MapIterator_string_EnumId_, ptr %15, i32 0, i32 0
  %16 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %MapIterator_string_EnumId_, ptr %16, i32 0, i32 3
  %17 = load i64, ptr %memberidx8, align 4
  %18 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %MapIterator_string_EnumId_, ptr %18, i32 0, i32 3
  %19 = add nsw i64 %17, -1
  store i64 %19, ptr %memberidx9, align 4
  %20 = icmp sle i64 %17, 0
  store i1 %20, ptr %memberidx7, align 1
  %21 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %MapIterator_string_EnumId_, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx10, align 8
  %23 = getelementptr inbounds ptr, ptr %22, i64 -1
  %24 = load ptr, ptr %23, align 8
  ret ptr %24

if.entry:                                         ; preds = %while.entry
  br label %while.end

else:                                             ; preds = %while.entry
  br label %ifend

ifend:                                            ; preds = %else
  %25 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %MapIterator_string_EnumId_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx5, align 4
  %27 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %MapIterator_string_EnumId_, ptr %27, i32 0, i32 2
  %28 = add nsw i64 %26, -1
  store i64 %28, ptr %memberidx6, align 4
  %29 = icmp sgt i64 %26, 0
  br i1 %29, label %while.entry, label %while.end
}

define void @MapIterator_string_EnumId__constructor(ptr %0, ptr %1, i64 %2, i64 %3) {
  %remaining_size = alloca i64, align 8
  %this = alloca ptr, align 8
  %entries = alloca ptr, align 8
  %items_remaining = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %entries, align 8
  store i64 %2, ptr %remaining_size, align 4
  store i64 %3, ptr %items_remaining, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapIterator_string_EnumId_, ptr %5, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapIterator_string_EnumId_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %entries, align 8
  store ptr %7, ptr %memberidx1, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %MapIterator_string_EnumId_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %remaining_size, align 4
  store i64 %9, ptr %memberidx2, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %MapIterator_string_EnumId_, ptr %10, i32 0, i32 3
  %11 = load i64, ptr %items_remaining, align 4
  store i64 %11, ptr %memberidx3, align 4
  ret void
}

define ptr @Map_string_EnumId____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MapIterator_string_EnumId_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_EnumId_, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_EnumId_, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_EnumId_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx2, align 4
  call void @MapIterator_string_EnumId__constructor(ptr %2, ptr %4, i64 %6, i64 %8)
  ret ptr %2
}

define void @Map_string_EnumId____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_EnumId_, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Map_string_EnumId____setitem__(ptr %0, ptr %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  %should_add = alloca i1, align 1
  %ratio = alloca double, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  store ptr %2, ptr %value, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_EnumId_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = sitofp i64 %5 to double
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_EnumId_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %memberidx1, align 4
  %9 = sitofp i64 %8 to double
  %10 = fdiv double %6, %9
  store double %10, ptr %ratio, align 8
  %11 = load double, ptr %ratio, align 8
  %12 = fcmp ogt double %11, 7.500000e-01
  br i1 %12, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %13 = load ptr, ptr %this, align 8
  call void @Map_string_EnumId__resize(ptr %13)
  br label %ifend

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %14 = load ptr, ptr %this, align 8
  %15 = load ptr, ptr %key, align 8
  %16 = call i64 @Map_string_EnumId__hash_fnc(ptr %14, ptr %15)
  %17 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_EnumId_, ptr %17, i32 0, i32 1
  %18 = load i64, ptr %memberidx2, align 4
  %19 = urem i64 %16, %18
  store i64 %19, ptr %hash, align 4
  store i1 true, ptr %should_add, align 1
  %20 = load i64, ptr %hash, align 4
  %21 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_EnumId_, ptr %21, i32 0, i32 0
  %22 = load ptr, ptr %memberidx3, align 8
  %23 = getelementptr inbounds ptr, ptr %22, i64 %20
  %24 = load ptr, ptr %23, align 8
  %25 = icmp ne ptr %24, null
  br i1 %25, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend8, %ifend
  %26 = load i64, ptr %hash, align 4
  %27 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_EnumId_, ptr %27, i32 0, i32 0
  %28 = load ptr, ptr %memberidx4, align 8
  %29 = getelementptr inbounds ptr, ptr %28, i64 %26
  %30 = load ptr, ptr %29, align 8
  %memberidx5 = getelementptr inbounds %MapEntry_string_EnumId_, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx5, align 8
  %32 = load ptr, ptr %key, align 8
  %33 = call i1 @string___eq__(ptr %31, ptr %32)
  br i1 %33, label %if.entry6, label %else7

while.end:                                        ; preds = %ifend8, %if.entry6, %ifend
  %34 = load i1, ptr %should_add, align 1
  br i1 %34, label %if.entry11, label %else12

if.entry6:                                        ; preds = %while.entry
  store i1 false, ptr %should_add, align 1
  br label %while.end

else7:                                            ; preds = %while.entry
  br label %ifend8

ifend8:                                           ; preds = %else7
  %35 = load i64, ptr %hash, align 4
  %36 = add nuw i64 %35, 1
  %37 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Map_string_EnumId_, ptr %37, i32 0, i32 1
  %38 = load i64, ptr %memberidx9, align 4
  %39 = urem i64 %36, %38
  store i64 %39, ptr %hash, align 4
  %40 = load i64, ptr %hash, align 4
  %41 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_EnumId_, ptr %41, i32 0, i32 0
  %42 = load ptr, ptr %memberidx10, align 8
  %43 = getelementptr inbounds ptr, ptr %42, i64 %40
  %44 = load ptr, ptr %43, align 8
  %45 = icmp ne ptr %44, null
  br i1 %45, label %while.entry, label %while.end

if.entry11:                                       ; preds = %while.end
  %46 = load ptr, ptr %this, align 8
  %memberidx14 = getelementptr inbounds %Map_string_EnumId_, ptr %46, i32 0, i32 2
  %47 = load i64, ptr %memberidx14, align 4
  %48 = load ptr, ptr %this, align 8
  %memberidx15 = getelementptr inbounds %Map_string_EnumId_, ptr %48, i32 0, i32 2
  %49 = add nsw i64 %47, 1
  store i64 %49, ptr %memberidx15, align 4
  br label %ifend13

else12:                                           ; preds = %while.end
  br label %ifend13

ifend13:                                          ; preds = %else12, %if.entry11
  %50 = load i64, ptr %hash, align 4
  %51 = load ptr, ptr %this, align 8
  %memberidx16 = getelementptr inbounds %Map_string_EnumId_, ptr %51, i32 0, i32 0
  %52 = load ptr, ptr %memberidx16, align 8
  %53 = getelementptr inbounds ptr, ptr %52, i64 %50
  %54 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MapEntry_string_EnumId_, ptr null, i32 1) to i32))
  %55 = load ptr, ptr %key, align 8
  %56 = load ptr, ptr %value, align 8
  call void @MapEntry_string_EnumId__constructor(ptr %54, ptr %55, ptr %56)
  store ptr %54, ptr %53, align 8
  ret void
}

define ptr @Map_string_EnumId____getitem__(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %key, align 8
  %5 = call i64 @Map_string_EnumId__hash_fnc(ptr %3, ptr %4)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_EnumId_, ptr %6, i32 0, i32 1
  %7 = load i64, ptr %memberidx, align 4
  %8 = urem i64 %5, %7
  store i64 %8, ptr %hash, align 4
  %9 = load i64, ptr %hash, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_EnumId_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 %9
  %13 = load ptr, ptr %12, align 8
  %14 = icmp ne ptr %13, null
  br i1 %14, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %2
  %15 = load i64, ptr %hash, align 4
  %16 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_EnumId_, ptr %16, i32 0, i32 0
  %17 = load ptr, ptr %memberidx2, align 8
  %18 = getelementptr inbounds ptr, ptr %17, i64 %15
  %19 = load ptr, ptr %18, align 8
  %memberidx3 = getelementptr inbounds %MapEntry_string_EnumId_, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx3, align 8
  %21 = load ptr, ptr %key, align 8
  %22 = call i1 @string___eq__(ptr %20, ptr %21)
  br i1 %22, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %if.entry, %2
  %23 = load i64, ptr %hash, align 4
  %24 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Map_string_EnumId_, ptr %24, i32 0, i32 0
  %25 = load ptr, ptr %memberidx6, align 8
  %26 = getelementptr inbounds ptr, ptr %25, i64 %23
  %27 = load ptr, ptr %26, align 8
  %28 = icmp ne ptr %27, null
  br i1 %28, label %if.entry7, label %else8

if.entry:                                         ; preds = %while.entry
  br label %while.end

else:                                             ; preds = %while.entry
  %29 = load i64, ptr %hash, align 4
  %30 = add nuw i64 %29, 1
  %31 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_EnumId_, ptr %31, i32 0, i32 1
  %32 = load i64, ptr %memberidx4, align 4
  %33 = urem i64 %30, %32
  store i64 %33, ptr %hash, align 4
  br label %ifend

ifend:                                            ; preds = %else
  %34 = load i64, ptr %hash, align 4
  %35 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Map_string_EnumId_, ptr %35, i32 0, i32 0
  %36 = load ptr, ptr %memberidx5, align 8
  %37 = getelementptr inbounds ptr, ptr %36, i64 %34
  %38 = load ptr, ptr %37, align 8
  %39 = icmp ne ptr %38, null
  br i1 %39, label %while.entry, label %while.end

if.entry7:                                        ; preds = %while.end
  %40 = load i64, ptr %hash, align 4
  %41 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_EnumId_, ptr %41, i32 0, i32 0
  %42 = load ptr, ptr %memberidx10, align 8
  %43 = getelementptr inbounds ptr, ptr %42, i64 %40
  %44 = load ptr, ptr %43, align 8
  %memberidx11 = getelementptr inbounds %MapEntry_string_EnumId_, ptr %44, i32 0, i32 1
  %45 = load ptr, ptr %memberidx11, align 8
  ret ptr %45

else8:                                            ; preds = %while.end
  br label %ifend9

ifend9:                                           ; preds = %else8
  ret ptr null
}

define i64 @Map_string_EnumId__hash_fnc(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  %str = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  %3 = load ptr, ptr %key, align 8
  %4 = getelementptr inbounds %string, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr %6(ptr %3)
  %8 = alloca ptr, align 8
  %9 = call i64 (ptr, ptr, ...) @asprintf(ptr %8, ptr @58, ptr %7)
  %10 = load ptr, ptr %8, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %11, ptr %10, i64 %9)
  tail call void @free(ptr %7)
  store ptr %11, ptr %str, align 8
  store i64 0, ptr %hash, align 4
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %12 = load i64, ptr %i, align 4
  %13 = load ptr, ptr %str, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx1, align 4
  %15 = icmp slt i64 %12, %14
  br i1 %15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i64, ptr %hash, align 4
  %17 = shl i64 %16, 1
  %18 = load ptr, ptr %str, align 8
  %19 = getelementptr inbounds %string, ptr %18, i32 0, i32 0
  %20 = load ptr, ptr %19, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %20, i32 0, i32 2
  %21 = load ptr, ptr %memberidx2, align 8
  %22 = load i64, ptr %i, align 4
  %23 = call i8 %21(ptr %18, i64 %22)
  %24 = zext i8 %23 to i64
  %25 = add nuw i64 %17, %24
  store i64 %25, ptr %hash, align 4
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %26 = load i64, ptr %i, align 4
  %27 = add nsw i64 %26, 1
  store i64 %27, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load ptr, ptr %str, align 8
  call void @string___del__(ptr %28)
  tail call void @free(ptr %28)
  %29 = load i64, ptr %hash, align 4
  ret i64 %29
}

define void @Map_string_EnumId__constructor(ptr %0) {
  %this = alloca ptr, align 8
  %initial_capacity = alloca i64, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 256, ptr %initial_capacity, align 4
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_EnumId_, ptr %2, i32 0, i32 0
  %3 = load i64, ptr %initial_capacity, align 4
  %4 = trunc i64 %3 to i32
  %mallocsize = mul i32 %4, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %5 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %5, ptr %memberidx, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %initial_capacity, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i64, ptr %i, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_EnumId_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 %9
  store ptr null, ptr %12, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %13 = load i64, ptr %i, align 4
  %14 = add nsw i64 %13, 1
  store i64 %14, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_EnumId_, ptr %15, i32 0, i32 1
  %16 = load i64, ptr %initial_capacity, align 4
  store i64 %16, ptr %memberidx2, align 4
  %17 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_EnumId_, ptr %17, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  ret void
}

define void @Map_string_Type__resize(ptr %0) {
  %this = alloca ptr, align 8
  %old_entries = alloca ptr, align 8
  %old_size = alloca i64, align 8
  %i = alloca i64, align 8
  %i1 = alloca i64, align 8
  %entry = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_Type_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = alloca ptr, i64 %3, align 8
  store ptr %4, ptr %old_entries, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_Type_, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx2, align 4
  store i64 %6, ptr %old_size, align 4
  %7 = load ptr, ptr %old_entries, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_Type_, ptr %8, i32 0, i32 0
  %9 = load ptr, ptr %memberidx3, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_Type_, ptr %10, i32 0, i32 1
  %11 = load i64, ptr %memberidx4, align 4
  %12 = mul i64 %11, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %9, i64 %12, i1 false)
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Map_string_Type_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Map_string_Type_, ptr %14, i32 0, i32 1
  %15 = load i64, ptr %memberidx6, align 4
  %16 = mul nuw i64 %15, 2
  store i64 %16, ptr %memberidx5, align 4
  %17 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Map_string_Type_, ptr %17, i32 0, i32 2
  store i64 0, ptr %memberidx7, align 4
  %18 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Map_string_Type_, ptr %18, i32 0, i32 0
  %19 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Map_string_Type_, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx9, align 8
  %21 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_Type_, ptr %21, i32 0, i32 1
  %22 = load i64, ptr %memberidx10, align 4
  %23 = mul i64 %22, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %24 = call ptr @realloc(ptr %20, i64 %23)
  store ptr %24, ptr %memberidx8, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %25 = load i64, ptr %i, align 4
  %26 = load ptr, ptr %this, align 8
  %memberidx11 = getelementptr inbounds %Map_string_Type_, ptr %26, i32 0, i32 1
  %27 = load i64, ptr %memberidx11, align 4
  %28 = icmp slt i64 %25, %27
  br i1 %28, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load i64, ptr %i, align 4
  %30 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %Map_string_Type_, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx12, align 8
  %32 = getelementptr inbounds ptr, ptr %31, i64 %29
  store ptr null, ptr %32, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %33 = load i64, ptr %i, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.entry13

for.entry13:                                      ; preds = %for.end
  store i64 0, ptr %i1, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.incr16, %for.entry13
  %35 = load i64, ptr %i1, align 4
  %36 = load i64, ptr %old_size, align 4
  %37 = icmp slt i64 %35, %36
  br i1 %37, label %for.body15, label %for.end17

for.body15:                                       ; preds = %for.cond14
  %38 = load i64, ptr %i1, align 4
  %39 = load ptr, ptr %old_entries, align 8
  %40 = getelementptr inbounds ptr, ptr %39, i64 %38
  %41 = load ptr, ptr %40, align 8
  store ptr %41, ptr %entry, align 8
  %42 = load ptr, ptr %entry, align 8
  %43 = icmp ne ptr %42, null
  br i1 %43, label %if.entry, label %else

for.incr16:                                       ; preds = %ifend
  %44 = load i64, ptr %i1, align 4
  %45 = add nsw i64 %44, 1
  store i64 %45, ptr %i1, align 4
  br label %for.cond14

for.end17:                                        ; preds = %for.cond14
  ret void

if.entry:                                         ; preds = %for.body15
  %46 = load ptr, ptr %this, align 8
  %47 = load ptr, ptr %entry, align 8
  %memberidx18 = getelementptr inbounds %MapEntry_string_Type_, ptr %47, i32 0, i32 0
  %48 = load ptr, ptr %memberidx18, align 8
  %49 = load ptr, ptr %entry, align 8
  %memberidx19 = getelementptr inbounds %MapEntry_string_Type_, ptr %49, i32 0, i32 1
  %50 = load ptr, ptr %memberidx19, align 8
  call void @Map_string_Type____setitem__(ptr %46, ptr %48, ptr %50)
  br label %ifend

else:                                             ; preds = %for.body15
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  br label %for.incr16
}

define ptr @Type_unknown() {
  %1 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %1, i64 21)
  ret ptr %1
}

define void @Type_constructor(ptr %0, i64 %1) {
  %kind = alloca i64, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %kind, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Type, ptr %3, i32 0, i32 0
  %4 = load i64, ptr %kind, align 4
  store i64 %4, ptr %memberidx, align 4
  ret void
}

define void @MapEntry_string_Type__constructor(ptr %0, ptr %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  store ptr %2, ptr %value, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapEntry_string_Type_, ptr %4, i32 0, i32 0
  %5 = load ptr, ptr %key, align 8
  store ptr %5, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapEntry_string_Type_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %value, align 8
  store ptr %7, ptr %memberidx1, align 8
  ret void
}

define ptr @MapIterator_string_Type__next(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapIterator_string_Type_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapIterator_string_Type_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = icmp sgt i64 %3, 0
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %1
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %MapIterator_string_Type_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %MapIterator_string_Type_, ptr %9, i32 0, i32 1
  %incdec.ptr = getelementptr inbounds ptr, ptr %8, i32 1
  store ptr %incdec.ptr, ptr %memberidx3, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %MapIterator_string_Type_, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx4, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 -1
  %13 = load ptr, ptr %12, align 8
  %14 = icmp ne ptr %13, null
  br i1 %14, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %if.entry, %1
  %15 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %MapIterator_string_Type_, ptr %15, i32 0, i32 0
  %16 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %MapIterator_string_Type_, ptr %16, i32 0, i32 3
  %17 = load i64, ptr %memberidx8, align 4
  %18 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %MapIterator_string_Type_, ptr %18, i32 0, i32 3
  %19 = add nsw i64 %17, -1
  store i64 %19, ptr %memberidx9, align 4
  %20 = icmp sle i64 %17, 0
  store i1 %20, ptr %memberidx7, align 1
  %21 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %MapIterator_string_Type_, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx10, align 8
  %23 = getelementptr inbounds ptr, ptr %22, i64 -1
  %24 = load ptr, ptr %23, align 8
  ret ptr %24

if.entry:                                         ; preds = %while.entry
  br label %while.end

else:                                             ; preds = %while.entry
  br label %ifend

ifend:                                            ; preds = %else
  %25 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %MapIterator_string_Type_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx5, align 4
  %27 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %MapIterator_string_Type_, ptr %27, i32 0, i32 2
  %28 = add nsw i64 %26, -1
  store i64 %28, ptr %memberidx6, align 4
  %29 = icmp sgt i64 %26, 0
  br i1 %29, label %while.entry, label %while.end
}

define void @MapIterator_string_Type__constructor(ptr %0, ptr %1, i64 %2, i64 %3) {
  %remaining_size = alloca i64, align 8
  %this = alloca ptr, align 8
  %entries = alloca ptr, align 8
  %items_remaining = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %entries, align 8
  store i64 %2, ptr %remaining_size, align 4
  store i64 %3, ptr %items_remaining, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapIterator_string_Type_, ptr %5, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapIterator_string_Type_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %entries, align 8
  store ptr %7, ptr %memberidx1, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %MapIterator_string_Type_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %remaining_size, align 4
  store i64 %9, ptr %memberidx2, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %MapIterator_string_Type_, ptr %10, i32 0, i32 3
  %11 = load i64, ptr %items_remaining, align 4
  store i64 %11, ptr %memberidx3, align 4
  ret void
}

define ptr @Map_string_Type____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MapIterator_string_Type_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_Type_, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_Type_, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_Type_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx2, align 4
  call void @MapIterator_string_Type__constructor(ptr %2, ptr %4, i64 %6, i64 %8)
  ret ptr %2
}

define void @Map_string_Type____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_Type_, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Map_string_Type____setitem__(ptr %0, ptr %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  %should_add = alloca i1, align 1
  %ratio = alloca double, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  store ptr %2, ptr %value, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_Type_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = sitofp i64 %5 to double
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_Type_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %memberidx1, align 4
  %9 = sitofp i64 %8 to double
  %10 = fdiv double %6, %9
  store double %10, ptr %ratio, align 8
  %11 = load double, ptr %ratio, align 8
  %12 = fcmp ogt double %11, 7.500000e-01
  br i1 %12, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %13 = load ptr, ptr %this, align 8
  call void @Map_string_Type__resize(ptr %13)
  br label %ifend

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %14 = load ptr, ptr %this, align 8
  %15 = load ptr, ptr %key, align 8
  %16 = call i64 @Map_string_Type__hash_fnc(ptr %14, ptr %15)
  %17 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_Type_, ptr %17, i32 0, i32 1
  %18 = load i64, ptr %memberidx2, align 4
  %19 = urem i64 %16, %18
  store i64 %19, ptr %hash, align 4
  store i1 true, ptr %should_add, align 1
  %20 = load i64, ptr %hash, align 4
  %21 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_Type_, ptr %21, i32 0, i32 0
  %22 = load ptr, ptr %memberidx3, align 8
  %23 = getelementptr inbounds ptr, ptr %22, i64 %20
  %24 = load ptr, ptr %23, align 8
  %25 = icmp ne ptr %24, null
  br i1 %25, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend8, %ifend
  %26 = load i64, ptr %hash, align 4
  %27 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_Type_, ptr %27, i32 0, i32 0
  %28 = load ptr, ptr %memberidx4, align 8
  %29 = getelementptr inbounds ptr, ptr %28, i64 %26
  %30 = load ptr, ptr %29, align 8
  %memberidx5 = getelementptr inbounds %MapEntry_string_Type_, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx5, align 8
  %32 = load ptr, ptr %key, align 8
  %33 = call i1 @string___eq__(ptr %31, ptr %32)
  br i1 %33, label %if.entry6, label %else7

while.end:                                        ; preds = %ifend8, %if.entry6, %ifend
  %34 = load i1, ptr %should_add, align 1
  br i1 %34, label %if.entry11, label %else12

if.entry6:                                        ; preds = %while.entry
  store i1 false, ptr %should_add, align 1
  br label %while.end

else7:                                            ; preds = %while.entry
  br label %ifend8

ifend8:                                           ; preds = %else7
  %35 = load i64, ptr %hash, align 4
  %36 = add nuw i64 %35, 1
  %37 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Map_string_Type_, ptr %37, i32 0, i32 1
  %38 = load i64, ptr %memberidx9, align 4
  %39 = urem i64 %36, %38
  store i64 %39, ptr %hash, align 4
  %40 = load i64, ptr %hash, align 4
  %41 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_Type_, ptr %41, i32 0, i32 0
  %42 = load ptr, ptr %memberidx10, align 8
  %43 = getelementptr inbounds ptr, ptr %42, i64 %40
  %44 = load ptr, ptr %43, align 8
  %45 = icmp ne ptr %44, null
  br i1 %45, label %while.entry, label %while.end

if.entry11:                                       ; preds = %while.end
  %46 = load ptr, ptr %this, align 8
  %memberidx14 = getelementptr inbounds %Map_string_Type_, ptr %46, i32 0, i32 2
  %47 = load i64, ptr %memberidx14, align 4
  %48 = load ptr, ptr %this, align 8
  %memberidx15 = getelementptr inbounds %Map_string_Type_, ptr %48, i32 0, i32 2
  %49 = add nsw i64 %47, 1
  store i64 %49, ptr %memberidx15, align 4
  br label %ifend13

else12:                                           ; preds = %while.end
  br label %ifend13

ifend13:                                          ; preds = %else12, %if.entry11
  %50 = load i64, ptr %hash, align 4
  %51 = load ptr, ptr %this, align 8
  %memberidx16 = getelementptr inbounds %Map_string_Type_, ptr %51, i32 0, i32 0
  %52 = load ptr, ptr %memberidx16, align 8
  %53 = getelementptr inbounds ptr, ptr %52, i64 %50
  %54 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MapEntry_string_Type_, ptr null, i32 1) to i32))
  %55 = load ptr, ptr %key, align 8
  %56 = load ptr, ptr %value, align 8
  call void @MapEntry_string_Type__constructor(ptr %54, ptr %55, ptr %56)
  store ptr %54, ptr %53, align 8
  ret void
}

define ptr @Map_string_Type____getitem__(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %key, align 8
  %5 = call i64 @Map_string_Type__hash_fnc(ptr %3, ptr %4)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_Type_, ptr %6, i32 0, i32 1
  %7 = load i64, ptr %memberidx, align 4
  %8 = urem i64 %5, %7
  store i64 %8, ptr %hash, align 4
  %9 = load i64, ptr %hash, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_Type_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 %9
  %13 = load ptr, ptr %12, align 8
  %14 = icmp ne ptr %13, null
  br i1 %14, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %2
  %15 = load i64, ptr %hash, align 4
  %16 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_Type_, ptr %16, i32 0, i32 0
  %17 = load ptr, ptr %memberidx2, align 8
  %18 = getelementptr inbounds ptr, ptr %17, i64 %15
  %19 = load ptr, ptr %18, align 8
  %memberidx3 = getelementptr inbounds %MapEntry_string_Type_, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx3, align 8
  %21 = load ptr, ptr %key, align 8
  %22 = call i1 @string___eq__(ptr %20, ptr %21)
  br i1 %22, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %if.entry, %2
  %23 = load i64, ptr %hash, align 4
  %24 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Map_string_Type_, ptr %24, i32 0, i32 0
  %25 = load ptr, ptr %memberidx6, align 8
  %26 = getelementptr inbounds ptr, ptr %25, i64 %23
  %27 = load ptr, ptr %26, align 8
  %28 = icmp ne ptr %27, null
  br i1 %28, label %if.entry7, label %else8

if.entry:                                         ; preds = %while.entry
  br label %while.end

else:                                             ; preds = %while.entry
  %29 = load i64, ptr %hash, align 4
  %30 = add nuw i64 %29, 1
  %31 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_Type_, ptr %31, i32 0, i32 1
  %32 = load i64, ptr %memberidx4, align 4
  %33 = urem i64 %30, %32
  store i64 %33, ptr %hash, align 4
  br label %ifend

ifend:                                            ; preds = %else
  %34 = load i64, ptr %hash, align 4
  %35 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Map_string_Type_, ptr %35, i32 0, i32 0
  %36 = load ptr, ptr %memberidx5, align 8
  %37 = getelementptr inbounds ptr, ptr %36, i64 %34
  %38 = load ptr, ptr %37, align 8
  %39 = icmp ne ptr %38, null
  br i1 %39, label %while.entry, label %while.end

if.entry7:                                        ; preds = %while.end
  %40 = load i64, ptr %hash, align 4
  %41 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_Type_, ptr %41, i32 0, i32 0
  %42 = load ptr, ptr %memberidx10, align 8
  %43 = getelementptr inbounds ptr, ptr %42, i64 %40
  %44 = load ptr, ptr %43, align 8
  %memberidx11 = getelementptr inbounds %MapEntry_string_Type_, ptr %44, i32 0, i32 1
  %45 = load ptr, ptr %memberidx11, align 8
  ret ptr %45

else8:                                            ; preds = %while.end
  br label %ifend9

ifend9:                                           ; preds = %else8
  ret ptr null
}

define i64 @Map_string_Type__hash_fnc(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  %str = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  %3 = load ptr, ptr %key, align 8
  %4 = getelementptr inbounds %string, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr %6(ptr %3)
  %8 = alloca ptr, align 8
  %9 = call i64 (ptr, ptr, ...) @asprintf(ptr %8, ptr @58, ptr %7)
  %10 = load ptr, ptr %8, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %11, ptr %10, i64 %9)
  tail call void @free(ptr %7)
  store ptr %11, ptr %str, align 8
  store i64 0, ptr %hash, align 4
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %12 = load i64, ptr %i, align 4
  %13 = load ptr, ptr %str, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx1, align 4
  %15 = icmp slt i64 %12, %14
  br i1 %15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i64, ptr %hash, align 4
  %17 = shl i64 %16, 1
  %18 = load ptr, ptr %str, align 8
  %19 = getelementptr inbounds %string, ptr %18, i32 0, i32 0
  %20 = load ptr, ptr %19, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %20, i32 0, i32 2
  %21 = load ptr, ptr %memberidx2, align 8
  %22 = load i64, ptr %i, align 4
  %23 = call i8 %21(ptr %18, i64 %22)
  %24 = zext i8 %23 to i64
  %25 = add nuw i64 %17, %24
  store i64 %25, ptr %hash, align 4
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %26 = load i64, ptr %i, align 4
  %27 = add nsw i64 %26, 1
  store i64 %27, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load ptr, ptr %str, align 8
  call void @string___del__(ptr %28)
  tail call void @free(ptr %28)
  %29 = load i64, ptr %hash, align 4
  ret i64 %29
}

define void @Map_string_Type__constructor(ptr %0) {
  %this = alloca ptr, align 8
  %initial_capacity = alloca i64, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 256, ptr %initial_capacity, align 4
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_Type_, ptr %2, i32 0, i32 0
  %3 = load i64, ptr %initial_capacity, align 4
  %4 = trunc i64 %3 to i32
  %mallocsize = mul i32 %4, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %5 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %5, ptr %memberidx, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %initial_capacity, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i64, ptr %i, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_Type_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 %9
  store ptr null, ptr %12, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %13 = load i64, ptr %i, align 4
  %14 = add nsw i64 %13, 1
  store i64 %14, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_Type_, ptr %15, i32 0, i32 1
  %16 = load i64, ptr %initial_capacity, align 4
  store i64 %16, ptr %memberidx2, align 4
  %17 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_Type_, ptr %17, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  ret void
}

define void @Map_string_ClassId__resize(ptr %0) {
  %this = alloca ptr, align 8
  %old_entries = alloca ptr, align 8
  %old_size = alloca i64, align 8
  %i = alloca i64, align 8
  %i1 = alloca i64, align 8
  %entry = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_ClassId_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = alloca ptr, i64 %3, align 8
  store ptr %4, ptr %old_entries, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_ClassId_, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx2, align 4
  store i64 %6, ptr %old_size, align 4
  %7 = load ptr, ptr %old_entries, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_ClassId_, ptr %8, i32 0, i32 0
  %9 = load ptr, ptr %memberidx3, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_ClassId_, ptr %10, i32 0, i32 1
  %11 = load i64, ptr %memberidx4, align 4
  %12 = mul i64 %11, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %9, i64 %12, i1 false)
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Map_string_ClassId_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Map_string_ClassId_, ptr %14, i32 0, i32 1
  %15 = load i64, ptr %memberidx6, align 4
  %16 = mul nuw i64 %15, 2
  store i64 %16, ptr %memberidx5, align 4
  %17 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Map_string_ClassId_, ptr %17, i32 0, i32 2
  store i64 0, ptr %memberidx7, align 4
  %18 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Map_string_ClassId_, ptr %18, i32 0, i32 0
  %19 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Map_string_ClassId_, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx9, align 8
  %21 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_ClassId_, ptr %21, i32 0, i32 1
  %22 = load i64, ptr %memberidx10, align 4
  %23 = mul i64 %22, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %24 = call ptr @realloc(ptr %20, i64 %23)
  store ptr %24, ptr %memberidx8, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %25 = load i64, ptr %i, align 4
  %26 = load ptr, ptr %this, align 8
  %memberidx11 = getelementptr inbounds %Map_string_ClassId_, ptr %26, i32 0, i32 1
  %27 = load i64, ptr %memberidx11, align 4
  %28 = icmp slt i64 %25, %27
  br i1 %28, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load i64, ptr %i, align 4
  %30 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %Map_string_ClassId_, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx12, align 8
  %32 = getelementptr inbounds ptr, ptr %31, i64 %29
  store ptr null, ptr %32, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %33 = load i64, ptr %i, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.entry13

for.entry13:                                      ; preds = %for.end
  store i64 0, ptr %i1, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.incr16, %for.entry13
  %35 = load i64, ptr %i1, align 4
  %36 = load i64, ptr %old_size, align 4
  %37 = icmp slt i64 %35, %36
  br i1 %37, label %for.body15, label %for.end17

for.body15:                                       ; preds = %for.cond14
  %38 = load i64, ptr %i1, align 4
  %39 = load ptr, ptr %old_entries, align 8
  %40 = getelementptr inbounds ptr, ptr %39, i64 %38
  %41 = load ptr, ptr %40, align 8
  store ptr %41, ptr %entry, align 8
  %42 = load ptr, ptr %entry, align 8
  %43 = icmp ne ptr %42, null
  br i1 %43, label %if.entry, label %else

for.incr16:                                       ; preds = %ifend
  %44 = load i64, ptr %i1, align 4
  %45 = add nsw i64 %44, 1
  store i64 %45, ptr %i1, align 4
  br label %for.cond14

for.end17:                                        ; preds = %for.cond14
  ret void

if.entry:                                         ; preds = %for.body15
  %46 = load ptr, ptr %this, align 8
  %47 = load ptr, ptr %entry, align 8
  %memberidx18 = getelementptr inbounds %MapEntry_string_ClassId_, ptr %47, i32 0, i32 0
  %48 = load ptr, ptr %memberidx18, align 8
  %49 = load ptr, ptr %entry, align 8
  %memberidx19 = getelementptr inbounds %MapEntry_string_ClassId_, ptr %49, i32 0, i32 1
  %50 = load ptr, ptr %memberidx19, align 8
  call void @Map_string_ClassId____setitem__(ptr %46, ptr %48, ptr %50)
  br label %ifend

else:                                             ; preds = %for.body15
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  br label %for.incr16
}

define void @ClassId_constructor(ptr %0, i64 %1, i64 %2) {
  %id = alloca i64, align 8
  %this = alloca ptr, align 8
  %module_id = alloca i64, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @TypeId_constructor, ptr %super, align 8
  store i64 %1, ptr %module_id, align 4
  store i64 %2, ptr %id, align 4
  %4 = load ptr, ptr %super, align 8
  %5 = load i64, ptr %module_id, align 4
  %6 = load i64, ptr %id, align 4
  call void %4(ptr %0, i64 %5, i64 0, i64 %6)
  ret void
}

define void @MapEntry_string_ClassId__constructor(ptr %0, ptr %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  store ptr %2, ptr %value, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapEntry_string_ClassId_, ptr %4, i32 0, i32 0
  %5 = load ptr, ptr %key, align 8
  store ptr %5, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapEntry_string_ClassId_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %value, align 8
  store ptr %7, ptr %memberidx1, align 8
  ret void
}

define ptr @MapIterator_string_ClassId__next(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapIterator_string_ClassId_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapIterator_string_ClassId_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = icmp sgt i64 %3, 0
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %1
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %MapIterator_string_ClassId_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %MapIterator_string_ClassId_, ptr %9, i32 0, i32 1
  %incdec.ptr = getelementptr inbounds ptr, ptr %8, i32 1
  store ptr %incdec.ptr, ptr %memberidx3, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %MapIterator_string_ClassId_, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx4, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 -1
  %13 = load ptr, ptr %12, align 8
  %14 = icmp ne ptr %13, null
  br i1 %14, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %if.entry, %1
  %15 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %MapIterator_string_ClassId_, ptr %15, i32 0, i32 0
  %16 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %MapIterator_string_ClassId_, ptr %16, i32 0, i32 3
  %17 = load i64, ptr %memberidx8, align 4
  %18 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %MapIterator_string_ClassId_, ptr %18, i32 0, i32 3
  %19 = add nsw i64 %17, -1
  store i64 %19, ptr %memberidx9, align 4
  %20 = icmp sle i64 %17, 0
  store i1 %20, ptr %memberidx7, align 1
  %21 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %MapIterator_string_ClassId_, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx10, align 8
  %23 = getelementptr inbounds ptr, ptr %22, i64 -1
  %24 = load ptr, ptr %23, align 8
  ret ptr %24

if.entry:                                         ; preds = %while.entry
  br label %while.end

else:                                             ; preds = %while.entry
  br label %ifend

ifend:                                            ; preds = %else
  %25 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %MapIterator_string_ClassId_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx5, align 4
  %27 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %MapIterator_string_ClassId_, ptr %27, i32 0, i32 2
  %28 = add nsw i64 %26, -1
  store i64 %28, ptr %memberidx6, align 4
  %29 = icmp sgt i64 %26, 0
  br i1 %29, label %while.entry, label %while.end
}

define void @MapIterator_string_ClassId__constructor(ptr %0, ptr %1, i64 %2, i64 %3) {
  %remaining_size = alloca i64, align 8
  %this = alloca ptr, align 8
  %entries = alloca ptr, align 8
  %items_remaining = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %entries, align 8
  store i64 %2, ptr %remaining_size, align 4
  store i64 %3, ptr %items_remaining, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapIterator_string_ClassId_, ptr %5, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapIterator_string_ClassId_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %entries, align 8
  store ptr %7, ptr %memberidx1, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %MapIterator_string_ClassId_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %remaining_size, align 4
  store i64 %9, ptr %memberidx2, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %MapIterator_string_ClassId_, ptr %10, i32 0, i32 3
  %11 = load i64, ptr %items_remaining, align 4
  store i64 %11, ptr %memberidx3, align 4
  ret void
}

define ptr @Map_string_ClassId____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MapIterator_string_ClassId_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_ClassId_, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_ClassId_, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_ClassId_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx2, align 4
  call void @MapIterator_string_ClassId__constructor(ptr %2, ptr %4, i64 %6, i64 %8)
  ret ptr %2
}

define void @Map_string_ClassId____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_ClassId_, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Map_string_ClassId____setitem__(ptr %0, ptr %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  %should_add = alloca i1, align 1
  %ratio = alloca double, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  store ptr %2, ptr %value, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_ClassId_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = sitofp i64 %5 to double
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_ClassId_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %memberidx1, align 4
  %9 = sitofp i64 %8 to double
  %10 = fdiv double %6, %9
  store double %10, ptr %ratio, align 8
  %11 = load double, ptr %ratio, align 8
  %12 = fcmp ogt double %11, 7.500000e-01
  br i1 %12, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %13 = load ptr, ptr %this, align 8
  call void @Map_string_ClassId__resize(ptr %13)
  br label %ifend

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %14 = load ptr, ptr %this, align 8
  %15 = load ptr, ptr %key, align 8
  %16 = call i64 @Map_string_ClassId__hash_fnc(ptr %14, ptr %15)
  %17 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_ClassId_, ptr %17, i32 0, i32 1
  %18 = load i64, ptr %memberidx2, align 4
  %19 = urem i64 %16, %18
  store i64 %19, ptr %hash, align 4
  store i1 true, ptr %should_add, align 1
  %20 = load i64, ptr %hash, align 4
  %21 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_ClassId_, ptr %21, i32 0, i32 0
  %22 = load ptr, ptr %memberidx3, align 8
  %23 = getelementptr inbounds ptr, ptr %22, i64 %20
  %24 = load ptr, ptr %23, align 8
  %25 = icmp ne ptr %24, null
  br i1 %25, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend8, %ifend
  %26 = load i64, ptr %hash, align 4
  %27 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_ClassId_, ptr %27, i32 0, i32 0
  %28 = load ptr, ptr %memberidx4, align 8
  %29 = getelementptr inbounds ptr, ptr %28, i64 %26
  %30 = load ptr, ptr %29, align 8
  %memberidx5 = getelementptr inbounds %MapEntry_string_ClassId_, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx5, align 8
  %32 = load ptr, ptr %key, align 8
  %33 = call i1 @string___eq__(ptr %31, ptr %32)
  br i1 %33, label %if.entry6, label %else7

while.end:                                        ; preds = %ifend8, %if.entry6, %ifend
  %34 = load i1, ptr %should_add, align 1
  br i1 %34, label %if.entry11, label %else12

if.entry6:                                        ; preds = %while.entry
  store i1 false, ptr %should_add, align 1
  br label %while.end

else7:                                            ; preds = %while.entry
  br label %ifend8

ifend8:                                           ; preds = %else7
  %35 = load i64, ptr %hash, align 4
  %36 = add nuw i64 %35, 1
  %37 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Map_string_ClassId_, ptr %37, i32 0, i32 1
  %38 = load i64, ptr %memberidx9, align 4
  %39 = urem i64 %36, %38
  store i64 %39, ptr %hash, align 4
  %40 = load i64, ptr %hash, align 4
  %41 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_ClassId_, ptr %41, i32 0, i32 0
  %42 = load ptr, ptr %memberidx10, align 8
  %43 = getelementptr inbounds ptr, ptr %42, i64 %40
  %44 = load ptr, ptr %43, align 8
  %45 = icmp ne ptr %44, null
  br i1 %45, label %while.entry, label %while.end

if.entry11:                                       ; preds = %while.end
  %46 = load ptr, ptr %this, align 8
  %memberidx14 = getelementptr inbounds %Map_string_ClassId_, ptr %46, i32 0, i32 2
  %47 = load i64, ptr %memberidx14, align 4
  %48 = load ptr, ptr %this, align 8
  %memberidx15 = getelementptr inbounds %Map_string_ClassId_, ptr %48, i32 0, i32 2
  %49 = add nsw i64 %47, 1
  store i64 %49, ptr %memberidx15, align 4
  br label %ifend13

else12:                                           ; preds = %while.end
  br label %ifend13

ifend13:                                          ; preds = %else12, %if.entry11
  %50 = load i64, ptr %hash, align 4
  %51 = load ptr, ptr %this, align 8
  %memberidx16 = getelementptr inbounds %Map_string_ClassId_, ptr %51, i32 0, i32 0
  %52 = load ptr, ptr %memberidx16, align 8
  %53 = getelementptr inbounds ptr, ptr %52, i64 %50
  %54 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MapEntry_string_ClassId_, ptr null, i32 1) to i32))
  %55 = load ptr, ptr %key, align 8
  %56 = load ptr, ptr %value, align 8
  call void @MapEntry_string_ClassId__constructor(ptr %54, ptr %55, ptr %56)
  store ptr %54, ptr %53, align 8
  ret void
}

define ptr @Map_string_ClassId____getitem__(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %key, align 8
  %5 = call i64 @Map_string_ClassId__hash_fnc(ptr %3, ptr %4)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_ClassId_, ptr %6, i32 0, i32 1
  %7 = load i64, ptr %memberidx, align 4
  %8 = urem i64 %5, %7
  store i64 %8, ptr %hash, align 4
  %9 = load i64, ptr %hash, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_ClassId_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 %9
  %13 = load ptr, ptr %12, align 8
  %14 = icmp ne ptr %13, null
  br i1 %14, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %2
  %15 = load i64, ptr %hash, align 4
  %16 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_ClassId_, ptr %16, i32 0, i32 0
  %17 = load ptr, ptr %memberidx2, align 8
  %18 = getelementptr inbounds ptr, ptr %17, i64 %15
  %19 = load ptr, ptr %18, align 8
  %memberidx3 = getelementptr inbounds %MapEntry_string_ClassId_, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx3, align 8
  %21 = load ptr, ptr %key, align 8
  %22 = call i1 @string___eq__(ptr %20, ptr %21)
  br i1 %22, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %if.entry, %2
  %23 = load i64, ptr %hash, align 4
  %24 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Map_string_ClassId_, ptr %24, i32 0, i32 0
  %25 = load ptr, ptr %memberidx6, align 8
  %26 = getelementptr inbounds ptr, ptr %25, i64 %23
  %27 = load ptr, ptr %26, align 8
  %28 = icmp ne ptr %27, null
  br i1 %28, label %if.entry7, label %else8

if.entry:                                         ; preds = %while.entry
  br label %while.end

else:                                             ; preds = %while.entry
  %29 = load i64, ptr %hash, align 4
  %30 = add nuw i64 %29, 1
  %31 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_ClassId_, ptr %31, i32 0, i32 1
  %32 = load i64, ptr %memberidx4, align 4
  %33 = urem i64 %30, %32
  store i64 %33, ptr %hash, align 4
  br label %ifend

ifend:                                            ; preds = %else
  %34 = load i64, ptr %hash, align 4
  %35 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Map_string_ClassId_, ptr %35, i32 0, i32 0
  %36 = load ptr, ptr %memberidx5, align 8
  %37 = getelementptr inbounds ptr, ptr %36, i64 %34
  %38 = load ptr, ptr %37, align 8
  %39 = icmp ne ptr %38, null
  br i1 %39, label %while.entry, label %while.end

if.entry7:                                        ; preds = %while.end
  %40 = load i64, ptr %hash, align 4
  %41 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_ClassId_, ptr %41, i32 0, i32 0
  %42 = load ptr, ptr %memberidx10, align 8
  %43 = getelementptr inbounds ptr, ptr %42, i64 %40
  %44 = load ptr, ptr %43, align 8
  %memberidx11 = getelementptr inbounds %MapEntry_string_ClassId_, ptr %44, i32 0, i32 1
  %45 = load ptr, ptr %memberidx11, align 8
  ret ptr %45

else8:                                            ; preds = %while.end
  br label %ifend9

ifend9:                                           ; preds = %else8
  ret ptr null
}

define i64 @Map_string_ClassId__hash_fnc(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  %str = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  %3 = load ptr, ptr %key, align 8
  %4 = getelementptr inbounds %string, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr %6(ptr %3)
  %8 = alloca ptr, align 8
  %9 = call i64 (ptr, ptr, ...) @asprintf(ptr %8, ptr @58, ptr %7)
  %10 = load ptr, ptr %8, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %11, ptr %10, i64 %9)
  tail call void @free(ptr %7)
  store ptr %11, ptr %str, align 8
  store i64 0, ptr %hash, align 4
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %12 = load i64, ptr %i, align 4
  %13 = load ptr, ptr %str, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx1, align 4
  %15 = icmp slt i64 %12, %14
  br i1 %15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i64, ptr %hash, align 4
  %17 = shl i64 %16, 1
  %18 = load ptr, ptr %str, align 8
  %19 = getelementptr inbounds %string, ptr %18, i32 0, i32 0
  %20 = load ptr, ptr %19, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %20, i32 0, i32 2
  %21 = load ptr, ptr %memberidx2, align 8
  %22 = load i64, ptr %i, align 4
  %23 = call i8 %21(ptr %18, i64 %22)
  %24 = zext i8 %23 to i64
  %25 = add nuw i64 %17, %24
  store i64 %25, ptr %hash, align 4
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %26 = load i64, ptr %i, align 4
  %27 = add nsw i64 %26, 1
  store i64 %27, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load ptr, ptr %str, align 8
  call void @string___del__(ptr %28)
  tail call void @free(ptr %28)
  %29 = load i64, ptr %hash, align 4
  ret i64 %29
}

define void @Map_string_ClassId__constructor(ptr %0) {
  %this = alloca ptr, align 8
  %initial_capacity = alloca i64, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 256, ptr %initial_capacity, align 4
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_ClassId_, ptr %2, i32 0, i32 0
  %3 = load i64, ptr %initial_capacity, align 4
  %4 = trunc i64 %3 to i32
  %mallocsize = mul i32 %4, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %5 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %5, ptr %memberidx, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %initial_capacity, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i64, ptr %i, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_ClassId_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 %9
  store ptr null, ptr %12, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %13 = load i64, ptr %i, align 4
  %14 = add nsw i64 %13, 1
  store i64 %14, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_ClassId_, ptr %15, i32 0, i32 1
  %16 = load i64, ptr %initial_capacity, align 4
  store i64 %16, ptr %memberidx2, align 4
  %17 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_ClassId_, ptr %17, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  ret void
}

define void @Scope_constructor(ptr %0, i64 %1, i64 %2) {
  %id = alloca i64, align 8
  %this = alloca ptr, align 8
  %module_id = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %module_id, align 4
  store i64 %2, ptr %id, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Scope, ptr %4, i32 0, i32 0
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ScopeId, ptr null, i32 1) to i32))
  %6 = load i64, ptr %module_id, align 4
  %7 = load i64, ptr %id, align 4
  call void @ScopeId_constructor(ptr %5, i64 %6, i64 %7)
  store ptr %5, ptr %memberidx, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Scope, ptr %8, i32 0, i32 1
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_VarId_, ptr null, i32 1) to i32))
  call void @Map_string_VarId__constructor(ptr %9)
  store ptr %9, ptr %memberidx1, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Scope, ptr %10, i32 0, i32 2
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_ClassId_, ptr null, i32 1) to i32))
  call void @Map_string_ClassId__constructor(ptr %11)
  store ptr %11, ptr %memberidx2, align 8
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Scope, ptr %12, i32 0, i32 3
  %13 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_VarId_, ptr null, i32 1) to i32))
  call void @Map_string_VarId__constructor(ptr %13)
  store ptr %13, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Scope, ptr %14, i32 0, i32 4
  %15 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_EnumId_, ptr null, i32 1) to i32))
  call void @Map_string_EnumId__constructor(ptr %15)
  store ptr %15, ptr %memberidx4, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Scope, ptr %16, i32 0, i32 6
  %17 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_Type_, ptr null, i32 1) to i32))
  call void @Map_string_Type__constructor(ptr %17)
  store ptr %17, ptr %memberidx5, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Scope, ptr %18, i32 0, i32 5
  store ptr null, ptr %memberidx6, align 8
  %19 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Scope, ptr %19, i32 0, i32 7
  %20 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ScopeId_, ptr null, i32 1) to i32))
  call void @Array_ScopeId__constructor(ptr %20, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx8 = getelementptr inbounds %Array_ScopeId_, ptr %20, i32 0, i32 1
  %21 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Array_ScopeId_, ptr %20, i32 0, i32 2
  store i64 0, ptr %memberidx9, align 4
  store ptr %20, ptr %memberidx7, align 8
  ret void
}

define ptr @Array_Scope__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Scope_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Scope_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_Scope__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Scope_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_Scope__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Scope_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Scope_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Scope_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Scope_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_Scope____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Scope_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_Scope__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Scope_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Scope_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Scope_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_Scope____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_Scope_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Scope_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_Scope_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Scope_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Scope_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_Scope_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_Scope_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_Scope_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_Scope_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_Scope_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_Scope____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Scope_, ptr null, i32 1) to i32))
  call void @Array_Scope__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_Scope_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_Scope_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Scope_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_Scope_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_Scope_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_Scope_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_Scope_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_Scope_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_Scope_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_Scope____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_Scope____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_Scope____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_Scope__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Scope_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Scope_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Scope_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Scope_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_Scope_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_Scope_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_Scope__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Scope_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Scope_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Scope_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Scope_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_Scope____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_Scope_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Scope_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_Scope__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_Scope____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_Scope____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_Scope____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_Scope____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_Scope_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Scope_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_Scope____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_Scope____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_Scope____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_Scope_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_Scope__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_Scope__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Scope_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_Scope__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_Scope_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Scope_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Scope_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @VarDeclaration_constructor(ptr %0, ptr %1, ptr %2) {
  %var_id = alloca ptr, align 8
  %name = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Statement_constructor, ptr %super, align 8
  store ptr %1, ptr %name, align 8
  store ptr %2, ptr %var_id, align 8
  %4 = load ptr, ptr %super, align 8
  call void %4(ptr %0, i64 1)
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %VarDeclaration, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %var_id, align 8
  store ptr %6, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %VarDeclaration, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %name, align 8
  store ptr %8, ptr %memberidx1, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %VarDeclaration, ptr %9, i32 0, i32 3
  store i1 false, ptr %memberidx2, align 1
  ret void
}

define void @Statement_constructor(ptr %0, i64 %1) {
  %kind = alloca i64, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %kind, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Statement, ptr %3, i32 0, i32 0
  %4 = load i64, ptr %kind, align 4
  store i64 %4, ptr %memberidx, align 4
  ret void
}

define ptr @Array_VarDeclaration__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_VarDeclaration_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_VarDeclaration_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_VarDeclaration__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_VarDeclaration_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_VarDeclaration__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_VarDeclaration_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_VarDeclaration_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_VarDeclaration_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_VarDeclaration_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_VarDeclaration____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_VarDeclaration_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_VarDeclaration__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_VarDeclaration_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_VarDeclaration_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_VarDeclaration_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_VarDeclaration____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_VarDeclaration_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_VarDeclaration_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_VarDeclaration_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_VarDeclaration_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_VarDeclaration_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_VarDeclaration_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_VarDeclaration_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_VarDeclaration_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_VarDeclaration_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_VarDeclaration_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_VarDeclaration____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_VarDeclaration_, ptr null, i32 1) to i32))
  call void @Array_VarDeclaration__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_VarDeclaration_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_VarDeclaration_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_VarDeclaration_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_VarDeclaration_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_VarDeclaration_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_VarDeclaration_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_VarDeclaration_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_VarDeclaration_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_VarDeclaration_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_VarDeclaration____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_VarDeclaration____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_VarDeclaration____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_VarDeclaration__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_VarDeclaration__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_VarDeclaration____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_VarDeclaration_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_VarDeclaration_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_VarDeclaration__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_VarDeclaration____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_VarDeclaration____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_VarDeclaration____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_VarDeclaration____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_VarDeclaration_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_VarDeclaration_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_VarDeclaration____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_VarDeclaration____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_VarDeclaration____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_VarDeclaration_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_VarDeclaration__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_VarDeclaration__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_VarDeclaration_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_VarDeclaration__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_VarDeclaration_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_VarDeclaration_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_VarDeclaration_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @Expression_constructor(ptr %0, i64 %1) {
  %expr_kind = alloca i64, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Statement_constructor, ptr %super, align 8
  store i64 %1, ptr %expr_kind, align 4
  %3 = load ptr, ptr %super, align 8
  call void %3(ptr %0, i64 8)
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %expr_kind, align 4
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %6, i32 0, i32 1
  store i1 false, ptr %memberidx1, align 1
  ret void
}

define void @Var_constructor(ptr %0, ptr %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %value_type = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %value, align 8
  store ptr %2, ptr %value_type, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Var, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %value, align 8
  store ptr %5, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Value, ptr %6, i32 0, i32 0
  %7 = load ptr, ptr %value_type, align 8
  store ptr %7, ptr %memberidx1, align 8
  ret void
}

define ptr @Array_Var__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Var_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Var_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Var_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_Var__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Var_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Var_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_Var__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Var_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Var_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Var_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Var_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Var_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_Var____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Var_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Var_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_Var__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Var_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Var_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Var_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_Var____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_Var_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Var_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_Var_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Var_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Var_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_Var_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_Var_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_Var_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_Var_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_Var_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_Var____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Var_, ptr null, i32 1) to i32))
  call void @Array_Var__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Var_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_Var_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_Var_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Var_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_Var_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_Var_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_Var_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_Var_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_Var_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_Var_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_Var____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_Var____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_Var____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_Var__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Var_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Var_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Var_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Var_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_Var_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_Var_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_Var__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Var_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Var_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Var_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Var_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_Var____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_Var_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Var_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Var_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_Var__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_Var____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Var_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_Var____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Var_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_Var____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Var_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_Var____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Var_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_Var_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Var_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_Var____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_Var____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_Var____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_Var_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_Var__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Var_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_Var__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Var_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_Var__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_Var_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Var_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Var_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Var_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @ConstId_constructor(ptr %0, i64 %1, i64 %2) {
  %id = alloca i64, align 8
  %this = alloca ptr, align 8
  %module_id = alloca i64, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @VarId_constructor, ptr %super, align 8
  store i64 %1, ptr %module_id, align 4
  store i64 %2, ptr %id, align 4
  %4 = load ptr, ptr %super, align 8
  %5 = load i64, ptr %module_id, align 4
  %6 = load i64, ptr %id, align 4
  call void %4(ptr %0, i64 2, i64 %5, i64 %6)
  ret void
}

define void @ConstDeclaration_constructor(ptr %0, ptr %1, ptr %2) {
  %name = alloca ptr, align 8
  %const_id = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Statement_constructor, ptr %super, align 8
  store ptr %1, ptr %name, align 8
  store ptr %2, ptr %const_id, align 8
  %4 = load ptr, ptr %super, align 8
  call void %4(ptr %0, i64 2)
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ConstDeclaration, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %const_id, align 8
  store ptr %6, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ConstDeclaration, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %name, align 8
  store ptr %8, ptr %memberidx1, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ConstDeclaration, ptr %9, i32 0, i32 3
  store i1 false, ptr %memberidx2, align 1
  ret void
}

define ptr @Array_ConstDeclaration__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ConstDeclaration_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ConstDeclaration_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_ConstDeclaration__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ConstDeclaration_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_ConstDeclaration__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ConstDeclaration_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ConstDeclaration_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ConstDeclaration_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ConstDeclaration_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_ConstDeclaration____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ConstDeclaration_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_ConstDeclaration__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ConstDeclaration_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ConstDeclaration_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ConstDeclaration_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_ConstDeclaration____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_ConstDeclaration_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ConstDeclaration_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_ConstDeclaration_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ConstDeclaration_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ConstDeclaration_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_ConstDeclaration_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_ConstDeclaration_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_ConstDeclaration_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_ConstDeclaration_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_ConstDeclaration_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_ConstDeclaration____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ConstDeclaration_, ptr null, i32 1) to i32))
  call void @Array_ConstDeclaration__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_ConstDeclaration_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_ConstDeclaration_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ConstDeclaration_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_ConstDeclaration_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_ConstDeclaration_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_ConstDeclaration_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_ConstDeclaration_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_ConstDeclaration_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_ConstDeclaration_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_ConstDeclaration____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_ConstDeclaration____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_ConstDeclaration____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_ConstDeclaration__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_ConstDeclaration__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_ConstDeclaration____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_ConstDeclaration_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ConstDeclaration_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_ConstDeclaration__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_ConstDeclaration____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_ConstDeclaration____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_ConstDeclaration____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_ConstDeclaration____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_ConstDeclaration_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ConstDeclaration_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_ConstDeclaration____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_ConstDeclaration____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_ConstDeclaration____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_ConstDeclaration_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_ConstDeclaration__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_ConstDeclaration__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ConstDeclaration_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_ConstDeclaration__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_ConstDeclaration_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ConstDeclaration_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ConstDeclaration_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @Module___del__(ptr %0) {
  %this = alloca ptr, align 8
  %func = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %var = alloca ptr, align 8
  %tmp_it1 = alloca ptr, align 8
  %tmp_it2 = alloca ptr, align 8
  %mod_class = alloca ptr, align 8
  %tmp_it3 = alloca ptr, align 8
  %mod_enum = alloca ptr, align 8
  %global_const = alloca ptr, align 8
  %tmp_it4 = alloca ptr, align 8
  %tmp_it5 = alloca ptr, align 8
  %global_var = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Module, ptr %2, i32 0, i32 4
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr @Array_Function____iter__(ptr %3)
  store ptr %4, ptr %tmp_it, align 8
  %5 = load ptr, ptr %tmp_it, align 8
  %6 = call ptr @ArrayIterator_Function__next(ptr %5)
  store ptr %6, ptr %func, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %7 = load ptr, ptr %tmp_it, align 8
  %memberidx6 = getelementptr inbounds %ArrayIterator_Function_, ptr %7, i32 0, i32 0
  %8 = load i1, ptr %memberidx6, align 1
  %9 = xor i1 %8, true
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load ptr, ptr %func, align 8
  tail call void @free(ptr %10)
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %11 = load ptr, ptr %tmp_it, align 8
  %12 = call ptr @ArrayIterator_Function__next(ptr %11)
  store ptr %12, ptr %func, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %13)
  br label %for.entry7

for.entry7:                                       ; preds = %for.end
  %14 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Module, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx8, align 8
  %16 = call ptr @Array_Var____iter__(ptr %15)
  store ptr %16, ptr %tmp_it1, align 8
  %17 = load ptr, ptr %tmp_it1, align 8
  %18 = call ptr @ArrayIterator_Var__next(ptr %17)
  store ptr %18, ptr %var, align 8
  br label %for.cond9

for.cond9:                                        ; preds = %for.incr11, %for.entry7
  %19 = load ptr, ptr %tmp_it1, align 8
  %memberidx13 = getelementptr inbounds %ArrayIterator_Var_, ptr %19, i32 0, i32 0
  %20 = load i1, ptr %memberidx13, align 1
  %21 = xor i1 %20, true
  br i1 %21, label %for.body10, label %for.end12

for.body10:                                       ; preds = %for.cond9
  %22 = load ptr, ptr %var, align 8
  tail call void @free(ptr %22)
  br label %for.incr11

for.incr11:                                       ; preds = %for.body10
  %23 = load ptr, ptr %tmp_it1, align 8
  %24 = call ptr @ArrayIterator_Var__next(ptr %23)
  store ptr %24, ptr %var, align 8
  br label %for.cond9

for.end12:                                        ; preds = %for.cond9
  %25 = load ptr, ptr %tmp_it1, align 8
  tail call void @free(ptr %25)
  br label %for.entry14

for.entry14:                                      ; preds = %for.end12
  %26 = load ptr, ptr %this, align 8
  %memberidx15 = getelementptr inbounds %Module, ptr %26, i32 0, i32 3
  %27 = load ptr, ptr %memberidx15, align 8
  %28 = call ptr @Array_Class____iter__(ptr %27)
  store ptr %28, ptr %tmp_it2, align 8
  %29 = load ptr, ptr %tmp_it2, align 8
  %30 = call ptr @ArrayIterator_Class__next(ptr %29)
  store ptr %30, ptr %mod_class, align 8
  br label %for.cond16

for.cond16:                                       ; preds = %for.incr18, %for.entry14
  %31 = load ptr, ptr %tmp_it2, align 8
  %memberidx20 = getelementptr inbounds %ArrayIterator_Class_, ptr %31, i32 0, i32 0
  %32 = load i1, ptr %memberidx20, align 1
  %33 = xor i1 %32, true
  br i1 %33, label %for.body17, label %for.end19

for.body17:                                       ; preds = %for.cond16
  %34 = load ptr, ptr %mod_class, align 8
  call void @Class___del__(ptr %34)
  tail call void @free(ptr %34)
  br label %for.incr18

for.incr18:                                       ; preds = %for.body17
  %35 = load ptr, ptr %tmp_it2, align 8
  %36 = call ptr @ArrayIterator_Class__next(ptr %35)
  store ptr %36, ptr %mod_class, align 8
  br label %for.cond16

for.end19:                                        ; preds = %for.cond16
  %37 = load ptr, ptr %tmp_it2, align 8
  tail call void @free(ptr %37)
  br label %for.entry21

for.entry21:                                      ; preds = %for.end19
  %38 = load ptr, ptr %this, align 8
  %memberidx22 = getelementptr inbounds %Module, ptr %38, i32 0, i32 6
  %39 = load ptr, ptr %memberidx22, align 8
  %40 = call ptr @Array_Enum____iter__(ptr %39)
  store ptr %40, ptr %tmp_it3, align 8
  %41 = load ptr, ptr %tmp_it3, align 8
  %42 = call ptr @ArrayIterator_Enum__next(ptr %41)
  store ptr %42, ptr %mod_enum, align 8
  br label %for.cond23

for.cond23:                                       ; preds = %for.incr25, %for.entry21
  %43 = load ptr, ptr %tmp_it3, align 8
  %memberidx27 = getelementptr inbounds %ArrayIterator_Enum_, ptr %43, i32 0, i32 0
  %44 = load i1, ptr %memberidx27, align 1
  %45 = xor i1 %44, true
  br i1 %45, label %for.body24, label %for.end26

for.body24:                                       ; preds = %for.cond23
  %46 = load ptr, ptr %mod_enum, align 8
  call void @Enum___del__(ptr %46)
  tail call void @free(ptr %46)
  br label %for.incr25

for.incr25:                                       ; preds = %for.body24
  %47 = load ptr, ptr %tmp_it3, align 8
  %48 = call ptr @ArrayIterator_Enum__next(ptr %47)
  store ptr %48, ptr %mod_enum, align 8
  br label %for.cond23

for.end26:                                        ; preds = %for.cond23
  %49 = load ptr, ptr %tmp_it3, align 8
  tail call void @free(ptr %49)
  br label %for.entry28

for.entry28:                                      ; preds = %for.end26
  %50 = load ptr, ptr %this, align 8
  %memberidx29 = getelementptr inbounds %Module, ptr %50, i32 0, i32 8
  %51 = load ptr, ptr %memberidx29, align 8
  %52 = call ptr @Array_ConstDeclaration____iter__(ptr %51)
  store ptr %52, ptr %tmp_it4, align 8
  %53 = load ptr, ptr %tmp_it4, align 8
  %54 = call ptr @ArrayIterator_ConstDeclaration__next(ptr %53)
  store ptr %54, ptr %global_const, align 8
  br label %for.cond30

for.cond30:                                       ; preds = %for.incr32, %for.entry28
  %55 = load ptr, ptr %tmp_it4, align 8
  %memberidx34 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %55, i32 0, i32 0
  %56 = load i1, ptr %memberidx34, align 1
  %57 = xor i1 %56, true
  br i1 %57, label %for.body31, label %for.end33

for.body31:                                       ; preds = %for.cond30
  %58 = load ptr, ptr %global_const, align 8
  tail call void @free(ptr %58)
  br label %for.incr32

for.incr32:                                       ; preds = %for.body31
  %59 = load ptr, ptr %tmp_it4, align 8
  %60 = call ptr @ArrayIterator_ConstDeclaration__next(ptr %59)
  store ptr %60, ptr %global_const, align 8
  br label %for.cond30

for.end33:                                        ; preds = %for.cond30
  %61 = load ptr, ptr %tmp_it4, align 8
  tail call void @free(ptr %61)
  br label %for.entry35

for.entry35:                                      ; preds = %for.end33
  %62 = load ptr, ptr %this, align 8
  %memberidx36 = getelementptr inbounds %Module, ptr %62, i32 0, i32 9
  %63 = load ptr, ptr %memberidx36, align 8
  %64 = call ptr @Array_VarDeclaration____iter__(ptr %63)
  store ptr %64, ptr %tmp_it5, align 8
  %65 = load ptr, ptr %tmp_it5, align 8
  %66 = call ptr @ArrayIterator_VarDeclaration__next(ptr %65)
  store ptr %66, ptr %global_var, align 8
  br label %for.cond37

for.cond37:                                       ; preds = %for.incr39, %for.entry35
  %67 = load ptr, ptr %tmp_it5, align 8
  %memberidx41 = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %67, i32 0, i32 0
  %68 = load i1, ptr %memberidx41, align 1
  %69 = xor i1 %68, true
  br i1 %69, label %for.body38, label %for.end40

for.body38:                                       ; preds = %for.cond37
  %70 = load ptr, ptr %global_var, align 8
  tail call void @free(ptr %70)
  br label %for.incr39

for.incr39:                                       ; preds = %for.body38
  %71 = load ptr, ptr %tmp_it5, align 8
  %72 = call ptr @ArrayIterator_VarDeclaration__next(ptr %71)
  store ptr %72, ptr %global_var, align 8
  br label %for.cond37

for.end40:                                        ; preds = %for.cond37
  %73 = load ptr, ptr %tmp_it5, align 8
  tail call void @free(ptr %73)
  %74 = load ptr, ptr %this, align 8
  %memberidx42 = getelementptr inbounds %Module, ptr %74, i32 0, i32 7
  %75 = load ptr, ptr %memberidx42, align 8
  %76 = load ptr, ptr %this, align 8
  %memberidx43 = getelementptr inbounds %Module, ptr %76, i32 0, i32 5
  %77 = load ptr, ptr %memberidx43, align 8
  %memberidx44 = getelementptr inbounds %ScopeId, ptr %77, i32 0, i32 1
  %78 = load i64, ptr %memberidx44, align 4
  %79 = call ptr @Array_Scope____getitem__(ptr %75, i64 %78)
  call void @Scope___del__(ptr %79)
  tail call void @free(ptr %79)
  %80 = load ptr, ptr %this, align 8
  %memberidx45 = getelementptr inbounds %Module, ptr %80, i32 0, i32 0
  %81 = load ptr, ptr %memberidx45, align 8
  call void @string___del__(ptr %81)
  tail call void @free(ptr %81)
  %82 = load ptr, ptr %this, align 8
  %memberidx46 = getelementptr inbounds %Module, ptr %82, i32 0, i32 4
  %83 = load ptr, ptr %memberidx46, align 8
  call void @Array_Function____del__(ptr %83)
  tail call void @free(ptr %83)
  %84 = load ptr, ptr %this, align 8
  %memberidx47 = getelementptr inbounds %Module, ptr %84, i32 0, i32 1
  %85 = load ptr, ptr %memberidx47, align 8
  call void @Array_Var____del__(ptr %85)
  tail call void @free(ptr %85)
  %86 = load ptr, ptr %this, align 8
  %memberidx48 = getelementptr inbounds %Module, ptr %86, i32 0, i32 3
  %87 = load ptr, ptr %memberidx48, align 8
  call void @Array_Class____del__(ptr %87)
  tail call void @free(ptr %87)
  %88 = load ptr, ptr %this, align 8
  %memberidx49 = getelementptr inbounds %Module, ptr %88, i32 0, i32 6
  %89 = load ptr, ptr %memberidx49, align 8
  call void @Array_Enum____del__(ptr %89)
  tail call void @free(ptr %89)
  %90 = load ptr, ptr %this, align 8
  %memberidx50 = getelementptr inbounds %Module, ptr %90, i32 0, i32 7
  %91 = load ptr, ptr %memberidx50, align 8
  call void @Array_Scope____del__(ptr %91)
  tail call void @free(ptr %91)
  %92 = load ptr, ptr %this, align 8
  %memberidx51 = getelementptr inbounds %Module, ptr %92, i32 0, i32 8
  %93 = load ptr, ptr %memberidx51, align 8
  call void @Array_ConstDeclaration____del__(ptr %93)
  tail call void @free(ptr %93)
  %94 = load ptr, ptr %this, align 8
  %memberidx52 = getelementptr inbounds %Module, ptr %94, i32 0, i32 9
  %95 = load ptr, ptr %memberidx52, align 8
  call void @Array_VarDeclaration____del__(ptr %95)
  tail call void @free(ptr %95)
  %96 = load ptr, ptr %this, align 8
  %memberidx53 = getelementptr inbounds %Module, ptr %96, i32 0, i32 2
  %97 = load ptr, ptr %memberidx53, align 8
  call void @Array_Const____del__(ptr %97)
  tail call void @free(ptr %97)
  ret void
}

define void @Map_string_PropId__resize(ptr %0) {
  %this = alloca ptr, align 8
  %old_entries = alloca ptr, align 8
  %old_size = alloca i64, align 8
  %i = alloca i64, align 8
  %i1 = alloca i64, align 8
  %entry = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_PropId_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = alloca ptr, i64 %3, align 8
  store ptr %4, ptr %old_entries, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_PropId_, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx2, align 4
  store i64 %6, ptr %old_size, align 4
  %7 = load ptr, ptr %old_entries, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_PropId_, ptr %8, i32 0, i32 0
  %9 = load ptr, ptr %memberidx3, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_PropId_, ptr %10, i32 0, i32 1
  %11 = load i64, ptr %memberidx4, align 4
  %12 = mul i64 %11, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %9, i64 %12, i1 false)
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Map_string_PropId_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Map_string_PropId_, ptr %14, i32 0, i32 1
  %15 = load i64, ptr %memberidx6, align 4
  %16 = mul nuw i64 %15, 2
  store i64 %16, ptr %memberidx5, align 4
  %17 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Map_string_PropId_, ptr %17, i32 0, i32 2
  store i64 0, ptr %memberidx7, align 4
  %18 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Map_string_PropId_, ptr %18, i32 0, i32 0
  %19 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Map_string_PropId_, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx9, align 8
  %21 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_PropId_, ptr %21, i32 0, i32 1
  %22 = load i64, ptr %memberidx10, align 4
  %23 = mul i64 %22, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %24 = call ptr @realloc(ptr %20, i64 %23)
  store ptr %24, ptr %memberidx8, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %25 = load i64, ptr %i, align 4
  %26 = load ptr, ptr %this, align 8
  %memberidx11 = getelementptr inbounds %Map_string_PropId_, ptr %26, i32 0, i32 1
  %27 = load i64, ptr %memberidx11, align 4
  %28 = icmp slt i64 %25, %27
  br i1 %28, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load i64, ptr %i, align 4
  %30 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %Map_string_PropId_, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx12, align 8
  %32 = getelementptr inbounds ptr, ptr %31, i64 %29
  store ptr null, ptr %32, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %33 = load i64, ptr %i, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.entry13

for.entry13:                                      ; preds = %for.end
  store i64 0, ptr %i1, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.incr16, %for.entry13
  %35 = load i64, ptr %i1, align 4
  %36 = load i64, ptr %old_size, align 4
  %37 = icmp slt i64 %35, %36
  br i1 %37, label %for.body15, label %for.end17

for.body15:                                       ; preds = %for.cond14
  %38 = load i64, ptr %i1, align 4
  %39 = load ptr, ptr %old_entries, align 8
  %40 = getelementptr inbounds ptr, ptr %39, i64 %38
  %41 = load ptr, ptr %40, align 8
  store ptr %41, ptr %entry, align 8
  %42 = load ptr, ptr %entry, align 8
  %43 = icmp ne ptr %42, null
  br i1 %43, label %if.entry, label %else

for.incr16:                                       ; preds = %ifend
  %44 = load i64, ptr %i1, align 4
  %45 = add nsw i64 %44, 1
  store i64 %45, ptr %i1, align 4
  br label %for.cond14

for.end17:                                        ; preds = %for.cond14
  ret void

if.entry:                                         ; preds = %for.body15
  %46 = load ptr, ptr %this, align 8
  %47 = load ptr, ptr %entry, align 8
  %memberidx18 = getelementptr inbounds %MapEntry_string_PropId_, ptr %47, i32 0, i32 0
  %48 = load ptr, ptr %memberidx18, align 8
  %49 = load ptr, ptr %entry, align 8
  %memberidx19 = getelementptr inbounds %MapEntry_string_PropId_, ptr %49, i32 0, i32 1
  %50 = load ptr, ptr %memberidx19, align 8
  call void @Map_string_PropId____setitem__(ptr %46, ptr %48, ptr %50)
  br label %ifend

else:                                             ; preds = %for.body15
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  br label %for.incr16
}

define void @PropId_constructor(ptr %0, i64 %1, ptr %2, i64 %3) {
  %id = alloca i64, align 8
  %kind = alloca i64, align 8
  %this = alloca ptr, align 8
  %type_id = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %kind, align 4
  store ptr %2, ptr %type_id, align 8
  store i64 %3, ptr %id, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %PropId, ptr %5, i32 0, i32 0
  %6 = load i64, ptr %kind, align 4
  store i64 %6, ptr %memberidx, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %PropId, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %type_id, align 8
  store ptr %8, ptr %memberidx1, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %PropId, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %id, align 4
  store i64 %10, ptr %memberidx2, align 4
  ret void
}

define void @MapEntry_string_PropId__constructor(ptr %0, ptr %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  store ptr %2, ptr %value, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapEntry_string_PropId_, ptr %4, i32 0, i32 0
  %5 = load ptr, ptr %key, align 8
  store ptr %5, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapEntry_string_PropId_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %value, align 8
  store ptr %7, ptr %memberidx1, align 8
  ret void
}

define ptr @MapIterator_string_PropId__next(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapIterator_string_PropId_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapIterator_string_PropId_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = icmp sgt i64 %3, 0
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %1
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %MapIterator_string_PropId_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %MapIterator_string_PropId_, ptr %9, i32 0, i32 1
  %incdec.ptr = getelementptr inbounds ptr, ptr %8, i32 1
  store ptr %incdec.ptr, ptr %memberidx3, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %MapIterator_string_PropId_, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx4, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 -1
  %13 = load ptr, ptr %12, align 8
  %14 = icmp ne ptr %13, null
  br i1 %14, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %if.entry, %1
  %15 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %MapIterator_string_PropId_, ptr %15, i32 0, i32 0
  %16 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %MapIterator_string_PropId_, ptr %16, i32 0, i32 3
  %17 = load i64, ptr %memberidx8, align 4
  %18 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %MapIterator_string_PropId_, ptr %18, i32 0, i32 3
  %19 = add nsw i64 %17, -1
  store i64 %19, ptr %memberidx9, align 4
  %20 = icmp sle i64 %17, 0
  store i1 %20, ptr %memberidx7, align 1
  %21 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %MapIterator_string_PropId_, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx10, align 8
  %23 = getelementptr inbounds ptr, ptr %22, i64 -1
  %24 = load ptr, ptr %23, align 8
  ret ptr %24

if.entry:                                         ; preds = %while.entry
  br label %while.end

else:                                             ; preds = %while.entry
  br label %ifend

ifend:                                            ; preds = %else
  %25 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %MapIterator_string_PropId_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx5, align 4
  %27 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %MapIterator_string_PropId_, ptr %27, i32 0, i32 2
  %28 = add nsw i64 %26, -1
  store i64 %28, ptr %memberidx6, align 4
  %29 = icmp sgt i64 %26, 0
  br i1 %29, label %while.entry, label %while.end
}

define void @MapIterator_string_PropId__constructor(ptr %0, ptr %1, i64 %2, i64 %3) {
  %remaining_size = alloca i64, align 8
  %this = alloca ptr, align 8
  %entries = alloca ptr, align 8
  %items_remaining = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %entries, align 8
  store i64 %2, ptr %remaining_size, align 4
  store i64 %3, ptr %items_remaining, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapIterator_string_PropId_, ptr %5, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapIterator_string_PropId_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %entries, align 8
  store ptr %7, ptr %memberidx1, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %MapIterator_string_PropId_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %remaining_size, align 4
  store i64 %9, ptr %memberidx2, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %MapIterator_string_PropId_, ptr %10, i32 0, i32 3
  %11 = load i64, ptr %items_remaining, align 4
  store i64 %11, ptr %memberidx3, align 4
  ret void
}

define ptr @Map_string_PropId____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MapIterator_string_PropId_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_PropId_, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_PropId_, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_PropId_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx2, align 4
  call void @MapIterator_string_PropId__constructor(ptr %2, ptr %4, i64 %6, i64 %8)
  ret ptr %2
}

define void @Map_string_PropId____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_PropId_, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Map_string_PropId____setitem__(ptr %0, ptr %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  %should_add = alloca i1, align 1
  %ratio = alloca double, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  store ptr %2, ptr %value, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_PropId_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = sitofp i64 %5 to double
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_PropId_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %memberidx1, align 4
  %9 = sitofp i64 %8 to double
  %10 = fdiv double %6, %9
  store double %10, ptr %ratio, align 8
  %11 = load double, ptr %ratio, align 8
  %12 = fcmp ogt double %11, 7.500000e-01
  br i1 %12, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %13 = load ptr, ptr %this, align 8
  call void @Map_string_PropId__resize(ptr %13)
  br label %ifend

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %14 = load ptr, ptr %this, align 8
  %15 = load ptr, ptr %key, align 8
  %16 = call i64 @Map_string_PropId__hash_fnc(ptr %14, ptr %15)
  %17 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_PropId_, ptr %17, i32 0, i32 1
  %18 = load i64, ptr %memberidx2, align 4
  %19 = urem i64 %16, %18
  store i64 %19, ptr %hash, align 4
  store i1 true, ptr %should_add, align 1
  %20 = load i64, ptr %hash, align 4
  %21 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_PropId_, ptr %21, i32 0, i32 0
  %22 = load ptr, ptr %memberidx3, align 8
  %23 = getelementptr inbounds ptr, ptr %22, i64 %20
  %24 = load ptr, ptr %23, align 8
  %25 = icmp ne ptr %24, null
  br i1 %25, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend8, %ifend
  %26 = load i64, ptr %hash, align 4
  %27 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_PropId_, ptr %27, i32 0, i32 0
  %28 = load ptr, ptr %memberidx4, align 8
  %29 = getelementptr inbounds ptr, ptr %28, i64 %26
  %30 = load ptr, ptr %29, align 8
  %memberidx5 = getelementptr inbounds %MapEntry_string_PropId_, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx5, align 8
  %32 = load ptr, ptr %key, align 8
  %33 = call i1 @string___eq__(ptr %31, ptr %32)
  br i1 %33, label %if.entry6, label %else7

while.end:                                        ; preds = %ifend8, %if.entry6, %ifend
  %34 = load i1, ptr %should_add, align 1
  br i1 %34, label %if.entry11, label %else12

if.entry6:                                        ; preds = %while.entry
  store i1 false, ptr %should_add, align 1
  br label %while.end

else7:                                            ; preds = %while.entry
  br label %ifend8

ifend8:                                           ; preds = %else7
  %35 = load i64, ptr %hash, align 4
  %36 = add nuw i64 %35, 1
  %37 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Map_string_PropId_, ptr %37, i32 0, i32 1
  %38 = load i64, ptr %memberidx9, align 4
  %39 = urem i64 %36, %38
  store i64 %39, ptr %hash, align 4
  %40 = load i64, ptr %hash, align 4
  %41 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_PropId_, ptr %41, i32 0, i32 0
  %42 = load ptr, ptr %memberidx10, align 8
  %43 = getelementptr inbounds ptr, ptr %42, i64 %40
  %44 = load ptr, ptr %43, align 8
  %45 = icmp ne ptr %44, null
  br i1 %45, label %while.entry, label %while.end

if.entry11:                                       ; preds = %while.end
  %46 = load ptr, ptr %this, align 8
  %memberidx14 = getelementptr inbounds %Map_string_PropId_, ptr %46, i32 0, i32 2
  %47 = load i64, ptr %memberidx14, align 4
  %48 = load ptr, ptr %this, align 8
  %memberidx15 = getelementptr inbounds %Map_string_PropId_, ptr %48, i32 0, i32 2
  %49 = add nsw i64 %47, 1
  store i64 %49, ptr %memberidx15, align 4
  br label %ifend13

else12:                                           ; preds = %while.end
  br label %ifend13

ifend13:                                          ; preds = %else12, %if.entry11
  %50 = load i64, ptr %hash, align 4
  %51 = load ptr, ptr %this, align 8
  %memberidx16 = getelementptr inbounds %Map_string_PropId_, ptr %51, i32 0, i32 0
  %52 = load ptr, ptr %memberidx16, align 8
  %53 = getelementptr inbounds ptr, ptr %52, i64 %50
  %54 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MapEntry_string_PropId_, ptr null, i32 1) to i32))
  %55 = load ptr, ptr %key, align 8
  %56 = load ptr, ptr %value, align 8
  call void @MapEntry_string_PropId__constructor(ptr %54, ptr %55, ptr %56)
  store ptr %54, ptr %53, align 8
  ret void
}

define ptr @Map_string_PropId____getitem__(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %key, align 8
  %5 = call i64 @Map_string_PropId__hash_fnc(ptr %3, ptr %4)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_PropId_, ptr %6, i32 0, i32 1
  %7 = load i64, ptr %memberidx, align 4
  %8 = urem i64 %5, %7
  store i64 %8, ptr %hash, align 4
  %9 = load i64, ptr %hash, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_PropId_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 %9
  %13 = load ptr, ptr %12, align 8
  %14 = icmp ne ptr %13, null
  br i1 %14, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %2
  %15 = load i64, ptr %hash, align 4
  %16 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_PropId_, ptr %16, i32 0, i32 0
  %17 = load ptr, ptr %memberidx2, align 8
  %18 = getelementptr inbounds ptr, ptr %17, i64 %15
  %19 = load ptr, ptr %18, align 8
  %memberidx3 = getelementptr inbounds %MapEntry_string_PropId_, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx3, align 8
  %21 = load ptr, ptr %key, align 8
  %22 = call i1 @string___eq__(ptr %20, ptr %21)
  br i1 %22, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %if.entry, %2
  %23 = load i64, ptr %hash, align 4
  %24 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Map_string_PropId_, ptr %24, i32 0, i32 0
  %25 = load ptr, ptr %memberidx6, align 8
  %26 = getelementptr inbounds ptr, ptr %25, i64 %23
  %27 = load ptr, ptr %26, align 8
  %28 = icmp ne ptr %27, null
  br i1 %28, label %if.entry7, label %else8

if.entry:                                         ; preds = %while.entry
  br label %while.end

else:                                             ; preds = %while.entry
  %29 = load i64, ptr %hash, align 4
  %30 = add nuw i64 %29, 1
  %31 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_PropId_, ptr %31, i32 0, i32 1
  %32 = load i64, ptr %memberidx4, align 4
  %33 = urem i64 %30, %32
  store i64 %33, ptr %hash, align 4
  br label %ifend

ifend:                                            ; preds = %else
  %34 = load i64, ptr %hash, align 4
  %35 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Map_string_PropId_, ptr %35, i32 0, i32 0
  %36 = load ptr, ptr %memberidx5, align 8
  %37 = getelementptr inbounds ptr, ptr %36, i64 %34
  %38 = load ptr, ptr %37, align 8
  %39 = icmp ne ptr %38, null
  br i1 %39, label %while.entry, label %while.end

if.entry7:                                        ; preds = %while.end
  %40 = load i64, ptr %hash, align 4
  %41 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_PropId_, ptr %41, i32 0, i32 0
  %42 = load ptr, ptr %memberidx10, align 8
  %43 = getelementptr inbounds ptr, ptr %42, i64 %40
  %44 = load ptr, ptr %43, align 8
  %memberidx11 = getelementptr inbounds %MapEntry_string_PropId_, ptr %44, i32 0, i32 1
  %45 = load ptr, ptr %memberidx11, align 8
  ret ptr %45

else8:                                            ; preds = %while.end
  br label %ifend9

ifend9:                                           ; preds = %else8
  ret ptr null
}

define i64 @Map_string_PropId__hash_fnc(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  %str = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  %3 = load ptr, ptr %key, align 8
  %4 = getelementptr inbounds %string, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr %6(ptr %3)
  %8 = alloca ptr, align 8
  %9 = call i64 (ptr, ptr, ...) @asprintf(ptr %8, ptr @58, ptr %7)
  %10 = load ptr, ptr %8, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %11, ptr %10, i64 %9)
  tail call void @free(ptr %7)
  store ptr %11, ptr %str, align 8
  store i64 0, ptr %hash, align 4
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %12 = load i64, ptr %i, align 4
  %13 = load ptr, ptr %str, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx1, align 4
  %15 = icmp slt i64 %12, %14
  br i1 %15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i64, ptr %hash, align 4
  %17 = shl i64 %16, 1
  %18 = load ptr, ptr %str, align 8
  %19 = getelementptr inbounds %string, ptr %18, i32 0, i32 0
  %20 = load ptr, ptr %19, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %20, i32 0, i32 2
  %21 = load ptr, ptr %memberidx2, align 8
  %22 = load i64, ptr %i, align 4
  %23 = call i8 %21(ptr %18, i64 %22)
  %24 = zext i8 %23 to i64
  %25 = add nuw i64 %17, %24
  store i64 %25, ptr %hash, align 4
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %26 = load i64, ptr %i, align 4
  %27 = add nsw i64 %26, 1
  store i64 %27, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load ptr, ptr %str, align 8
  call void @string___del__(ptr %28)
  tail call void @free(ptr %28)
  %29 = load i64, ptr %hash, align 4
  ret i64 %29
}

define void @Map_string_PropId__constructor(ptr %0) {
  %this = alloca ptr, align 8
  %initial_capacity = alloca i64, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 256, ptr %initial_capacity, align 4
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_PropId_, ptr %2, i32 0, i32 0
  %3 = load i64, ptr %initial_capacity, align 4
  %4 = trunc i64 %3 to i32
  %mallocsize = mul i32 %4, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %5 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %5, ptr %memberidx, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %initial_capacity, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i64, ptr %i, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_PropId_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 %9
  store ptr null, ptr %12, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %13 = load i64, ptr %i, align 4
  %14 = add nsw i64 %13, 1
  store i64 %14, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_PropId_, ptr %15, i32 0, i32 1
  %16 = load i64, ptr %initial_capacity, align 4
  store i64 %16, ptr %memberidx2, align 4
  %17 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_PropId_, ptr %17, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  ret void
}

define void @EnumField___del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %EnumField, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %EnumField, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  call void @string___del__(ptr %5)
  tail call void @free(ptr %5)
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %EnumField, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %memberidx2, align 8
  tail call void @free(ptr %7)
  ret void
}

define void @EnumField_constructor(ptr %0, ptr %1) {
  %name = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %name, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %EnumField, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %name, align 8
  store ptr %4, ptr %memberidx, align 8
  ret void
}

define ptr @Array_EnumField__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumField_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_EnumField_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_EnumField__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumField_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_EnumField__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumField_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_EnumField_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_EnumField_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_EnumField_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_EnumField____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumField_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_EnumField__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_EnumField_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_EnumField_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_EnumField_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_EnumField____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_EnumField_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumField_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_EnumField_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_EnumField_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_EnumField_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_EnumField_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_EnumField_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_EnumField_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_EnumField_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_EnumField_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_EnumField____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_EnumField_, ptr null, i32 1) to i32))
  call void @Array_EnumField__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumField_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_EnumField_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_EnumField_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_EnumField_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_EnumField_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_EnumField_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_EnumField_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_EnumField_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_EnumField_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_EnumField____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_EnumField____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_EnumField____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_EnumField__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_EnumField_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_EnumField_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_EnumField_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_EnumField_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_EnumField_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_EnumField_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_EnumField__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_EnumField_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_EnumField_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_EnumField_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_EnumField_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_EnumField____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_EnumField_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumField_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_EnumField__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_EnumField____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_EnumField____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_EnumField____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_EnumField____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumField_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_EnumField_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_EnumField____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_EnumField____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_EnumField____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_EnumField_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_EnumField__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_EnumField__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumField_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_EnumField__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_EnumField_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumField_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_EnumField_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @Enum___del__(ptr %0) {
  %this = alloca ptr, align 8
  %field = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Enum, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Enum, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  call void @string___del__(ptr %5)
  tail call void @free(ptr %5)
  br label %for.entry

for.entry:                                        ; preds = %1
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Enum, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = call ptr @Array_EnumField____iter__(ptr %7)
  store ptr %8, ptr %tmp_it, align 8
  %9 = load ptr, ptr %tmp_it, align 8
  %10 = call ptr @ArrayIterator_EnumField__next(ptr %9)
  store ptr %10, ptr %field, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %11 = load ptr, ptr %tmp_it, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_EnumField_, ptr %11, i32 0, i32 0
  %12 = load i1, ptr %memberidx3, align 1
  %13 = xor i1 %12, true
  br i1 %13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load ptr, ptr %field, align 8
  call void @EnumField___del__(ptr %14)
  tail call void @free(ptr %14)
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %15 = load ptr, ptr %tmp_it, align 8
  %16 = call ptr @ArrayIterator_EnumField__next(ptr %15)
  store ptr %16, ptr %field, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %17)
  %18 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Enum, ptr %18, i32 0, i32 2
  %19 = load ptr, ptr %memberidx4, align 8
  call void @Array_EnumField____del__(ptr %19)
  tail call void @free(ptr %19)
  %20 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Enum, ptr %20, i32 0, i32 3
  %21 = load ptr, ptr %memberidx5, align 8
  call void @Map_string_PropId____del__(ptr %21)
  tail call void @free(ptr %21)
  ret void
}

define void @Enum_constructor(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Enum, ptr %2, i32 0, i32 2
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_EnumField_, ptr null, i32 1) to i32))
  call void @Array_EnumField__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx1 = getelementptr inbounds %Array_EnumField_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_EnumField_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  store ptr %3, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Enum, ptr %5, i32 0, i32 3
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_PropId_, ptr null, i32 1) to i32))
  call void @Map_string_PropId__constructor(ptr %6)
  store ptr %6, ptr %memberidx3, align 8
  ret void
}

define ptr @Array_Enum__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Enum_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Enum_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_Enum__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Enum_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_Enum__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Enum_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Enum_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Enum_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Enum_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_Enum____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Enum_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_Enum__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Enum_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Enum_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Enum_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_Enum____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_Enum_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Enum_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_Enum_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Enum_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Enum_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_Enum_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_Enum_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_Enum_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_Enum_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_Enum_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_Enum____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Enum_, ptr null, i32 1) to i32))
  call void @Array_Enum__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_Enum_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_Enum_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Enum_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_Enum_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_Enum_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_Enum_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_Enum_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_Enum_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_Enum_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_Enum____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_Enum____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_Enum____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_Enum__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Enum_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Enum_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Enum_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Enum_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_Enum_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_Enum_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_Enum__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Enum_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Enum_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Enum_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Enum_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_Enum____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_Enum_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Enum_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_Enum__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_Enum____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_Enum____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_Enum____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_Enum____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_Enum_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Enum_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_Enum____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_Enum____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_Enum____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_Enum_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_Enum__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_Enum__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Enum_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_Enum__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_Enum_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Enum_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Enum_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @Const_constructor(ptr %0, ptr %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %value_type = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %value, align 8
  store ptr %2, ptr %value_type, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Const, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %value, align 8
  store ptr %5, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Value, ptr %6, i32 0, i32 0
  %7 = load ptr, ptr %value_type, align 8
  store ptr %7, ptr %memberidx1, align 8
  ret void
}

define ptr @Array_Const__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Const_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Const_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Const_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_Const__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Const_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Const_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_Const__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Const_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Const_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Const_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Const_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Const_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_Const____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Const_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Const_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_Const__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Const_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Const_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Const_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_Const____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_Const_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Const_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_Const_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Const_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Const_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_Const_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_Const_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_Const_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_Const_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_Const_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_Const____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Const_, ptr null, i32 1) to i32))
  call void @Array_Const__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Const_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_Const_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_Const_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Const_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_Const_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_Const_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_Const_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_Const_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_Const_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_Const_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_Const____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_Const____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_Const____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_Const__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Const_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Const_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Const_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Const_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_Const_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_Const_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_Const__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Const_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Const_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Const_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Const_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_Const____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_Const_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Const_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Const_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_Const__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_Const____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Const_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_Const____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Const_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_Const____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Const_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_Const____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Const_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_Const_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Const_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_Const____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_Const____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_Const____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_Const_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_Const__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Const_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_Const__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Const_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_Const__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_Const_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Const_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Const_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Const_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @FunctionArg_constructor(ptr %0) {
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Expression_constructor, ptr %super, align 8
  %2 = load ptr, ptr %super, align 8
  call void %2(ptr %0, i64 8)
  ret void
}

define ptr @Array_FunctionArg__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FunctionArg_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FunctionArg_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_FunctionArg__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FunctionArg_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_FunctionArg__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FunctionArg_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FunctionArg_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_FunctionArg_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_FunctionArg_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_FunctionArg____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FunctionArg_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_FunctionArg__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FunctionArg_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_FunctionArg_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_FunctionArg_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_FunctionArg____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_FunctionArg_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FunctionArg_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_FunctionArg_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_FunctionArg_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_FunctionArg_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_FunctionArg_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_FunctionArg_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_FunctionArg_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_FunctionArg_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_FunctionArg_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_FunctionArg____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_FunctionArg_, ptr null, i32 1) to i32))
  call void @Array_FunctionArg__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_FunctionArg_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_FunctionArg_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_FunctionArg_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_FunctionArg_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_FunctionArg_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_FunctionArg_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_FunctionArg_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_FunctionArg_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_FunctionArg_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_FunctionArg____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_FunctionArg____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_FunctionArg____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_FunctionArg__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_FunctionArg_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_FunctionArg_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_FunctionArg_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_FunctionArg_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_FunctionArg_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_FunctionArg_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_FunctionArg__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_FunctionArg_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_FunctionArg_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_FunctionArg_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_FunctionArg_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_FunctionArg____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_FunctionArg_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FunctionArg_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_FunctionArg__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_FunctionArg____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_FunctionArg____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_FunctionArg____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_FunctionArg____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_FunctionArg_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FunctionArg_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_FunctionArg____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_FunctionArg____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_FunctionArg____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_FunctionArg_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_FunctionArg__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_FunctionArg__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FunctionArg_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_FunctionArg__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_FunctionArg_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FunctionArg_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FunctionArg_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define ptr @Array_Statement__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Statement_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Statement_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_Statement__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Statement_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_Statement__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Statement_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Statement_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Statement_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Statement_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_Statement____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Statement_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_Statement__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Statement_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Statement_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Statement_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_Statement____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_Statement_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Statement_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_Statement_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Statement_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Statement_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_Statement_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_Statement_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_Statement_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_Statement_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_Statement_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_Statement____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Statement_, ptr null, i32 1) to i32))
  call void @Array_Statement__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_Statement_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_Statement_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Statement_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_Statement_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_Statement_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_Statement_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_Statement_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_Statement_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_Statement_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_Statement____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_Statement____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_Statement____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_Statement__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Statement_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Statement_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Statement_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Statement_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_Statement_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_Statement_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_Statement__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Statement_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Statement_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Statement_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Statement_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_Statement____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_Statement_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Statement_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_Statement__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_Statement____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_Statement____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_Statement____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_Statement____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_Statement_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Statement_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_Statement____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_Statement____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_Statement____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_Statement_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_Statement__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_Statement__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Statement_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_Statement__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_Statement_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Statement_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Statement_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @Block_constructor(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Block, ptr %2, i32 0, i32 0
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Statement_, ptr null, i32 1) to i32))
  call void @Array_Statement__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx1 = getelementptr inbounds %Array_Statement_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Statement_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  store ptr %3, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Block, ptr %5, i32 0, i32 1
  store i1 false, ptr %memberidx3, align 1
  %6 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Block, ptr %6, i32 0, i32 2
  store i1 false, ptr %memberidx4, align 1
  %7 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Block, ptr %7, i32 0, i32 3
  store i1 false, ptr %memberidx5, align 1
  %8 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Block, ptr %8, i32 0, i32 4
  store ptr null, ptr %memberidx6, align 8
  ret void
}

define ptr @Array_Type__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Type_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Type_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Type_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_Type__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Type_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Type_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_Type__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Type_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Type_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Type_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Type_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Type_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_Type____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Type_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Type_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_Type__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Type_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Type_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Type_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_Type____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_Type_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Type_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_Type_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Type_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Type_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_Type_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_Type_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_Type_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_Type_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_Type_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_Type____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Type_, ptr null, i32 1) to i32))
  call void @Array_Type__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Type_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_Type_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_Type_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Type_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_Type_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_Type_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_Type_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_Type_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_Type_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_Type_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_Type____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_Type____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_Type____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_Type__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Type_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Type_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Type_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Type_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_Type_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_Type_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_Type__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Type_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Type_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Type_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Type_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_Type____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_Type_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Type_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Type_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_Type__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_Type____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Type_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_Type____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Type_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_Type____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Type_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_Type____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Type_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_Type_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Type_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_Type____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_Type____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_Type____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_Type_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_Type__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Type_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_Type__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Type_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_Type__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_Type_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Type_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Type_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Type_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @FunctionType_constructor(ptr %0, ptr %1, ptr %2) {
  %return_type = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arg_types = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Type_constructor, ptr %super, align 8
  store ptr %1, ptr %arg_types, align 8
  store ptr %2, ptr %return_type, align 8
  %4 = load ptr, ptr %super, align 8
  call void %4(ptr %0, i64 16)
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %FunctionType, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %arg_types, align 8
  store ptr %6, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %FunctionType, ptr %7, i32 0, i32 2
  %8 = load ptr, ptr %return_type, align 8
  store ptr %8, ptr %memberidx1, align 8
  ret void
}

define void @ClassMethod_constructor(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ClassMethod, ptr %2, i32 0, i32 7
  store i1 false, ptr %memberidx, align 1
  ret void
}

define ptr @Array_ClassMethod__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassMethod_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ClassMethod_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_ClassMethod__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassMethod_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_ClassMethod__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassMethod_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ClassMethod_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ClassMethod_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ClassMethod_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_ClassMethod____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassMethod_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_ClassMethod__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ClassMethod_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ClassMethod_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ClassMethod_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_ClassMethod____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_ClassMethod_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassMethod_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_ClassMethod_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ClassMethod_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ClassMethod_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_ClassMethod_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_ClassMethod_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_ClassMethod_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_ClassMethod_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_ClassMethod_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_ClassMethod____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ClassMethod_, ptr null, i32 1) to i32))
  call void @Array_ClassMethod__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassMethod_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_ClassMethod_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ClassMethod_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_ClassMethod_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_ClassMethod_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_ClassMethod_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_ClassMethod_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_ClassMethod_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_ClassMethod_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_ClassMethod____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_ClassMethod____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_ClassMethod____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_ClassMethod__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_ClassMethod__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_ClassMethod____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_ClassMethod_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassMethod_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_ClassMethod__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_ClassMethod____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_ClassMethod____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_ClassMethod____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_ClassMethod____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassMethod_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ClassMethod_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_ClassMethod____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_ClassMethod____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_ClassMethod____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_ClassMethod_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_ClassMethod__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_ClassMethod__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassMethod_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_ClassMethod__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_ClassMethod_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassMethod_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ClassMethod_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @ClassField_constructor(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ClassField, ptr %2, i32 0, i32 1
  store i1 false, ptr %memberidx, align 1
  ret void
}

define ptr @Array_ClassField__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassField_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ClassField_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_ClassField__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassField_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_ClassField__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassField_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ClassField_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ClassField_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ClassField_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_ClassField____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassField_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_ClassField__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ClassField_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ClassField_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ClassField_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_ClassField____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_ClassField_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassField_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_ClassField_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ClassField_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ClassField_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_ClassField_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_ClassField_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_ClassField_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_ClassField_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_ClassField_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_ClassField____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ClassField_, ptr null, i32 1) to i32))
  call void @Array_ClassField__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassField_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_ClassField_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ClassField_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_ClassField_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_ClassField_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_ClassField_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_ClassField_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_ClassField_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_ClassField_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_ClassField____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_ClassField____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_ClassField____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_ClassField__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_ClassField_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_ClassField_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_ClassField_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_ClassField_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_ClassField_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_ClassField_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_ClassField__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_ClassField_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_ClassField_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_ClassField_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_ClassField_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_ClassField____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_ClassField_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassField_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_ClassField__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_ClassField____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_ClassField____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_ClassField____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_ClassField____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassField_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ClassField_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_ClassField____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_ClassField____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_ClassField____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_ClassField_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_ClassField__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_ClassField__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassField_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_ClassField__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_ClassField_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassField_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ClassField_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @Class___del__(ptr %0) {
  %this = alloca ptr, align 8
  %field = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %method = alloca ptr, align 8
  %tmp_it1 = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Class, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  %4 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Class, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx2, align 8
  call void @string___del__(ptr %5)
  tail call void @free(ptr %5)
  %6 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Class, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %memberidx3, align 8
  %8 = icmp ne ptr %7, null
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Class, ptr %9, i32 0, i32 2
  %10 = load ptr, ptr %memberidx4, align 8
  tail call void @free(ptr %10)
  br label %ifend

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  br label %for.entry

for.entry:                                        ; preds = %ifend
  %11 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Class, ptr %11, i32 0, i32 4
  %12 = load ptr, ptr %memberidx5, align 8
  %13 = call ptr @Array_ClassField____iter__(ptr %12)
  store ptr %13, ptr %tmp_it, align 8
  %14 = load ptr, ptr %tmp_it, align 8
  %15 = call ptr @ArrayIterator_ClassField__next(ptr %14)
  store ptr %15, ptr %field, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %16 = load ptr, ptr %tmp_it, align 8
  %memberidx6 = getelementptr inbounds %ArrayIterator_ClassField_, ptr %16, i32 0, i32 0
  %17 = load i1, ptr %memberidx6, align 1
  %18 = xor i1 %17, true
  br i1 %18, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load ptr, ptr %field, align 8
  tail call void @free(ptr %19)
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %20 = load ptr, ptr %tmp_it, align 8
  %21 = call ptr @ArrayIterator_ClassField__next(ptr %20)
  store ptr %21, ptr %field, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %22 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %22)
  br label %for.entry7

for.entry7:                                       ; preds = %for.end
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Class, ptr %23, i32 0, i32 5
  %24 = load ptr, ptr %memberidx8, align 8
  %25 = call ptr @Array_ClassMethod____iter__(ptr %24)
  store ptr %25, ptr %tmp_it1, align 8
  %26 = load ptr, ptr %tmp_it1, align 8
  %27 = call ptr @ArrayIterator_ClassMethod__next(ptr %26)
  store ptr %27, ptr %method, align 8
  br label %for.cond9

for.cond9:                                        ; preds = %for.incr11, %for.entry7
  %28 = load ptr, ptr %tmp_it1, align 8
  %memberidx13 = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %28, i32 0, i32 0
  %29 = load i1, ptr %memberidx13, align 1
  %30 = xor i1 %29, true
  br i1 %30, label %for.body10, label %for.end12

for.body10:                                       ; preds = %for.cond9
  %31 = load ptr, ptr %method, align 8
  tail call void @free(ptr %31)
  br label %for.incr11

for.incr11:                                       ; preds = %for.body10
  %32 = load ptr, ptr %tmp_it1, align 8
  %33 = call ptr @ArrayIterator_ClassMethod__next(ptr %32)
  store ptr %33, ptr %method, align 8
  br label %for.cond9

for.end12:                                        ; preds = %for.cond9
  %34 = load ptr, ptr %tmp_it1, align 8
  tail call void @free(ptr %34)
  %35 = load ptr, ptr %this, align 8
  %memberidx14 = getelementptr inbounds %Class, ptr %35, i32 0, i32 6
  %36 = load ptr, ptr %memberidx14, align 8
  call void @Map_string_PropId____del__(ptr %36)
  tail call void @free(ptr %36)
  %37 = load ptr, ptr %this, align 8
  %memberidx15 = getelementptr inbounds %Class, ptr %37, i32 0, i32 7
  %38 = load ptr, ptr %memberidx15, align 8
  call void @Map_string_PropId____del__(ptr %38)
  tail call void @free(ptr %38)
  ret void
}

define void @Class_constructor(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Class, ptr %2, i32 0, i32 3
  store ptr null, ptr %memberidx, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Class, ptr %3, i32 0, i32 9
  store i64 0, ptr %memberidx1, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Class, ptr %4, i32 0, i32 8
  store i64 0, ptr %memberidx2, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Class, ptr %5, i32 0, i32 4
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ClassField_, ptr null, i32 1) to i32))
  call void @Array_ClassField__constructor(ptr %6, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx4 = getelementptr inbounds %Array_ClassField_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Array_ClassField_, ptr %6, i32 0, i32 2
  store i64 0, ptr %memberidx5, align 4
  store ptr %6, ptr %memberidx3, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Class, ptr %8, i32 0, i32 5
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ClassMethod_, ptr null, i32 1) to i32))
  call void @Array_ClassMethod__constructor(ptr %9, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx7 = getelementptr inbounds %Array_ClassMethod_, ptr %9, i32 0, i32 1
  %10 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Array_ClassMethod_, ptr %9, i32 0, i32 2
  store i64 0, ptr %memberidx8, align 4
  store ptr %9, ptr %memberidx6, align 8
  %11 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Class, ptr %11, i32 0, i32 6
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_PropId_, ptr null, i32 1) to i32))
  call void @Map_string_PropId__constructor(ptr %12)
  store ptr %12, ptr %memberidx9, align 8
  %13 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Class, ptr %13, i32 0, i32 7
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_PropId_, ptr null, i32 1) to i32))
  call void @Map_string_PropId__constructor(ptr %14)
  store ptr %14, ptr %memberidx10, align 8
  %15 = load ptr, ptr %this, align 8
  %memberidx11 = getelementptr inbounds %Class, ptr %15, i32 0, i32 10
  store i1 false, ptr %memberidx11, align 1
  ret void
}

define ptr @Array_Class__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Class_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Class_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Class_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_Class__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Class_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Class_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_Class__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Class_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Class_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Class_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Class_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Class_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_Class____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Class_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Class_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_Class__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Class_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Class_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Class_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_Class____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_Class_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Class_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_Class_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Class_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Class_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_Class_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_Class_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_Class_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_Class_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_Class_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_Class____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Class_, ptr null, i32 1) to i32))
  call void @Array_Class__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Class_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_Class_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_Class_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Class_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_Class_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_Class_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_Class_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_Class_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_Class_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_Class_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_Class____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_Class____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_Class____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_Class__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Class_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Class_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Class_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Class_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_Class_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_Class_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_Class__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Class_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Class_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Class_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Class_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_Class____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_Class_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Class_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Class_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_Class__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_Class____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Class_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_Class____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Class_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_Class____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Class_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_Class____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Class_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_Class_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Class_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_Class____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_Class____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_Class____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_Class_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_Class__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Class_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_Class__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Class_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_Class__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_Class_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Class_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Class_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Class_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @Function_constructor(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Function, ptr %2, i32 0, i32 6
  store i1 false, ptr %memberidx, align 1
  ret void
}

define ptr @Array_Function__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Function_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Function_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Function_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_Function__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Function_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Function_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_Function__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Function_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Function_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Function_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Function_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Function_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_Function____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Function_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Function_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_Function__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Function_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Function_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Function_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_Function____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_Function_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Function_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_Function_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Function_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Function_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_Function_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_Function_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_Function_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_Function_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_Function_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_Function____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Function_, ptr null, i32 1) to i32))
  call void @Array_Function__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Function_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_Function_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_Function_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Function_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_Function_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_Function_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_Function_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_Function_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_Function_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_Function_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_Function____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_Function____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_Function____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_Function__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Function_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Function_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Function_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Function_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_Function_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_Function_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_Function__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Function_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Function_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Function_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Function_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_Function____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_Function_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Function_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Function_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_Function__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_Function____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Function_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_Function____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Function_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_Function____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Function_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_Function____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Function_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_Function_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Function_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_Function____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_Function____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_Function____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_Function_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_Function__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Function_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_Function__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Function_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_Function__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_Function_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Function_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Function_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Function_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @Module_constructor(ptr %0, ptr %1) {
  %name = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %name, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Module, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %name, align 8
  store ptr %4, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Module, ptr %5, i32 0, i32 4
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Function_, ptr null, i32 1) to i32))
  call void @Array_Function__constructor(ptr %6, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx2 = getelementptr inbounds %Array_Function_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_Function_, ptr %6, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  store ptr %6, ptr %memberidx1, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Module, ptr %8, i32 0, i32 1
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Var_, ptr null, i32 1) to i32))
  call void @Array_Var__constructor(ptr %9, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx5 = getelementptr inbounds %Array_Var_, ptr %9, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %Array_Var_, ptr %9, i32 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  store ptr %9, ptr %memberidx4, align 8
  %11 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Module, ptr %11, i32 0, i32 3
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Class_, ptr null, i32 1) to i32))
  call void @Array_Class__constructor(ptr %12, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx8 = getelementptr inbounds %Array_Class_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Array_Class_, ptr %12, i32 0, i32 2
  store i64 0, ptr %memberidx9, align 4
  store ptr %12, ptr %memberidx7, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Module, ptr %14, i32 0, i32 6
  %15 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Enum_, ptr null, i32 1) to i32))
  call void @Array_Enum__constructor(ptr %15, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx11 = getelementptr inbounds %Array_Enum_, ptr %15, i32 0, i32 1
  %16 = load ptr, ptr %memberidx11, align 8
  %memberidx12 = getelementptr inbounds %Array_Enum_, ptr %15, i32 0, i32 2
  store i64 0, ptr %memberidx12, align 4
  store ptr %15, ptr %memberidx10, align 8
  %17 = load ptr, ptr %this, align 8
  %memberidx13 = getelementptr inbounds %Module, ptr %17, i32 0, i32 7
  %18 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Scope_, ptr null, i32 1) to i32))
  call void @Array_Scope__constructor(ptr %18, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx14 = getelementptr inbounds %Array_Scope_, ptr %18, i32 0, i32 1
  %19 = load ptr, ptr %memberidx14, align 8
  %memberidx15 = getelementptr inbounds %Array_Scope_, ptr %18, i32 0, i32 2
  store i64 0, ptr %memberidx15, align 4
  store ptr %18, ptr %memberidx13, align 8
  %20 = load ptr, ptr %this, align 8
  %memberidx16 = getelementptr inbounds %Module, ptr %20, i32 0, i32 8
  %21 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ConstDeclaration_, ptr null, i32 1) to i32))
  call void @Array_ConstDeclaration__constructor(ptr %21, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx17 = getelementptr inbounds %Array_ConstDeclaration_, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx17, align 8
  %memberidx18 = getelementptr inbounds %Array_ConstDeclaration_, ptr %21, i32 0, i32 2
  store i64 0, ptr %memberidx18, align 4
  store ptr %21, ptr %memberidx16, align 8
  %23 = load ptr, ptr %this, align 8
  %memberidx19 = getelementptr inbounds %Module, ptr %23, i32 0, i32 9
  %24 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_VarDeclaration_, ptr null, i32 1) to i32))
  call void @Array_VarDeclaration__constructor(ptr %24, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx20 = getelementptr inbounds %Array_VarDeclaration_, ptr %24, i32 0, i32 1
  %25 = load ptr, ptr %memberidx20, align 8
  %memberidx21 = getelementptr inbounds %Array_VarDeclaration_, ptr %24, i32 0, i32 2
  store i64 0, ptr %memberidx21, align 4
  store ptr %24, ptr %memberidx19, align 8
  %26 = load ptr, ptr %this, align 8
  %memberidx22 = getelementptr inbounds %Module, ptr %26, i32 0, i32 2
  %27 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Const_, ptr null, i32 1) to i32))
  call void @Array_Const__constructor(ptr %27, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx23 = getelementptr inbounds %Array_Const_, ptr %27, i32 0, i32 1
  %28 = load ptr, ptr %memberidx23, align 8
  %memberidx24 = getelementptr inbounds %Array_Const_, ptr %27, i32 0, i32 2
  store i64 0, ptr %memberidx24, align 4
  store ptr %27, ptr %memberidx22, align 8
  ret void
}

define ptr @Array_Module__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Module_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Module_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Module_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_Module__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Module_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Module_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_Module__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Module_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Module_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Module_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Module_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Module_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_Module____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Module_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Module_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_Module__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Module_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Module_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Module_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_Module____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_Module_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Module_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_Module_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Module_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Module_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_Module_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_Module_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_Module_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_Module_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_Module_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_Module____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Module_, ptr null, i32 1) to i32))
  call void @Array_Module__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Module_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_Module_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_Module_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Module_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_Module_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_Module_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_Module_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_Module_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_Module_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_Module_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_Module____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_Module____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_Module____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_Module__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Module_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Module_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Module_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Module_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_Module_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_Module_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_Module__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Module_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Module_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Module_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Module_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_Module____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_Module_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Module_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Module_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_Module__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_Module____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Module_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_Module____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Module_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_Module____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Module_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_Module____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Module_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_Module_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Module_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_Module____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_Module____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_Module____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_Module_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_Module__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Module_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_Module__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Module_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_Module__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_Module_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Module_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Module_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Module_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @Program_constructor(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Program, ptr %2, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Program, ptr %3, i32 0, i32 1
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Module_, ptr null, i32 1) to i32))
  call void @Array_Module__constructor(ptr %4, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx2 = getelementptr inbounds %Array_Module_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_Module_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  store ptr %4, ptr %memberidx1, align 8
  ret void
}

define void @IdentifierToken_constructor(ptr %0, ptr %1, ptr %2) {
  %range = alloca ptr, align 8
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Token_constructor, ptr %super, align 8
  store ptr %1, ptr %value, align 8
  store ptr %2, ptr %range, align 8
  %4 = load ptr, ptr %super, align 8
  %5 = load ptr, ptr %range, align 8
  call void %4(ptr %0, i64 53, ptr %5)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %IdentifierToken, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %value, align 8
  store ptr %7, ptr %memberidx, align 8
  ret void
}

define void @Token_constructor(ptr %0, i64 %1, ptr %2) {
  %ttype = alloca i64, align 8
  %range = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %ttype, align 4
  store ptr %2, ptr %range, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Token, ptr %4, i32 0, i32 0
  %5 = load i64, ptr %ttype, align 4
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %range, align 8
  store ptr %7, ptr %memberidx1, align 8
  ret void
}

define ptr @Array_Token__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Token_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Token_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Token_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_Token__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Token_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Token_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_Token__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Token_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Token_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Token_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Token_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Token_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_Token____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Token_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Token_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_Token__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Token_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Token_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Token_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_Token____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_Token_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Token_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_Token_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Token_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Token_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_Token_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_Token_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_Token_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_Token_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_Token_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_Token____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Token_, ptr null, i32 1) to i32))
  call void @Array_Token__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Token_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_Token_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_Token_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Token_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_Token_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_Token_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_Token_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_Token_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_Token_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_Token_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_Token____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_Token____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_Token____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_Token__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Token_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Token_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Token_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Token_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_Token_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_Token_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_Token__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Token_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Token_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Token_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Token_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_Token____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_Token_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Token_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Token_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_Token__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_Token____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Token_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_Token____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Token_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_Token____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Token_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_Token____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Token_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_Token_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Token_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_Token____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_Token____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_Token____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_Token_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_Token__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Token_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_Token__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Token_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_Token__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_Token_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Token_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Token_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Token_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define ptr @Array_Array_Token___pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Array_Token__, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Array_Token__, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_Array_Token___find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Array_Token__, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = call i1 @Array_Token____eq__(ptr %11, ptr %12)
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_Array_Token___resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Array_Token__, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Array_Token__, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Array_Token__, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Array_Token__, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_Array_Token_____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Array_Token__, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_Array_Token___resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Array_Token__, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Array_Token__, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Array_Token__, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_Array_Token_____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_Array_Token__, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Array_Token__, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_Array_Token__, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Array_Token__, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Array_Token__, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_Array_Token__, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_Array_Token__, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_Array_Token__, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_Array_Token__, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_Array_Token__, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_Array_Token_____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Array_Token__, ptr null, i32 1) to i32))
  call void @Array_Array_Token___constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_Array_Token__, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_Array_Token__, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Array_Token__, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_Array_Token__, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_Array_Token__, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_Array_Token__, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_Array_Token__, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_Array_Token__, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_Array_Token__, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_Array_Token_____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_Array_Token_____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_Array_Token_____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_Array_Token___next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Array_Token__, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Array_Token__, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Array_Token__, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Array_Token__, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_Array_Token__, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_Array_Token__, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_Array_Token___constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Array_Token__, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Array_Token__, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Array_Token__, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Array_Token__, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_Array_Token_____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_Array_Token__, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Array_Token__, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_Array_Token___constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_Array_Token_____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_Array_Token_____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_Array_Token_____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_Array_Token_____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_Array_Token__, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Array_Token__, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_Array_Token_____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_Array_Token_____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_Array_Token_____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_Array_Token__, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_Array_Token___ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_Array_Token___resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Array_Token__, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_Array_Token___constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_Array_Token__, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Array_Token__, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Array_Token__, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define i64 @Array_uint__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_uint_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_uint_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_uint_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds i64, ptr %7, i64 %3
  %9 = load i64, ptr %8, align 4
  ret i64 %9
}

define i64 @Array_uint__find(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %search = alloca i64, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %search, align 4
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_uint_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_uint_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds i64, ptr %9, i64 %7
  %11 = load i64, ptr %10, align 4
  %12 = load i64, ptr %search, align 4
  %13 = icmp eq i64 %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_uint__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_uint_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_uint_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_uint_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_uint_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_uint_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_uint____sl__(ptr %0, i64 %1) {
  %element = alloca i64, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %element, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_uint_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_uint_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_uint__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_uint_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_uint_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_uint_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds i64, ptr %14, i64 %10
  %16 = load i64, ptr %element, align 4
  store i64 %16, ptr %15, align 4
  ret void
}

define ptr @Array_uint____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_uint_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_uint_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_uint_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_uint_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_uint_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds i64, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_uint_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_uint_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_uint_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_uint_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_uint_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_uint____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_uint_, ptr null, i32 1) to i32))
  call void @Array_uint__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_uint_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_uint_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_uint_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_uint_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_uint_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_uint_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_uint_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_uint_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_uint_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_uint_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_uint____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_uint____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_uint____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define i64 @ArrayIterator_uint__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_uint_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_uint_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_uint_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds i64, ptr %7, i64 %3
  %9 = load i64, ptr %8, align 4
  store i64 %9, ptr %next_elem, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_uint_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_uint_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_uint_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load i64, ptr %next_elem, align 4
  ret i64 %16
}

define void @ArrayIterator_uint__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_uint_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_uint_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_uint_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_uint_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_uint____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_uint_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_uint_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_uint_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_uint__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_uint____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_uint_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_uint____setitem__(ptr %0, i64 %1, i64 %2) {
  %value = alloca i64, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store i64 %2, ptr %value, align 4
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_uint_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds i64, ptr %6, i64 %4
  %8 = load i64, ptr %value, align 4
  store i64 %8, ptr %7, align 4
  ret void
}

define i64 @Array_uint____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_uint_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds i64, ptr %5, i64 %3
  %7 = load i64, ptr %6, align 4
  ret i64 %7
}

define i1 @Array_uint____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_uint_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_uint_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_uint_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call i64 @Array_uint____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call i64 @Array_uint____getitem__(ptr %15, i64 %16)
  %18 = icmp ne i64 %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_uint____in__(ptr %0, i64 %1) {
  %element = alloca i64, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %element, align 4
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_uint_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load i64, ptr %element, align 4
  %8 = call i64 %6(ptr %3, i64 %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_uint__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_uint_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_uint__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_uint_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_uint__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_uint_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_uint_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_uint_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_uint_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @StrToken_constructor(ptr %0, ptr %1, ptr %2, ptr %3, ptr %4) {
  %args = alloca ptr, align 8
  %range = alloca ptr, align 8
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %fmt_indices = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Token_constructor, ptr %super, align 8
  store ptr %1, ptr %args, align 8
  store ptr %2, ptr %fmt_indices, align 8
  store ptr %3, ptr %value, align 8
  store ptr %4, ptr %range, align 8
  %6 = load ptr, ptr %super, align 8
  %7 = load ptr, ptr %range, align 8
  call void %6(ptr %0, i64 34, ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %StrToken, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %value, align 8
  store ptr %9, ptr %memberidx, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %StrToken, ptr %10, i32 0, i32 3
  %11 = load ptr, ptr %fmt_indices, align 8
  store ptr %11, ptr %memberidx1, align 8
  %12 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %StrToken, ptr %12, i32 0, i32 4
  %13 = load ptr, ptr %args, align 8
  store ptr %13, ptr %memberidx2, align 8
  ret void
}

define void @ImportClause_constructor(ptr %0, ptr %1) {
  %original_identifer = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %original_identifer, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ImportClause, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %original_identifer, align 8
  store ptr %4, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ImportClause, ptr %5, i32 0, i32 1
  store ptr null, ptr %memberidx1, align 8
  ret void
}

define ptr @Array_ImportClause__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ImportClause_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ImportClause_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ImportClause_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_ImportClause__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ImportClause_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ImportClause_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_ImportClause__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ImportClause_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ImportClause_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ImportClause_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ImportClause_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ImportClause_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_ImportClause____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ImportClause_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ImportClause_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_ImportClause__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ImportClause_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ImportClause_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ImportClause_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_ImportClause____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_ImportClause_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ImportClause_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_ImportClause_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ImportClause_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ImportClause_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_ImportClause_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_ImportClause_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_ImportClause_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_ImportClause_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_ImportClause_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_ImportClause____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ImportClause_, ptr null, i32 1) to i32))
  call void @Array_ImportClause__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_ImportClause_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_ImportClause_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_ImportClause_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ImportClause_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_ImportClause_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_ImportClause_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_ImportClause_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_ImportClause_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_ImportClause_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_ImportClause_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_ImportClause____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_ImportClause____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_ImportClause____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_ImportClause__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_ImportClause_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_ImportClause_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_ImportClause_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_ImportClause_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_ImportClause_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_ImportClause_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_ImportClause__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_ImportClause_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_ImportClause_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_ImportClause_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_ImportClause_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_ImportClause____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_ImportClause_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ImportClause_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ImportClause_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_ImportClause__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_ImportClause____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ImportClause_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_ImportClause____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ImportClause_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_ImportClause____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ImportClause_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_ImportClause____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ImportClause_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_ImportClause_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ImportClause_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_ImportClause____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_ImportClause____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_ImportClause____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_ImportClause_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_ImportClause__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ImportClause_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_ImportClause__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ImportClause_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_ImportClause__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_ImportClause_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ImportClause_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ImportClause_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ImportClause_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @ImportNode_constructor(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ImportNode, ptr %2, i32 0, i32 0
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ImportClause_, ptr null, i32 1) to i32))
  call void @Array_ImportClause__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx1 = getelementptr inbounds %Array_ImportClause_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_ImportClause_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  store ptr %3, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ImportNode, ptr %5, i32 0, i32 2
  store ptr null, ptr %memberidx3, align 8
  ret void
}

define ptr @Array_ImportNode__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ImportNode_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ImportNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_ImportNode__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ImportNode_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_ImportNode__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ImportNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ImportNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ImportNode_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ImportNode_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_ImportNode____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ImportNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_ImportNode__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ImportNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ImportNode_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ImportNode_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_ImportNode____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_ImportNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ImportNode_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_ImportNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ImportNode_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ImportNode_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_ImportNode_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_ImportNode_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_ImportNode_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_ImportNode_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_ImportNode_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_ImportNode____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ImportNode_, ptr null, i32 1) to i32))
  call void @Array_ImportNode__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_ImportNode_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_ImportNode_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ImportNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_ImportNode_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_ImportNode_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_ImportNode_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_ImportNode_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_ImportNode_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_ImportNode_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_ImportNode____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_ImportNode____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_ImportNode____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_ImportNode__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_ImportNode_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_ImportNode_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_ImportNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_ImportNode_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_ImportNode_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_ImportNode_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_ImportNode__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_ImportNode_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_ImportNode_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_ImportNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_ImportNode_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_ImportNode____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_ImportNode_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ImportNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_ImportNode__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_ImportNode____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_ImportNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_ImportNode____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_ImportNode____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_ImportNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ImportNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_ImportNode____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_ImportNode____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_ImportNode____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_ImportNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_ImportNode__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_ImportNode__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ImportNode_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_ImportNode__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_ImportNode_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ImportNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ImportNode_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @TypeNode_constructor(ptr %0, i64 %1, ptr %2) {
  %range = alloca ptr, align 8
  %kind = alloca i64, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Node_constructor, ptr %super, align 8
  store i64 %1, ptr %kind, align 4
  store ptr %2, ptr %range, align 8
  %4 = load ptr, ptr %super, align 8
  %5 = load ptr, ptr %range, align 8
  call void %4(ptr %0, ptr %5)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeNode, ptr %6, i32 0, i32 1
  %7 = load i64, ptr %kind, align 4
  store i64 %7, ptr %memberidx, align 4
  ret void
}

define void @Node_constructor(ptr %0, ptr %1) {
  %range = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %range, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Node, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %range, align 8
  store ptr %4, ptr %memberidx, align 8
  ret void
}

define void @ExpressionNode_constructor(ptr %0, i64 %1, ptr %2) {
  %range = alloca ptr, align 8
  %expr_kind = alloca i64, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @StatementNode_constructor, ptr %super, align 8
  store i64 %1, ptr %expr_kind, align 4
  store ptr %2, ptr %range, align 8
  %4 = load ptr, ptr %super, align 8
  %5 = load ptr, ptr %range, align 8
  call void %4(ptr %0, i64 8, ptr %5)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ExpressionNode, ptr %6, i32 0, i32 2
  %7 = load i64, ptr %expr_kind, align 4
  store i64 %7, ptr %memberidx, align 4
  ret void
}

define void @StatementNode_constructor(ptr %0, i64 %1, ptr %2) {
  %range = alloca ptr, align 8
  %kind = alloca i64, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Node_constructor, ptr %super, align 8
  store i64 %1, ptr %kind, align 4
  store ptr %2, ptr %range, align 8
  %4 = load ptr, ptr %super, align 8
  %5 = load ptr, ptr %range, align 8
  call void %4(ptr %0, ptr %5)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %StatementNode, ptr %6, i32 0, i32 1
  %7 = load i64, ptr %kind, align 4
  store i64 %7, ptr %memberidx, align 4
  ret void
}

define void @VarDeclarationStatement_constructor(ptr %0, ptr %1) {
  %range = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @StatementNode_constructor, ptr %super, align 8
  store ptr %1, ptr %range, align 8
  %3 = load ptr, ptr %super, align 8
  %4 = load ptr, ptr %range, align 8
  call void %3(ptr %0, i64 1, ptr %4)
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %VarDeclarationStatement, ptr %5, i32 0, i32 3
  store ptr null, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %VarDeclarationStatement, ptr %6, i32 0, i32 4
  store ptr null, ptr %memberidx1, align 8
  ret void
}

define ptr @Array_VarDeclarationStatement__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_VarDeclarationStatement__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_VarDeclarationStatement__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_VarDeclarationStatement____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_VarDeclarationStatement__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_VarDeclarationStatement____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_VarDeclarationStatement____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_VarDeclarationStatement_, ptr null, i32 1) to i32))
  call void @Array_VarDeclarationStatement__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_VarDeclarationStatement____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_VarDeclarationStatement____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_VarDeclarationStatement____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_VarDeclarationStatement__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_VarDeclarationStatement_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_VarDeclarationStatement_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_VarDeclarationStatement_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_VarDeclarationStatement_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_VarDeclarationStatement_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_VarDeclarationStatement_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_VarDeclarationStatement__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_VarDeclarationStatement_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_VarDeclarationStatement_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_VarDeclarationStatement_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_VarDeclarationStatement_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_VarDeclarationStatement____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_VarDeclarationStatement_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_VarDeclarationStatement__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_VarDeclarationStatement____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_VarDeclarationStatement____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_VarDeclarationStatement____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_VarDeclarationStatement____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_VarDeclarationStatement____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_VarDeclarationStatement____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_VarDeclarationStatement____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_VarDeclarationStatement__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_VarDeclarationStatement__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_VarDeclarationStatement__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_VarDeclarationStatement_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @EnumNodeField_constructor(ptr %0, ptr %1) {
  %name = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %name, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %EnumNodeField, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %name, align 8
  store ptr %4, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %EnumNodeField, ptr %5, i32 0, i32 1
  store ptr null, ptr %memberidx1, align 8
  ret void
}

define ptr @Array_EnumNodeField__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumNodeField_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_EnumNodeField_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_EnumNodeField__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumNodeField_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_EnumNodeField__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumNodeField_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_EnumNodeField_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_EnumNodeField_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_EnumNodeField_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_EnumNodeField____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumNodeField_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_EnumNodeField__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_EnumNodeField_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_EnumNodeField_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_EnumNodeField_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_EnumNodeField____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_EnumNodeField_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumNodeField_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_EnumNodeField_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_EnumNodeField_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_EnumNodeField_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_EnumNodeField_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_EnumNodeField_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_EnumNodeField_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_EnumNodeField_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_EnumNodeField_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_EnumNodeField____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_EnumNodeField_, ptr null, i32 1) to i32))
  call void @Array_EnumNodeField__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumNodeField_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_EnumNodeField_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_EnumNodeField_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_EnumNodeField_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_EnumNodeField_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_EnumNodeField_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_EnumNodeField_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_EnumNodeField_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_EnumNodeField_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_EnumNodeField____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_EnumNodeField____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_EnumNodeField____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_EnumNodeField__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_EnumNodeField_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_EnumNodeField_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_EnumNodeField_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_EnumNodeField_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_EnumNodeField_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_EnumNodeField_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_EnumNodeField__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_EnumNodeField_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_EnumNodeField_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_EnumNodeField_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_EnumNodeField_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_EnumNodeField____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_EnumNodeField_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumNodeField_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_EnumNodeField__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_EnumNodeField____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_EnumNodeField____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_EnumNodeField____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_EnumNodeField____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumNodeField_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_EnumNodeField_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_EnumNodeField____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_EnumNodeField____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_EnumNodeField____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_EnumNodeField_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_EnumNodeField__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_EnumNodeField__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumNodeField_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_EnumNodeField__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_EnumNodeField_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumNodeField_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_EnumNodeField_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @EnumNode_constructor(ptr %0, ptr %1) {
  %name = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %name, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %EnumNode, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %name, align 8
  store ptr %4, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %EnumNode, ptr %5, i32 0, i32 1
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_EnumNodeField_, ptr null, i32 1) to i32))
  call void @Array_EnumNodeField__constructor(ptr %6, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx2 = getelementptr inbounds %Array_EnumNodeField_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_EnumNodeField_, ptr %6, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  store ptr %6, ptr %memberidx1, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %EnumNode, ptr %8, i32 0, i32 2
  store ptr null, ptr %memberidx4, align 8
  ret void
}

define ptr @Array_EnumNode__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumNode_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_EnumNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_EnumNode__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumNode_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_EnumNode__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_EnumNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_EnumNode_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_EnumNode_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_EnumNode____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_EnumNode__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_EnumNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_EnumNode_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_EnumNode_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_EnumNode____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_EnumNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumNode_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_EnumNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_EnumNode_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_EnumNode_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_EnumNode_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_EnumNode_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_EnumNode_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_EnumNode_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_EnumNode_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_EnumNode____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_EnumNode_, ptr null, i32 1) to i32))
  call void @Array_EnumNode__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumNode_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_EnumNode_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_EnumNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_EnumNode_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_EnumNode_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_EnumNode_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_EnumNode_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_EnumNode_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_EnumNode_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_EnumNode____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_EnumNode____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_EnumNode____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_EnumNode__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_EnumNode_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_EnumNode_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_EnumNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_EnumNode_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_EnumNode_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_EnumNode_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_EnumNode__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_EnumNode_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_EnumNode_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_EnumNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_EnumNode_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_EnumNode____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_EnumNode_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_EnumNode__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_EnumNode____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_EnumNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_EnumNode____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_EnumNode____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_EnumNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_EnumNode____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_EnumNode____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_EnumNode____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_EnumNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_EnumNode__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_EnumNode__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumNode_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_EnumNode__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_EnumNode_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_EnumNode_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @TypeAliasNode_constructor(ptr %0, ptr %1) {
  %name = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %name, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeAliasNode, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %name, align 8
  store ptr %4, ptr %memberidx, align 8
  ret void
}

define ptr @Array_TypeAliasNode__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_TypeAliasNode_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_TypeAliasNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_TypeAliasNode__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_TypeAliasNode_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_TypeAliasNode__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_TypeAliasNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_TypeAliasNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_TypeAliasNode_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_TypeAliasNode_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_TypeAliasNode____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_TypeAliasNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_TypeAliasNode__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_TypeAliasNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_TypeAliasNode_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_TypeAliasNode_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_TypeAliasNode____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_TypeAliasNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_TypeAliasNode_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_TypeAliasNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_TypeAliasNode_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_TypeAliasNode_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_TypeAliasNode_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_TypeAliasNode_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_TypeAliasNode_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_TypeAliasNode_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_TypeAliasNode_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_TypeAliasNode____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_TypeAliasNode_, ptr null, i32 1) to i32))
  call void @Array_TypeAliasNode__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_TypeAliasNode_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_TypeAliasNode_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_TypeAliasNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_TypeAliasNode_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_TypeAliasNode_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_TypeAliasNode_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_TypeAliasNode_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_TypeAliasNode_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_TypeAliasNode_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_TypeAliasNode____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_TypeAliasNode____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_TypeAliasNode____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_TypeAliasNode__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_TypeAliasNode_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_TypeAliasNode_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_TypeAliasNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_TypeAliasNode_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_TypeAliasNode_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_TypeAliasNode_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_TypeAliasNode__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_TypeAliasNode_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_TypeAliasNode_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_TypeAliasNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_TypeAliasNode_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_TypeAliasNode____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_TypeAliasNode_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_TypeAliasNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_TypeAliasNode__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_TypeAliasNode____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_TypeAliasNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_TypeAliasNode____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_TypeAliasNode____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_TypeAliasNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_TypeAliasNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_TypeAliasNode____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_TypeAliasNode____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_TypeAliasNode____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_TypeAliasNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_TypeAliasNode__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_TypeAliasNode__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_TypeAliasNode_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_TypeAliasNode__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_TypeAliasNode_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_TypeAliasNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_TypeAliasNode_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @ConstDeclarationStatement_constructor(ptr %0, ptr %1) {
  %range = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @StatementNode_constructor, ptr %super, align 8
  store ptr %1, ptr %range, align 8
  %3 = load ptr, ptr %super, align 8
  %4 = load ptr, ptr %range, align 8
  call void %3(ptr %0, i64 2, ptr %4)
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ConstDeclarationStatement, ptr %5, i32 0, i32 3
  store ptr null, ptr %memberidx, align 8
  ret void
}

define ptr @Array_ConstDeclarationStatement__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_ConstDeclarationStatement__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_ConstDeclarationStatement__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_ConstDeclarationStatement____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_ConstDeclarationStatement__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_ConstDeclarationStatement____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_ConstDeclarationStatement____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ConstDeclarationStatement_, ptr null, i32 1) to i32))
  call void @Array_ConstDeclarationStatement__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_ConstDeclarationStatement____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_ConstDeclarationStatement____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_ConstDeclarationStatement____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_ConstDeclarationStatement__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_ConstDeclarationStatement_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_ConstDeclarationStatement_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_ConstDeclarationStatement_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_ConstDeclarationStatement_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_ConstDeclarationStatement_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_ConstDeclarationStatement_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_ConstDeclarationStatement__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_ConstDeclarationStatement_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_ConstDeclarationStatement_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_ConstDeclarationStatement_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_ConstDeclarationStatement_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_ConstDeclarationStatement____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_ConstDeclarationStatement_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_ConstDeclarationStatement__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_ConstDeclarationStatement____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_ConstDeclarationStatement____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_ConstDeclarationStatement____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_ConstDeclarationStatement____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_ConstDeclarationStatement____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_ConstDeclarationStatement____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_ConstDeclarationStatement____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_ConstDeclarationStatement__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_ConstDeclarationStatement__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_ConstDeclarationStatement__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_ConstDeclarationStatement_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @ArgNode_constructor(ptr %0, ptr %1) {
  %name = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %name, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArgNode, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %name, align 8
  store ptr %4, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArgNode, ptr %5, i32 0, i32 1
  store ptr null, ptr %memberidx1, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArgNode, ptr %6, i32 0, i32 2
  store ptr null, ptr %memberidx2, align 8
  ret void
}

define ptr @Array_ArgNode__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ArgNode_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ArgNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_ArgNode__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ArgNode_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_ArgNode__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ArgNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ArgNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ArgNode_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ArgNode_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_ArgNode____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ArgNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_ArgNode__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ArgNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ArgNode_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ArgNode_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_ArgNode____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_ArgNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ArgNode_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_ArgNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ArgNode_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ArgNode_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_ArgNode_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_ArgNode_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_ArgNode_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_ArgNode_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_ArgNode_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_ArgNode____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ArgNode_, ptr null, i32 1) to i32))
  call void @Array_ArgNode__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_ArgNode_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_ArgNode_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ArgNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_ArgNode_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_ArgNode_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_ArgNode_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_ArgNode_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_ArgNode_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_ArgNode_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_ArgNode____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_ArgNode____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_ArgNode____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_ArgNode__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_ArgNode_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_ArgNode_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_ArgNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_ArgNode_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_ArgNode_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_ArgNode_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_ArgNode__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_ArgNode_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_ArgNode_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_ArgNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_ArgNode_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_ArgNode____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_ArgNode_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ArgNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_ArgNode__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_ArgNode____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_ArgNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_ArgNode____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_ArgNode____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_ArgNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ArgNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_ArgNode____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_ArgNode____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_ArgNode____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_ArgNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_ArgNode__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_ArgNode__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ArgNode_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_ArgNode__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_ArgNode_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ArgNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ArgNode_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define ptr @Array_StatementNode__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_StatementNode_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_StatementNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_StatementNode__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_StatementNode_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_StatementNode__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_StatementNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_StatementNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_StatementNode_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_StatementNode_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_StatementNode____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_StatementNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_StatementNode__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_StatementNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_StatementNode_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_StatementNode_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_StatementNode____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_StatementNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_StatementNode_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_StatementNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_StatementNode_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_StatementNode_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_StatementNode_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_StatementNode_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_StatementNode_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_StatementNode_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_StatementNode_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_StatementNode____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_StatementNode_, ptr null, i32 1) to i32))
  call void @Array_StatementNode__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_StatementNode_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_StatementNode_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_StatementNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_StatementNode_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_StatementNode_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_StatementNode_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_StatementNode_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_StatementNode_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_StatementNode_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_StatementNode____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_StatementNode____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_StatementNode____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_StatementNode__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_StatementNode_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_StatementNode_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_StatementNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_StatementNode_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_StatementNode_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_StatementNode_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_StatementNode__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_StatementNode_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_StatementNode_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_StatementNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_StatementNode_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_StatementNode____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_StatementNode_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_StatementNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_StatementNode__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_StatementNode____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_StatementNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_StatementNode____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_StatementNode____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_StatementNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_StatementNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_StatementNode____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_StatementNode____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_StatementNode____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_StatementNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_StatementNode__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_StatementNode__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_StatementNode_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_StatementNode__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_StatementNode_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_StatementNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_StatementNode_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @BlockNode_constructor(ptr %0, ptr %1) {
  %range = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Node_constructor, ptr %super, align 8
  store ptr %1, ptr %range, align 8
  %3 = load ptr, ptr %super, align 8
  %4 = load ptr, ptr %range, align 8
  call void %3(ptr %0, ptr %4)
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %BlockNode, ptr %5, i32 0, i32 1
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_StatementNode_, ptr null, i32 1) to i32))
  call void @Array_StatementNode__constructor(ptr %6, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx1 = getelementptr inbounds %Array_StatementNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_StatementNode_, ptr %6, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  store ptr %6, ptr %memberidx, align 8
  ret void
}

define void @MethodNode_constructor(ptr %0, ptr %1) {
  %name = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %name, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MethodNode, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %name, align 8
  store ptr %4, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MethodNode, ptr %5, i32 0, i32 1
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ArgNode_, ptr null, i32 1) to i32))
  call void @Array_ArgNode__constructor(ptr %6, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx2 = getelementptr inbounds %Array_ArgNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_ArgNode_, ptr %6, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  store ptr %6, ptr %memberidx1, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %MethodNode, ptr %8, i32 0, i32 5
  store i1 true, ptr %memberidx4, align 1
  %9 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %MethodNode, ptr %9, i32 0, i32 6
  store i1 false, ptr %memberidx5, align 1
  ret void
}

define ptr @Array_MethodNode__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_MethodNode_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_MethodNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_MethodNode__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_MethodNode_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_MethodNode__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_MethodNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_MethodNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_MethodNode_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_MethodNode_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_MethodNode____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_MethodNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_MethodNode__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_MethodNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_MethodNode_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_MethodNode_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_MethodNode____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_MethodNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_MethodNode_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_MethodNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_MethodNode_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_MethodNode_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_MethodNode_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_MethodNode_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_MethodNode_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_MethodNode_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_MethodNode_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_MethodNode____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_MethodNode_, ptr null, i32 1) to i32))
  call void @Array_MethodNode__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_MethodNode_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_MethodNode_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_MethodNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_MethodNode_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_MethodNode_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_MethodNode_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_MethodNode_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_MethodNode_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_MethodNode_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_MethodNode____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_MethodNode____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_MethodNode____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_MethodNode__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_MethodNode_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_MethodNode_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_MethodNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_MethodNode_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_MethodNode_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_MethodNode_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_MethodNode__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_MethodNode_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_MethodNode_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_MethodNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_MethodNode_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_MethodNode____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_MethodNode_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_MethodNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_MethodNode__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_MethodNode____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_MethodNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_MethodNode____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_MethodNode____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_MethodNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_MethodNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_MethodNode____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_MethodNode____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_MethodNode____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_MethodNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_MethodNode__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_MethodNode__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_MethodNode_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_MethodNode__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_MethodNode_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_MethodNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_MethodNode_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @FieldNode_constructor(ptr %0, ptr %1) {
  %name = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %name, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %FieldNode, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %name, align 8
  store ptr %4, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %FieldNode, ptr %5, i32 0, i32 2
  store ptr null, ptr %memberidx1, align 8
  ret void
}

define ptr @Array_FieldNode__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FieldNode_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FieldNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_FieldNode__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FieldNode_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_FieldNode__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FieldNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FieldNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_FieldNode_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_FieldNode_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_FieldNode____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FieldNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_FieldNode__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FieldNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_FieldNode_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_FieldNode_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_FieldNode____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_FieldNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FieldNode_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_FieldNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_FieldNode_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_FieldNode_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_FieldNode_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_FieldNode_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_FieldNode_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_FieldNode_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_FieldNode_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_FieldNode____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_FieldNode_, ptr null, i32 1) to i32))
  call void @Array_FieldNode__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_FieldNode_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_FieldNode_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_FieldNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_FieldNode_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_FieldNode_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_FieldNode_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_FieldNode_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_FieldNode_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_FieldNode_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_FieldNode____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_FieldNode____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_FieldNode____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_FieldNode__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_FieldNode_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_FieldNode_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_FieldNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_FieldNode_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_FieldNode_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_FieldNode_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_FieldNode__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_FieldNode_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_FieldNode_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_FieldNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_FieldNode_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_FieldNode____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_FieldNode_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FieldNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_FieldNode__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_FieldNode____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_FieldNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_FieldNode____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_FieldNode____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_FieldNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FieldNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_FieldNode____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_FieldNode____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_FieldNode____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_FieldNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_FieldNode__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_FieldNode__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FieldNode_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_FieldNode__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_FieldNode_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FieldNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FieldNode_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define ptr @Array_TypeNode__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_TypeNode_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_TypeNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_TypeNode__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_TypeNode_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_TypeNode__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_TypeNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_TypeNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_TypeNode_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_TypeNode_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_TypeNode____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_TypeNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_TypeNode__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_TypeNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_TypeNode_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_TypeNode_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_TypeNode____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_TypeNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_TypeNode_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_TypeNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_TypeNode_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_TypeNode_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_TypeNode_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_TypeNode_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_TypeNode_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_TypeNode_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_TypeNode_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_TypeNode____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_TypeNode_, ptr null, i32 1) to i32))
  call void @Array_TypeNode__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_TypeNode_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_TypeNode_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_TypeNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_TypeNode_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_TypeNode_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_TypeNode_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_TypeNode_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_TypeNode_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_TypeNode_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_TypeNode____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_TypeNode____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_TypeNode____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_TypeNode__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_TypeNode__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_TypeNode____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_TypeNode_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_TypeNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_TypeNode__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_TypeNode____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_TypeNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_TypeNode____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_TypeNode____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_TypeNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_TypeNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_TypeNode____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_TypeNode____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_TypeNode____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_TypeNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_TypeNode__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_TypeNode__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_TypeNode_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_TypeNode__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_TypeNode_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_TypeNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_TypeNode_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @RecordTypeNode_constructor(ptr %0, ptr %1, ptr %2) {
  %range = alloca ptr, align 8
  %name = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @TypeNode_constructor, ptr %super, align 8
  store ptr %1, ptr %name, align 8
  store ptr %2, ptr %range, align 8
  %4 = load ptr, ptr %super, align 8
  %5 = load ptr, ptr %range, align 8
  call void %4(ptr %0, i64 17, ptr %5)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %RecordTypeNode, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %name, align 8
  store ptr %7, ptr %memberidx, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %RecordTypeNode, ptr %8, i32 0, i32 3
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_TypeNode_, ptr null, i32 1) to i32))
  call void @Array_TypeNode__constructor(ptr %9, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx2 = getelementptr inbounds %Array_TypeNode_, ptr %9, i32 0, i32 1
  %10 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_TypeNode_, ptr %9, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  store ptr %9, ptr %memberidx1, align 8
  ret void
}

define void @GenericParameterNode_constructor(ptr %0, ptr %1) {
  %name = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %name, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %GenericParameterNode, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %name, align 8
  store ptr %4, ptr %memberidx, align 8
  ret void
}

define ptr @Array_GenericParameterNode__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_GenericParameterNode_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_GenericParameterNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_GenericParameterNode__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_GenericParameterNode_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_GenericParameterNode__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_GenericParameterNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_GenericParameterNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_GenericParameterNode_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_GenericParameterNode_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_GenericParameterNode____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_GenericParameterNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_GenericParameterNode__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_GenericParameterNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_GenericParameterNode_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_GenericParameterNode_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_GenericParameterNode____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_GenericParameterNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_GenericParameterNode_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_GenericParameterNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_GenericParameterNode_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_GenericParameterNode_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_GenericParameterNode_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_GenericParameterNode_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_GenericParameterNode_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_GenericParameterNode_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_GenericParameterNode_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_GenericParameterNode____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_GenericParameterNode_, ptr null, i32 1) to i32))
  call void @Array_GenericParameterNode__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_GenericParameterNode_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_GenericParameterNode_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_GenericParameterNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_GenericParameterNode_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_GenericParameterNode_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_GenericParameterNode_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_GenericParameterNode_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_GenericParameterNode_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_GenericParameterNode_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_GenericParameterNode____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_GenericParameterNode____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_GenericParameterNode____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_GenericParameterNode__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_GenericParameterNode_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_GenericParameterNode_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_GenericParameterNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_GenericParameterNode_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_GenericParameterNode_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_GenericParameterNode_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_GenericParameterNode__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_GenericParameterNode_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_GenericParameterNode_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_GenericParameterNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_GenericParameterNode_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_GenericParameterNode____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_GenericParameterNode_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_GenericParameterNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_GenericParameterNode__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_GenericParameterNode____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_GenericParameterNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_GenericParameterNode____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_GenericParameterNode____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_GenericParameterNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_GenericParameterNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_GenericParameterNode____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_GenericParameterNode____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_GenericParameterNode____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_GenericParameterNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_GenericParameterNode__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_GenericParameterNode__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_GenericParameterNode_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_GenericParameterNode__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_GenericParameterNode_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_GenericParameterNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_GenericParameterNode_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @ClassDeclarationNode_constructor(ptr %0, ptr %1) {
  %name = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %name, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ClassDeclarationNode, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %name, align 8
  store ptr %4, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ClassDeclarationNode, ptr %5, i32 0, i32 3
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_FieldNode_, ptr null, i32 1) to i32))
  call void @Array_FieldNode__constructor(ptr %6, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx2 = getelementptr inbounds %Array_FieldNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_FieldNode_, ptr %6, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  store ptr %6, ptr %memberidx1, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ClassDeclarationNode, ptr %8, i32 0, i32 4
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_MethodNode_, ptr null, i32 1) to i32))
  call void @Array_MethodNode__constructor(ptr %9, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx5 = getelementptr inbounds %Array_MethodNode_, ptr %9, i32 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %Array_MethodNode_, ptr %9, i32 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  store ptr %9, ptr %memberidx4, align 8
  %11 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %ClassDeclarationNode, ptr %11, i32 0, i32 1
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_GenericParameterNode_, ptr null, i32 1) to i32))
  call void @Array_GenericParameterNode__constructor(ptr %12, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx8 = getelementptr inbounds %Array_GenericParameterNode_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Array_GenericParameterNode_, ptr %12, i32 0, i32 2
  store i64 0, ptr %memberidx9, align 4
  store ptr %12, ptr %memberidx7, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %ClassDeclarationNode, ptr %14, i32 0, i32 2
  store ptr null, ptr %memberidx10, align 8
  ret void
}

define ptr @Array_ClassDeclarationNode__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_ClassDeclarationNode__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_ClassDeclarationNode__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_ClassDeclarationNode____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_ClassDeclarationNode__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_ClassDeclarationNode____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_ClassDeclarationNode____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ClassDeclarationNode_, ptr null, i32 1) to i32))
  call void @Array_ClassDeclarationNode__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_ClassDeclarationNode____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_ClassDeclarationNode____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_ClassDeclarationNode____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_ClassDeclarationNode__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_ClassDeclarationNode__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_ClassDeclarationNode____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_ClassDeclarationNode_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_ClassDeclarationNode__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_ClassDeclarationNode____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_ClassDeclarationNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_ClassDeclarationNode____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_ClassDeclarationNode____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_ClassDeclarationNode____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_ClassDeclarationNode____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_ClassDeclarationNode____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_ClassDeclarationNode__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_ClassDeclarationNode__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_ClassDeclarationNode__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_ClassDeclarationNode_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @FunctionDeclarationNode_constructor(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %FunctionDeclarationNode, ptr %2, i32 0, i32 1
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ArgNode_, ptr null, i32 1) to i32))
  call void @Array_ArgNode__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx1 = getelementptr inbounds %Array_ArgNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_ArgNode_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  store ptr %3, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %FunctionDeclarationNode, ptr %5, i32 0, i32 4
  store i1 false, ptr %memberidx3, align 1
  ret void
}

define ptr @Array_FunctionDeclarationNode__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_FunctionDeclarationNode__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_FunctionDeclarationNode__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_FunctionDeclarationNode____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_FunctionDeclarationNode__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_FunctionDeclarationNode____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_FunctionDeclarationNode____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_FunctionDeclarationNode_, ptr null, i32 1) to i32))
  call void @Array_FunctionDeclarationNode__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_FunctionDeclarationNode____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_FunctionDeclarationNode____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_FunctionDeclarationNode____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_FunctionDeclarationNode__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_FunctionDeclarationNode_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_FunctionDeclarationNode_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_FunctionDeclarationNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_FunctionDeclarationNode_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_FunctionDeclarationNode_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_FunctionDeclarationNode_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_FunctionDeclarationNode__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_FunctionDeclarationNode_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_FunctionDeclarationNode_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_FunctionDeclarationNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_FunctionDeclarationNode_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_FunctionDeclarationNode____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_FunctionDeclarationNode_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_FunctionDeclarationNode__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_FunctionDeclarationNode____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_FunctionDeclarationNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_FunctionDeclarationNode____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_FunctionDeclarationNode____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_FunctionDeclarationNode____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_FunctionDeclarationNode____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_FunctionDeclarationNode____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_FunctionDeclarationNode__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_FunctionDeclarationNode__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_FunctionDeclarationNode__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_FunctionDeclarationNode_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @ModuleAST_constructor(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ModuleAST, ptr %2, i32 0, i32 0
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_FunctionDeclarationNode_, ptr null, i32 1) to i32))
  call void @Array_FunctionDeclarationNode__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx1 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  store ptr %3, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ModuleAST, ptr %5, i32 0, i32 1
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ClassDeclarationNode_, ptr null, i32 1) to i32))
  call void @Array_ClassDeclarationNode__constructor(ptr %6, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx4 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %6, i32 0, i32 2
  store i64 0, ptr %memberidx5, align 4
  store ptr %6, ptr %memberidx3, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %ModuleAST, ptr %8, i32 0, i32 3
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ImportNode_, ptr null, i32 1) to i32))
  call void @Array_ImportNode__constructor(ptr %9, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx7 = getelementptr inbounds %Array_ImportNode_, ptr %9, i32 0, i32 1
  %10 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Array_ImportNode_, ptr %9, i32 0, i32 2
  store i64 0, ptr %memberidx8, align 4
  store ptr %9, ptr %memberidx6, align 8
  %11 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %ModuleAST, ptr %11, i32 0, i32 4
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ConstDeclarationStatement_, ptr null, i32 1) to i32))
  call void @Array_ConstDeclarationStatement__constructor(ptr %12, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx10 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx10, align 8
  %memberidx11 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %12, i32 0, i32 2
  store i64 0, ptr %memberidx11, align 4
  store ptr %12, ptr %memberidx9, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %ModuleAST, ptr %14, i32 0, i32 5
  %15 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_VarDeclarationStatement_, ptr null, i32 1) to i32))
  call void @Array_VarDeclarationStatement__constructor(ptr %15, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx13 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %15, i32 0, i32 1
  %16 = load ptr, ptr %memberidx13, align 8
  %memberidx14 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %15, i32 0, i32 2
  store i64 0, ptr %memberidx14, align 4
  store ptr %15, ptr %memberidx12, align 8
  %17 = load ptr, ptr %this, align 8
  %memberidx15 = getelementptr inbounds %ModuleAST, ptr %17, i32 0, i32 2
  %18 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_EnumNode_, ptr null, i32 1) to i32))
  call void @Array_EnumNode__constructor(ptr %18, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx16 = getelementptr inbounds %Array_EnumNode_, ptr %18, i32 0, i32 1
  %19 = load ptr, ptr %memberidx16, align 8
  %memberidx17 = getelementptr inbounds %Array_EnumNode_, ptr %18, i32 0, i32 2
  store i64 0, ptr %memberidx17, align 4
  store ptr %18, ptr %memberidx15, align 8
  %20 = load ptr, ptr %this, align 8
  %memberidx18 = getelementptr inbounds %ModuleAST, ptr %20, i32 0, i32 6
  %21 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_TypeAliasNode_, ptr null, i32 1) to i32))
  call void @Array_TypeAliasNode__constructor(ptr %21, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx19 = getelementptr inbounds %Array_TypeAliasNode_, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx19, align 8
  %memberidx20 = getelementptr inbounds %Array_TypeAliasNode_, ptr %21, i32 0, i32 2
  store i64 0, ptr %memberidx20, align 4
  store ptr %21, ptr %memberidx18, align 8
  ret void
}

define ptr @Lexer_tokenize(ptr %0, ptr %1) {
  %errors = alloca ptr, align 8
  %text = alloca ptr, align 8
  %lexer = alloca ptr, align 8
  %tokens = alloca ptr, align 8
  store ptr %0, ptr %text, align 8
  store ptr %1, ptr %errors, align 8
  %3 = alloca %Lexer, align 8
  %4 = load ptr, ptr %text, align 8
  %5 = load ptr, ptr %errors, align 8
  call void @Lexer_constructor(ptr %3, ptr %4, ptr %5)
  store ptr %3, ptr %lexer, align 8
  %6 = load ptr, ptr %lexer, align 8
  call void @Lexer_advance(ptr %6)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Token_, ptr null, i32 1) to i32))
  call void @Array_Token__constructor(ptr %7, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Token_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_Token_, ptr %7, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %7, ptr %tokens, align 8
  %9 = load ptr, ptr %lexer, align 8
  %10 = call i1 @Lexer_eof(ptr %9)
  %11 = xor i1 %10, true
  %12 = load ptr, ptr %lexer, align 8
  %memberidx2 = getelementptr inbounds %Lexer, ptr %12, i32 0, i32 2
  %13 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_FloError_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx3, align 4
  %15 = icmp eq i64 %14, 0
  %16 = and i1 %11, %15
  br i1 %16, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %17 = load ptr, ptr %tokens, align 8
  %18 = load ptr, ptr %lexer, align 8
  %19 = call ptr @Lexer_lex_token(ptr %18)
  call void @Array_Token____sl__(ptr %17, ptr %19)
  %20 = load ptr, ptr %lexer, align 8
  call void @Lexer_advance(ptr %20)
  %21 = load ptr, ptr %lexer, align 8
  %22 = call i1 @Lexer_eof(ptr %21)
  %23 = xor i1 %22, true
  %24 = load ptr, ptr %lexer, align 8
  %memberidx4 = getelementptr inbounds %Lexer, ptr %24, i32 0, i32 2
  %25 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Array_FloError_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx5, align 4
  %27 = icmp eq i64 %26, 0
  %28 = and i1 %23, %27
  br i1 %28, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  %29 = load ptr, ptr %tokens, align 8
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %31 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloRange, ptr null, i32 1) to i32))
  %32 = load ptr, ptr %lexer, align 8
  %memberidx6 = getelementptr inbounds %Lexer, ptr %32, i32 0, i32 4
  %33 = load i64, ptr %memberidx6, align 4
  %34 = load ptr, ptr %lexer, align 8
  %memberidx7 = getelementptr inbounds %Lexer, ptr %34, i32 0, i32 5
  %35 = load i64, ptr %memberidx7, align 4
  call void @FloRange_constructor(ptr %31, i64 0, i64 0, i64 %33, i64 %35)
  call void @Token_constructor(ptr %30, i64 46, ptr %31)
  call void @Array_Token____sl__(ptr %29, ptr %30)
  %36 = load ptr, ptr %tokens, align 8
  ret ptr %36
}

define void @Lexer_advance(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Lexer, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %this, align 8
  %4 = call i1 @Lexer_eof(ptr %3)
  br i1 %4, label %true_block, label %false_block

true_block:                                       ; preds = %1
  br label %end

false_block:                                      ; preds = %1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Lexer, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = getelementptr inbounds %string, ptr %6, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Lexer, ptr %10, i32 0, i32 3
  %11 = load i64, ptr %memberidx3, align 4
  %12 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Lexer, ptr %12, i32 0, i32 3
  %13 = add nsw i64 %11, 1
  store i64 %13, ptr %memberidx4, align 4
  %14 = call i8 %9(ptr %6, i64 %13)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi i8 [ 0, %true_block ], [ %14, %false_block ]
  store i8 %ternary, ptr %memberidx, align 1
  %15 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Lexer, ptr %15, i32 0, i32 0
  %16 = load i8, ptr %memberidx5, align 1
  %17 = icmp eq i8 %16, 10
  br i1 %17, label %if.entry, label %else

if.entry:                                         ; preds = %end
  %18 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Lexer, ptr %18, i32 0, i32 4
  store i64 0, ptr %memberidx6, align 4
  %19 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Lexer, ptr %19, i32 0, i32 5
  %20 = load i64, ptr %memberidx7, align 4
  %21 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Lexer, ptr %21, i32 0, i32 5
  %22 = add nsw i64 %20, 1
  store i64 %22, ptr %memberidx8, align 4
  br label %ifend

else:                                             ; preds = %end
  %23 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Lexer, ptr %23, i32 0, i32 0
  %24 = load i8, ptr %memberidx9, align 1
  %25 = icmp ne i8 %24, 0
  br i1 %25, label %if.entry10, label %else11

ifend:                                            ; preds = %ifend12, %if.entry
  ret void

if.entry10:                                       ; preds = %else
  %26 = load ptr, ptr %this, align 8
  %memberidx13 = getelementptr inbounds %Lexer, ptr %26, i32 0, i32 4
  %27 = load i64, ptr %memberidx13, align 4
  %28 = load ptr, ptr %this, align 8
  %memberidx14 = getelementptr inbounds %Lexer, ptr %28, i32 0, i32 4
  %29 = add nsw i64 %27, 1
  store i64 %29, ptr %memberidx14, align 4
  br label %ifend12

else11:                                           ; preds = %else
  br label %ifend12

ifend12:                                          ; preds = %else11, %if.entry10
  br label %ifend
}

define i1 @Lexer_skip_comment(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = call i8 @Lexer_peek(ptr %2, i64 1)
  %4 = icmp eq i8 %3, 42
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %5 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %5)
  %6 = load ptr, ptr %this, align 8
  %7 = call i1 @Lexer_eof(ptr %6)
  %8 = xor i1 %7, true
  br i1 %8, label %while.entry, label %while.end

else:                                             ; preds = %1
  %9 = load ptr, ptr %this, align 8
  %10 = call i8 @Lexer_peek(ptr %9, i64 1)
  %11 = icmp eq i8 %10, 47
  br i1 %11, label %if.entry4, label %else5

ifend:                                            ; preds = %ifend6
  ret i1 false

while.entry:                                      ; preds = %ifend3, %if.entry
  %12 = load ptr, ptr %this, align 8
  %13 = call i8 @Lexer_peek(ptr %12, i64 1)
  %14 = icmp eq i8 %13, 42
  %15 = load ptr, ptr %this, align 8
  %16 = call i8 @Lexer_peek(ptr %15, i64 2)
  %17 = icmp eq i8 %16, 47
  %18 = and i1 %14, %17
  br i1 %18, label %if.entry1, label %else2

while.end:                                        ; preds = %ifend3, %if.entry1, %if.entry
  %19 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %19)
  %20 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %20)
  ret i1 true

if.entry1:                                        ; preds = %while.entry
  br label %while.end

else2:                                            ; preds = %while.entry
  br label %ifend3

ifend3:                                           ; preds = %else2
  %21 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %21)
  %22 = load ptr, ptr %this, align 8
  %23 = call i1 @Lexer_eof(ptr %22)
  %24 = xor i1 %23, true
  br i1 %24, label %while.entry, label %while.end

if.entry4:                                        ; preds = %else
  %25 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %25)
  %26 = load ptr, ptr %this, align 8
  %27 = call i8 @Lexer_peek(ptr %26, i64 1)
  %28 = icmp ne i8 %27, 10
  %29 = load ptr, ptr %this, align 8
  %30 = call i1 @Lexer_eof(ptr %29)
  %31 = xor i1 %30, true
  %32 = and i1 %28, %31
  br i1 %32, label %while.entry7, label %while.end8

else5:                                            ; preds = %else
  br label %ifend6

ifend6:                                           ; preds = %else5
  br label %ifend

while.entry7:                                     ; preds = %while.entry7, %if.entry4
  %33 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %33)
  %34 = load ptr, ptr %this, align 8
  %35 = call i8 @Lexer_peek(ptr %34, i64 1)
  %36 = icmp ne i8 %35, 10
  %37 = load ptr, ptr %this, align 8
  %38 = call i1 @Lexer_eof(ptr %37)
  %39 = xor i1 %38, true
  %40 = and i1 %36, %39
  br i1 %40, label %while.entry7, label %while.end8

while.end8:                                       ; preds = %while.entry7, %if.entry4
  ret i1 true
}

define ptr @Lexer_eq_token(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = call i8 @Lexer_peek(ptr %2, i64 1)
  %4 = icmp eq i8 %3, 61
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %5 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %5)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %7 = load ptr, ptr %this, align 8
  %8 = call ptr @Lexer_get_range(ptr %7, i64 2)
  call void @Token_constructor(ptr %6, i64 39, ptr %8)
  ret ptr %6

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %10 = load ptr, ptr %this, align 8
  %11 = call ptr @Lexer_get_range(ptr %10, i64 1)
  call void @Token_constructor(ptr %9, i64 38, ptr %11)
  ret ptr %9
}

define ptr @Lexer_neq_token(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = call i8 @Lexer_peek(ptr %2, i64 1)
  %4 = icmp eq i8 %3, 61
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %5 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %5)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %7 = load ptr, ptr %this, align 8
  %8 = call ptr @Lexer_get_range(ptr %7, i64 2)
  call void @Token_constructor(ptr %6, i64 40, ptr %8)
  ret ptr %6

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %10 = load ptr, ptr %this, align 8
  %11 = call ptr @Lexer_get_range(ptr %10, i64 1)
  call void @Token_constructor(ptr %9, i64 47, ptr %11)
  ret ptr %9
}

define ptr @Lexer_string_token(ptr %0) {
  %this = alloca ptr, align 8
  %aval = alloca ptr, align 8
  %args = alloca ptr, align 8
  %range = alloca ptr, align 8
  %length = alloca i64, align 8
  %str_builder = alloca ptr, align 8
  %value = alloca ptr, align 8
  %escape_next = alloca i1, align 1
  %fmt_indices = alloca ptr, align 8
  %active_open_pars = alloca i64, align 8
  %token_group = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store i64 2, ptr %length, align 4
  store i1 false, ptr %escape_next, align 1
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Array_Token__, ptr null, i32 1) to i32))
  call void @Array_Array_Token___constructor(ptr %2, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_Array_Token__, ptr %2, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %2, ptr %args, align 8
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_uint_, ptr null, i32 1) to i32))
  call void @Array_uint__constructor(ptr %4, i64 ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64))
  %memberidx2 = getelementptr inbounds %Array_uint_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_uint_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  store ptr %4, ptr %fmt_indices, align 8
  store ptr null, ptr %aval, align 8
  %6 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %6)
  %7 = alloca %StringBuilder, align 8
  call void @StringBuilder_constructor(ptr %7, i64 1)
  store ptr %7, ptr %str_builder, align 8
  %8 = load ptr, ptr %this, align 8
  %9 = call i1 @Lexer_eof(ptr %8)
  %10 = xor i1 %9, true
  br i1 %10, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend8, %ifend14, %1
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Lexer, ptr %11, i32 0, i32 0
  %12 = load i8, ptr %memberidx4, align 1
  %13 = icmp eq i8 %12, 34
  %14 = load i1, ptr %escape_next, align 1
  %15 = xor i1 %14, true
  %16 = and i1 %13, %15
  br i1 %16, label %if.entry, label %else

while.end:                                        ; preds = %ifend8, %if.entry, %1
  %17 = load ptr, ptr %this, align 8
  %18 = load i64, ptr %length, align 4
  %19 = call ptr @Lexer_get_range(ptr %17, i64 %18)
  store ptr %19, ptr %range, align 8
  %20 = load ptr, ptr %str_builder, align 8
  %21 = getelementptr inbounds %StringBuilder, ptr %20, i32 0, i32 0
  %22 = load ptr, ptr %21, align 8
  %memberidx32 = getelementptr inbounds { ptr, ptr, ptr, ptr }, ptr %22, i32 0, i32 3
  %23 = load ptr, ptr %memberidx32, align 8
  %24 = call ptr %23(ptr %20)
  %25 = call ptr @unescape(ptr %24)
  store ptr %25, ptr %value, align 8
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%StrToken, ptr null, i32 1) to i32))
  %27 = load ptr, ptr %args, align 8
  %28 = load ptr, ptr %fmt_indices, align 8
  %29 = load ptr, ptr %value, align 8
  %30 = load ptr, ptr %range, align 8
  call void @StrToken_constructor(ptr %26, ptr %27, ptr %28, ptr %29, ptr %30)
  ret ptr %26

if.entry:                                         ; preds = %while.entry
  br label %while.end

else:                                             ; preds = %while.entry
  br label %ifend

ifend:                                            ; preds = %else
  %31 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Lexer, ptr %31, i32 0, i32 0
  %32 = load i8, ptr %memberidx5, align 1
  %33 = icmp eq i8 %32, 36
  %34 = load i1, ptr %escape_next, align 1
  %35 = xor i1 %34, true
  %36 = and i1 %33, %35
  br i1 %36, label %if.entry6, label %else7

if.entry6:                                        ; preds = %ifend
  %37 = load ptr, ptr %fmt_indices, align 8
  %38 = load i64, ptr %length, align 4
  %39 = sub nuw i64 %38, 2
  call void @Array_uint____sl__(ptr %37, i64 %39)
  %40 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %40)
  %41 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Token_, ptr null, i32 1) to i32))
  call void @Array_Token__constructor(ptr %41, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx9 = getelementptr inbounds %Array_Token_, ptr %41, i32 0, i32 1
  %42 = load ptr, ptr %memberidx9, align 8
  %memberidx10 = getelementptr inbounds %Array_Token_, ptr %41, i32 0, i32 2
  store i64 0, ptr %memberidx10, align 4
  store ptr %41, ptr %token_group, align 8
  store i64 0, ptr %active_open_pars, align 4
  %43 = load ptr, ptr %this, align 8
  %memberidx11 = getelementptr inbounds %Lexer, ptr %43, i32 0, i32 0
  %44 = load i8, ptr %memberidx11, align 1
  %45 = icmp eq i8 %44, 40
  br i1 %45, label %if.entry12, label %else13

else7:                                            ; preds = %ifend
  br label %ifend8

ifend8:                                           ; preds = %else7
  %46 = load i64, ptr %length, align 4
  %47 = add nsw i64 %46, 1
  store i64 %47, ptr %length, align 4
  %48 = load ptr, ptr %this, align 8
  %memberidx29 = getelementptr inbounds %Lexer, ptr %48, i32 0, i32 0
  %49 = load i8, ptr %memberidx29, align 1
  %50 = icmp eq i8 %49, 92
  store i1 %50, ptr %escape_next, align 1
  %51 = load ptr, ptr %str_builder, align 8
  %52 = getelementptr inbounds %StringBuilder, ptr %51, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %memberidx30 = getelementptr inbounds { ptr, ptr, ptr, ptr }, ptr %53, i32 0, i32 2
  %54 = load ptr, ptr %memberidx30, align 8
  %55 = load ptr, ptr %this, align 8
  %memberidx31 = getelementptr inbounds %Lexer, ptr %55, i32 0, i32 0
  %56 = load i8, ptr %memberidx31, align 1
  call void %54(ptr %51, i8 %56)
  %57 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %57)
  %58 = load ptr, ptr %this, align 8
  %59 = call i1 @Lexer_eof(ptr %58)
  %60 = xor i1 %59, true
  br i1 %60, label %while.entry, label %while.end

if.entry12:                                       ; preds = %if.entry6
  %61 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %61)
  %62 = load ptr, ptr %this, align 8
  %memberidx17 = getelementptr inbounds %Lexer, ptr %62, i32 0, i32 0
  %63 = load i8, ptr %memberidx17, align 1
  %64 = icmp ne i8 %63, 41
  %65 = load i64, ptr %active_open_pars, align 4
  %66 = icmp ne i64 %65, 0
  %67 = or i1 %64, %66
  %68 = load ptr, ptr %this, align 8
  %69 = call i1 @Lexer_eof(ptr %68)
  %70 = xor i1 %69, true
  %71 = and i1 %67, %70
  br i1 %71, label %while.entry15, label %while.end16

else13:                                           ; preds = %if.entry6
  %72 = load ptr, ptr %token_group, align 8
  %73 = load ptr, ptr %this, align 8
  %74 = call ptr @Lexer_lex_token(ptr %73)
  call void @Array_Token____sl__(ptr %72, ptr %74)
  br label %ifend14

ifend14:                                          ; preds = %else13, %while.end16
  %75 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %75)
  %76 = load ptr, ptr %token_group, align 8
  %77 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %78 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloRange, ptr null, i32 1) to i32))
  %79 = load ptr, ptr %this, align 8
  %memberidx27 = getelementptr inbounds %Lexer, ptr %79, i32 0, i32 4
  %80 = load i64, ptr %memberidx27, align 4
  %81 = load ptr, ptr %this, align 8
  %memberidx28 = getelementptr inbounds %Lexer, ptr %81, i32 0, i32 5
  %82 = load i64, ptr %memberidx28, align 4
  call void @FloRange_constructor(ptr %78, i64 0, i64 0, i64 %80, i64 %82)
  call void @Token_constructor(ptr %77, i64 46, ptr %78)
  call void @Array_Token____sl__(ptr %76, ptr %77)
  %83 = load ptr, ptr %args, align 8
  %84 = load ptr, ptr %token_group, align 8
  call void @Array_Array_Token_____sl__(ptr %83, ptr %84)
  br label %while.entry

while.entry15:                                    ; preds = %ifend25, %if.entry12
  %85 = load ptr, ptr %this, align 8
  %memberidx18 = getelementptr inbounds %Lexer, ptr %85, i32 0, i32 0
  %86 = load i8, ptr %memberidx18, align 1
  %87 = icmp eq i8 %86, 40
  br i1 %87, label %if.entry19, label %else20

while.end16:                                      ; preds = %ifend25, %if.entry12
  br label %ifend14

if.entry19:                                       ; preds = %while.entry15
  %88 = load i64, ptr %active_open_pars, align 4
  %89 = add nsw i64 %88, 1
  store i64 %89, ptr %active_open_pars, align 4
  br label %ifend21

else20:                                           ; preds = %while.entry15
  br label %ifend21

ifend21:                                          ; preds = %else20, %if.entry19
  %90 = load ptr, ptr %this, align 8
  %memberidx22 = getelementptr inbounds %Lexer, ptr %90, i32 0, i32 0
  %91 = load i8, ptr %memberidx22, align 1
  %92 = icmp eq i8 %91, 41
  br i1 %92, label %if.entry23, label %else24

if.entry23:                                       ; preds = %ifend21
  %93 = load i64, ptr %active_open_pars, align 4
  %94 = add nsw i64 %93, -1
  store i64 %94, ptr %active_open_pars, align 4
  br label %ifend25

else24:                                           ; preds = %ifend21
  br label %ifend25

ifend25:                                          ; preds = %else24, %if.entry23
  %95 = load ptr, ptr %token_group, align 8
  %96 = load ptr, ptr %this, align 8
  %97 = call ptr @Lexer_lex_token(ptr %96)
  call void @Array_Token____sl__(ptr %95, ptr %97)
  %98 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %98)
  %99 = load ptr, ptr %this, align 8
  %memberidx26 = getelementptr inbounds %Lexer, ptr %99, i32 0, i32 0
  %100 = load i8, ptr %memberidx26, align 1
  %101 = icmp ne i8 %100, 41
  %102 = load i64, ptr %active_open_pars, align 4
  %103 = icmp ne i64 %102, 0
  %104 = or i1 %101, %103
  %105 = load ptr, ptr %this, align 8
  %106 = call i1 @Lexer_eof(ptr %105)
  %107 = xor i1 %106, true
  %108 = and i1 %104, %107
  br i1 %108, label %while.entry15, label %while.end16
}

define i8 @Lexer_peek(ptr %0, i64 %1) {
  %offset = alloca i64, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %offset, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Lexer, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %offset, align 4
  %6 = add nsw i64 %4, %5
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Lexer, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %string, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %memberidx2, align 4
  %10 = icmp slt i64 %6, %9
  br i1 %10, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Lexer, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx3, align 8
  %13 = getelementptr inbounds %string, ptr %12, i32 0, i32 0
  %14 = load ptr, ptr %13, align 8
  %memberidx4 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %14, i32 0, i32 2
  %15 = load ptr, ptr %memberidx4, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Lexer, ptr %16, i32 0, i32 3
  %17 = load i64, ptr %memberidx5, align 4
  %18 = load i64, ptr %offset, align 4
  %19 = add nsw i64 %17, %18
  %20 = call i8 %15(ptr %12, i64 %19)
  ret i8 %20

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  ret i8 0
}

define ptr @Lexer_get_range(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %back = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %back, align 4
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloRange, ptr null, i32 1) to i32))
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Lexer, ptr %4, i32 0, i32 3
  %5 = load i64, ptr %memberidx, align 4
  %6 = load i64, ptr %back, align 4
  %7 = sub nsw i64 %5, %6
  %8 = add nsw i64 %7, 1
  %9 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Lexer, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx1, align 4
  %11 = add nsw i64 %10, 1
  %12 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Lexer, ptr %12, i32 0, i32 4
  %13 = load i64, ptr %memberidx2, align 4
  %14 = load i64, ptr %back, align 4
  %15 = sub nuw i64 %13, %14
  %16 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Lexer, ptr %16, i32 0, i32 5
  %17 = load i64, ptr %memberidx3, align 4
  call void @FloRange_constructor(ptr %3, i64 %8, i64 %11, i64 %15, i64 %17)
  ret ptr %3
}

define ptr @Lexer_mult_token(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = call i8 @Lexer_peek(ptr %2, i64 1)
  %4 = icmp eq i8 %3, 61
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %5 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %5)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %7 = load ptr, ptr %this, align 8
  %8 = call ptr @Lexer_get_range(ptr %7, i64 2)
  call void @Token_constructor(ptr %6, i64 12, ptr %8)
  ret ptr %6

else:                                             ; preds = %1
  %9 = load ptr, ptr %this, align 8
  %10 = call i8 @Lexer_peek(ptr %9, i64 1)
  %11 = icmp eq i8 %10, 42
  br i1 %11, label %if.entry1, label %else2

ifend:                                            ; preds = %ifend3
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %13 = load ptr, ptr %this, align 8
  %14 = call ptr @Lexer_get_range(ptr %13, i64 1)
  call void @Token_constructor(ptr %12, i64 4, ptr %14)
  ret ptr %12

if.entry1:                                        ; preds = %else
  %15 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %15)
  %16 = load ptr, ptr %this, align 8
  %17 = call i8 @Lexer_peek(ptr %16, i64 1)
  %18 = icmp eq i8 %17, 61
  br i1 %18, label %if.entry4, label %else5

else2:                                            ; preds = %else
  br label %ifend3

ifend3:                                           ; preds = %else2
  br label %ifend

if.entry4:                                        ; preds = %if.entry1
  %19 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %19)
  %20 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %21 = load ptr, ptr %this, align 8
  %22 = call ptr @Lexer_get_range(ptr %21, i64 3)
  call void @Token_constructor(ptr %20, i64 17, ptr %22)
  ret ptr %20

else5:                                            ; preds = %if.entry1
  br label %ifend6

ifend6:                                           ; preds = %else5
  %23 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %24 = load ptr, ptr %this, align 8
  %25 = call ptr @Lexer_get_range(ptr %24, i64 2)
  call void @Token_constructor(ptr %23, i64 11, ptr %25)
  ret ptr %23
}

define ptr @Lexer_xor_token(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = call i8 @Lexer_peek(ptr %2, i64 1)
  %4 = icmp eq i8 %3, 61
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %5 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %5)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %7 = load ptr, ptr %this, align 8
  %8 = call ptr @Lexer_get_range(ptr %7, i64 2)
  call void @Token_constructor(ptr %6, i64 20, ptr %8)
  ret ptr %6

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %10 = load ptr, ptr %this, align 8
  %11 = call ptr @Lexer_get_range(ptr %10, i64 1)
  call void @Token_constructor(ptr %9, i64 51, ptr %11)
  ret ptr %9
}

define ptr @Lexer_div_token(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = call i8 @Lexer_peek(ptr %2, i64 1)
  %4 = icmp eq i8 %3, 61
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %5 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %5)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %7 = load ptr, ptr %this, align 8
  %8 = call ptr @Lexer_get_range(ptr %7, i64 2)
  call void @Token_constructor(ptr %6, i64 15, ptr %8)
  ret ptr %6

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %10 = load ptr, ptr %this, align 8
  %11 = call ptr @Lexer_get_range(ptr %10, i64 1)
  call void @Token_constructor(ptr %9, i64 7, ptr %11)
  ret ptr %9
}

define ptr @Lexer_lt_token(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = call i8 @Lexer_peek(ptr %2, i64 1)
  %4 = icmp eq i8 %3, 61
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %5 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %5)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %7 = load ptr, ptr %this, align 8
  %8 = call ptr @Lexer_get_range(ptr %7, i64 2)
  call void @Token_constructor(ptr %6, i64 43, ptr %8)
  ret ptr %6

else:                                             ; preds = %1
  %9 = load ptr, ptr %this, align 8
  %10 = call i8 @Lexer_peek(ptr %9, i64 1)
  %11 = icmp eq i8 %10, 60
  br i1 %11, label %if.entry1, label %else2

ifend:                                            ; preds = %ifend3
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %13 = load ptr, ptr %this, align 8
  %14 = call ptr @Lexer_get_range(ptr %13, i64 1)
  call void @Token_constructor(ptr %12, i64 42, ptr %14)
  ret ptr %12

if.entry1:                                        ; preds = %else
  %15 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %15)
  %16 = load ptr, ptr %this, align 8
  %17 = call i8 @Lexer_peek(ptr %16, i64 1)
  %18 = icmp eq i8 %17, 61
  br i1 %18, label %if.entry4, label %else5

else2:                                            ; preds = %else
  br label %ifend3

ifend3:                                           ; preds = %else2
  br label %ifend

if.entry4:                                        ; preds = %if.entry1
  %19 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %19)
  %20 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %21 = load ptr, ptr %this, align 8
  %22 = call ptr @Lexer_get_range(ptr %21, i64 3)
  call void @Token_constructor(ptr %20, i64 22, ptr %22)
  ret ptr %20

else5:                                            ; preds = %if.entry1
  br label %ifend6

ifend6:                                           ; preds = %else5
  %23 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %24 = load ptr, ptr %this, align 8
  %25 = call ptr @Lexer_get_range(ptr %24, i64 2)
  call void @Token_constructor(ptr %23, i64 48, ptr %25)
  ret ptr %23
}

define void @IntToken_constructor(ptr %0, i64 %1, ptr %2) {
  %range = alloca ptr, align 8
  %value = alloca i64, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Token_constructor, ptr %super, align 8
  store i64 %1, ptr %value, align 4
  store ptr %2, ptr %range, align 8
  %4 = load ptr, ptr %super, align 8
  %5 = load ptr, ptr %range, align 8
  call void %4(ptr %0, i64 31, ptr %5)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %IntToken, ptr %6, i32 0, i32 2
  %7 = load i64, ptr %value, align 4
  store i64 %7, ptr %memberidx, align 4
  ret void
}

define ptr @Lexer_base_int_token(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %base = alloca i64, align 8
  %length = alloca i64, align 8
  %current_char = alloca i8, align 1
  %value = alloca i64, align 8
  %add = alloca i8, align 1
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %base, align 4
  %3 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %3)
  store i64 3, ptr %length, align 4
  store i64 0, ptr %value, align 4
  store i8 0, ptr %current_char, align 1
  %4 = load ptr, ptr %this, align 8
  %5 = call i8 @Lexer_peek(ptr %4, i64 1)
  %6 = call i8 @capitalize(i8 %5)
  store i8 %6, ptr %current_char, align 1
  %7 = load i64, ptr %base, align 4
  %8 = call i1 @in_base_range(i8 %6, i64 %7)
  %9 = load ptr, ptr %this, align 8
  %10 = call i1 @Lexer_eof(ptr %9)
  %11 = xor i1 %10, true
  %12 = and i1 %8, %11
  br i1 %12, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %2
  %13 = load i64, ptr %value, align 4
  %14 = load i64, ptr %base, align 4
  %15 = mul nuw i64 %13, %14
  store i64 %15, ptr %value, align 4
  %16 = load i8, ptr %current_char, align 1
  %17 = sub nuw i8 %16, 48
  store i8 %17, ptr %add, align 1
  %18 = load i8, ptr %current_char, align 1
  %19 = icmp sge i8 %18, 65
  br i1 %19, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %2
  %20 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntToken, ptr null, i32 1) to i32))
  %21 = load i64, ptr %value, align 4
  %22 = load ptr, ptr %this, align 8
  %23 = load i64, ptr %length, align 4
  %24 = call ptr @Lexer_get_range(ptr %22, i64 %23)
  call void @IntToken_constructor(ptr %20, i64 %21, ptr %24)
  ret ptr %20

if.entry:                                         ; preds = %while.entry
  %25 = load i8, ptr %current_char, align 1
  %26 = sub nuw i8 %25, 65
  %27 = add nuw i8 %26, 10
  store i8 %27, ptr %add, align 1
  br label %ifend

else:                                             ; preds = %while.entry
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %28 = load i64, ptr %value, align 4
  %29 = load i8, ptr %add, align 1
  %30 = zext i8 %29 to i64
  %31 = add nuw i64 %28, %30
  store i64 %31, ptr %value, align 4
  %32 = load i64, ptr %length, align 4
  %33 = add nsw i64 %32, 1
  store i64 %33, ptr %length, align 4
  %34 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %34)
  %35 = load ptr, ptr %this, align 8
  %36 = call i8 @Lexer_peek(ptr %35, i64 1)
  %37 = call i8 @capitalize(i8 %36)
  store i8 %37, ptr %current_char, align 1
  %38 = load i64, ptr %base, align 4
  %39 = call i1 @in_base_range(i8 %37, i64 %38)
  %40 = load ptr, ptr %this, align 8
  %41 = call i1 @Lexer_eof(ptr %40)
  %42 = xor i1 %41, true
  %43 = and i1 %39, %42
  br i1 %43, label %while.entry, label %while.end
}

define ptr @Lexer_identifier_token(ptr %0) {
  %this = alloca ptr, align 8
  %range = alloca ptr, align 8
  %length = alloca i64, align 8
  %value = alloca ptr, align 8
  %start = alloca i64, align 8
  %keyword = alloca i64, align 8
  %next_char = alloca i8, align 1
  store ptr %0, ptr %this, align 8
  store i64 1, ptr %length, align 4
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Lexer, ptr %2, i32 0, i32 3
  %3 = load i64, ptr %memberidx, align 4
  store i64 %3, ptr %start, align 4
  %4 = load ptr, ptr %this, align 8
  %5 = call i8 @Lexer_peek(ptr %4, i64 1)
  store i8 %5, ptr %next_char, align 1
  %6 = load ptr, ptr %this, align 8
  %7 = call i8 @Lexer_peek(ptr %6, i64 1)
  store i8 %7, ptr %next_char, align 1
  %8 = call i1 @is_identifier_char(i8 %7)
  %9 = load i8, ptr %next_char, align 1
  %10 = call i1 @is_number_char(i8 %9)
  %11 = or i1 %8, %10
  %12 = load ptr, ptr %this, align 8
  %13 = call i1 @Lexer_eof(ptr %12)
  %14 = xor i1 %13, true
  %15 = and i1 %11, %14
  br i1 %15, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %1
  %16 = load i64, ptr %length, align 4
  %17 = add nsw i64 %16, 1
  store i64 %17, ptr %length, align 4
  %18 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %18)
  %19 = load ptr, ptr %this, align 8
  %20 = call i8 @Lexer_peek(ptr %19, i64 1)
  store i8 %20, ptr %next_char, align 1
  %21 = call i1 @is_identifier_char(i8 %20)
  %22 = load i8, ptr %next_char, align 1
  %23 = call i1 @is_number_char(i8 %22)
  %24 = or i1 %21, %23
  %25 = load ptr, ptr %this, align 8
  %26 = call i1 @Lexer_eof(ptr %25)
  %27 = xor i1 %26, true
  %28 = and i1 %24, %27
  br i1 %28, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %1
  %29 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Lexer, ptr %29, i32 0, i32 1
  %30 = load ptr, ptr %memberidx1, align 8
  %31 = getelementptr inbounds %string, ptr %30, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %32, i32 0, i32 1
  %33 = load ptr, ptr %memberidx2, align 8
  %34 = load i64, ptr %start, align 4
  %35 = load i64, ptr %length, align 4
  %36 = call ptr %33(ptr %30, i64 %34, i64 %35)
  store ptr %36, ptr %value, align 8
  %37 = load ptr, ptr %this, align 8
  %38 = load i64, ptr %length, align 4
  %39 = call ptr @Lexer_get_range(ptr %37, i64 %38)
  store ptr %39, ptr %range, align 8
  store i64 0, ptr %keyword, align 4
  %40 = load ptr, ptr %value, align 8
  %41 = call i64 @string_to_kw_token(ptr %40)
  store i64 %41, ptr %keyword, align 4
  %42 = icmp ne i64 %41, 0
  br i1 %42, label %if.entry, label %else

if.entry:                                         ; preds = %while.end
  %43 = load ptr, ptr %this, align 8
  %44 = call i8 @Lexer_peek(ptr %43, i64 1)
  %45 = icmp eq i8 %44, 61
  br i1 %45, label %if.entry3, label %else4

else:                                             ; preds = %while.end
  br label %ifend

ifend:                                            ; preds = %else
  %46 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IdentifierToken, ptr null, i32 1) to i32))
  %47 = load ptr, ptr %value, align 8
  %48 = load ptr, ptr %range, align 8
  call void @IdentifierToken_constructor(ptr %46, ptr %47, ptr %48)
  ret ptr %46

if.entry3:                                        ; preds = %if.entry
  %49 = load i64, ptr %keyword, align 4
  %50 = icmp eq i64 %49, 8
  br i1 %50, label %if.entry6, label %else7

else4:                                            ; preds = %if.entry
  br label %ifend5

ifend5:                                           ; preds = %else4, %ifend11
  %51 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %52 = load i64, ptr %keyword, align 4
  %53 = load ptr, ptr %range, align 8
  call void @Token_constructor(ptr %51, i64 %52, ptr %53)
  ret ptr %51

if.entry6:                                        ; preds = %if.entry3
  %54 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %54)
  store i64 18, ptr %keyword, align 4
  br label %ifend8

else7:                                            ; preds = %if.entry3
  br label %ifend8

ifend8:                                           ; preds = %else7, %if.entry6
  %55 = load i64, ptr %keyword, align 4
  %56 = icmp eq i64 %55, 9
  br i1 %56, label %if.entry9, label %else10

if.entry9:                                        ; preds = %ifend8
  %57 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %57)
  store i64 19, ptr %keyword, align 4
  br label %ifend11

else10:                                           ; preds = %ifend8
  br label %ifend11

ifend11:                                          ; preds = %else10, %if.entry9
  br label %ifend5
}

define void @CharToken_constructor(ptr %0, i8 %1, ptr %2) {
  %range = alloca ptr, align 8
  %value = alloca i8, align 1
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Token_constructor, ptr %super, align 8
  store i8 %1, ptr %value, align 1
  store ptr %2, ptr %range, align 8
  %4 = load ptr, ptr %super, align 8
  %5 = load ptr, ptr %range, align 8
  call void %4(ptr %0, i64 35, ptr %5)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CharToken, ptr %6, i32 0, i32 2
  %7 = load i8, ptr %value, align 1
  store i8 %7, ptr %memberidx, align 1
  ret void
}

define ptr @Lexer_char_token(ptr %0) {
  %this = alloca ptr, align 8
  %length = alloca i64, align 8
  %value = alloca i8, align 1
  store ptr %0, ptr %this, align 8
  store i64 3, ptr %length, align 4
  %2 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %2)
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Lexer, ptr %3, i32 0, i32 0
  %4 = load i8, ptr %memberidx, align 1
  store i8 %4, ptr %value, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Lexer, ptr %5, i32 0, i32 0
  %6 = load i8, ptr %memberidx1, align 1
  %7 = icmp eq i8 %6, 92
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %8 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %8)
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Lexer, ptr %9, i32 0, i32 0
  %10 = load i8, ptr %memberidx2, align 1
  %11 = call i8 @get_escape_char(i8 %10)
  store i8 %11, ptr %value, align 1
  %12 = load i64, ptr %length, align 4
  %13 = add nuw i64 %12, 2
  store i64 %13, ptr %length, align 4
  br label %ifend

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %14 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %14)
  %15 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%CharToken, ptr null, i32 1) to i32))
  %16 = load i8, ptr %value, align 1
  %17 = load ptr, ptr %this, align 8
  %18 = load i64, ptr %length, align 4
  %19 = call ptr @Lexer_get_range(ptr %17, i64 %18)
  call void @CharToken_constructor(ptr %15, i8 %16, ptr %19)
  ret ptr %15
}

define ptr @Lexer_plus_token(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = call i8 @Lexer_peek(ptr %2, i64 1)
  %4 = icmp eq i8 %3, 43
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %5 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %5)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %7 = load ptr, ptr %this, align 8
  %8 = call ptr @Lexer_get_range(ptr %7, i64 2)
  call void @Token_constructor(ptr %6, i64 23, ptr %8)
  ret ptr %6

else:                                             ; preds = %1
  %9 = load ptr, ptr %this, align 8
  %10 = call i8 @Lexer_peek(ptr %9, i64 1)
  %11 = icmp eq i8 %10, 61
  br i1 %11, label %if.entry1, label %else2

ifend:                                            ; preds = %ifend3
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %13 = load ptr, ptr %this, align 8
  %14 = call ptr @Lexer_get_range(ptr %13, i64 1)
  call void @Token_constructor(ptr %12, i64 6, ptr %14)
  ret ptr %12

if.entry1:                                        ; preds = %else
  %15 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %15)
  %16 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %17 = load ptr, ptr %this, align 8
  %18 = call ptr @Lexer_get_range(ptr %17, i64 2)
  call void @Token_constructor(ptr %16, i64 14, ptr %18)
  ret ptr %16

else2:                                            ; preds = %else
  br label %ifend3

ifend3:                                           ; preds = %else2
  br label %ifend
}

define ptr @Lexer_minus_token(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = call i8 @Lexer_peek(ptr %2, i64 1)
  %4 = icmp eq i8 %3, 45
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %5 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %5)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %7 = load ptr, ptr %this, align 8
  %8 = call ptr @Lexer_get_range(ptr %7, i64 2)
  call void @Token_constructor(ptr %6, i64 24, ptr %8)
  ret ptr %6

else:                                             ; preds = %1
  %9 = load ptr, ptr %this, align 8
  %10 = call i8 @Lexer_peek(ptr %9, i64 1)
  %11 = icmp eq i8 %10, 61
  br i1 %11, label %if.entry1, label %else2

ifend:                                            ; preds = %ifend3
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %13 = load ptr, ptr %this, align 8
  %14 = call ptr @Lexer_get_range(ptr %13, i64 2)
  call void @Token_constructor(ptr %12, i64 5, ptr %14)
  ret ptr %12

if.entry1:                                        ; preds = %else
  %15 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %15)
  %16 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %17 = load ptr, ptr %this, align 8
  %18 = call ptr @Lexer_get_range(ptr %17, i64 2)
  call void @Token_constructor(ptr %16, i64 13, ptr %18)
  ret ptr %16

else2:                                            ; preds = %else
  %19 = load ptr, ptr %this, align 8
  %20 = call i8 @Lexer_peek(ptr %19, i64 1)
  %21 = icmp eq i8 %20, 62
  br i1 %21, label %if.entry4, label %else5

ifend3:                                           ; preds = %ifend6
  br label %ifend

if.entry4:                                        ; preds = %else2
  %22 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %22)
  %23 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %24 = load ptr, ptr %this, align 8
  %25 = call ptr @Lexer_get_range(ptr %24, i64 2)
  call void @Token_constructor(ptr %23, i64 45, ptr %25)
  ret ptr %23

else5:                                            ; preds = %else2
  br label %ifend6

ifend6:                                           ; preds = %else5
  br label %ifend3
}

define ptr @Lexer_numeric_token(ptr %0) {
  %this = alloca ptr, align 8
  %num_value = alloca ptr, align 8
  %range = alloca ptr, align 8
  %length = alloca i64, align 8
  %str_value = alloca ptr, align 8
  %is_float = alloca i1, align 1
  %next_char = alloca i8, align 1
  store ptr %0, ptr %this, align 8
  store i64 1, ptr %length, align 4
  store i1 false, ptr %is_float, align 1
  store i8 0, ptr %next_char, align 1
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Lexer, ptr %2, i32 0, i32 0
  %3 = load i8, ptr %memberidx, align 1
  %4 = icmp eq i8 %3, 48
  %5 = load ptr, ptr %this, align 8
  %6 = call i8 @Lexer_peek(ptr %5, i64 1)
  %7 = icmp eq i8 %6, 98
  %8 = and i1 %4, %7
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %9 = load ptr, ptr %this, align 8
  %10 = call ptr @Lexer_base_int_token(ptr %9, i64 2)
  ret ptr %10

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %11 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Lexer, ptr %11, i32 0, i32 0
  %12 = load i8, ptr %memberidx1, align 1
  %13 = icmp eq i8 %12, 48
  %14 = load ptr, ptr %this, align 8
  %15 = call i8 @Lexer_peek(ptr %14, i64 1)
  %16 = icmp eq i8 %15, 111
  %17 = and i1 %13, %16
  br i1 %17, label %if.entry2, label %else3

if.entry2:                                        ; preds = %ifend
  %18 = load ptr, ptr %this, align 8
  %19 = call ptr @Lexer_base_int_token(ptr %18, i64 8)
  ret ptr %19

else3:                                            ; preds = %ifend
  br label %ifend4

ifend4:                                           ; preds = %else3
  %20 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Lexer, ptr %20, i32 0, i32 0
  %21 = load i8, ptr %memberidx5, align 1
  %22 = icmp eq i8 %21, 48
  %23 = load ptr, ptr %this, align 8
  %24 = call i8 @Lexer_peek(ptr %23, i64 1)
  %25 = icmp eq i8 %24, 120
  %26 = and i1 %22, %25
  br i1 %26, label %if.entry6, label %else7

if.entry6:                                        ; preds = %ifend4
  %27 = load ptr, ptr %this, align 8
  %28 = call ptr @Lexer_base_int_token(ptr %27, i64 16)
  ret ptr %28

else7:                                            ; preds = %ifend4
  br label %ifend8

ifend8:                                           ; preds = %else7
  %29 = load ptr, ptr %this, align 8
  %30 = call i8 @Lexer_peek(ptr %29, i64 1)
  store i8 %30, ptr %next_char, align 1
  %31 = call i1 @is_number_char(i8 %30)
  %32 = load i8, ptr %next_char, align 1
  %33 = icmp eq i8 %32, 46
  %34 = or i1 %31, %33
  %35 = load ptr, ptr %this, align 8
  %36 = call i1 @Lexer_eof(ptr %35)
  %37 = xor i1 %36, true
  %38 = and i1 %34, %37
  br i1 %38, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend15, %ifend8
  %39 = load i8, ptr %next_char, align 1
  %40 = icmp eq i8 %39, 46
  %41 = load i1, ptr %is_float, align 1
  %42 = load ptr, ptr %this, align 8
  %43 = call i8 @Lexer_peek(ptr %42, i64 2)
  %44 = call i1 @is_number_char(i8 %43)
  %45 = xor i1 %44, true
  %46 = or i1 %41, %45
  %47 = and i1 %40, %46
  br i1 %47, label %if.entry9, label %else10

while.end:                                        ; preds = %ifend15, %if.entry9, %ifend8
  %48 = load ptr, ptr %this, align 8
  %49 = load i64, ptr %length, align 4
  %50 = call ptr @Lexer_get_range(ptr %48, i64 %49)
  store ptr %50, ptr %range, align 8
  %51 = load ptr, ptr %this, align 8
  %memberidx16 = getelementptr inbounds %Lexer, ptr %51, i32 0, i32 1
  %52 = load ptr, ptr %memberidx16, align 8
  %53 = getelementptr inbounds %string, ptr %52, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %memberidx17 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %54, i32 0, i32 1
  %55 = load ptr, ptr %memberidx17, align 8
  %56 = load ptr, ptr %range, align 8
  %memberidx18 = getelementptr inbounds %FloRange, ptr %56, i32 0, i32 0
  %57 = load i64, ptr %memberidx18, align 4
  %58 = load i64, ptr %length, align 4
  %59 = call ptr %55(ptr %52, i64 %57, i64 %58)
  store ptr %59, ptr %str_value, align 8
  %60 = load i1, ptr %is_float, align 1
  br i1 %60, label %true_block, label %false_block

if.entry9:                                        ; preds = %while.entry
  br label %while.end

else10:                                           ; preds = %while.entry
  br label %ifend11

ifend11:                                          ; preds = %else10
  %61 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %Lexer, ptr %61, i32 0, i32 0
  %62 = load i8, ptr %memberidx12, align 1
  %63 = icmp eq i8 %62, 46
  br i1 %63, label %if.entry13, label %else14

if.entry13:                                       ; preds = %ifend11
  store i1 true, ptr %is_float, align 1
  br label %ifend15

else14:                                           ; preds = %ifend11
  br label %ifend15

ifend15:                                          ; preds = %else14, %if.entry13
  %64 = load i64, ptr %length, align 4
  %65 = add nsw i64 %64, 1
  store i64 %65, ptr %length, align 4
  %66 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %66)
  %67 = load ptr, ptr %this, align 8
  %68 = call i8 @Lexer_peek(ptr %67, i64 1)
  store i8 %68, ptr %next_char, align 1
  %69 = call i1 @is_number_char(i8 %68)
  %70 = load i8, ptr %next_char, align 1
  %71 = icmp eq i8 %70, 46
  %72 = or i1 %69, %71
  %73 = load ptr, ptr %this, align 8
  %74 = call i1 @Lexer_eof(ptr %73)
  %75 = xor i1 %74, true
  %76 = and i1 %72, %75
  br i1 %76, label %while.entry, label %while.end

true_block:                                       ; preds = %while.end
  %77 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloatToken, ptr null, i32 1) to i32))
  %78 = load ptr, ptr %str_value, align 8
  %79 = getelementptr inbounds %string, ptr %78, i32 0, i32 0
  %80 = load ptr, ptr %79, align 8
  %memberidx19 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %80, i32 0, i32 5
  %81 = load ptr, ptr %memberidx19, align 8
  %82 = call ptr %81(ptr %78)
  %83 = call double @atof(ptr %82)
  tail call void @free(ptr %82)
  %84 = load ptr, ptr %range, align 8
  call void @FloatToken_constructor(ptr %77, double %83, ptr %84)
  br label %end

false_block:                                      ; preds = %while.end
  %85 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntToken, ptr null, i32 1) to i32))
  %86 = load ptr, ptr %str_value, align 8
  %87 = getelementptr inbounds %string, ptr %86, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %memberidx20 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %88, i32 0, i32 5
  %89 = load ptr, ptr %memberidx20, align 8
  %90 = call ptr %89(ptr %86)
  %91 = call i64 @atol(ptr %90)
  tail call void @free(ptr %90)
  %92 = load ptr, ptr %range, align 8
  call void @IntToken_constructor(ptr %85, i64 %91, ptr %92)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %77, %true_block ], [ %85, %false_block ]
  store ptr %ternary, ptr %num_value, align 8
  %93 = load ptr, ptr %str_value, align 8
  call void @string___del__(ptr %93)
  tail call void @free(ptr %93)
  %94 = load ptr, ptr %num_value, align 8
  ret ptr %94
}

define i1 @Lexer_eof(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Lexer, ptr %2, i32 0, i32 3
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Lexer, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %string, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx2, align 4
  %7 = icmp sge i64 %3, %6
  ret i1 %7
}

define ptr @Lexer_mod_token(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = call i8 @Lexer_peek(ptr %2, i64 1)
  %4 = icmp eq i8 %3, 61
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %5 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %5)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %7 = load ptr, ptr %this, align 8
  %8 = call ptr @Lexer_get_range(ptr %7, i64 2)
  call void @Token_constructor(ptr %6, i64 16, ptr %8)
  ret ptr %6

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %10 = load ptr, ptr %this, align 8
  %11 = call ptr @Lexer_get_range(ptr %10, i64 1)
  call void @Token_constructor(ptr %9, i64 10, ptr %11)
  ret ptr %9
}

define ptr @Lexer_gt_token(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = call i8 @Lexer_peek(ptr %2, i64 1)
  %4 = icmp eq i8 %3, 61
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %5 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %5)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %7 = load ptr, ptr %this, align 8
  %8 = call ptr @Lexer_get_range(ptr %7, i64 2)
  call void @Token_constructor(ptr %6, i64 44, ptr %8)
  ret ptr %6

else:                                             ; preds = %1
  %9 = load ptr, ptr %this, align 8
  %10 = call i8 @Lexer_peek(ptr %9, i64 1)
  %11 = icmp eq i8 %10, 62
  br i1 %11, label %if.entry1, label %else2

ifend:                                            ; preds = %ifend3
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %13 = load ptr, ptr %this, align 8
  %14 = call ptr @Lexer_get_range(ptr %13, i64 1)
  call void @Token_constructor(ptr %12, i64 41, ptr %14)
  ret ptr %12

if.entry1:                                        ; preds = %else
  %15 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %15)
  %16 = load ptr, ptr %this, align 8
  %17 = call i8 @Lexer_peek(ptr %16, i64 1)
  %18 = icmp eq i8 %17, 61
  br i1 %18, label %if.entry4, label %else5

else2:                                            ; preds = %else
  br label %ifend3

ifend3:                                           ; preds = %else2
  br label %ifend

if.entry4:                                        ; preds = %if.entry1
  %19 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %19)
  %20 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %21 = load ptr, ptr %this, align 8
  %22 = call ptr @Lexer_get_range(ptr %21, i64 3)
  call void @Token_constructor(ptr %20, i64 21, ptr %22)
  ret ptr %20

else5:                                            ; preds = %if.entry1
  br label %ifend6

ifend6:                                           ; preds = %else5
  %23 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %24 = load ptr, ptr %this, align 8
  %25 = call ptr @Lexer_get_range(ptr %24, i64 2)
  call void @Token_constructor(ptr %23, i64 49, ptr %25)
  ret ptr %23
}

define ptr @Lexer_dot_token(ptr %0) {
  %this = alloca ptr, align 8
  %length = alloca i64, align 8
  %token = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 50, ptr %token, align 4
  store i64 1, ptr %length, align 4
  %2 = load ptr, ptr %this, align 8
  %3 = call i8 @Lexer_peek(ptr %2, i64 1)
  %4 = icmp eq i8 %3, 46
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %1
  store i64 52, ptr %token, align 4
  %5 = load i64, ptr %length, align 4
  %6 = add nsw i64 %5, 1
  store i64 %6, ptr %length, align 4
  %7 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %7)
  br label %ifend

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %9 = load i64, ptr %token, align 4
  %10 = load ptr, ptr %this, align 8
  %11 = load i64, ptr %length, align 4
  %12 = call ptr @Lexer_get_range(ptr %10, i64 %11)
  call void @Token_constructor(ptr %8, i64 %9, ptr %12)
  ret ptr %8
}

define ptr @Lexer_lex_token(ptr %0) {
  %this = alloca ptr, align 8
  %char_msg = alloca ptr, align 8
  %char = alloca i8, align 1
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Lexer, ptr %2, i32 0, i32 0
  %3 = load i8, ptr %memberidx, align 1
  store i8 %3, ptr %char, align 1
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Lexer, ptr %4, i32 0, i32 0
  %5 = load i8, ptr %memberidx1, align 1
  %6 = icmp eq i8 %5, 32
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Lexer, ptr %7, i32 0, i32 0
  %8 = load i8, ptr %memberidx2, align 1
  %9 = icmp eq i8 %8, 9
  %10 = or i1 %6, %9
  br i1 %10, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %11 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %11)
  %12 = load ptr, ptr %this, align 8
  %13 = call ptr @Lexer_lex_token(ptr %12)
  ret ptr %13

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %14 = load i8, ptr %char, align 1
  %15 = call i1 @is_identifier_char(i8 %14)
  br i1 %15, label %if.entry3, label %else4

if.entry3:                                        ; preds = %ifend
  %16 = load ptr, ptr %this, align 8
  %17 = call ptr @Lexer_identifier_token(ptr %16)
  ret ptr %17

else4:                                            ; preds = %ifend
  br label %ifend5

ifend5:                                           ; preds = %else4
  %18 = load i8, ptr %char, align 1
  %19 = icmp eq i8 %18, 34
  br i1 %19, label %if.entry6, label %else7

if.entry6:                                        ; preds = %ifend5
  %20 = load ptr, ptr %this, align 8
  %21 = call ptr @Lexer_string_token(ptr %20)
  ret ptr %21

else7:                                            ; preds = %ifend5
  br label %ifend8

ifend8:                                           ; preds = %else7
  %22 = load i8, ptr %char, align 1
  %23 = call i1 @is_number_char(i8 %22)
  br i1 %23, label %if.entry9, label %else10

if.entry9:                                        ; preds = %ifend8
  %24 = load ptr, ptr %this, align 8
  %25 = call ptr @Lexer_numeric_token(ptr %24)
  ret ptr %25

else10:                                           ; preds = %ifend8
  br label %ifend11

ifend11:                                          ; preds = %else10
  %26 = load i8, ptr %char, align 1
  %27 = icmp eq i8 %26, 58
  br i1 %27, label %if.entry12, label %else13

if.entry12:                                       ; preds = %ifend11
  %28 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %29 = load ptr, ptr %this, align 8
  %30 = call ptr @Lexer_get_range(ptr %29, i64 1)
  call void @Token_constructor(ptr %28, i64 1, ptr %30)
  ret ptr %28

else13:                                           ; preds = %ifend11
  br label %ifend14

ifend14:                                          ; preds = %else13
  %31 = load i8, ptr %char, align 1
  %32 = icmp eq i8 %31, 59
  br i1 %32, label %if.entry15, label %else16

if.entry15:                                       ; preds = %ifend14
  %33 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %34 = load ptr, ptr %this, align 8
  %35 = call ptr @Lexer_get_range(ptr %34, i64 1)
  call void @Token_constructor(ptr %33, i64 2, ptr %35)
  ret ptr %33

else16:                                           ; preds = %ifend14
  br label %ifend17

ifend17:                                          ; preds = %else16
  %36 = load i8, ptr %char, align 1
  %37 = icmp eq i8 %36, 44
  br i1 %37, label %if.entry18, label %else19

if.entry18:                                       ; preds = %ifend17
  %38 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %39 = load ptr, ptr %this, align 8
  %40 = call ptr @Lexer_get_range(ptr %39, i64 1)
  call void @Token_constructor(ptr %38, i64 3, ptr %40)
  ret ptr %38

else19:                                           ; preds = %ifend17
  br label %ifend20

ifend20:                                          ; preds = %else19
  %41 = load i8, ptr %char, align 1
  %42 = icmp eq i8 %41, 43
  br i1 %42, label %if.entry21, label %else22

if.entry21:                                       ; preds = %ifend20
  %43 = load ptr, ptr %this, align 8
  %44 = call ptr @Lexer_plus_token(ptr %43)
  ret ptr %44

else22:                                           ; preds = %ifend20
  br label %ifend23

ifend23:                                          ; preds = %else22
  %45 = load i8, ptr %char, align 1
  %46 = icmp eq i8 %45, 45
  br i1 %46, label %if.entry24, label %else25

if.entry24:                                       ; preds = %ifend23
  %47 = load ptr, ptr %this, align 8
  %48 = call ptr @Lexer_minus_token(ptr %47)
  ret ptr %48

else25:                                           ; preds = %ifend23
  br label %ifend26

ifend26:                                          ; preds = %else25
  %49 = load i8, ptr %char, align 1
  %50 = icmp eq i8 %49, 42
  br i1 %50, label %if.entry27, label %else28

if.entry27:                                       ; preds = %ifend26
  %51 = load ptr, ptr %this, align 8
  %52 = call ptr @Lexer_mult_token(ptr %51)
  ret ptr %52

else28:                                           ; preds = %ifend26
  br label %ifend29

ifend29:                                          ; preds = %else28
  %53 = load i8, ptr %char, align 1
  %54 = icmp eq i8 %53, 37
  br i1 %54, label %if.entry30, label %else31

if.entry30:                                       ; preds = %ifend29
  %55 = load ptr, ptr %this, align 8
  %56 = call ptr @Lexer_mod_token(ptr %55)
  ret ptr %56

else31:                                           ; preds = %ifend29
  br label %ifend32

ifend32:                                          ; preds = %else31
  %57 = load i8, ptr %char, align 1
  %58 = icmp eq i8 %57, 94
  br i1 %58, label %if.entry33, label %else34

if.entry33:                                       ; preds = %ifend32
  %59 = load ptr, ptr %this, align 8
  %60 = call ptr @Lexer_xor_token(ptr %59)
  ret ptr %60

else34:                                           ; preds = %ifend32
  br label %ifend35

ifend35:                                          ; preds = %else34
  %61 = load i8, ptr %char, align 1
  %62 = icmp eq i8 %61, 47
  br i1 %62, label %if.entry36, label %else37

if.entry36:                                       ; preds = %ifend35
  %63 = load ptr, ptr %this, align 8
  %64 = call i1 @Lexer_skip_comment(ptr %63)
  br i1 %64, label %if.entry39, label %else40

else37:                                           ; preds = %ifend35
  br label %ifend38

ifend38:                                          ; preds = %else37
  %65 = load i8, ptr %char, align 1
  %66 = icmp eq i8 %65, 40
  br i1 %66, label %if.entry42, label %else43

if.entry39:                                       ; preds = %if.entry36
  %67 = load ptr, ptr %this, align 8
  call void @Lexer_advance(ptr %67)
  %68 = load ptr, ptr %this, align 8
  %69 = call ptr @Lexer_lex_token(ptr %68)
  ret ptr %69

else40:                                           ; preds = %if.entry36
  br label %ifend41

ifend41:                                          ; preds = %else40
  %70 = load ptr, ptr %this, align 8
  %71 = call ptr @Lexer_div_token(ptr %70)
  ret ptr %71

if.entry42:                                       ; preds = %ifend38
  %72 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %73 = load ptr, ptr %this, align 8
  %74 = call ptr @Lexer_get_range(ptr %73, i64 1)
  call void @Token_constructor(ptr %72, i64 25, ptr %74)
  ret ptr %72

else43:                                           ; preds = %ifend38
  br label %ifend44

ifend44:                                          ; preds = %else43
  %75 = load i8, ptr %char, align 1
  %76 = icmp eq i8 %75, 41
  br i1 %76, label %if.entry45, label %else46

if.entry45:                                       ; preds = %ifend44
  %77 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %78 = load ptr, ptr %this, align 8
  %79 = call ptr @Lexer_get_range(ptr %78, i64 1)
  call void @Token_constructor(ptr %77, i64 26, ptr %79)
  ret ptr %77

else46:                                           ; preds = %ifend44
  br label %ifend47

ifend47:                                          ; preds = %else46
  %80 = load i8, ptr %char, align 1
  %81 = icmp eq i8 %80, 123
  br i1 %81, label %if.entry48, label %else49

if.entry48:                                       ; preds = %ifend47
  %82 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %83 = load ptr, ptr %this, align 8
  %84 = call ptr @Lexer_get_range(ptr %83, i64 1)
  call void @Token_constructor(ptr %82, i64 27, ptr %84)
  ret ptr %82

else49:                                           ; preds = %ifend47
  br label %ifend50

ifend50:                                          ; preds = %else49
  %85 = load i8, ptr %char, align 1
  %86 = icmp eq i8 %85, 125
  br i1 %86, label %if.entry51, label %else52

if.entry51:                                       ; preds = %ifend50
  %87 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %88 = load ptr, ptr %this, align 8
  %89 = call ptr @Lexer_get_range(ptr %88, i64 1)
  call void @Token_constructor(ptr %87, i64 28, ptr %89)
  ret ptr %87

else52:                                           ; preds = %ifend50
  br label %ifend53

ifend53:                                          ; preds = %else52
  %90 = load i8, ptr %char, align 1
  %91 = icmp eq i8 %90, 91
  br i1 %91, label %if.entry54, label %else55

if.entry54:                                       ; preds = %ifend53
  %92 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %93 = load ptr, ptr %this, align 8
  %94 = call ptr @Lexer_get_range(ptr %93, i64 1)
  call void @Token_constructor(ptr %92, i64 29, ptr %94)
  ret ptr %92

else55:                                           ; preds = %ifend53
  br label %ifend56

ifend56:                                          ; preds = %else55
  %95 = load i8, ptr %char, align 1
  %96 = icmp eq i8 %95, 93
  br i1 %96, label %if.entry57, label %else58

if.entry57:                                       ; preds = %ifend56
  %97 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %98 = load ptr, ptr %this, align 8
  %99 = call ptr @Lexer_get_range(ptr %98, i64 1)
  call void @Token_constructor(ptr %97, i64 30, ptr %99)
  ret ptr %97

else58:                                           ; preds = %ifend56
  br label %ifend59

ifend59:                                          ; preds = %else58
  %100 = load i8, ptr %char, align 1
  %101 = icmp eq i8 %100, 10
  %102 = load i8, ptr %char, align 1
  %103 = icmp eq i8 %102, 13
  %104 = or i1 %101, %103
  br i1 %104, label %if.entry60, label %else61

if.entry60:                                       ; preds = %ifend59
  %105 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %106 = load ptr, ptr %this, align 8
  %107 = call ptr @Lexer_get_range(ptr %106, i64 1)
  call void @Token_constructor(ptr %105, i64 33, ptr %107)
  ret ptr %105

else61:                                           ; preds = %ifend59
  br label %ifend62

ifend62:                                          ; preds = %else61
  %108 = load i8, ptr %char, align 1
  %109 = icmp eq i8 %108, 39
  br i1 %109, label %if.entry63, label %else64

if.entry63:                                       ; preds = %ifend62
  %110 = load ptr, ptr %this, align 8
  %111 = call ptr @Lexer_char_token(ptr %110)
  ret ptr %111

else64:                                           ; preds = %ifend62
  br label %ifend65

ifend65:                                          ; preds = %else64
  %112 = load i8, ptr %char, align 1
  %113 = icmp eq i8 %112, 63
  br i1 %113, label %if.entry66, label %else67

if.entry66:                                       ; preds = %ifend65
  %114 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %115 = load ptr, ptr %this, align 8
  %116 = call ptr @Lexer_get_range(ptr %115, i64 1)
  call void @Token_constructor(ptr %114, i64 36, ptr %116)
  ret ptr %114

else67:                                           ; preds = %ifend65
  br label %ifend68

ifend68:                                          ; preds = %else67
  %117 = load i8, ptr %char, align 1
  %118 = icmp eq i8 %117, 38
  br i1 %118, label %if.entry69, label %else70

if.entry69:                                       ; preds = %ifend68
  %119 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %120 = load ptr, ptr %this, align 8
  %121 = call ptr @Lexer_get_range(ptr %120, i64 1)
  call void @Token_constructor(ptr %119, i64 37, ptr %121)
  ret ptr %119

else70:                                           ; preds = %ifend68
  br label %ifend71

ifend71:                                          ; preds = %else70
  %122 = load i8, ptr %char, align 1
  %123 = icmp eq i8 %122, 61
  br i1 %123, label %if.entry72, label %else73

if.entry72:                                       ; preds = %ifend71
  %124 = load ptr, ptr %this, align 8
  %125 = call ptr @Lexer_eq_token(ptr %124)
  ret ptr %125

else73:                                           ; preds = %ifend71
  br label %ifend74

ifend74:                                          ; preds = %else73
  %126 = load i8, ptr %char, align 1
  %127 = icmp eq i8 %126, 33
  br i1 %127, label %if.entry75, label %else76

if.entry75:                                       ; preds = %ifend74
  %128 = load ptr, ptr %this, align 8
  %129 = call ptr @Lexer_neq_token(ptr %128)
  ret ptr %129

else76:                                           ; preds = %ifend74
  br label %ifend77

ifend77:                                          ; preds = %else76
  %130 = load i8, ptr %char, align 1
  %131 = icmp eq i8 %130, 62
  br i1 %131, label %if.entry78, label %else79

if.entry78:                                       ; preds = %ifend77
  %132 = load ptr, ptr %this, align 8
  %133 = call ptr @Lexer_gt_token(ptr %132)
  ret ptr %133

else79:                                           ; preds = %ifend77
  br label %ifend80

ifend80:                                          ; preds = %else79
  %134 = load i8, ptr %char, align 1
  %135 = icmp eq i8 %134, 60
  br i1 %135, label %if.entry81, label %else82

if.entry81:                                       ; preds = %ifend80
  %136 = load ptr, ptr %this, align 8
  %137 = call ptr @Lexer_lt_token(ptr %136)
  ret ptr %137

else82:                                           ; preds = %ifend80
  br label %ifend83

ifend83:                                          ; preds = %else82
  %138 = load i8, ptr %char, align 1
  %139 = icmp eq i8 %138, 46
  br i1 %139, label %if.entry84, label %else85

if.entry84:                                       ; preds = %ifend83
  %140 = load ptr, ptr %this, align 8
  %141 = call ptr @Lexer_dot_token(ptr %140)
  ret ptr %141

else85:                                           ; preds = %ifend83
  br label %ifend86

ifend86:                                          ; preds = %else85
  %142 = load i8, ptr %char, align 1
  %143 = icmp eq i8 %142, 0
  br i1 %143, label %if.entry87, label %else88

if.entry87:                                       ; preds = %ifend86
  %144 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %145 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloRange, ptr null, i32 1) to i32))
  %146 = load ptr, ptr %this, align 8
  %memberidx90 = getelementptr inbounds %Lexer, ptr %146, i32 0, i32 4
  %147 = load i64, ptr %memberidx90, align 4
  %148 = load ptr, ptr %this, align 8
  %memberidx91 = getelementptr inbounds %Lexer, ptr %148, i32 0, i32 5
  %149 = load i64, ptr %memberidx91, align 4
  call void @FloRange_constructor(ptr %145, i64 0, i64 0, i64 %147, i64 %149)
  call void @Token_constructor(ptr %144, i64 46, ptr %145)
  ret ptr %144

else88:                                           ; preds = %ifend86
  br label %ifend89

ifend89:                                          ; preds = %else88
  %150 = load ptr, ptr %this, align 8
  %memberidx92 = getelementptr inbounds %Lexer, ptr %150, i32 0, i32 1
  %151 = load ptr, ptr %memberidx92, align 8
  %152 = getelementptr inbounds %string, ptr %151, i32 0, i32 0
  %153 = load ptr, ptr %152, align 8
  %memberidx93 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %153, i32 0, i32 1
  %154 = load ptr, ptr %memberidx93, align 8
  %155 = load ptr, ptr %this, align 8
  %memberidx94 = getelementptr inbounds %Lexer, ptr %155, i32 0, i32 3
  %156 = load i64, ptr %memberidx94, align 4
  %157 = call ptr %154(ptr %151, i64 %156, i64 1)
  store ptr %157, ptr %char_msg, align 8
  %158 = load ptr, ptr %this, align 8
  %memberidx95 = getelementptr inbounds %Lexer, ptr %158, i32 0, i32 3
  %159 = load i64, ptr %memberidx95, align 4
  %160 = alloca ptr, align 8
  %161 = call i64 (ptr, ptr, ...) @asprintf(ptr %160, ptr @240, i64 %159)
  %162 = load ptr, ptr %160, align 8
  %163 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %163, ptr %162, i64 %161)
  call void @println(ptr %163)
  %164 = load ptr, ptr %this, align 8
  %memberidx96 = getelementptr inbounds %Lexer, ptr %164, i32 0, i32 2
  %165 = load ptr, ptr %memberidx96, align 8
  %166 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloError, ptr null, i32 1) to i32))
  %167 = load ptr, ptr %char_msg, align 8
  %168 = getelementptr inbounds %string, ptr %167, i32 0, i32 0
  %169 = load ptr, ptr %168, align 8
  %memberidx97 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %169, i32 0, i32 5
  %170 = load ptr, ptr %memberidx97, align 8
  %171 = call ptr %170(ptr %167)
  %172 = alloca ptr, align 8
  %173 = call i64 (ptr, ptr, ...) @asprintf(ptr %172, ptr @241, ptr %171)
  %174 = load ptr, ptr %172, align 8
  %175 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %175, ptr %174, i64 %173)
  tail call void @free(ptr %171)
  %176 = load ptr, ptr %this, align 8
  %177 = call ptr @Lexer_get_range(ptr %176, i64 1)
  call void @FloError_constructor(ptr %166, i64 0, ptr %175, ptr %177)
  call void @Array_FloError____sl__(ptr %165, ptr %166)
  %178 = load ptr, ptr %char_msg, align 8
  call void @string___del__(ptr %178)
  tail call void @free(ptr %178)
  ret ptr null
}

define void @Lexer_constructor(ptr %0, ptr %1, ptr %2) {
  %errors = alloca ptr, align 8
  %this = alloca ptr, align 8
  %text = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %text, align 8
  store ptr %2, ptr %errors, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Lexer, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %text, align 8
  store ptr %5, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Lexer, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %errors, align 8
  store ptr %7, ptr %memberidx1, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Lexer, ptr %8, i32 0, i32 3
  store i64 -1, ptr %memberidx2, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Lexer, ptr %9, i32 0, i32 5
  store i64 1, ptr %memberidx3, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Lexer, ptr %10, i32 0, i32 4
  store i64 0, ptr %memberidx4, align 4
  ret void
}

define i1 @in_base_range(i8 %0, i64 %1) {
  %base = alloca i64, align 8
  %char = alloca i8, align 1
  store i8 %0, ptr %char, align 1
  store i64 %1, ptr %base, align 4
  %3 = load i64, ptr %base, align 4
  %4 = icmp slt i64 %3, 10
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %5 = load i8, ptr %char, align 1
  %6 = icmp sge i8 %5, 48
  %7 = load i8, ptr %char, align 1
  %8 = sext i8 %7 to i64
  %9 = load i64, ptr %base, align 4
  %10 = add nsw i64 %9, 48
  %11 = icmp sle i64 %8, %10
  %12 = and i1 %6, %11
  ret i1 %12

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %13 = load i8, ptr %char, align 1
  %14 = icmp sge i8 %13, 48
  %15 = load i8, ptr %char, align 1
  %16 = sext i8 %15 to i64
  %17 = load i64, ptr %base, align 4
  %18 = add nsw i64 %17, 48
  %19 = icmp sle i64 %16, %18
  %20 = and i1 %14, %19
  %21 = load i8, ptr %char, align 1
  %22 = icmp sge i8 %21, 65
  %23 = load i8, ptr %char, align 1
  %24 = sext i8 %23 to i64
  %25 = load i64, ptr %base, align 4
  %26 = add nsw i64 %25, 65
  %27 = icmp sle i64 %24, %26
  %28 = and i1 %22, %27
  %29 = or i1 %20, %28
  ret i1 %29
}

define i8 @capitalize(i8 %0) {
  %char = alloca i8, align 1
  store i8 %0, ptr %char, align 1
  %2 = load i8, ptr %char, align 1
  %3 = icmp sge i8 %2, 97
  %4 = load i8, ptr %char, align 1
  %5 = icmp sle i8 %4, 122
  %6 = and i1 %3, %5
  br i1 %6, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %7 = load i8, ptr %char, align 1
  %8 = sub nuw i8 %7, 32
  ret i8 %8

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %9 = load i8, ptr %char, align 1
  ret i8 %9
}

define i1 @is_number_char(i8 %0) {
  %char = alloca i8, align 1
  store i8 %0, ptr %char, align 1
  %2 = load i8, ptr %char, align 1
  %3 = icmp sge i8 %2, 48
  %4 = load i8, ptr %char, align 1
  %5 = icmp sle i8 %4, 57
  %6 = and i1 %3, %5
  ret i1 %6
}

define void @FloatToken_constructor(ptr %0, double %1, ptr %2) {
  %range = alloca ptr, align 8
  %value = alloca double, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Token_constructor, ptr %super, align 8
  store double %1, ptr %value, align 8
  store ptr %2, ptr %range, align 8
  %4 = load ptr, ptr %super, align 8
  %5 = load ptr, ptr %range, align 8
  call void %4(ptr %0, i64 32, ptr %5)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %FloatToken, ptr %6, i32 0, i32 2
  %7 = load double, ptr %value, align 8
  store double %7, ptr %memberidx, align 8
  ret void
}

declare double @atof(ptr)

declare i64 @atol(ptr)

define i1 @is_identifier_char(i8 %0) {
  %char = alloca i8, align 1
  store i8 %0, ptr %char, align 1
  %2 = load i8, ptr %char, align 1
  %3 = icmp sge i8 %2, 65
  %4 = load i8, ptr %char, align 1
  %5 = icmp sle i8 %4, 90
  %6 = and i1 %3, %5
  %7 = load i8, ptr %char, align 1
  %8 = icmp sge i8 %7, 97
  %9 = load i8, ptr %char, align 1
  %10 = icmp sle i8 %9, 122
  %11 = and i1 %8, %10
  %12 = or i1 %6, %11
  %13 = load i8, ptr %char, align 1
  %14 = icmp eq i8 %13, 95
  %15 = or i1 %12, %14
  ret i1 %15
}

define i64 @string_to_kw_token(ptr %0) {
  %word = alloca ptr, align 8
  store ptr %0, ptr %word, align 8
  %2 = load ptr, ptr %word, align 8
  %3 = call ptr @string_from_bytes(ptr @213, i64 3)
  %4 = call i1 @string___eq__(ptr %2, ptr %3)
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %1
  ret i64 8

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %5 = load ptr, ptr %word, align 8
  %6 = call ptr @string_from_bytes(ptr @214, i64 2)
  %7 = call i1 @string___eq__(ptr %5, ptr %6)
  br i1 %7, label %if.entry1, label %else2

if.entry1:                                        ; preds = %ifend
  ret i64 9

else2:                                            ; preds = %ifend
  br label %ifend3

ifend3:                                           ; preds = %else2
  %8 = load ptr, ptr %word, align 8
  %9 = call ptr @string_from_bytes(ptr @215, i64 5)
  %10 = call i1 @string___eq__(ptr %8, ptr %9)
  br i1 %10, label %if.entry4, label %else5

if.entry4:                                        ; preds = %ifend3
  ret i64 54

else5:                                            ; preds = %ifend3
  br label %ifend6

ifend6:                                           ; preds = %else5
  %11 = load ptr, ptr %word, align 8
  %12 = call ptr @string_from_bytes(ptr @216, i64 3)
  %13 = call i1 @string___eq__(ptr %11, ptr %12)
  br i1 %13, label %if.entry7, label %else8

if.entry7:                                        ; preds = %ifend6
  ret i64 55

else8:                                            ; preds = %ifend6
  br label %ifend9

ifend9:                                           ; preds = %else8
  %14 = load ptr, ptr %word, align 8
  %15 = call ptr @string_from_bytes(ptr @217, i64 2)
  %16 = call i1 @string___eq__(ptr %14, ptr %15)
  br i1 %16, label %if.entry10, label %else11

if.entry10:                                       ; preds = %ifend9
  ret i64 56

else11:                                           ; preds = %ifend9
  br label %ifend12

ifend12:                                          ; preds = %else11
  %17 = load ptr, ptr %word, align 8
  %18 = call ptr @string_from_bytes(ptr @218, i64 5)
  %19 = call i1 @string___eq__(ptr %17, ptr %18)
  br i1 %19, label %if.entry13, label %else14

if.entry13:                                       ; preds = %ifend12
  ret i64 57

else14:                                           ; preds = %ifend12
  br label %ifend15

ifend15:                                          ; preds = %else14
  %20 = load ptr, ptr %word, align 8
  %21 = call ptr @string_from_bytes(ptr @219, i64 4)
  %22 = call i1 @string___eq__(ptr %20, ptr %21)
  br i1 %22, label %if.entry16, label %else17

if.entry16:                                       ; preds = %ifend15
  ret i64 58

else17:                                           ; preds = %ifend15
  br label %ifend18

ifend18:                                          ; preds = %else17
  %23 = load ptr, ptr %word, align 8
  %24 = call ptr @string_from_bytes(ptr @220, i64 3)
  %25 = call i1 @string___eq__(ptr %23, ptr %24)
  br i1 %25, label %if.entry19, label %else20

if.entry19:                                       ; preds = %ifend18
  ret i64 59

else20:                                           ; preds = %ifend18
  br label %ifend21

ifend21:                                          ; preds = %else20
  %26 = load ptr, ptr %word, align 8
  %27 = call ptr @string_from_bytes(ptr @221, i64 5)
  %28 = call i1 @string___eq__(ptr %26, ptr %27)
  br i1 %28, label %if.entry22, label %else23

if.entry22:                                       ; preds = %ifend21
  ret i64 60

else23:                                           ; preds = %ifend21
  br label %ifend24

ifend24:                                          ; preds = %else23
  %29 = load ptr, ptr %word, align 8
  %30 = call ptr @string_from_bytes(ptr @222, i64 3)
  %31 = call i1 @string___eq__(ptr %29, ptr %30)
  br i1 %31, label %if.entry25, label %else26

if.entry25:                                       ; preds = %ifend24
  ret i64 61

else26:                                           ; preds = %ifend24
  br label %ifend27

ifend27:                                          ; preds = %else26
  %32 = load ptr, ptr %word, align 8
  %33 = call ptr @string_from_bytes(ptr @223, i64 5)
  %34 = call i1 @string___eq__(ptr %32, ptr %33)
  br i1 %34, label %if.entry28, label %else29

if.entry28:                                       ; preds = %ifend27
  ret i64 62

else29:                                           ; preds = %ifend27
  br label %ifend30

ifend30:                                          ; preds = %else29
  %35 = load ptr, ptr %word, align 8
  %36 = call ptr @string_from_bytes(ptr @224, i64 8)
  %37 = call i1 @string___eq__(ptr %35, ptr %36)
  br i1 %37, label %if.entry31, label %else32

if.entry31:                                       ; preds = %ifend30
  ret i64 63

else32:                                           ; preds = %ifend30
  br label %ifend33

ifend33:                                          ; preds = %else32
  %38 = load ptr, ptr %word, align 8
  %39 = call ptr @string_from_bytes(ptr @225, i64 6)
  %40 = call i1 @string___eq__(ptr %38, ptr %39)
  br i1 %40, label %if.entry34, label %else35

if.entry34:                                       ; preds = %ifend33
  ret i64 64

else35:                                           ; preds = %ifend33
  br label %ifend36

ifend36:                                          ; preds = %else35
  %41 = load ptr, ptr %word, align 8
  %42 = call ptr @string_from_bytes(ptr @226, i64 6)
  %43 = call i1 @string___eq__(ptr %41, ptr %42)
  br i1 %43, label %if.entry37, label %else38

if.entry37:                                       ; preds = %ifend36
  ret i64 65

else38:                                           ; preds = %ifend36
  br label %ifend39

ifend39:                                          ; preds = %else38
  %44 = load ptr, ptr %word, align 8
  %45 = call ptr @string_from_bytes(ptr @227, i64 7)
  %46 = call i1 @string___eq__(ptr %44, ptr %45)
  br i1 %46, label %if.entry40, label %else41

if.entry40:                                       ; preds = %ifend39
  ret i64 66

else41:                                           ; preds = %ifend39
  br label %ifend42

ifend42:                                          ; preds = %else41
  %47 = load ptr, ptr %word, align 8
  %48 = call ptr @string_from_bytes(ptr @228, i64 6)
  %49 = call i1 @string___eq__(ptr %47, ptr %48)
  br i1 %49, label %if.entry43, label %else44

if.entry43:                                       ; preds = %ifend42
  ret i64 67

else44:                                           ; preds = %ifend42
  br label %ifend45

ifend45:                                          ; preds = %else44
  %50 = load ptr, ptr %word, align 8
  %51 = call ptr @string_from_bytes(ptr @229, i64 9)
  %52 = call i1 @string___eq__(ptr %50, ptr %51)
  br i1 %52, label %if.entry46, label %else47

if.entry46:                                       ; preds = %ifend45
  ret i64 68

else47:                                           ; preds = %ifend45
  br label %ifend48

ifend48:                                          ; preds = %else47
  %53 = load ptr, ptr %word, align 8
  %54 = call ptr @string_from_bytes(ptr @230, i64 2)
  %55 = call i1 @string___eq__(ptr %53, ptr %54)
  br i1 %55, label %if.entry49, label %else50

if.entry49:                                       ; preds = %ifend48
  ret i64 69

else50:                                           ; preds = %ifend48
  br label %ifend51

ifend51:                                          ; preds = %else50
  %56 = load ptr, ptr %word, align 8
  %57 = call ptr @string_from_bytes(ptr @231, i64 5)
  %58 = call i1 @string___eq__(ptr %56, ptr %57)
  br i1 %58, label %if.entry52, label %else53

if.entry52:                                       ; preds = %ifend51
  ret i64 70

else53:                                           ; preds = %ifend51
  br label %ifend54

ifend54:                                          ; preds = %else53
  %59 = load ptr, ptr %word, align 8
  %60 = call ptr @string_from_bytes(ptr @232, i64 4)
  %61 = call i1 @string___eq__(ptr %59, ptr %60)
  br i1 %61, label %if.entry55, label %else56

if.entry55:                                       ; preds = %ifend54
  ret i64 71

else56:                                           ; preds = %ifend54
  br label %ifend57

ifend57:                                          ; preds = %else56
  %62 = load ptr, ptr %word, align 8
  %63 = call ptr @string_from_bytes(ptr @233, i64 3)
  %64 = call i1 @string___eq__(ptr %62, ptr %63)
  br i1 %64, label %if.entry58, label %else59

if.entry58:                                       ; preds = %ifend57
  ret i64 72

else59:                                           ; preds = %ifend57
  br label %ifend60

ifend60:                                          ; preds = %else59
  %65 = load ptr, ptr %word, align 8
  %66 = call ptr @string_from_bytes(ptr @234, i64 3)
  %67 = call i1 @string___eq__(ptr %65, ptr %66)
  br i1 %67, label %if.entry61, label %else62

if.entry61:                                       ; preds = %ifend60
  ret i64 73

else62:                                           ; preds = %ifend60
  br label %ifend63

ifend63:                                          ; preds = %else62
  %68 = load ptr, ptr %word, align 8
  %69 = call ptr @string_from_bytes(ptr @235, i64 2)
  %70 = call i1 @string___eq__(ptr %68, ptr %69)
  br i1 %70, label %if.entry64, label %else65

if.entry64:                                       ; preds = %ifend63
  ret i64 74

else65:                                           ; preds = %ifend63
  br label %ifend66

ifend66:                                          ; preds = %else65
  ret i64 0
}

define ptr @unescape(ptr %0) {
  %str = alloca ptr, align 8
  %aval = alloca ptr, align 8
  %str_builder = alloca ptr, align 8
  %char = alloca i8, align 1
  %i = alloca i64, align 8
  store ptr %0, ptr %str, align 8
  %2 = alloca %StringBuilder, align 8
  %3 = load ptr, ptr %str, align 8
  %memberidx = getelementptr inbounds %string, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  call void @StringBuilder_constructor(ptr %2, i64 %4)
  store ptr %2, ptr %str_builder, align 8
  store i8 0, ptr %char, align 1
  %5 = load i8, ptr %char, align 1
  store ptr %char, ptr %aval, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load ptr, ptr %str, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = icmp slt i64 %6, %8
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load ptr, ptr %str, align 8
  %11 = getelementptr inbounds %string, ptr %10, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %12, i32 0, i32 2
  %13 = load ptr, ptr %memberidx2, align 8
  %14 = load i64, ptr %i, align 4
  %15 = call i8 %13(ptr %10, i64 %14)
  store i8 %15, ptr %char, align 1
  %16 = load i8, ptr %char, align 1
  %17 = icmp eq i8 %16, 92
  br i1 %17, label %if.entry, label %else

for.incr:                                         ; preds = %ifend, %if.entry16, %if.entry8
  %18 = load i64, ptr %i, align 4
  %19 = add nsw i64 %18, 1
  store i64 %19, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load ptr, ptr %str_builder, align 8
  %21 = getelementptr inbounds %StringBuilder, ptr %20, i32 0, i32 0
  %22 = load ptr, ptr %21, align 8
  %memberidx22 = getelementptr inbounds { ptr, ptr, ptr, ptr }, ptr %22, i32 0, i32 3
  %23 = load ptr, ptr %memberidx22, align 8
  %24 = call ptr %23(ptr %20)
  ret ptr %24

if.entry:                                         ; preds = %for.body
  %25 = load i64, ptr %i, align 4
  %26 = add nuw i64 %25, 3
  %27 = load ptr, ptr %str, align 8
  %memberidx3 = getelementptr inbounds %string, ptr %27, i32 0, i32 2
  %28 = load i64, ptr %memberidx3, align 4
  %29 = icmp slt i64 %26, %28
  br i1 %29, label %if.entry4, label %else5

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else, %ifend6
  %30 = load ptr, ptr %str_builder, align 8
  %31 = getelementptr inbounds %StringBuilder, ptr %30, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  %memberidx21 = getelementptr inbounds { ptr, ptr, ptr, ptr }, ptr %32, i32 0, i32 2
  %33 = load ptr, ptr %memberidx21, align 8
  %34 = load i8, ptr %char, align 1
  call void %33(ptr %30, i8 %34)
  br label %for.incr

if.entry4:                                        ; preds = %if.entry
  %35 = load ptr, ptr %str, align 8
  %36 = getelementptr inbounds %string, ptr %35, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %memberidx7 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %37, i32 0, i32 3
  %38 = load ptr, ptr %memberidx7, align 8
  %39 = call ptr %38(ptr %35)
  %40 = load i64, ptr %i, align 4
  %41 = getelementptr inbounds i8, ptr %39, i64 %40
  %42 = getelementptr inbounds i8, ptr %41, i64 1
  store ptr %42, ptr %aval, align 8
  %43 = load ptr, ptr %aval, align 8
  %44 = call i64 @memcmp(ptr %43, ptr @236, i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 3))
  %45 = icmp eq i64 %44, 0
  %46 = load ptr, ptr %aval, align 8
  %47 = call i64 @memcmp(ptr %46, ptr @237, i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 3))
  %48 = icmp eq i64 %47, 0
  %49 = or i1 %45, %48
  br i1 %49, label %if.entry8, label %else9

else5:                                            ; preds = %if.entry
  br label %ifend6

ifend6:                                           ; preds = %else5, %ifend15
  %50 = load ptr, ptr %str, align 8
  %51 = getelementptr inbounds %string, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %memberidx20 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %52, i32 0, i32 2
  %53 = load ptr, ptr %memberidx20, align 8
  %54 = load i64, ptr %i, align 4
  %55 = add nsw i64 %54, 1
  store i64 %55, ptr %i, align 4
  %56 = call i8 %53(ptr %50, i64 %55)
  %57 = call i8 @get_escape_char(i8 %56)
  store i8 %57, ptr %char, align 1
  br label %ifend

if.entry8:                                        ; preds = %if.entry4
  %58 = load ptr, ptr %str_builder, align 8
  %59 = getelementptr inbounds %StringBuilder, ptr %58, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %memberidx11 = getelementptr inbounds { ptr, ptr, ptr, ptr }, ptr %60, i32 0, i32 1
  %61 = load ptr, ptr %memberidx11, align 8
  %62 = call ptr @string_from_bytes(ptr @238, i64 1)
  call void %61(ptr %58, ptr %62)
  %63 = load i64, ptr %i, align 4
  %64 = add nuw i64 %63, 3
  store i64 %64, ptr %i, align 4
  br label %for.incr

else9:                                            ; preds = %if.entry4
  br label %ifend10

ifend10:                                          ; preds = %else9
  %65 = load i64, ptr %i, align 4
  %66 = add nuw i64 %65, 6
  %67 = load ptr, ptr %str, align 8
  %memberidx12 = getelementptr inbounds %string, ptr %67, i32 0, i32 2
  %68 = load i64, ptr %memberidx12, align 4
  %69 = icmp slt i64 %66, %68
  br i1 %69, label %if.entry13, label %else14

if.entry13:                                       ; preds = %ifend10
  %70 = load ptr, ptr %aval, align 8
  %71 = call i64 @memcmp(ptr %70, ptr @239, i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 5))
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %if.entry16, label %else17

else14:                                           ; preds = %ifend10
  br label %ifend15

ifend15:                                          ; preds = %else14, %ifend18
  br label %ifend6

if.entry16:                                       ; preds = %if.entry13
  %73 = load ptr, ptr %str_builder, align 8
  %74 = getelementptr inbounds %StringBuilder, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %74, align 8
  %memberidx19 = getelementptr inbounds { ptr, ptr, ptr, ptr }, ptr %75, i32 0, i32 1
  %76 = load ptr, ptr %memberidx19, align 8
  %77 = call ptr @string_from_bytes(ptr @238, i64 1)
  call void %76(ptr %73, ptr %77)
  %78 = load i64, ptr %i, align 4
  %79 = add nuw i64 %78, 5
  store i64 %79, ptr %i, align 4
  br label %for.incr

else17:                                           ; preds = %if.entry13
  br label %ifend18

ifend18:                                          ; preds = %else17
  br label %ifend15
}

define i8 @get_escape_char(i8 %0) {
  %char = alloca i8, align 1
  store i8 %0, ptr %char, align 1
  %2 = load i8, ptr %char, align 1
  %3 = icmp eq i8 %2, 97
  br i1 %3, label %if.entry, label %else

if.entry:                                         ; preds = %1
  ret i8 7

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %4 = load i8, ptr %char, align 1
  %5 = icmp eq i8 %4, 98
  br i1 %5, label %if.entry1, label %else2

if.entry1:                                        ; preds = %ifend
  ret i8 8

else2:                                            ; preds = %ifend
  br label %ifend3

ifend3:                                           ; preds = %else2
  %6 = load i8, ptr %char, align 1
  %7 = icmp eq i8 %6, 116
  br i1 %7, label %if.entry4, label %else5

if.entry4:                                        ; preds = %ifend3
  ret i8 9

else5:                                            ; preds = %ifend3
  br label %ifend6

ifend6:                                           ; preds = %else5
  %8 = load i8, ptr %char, align 1
  %9 = icmp eq i8 %8, 102
  br i1 %9, label %if.entry7, label %else8

if.entry7:                                        ; preds = %ifend6
  ret i8 12

else8:                                            ; preds = %ifend6
  br label %ifend9

ifend9:                                           ; preds = %else8
  %10 = load i8, ptr %char, align 1
  %11 = icmp eq i8 %10, 110
  br i1 %11, label %if.entry10, label %else11

if.entry10:                                       ; preds = %ifend9
  ret i8 10

else11:                                           ; preds = %ifend9
  br label %ifend12

ifend12:                                          ; preds = %else11
  %12 = load i8, ptr %char, align 1
  %13 = icmp eq i8 %12, 114
  br i1 %13, label %if.entry13, label %else14

if.entry13:                                       ; preds = %ifend12
  ret i8 13

else14:                                           ; preds = %ifend12
  br label %ifend15

ifend15:                                          ; preds = %else14
  %14 = load i8, ptr %char, align 1
  %15 = icmp eq i8 %14, 118
  br i1 %15, label %if.entry16, label %else17

if.entry16:                                       ; preds = %ifend15
  ret i8 11

else17:                                           ; preds = %ifend15
  br label %ifend18

ifend18:                                          ; preds = %else17
  %16 = load i8, ptr %char, align 1
  %17 = icmp eq i8 %16, 48
  br i1 %17, label %if.entry19, label %else20

if.entry19:                                       ; preds = %ifend18
  ret i8 0

else20:                                           ; preds = %ifend18
  br label %ifend21

ifend21:                                          ; preds = %else20
  %18 = load i8, ptr %char, align 1
  %19 = icmp eq i8 %18, 39
  br i1 %19, label %if.entry22, label %else23

if.entry22:                                       ; preds = %ifend21
  ret i8 39

else23:                                           ; preds = %ifend21
  br label %ifend24

ifend24:                                          ; preds = %else23
  %20 = load i8, ptr %char, align 1
  %21 = icmp eq i8 %20, 34
  br i1 %21, label %if.entry25, label %else26

if.entry25:                                       ; preds = %ifend24
  ret i8 34

else26:                                           ; preds = %ifend24
  br label %ifend27

ifend27:                                          ; preds = %else26
  %22 = load i8, ptr %char, align 1
  %23 = icmp eq i8 %22, 92
  br i1 %23, label %if.entry28, label %else29

if.entry28:                                       ; preds = %ifend27
  ret i8 92

else29:                                           ; preds = %ifend27
  br label %ifend30

ifend30:                                          ; preds = %else29
  %24 = load i8, ptr %char, align 1
  ret i8 %24
}

define ptr @Parser_parse(ptr %0, ptr %1) {
  %errors = alloca ptr, align 8
  %tokens = alloca ptr, align 8
  %module_node = alloca ptr, align 8
  %parser = alloca ptr, align 8
  store ptr %0, ptr %tokens, align 8
  store ptr %1, ptr %errors, align 8
  %3 = alloca %Parser, align 8
  %4 = load ptr, ptr %tokens, align 8
  %5 = load ptr, ptr %errors, align 8
  call void @Parser_constructor(ptr %3, ptr %4, ptr %5)
  store ptr %3, ptr %parser, align 8
  %6 = load ptr, ptr %parser, align 8
  call void @Parser_advance(ptr %6)
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ModuleAST, ptr null, i32 1) to i32))
  call void @ModuleAST_constructor(ptr %7)
  store ptr %7, ptr %module_node, align 8
  %8 = load ptr, ptr %parser, align 8
  call void @Parser_new_lines(ptr %8)
  %9 = load ptr, ptr %parser, align 8
  %10 = call i1 @Parser_can_parse(ptr %9)
  br i1 %10, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %2
  %11 = load ptr, ptr %parser, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %11, i32 0, i32 2
  %12 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %12, i32 0, i32 0
  %13 = load i64, ptr %memberidx1, align 4
  %14 = icmp eq i64 %13, 61
  br i1 %14, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %else35, %2
  %15 = load ptr, ptr %module_node, align 8
  ret ptr %15

if.entry:                                         ; preds = %while.entry
  %16 = load ptr, ptr %parser, align 8
  call void @Parser_advance(ptr %16)
  %17 = load ptr, ptr %module_node, align 8
  %memberidx2 = getelementptr inbounds %ModuleAST, ptr %17, i32 0, i32 0
  %18 = load ptr, ptr %memberidx2, align 8
  %19 = load ptr, ptr %parser, align 8
  %20 = call ptr @Parser_parse_function(ptr %19)
  call void @Array_FunctionDeclarationNode____sl__(ptr %18, ptr %20)
  br label %ifend

else:                                             ; preds = %while.entry
  %21 = load ptr, ptr %parser, align 8
  %memberidx3 = getelementptr inbounds %Parser, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Token, ptr %22, i32 0, i32 0
  %23 = load i64, ptr %memberidx4, align 4
  %24 = icmp eq i64 %23, 70
  br i1 %24, label %if.entry5, label %else6

ifend:                                            ; preds = %ifend7, %if.entry
  %25 = load ptr, ptr %parser, align 8
  call void @Parser_new_lines(ptr %25)
  %26 = load ptr, ptr %parser, align 8
  %27 = call i1 @Parser_can_parse(ptr %26)
  br i1 %27, label %while.entry, label %while.end

if.entry5:                                        ; preds = %else
  %28 = load ptr, ptr %module_node, align 8
  %memberidx8 = getelementptr inbounds %ModuleAST, ptr %28, i32 0, i32 1
  %29 = load ptr, ptr %memberidx8, align 8
  %30 = load ptr, ptr %parser, align 8
  %31 = call ptr @Parser_parse_class(ptr %30)
  call void @Array_ClassDeclarationNode____sl__(ptr %29, ptr %31)
  br label %ifend7

else6:                                            ; preds = %else
  %32 = load ptr, ptr %parser, align 8
  %memberidx9 = getelementptr inbounds %Parser, ptr %32, i32 0, i32 2
  %33 = load ptr, ptr %memberidx9, align 8
  %memberidx10 = getelementptr inbounds %Token, ptr %33, i32 0, i32 0
  %34 = load i64, ptr %memberidx10, align 4
  %35 = icmp eq i64 %34, 71
  br i1 %35, label %if.entry11, label %else12

ifend7:                                           ; preds = %ifend13, %if.entry5
  br label %ifend

if.entry11:                                       ; preds = %else6
  %36 = load ptr, ptr %module_node, align 8
  %memberidx14 = getelementptr inbounds %ModuleAST, ptr %36, i32 0, i32 2
  %37 = load ptr, ptr %memberidx14, align 8
  %38 = load ptr, ptr %parser, align 8
  %39 = call ptr @Parser_parse_enum(ptr %38)
  call void @Array_EnumNode____sl__(ptr %37, ptr %39)
  br label %ifend13

else12:                                           ; preds = %else6
  %40 = load ptr, ptr %parser, align 8
  %memberidx15 = getelementptr inbounds %Parser, ptr %40, i32 0, i32 2
  %41 = load ptr, ptr %memberidx15, align 8
  %memberidx16 = getelementptr inbounds %Token, ptr %41, i32 0, i32 0
  %42 = load i64, ptr %memberidx16, align 4
  %43 = icmp eq i64 %42, 65
  br i1 %43, label %if.entry17, label %else18

ifend13:                                          ; preds = %ifend19, %if.entry11
  br label %ifend7

if.entry17:                                       ; preds = %else12
  %44 = load ptr, ptr %module_node, align 8
  %memberidx20 = getelementptr inbounds %ModuleAST, ptr %44, i32 0, i32 3
  %45 = load ptr, ptr %memberidx20, align 8
  %46 = load ptr, ptr %parser, align 8
  %47 = call ptr @Parser_parse_import(ptr %46)
  call void @Array_ImportNode____sl__(ptr %45, ptr %47)
  br label %ifend19

else18:                                           ; preds = %else12
  %48 = load ptr, ptr %parser, align 8
  %memberidx21 = getelementptr inbounds %Parser, ptr %48, i32 0, i32 2
  %49 = load ptr, ptr %memberidx21, align 8
  %memberidx22 = getelementptr inbounds %Token, ptr %49, i32 0, i32 0
  %50 = load i64, ptr %memberidx22, align 4
  %51 = icmp eq i64 %50, 54
  br i1 %51, label %if.entry23, label %else24

ifend19:                                          ; preds = %ifend25, %if.entry17
  br label %ifend13

if.entry23:                                       ; preds = %else18
  %52 = load ptr, ptr %module_node, align 8
  %memberidx26 = getelementptr inbounds %ModuleAST, ptr %52, i32 0, i32 4
  %53 = load ptr, ptr %memberidx26, align 8
  %54 = load ptr, ptr %parser, align 8
  %55 = call ptr @Parser_parse_const_declaration_statement(ptr %54)
  call void @Array_ConstDeclarationStatement____sl__(ptr %53, ptr %55)
  br label %ifend25

else24:                                           ; preds = %else18
  %56 = load ptr, ptr %parser, align 8
  %memberidx27 = getelementptr inbounds %Parser, ptr %56, i32 0, i32 2
  %57 = load ptr, ptr %memberidx27, align 8
  %memberidx28 = getelementptr inbounds %Token, ptr %57, i32 0, i32 0
  %58 = load i64, ptr %memberidx28, align 4
  %59 = icmp eq i64 %58, 55
  br i1 %59, label %if.entry29, label %else30

ifend25:                                          ; preds = %ifend31, %if.entry23
  br label %ifend19

if.entry29:                                       ; preds = %else24
  %60 = load ptr, ptr %module_node, align 8
  %memberidx32 = getelementptr inbounds %ModuleAST, ptr %60, i32 0, i32 5
  %61 = load ptr, ptr %memberidx32, align 8
  %62 = load ptr, ptr %parser, align 8
  %63 = call ptr @Parser_parse_variable_declaration_statement(ptr %62)
  call void @Array_VarDeclarationStatement____sl__(ptr %61, ptr %63)
  br label %ifend31

else30:                                           ; preds = %else24
  %64 = load ptr, ptr %parser, align 8
  %memberidx33 = getelementptr inbounds %Parser, ptr %64, i32 0, i32 2
  %65 = load ptr, ptr %memberidx33, align 8
  %66 = call i1 @tok_is_type_id(ptr %65)
  br i1 %66, label %if.entry34, label %else35

ifend31:                                          ; preds = %ifend36, %if.entry29
  br label %ifend25

if.entry34:                                       ; preds = %else30
  %67 = load ptr, ptr %module_node, align 8
  %memberidx37 = getelementptr inbounds %ModuleAST, ptr %67, i32 0, i32 6
  %68 = load ptr, ptr %memberidx37, align 8
  %69 = load ptr, ptr %parser, align 8
  %70 = call ptr @Parser_parse_type_alias(ptr %69)
  call void @Array_TypeAliasNode____sl__(ptr %68, ptr %70)
  br label %ifend36

else35:                                           ; preds = %else30
  %71 = load ptr, ptr %parser, align 8
  %72 = call ptr @string_from_bytes(ptr @304, i64 87)
  call void @Parser_error(ptr %71, ptr %72)
  br label %while.end

ifend36:                                          ; preds = %if.entry34
  br label %ifend31
}

define ptr @Parser_parse_import_clause(ptr %0) {
  %this = alloca ptr, align 8
  %import_clause = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ImportClause, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %4 = call ptr @Parser_eat(ptr %3, i64 53)
  call void @ImportClause_constructor(ptr %2, ptr %4)
  store ptr %2, ptr %import_clause, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %6, i32 0, i32 0
  %7 = load i64, ptr %memberidx1, align 4
  %8 = icmp eq i64 %7, 74
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %9 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %9)
  %10 = load ptr, ptr %import_clause, align 8
  %memberidx2 = getelementptr inbounds %ImportClause, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %this, align 8
  %12 = call ptr @Parser_eat(ptr %11, i64 53)
  store ptr %12, ptr %memberidx2, align 8
  br label %ifend

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %13 = load ptr, ptr %import_clause, align 8
  ret ptr %13
}

define i64 @Parser_is_assign_op(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %2, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 0
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp eq i64 %4, 38
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %1
  ret i64 19

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Parser, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Token, ptr %7, i32 0, i32 0
  %8 = load i64, ptr %memberidx3, align 4
  %9 = icmp eq i64 %8, 12
  br i1 %9, label %if.entry4, label %else5

if.entry4:                                        ; preds = %ifend
  ret i64 22

else5:                                            ; preds = %ifend
  br label %ifend6

ifend6:                                           ; preds = %else5
  %10 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Parser, ptr %10, i32 0, i32 2
  %11 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Token, ptr %11, i32 0, i32 0
  %12 = load i64, ptr %memberidx8, align 4
  %13 = icmp eq i64 %12, 13
  br i1 %13, label %if.entry9, label %else10

if.entry9:                                        ; preds = %ifend6
  ret i64 21

else10:                                           ; preds = %ifend6
  br label %ifend11

ifend11:                                          ; preds = %else10
  %14 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %Parser, ptr %14, i32 0, i32 2
  %15 = load ptr, ptr %memberidx12, align 8
  %memberidx13 = getelementptr inbounds %Token, ptr %15, i32 0, i32 0
  %16 = load i64, ptr %memberidx13, align 4
  %17 = icmp eq i64 %16, 14
  br i1 %17, label %if.entry14, label %else15

if.entry14:                                       ; preds = %ifend11
  ret i64 20

else15:                                           ; preds = %ifend11
  br label %ifend16

ifend16:                                          ; preds = %else15
  %18 = load ptr, ptr %this, align 8
  %memberidx17 = getelementptr inbounds %Parser, ptr %18, i32 0, i32 2
  %19 = load ptr, ptr %memberidx17, align 8
  %memberidx18 = getelementptr inbounds %Token, ptr %19, i32 0, i32 0
  %20 = load i64, ptr %memberidx18, align 4
  %21 = icmp eq i64 %20, 15
  br i1 %21, label %if.entry19, label %else20

if.entry19:                                       ; preds = %ifend16
  ret i64 23

else20:                                           ; preds = %ifend16
  br label %ifend21

ifend21:                                          ; preds = %else20
  %22 = load ptr, ptr %this, align 8
  %memberidx22 = getelementptr inbounds %Parser, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %memberidx22, align 8
  %memberidx23 = getelementptr inbounds %Token, ptr %23, i32 0, i32 0
  %24 = load i64, ptr %memberidx23, align 4
  %25 = icmp eq i64 %24, 16
  br i1 %25, label %if.entry24, label %else25

if.entry24:                                       ; preds = %ifend21
  ret i64 24

else25:                                           ; preds = %ifend21
  br label %ifend26

ifend26:                                          ; preds = %else25
  %26 = load ptr, ptr %this, align 8
  %memberidx27 = getelementptr inbounds %Parser, ptr %26, i32 0, i32 2
  %27 = load ptr, ptr %memberidx27, align 8
  %memberidx28 = getelementptr inbounds %Token, ptr %27, i32 0, i32 0
  %28 = load i64, ptr %memberidx28, align 4
  %29 = icmp eq i64 %28, 17
  br i1 %29, label %if.entry29, label %else30

if.entry29:                                       ; preds = %ifend26
  ret i64 25

else30:                                           ; preds = %ifend26
  br label %ifend31

ifend31:                                          ; preds = %else30
  %30 = load ptr, ptr %this, align 8
  %memberidx32 = getelementptr inbounds %Parser, ptr %30, i32 0, i32 2
  %31 = load ptr, ptr %memberidx32, align 8
  %memberidx33 = getelementptr inbounds %Token, ptr %31, i32 0, i32 0
  %32 = load i64, ptr %memberidx33, align 4
  %33 = icmp eq i64 %32, 18
  br i1 %33, label %if.entry34, label %else35

if.entry34:                                       ; preds = %ifend31
  ret i64 26

else35:                                           ; preds = %ifend31
  br label %ifend36

ifend36:                                          ; preds = %else35
  %34 = load ptr, ptr %this, align 8
  %memberidx37 = getelementptr inbounds %Parser, ptr %34, i32 0, i32 2
  %35 = load ptr, ptr %memberidx37, align 8
  %memberidx38 = getelementptr inbounds %Token, ptr %35, i32 0, i32 0
  %36 = load i64, ptr %memberidx38, align 4
  %37 = icmp eq i64 %36, 19
  br i1 %37, label %if.entry39, label %else40

if.entry39:                                       ; preds = %ifend36
  ret i64 27

else40:                                           ; preds = %ifend36
  br label %ifend41

ifend41:                                          ; preds = %else40
  %38 = load ptr, ptr %this, align 8
  %memberidx42 = getelementptr inbounds %Parser, ptr %38, i32 0, i32 2
  %39 = load ptr, ptr %memberidx42, align 8
  %memberidx43 = getelementptr inbounds %Token, ptr %39, i32 0, i32 0
  %40 = load i64, ptr %memberidx43, align 4
  %41 = icmp eq i64 %40, 20
  br i1 %41, label %if.entry44, label %else45

if.entry44:                                       ; preds = %ifend41
  ret i64 28

else45:                                           ; preds = %ifend41
  br label %ifend46

ifend46:                                          ; preds = %else45
  %42 = load ptr, ptr %this, align 8
  %memberidx47 = getelementptr inbounds %Parser, ptr %42, i32 0, i32 2
  %43 = load ptr, ptr %memberidx47, align 8
  %memberidx48 = getelementptr inbounds %Token, ptr %43, i32 0, i32 0
  %44 = load i64, ptr %memberidx48, align 4
  %45 = icmp eq i64 %44, 22
  br i1 %45, label %if.entry49, label %else50

if.entry49:                                       ; preds = %ifend46
  ret i64 29

else50:                                           ; preds = %ifend46
  br label %ifend51

ifend51:                                          ; preds = %else50
  %46 = load ptr, ptr %this, align 8
  %memberidx52 = getelementptr inbounds %Parser, ptr %46, i32 0, i32 2
  %47 = load ptr, ptr %memberidx52, align 8
  %memberidx53 = getelementptr inbounds %Token, ptr %47, i32 0, i32 0
  %48 = load i64, ptr %memberidx53, align 4
  %49 = icmp eq i64 %48, 21
  br i1 %49, label %if.entry54, label %else55

if.entry54:                                       ; preds = %ifend51
  ret i64 30

else55:                                           ; preds = %ifend51
  br label %ifend56

ifend56:                                          ; preds = %else55
  ret i64 0
}

define void @Parser_advance(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %2, i32 0, i32 3
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Parser, ptr %4, i32 0, i32 0
  %5 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Token_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx2, align 4
  %7 = icmp slt i64 %3, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Parser, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Parser, ptr %9, i32 0, i32 0
  %10 = load ptr, ptr %memberidx4, align 8
  %11 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Parser, ptr %11, i32 0, i32 3
  %12 = load i64, ptr %memberidx5, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Parser, ptr %13, i32 0, i32 3
  %14 = add nsw i64 %12, 1
  store i64 %14, ptr %memberidx6, align 4
  %15 = call ptr @Array_Token____getitem__(ptr %10, i64 %14)
  store ptr %15, ptr %memberidx3, align 8
  br label %ifend

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  ret void
}

define ptr @Parser_parse_block(ptr %0) {
  %this = alloca ptr, align 8
  %block_node = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BlockNode, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  call void @BlockNode_constructor(ptr %2, ptr %5)
  store ptr %2, ptr %block_node, align 8
  %6 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %6)
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Parser, ptr %7, i32 0, i32 2
  %8 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Token, ptr %8, i32 0, i32 0
  %9 = load i64, ptr %memberidx3, align 4
  %10 = icmp eq i64 %9, 27
  br i1 %10, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %11 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %11)
  %12 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %12)
  %13 = load ptr, ptr %this, align 8
  %14 = call i1 @Parser_can_parse(ptr %13)
  %15 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Parser, ptr %15, i32 0, i32 2
  %16 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Token, ptr %16, i32 0, i32 0
  %17 = load i64, ptr %memberidx5, align 4
  %18 = icmp ne i64 %17, 28
  %19 = and i1 %14, %18
  br i1 %19, label %while.entry, label %while.end

else:                                             ; preds = %1
  %20 = load ptr, ptr %block_node, align 8
  %memberidx9 = getelementptr inbounds %BlockNode, ptr %20, i32 0, i32 1
  %21 = load ptr, ptr %memberidx9, align 8
  %22 = load ptr, ptr %this, align 8
  %23 = call ptr @Parser_parse_statement(ptr %22)
  call void @Array_StatementNode____sl__(ptr %21, ptr %23)
  br label %ifend

ifend:                                            ; preds = %else, %while.end
  %24 = load ptr, ptr %block_node, align 8
  ret ptr %24

while.entry:                                      ; preds = %while.entry, %if.entry
  %25 = load ptr, ptr %block_node, align 8
  %memberidx6 = getelementptr inbounds %BlockNode, ptr %25, i32 0, i32 1
  %26 = load ptr, ptr %memberidx6, align 8
  %27 = load ptr, ptr %this, align 8
  %28 = call ptr @Parser_parse_statement(ptr %27)
  call void @Array_StatementNode____sl__(ptr %26, ptr %28)
  %29 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %29)
  %30 = load ptr, ptr %this, align 8
  %31 = call i1 @Parser_can_parse(ptr %30)
  %32 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Parser, ptr %32, i32 0, i32 2
  %33 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Token, ptr %33, i32 0, i32 0
  %34 = load i64, ptr %memberidx8, align 4
  %35 = icmp ne i64 %34, 28
  %36 = and i1 %31, %35
  br i1 %36, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %if.entry
  %37 = load ptr, ptr %this, align 8
  %38 = call ptr @Parser_eat(ptr %37, i64 28)
  br label %ifend
}

define ptr @Parser_parse_class(ptr %0) {
  %this = alloca ptr, align 8
  %class_node = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %2)
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ClassDeclarationNode, ptr null, i32 1) to i32))
  %4 = load ptr, ptr %this, align 8
  %5 = call ptr @Parser_eat(ptr %4, i64 53)
  call void @ClassDeclarationNode_constructor(ptr %3, ptr %5)
  store ptr %3, ptr %class_node, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %7, i32 0, i32 0
  %8 = load i64, ptr %memberidx1, align 4
  %9 = icmp eq i64 %8, 42
  br i1 %9, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %10 = load ptr, ptr %this, align 8
  %11 = load ptr, ptr %class_node, align 8
  %memberidx2 = getelementptr inbounds %ClassDeclarationNode, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx2, align 8
  call void @Parser_parse_generic_parameters(ptr %10, ptr %12)
  br label %ifend

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %13 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Parser, ptr %13, i32 0, i32 2
  %14 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Token, ptr %14, i32 0, i32 0
  %15 = load i64, ptr %memberidx4, align 4
  %16 = icmp eq i64 %15, 25
  br i1 %16, label %if.entry5, label %else6

if.entry5:                                        ; preds = %ifend
  %17 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %17)
  %18 = load ptr, ptr %class_node, align 8
  %memberidx8 = getelementptr inbounds %ClassDeclarationNode, ptr %18, i32 0, i32 2
  %19 = load ptr, ptr %this, align 8
  %20 = call ptr @Parser_parse_object_type(ptr %19)
  store ptr %20, ptr %memberidx8, align 8
  %21 = load ptr, ptr %this, align 8
  %22 = call ptr @Parser_eat(ptr %21, i64 26)
  br label %ifend7

else6:                                            ; preds = %ifend
  br label %ifend7

ifend7:                                           ; preds = %else6, %if.entry5
  %23 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %23)
  %24 = load ptr, ptr %this, align 8
  %25 = load ptr, ptr %class_node, align 8
  call void @Parser_parse_class_block(ptr %24, ptr %25)
  %26 = load ptr, ptr %class_node, align 8
  ret ptr %26
}

define ptr @Parser_parse_type(ptr %0) {
  %this = alloca ptr, align 8
  %type_node = alloca ptr, align 8
  %rec_node = alloca ptr, align 8
  %rec_node1 = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr null, ptr %type_node, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %2, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx2 = getelementptr inbounds %Token, ptr %3, i32 0, i32 0
  %4 = load i64, ptr %memberidx2, align 4
  %5 = icmp eq i64 %4, 53
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %6 = load ptr, ptr %this, align 8
  %7 = call ptr @Parser_parse_object_type(ptr %6)
  store ptr %7, ptr %type_node, align 8
  br label %ifend

else:                                             ; preds = %1
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Parser, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Token, ptr %9, i32 0, i32 0
  %10 = load i64, ptr %memberidx4, align 4
  %11 = icmp eq i64 %10, 25
  br i1 %11, label %if.entry5, label %else6

ifend:                                            ; preds = %ifend7, %if.entry
  %12 = load ptr, ptr %this, align 8
  %memberidx19 = getelementptr inbounds %Parser, ptr %12, i32 0, i32 2
  %13 = load ptr, ptr %memberidx19, align 8
  %memberidx20 = getelementptr inbounds %Token, ptr %13, i32 0, i32 0
  %14 = load i64, ptr %memberidx20, align 4
  %15 = icmp eq i64 %14, 29
  %16 = load ptr, ptr %this, align 8
  %memberidx21 = getelementptr inbounds %Parser, ptr %16, i32 0, i32 2
  %17 = load ptr, ptr %memberidx21, align 8
  %memberidx22 = getelementptr inbounds %Token, ptr %17, i32 0, i32 0
  %18 = load i64, ptr %memberidx22, align 4
  %19 = icmp eq i64 %18, 11
  %20 = or i1 %15, %19
  %21 = load ptr, ptr %this, align 8
  %memberidx23 = getelementptr inbounds %Parser, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %memberidx23, align 8
  %memberidx24 = getelementptr inbounds %Token, ptr %22, i32 0, i32 0
  %23 = load i64, ptr %memberidx24, align 4
  %24 = icmp eq i64 %23, 4
  %25 = or i1 %20, %24
  %26 = load ptr, ptr %this, align 8
  %27 = call i1 @Parser_can_parse(ptr %26)
  %28 = and i1 %25, %27
  br i1 %28, label %while.entry, label %while.end

if.entry5:                                        ; preds = %else
  %29 = load ptr, ptr %this, align 8
  %30 = call ptr @Parser_parse_function_type(ptr %29)
  store ptr %30, ptr %type_node, align 8
  br label %ifend7

else6:                                            ; preds = %else
  %31 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Parser, ptr %31, i32 0, i32 2
  %32 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Token, ptr %32, i32 0, i32 0
  %33 = load i64, ptr %memberidx9, align 4
  %34 = icmp eq i64 %33, 29
  br i1 %34, label %if.entry10, label %else11

ifend7:                                           ; preds = %ifend12, %if.entry5
  br label %ifend

if.entry10:                                       ; preds = %else6
  %35 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%RecordTypeNode, ptr null, i32 1) to i32))
  %36 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IdentifierToken, ptr null, i32 1) to i32))
  %37 = call ptr @string_from_bytes(ptr @296, i64 3)
  %38 = load ptr, ptr %this, align 8
  %memberidx13 = getelementptr inbounds %Parser, ptr %38, i32 0, i32 2
  %39 = load ptr, ptr %memberidx13, align 8
  %memberidx14 = getelementptr inbounds %Token, ptr %39, i32 0, i32 1
  %40 = load ptr, ptr %memberidx14, align 8
  call void @IdentifierToken_constructor(ptr %36, ptr %37, ptr %40)
  %41 = load ptr, ptr %this, align 8
  %memberidx15 = getelementptr inbounds %Parser, ptr %41, i32 0, i32 2
  %42 = load ptr, ptr %memberidx15, align 8
  %memberidx16 = getelementptr inbounds %Token, ptr %42, i32 0, i32 1
  %43 = load ptr, ptr %memberidx16, align 8
  call void @RecordTypeNode_constructor(ptr %35, ptr %36, ptr %43)
  store ptr %35, ptr %rec_node, align 8
  %44 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %44)
  %45 = load ptr, ptr %rec_node, align 8
  %memberidx17 = getelementptr inbounds %RecordTypeNode, ptr %45, i32 0, i32 3
  %46 = load ptr, ptr %memberidx17, align 8
  %47 = load ptr, ptr %this, align 8
  %48 = call ptr @Parser_parse_type(ptr %47)
  call void @Array_TypeNode____sl__(ptr %46, ptr %48)
  %49 = load ptr, ptr %this, align 8
  %50 = call ptr @Parser_eat(ptr %49, i64 1)
  %51 = load ptr, ptr %rec_node, align 8
  %memberidx18 = getelementptr inbounds %RecordTypeNode, ptr %51, i32 0, i32 3
  %52 = load ptr, ptr %memberidx18, align 8
  %53 = load ptr, ptr %this, align 8
  %54 = call ptr @Parser_parse_type(ptr %53)
  call void @Array_TypeNode____sl__(ptr %52, ptr %54)
  %55 = load ptr, ptr %this, align 8
  %56 = call ptr @Parser_eat(ptr %55, i64 30)
  %57 = load ptr, ptr %rec_node, align 8
  store ptr %57, ptr %type_node, align 8
  br label %ifend12

else11:                                           ; preds = %else6
  br label %ifend12

ifend12:                                          ; preds = %else11, %if.entry10
  br label %ifend7

while.entry:                                      ; preds = %ifend29, %ifend
  %58 = load ptr, ptr %this, align 8
  %memberidx25 = getelementptr inbounds %Parser, ptr %58, i32 0, i32 2
  %59 = load ptr, ptr %memberidx25, align 8
  %memberidx26 = getelementptr inbounds %Token, ptr %59, i32 0, i32 0
  %60 = load i64, ptr %memberidx26, align 4
  %61 = icmp eq i64 %60, 29
  br i1 %61, label %if.entry27, label %else28

while.end:                                        ; preds = %ifend29, %ifend
  %62 = load ptr, ptr %type_node, align 8
  ret ptr %62

if.entry27:                                       ; preds = %while.entry
  %63 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %63)
  %64 = load ptr, ptr %this, align 8
  %memberidx30 = getelementptr inbounds %Parser, ptr %64, i32 0, i32 2
  %65 = load ptr, ptr %memberidx30, align 8
  %memberidx31 = getelementptr inbounds %Token, ptr %65, i32 0, i32 0
  %66 = load i64, ptr %memberidx31, align 4
  %67 = icmp eq i64 %66, 30
  br i1 %67, label %if.entry32, label %else33

else28:                                           ; preds = %while.entry
  %68 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%PointerTypeNode, ptr null, i32 1) to i32))
  %69 = load ptr, ptr %type_node, align 8
  %70 = load ptr, ptr %type_node, align 8
  %memberidx46 = getelementptr inbounds %Node, ptr %70, i32 0, i32 0
  %71 = load ptr, ptr %memberidx46, align 8
  %72 = load ptr, ptr %this, align 8
  %memberidx47 = getelementptr inbounds %Parser, ptr %72, i32 0, i32 2
  %73 = load ptr, ptr %memberidx47, align 8
  %memberidx48 = getelementptr inbounds %Token, ptr %73, i32 0, i32 1
  %74 = load ptr, ptr %memberidx48, align 8
  %75 = call ptr @FloRange_merge(ptr %71, ptr %74)
  call void @PointerTypeNode_constructor(ptr %68, ptr %69, ptr %75)
  store ptr %68, ptr %type_node, align 8
  %76 = load ptr, ptr %this, align 8
  %memberidx49 = getelementptr inbounds %Parser, ptr %76, i32 0, i32 2
  %77 = load ptr, ptr %memberidx49, align 8
  %memberidx50 = getelementptr inbounds %Token, ptr %77, i32 0, i32 0
  %78 = load i64, ptr %memberidx50, align 4
  %79 = icmp eq i64 %78, 11
  br i1 %79, label %if.entry51, label %else52

ifend29:                                          ; preds = %ifend53, %ifend34
  %80 = load ptr, ptr %this, align 8
  %memberidx56 = getelementptr inbounds %Parser, ptr %80, i32 0, i32 2
  %81 = load ptr, ptr %memberidx56, align 8
  %memberidx57 = getelementptr inbounds %Token, ptr %81, i32 0, i32 0
  %82 = load i64, ptr %memberidx57, align 4
  %83 = icmp eq i64 %82, 29
  %84 = load ptr, ptr %this, align 8
  %memberidx58 = getelementptr inbounds %Parser, ptr %84, i32 0, i32 2
  %85 = load ptr, ptr %memberidx58, align 8
  %memberidx59 = getelementptr inbounds %Token, ptr %85, i32 0, i32 0
  %86 = load i64, ptr %memberidx59, align 4
  %87 = icmp eq i64 %86, 11
  %88 = or i1 %83, %87
  %89 = load ptr, ptr %this, align 8
  %memberidx60 = getelementptr inbounds %Parser, ptr %89, i32 0, i32 2
  %90 = load ptr, ptr %memberidx60, align 8
  %memberidx61 = getelementptr inbounds %Token, ptr %90, i32 0, i32 0
  %91 = load i64, ptr %memberidx61, align 4
  %92 = icmp eq i64 %91, 4
  %93 = or i1 %88, %92
  %94 = load ptr, ptr %this, align 8
  %95 = call i1 @Parser_can_parse(ptr %94)
  %96 = and i1 %93, %95
  br i1 %96, label %while.entry, label %while.end

if.entry32:                                       ; preds = %if.entry27
  %97 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%RecordTypeNode, ptr null, i32 1) to i32))
  %98 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IdentifierToken, ptr null, i32 1) to i32))
  %99 = call ptr @string_from_bytes(ptr @297, i64 5)
  %100 = load ptr, ptr %this, align 8
  %memberidx35 = getelementptr inbounds %Parser, ptr %100, i32 0, i32 2
  %101 = load ptr, ptr %memberidx35, align 8
  %memberidx36 = getelementptr inbounds %Token, ptr %101, i32 0, i32 1
  %102 = load ptr, ptr %memberidx36, align 8
  call void @IdentifierToken_constructor(ptr %98, ptr %99, ptr %102)
  %103 = load ptr, ptr %this, align 8
  %memberidx37 = getelementptr inbounds %Parser, ptr %103, i32 0, i32 2
  %104 = load ptr, ptr %memberidx37, align 8
  %memberidx38 = getelementptr inbounds %Token, ptr %104, i32 0, i32 1
  %105 = load ptr, ptr %memberidx38, align 8
  call void @RecordTypeNode_constructor(ptr %97, ptr %98, ptr %105)
  store ptr %97, ptr %rec_node1, align 8
  %106 = load ptr, ptr %rec_node1, align 8
  %memberidx39 = getelementptr inbounds %RecordTypeNode, ptr %106, i32 0, i32 3
  %107 = load ptr, ptr %memberidx39, align 8
  %108 = load ptr, ptr %type_node, align 8
  call void @Array_TypeNode____sl__(ptr %107, ptr %108)
  %109 = load ptr, ptr %rec_node1, align 8
  store ptr %109, ptr %type_node, align 8
  br label %ifend34

else33:                                           ; preds = %if.entry27
  %110 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayTypeNode, ptr null, i32 1) to i32))
  %111 = load ptr, ptr %type_node, align 8
  %112 = load ptr, ptr %this, align 8
  %113 = call ptr @Parser_parse_expression(ptr %112)
  %114 = load ptr, ptr %this, align 8
  %memberidx40 = getelementptr inbounds %Parser, ptr %114, i32 0, i32 2
  %115 = load ptr, ptr %memberidx40, align 8
  %memberidx41 = getelementptr inbounds %Token, ptr %115, i32 0, i32 1
  %116 = load ptr, ptr %memberidx41, align 8
  call void @ArrayTypeNode_constructor(ptr %110, ptr %111, ptr %113, ptr %116)
  store ptr %110, ptr %type_node, align 8
  br label %ifend34

ifend34:                                          ; preds = %else33, %if.entry32
  %117 = load ptr, ptr %type_node, align 8
  %memberidx42 = getelementptr inbounds %Node, ptr %117, i32 0, i32 0
  %118 = load ptr, ptr %type_node, align 8
  %memberidx43 = getelementptr inbounds %Node, ptr %118, i32 0, i32 0
  %119 = load ptr, ptr %memberidx43, align 8
  %120 = load ptr, ptr %this, align 8
  %memberidx44 = getelementptr inbounds %Parser, ptr %120, i32 0, i32 2
  %121 = load ptr, ptr %memberidx44, align 8
  %memberidx45 = getelementptr inbounds %Token, ptr %121, i32 0, i32 1
  %122 = load ptr, ptr %memberidx45, align 8
  %123 = call ptr @FloRange_merge(ptr %119, ptr %122)
  store ptr %123, ptr %memberidx42, align 8
  %124 = load ptr, ptr %this, align 8
  %125 = call ptr @Parser_eat(ptr %124, i64 30)
  br label %ifend29

if.entry51:                                       ; preds = %else28
  %126 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%PointerTypeNode, ptr null, i32 1) to i32))
  %127 = load ptr, ptr %type_node, align 8
  %128 = load ptr, ptr %type_node, align 8
  %memberidx54 = getelementptr inbounds %Node, ptr %128, i32 0, i32 0
  %129 = load ptr, ptr %memberidx54, align 8
  %130 = load ptr, ptr %this, align 8
  %131 = call ptr @Parser_eat(ptr %130, i64 11)
  %memberidx55 = getelementptr inbounds %Token, ptr %131, i32 0, i32 1
  %132 = load ptr, ptr %memberidx55, align 8
  %133 = call ptr @FloRange_merge(ptr %129, ptr %132)
  call void @PointerTypeNode_constructor(ptr %126, ptr %127, ptr %133)
  store ptr %126, ptr %type_node, align 8
  br label %ifend53

else52:                                           ; preds = %else28
  %134 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %134)
  br label %ifend53

ifend53:                                          ; preds = %else52, %if.entry51
  br label %ifend29
}

define i64 @Parser_is_term_expr_op(ptr %0) {
  %this = alloca ptr, align 8
  %token_type = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %2, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 0
  %4 = load i64, ptr %memberidx1, align 4
  store i64 %4, ptr %token_type, align 4
  %5 = load i64, ptr %token_type, align 4
  %6 = icmp eq i64 %5, 4
  br i1 %6, label %if.entry, label %else

if.entry:                                         ; preds = %1
  ret i64 3

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %7 = load i64, ptr %token_type, align 4
  %8 = icmp eq i64 %7, 7
  br i1 %8, label %if.entry2, label %else3

if.entry2:                                        ; preds = %ifend
  ret i64 4

else3:                                            ; preds = %ifend
  br label %ifend4

ifend4:                                           ; preds = %else3
  %9 = load i64, ptr %token_type, align 4
  %10 = icmp eq i64 %9, 10
  br i1 %10, label %if.entry5, label %else6

if.entry5:                                        ; preds = %ifend4
  ret i64 5

else6:                                            ; preds = %ifend4
  br label %ifend7

ifend7:                                           ; preds = %else6
  %11 = load i64, ptr %token_type, align 4
  %12 = icmp eq i64 %11, 11
  br i1 %12, label %if.entry8, label %else9

if.entry8:                                        ; preds = %ifend7
  ret i64 6

else9:                                            ; preds = %ifend7
  br label %ifend10

ifend10:                                          ; preds = %else9
  ret i64 0
}

define i64 @Parser_is_arith_expr_op(ptr %0) {
  %this = alloca ptr, align 8
  %token_type = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %2, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 0
  %4 = load i64, ptr %memberidx1, align 4
  store i64 %4, ptr %token_type, align 4
  %5 = load i64, ptr %token_type, align 4
  %6 = icmp eq i64 %5, 6
  br i1 %6, label %if.entry, label %else

if.entry:                                         ; preds = %1
  ret i64 1

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %7 = load i64, ptr %token_type, align 4
  %8 = icmp eq i64 %7, 5
  br i1 %8, label %if.entry2, label %else3

if.entry2:                                        ; preds = %ifend
  ret i64 2

else3:                                            ; preds = %ifend
  br label %ifend4

ifend4:                                           ; preds = %else3
  ret i64 0
}

define i64 @Parser_is_bitshift_expr_op(ptr %0) {
  %this = alloca ptr, align 8
  %token_type = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %2, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 0
  %4 = load i64, ptr %memberidx1, align 4
  store i64 %4, ptr %token_type, align 4
  %5 = load i64, ptr %token_type, align 4
  %6 = icmp eq i64 %5, 48
  br i1 %6, label %if.entry, label %else

if.entry:                                         ; preds = %1
  ret i64 13

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %7 = load i64, ptr %token_type, align 4
  %8 = icmp eq i64 %7, 49
  br i1 %8, label %if.entry2, label %else3

if.entry2:                                        ; preds = %ifend
  ret i64 14

else3:                                            ; preds = %ifend
  br label %ifend4

ifend4:                                           ; preds = %else3
  %9 = load i64, ptr %token_type, align 4
  %10 = icmp eq i64 %9, 51
  br i1 %10, label %if.entry5, label %else6

if.entry5:                                        ; preds = %ifend4
  ret i64 17

else6:                                            ; preds = %ifend4
  br label %ifend7

ifend7:                                           ; preds = %else6
  ret i64 0
}

define void @Parser_new_lines(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %2, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 0
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp eq i64 %4, 33
  %6 = load ptr, ptr %this, align 8
  %7 = call i1 @Parser_can_parse(ptr %6)
  %8 = and i1 %5, %7
  br i1 %8, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %1
  %9 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %9)
  %10 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Parser, ptr %10, i32 0, i32 2
  %11 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Token, ptr %11, i32 0, i32 0
  %12 = load i64, ptr %memberidx3, align 4
  %13 = icmp eq i64 %12, 33
  %14 = load ptr, ptr %this, align 8
  %15 = call i1 @Parser_can_parse(ptr %14)
  %16 = and i1 %13, %15
  br i1 %16, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %1
  ret void
}

define i64 @Parser_is_comp_expr_op(ptr %0) {
  %this = alloca ptr, align 8
  %token_type = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %2, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 0
  %4 = load i64, ptr %memberidx1, align 4
  store i64 %4, ptr %token_type, align 4
  %5 = load i64, ptr %token_type, align 4
  %6 = icmp eq i64 %5, 41
  br i1 %6, label %if.entry, label %else

if.entry:                                         ; preds = %1
  ret i64 7

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %7 = load i64, ptr %token_type, align 4
  %8 = icmp eq i64 %7, 42
  br i1 %8, label %if.entry2, label %else3

if.entry2:                                        ; preds = %ifend
  ret i64 9

else3:                                            ; preds = %ifend
  br label %ifend4

ifend4:                                           ; preds = %else3
  %9 = load i64, ptr %token_type, align 4
  %10 = icmp eq i64 %9, 44
  br i1 %10, label %if.entry5, label %else6

if.entry5:                                        ; preds = %ifend4
  ret i64 8

else6:                                            ; preds = %ifend4
  br label %ifend7

ifend7:                                           ; preds = %else6
  %11 = load i64, ptr %token_type, align 4
  %12 = icmp eq i64 %11, 43
  br i1 %12, label %if.entry8, label %else9

if.entry8:                                        ; preds = %ifend7
  ret i64 10

else9:                                            ; preds = %ifend7
  br label %ifend10

ifend10:                                          ; preds = %else9
  %13 = load i64, ptr %token_type, align 4
  %14 = icmp eq i64 %13, 39
  br i1 %14, label %if.entry11, label %else12

if.entry11:                                       ; preds = %ifend10
  ret i64 11

else12:                                           ; preds = %ifend10
  br label %ifend13

ifend13:                                          ; preds = %else12
  %15 = load i64, ptr %token_type, align 4
  %16 = icmp eq i64 %15, 40
  br i1 %16, label %if.entry14, label %else15

if.entry14:                                       ; preds = %ifend13
  ret i64 12

else15:                                           ; preds = %ifend13
  br label %ifend16

ifend16:                                          ; preds = %else15
  ret i64 0
}

define i64 @Parser_is_logic_expr_op(ptr %0) {
  %this = alloca ptr, align 8
  %token_type = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %2, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 0
  %4 = load i64, ptr %memberidx1, align 4
  store i64 %4, ptr %token_type, align 4
  %5 = load i64, ptr %token_type, align 4
  %6 = icmp eq i64 %5, 9
  br i1 %6, label %if.entry, label %else

if.entry:                                         ; preds = %1
  ret i64 15

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %7 = load i64, ptr %token_type, align 4
  %8 = icmp eq i64 %7, 8
  br i1 %8, label %if.entry2, label %else3

if.entry2:                                        ; preds = %ifend
  ret i64 16

else3:                                            ; preds = %ifend
  br label %ifend4

ifend4:                                           ; preds = %else3
  ret i64 0
}

define ptr @Parser_peek(ptr %0, i64 %1) {
  %offset = alloca i64, align 8
  %this = alloca ptr, align 8
  %peek_idx = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %offset, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %offset, align 4
  %6 = add nsw i64 %4, %5
  store i64 %6, ptr %peek_idx, align 4
  %7 = load i64, ptr %peek_idx, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Parser, ptr %8, i32 0, i32 0
  %9 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Token_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %7, %10
  br i1 %11, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Parser, ptr %12, i32 0, i32 0
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load i64, ptr %peek_idx, align 4
  %15 = call ptr @Array_Token____getitem__(ptr %13, i64 %14)
  ret ptr %15

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %16 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Parser, ptr %16, i32 0, i32 0
  %17 = load ptr, ptr %memberidx4, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Parser, ptr %18, i32 0, i32 0
  %19 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %Array_Token_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = sub nuw i64 %20, 1
  %22 = call ptr @Array_Token____getitem__(ptr %17, i64 %21)
  ret ptr %22
}

define ptr @Array_ExpressionNode__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ExpressionNode_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_ExpressionNode__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ExpressionNode_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_ExpressionNode__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ExpressionNode_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ExpressionNode_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_ExpressionNode____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ExpressionNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_ExpressionNode__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ExpressionNode_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ExpressionNode_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_ExpressionNode____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ExpressionNode_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ExpressionNode_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_ExpressionNode_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_ExpressionNode_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_ExpressionNode_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_ExpressionNode_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_ExpressionNode_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_ExpressionNode_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_ExpressionNode____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ExpressionNode_, ptr null, i32 1) to i32))
  call void @Array_ExpressionNode__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_ExpressionNode_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_ExpressionNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_ExpressionNode_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_ExpressionNode_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_ExpressionNode_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_ExpressionNode_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_ExpressionNode_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_ExpressionNode_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_ExpressionNode____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_ExpressionNode____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_ExpressionNode____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_ExpressionNode__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_ExpressionNode_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_ExpressionNode_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_ExpressionNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_ExpressionNode_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_ExpressionNode_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_ExpressionNode_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_ExpressionNode__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_ExpressionNode_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_ExpressionNode_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_ExpressionNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_ExpressionNode_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_ExpressionNode____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_ExpressionNode_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ExpressionNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_ExpressionNode__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_ExpressionNode____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_ExpressionNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_ExpressionNode____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_ExpressionNode____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_ExpressionNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_ExpressionNode____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_ExpressionNode____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_ExpressionNode____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_ExpressionNode__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_ExpressionNode__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ExpressionNode_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_ExpressionNode__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_ExpressionNode_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_ExpressionNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @Parser_parse_expression_list(ptr %0, ptr %1, i64 %2) {
  %expressions = alloca ptr, align 8
  %stop_tok = alloca i64, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %expressions, align 8
  store i64 %2, ptr %stop_tok, align 4
  %4 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %4)
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %6, i32 0, i32 0
  %7 = load i64, ptr %memberidx1, align 4
  %8 = load i64, ptr %stop_tok, align 4
  %9 = icmp eq i64 %7, %8
  br i1 %9, label %if.entry, label %else

if.entry:                                         ; preds = %3
  ret void

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %10 = load ptr, ptr %expressions, align 8
  %11 = load ptr, ptr %this, align 8
  %12 = call ptr @Parser_parse_expression(ptr %11)
  call void @Array_ExpressionNode____sl__(ptr %10, ptr %12)
  %13 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %13)
  %14 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Parser, ptr %14, i32 0, i32 2
  %15 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Token, ptr %15, i32 0, i32 0
  %16 = load i64, ptr %memberidx3, align 4
  %17 = icmp eq i64 %16, 3
  %18 = load ptr, ptr %this, align 8
  %19 = call i1 @Parser_can_parse(ptr %18)
  %20 = and i1 %17, %19
  br i1 %20, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %ifend
  %21 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %21)
  %22 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %22)
  %23 = load ptr, ptr %expressions, align 8
  %24 = load ptr, ptr %this, align 8
  %25 = call ptr @Parser_parse_expression(ptr %24)
  call void @Array_ExpressionNode____sl__(ptr %23, ptr %25)
  %26 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Parser, ptr %26, i32 0, i32 2
  %27 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Token, ptr %27, i32 0, i32 0
  %28 = load i64, ptr %memberidx5, align 4
  %29 = icmp eq i64 %28, 3
  %30 = load ptr, ptr %this, align 8
  %31 = call i1 @Parser_can_parse(ptr %30)
  %32 = and i1 %29, %31
  br i1 %32, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %ifend
  %33 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %33)
  ret void
}

define void @StringExpressionNode_constructor(ptr %0, ptr %1, ptr %2) {
  %template_args = alloca ptr, align 8
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @ExpressionNode_constructor, ptr %super, align 8
  store ptr %1, ptr %value, align 8
  store ptr %2, ptr %template_args, align 8
  %4 = load ptr, ptr %super, align 8
  %5 = load ptr, ptr %value, align 8
  %memberidx = getelementptr inbounds %Token, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  call void %4(ptr %0, i64 2, ptr %6)
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %StringExpressionNode, ptr %7, i32 0, i32 3
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %memberidx1, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %StringExpressionNode, ptr %9, i32 0, i32 4
  %10 = load ptr, ptr %template_args, align 8
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define ptr @Parser_parse_string(ptr %0) {
  %this = alloca ptr, align 8
  %template_args = alloca ptr, align 8
  %strtoken = alloca ptr, align 8
  %tmp_parser = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = call ptr @Parser_eat(ptr %2, i64 34)
  store ptr %3, ptr %strtoken, align 8
  %4 = alloca %Parser, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  call void @Parser_constructor(ptr %4, ptr null, ptr %6)
  store ptr %4, ptr %tmp_parser, align 8
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ExpressionNode_, ptr null, i32 1) to i32))
  call void @Array_ExpressionNode__constructor(ptr %7, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx1 = getelementptr inbounds %Array_ExpressionNode_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %7, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  store ptr %7, ptr %template_args, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %9 = load i64, ptr %i, align 4
  %10 = load ptr, ptr %strtoken, align 8
  %memberidx3 = getelementptr inbounds %StrToken, ptr %10, i32 0, i32 4
  %11 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Array_Array_Token__, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = icmp slt i64 %9, %12
  %14 = load ptr, ptr %this, align 8
  %15 = call i1 @Parser_can_parse(ptr %14)
  %16 = and i1 %13, %15
  br i1 %16, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load ptr, ptr %tmp_parser, align 8
  %memberidx5 = getelementptr inbounds %Parser, ptr %17, i32 0, i32 0
  %18 = load ptr, ptr %strtoken, align 8
  %memberidx6 = getelementptr inbounds %StrToken, ptr %18, i32 0, i32 4
  %19 = load ptr, ptr %memberidx6, align 8
  %20 = load i64, ptr %i, align 4
  %21 = call ptr @Array_Array_Token_____getitem__(ptr %19, i64 %20)
  store ptr %21, ptr %memberidx5, align 8
  %22 = load ptr, ptr %tmp_parser, align 8
  %memberidx7 = getelementptr inbounds %Parser, ptr %22, i32 0, i32 3
  store i64 -1, ptr %memberidx7, align 4
  %23 = load ptr, ptr %tmp_parser, align 8
  call void @Parser_advance(ptr %23)
  %24 = load ptr, ptr %template_args, align 8
  %25 = load ptr, ptr %tmp_parser, align 8
  %26 = call ptr @Parser_parse_expression(ptr %25)
  call void @Array_ExpressionNode____sl__(ptr %24, ptr %26)
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %27 = load i64, ptr %i, align 4
  %28 = add nsw i64 %27, 1
  store i64 %28, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %29 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%StringExpressionNode, ptr null, i32 1) to i32))
  %30 = load ptr, ptr %strtoken, align 8
  %31 = load ptr, ptr %template_args, align 8
  call void @StringExpressionNode_constructor(ptr %29, ptr %30, ptr %31)
  ret ptr %29
}

define void @IfStatementNode_constructor(ptr %0, ptr %1) {
  %range = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @StatementNode_constructor, ptr %super, align 8
  store ptr %1, ptr %range, align 8
  %3 = load ptr, ptr %super, align 8
  %4 = load ptr, ptr %range, align 8
  call void %3(ptr %0, i64 0, ptr %4)
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %IfStatementNode, ptr %5, i32 0, i32 4
  store ptr null, ptr %memberidx, align 8
  ret void
}

define ptr @Parser_parse_if_statement(ptr %0) {
  %this = alloca ptr, align 8
  %if_node = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IfStatementNode, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  call void @IfStatementNode_constructor(ptr %2, ptr %5)
  store ptr %2, ptr %if_node, align 8
  %6 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %6)
  %7 = load ptr, ptr %if_node, align 8
  %memberidx2 = getelementptr inbounds %IfStatementNode, ptr %7, i32 0, i32 2
  %8 = load ptr, ptr %this, align 8
  %9 = call ptr @Parser_parse_expression(ptr %8)
  store ptr %9, ptr %memberidx2, align 8
  %10 = load ptr, ptr %if_node, align 8
  %memberidx3 = getelementptr inbounds %Node, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %if_node, align 8
  %memberidx4 = getelementptr inbounds %Node, ptr %11, i32 0, i32 0
  %12 = load ptr, ptr %memberidx4, align 8
  %13 = load ptr, ptr %if_node, align 8
  %memberidx5 = getelementptr inbounds %IfStatementNode, ptr %13, i32 0, i32 2
  %14 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %Node, ptr %14, i32 0, i32 0
  %15 = load ptr, ptr %memberidx6, align 8
  %16 = call ptr @FloRange_merge(ptr %12, ptr %15)
  store ptr %16, ptr %memberidx3, align 8
  %17 = load ptr, ptr %if_node, align 8
  %memberidx7 = getelementptr inbounds %IfStatementNode, ptr %17, i32 0, i32 3
  %18 = load ptr, ptr %this, align 8
  %19 = call ptr @Parser_parse_block(ptr %18)
  store ptr %19, ptr %memberidx7, align 8
  %20 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %20)
  %21 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Parser, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Token, ptr %22, i32 0, i32 0
  %23 = load i64, ptr %memberidx9, align 4
  %24 = icmp eq i64 %23, 58
  br i1 %24, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %25 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %25)
  %26 = load ptr, ptr %if_node, align 8
  %memberidx10 = getelementptr inbounds %IfStatementNode, ptr %26, i32 0, i32 4
  %27 = load ptr, ptr %this, align 8
  %28 = call ptr @Parser_parse_block(ptr %27)
  store ptr %28, ptr %memberidx10, align 8
  br label %ifend

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %29 = load ptr, ptr %if_node, align 8
  ret ptr %29
}

define void @WhileStatementNode_constructor(ptr %0, ptr %1) {
  %range = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @StatementNode_constructor, ptr %super, align 8
  store ptr %1, ptr %range, align 8
  %3 = load ptr, ptr %super, align 8
  %4 = load ptr, ptr %range, align 8
  call void %3(ptr %0, i64 4, ptr %4)
  ret void
}

define ptr @Parser_parse_while_statement(ptr %0) {
  %this = alloca ptr, align 8
  %while_node = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%WhileStatementNode, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  call void @WhileStatementNode_constructor(ptr %2, ptr %5)
  store ptr %2, ptr %while_node, align 8
  %6 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %6)
  %7 = load ptr, ptr %while_node, align 8
  %memberidx2 = getelementptr inbounds %WhileStatementNode, ptr %7, i32 0, i32 2
  %8 = load ptr, ptr %this, align 8
  %9 = call ptr @Parser_parse_expression(ptr %8)
  store ptr %9, ptr %memberidx2, align 8
  %10 = load ptr, ptr %while_node, align 8
  %memberidx3 = getelementptr inbounds %Node, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %while_node, align 8
  %memberidx4 = getelementptr inbounds %Node, ptr %11, i32 0, i32 0
  %12 = load ptr, ptr %memberidx4, align 8
  %13 = load ptr, ptr %while_node, align 8
  %memberidx5 = getelementptr inbounds %WhileStatementNode, ptr %13, i32 0, i32 2
  %14 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %Node, ptr %14, i32 0, i32 0
  %15 = load ptr, ptr %memberidx6, align 8
  %16 = call ptr @FloRange_merge(ptr %12, ptr %15)
  store ptr %16, ptr %memberidx3, align 8
  %17 = load ptr, ptr %while_node, align 8
  %memberidx7 = getelementptr inbounds %WhileStatementNode, ptr %17, i32 0, i32 3
  %18 = load ptr, ptr %this, align 8
  %19 = call ptr @Parser_parse_block(ptr %18)
  store ptr %19, ptr %memberidx7, align 8
  %20 = load ptr, ptr %while_node, align 8
  ret ptr %20
}

define void @ForStatementNode_constructor(ptr %0, ptr %1) {
  %range = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @StatementNode_constructor, ptr %super, align 8
  store ptr %1, ptr %range, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ForStatementNode, ptr %3, i32 0, i32 2
  store ptr null, ptr %memberidx, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ForStatementNode, ptr %4, i32 0, i32 3
  store ptr null, ptr %memberidx1, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ForStatementNode, ptr %5, i32 0, i32 4
  store ptr null, ptr %memberidx2, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ForStatementNode, ptr %6, i32 0, i32 6
  store i64 0, ptr %memberidx3, align 4
  %7 = load ptr, ptr %super, align 8
  %8 = load ptr, ptr %range, align 8
  call void %7(ptr %0, i64 3, ptr %8)
  ret void
}

define ptr @Parser_parse_for_statement(ptr %0) {
  %this = alloca ptr, align 8
  %for_node = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ForStatementNode, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  call void @ForStatementNode_constructor(ptr %2, ptr %5)
  store ptr %2, ptr %for_node, align 8
  %6 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %6)
  %7 = load ptr, ptr %this, align 8
  %8 = call ptr @Parser_peek(ptr %7, i64 1)
  %memberidx2 = getelementptr inbounds %Token, ptr %8, i32 0, i32 0
  %9 = load i64, ptr %memberidx2, align 4
  %10 = icmp ne i64 %9, 69
  br i1 %10, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Parser, ptr %11, i32 0, i32 2
  %12 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Token, ptr %12, i32 0, i32 0
  %13 = load i64, ptr %memberidx4, align 4
  %14 = icmp ne i64 %13, 2
  br i1 %14, label %if.entry5, label %else6

else:                                             ; preds = %1
  %15 = load ptr, ptr %for_node, align 8
  %memberidx21 = getelementptr inbounds %ForStatementNode, ptr %15, i32 0, i32 6
  store i64 1, ptr %memberidx21, align 4
  %16 = load ptr, ptr %for_node, align 8
  %memberidx22 = getelementptr inbounds %ForStatementNode, ptr %16, i32 0, i32 7
  %17 = load ptr, ptr %this, align 8
  %18 = call ptr @Parser_eat(ptr %17, i64 53)
  store ptr %18, ptr %memberidx22, align 8
  %19 = load ptr, ptr %this, align 8
  %20 = call ptr @Parser_eat(ptr %19, i64 69)
  %21 = load ptr, ptr %for_node, align 8
  %memberidx23 = getelementptr inbounds %ForStatementNode, ptr %21, i32 0, i32 5
  %22 = load ptr, ptr %this, align 8
  %23 = call ptr @Parser_parse_expression(ptr %22)
  store ptr %23, ptr %memberidx23, align 8
  br label %ifend

ifend:                                            ; preds = %else, %ifend19
  %24 = load ptr, ptr %for_node, align 8
  %memberidx24 = getelementptr inbounds %Node, ptr %24, i32 0, i32 0
  %25 = load ptr, ptr %for_node, align 8
  %memberidx25 = getelementptr inbounds %Node, ptr %25, i32 0, i32 0
  %26 = load ptr, ptr %memberidx25, align 8
  %27 = load ptr, ptr %this, align 8
  %memberidx26 = getelementptr inbounds %Parser, ptr %27, i32 0, i32 2
  %28 = load ptr, ptr %memberidx26, align 8
  %memberidx27 = getelementptr inbounds %Token, ptr %28, i32 0, i32 1
  %29 = load ptr, ptr %memberidx27, align 8
  %30 = call ptr @FloRange_merge(ptr %26, ptr %29)
  store ptr %30, ptr %memberidx24, align 8
  %31 = load ptr, ptr %this, align 8
  %32 = call i1 @Parser_can_parse(ptr %31)
  br i1 %32, label %if.entry28, label %else29

if.entry5:                                        ; preds = %if.entry
  %33 = load ptr, ptr %for_node, align 8
  %memberidx8 = getelementptr inbounds %ForStatementNode, ptr %33, i32 0, i32 2
  %34 = load ptr, ptr %this, align 8
  %35 = call ptr @Parser_parse_statement(ptr %34)
  store ptr %35, ptr %memberidx8, align 8
  br label %ifend7

else6:                                            ; preds = %if.entry
  br label %ifend7

ifend7:                                           ; preds = %else6, %if.entry5
  %36 = load ptr, ptr %this, align 8
  %37 = call ptr @Parser_eat(ptr %36, i64 2)
  %38 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Parser, ptr %38, i32 0, i32 2
  %39 = load ptr, ptr %memberidx9, align 8
  %memberidx10 = getelementptr inbounds %Token, ptr %39, i32 0, i32 0
  %40 = load i64, ptr %memberidx10, align 4
  %41 = icmp ne i64 %40, 2
  br i1 %41, label %if.entry11, label %else12

if.entry11:                                       ; preds = %ifend7
  %42 = load ptr, ptr %for_node, align 8
  %memberidx14 = getelementptr inbounds %ForStatementNode, ptr %42, i32 0, i32 3
  %43 = load ptr, ptr %this, align 8
  %44 = call ptr @Parser_parse_expression(ptr %43)
  store ptr %44, ptr %memberidx14, align 8
  br label %ifend13

else12:                                           ; preds = %ifend7
  br label %ifend13

ifend13:                                          ; preds = %else12, %if.entry11
  %45 = load ptr, ptr %this, align 8
  %46 = call ptr @Parser_eat(ptr %45, i64 2)
  %47 = load ptr, ptr %this, align 8
  %memberidx15 = getelementptr inbounds %Parser, ptr %47, i32 0, i32 2
  %48 = load ptr, ptr %memberidx15, align 8
  %memberidx16 = getelementptr inbounds %Token, ptr %48, i32 0, i32 0
  %49 = load i64, ptr %memberidx16, align 4
  %50 = icmp ne i64 %49, 27
  br i1 %50, label %if.entry17, label %else18

if.entry17:                                       ; preds = %ifend13
  %51 = load ptr, ptr %for_node, align 8
  %memberidx20 = getelementptr inbounds %ForStatementNode, ptr %51, i32 0, i32 4
  %52 = load ptr, ptr %this, align 8
  %53 = call ptr @Parser_parse_statement(ptr %52)
  store ptr %53, ptr %memberidx20, align 8
  br label %ifend19

else18:                                           ; preds = %ifend13
  br label %ifend19

ifend19:                                          ; preds = %else18, %if.entry17
  br label %ifend

if.entry28:                                       ; preds = %ifend
  %54 = load ptr, ptr %for_node, align 8
  %memberidx31 = getelementptr inbounds %ForStatementNode, ptr %54, i32 0, i32 8
  %55 = load ptr, ptr %this, align 8
  %56 = call ptr @Parser_parse_block(ptr %55)
  store ptr %56, ptr %memberidx31, align 8
  br label %ifend30

else29:                                           ; preds = %ifend
  br label %ifend30

ifend30:                                          ; preds = %else29, %if.entry28
  %57 = load ptr, ptr %for_node, align 8
  ret ptr %57
}

define ptr @Parser_parse_variable_declaration_statement(ptr %0) {
  %this = alloca ptr, align 8
  %var_decl_node = alloca ptr, align 8
  %end_range = alloca ptr, align 8
  %new_node = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%VarDeclarationStatement, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  call void @VarDeclarationStatement_constructor(ptr %2, ptr %5)
  store ptr %2, ptr %var_decl_node, align 8
  %6 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %6)
  %7 = load ptr, ptr %var_decl_node, align 8
  %memberidx2 = getelementptr inbounds %VarDeclarationStatement, ptr %7, i32 0, i32 2
  %8 = load ptr, ptr %this, align 8
  %9 = call ptr @Parser_eat(ptr %8, i64 53)
  store ptr %9, ptr %memberidx2, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Parser, ptr %10, i32 0, i32 2
  %11 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Token, ptr %11, i32 0, i32 0
  %12 = load i64, ptr %memberidx4, align 4
  %13 = icmp eq i64 %12, 1
  br i1 %13, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %14 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %14)
  %15 = load ptr, ptr %var_decl_node, align 8
  %memberidx5 = getelementptr inbounds %VarDeclarationStatement, ptr %15, i32 0, i32 3
  %16 = load ptr, ptr %this, align 8
  %17 = call ptr @Parser_parse_type(ptr %16)
  store ptr %17, ptr %memberidx5, align 8
  br label %ifend

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %18 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Parser, ptr %18, i32 0, i32 2
  %19 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %Token, ptr %19, i32 0, i32 1
  %20 = load ptr, ptr %memberidx7, align 8
  store ptr %20, ptr %end_range, align 8
  %21 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Parser, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Token, ptr %22, i32 0, i32 0
  %23 = load i64, ptr %memberidx9, align 4
  %24 = icmp eq i64 %23, 38
  br i1 %24, label %if.entry10, label %else11

if.entry10:                                       ; preds = %ifend
  %25 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %25)
  %26 = load ptr, ptr %var_decl_node, align 8
  %memberidx13 = getelementptr inbounds %VarDeclarationStatement, ptr %26, i32 0, i32 4
  %27 = load ptr, ptr %this, align 8
  %28 = call ptr @Parser_parse_expression(ptr %27)
  store ptr %28, ptr %memberidx13, align 8
  %29 = load ptr, ptr %var_decl_node, align 8
  %memberidx14 = getelementptr inbounds %VarDeclarationStatement, ptr %29, i32 0, i32 4
  %30 = load ptr, ptr %memberidx14, align 8
  %memberidx15 = getelementptr inbounds %Node, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx15, align 8
  store ptr %31, ptr %end_range, align 8
  br label %ifend12

else11:                                           ; preds = %ifend
  %32 = load ptr, ptr %var_decl_node, align 8
  %memberidx16 = getelementptr inbounds %VarDeclarationStatement, ptr %32, i32 0, i32 3
  %33 = load ptr, ptr %memberidx16, align 8
  %34 = icmp ne ptr %33, null
  %35 = load ptr, ptr %this, align 8
  %memberidx17 = getelementptr inbounds %Parser, ptr %35, i32 0, i32 2
  %36 = load ptr, ptr %memberidx17, align 8
  %memberidx18 = getelementptr inbounds %Token, ptr %36, i32 0, i32 0
  %37 = load i64, ptr %memberidx18, align 4
  %38 = icmp eq i64 %37, 25
  %39 = and i1 %34, %38
  br i1 %39, label %if.entry19, label %else20

ifend12:                                          ; preds = %ifend21, %if.entry10
  %40 = load ptr, ptr %var_decl_node, align 8
  %memberidx31 = getelementptr inbounds %Node, ptr %40, i32 0, i32 0
  %41 = load ptr, ptr %var_decl_node, align 8
  %memberidx32 = getelementptr inbounds %Node, ptr %41, i32 0, i32 0
  %42 = load ptr, ptr %memberidx32, align 8
  %43 = load ptr, ptr %end_range, align 8
  %44 = call ptr @FloRange_merge(ptr %42, ptr %43)
  store ptr %44, ptr %memberidx31, align 8
  %45 = load ptr, ptr %var_decl_node, align 8
  ret ptr %45

if.entry19:                                       ; preds = %else11
  %46 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%NewExpressionNode, ptr null, i32 1) to i32))
  %47 = load ptr, ptr %var_decl_node, align 8
  %memberidx22 = getelementptr inbounds %VarDeclarationStatement, ptr %47, i32 0, i32 3
  %48 = load ptr, ptr %memberidx22, align 8
  %49 = load ptr, ptr %var_decl_node, align 8
  %memberidx23 = getelementptr inbounds %VarDeclarationStatement, ptr %49, i32 0, i32 3
  %50 = load ptr, ptr %memberidx23, align 8
  %memberidx24 = getelementptr inbounds %Node, ptr %50, i32 0, i32 0
  %51 = load ptr, ptr %memberidx24, align 8
  call void @NewExpressionNode_constructor(ptr %46, ptr %48, ptr %51)
  store ptr %46, ptr %new_node, align 8
  %52 = load ptr, ptr %new_node, align 8
  %memberidx25 = getelementptr inbounds %NewExpressionNode, ptr %52, i32 0, i32 4
  store i1 false, ptr %memberidx25, align 1
  %53 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %53)
  %54 = load ptr, ptr %this, align 8
  %55 = load ptr, ptr %new_node, align 8
  %memberidx26 = getelementptr inbounds %NewExpressionNode, ptr %55, i32 0, i32 5
  %56 = load ptr, ptr %memberidx26, align 8
  call void @Parser_parse_expression_list(ptr %54, ptr %56, i64 26)
  %57 = load ptr, ptr %new_node, align 8
  %memberidx27 = getelementptr inbounds %Node, ptr %57, i32 0, i32 0
  %58 = load ptr, ptr %new_node, align 8
  %memberidx28 = getelementptr inbounds %Node, ptr %58, i32 0, i32 0
  %59 = load ptr, ptr %memberidx28, align 8
  %60 = load ptr, ptr %this, align 8
  %61 = call ptr @Parser_eat(ptr %60, i64 26)
  %memberidx29 = getelementptr inbounds %Token, ptr %61, i32 0, i32 1
  %62 = load ptr, ptr %memberidx29, align 8
  %63 = call ptr @FloRange_merge(ptr %59, ptr %62)
  store ptr %63, ptr %memberidx27, align 8
  %64 = load ptr, ptr %var_decl_node, align 8
  %memberidx30 = getelementptr inbounds %VarDeclarationStatement, ptr %64, i32 0, i32 4
  %65 = load ptr, ptr %new_node, align 8
  store ptr %65, ptr %memberidx30, align 8
  br label %ifend21

else20:                                           ; preds = %else11
  br label %ifend21

ifend21:                                          ; preds = %else20, %if.entry19
  br label %ifend12
}

define void @ReturnStatementNode_constructor(ptr %0, ptr %1) {
  %range = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @StatementNode_constructor, ptr %super, align 8
  store ptr %1, ptr %range, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ReturnStatementNode, ptr %3, i32 0, i32 2
  store ptr null, ptr %memberidx, align 8
  %4 = load ptr, ptr %super, align 8
  %5 = load ptr, ptr %range, align 8
  call void %4(ptr %0, i64 7, ptr %5)
  ret void
}

define ptr @Parser_parse_return_statement(ptr %0) {
  %this = alloca ptr, align 8
  %return_node = alloca ptr, align 8
  %value = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ReturnStatementNode, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  call void @ReturnStatementNode_constructor(ptr %2, ptr %5)
  store ptr %2, ptr %return_node, align 8
  %6 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %6)
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Parser, ptr %7, i32 0, i32 2
  %8 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Token, ptr %8, i32 0, i32 0
  %9 = load i64, ptr %memberidx3, align 4
  %10 = icmp ne i64 %9, 33
  %11 = load ptr, ptr %this, align 8
  %12 = call i1 @Parser_can_parse(ptr %11)
  %13 = and i1 %10, %12
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Parser, ptr %14, i32 0, i32 2
  %15 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Token, ptr %15, i32 0, i32 0
  %16 = load i64, ptr %memberidx5, align 4
  %17 = icmp ne i64 %16, 28
  %18 = and i1 %13, %17
  br i1 %18, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %19 = load ptr, ptr %this, align 8
  %20 = call ptr @Parser_parse_expression(ptr %19)
  store ptr %20, ptr %value, align 8
  %21 = load ptr, ptr %return_node, align 8
  %memberidx6 = getelementptr inbounds %Node, ptr %21, i32 0, i32 0
  %22 = load ptr, ptr %return_node, align 8
  %memberidx7 = getelementptr inbounds %Node, ptr %22, i32 0, i32 0
  %23 = load ptr, ptr %memberidx7, align 8
  %24 = load ptr, ptr %value, align 8
  %memberidx8 = getelementptr inbounds %Node, ptr %24, i32 0, i32 0
  %25 = load ptr, ptr %memberidx8, align 8
  %26 = call ptr @FloRange_merge(ptr %23, ptr %25)
  store ptr %26, ptr %memberidx6, align 8
  %27 = load ptr, ptr %return_node, align 8
  %memberidx9 = getelementptr inbounds %ReturnStatementNode, ptr %27, i32 0, i32 2
  %28 = load ptr, ptr %value, align 8
  store ptr %28, ptr %memberidx9, align 8
  br label %ifend

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %29 = load ptr, ptr %return_node, align 8
  ret ptr %29
}

define ptr @Parser_parse_statement(ptr %0) {
  %this = alloca ptr, align 8
  %start_range = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %2, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  store ptr %4, ptr %start_range, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Parser, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Token, ptr %6, i32 0, i32 0
  %7 = load i64, ptr %memberidx3, align 4
  %8 = icmp eq i64 %7, 56
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %9 = load ptr, ptr %this, align 8
  %10 = call ptr @Parser_parse_if_statement(ptr %9)
  ret ptr %10

else:                                             ; preds = %1
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Parser, ptr %11, i32 0, i32 2
  %12 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Token, ptr %12, i32 0, i32 0
  %13 = load i64, ptr %memberidx5, align 4
  %14 = icmp eq i64 %13, 60
  br i1 %14, label %if.entry6, label %else7

ifend:                                            ; preds = %ifend8
  %15 = load ptr, ptr %this, align 8
  %16 = call ptr @Parser_parse_expression(ptr %15)
  ret ptr %16

if.entry6:                                        ; preds = %else
  %17 = load ptr, ptr %this, align 8
  %18 = call ptr @Parser_parse_while_statement(ptr %17)
  ret ptr %18

else7:                                            ; preds = %else
  %19 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Parser, ptr %19, i32 0, i32 2
  %20 = load ptr, ptr %memberidx9, align 8
  %memberidx10 = getelementptr inbounds %Token, ptr %20, i32 0, i32 0
  %21 = load i64, ptr %memberidx10, align 4
  %22 = icmp eq i64 %21, 59
  br i1 %22, label %if.entry11, label %else12

ifend8:                                           ; preds = %ifend13
  br label %ifend

if.entry11:                                       ; preds = %else7
  %23 = load ptr, ptr %this, align 8
  %24 = call ptr @Parser_parse_for_statement(ptr %23)
  ret ptr %24

else12:                                           ; preds = %else7
  %25 = load ptr, ptr %this, align 8
  %memberidx14 = getelementptr inbounds %Parser, ptr %25, i32 0, i32 2
  %26 = load ptr, ptr %memberidx14, align 8
  %memberidx15 = getelementptr inbounds %Token, ptr %26, i32 0, i32 0
  %27 = load i64, ptr %memberidx15, align 4
  %28 = icmp eq i64 %27, 64
  br i1 %28, label %if.entry16, label %else17

ifend13:                                          ; preds = %ifend18
  br label %ifend8

if.entry16:                                       ; preds = %else12
  %29 = load ptr, ptr %this, align 8
  %30 = call ptr @Parser_parse_return_statement(ptr %29)
  ret ptr %30

else17:                                           ; preds = %else12
  %31 = load ptr, ptr %this, align 8
  %memberidx19 = getelementptr inbounds %Parser, ptr %31, i32 0, i32 2
  %32 = load ptr, ptr %memberidx19, align 8
  %memberidx20 = getelementptr inbounds %Token, ptr %32, i32 0, i32 0
  %33 = load i64, ptr %memberidx20, align 4
  %34 = icmp eq i64 %33, 55
  br i1 %34, label %if.entry21, label %else22

ifend18:                                          ; preds = %ifend23
  br label %ifend13

if.entry21:                                       ; preds = %else17
  %35 = load ptr, ptr %this, align 8
  %36 = call ptr @Parser_parse_variable_declaration_statement(ptr %35)
  ret ptr %36

else22:                                           ; preds = %else17
  %37 = load ptr, ptr %this, align 8
  %memberidx24 = getelementptr inbounds %Parser, ptr %37, i32 0, i32 2
  %38 = load ptr, ptr %memberidx24, align 8
  %memberidx25 = getelementptr inbounds %Token, ptr %38, i32 0, i32 0
  %39 = load i64, ptr %memberidx25, align 4
  %40 = icmp eq i64 %39, 54
  br i1 %40, label %if.entry26, label %else27

ifend23:                                          ; preds = %ifend28
  br label %ifend18

if.entry26:                                       ; preds = %else22
  %41 = load ptr, ptr %this, align 8
  %42 = call ptr @Parser_parse_const_declaration_statement(ptr %41)
  ret ptr %42

else27:                                           ; preds = %else22
  %43 = load ptr, ptr %this, align 8
  %memberidx29 = getelementptr inbounds %Parser, ptr %43, i32 0, i32 2
  %44 = load ptr, ptr %memberidx29, align 8
  %memberidx30 = getelementptr inbounds %Token, ptr %44, i32 0, i32 0
  %45 = load i64, ptr %memberidx30, align 4
  %46 = icmp eq i64 %45, 63
  br i1 %46, label %if.entry31, label %else32

ifend28:                                          ; preds = %ifend33
  br label %ifend23

if.entry31:                                       ; preds = %else27
  %47 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %47)
  %48 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%StatementNode, ptr null, i32 1) to i32))
  %49 = load ptr, ptr %start_range, align 8
  call void @StatementNode_constructor(ptr %48, i64 5, ptr %49)
  ret ptr %48

else32:                                           ; preds = %else27
  %50 = load ptr, ptr %this, align 8
  %memberidx34 = getelementptr inbounds %Parser, ptr %50, i32 0, i32 2
  %51 = load ptr, ptr %memberidx34, align 8
  %memberidx35 = getelementptr inbounds %Token, ptr %51, i32 0, i32 0
  %52 = load i64, ptr %memberidx35, align 4
  %53 = icmp eq i64 %52, 62
  br i1 %53, label %if.entry36, label %else37

ifend33:                                          ; preds = %ifend38
  br label %ifend28

if.entry36:                                       ; preds = %else32
  %54 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %54)
  %55 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%StatementNode, ptr null, i32 1) to i32))
  %56 = load ptr, ptr %start_range, align 8
  call void @StatementNode_constructor(ptr %55, i64 6, ptr %56)
  ret ptr %55

else37:                                           ; preds = %else32
  br label %ifend38

ifend38:                                          ; preds = %else37
  br label %ifend33
}

define void @Parser_parse_args(ptr %0, ptr %1) {
  %args = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %args, align 8
  %3 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %3)
  %4 = load ptr, ptr %args, align 8
  %5 = load ptr, ptr %this, align 8
  %6 = call ptr @Parser_parse_arg(ptr %5)
  call void @Array_ArgNode____sl__(ptr %4, ptr %6)
  %7 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %7, i32 0, i32 2
  %8 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %8, i32 0, i32 0
  %9 = load i64, ptr %memberidx1, align 4
  %10 = icmp eq i64 %9, 3
  %11 = load ptr, ptr %this, align 8
  %12 = call i1 @Parser_can_parse(ptr %11)
  %13 = and i1 %10, %12
  br i1 %13, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %14 = load ptr, ptr %this, align 8
  %15 = call ptr @Parser_eat(ptr %14, i64 3)
  %16 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %16)
  %17 = load ptr, ptr %args, align 8
  %18 = load ptr, ptr %this, align 8
  %19 = call ptr @Parser_parse_arg(ptr %18)
  call void @Array_ArgNode____sl__(ptr %17, ptr %19)
  %20 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Parser, ptr %20, i32 0, i32 2
  %21 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Token, ptr %21, i32 0, i32 0
  %22 = load i64, ptr %memberidx3, align 4
  %23 = icmp eq i64 %22, 3
  %24 = load ptr, ptr %this, align 8
  %25 = call i1 @Parser_can_parse(ptr %24)
  %26 = and i1 %23, %25
  br i1 %26, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define i64 @Parser_parse_access_modifier(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %2, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 0
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp eq i64 %4, 67
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %1
  ret i64 2

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Parser, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Token, ptr %7, i32 0, i32 0
  %8 = load i64, ptr %memberidx3, align 4
  %9 = icmp eq i64 %8, 66
  br i1 %9, label %if.entry4, label %else5

if.entry4:                                        ; preds = %ifend
  ret i64 1

else5:                                            ; preds = %ifend
  br label %ifend6

ifend6:                                           ; preds = %else5
  %10 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Parser, ptr %10, i32 0, i32 2
  %11 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Token, ptr %11, i32 0, i32 0
  %12 = load i64, ptr %memberidx8, align 4
  %13 = icmp eq i64 %12, 68
  br i1 %13, label %if.entry9, label %else10

if.entry9:                                        ; preds = %ifend6
  ret i64 3

else10:                                           ; preds = %ifend6
  br label %ifend11

ifend11:                                          ; preds = %else10
  ret i64 0
}

define ptr @Parser_parse_const_declaration_statement(ptr %0) {
  %this = alloca ptr, align 8
  %const_decl_node = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ConstDeclarationStatement, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  call void @ConstDeclarationStatement_constructor(ptr %2, ptr %5)
  store ptr %2, ptr %const_decl_node, align 8
  %6 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %6)
  %7 = load ptr, ptr %const_decl_node, align 8
  %memberidx2 = getelementptr inbounds %ConstDeclarationStatement, ptr %7, i32 0, i32 2
  %8 = load ptr, ptr %this, align 8
  %9 = call ptr @Parser_eat(ptr %8, i64 53)
  store ptr %9, ptr %memberidx2, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Parser, ptr %10, i32 0, i32 2
  %11 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Token, ptr %11, i32 0, i32 0
  %12 = load i64, ptr %memberidx4, align 4
  %13 = icmp eq i64 %12, 1
  br i1 %13, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %14 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %14)
  %15 = load ptr, ptr %const_decl_node, align 8
  %memberidx5 = getelementptr inbounds %ConstDeclarationStatement, ptr %15, i32 0, i32 3
  %16 = load ptr, ptr %this, align 8
  %17 = call ptr @Parser_parse_type(ptr %16)
  store ptr %17, ptr %memberidx5, align 8
  br label %ifend

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %18 = load ptr, ptr %this, align 8
  %19 = call ptr @Parser_eat(ptr %18, i64 38)
  %20 = load ptr, ptr %const_decl_node, align 8
  %memberidx6 = getelementptr inbounds %ConstDeclarationStatement, ptr %20, i32 0, i32 4
  %21 = load ptr, ptr %this, align 8
  %22 = call ptr @Parser_parse_expression(ptr %21)
  store ptr %22, ptr %memberidx6, align 8
  %23 = load ptr, ptr %const_decl_node, align 8
  %memberidx7 = getelementptr inbounds %Node, ptr %23, i32 0, i32 0
  %24 = load ptr, ptr %const_decl_node, align 8
  %memberidx8 = getelementptr inbounds %Node, ptr %24, i32 0, i32 0
  %25 = load ptr, ptr %memberidx8, align 8
  %26 = load ptr, ptr %const_decl_node, align 8
  %memberidx9 = getelementptr inbounds %ConstDeclarationStatement, ptr %26, i32 0, i32 4
  %27 = load ptr, ptr %memberidx9, align 8
  %memberidx10 = getelementptr inbounds %Node, ptr %27, i32 0, i32 0
  %28 = load ptr, ptr %memberidx10, align 8
  %29 = call ptr @FloRange_merge(ptr %25, ptr %28)
  store ptr %29, ptr %memberidx7, align 8
  %30 = load ptr, ptr %const_decl_node, align 8
  ret ptr %30
}

define ptr @Parser_parse_type_alias(ptr %0) {
  %this = alloca ptr, align 8
  %type_alias_node = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %2)
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%TypeAliasNode, ptr null, i32 1) to i32))
  %4 = load ptr, ptr %this, align 8
  %5 = call ptr @Parser_eat(ptr %4, i64 53)
  call void @TypeAliasNode_constructor(ptr %3, ptr %5)
  store ptr %3, ptr %type_alias_node, align 8
  %6 = load ptr, ptr %this, align 8
  %7 = call ptr @Parser_eat(ptr %6, i64 38)
  %8 = load ptr, ptr %type_alias_node, align 8
  %memberidx = getelementptr inbounds %TypeAliasNode, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %this, align 8
  %10 = call ptr @Parser_parse_type(ptr %9)
  store ptr %10, ptr %memberidx, align 8
  %11 = load ptr, ptr %type_alias_node, align 8
  ret ptr %11
}

define ptr @Parser_parse_tuple_expression_or_expression_par(ptr %0) {
  %this = alloca ptr, align 8
  %expression = alloca ptr, align 8
  %start_range = alloca ptr, align 8
  %tuple_expression = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %2, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  store ptr %4, ptr %start_range, align 8
  %5 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %5)
  %6 = load ptr, ptr %this, align 8
  %7 = call ptr @Parser_parse_expression(ptr %6)
  store ptr %7, ptr %expression, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Parser, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Token, ptr %9, i32 0, i32 0
  %10 = load i64, ptr %memberidx3, align 4
  %11 = icmp eq i64 %10, 3
  br i1 %11, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %12 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %12)
  %13 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%TupleExpressionNode, ptr null, i32 1) to i32))
  %14 = load ptr, ptr %start_range, align 8
  call void @TupleExpressionNode_constructor(ptr %13, ptr %14)
  store ptr %13, ptr %tuple_expression, align 8
  %15 = load ptr, ptr %tuple_expression, align 8
  %memberidx4 = getelementptr inbounds %TupleExpressionNode, ptr %15, i32 0, i32 3
  %16 = load ptr, ptr %memberidx4, align 8
  %17 = load ptr, ptr %expression, align 8
  call void @Array_ExpressionNode____sl__(ptr %16, ptr %17)
  %18 = load ptr, ptr %this, align 8
  %19 = load ptr, ptr %tuple_expression, align 8
  %memberidx5 = getelementptr inbounds %TupleExpressionNode, ptr %19, i32 0, i32 3
  %20 = load ptr, ptr %memberidx5, align 8
  call void @Parser_parse_expression_list(ptr %18, ptr %20, i64 26)
  %21 = load ptr, ptr %tuple_expression, align 8
  %memberidx6 = getelementptr inbounds %Node, ptr %21, i32 0, i32 0
  %22 = load ptr, ptr %start_range, align 8
  %23 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Parser, ptr %23, i32 0, i32 2
  %24 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Token, ptr %24, i32 0, i32 1
  %25 = load ptr, ptr %memberidx8, align 8
  %26 = call ptr @FloRange_merge(ptr %22, ptr %25)
  store ptr %26, ptr %memberidx6, align 8
  %27 = load ptr, ptr %tuple_expression, align 8
  store ptr %27, ptr %expression, align 8
  br label %ifend

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %28 = load ptr, ptr %this, align 8
  %29 = call ptr @Parser_eat(ptr %28, i64 26)
  %30 = load ptr, ptr %expression, align 8
  ret ptr %30
}

define void @Parser_parse_type_list(ptr %0, ptr %1) {
  %type_nodes = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %type_nodes, align 8
  %3 = load ptr, ptr %type_nodes, align 8
  %4 = load ptr, ptr %this, align 8
  %5 = call ptr @Parser_parse_type(ptr %4)
  call void @Array_TypeNode____sl__(ptr %3, ptr %5)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %7, i32 0, i32 0
  %8 = load i64, ptr %memberidx1, align 4
  %9 = icmp eq i64 %8, 3
  %10 = load ptr, ptr %this, align 8
  %11 = call i1 @Parser_can_parse(ptr %10)
  %12 = and i1 %9, %11
  br i1 %12, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %13 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %13)
  %14 = load ptr, ptr %type_nodes, align 8
  %15 = load ptr, ptr %this, align 8
  %16 = call ptr @Parser_parse_type(ptr %15)
  call void @Array_TypeNode____sl__(ptr %14, ptr %16)
  %17 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Parser, ptr %17, i32 0, i32 2
  %18 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Token, ptr %18, i32 0, i32 0
  %19 = load i64, ptr %memberidx3, align 4
  %20 = icmp eq i64 %19, 3
  %21 = load ptr, ptr %this, align 8
  %22 = call i1 @Parser_can_parse(ptr %21)
  %23 = and i1 %20, %22
  br i1 %23, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define ptr @Parser_parse_lhs_expression_allow_call(ptr %0) {
  %this = alloca ptr, align 8
  %expression = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = call ptr @Parser_parse_atom(ptr %2)
  store ptr %3, ptr %expression, align 8
  %4 = load ptr, ptr %this, align 8
  %5 = call i1 @Parser_can_parse(ptr %4)
  br i1 %5, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %1
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %7, i32 0, i32 0
  %8 = load i64, ptr %memberidx1, align 4
  %9 = icmp eq i64 %8, 25
  br i1 %9, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %else10, %1
  %10 = load ptr, ptr %expression, align 8
  ret ptr %10

if.entry:                                         ; preds = %while.entry
  %11 = load ptr, ptr %this, align 8
  %12 = load ptr, ptr %expression, align 8
  %13 = call ptr @Parser_parse_call_expression(ptr %11, ptr %12)
  store ptr %13, ptr %expression, align 8
  br label %ifend

else:                                             ; preds = %while.entry
  %14 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Parser, ptr %14, i32 0, i32 2
  %15 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Token, ptr %15, i32 0, i32 0
  %16 = load i64, ptr %memberidx3, align 4
  %17 = icmp eq i64 %16, 29
  br i1 %17, label %if.entry4, label %else5

ifend:                                            ; preds = %ifend6, %if.entry
  %18 = load ptr, ptr %this, align 8
  %19 = call i1 @Parser_can_parse(ptr %18)
  br i1 %19, label %while.entry, label %while.end

if.entry4:                                        ; preds = %else
  %20 = load ptr, ptr %this, align 8
  %21 = load ptr, ptr %expression, align 8
  %22 = call ptr @Parser_parse_index_expression(ptr %20, ptr %21)
  store ptr %22, ptr %expression, align 8
  br label %ifend6

else5:                                            ; preds = %else
  %23 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Parser, ptr %23, i32 0, i32 2
  %24 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Token, ptr %24, i32 0, i32 0
  %25 = load i64, ptr %memberidx8, align 4
  %26 = icmp eq i64 %25, 50
  br i1 %26, label %if.entry9, label %else10

ifend6:                                           ; preds = %ifend11, %if.entry4
  br label %ifend

if.entry9:                                        ; preds = %else5
  %27 = load ptr, ptr %this, align 8
  %28 = load ptr, ptr %expression, align 8
  %29 = call ptr @Parser_parse_member_expression(ptr %27, ptr %28)
  store ptr %29, ptr %expression, align 8
  br label %ifend11

else10:                                           ; preds = %else5
  br label %while.end

ifend11:                                          ; preds = %if.entry9
  br label %ifend6
}

define ptr @Parser_parse_atom(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %2, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 0
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp eq i64 %4, 34
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %6 = load ptr, ptr %this, align 8
  %7 = call ptr @Parser_parse_string(ptr %6)
  ret ptr %7

else:                                             ; preds = %1
  %8 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Parser, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Token, ptr %9, i32 0, i32 0
  %10 = load i64, ptr %memberidx3, align 4
  %11 = icmp eq i64 %10, 31
  br i1 %11, label %if.entry4, label %else5

ifend:                                            ; preds = %ifend6
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ExpressionNode, ptr null, i32 1) to i32))
  %13 = load ptr, ptr %this, align 8
  %memberidx37 = getelementptr inbounds %Parser, ptr %13, i32 0, i32 2
  %14 = load ptr, ptr %memberidx37, align 8
  %memberidx38 = getelementptr inbounds %Token, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx38, align 8
  call void @ExpressionNode_constructor(ptr %12, i64 8, ptr %15)
  ret ptr %12

if.entry4:                                        ; preds = %else
  %16 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntExpressionNode, ptr null, i32 1) to i32))
  %17 = load ptr, ptr %this, align 8
  %18 = call ptr @Parser_eat(ptr %17, i64 31)
  call void @IntExpressionNode_constructor(ptr %16, ptr %18)
  ret ptr %16

else5:                                            ; preds = %else
  %19 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Parser, ptr %19, i32 0, i32 2
  %20 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Token, ptr %20, i32 0, i32 0
  %21 = load i64, ptr %memberidx8, align 4
  %22 = icmp eq i64 %21, 32
  br i1 %22, label %if.entry9, label %else10

ifend6:                                           ; preds = %ifend11
  br label %ifend

if.entry9:                                        ; preds = %else5
  %23 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloatExpressionNode, ptr null, i32 1) to i32))
  %24 = load ptr, ptr %this, align 8
  %25 = call ptr @Parser_eat(ptr %24, i64 32)
  call void @FloatExpressionNode_constructor(ptr %23, ptr %25)
  ret ptr %23

else10:                                           ; preds = %else5
  %26 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %Parser, ptr %26, i32 0, i32 2
  %27 = load ptr, ptr %memberidx12, align 8
  %memberidx13 = getelementptr inbounds %Token, ptr %27, i32 0, i32 0
  %28 = load i64, ptr %memberidx13, align 4
  %29 = icmp eq i64 %28, 35
  br i1 %29, label %if.entry14, label %else15

ifend11:                                          ; preds = %ifend16
  br label %ifend6

if.entry14:                                       ; preds = %else10
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%CharExpressionNode, ptr null, i32 1) to i32))
  %31 = load ptr, ptr %this, align 8
  %32 = call ptr @Parser_eat(ptr %31, i64 35)
  call void @CharExpressionNode_constructor(ptr %30, ptr %32)
  ret ptr %30

else15:                                           ; preds = %else10
  %33 = load ptr, ptr %this, align 8
  %memberidx17 = getelementptr inbounds %Parser, ptr %33, i32 0, i32 2
  %34 = load ptr, ptr %memberidx17, align 8
  %memberidx18 = getelementptr inbounds %Token, ptr %34, i32 0, i32 0
  %35 = load i64, ptr %memberidx18, align 4
  %36 = icmp eq i64 %35, 53
  br i1 %36, label %if.entry19, label %else20

ifend16:                                          ; preds = %ifend21
  br label %ifend11

if.entry19:                                       ; preds = %else15
  %37 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%VarAccessExpressionNode, ptr null, i32 1) to i32))
  %38 = load ptr, ptr %this, align 8
  %39 = call ptr @Parser_eat(ptr %38, i64 53)
  call void @VarAccessExpressionNode_constructor(ptr %37, ptr %39)
  ret ptr %37

else20:                                           ; preds = %else15
  %40 = load ptr, ptr %this, align 8
  %memberidx22 = getelementptr inbounds %Parser, ptr %40, i32 0, i32 2
  %41 = load ptr, ptr %memberidx22, align 8
  %memberidx23 = getelementptr inbounds %Token, ptr %41, i32 0, i32 0
  %42 = load i64, ptr %memberidx23, align 4
  %43 = icmp eq i64 %42, 29
  br i1 %43, label %if.entry24, label %else25

ifend21:                                          ; preds = %ifend26
  br label %ifend16

if.entry24:                                       ; preds = %else20
  %44 = load ptr, ptr %this, align 8
  %45 = call ptr @Parser_parse_array_expression(ptr %44)
  ret ptr %45

else25:                                           ; preds = %else20
  %46 = load ptr, ptr %this, align 8
  %memberidx27 = getelementptr inbounds %Parser, ptr %46, i32 0, i32 2
  %47 = load ptr, ptr %memberidx27, align 8
  %memberidx28 = getelementptr inbounds %Token, ptr %47, i32 0, i32 0
  %48 = load i64, ptr %memberidx28, align 4
  %49 = icmp eq i64 %48, 72
  br i1 %49, label %if.entry29, label %else30

ifend26:                                          ; preds = %ifend31
  br label %ifend21

if.entry29:                                       ; preds = %else25
  %50 = load ptr, ptr %this, align 8
  %51 = call ptr @Parser_parse_new_expression(ptr %50)
  ret ptr %51

else30:                                           ; preds = %else25
  %52 = load ptr, ptr %this, align 8
  %memberidx32 = getelementptr inbounds %Parser, ptr %52, i32 0, i32 2
  %53 = load ptr, ptr %memberidx32, align 8
  %memberidx33 = getelementptr inbounds %Token, ptr %53, i32 0, i32 0
  %54 = load i64, ptr %memberidx33, align 4
  %55 = icmp eq i64 %54, 25
  br i1 %55, label %if.entry34, label %else35

ifend31:                                          ; preds = %ifend36
  br label %ifend26

if.entry34:                                       ; preds = %else30
  %56 = load ptr, ptr %this, align 8
  %57 = call ptr @Parser_parse_tuple_expression_or_expression_par(ptr %56)
  ret ptr %57

else35:                                           ; preds = %else30
  %58 = load ptr, ptr %this, align 8
  %59 = call ptr @string_from_bytes(ptr @298, i64 28)
  call void @Parser_error(ptr %58, ptr %59)
  br label %ifend36

ifend36:                                          ; preds = %else35
  br label %ifend31
}

define ptr @Parser_parse_arg(ptr %0) {
  %this = alloca ptr, align 8
  %arg_node = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArgNode, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %4 = call ptr @Parser_eat(ptr %3, i64 53)
  call void @ArgNode_constructor(ptr %2, ptr %4)
  store ptr %2, ptr %arg_node, align 8
  %5 = load ptr, ptr %this, align 8
  %6 = call i1 @Parser_can_parse(ptr %5)
  %7 = xor i1 %6, true
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %8 = load ptr, ptr %arg_node, align 8
  ret ptr %8

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %9 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %9, i32 0, i32 2
  %10 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %10, i32 0, i32 0
  %11 = load i64, ptr %memberidx1, align 4
  %12 = icmp eq i64 %11, 1
  br i1 %12, label %if.entry2, label %else3

if.entry2:                                        ; preds = %ifend
  %13 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %13)
  %14 = load ptr, ptr %arg_node, align 8
  %memberidx5 = getelementptr inbounds %ArgNode, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %this, align 8
  %16 = call ptr @Parser_parse_type(ptr %15)
  store ptr %16, ptr %memberidx5, align 8
  %17 = load ptr, ptr %this, align 8
  %18 = call i1 @Parser_can_parse(ptr %17)
  %19 = xor i1 %18, true
  br i1 %19, label %if.entry6, label %else7

else3:                                            ; preds = %ifend
  br label %ifend4

ifend4:                                           ; preds = %else3, %ifend8
  %20 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Parser, ptr %20, i32 0, i32 2
  %21 = load ptr, ptr %memberidx9, align 8
  %memberidx10 = getelementptr inbounds %Token, ptr %21, i32 0, i32 0
  %22 = load i64, ptr %memberidx10, align 4
  %23 = icmp eq i64 %22, 38
  br i1 %23, label %if.entry11, label %else12

if.entry6:                                        ; preds = %if.entry2
  %24 = load ptr, ptr %arg_node, align 8
  ret ptr %24

else7:                                            ; preds = %if.entry2
  br label %ifend8

ifend8:                                           ; preds = %else7
  br label %ifend4

if.entry11:                                       ; preds = %ifend4
  %25 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %25)
  %26 = load ptr, ptr %arg_node, align 8
  %memberidx14 = getelementptr inbounds %ArgNode, ptr %26, i32 0, i32 2
  %27 = load ptr, ptr %this, align 8
  %28 = call ptr @Parser_parse_expression(ptr %27)
  store ptr %28, ptr %memberidx14, align 8
  br label %ifend13

else12:                                           ; preds = %ifend4
  br label %ifend13

ifend13:                                          ; preds = %else12, %if.entry11
  %29 = load ptr, ptr %arg_node, align 8
  %memberidx15 = getelementptr inbounds %ArgNode, ptr %29, i32 0, i32 1
  %30 = load ptr, ptr %memberidx15, align 8
  %31 = icmp eq ptr %30, null
  %32 = load ptr, ptr %arg_node, align 8
  %memberidx16 = getelementptr inbounds %ArgNode, ptr %32, i32 0, i32 2
  %33 = load ptr, ptr %memberidx16, align 8
  %34 = icmp eq ptr %33, null
  %35 = and i1 %31, %34
  br i1 %35, label %if.entry17, label %else18

if.entry17:                                       ; preds = %ifend13
  %36 = load ptr, ptr %this, align 8
  %37 = load ptr, ptr %arg_node, align 8
  %memberidx20 = getelementptr inbounds %ArgNode, ptr %37, i32 0, i32 0
  %38 = load ptr, ptr %memberidx20, align 8
  %memberidx21 = getelementptr inbounds %IdentifierToken, ptr %38, i32 0, i32 2
  %39 = load ptr, ptr %memberidx21, align 8
  %40 = getelementptr inbounds %string, ptr %39, i32 0, i32 0
  %41 = load ptr, ptr %40, align 8
  %memberidx22 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %41, i32 0, i32 5
  %42 = load ptr, ptr %memberidx22, align 8
  %43 = call ptr %42(ptr %39)
  %44 = alloca ptr, align 8
  %45 = call i64 (ptr, ptr, ...) @asprintf(ptr %44, ptr @299, ptr %43)
  %46 = load ptr, ptr %44, align 8
  %47 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %47, ptr %46, i64 %45)
  tail call void @free(ptr %43)
  call void @Parser_error(ptr %36, ptr %47)
  %48 = load ptr, ptr %this, align 8
  %memberidx23 = getelementptr inbounds %Parser, ptr %48, i32 0, i32 1
  %49 = load ptr, ptr %memberidx23, align 8
  %50 = load ptr, ptr %this, align 8
  %memberidx24 = getelementptr inbounds %Parser, ptr %50, i32 0, i32 1
  %51 = load ptr, ptr %memberidx24, align 8
  %memberidx25 = getelementptr inbounds %Array_FloError_, ptr %51, i32 0, i32 2
  %52 = load i64, ptr %memberidx25, align 4
  %53 = sub nuw i64 %52, 1
  %54 = call ptr @Array_FloError____getitem__(ptr %49, i64 %53)
  %memberidx26 = getelementptr inbounds %FloError, ptr %54, i32 0, i32 2
  %55 = load ptr, ptr %arg_node, align 8
  %memberidx27 = getelementptr inbounds %ArgNode, ptr %55, i32 0, i32 0
  %56 = load ptr, ptr %memberidx27, align 8
  %memberidx28 = getelementptr inbounds %Token, ptr %56, i32 0, i32 1
  %57 = load ptr, ptr %memberidx28, align 8
  store ptr %57, ptr %memberidx26, align 8
  br label %ifend19

else18:                                           ; preds = %ifend13
  br label %ifend19

ifend19:                                          ; preds = %else18, %if.entry17
  %58 = load ptr, ptr %arg_node, align 8
  ret ptr %58
}

define ptr @Parser_parse_object_type(ptr %0) {
  %this = alloca ptr, align 8
  %identifier_tok = alloca ptr, align 8
  %object_type_node = alloca ptr, align 8
  %end_range = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = call ptr @Parser_eat(ptr %2, i64 53)
  store ptr %3, ptr %identifier_tok, align 8
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%RecordTypeNode, ptr null, i32 1) to i32))
  %5 = load ptr, ptr %identifier_tok, align 8
  %6 = load ptr, ptr %identifier_tok, align 8
  %memberidx = getelementptr inbounds %Token, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx, align 8
  call void @RecordTypeNode_constructor(ptr %4, ptr %5, ptr %7)
  store ptr %4, ptr %object_type_node, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Parser, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Token, ptr %9, i32 0, i32 0
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp eq i64 %10, 42
  br i1 %11, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %12 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %12)
  %13 = load ptr, ptr %this, align 8
  %14 = load ptr, ptr %object_type_node, align 8
  %memberidx3 = getelementptr inbounds %RecordTypeNode, ptr %14, i32 0, i32 3
  %15 = load ptr, ptr %memberidx3, align 8
  call void @Parser_parse_type_list(ptr %13, ptr %15)
  %16 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Parser, ptr %16, i32 0, i32 2
  %17 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Token, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  store ptr %18, ptr %end_range, align 8
  %19 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Parser, ptr %19, i32 0, i32 2
  %20 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %Token, ptr %20, i32 0, i32 0
  %21 = load i64, ptr %memberidx7, align 4
  %22 = icmp eq i64 %21, 49
  br i1 %22, label %if.entry8, label %else9

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else, %ifend10
  %23 = load ptr, ptr %object_type_node, align 8
  ret ptr %23

if.entry8:                                        ; preds = %if.entry
  %24 = load ptr, ptr %this, align 8
  %memberidx11 = getelementptr inbounds %Parser, ptr %24, i32 0, i32 2
  %25 = load ptr, ptr %memberidx11, align 8
  %memberidx12 = getelementptr inbounds %Token, ptr %25, i32 0, i32 0
  store i64 41, ptr %memberidx12, align 4
  br label %ifend10

else9:                                            ; preds = %if.entry
  %26 = load ptr, ptr %this, align 8
  %27 = call ptr @Parser_eat(ptr %26, i64 41)
  br label %ifend10

ifend10:                                          ; preds = %else9, %if.entry8
  %28 = load ptr, ptr %object_type_node, align 8
  %memberidx13 = getelementptr inbounds %Node, ptr %28, i32 0, i32 0
  %29 = load ptr, ptr %object_type_node, align 8
  %memberidx14 = getelementptr inbounds %Node, ptr %29, i32 0, i32 0
  %30 = load ptr, ptr %memberidx14, align 8
  %31 = load ptr, ptr %end_range, align 8
  %32 = call ptr @FloRange_merge(ptr %30, ptr %31)
  store ptr %32, ptr %memberidx13, align 8
  br label %ifend
}

define ptr @Parser_parse_unary_expression_pre(ptr %0) {
  %this = alloca ptr, align 8
  %op = alloca i64, align 8
  %expression = alloca ptr, align 8
  %start_range = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %2, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  store ptr %4, ptr %start_range, align 8
  %5 = load ptr, ptr %this, align 8
  %6 = call i64 @Parser_is_unary_op(ptr %5)
  store i64 %6, ptr %op, align 4
  %7 = load i64, ptr %op, align 4
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %9 = load ptr, ptr %this, align 8
  %10 = call ptr @Parser_parse_unary_expression_post(ptr %9)
  ret ptr %10

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %11 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %11)
  %12 = load ptr, ptr %this, align 8
  %13 = call ptr @Parser_parse_unary_expression_pre(ptr %12)
  store ptr %13, ptr %expression, align 8
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%UnaryExpressionNode, ptr null, i32 1) to i32))
  %15 = load i64, ptr %op, align 4
  %16 = load ptr, ptr %expression, align 8
  %17 = load ptr, ptr %start_range, align 8
  %18 = load ptr, ptr %expression, align 8
  %memberidx2 = getelementptr inbounds %Node, ptr %18, i32 0, i32 0
  %19 = load ptr, ptr %memberidx2, align 8
  %20 = call ptr @FloRange_merge(ptr %17, ptr %19)
  call void @UnaryExpressionNode_constructor(ptr %14, i64 %15, ptr %16, ptr %20)
  ret ptr %14
}

define ptr @Parser_parse_unary_expression_post(ptr %0) {
  %this = alloca ptr, align 8
  %op = alloca i64, align 8
  %current_token = alloca ptr, align 8
  %expression = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = call ptr @Parser_parse_lhs_expression_allow_call(ptr %2)
  store ptr %3, ptr %expression, align 8
  store i64 0, ptr %op, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx, align 8
  store ptr %5, ptr %current_token, align 8
  %6 = load ptr, ptr %current_token, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %6, i32 0, i32 0
  %7 = load i64, ptr %memberidx1, align 4
  %8 = icmp eq i64 %7, 23
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %1
  store i64 4, ptr %op, align 4
  br label %ifend

else:                                             ; preds = %1
  %9 = load ptr, ptr %current_token, align 8
  %memberidx2 = getelementptr inbounds %Token, ptr %9, i32 0, i32 0
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp eq i64 %10, 24
  br i1 %11, label %if.entry3, label %else4

ifend:                                            ; preds = %ifend5, %if.entry
  %12 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %12)
  %13 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%UnaryExpressionNode, ptr null, i32 1) to i32))
  %14 = load i64, ptr %op, align 4
  %15 = load ptr, ptr %expression, align 8
  %16 = load ptr, ptr %expression, align 8
  %memberidx6 = getelementptr inbounds %Node, ptr %16, i32 0, i32 0
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %current_token, align 8
  %memberidx7 = getelementptr inbounds %Token, ptr %18, i32 0, i32 1
  %19 = load ptr, ptr %memberidx7, align 8
  %20 = call ptr @FloRange_merge(ptr %17, ptr %19)
  call void @UnaryExpressionNode_constructor(ptr %13, i64 %14, ptr %15, ptr %20)
  ret ptr %13

if.entry3:                                        ; preds = %else
  store i64 5, ptr %op, align 4
  br label %ifend5

else4:                                            ; preds = %else
  %21 = load ptr, ptr %expression, align 8
  ret ptr %21

ifend5:                                           ; preds = %if.entry3
  br label %ifend
}

define ptr @Parser_parse_enum(ptr %0) {
  %this = alloca ptr, align 8
  %enum_node = alloca ptr, align 8
  %enum_field = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %2)
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%EnumNode, ptr null, i32 1) to i32))
  %4 = load ptr, ptr %this, align 8
  %5 = call ptr @Parser_eat(ptr %4, i64 53)
  call void @EnumNode_constructor(ptr %3, ptr %5)
  store ptr %3, ptr %enum_node, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %7, i32 0, i32 0
  %8 = load i64, ptr %memberidx1, align 4
  %9 = icmp eq i64 %8, 25
  br i1 %9, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %10 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %10)
  %11 = load ptr, ptr %enum_node, align 8
  %memberidx2 = getelementptr inbounds %EnumNode, ptr %11, i32 0, i32 2
  %12 = load ptr, ptr %this, align 8
  %13 = call ptr @Parser_parse_type(ptr %12)
  store ptr %13, ptr %memberidx2, align 8
  %14 = load ptr, ptr %this, align 8
  %15 = call ptr @Parser_eat(ptr %14, i64 26)
  br label %ifend

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %16 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %16)
  %17 = load ptr, ptr %this, align 8
  %18 = call ptr @Parser_eat(ptr %17, i64 27)
  %19 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %19)
  %20 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Parser, ptr %20, i32 0, i32 2
  %21 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Token, ptr %21, i32 0, i32 0
  %22 = load i64, ptr %memberidx4, align 4
  %23 = icmp eq i64 %22, 53
  br i1 %23, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend9, %ifend
  %24 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%EnumNodeField, ptr null, i32 1) to i32))
  %25 = load ptr, ptr %this, align 8
  %26 = call ptr @Parser_eat(ptr %25, i64 53)
  call void @EnumNodeField_constructor(ptr %24, ptr %26)
  store ptr %24, ptr %enum_field, align 8
  %27 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Parser, ptr %27, i32 0, i32 2
  %28 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %Token, ptr %28, i32 0, i32 0
  %29 = load i64, ptr %memberidx6, align 4
  %30 = icmp eq i64 %29, 38
  br i1 %30, label %if.entry7, label %else8

while.end:                                        ; preds = %ifend9, %ifend
  %31 = load ptr, ptr %this, align 8
  %32 = call ptr @Parser_eat(ptr %31, i64 28)
  %33 = load ptr, ptr %enum_node, align 8
  ret ptr %33

if.entry7:                                        ; preds = %while.entry
  %34 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %34)
  %35 = load ptr, ptr %enum_field, align 8
  %memberidx10 = getelementptr inbounds %EnumNodeField, ptr %35, i32 0, i32 1
  %36 = load ptr, ptr %this, align 8
  %37 = call ptr @Parser_parse_expression(ptr %36)
  store ptr %37, ptr %memberidx10, align 8
  br label %ifend9

else8:                                            ; preds = %while.entry
  br label %ifend9

ifend9:                                           ; preds = %else8, %if.entry7
  %38 = load ptr, ptr %enum_node, align 8
  %memberidx11 = getelementptr inbounds %EnumNode, ptr %38, i32 0, i32 1
  %39 = load ptr, ptr %memberidx11, align 8
  %40 = load ptr, ptr %enum_field, align 8
  call void @Array_EnumNodeField____sl__(ptr %39, ptr %40)
  %41 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %41)
  %42 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %Parser, ptr %42, i32 0, i32 2
  %43 = load ptr, ptr %memberidx12, align 8
  %memberidx13 = getelementptr inbounds %Token, ptr %43, i32 0, i32 0
  %44 = load i64, ptr %memberidx13, align 4
  %45 = icmp eq i64 %44, 53
  br i1 %45, label %while.entry, label %while.end
}

define void @Parser_parse_class_block(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %class_node = alloca ptr, align 8
  %access_modifier = alloca i64, align 8
  %field = alloca ptr, align 8
  %method = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %class_node, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = call ptr @Parser_eat(ptr %3, i64 27)
  %5 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %5)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %7, i32 0, i32 0
  %8 = load i64, ptr %memberidx1, align 4
  %9 = icmp ne i64 %8, 28
  %10 = load ptr, ptr %this, align 8
  %11 = call i1 @Parser_can_parse(ptr %10)
  %12 = and i1 %9, %11
  br i1 %12, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend5, %2
  %13 = load ptr, ptr %this, align 8
  %14 = call i64 @Parser_parse_access_modifier(ptr %13)
  store i64 %14, ptr %access_modifier, align 4
  %15 = load i64, ptr %access_modifier, align 4
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %if.entry, label %else

while.end:                                        ; preds = %ifend5, %2
  %17 = load ptr, ptr %this, align 8
  %18 = call ptr @Parser_eat(ptr %17, i64 28)
  ret void

if.entry:                                         ; preds = %while.entry
  store i64 2, ptr %access_modifier, align 4
  br label %ifend

else:                                             ; preds = %while.entry
  %19 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %19)
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %20 = load ptr, ptr %this, align 8
  %21 = call ptr @Parser_peek(ptr %20, i64 1)
  %memberidx2 = getelementptr inbounds %Token, ptr %21, i32 0, i32 0
  %22 = load i64, ptr %memberidx2, align 4
  %23 = icmp eq i64 %22, 1
  br i1 %23, label %if.entry3, label %else4

if.entry3:                                        ; preds = %ifend
  %24 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FieldNode, ptr null, i32 1) to i32))
  %25 = load ptr, ptr %this, align 8
  %26 = call ptr @Parser_eat(ptr %25, i64 53)
  call void @FieldNode_constructor(ptr %24, ptr %26)
  store ptr %24, ptr %field, align 8
  %27 = load ptr, ptr %this, align 8
  %28 = call ptr @Parser_eat(ptr %27, i64 1)
  %29 = load ptr, ptr %field, align 8
  %memberidx6 = getelementptr inbounds %FieldNode, ptr %29, i32 0, i32 3
  %30 = load ptr, ptr %this, align 8
  %31 = call ptr @Parser_parse_type(ptr %30)
  store ptr %31, ptr %memberidx6, align 8
  %32 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Parser, ptr %32, i32 0, i32 2
  %33 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Token, ptr %33, i32 0, i32 0
  %34 = load i64, ptr %memberidx8, align 4
  %35 = icmp eq i64 %34, 38
  br i1 %35, label %if.entry9, label %else10

else4:                                            ; preds = %ifend
  %36 = load ptr, ptr %this, align 8
  %37 = call ptr @Parser_peek(ptr %36, i64 1)
  %memberidx15 = getelementptr inbounds %Token, ptr %37, i32 0, i32 0
  %38 = load i64, ptr %memberidx15, align 4
  %39 = icmp eq i64 %38, 25
  br i1 %39, label %if.entry16, label %else17

ifend5:                                           ; preds = %ifend18, %ifend11
  %40 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %40)
  %41 = load ptr, ptr %this, align 8
  %memberidx21 = getelementptr inbounds %Parser, ptr %41, i32 0, i32 2
  %42 = load ptr, ptr %memberidx21, align 8
  %memberidx22 = getelementptr inbounds %Token, ptr %42, i32 0, i32 0
  %43 = load i64, ptr %memberidx22, align 4
  %44 = icmp ne i64 %43, 28
  %45 = load ptr, ptr %this, align 8
  %46 = call i1 @Parser_can_parse(ptr %45)
  %47 = and i1 %44, %46
  br i1 %47, label %while.entry, label %while.end

if.entry9:                                        ; preds = %if.entry3
  %48 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %48)
  %49 = load ptr, ptr %field, align 8
  %memberidx12 = getelementptr inbounds %FieldNode, ptr %49, i32 0, i32 2
  %50 = load ptr, ptr %this, align 8
  %51 = call ptr @Parser_parse_expression(ptr %50)
  store ptr %51, ptr %memberidx12, align 8
  br label %ifend11

else10:                                           ; preds = %if.entry3
  br label %ifend11

ifend11:                                          ; preds = %else10, %if.entry9
  %52 = load ptr, ptr %field, align 8
  %memberidx13 = getelementptr inbounds %FieldNode, ptr %52, i32 0, i32 1
  %53 = load i64, ptr %access_modifier, align 4
  store i64 %53, ptr %memberidx13, align 4
  %54 = load ptr, ptr %class_node, align 8
  %memberidx14 = getelementptr inbounds %ClassDeclarationNode, ptr %54, i32 0, i32 3
  %55 = load ptr, ptr %memberidx14, align 8
  %56 = load ptr, ptr %field, align 8
  call void @Array_FieldNode____sl__(ptr %55, ptr %56)
  br label %ifend5

if.entry16:                                       ; preds = %else4
  %57 = load ptr, ptr %this, align 8
  %58 = call ptr @Parser_parse_method(ptr %57)
  store ptr %58, ptr %method, align 8
  %59 = load ptr, ptr %method, align 8
  %memberidx19 = getelementptr inbounds %MethodNode, ptr %59, i32 0, i32 3
  %60 = load i64, ptr %access_modifier, align 4
  store i64 %60, ptr %memberidx19, align 4
  %61 = load ptr, ptr %class_node, align 8
  %memberidx20 = getelementptr inbounds %ClassDeclarationNode, ptr %61, i32 0, i32 4
  %62 = load ptr, ptr %memberidx20, align 8
  %63 = load ptr, ptr %method, align 8
  call void @Array_MethodNode____sl__(ptr %62, ptr %63)
  br label %ifend18

else17:                                           ; preds = %else4
  %64 = load ptr, ptr %this, align 8
  %65 = call ptr @string_from_bytes(ptr @302, i64 19)
  call void @Parser_error(ptr %64, ptr %65)
  ret void

ifend18:                                          ; preds = %if.entry16
  br label %ifend5
}

define ptr @Parser_parse_method(ptr %0) {
  %this = alloca ptr, align 8
  %method_node = alloca ptr, align 8
  %identifier_tok = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MethodNode, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %4 = call ptr @Parser_eat(ptr %3, i64 53)
  call void @MethodNode_constructor(ptr %2, ptr %4)
  store ptr %2, ptr %method_node, align 8
  %5 = load ptr, ptr %this, align 8
  %6 = call ptr @Parser_eat(ptr %5, i64 25)
  %7 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %9, i32 0, i32 0
  %10 = load i64, ptr %memberidx1, align 4
  %11 = icmp ne i64 %10, 26
  br i1 %11, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %12 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Parser, ptr %12, i32 0, i32 2
  %13 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %IdentifierToken, ptr %13, i32 0, i32 2
  %14 = load ptr, ptr %memberidx3, align 8
  %15 = call ptr @string_from_bytes(ptr @301, i64 4)
  %16 = call i1 @string___eq__(ptr %14, ptr %15)
  br i1 %16, label %if.entry4, label %else5

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else, %ifend6
  %17 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Parser, ptr %17, i32 0, i32 2
  %18 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Token, ptr %18, i32 0, i32 0
  %19 = load i64, ptr %memberidx9, align 4
  %20 = icmp ne i64 %19, 26
  br i1 %20, label %if.entry10, label %else11

if.entry4:                                        ; preds = %if.entry
  %21 = load ptr, ptr %method_node, align 8
  %memberidx7 = getelementptr inbounds %MethodNode, ptr %21, i32 0, i32 5
  store i1 false, ptr %memberidx7, align 1
  %22 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %22)
  br label %ifend6

else5:                                            ; preds = %if.entry
  br label %ifend6

ifend6:                                           ; preds = %else5, %if.entry4
  br label %ifend

if.entry10:                                       ; preds = %ifend
  %23 = load ptr, ptr %method_node, align 8
  %memberidx13 = getelementptr inbounds %MethodNode, ptr %23, i32 0, i32 5
  %24 = load i1, ptr %memberidx13, align 1
  %25 = xor i1 %24, true
  br i1 %25, label %if.entry14, label %else15

else11:                                           ; preds = %ifend
  br label %ifend12

ifend12:                                          ; preds = %else11, %ifend16
  %26 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %26)
  %27 = load ptr, ptr %this, align 8
  %28 = call ptr @Parser_eat(ptr %27, i64 26)
  %29 = load ptr, ptr %this, align 8
  %memberidx18 = getelementptr inbounds %Parser, ptr %29, i32 0, i32 2
  %30 = load ptr, ptr %memberidx18, align 8
  %memberidx19 = getelementptr inbounds %Token, ptr %30, i32 0, i32 0
  %31 = load i64, ptr %memberidx19, align 4
  %32 = icmp eq i64 %31, 1
  br i1 %32, label %if.entry20, label %else21

if.entry14:                                       ; preds = %if.entry10
  %33 = load ptr, ptr %this, align 8
  %34 = call ptr @Parser_eat(ptr %33, i64 3)
  br label %ifend16

else15:                                           ; preds = %if.entry10
  br label %ifend16

ifend16:                                          ; preds = %else15, %if.entry14
  %35 = load ptr, ptr %this, align 8
  %36 = load ptr, ptr %method_node, align 8
  %memberidx17 = getelementptr inbounds %MethodNode, ptr %36, i32 0, i32 1
  %37 = load ptr, ptr %memberidx17, align 8
  call void @Parser_parse_args(ptr %35, ptr %37)
  br label %ifend12

if.entry20:                                       ; preds = %ifend12
  %38 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %38)
  %39 = load ptr, ptr %method_node, align 8
  %memberidx23 = getelementptr inbounds %MethodNode, ptr %39, i32 0, i32 4
  %40 = load ptr, ptr %this, align 8
  %41 = call ptr @Parser_parse_type(ptr %40)
  store ptr %41, ptr %memberidx23, align 8
  br label %ifend22

else21:                                           ; preds = %ifend12
  %42 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IdentifierToken, ptr null, i32 1) to i32))
  %43 = call ptr @string_from_bytes(ptr @300, i64 4)
  %44 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloRange, ptr null, i32 1) to i32))
  call void @FloRange_constructor(ptr %44, i64 0, i64 0, i64 0, i64 0)
  call void @IdentifierToken_constructor(ptr %42, ptr %43, ptr %44)
  store ptr %42, ptr %identifier_tok, align 8
  %45 = load ptr, ptr %method_node, align 8
  %memberidx24 = getelementptr inbounds %MethodNode, ptr %45, i32 0, i32 4
  %46 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%RecordTypeNode, ptr null, i32 1) to i32))
  %47 = load ptr, ptr %identifier_tok, align 8
  %48 = load ptr, ptr %identifier_tok, align 8
  %memberidx25 = getelementptr inbounds %Token, ptr %48, i32 0, i32 1
  %49 = load ptr, ptr %memberidx25, align 8
  call void @RecordTypeNode_constructor(ptr %46, ptr %47, ptr %49)
  store ptr %46, ptr %memberidx24, align 8
  br label %ifend22

ifend22:                                          ; preds = %else21, %if.entry20
  %50 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %50)
  %51 = load ptr, ptr %this, align 8
  %memberidx26 = getelementptr inbounds %Parser, ptr %51, i32 0, i32 2
  %52 = load ptr, ptr %memberidx26, align 8
  %memberidx27 = getelementptr inbounds %Token, ptr %52, i32 0, i32 0
  %53 = load i64, ptr %memberidx27, align 4
  %54 = icmp eq i64 %53, 27
  br i1 %54, label %if.entry28, label %else29

if.entry28:                                       ; preds = %ifend22
  %55 = load ptr, ptr %method_node, align 8
  %memberidx31 = getelementptr inbounds %MethodNode, ptr %55, i32 0, i32 2
  %56 = load ptr, ptr %this, align 8
  %57 = call ptr @Parser_parse_block(ptr %56)
  store ptr %57, ptr %memberidx31, align 8
  br label %ifend30

else29:                                           ; preds = %ifend22
  %58 = load ptr, ptr %method_node, align 8
  %memberidx32 = getelementptr inbounds %MethodNode, ptr %58, i32 0, i32 6
  store i1 true, ptr %memberidx32, align 1
  br label %ifend30

ifend30:                                          ; preds = %else29, %if.entry28
  %59 = load ptr, ptr %method_node, align 8
  ret ptr %59
}

define ptr @Parser_parse_function_type(ptr %0) {
  %this = alloca ptr, align 8
  %types = alloca ptr, align 8
  %fnc_type_node = alloca ptr, align 8
  %start_range = alloca ptr, align 8
  %end_range = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_TypeNode_, ptr null, i32 1) to i32))
  call void @Array_TypeNode__constructor(ptr %2, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_TypeNode_, ptr %2, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %2, ptr %types, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Parser, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Token, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx3, align 8
  store ptr %6, ptr %start_range, align 8
  %7 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Parser, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Token, ptr %9, i32 0, i32 0
  %10 = load i64, ptr %memberidx5, align 4
  %11 = icmp ne i64 %10, 26
  br i1 %11, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %12 = load ptr, ptr %this, align 8
  %13 = load ptr, ptr %types, align 8
  call void @Parser_parse_type_list(ptr %12, ptr %13)
  br label %ifend

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %14 = load ptr, ptr %this, align 8
  %15 = call ptr @Parser_eat(ptr %14, i64 26)
  %memberidx6 = getelementptr inbounds %Token, ptr %15, i32 0, i32 1
  %16 = load ptr, ptr %memberidx6, align 8
  store ptr %16, ptr %end_range, align 8
  %17 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Parser, ptr %17, i32 0, i32 2
  %18 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Token, ptr %18, i32 0, i32 0
  %19 = load i64, ptr %memberidx8, align 4
  %20 = icmp ne i64 %19, 45
  br i1 %20, label %if.entry9, label %else10

if.entry9:                                        ; preds = %ifend
  %21 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%TupleTypeNode, ptr null, i32 1) to i32))
  %22 = load ptr, ptr %types, align 8
  %23 = load ptr, ptr %start_range, align 8
  %24 = load ptr, ptr %end_range, align 8
  %25 = call ptr @FloRange_merge(ptr %23, ptr %24)
  call void @TupleTypeNode_constructor(ptr %21, ptr %22, ptr %25)
  ret ptr %21

else10:                                           ; preds = %ifend
  br label %ifend11

ifend11:                                          ; preds = %else10
  %26 = load ptr, ptr %this, align 8
  %27 = call ptr @Parser_eat(ptr %26, i64 45)
  %28 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FunctionTypeNode, ptr null, i32 1) to i32))
  %29 = load ptr, ptr %types, align 8
  %30 = load ptr, ptr %start_range, align 8
  call void @FunctionTypeNode_constructor(ptr %28, ptr %29, ptr %30)
  store ptr %28, ptr %fnc_type_node, align 8
  %31 = load ptr, ptr %fnc_type_node, align 8
  %memberidx12 = getelementptr inbounds %FunctionTypeNode, ptr %31, i32 0, i32 3
  %32 = load ptr, ptr %this, align 8
  %33 = call ptr @Parser_parse_type(ptr %32)
  store ptr %33, ptr %memberidx12, align 8
  %34 = load ptr, ptr %fnc_type_node, align 8
  %memberidx13 = getelementptr inbounds %Node, ptr %34, i32 0, i32 0
  %35 = load ptr, ptr %fnc_type_node, align 8
  %memberidx14 = getelementptr inbounds %Node, ptr %35, i32 0, i32 0
  %36 = load ptr, ptr %memberidx14, align 8
  %37 = load ptr, ptr %fnc_type_node, align 8
  %memberidx15 = getelementptr inbounds %FunctionTypeNode, ptr %37, i32 0, i32 3
  %38 = load ptr, ptr %memberidx15, align 8
  %memberidx16 = getelementptr inbounds %Node, ptr %38, i32 0, i32 0
  %39 = load ptr, ptr %memberidx16, align 8
  %40 = call ptr @FloRange_merge(ptr %36, ptr %39)
  store ptr %40, ptr %memberidx13, align 8
  %41 = load ptr, ptr %fnc_type_node, align 8
  ret ptr %41
}

define void @Parser_parse_generic_parameters(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %generic_parameters = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %generic_parameters, align 8
  %3 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %3)
  %4 = load ptr, ptr %generic_parameters, align 8
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%GenericParameterNode, ptr null, i32 1) to i32))
  %6 = load ptr, ptr %this, align 8
  %7 = call ptr @Parser_eat(ptr %6, i64 53)
  call void @GenericParameterNode_constructor(ptr %5, ptr %7)
  call void @Array_GenericParameterNode____sl__(ptr %4, ptr %5)
  %8 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %9, i32 0, i32 0
  %10 = load i64, ptr %memberidx1, align 4
  %11 = icmp eq i64 %10, 3
  %12 = load ptr, ptr %this, align 8
  %13 = call i1 @Parser_can_parse(ptr %12)
  %14 = and i1 %11, %13
  br i1 %14, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %15 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %15)
  %16 = load ptr, ptr %generic_parameters, align 8
  %17 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%GenericParameterNode, ptr null, i32 1) to i32))
  %18 = load ptr, ptr %this, align 8
  %19 = call ptr @Parser_eat(ptr %18, i64 53)
  call void @GenericParameterNode_constructor(ptr %17, ptr %19)
  call void @Array_GenericParameterNode____sl__(ptr %16, ptr %17)
  %20 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Parser, ptr %20, i32 0, i32 2
  %21 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Token, ptr %21, i32 0, i32 0
  %22 = load i64, ptr %memberidx3, align 4
  %23 = icmp eq i64 %22, 3
  %24 = load ptr, ptr %this, align 8
  %25 = call i1 @Parser_can_parse(ptr %24)
  %26 = and i1 %23, %25
  br i1 %26, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  %27 = load ptr, ptr %this, align 8
  %28 = call ptr @Parser_eat(ptr %27, i64 41)
  ret void
}

define ptr @Parser_parse_function(ptr %0) {
  %this = alloca ptr, align 8
  %fnc_node = alloca ptr, align 8
  %identifier_tok = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FunctionDeclarationNode, ptr null, i32 1) to i32))
  call void @FunctionDeclarationNode_constructor(ptr %2)
  store ptr %2, ptr %fnc_node, align 8
  %3 = load ptr, ptr %fnc_node, align 8
  %memberidx = getelementptr inbounds %FunctionDeclarationNode, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %this, align 8
  %5 = call ptr @Parser_eat(ptr %4, i64 53)
  store ptr %5, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %7 = call ptr @Parser_eat(ptr %6, i64 25)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Parser, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Token, ptr %9, i32 0, i32 0
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp ne i64 %10, 26
  br i1 %11, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %12 = load ptr, ptr %this, align 8
  %13 = load ptr, ptr %fnc_node, align 8
  %memberidx3 = getelementptr inbounds %FunctionDeclarationNode, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx3, align 8
  call void @Parser_parse_args(ptr %12, ptr %14)
  br label %ifend

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %15 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %15)
  %16 = load ptr, ptr %this, align 8
  %17 = call ptr @Parser_eat(ptr %16, i64 26)
  %18 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Parser, ptr %18, i32 0, i32 2
  %19 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Token, ptr %19, i32 0, i32 0
  %20 = load i64, ptr %memberidx5, align 4
  %21 = icmp eq i64 %20, 1
  br i1 %21, label %if.entry6, label %else7

if.entry6:                                        ; preds = %ifend
  %22 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %22)
  %23 = load ptr, ptr %fnc_node, align 8
  %memberidx9 = getelementptr inbounds %FunctionDeclarationNode, ptr %23, i32 0, i32 3
  %24 = load ptr, ptr %this, align 8
  %25 = call ptr @Parser_parse_type(ptr %24)
  store ptr %25, ptr %memberidx9, align 8
  br label %ifend8

else7:                                            ; preds = %ifend
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IdentifierToken, ptr null, i32 1) to i32))
  %27 = call ptr @string_from_bytes(ptr @300, i64 4)
  %28 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloRange, ptr null, i32 1) to i32))
  call void @FloRange_constructor(ptr %28, i64 0, i64 0, i64 0, i64 0)
  call void @IdentifierToken_constructor(ptr %26, ptr %27, ptr %28)
  store ptr %26, ptr %identifier_tok, align 8
  %29 = load ptr, ptr %fnc_node, align 8
  %memberidx10 = getelementptr inbounds %FunctionDeclarationNode, ptr %29, i32 0, i32 3
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%RecordTypeNode, ptr null, i32 1) to i32))
  %31 = load ptr, ptr %identifier_tok, align 8
  %32 = load ptr, ptr %identifier_tok, align 8
  %memberidx11 = getelementptr inbounds %Token, ptr %32, i32 0, i32 1
  %33 = load ptr, ptr %memberidx11, align 8
  call void @RecordTypeNode_constructor(ptr %30, ptr %31, ptr %33)
  store ptr %30, ptr %memberidx10, align 8
  br label %ifend8

ifend8:                                           ; preds = %else7, %if.entry6
  %34 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %34)
  %35 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %Parser, ptr %35, i32 0, i32 2
  %36 = load ptr, ptr %memberidx12, align 8
  %memberidx13 = getelementptr inbounds %Token, ptr %36, i32 0, i32 0
  %37 = load i64, ptr %memberidx13, align 4
  %38 = icmp eq i64 %37, 27
  br i1 %38, label %if.entry14, label %else15

if.entry14:                                       ; preds = %ifend8
  %39 = load ptr, ptr %fnc_node, align 8
  %memberidx17 = getelementptr inbounds %FunctionDeclarationNode, ptr %39, i32 0, i32 2
  %40 = load ptr, ptr %this, align 8
  %41 = call ptr @Parser_parse_block(ptr %40)
  store ptr %41, ptr %memberidx17, align 8
  br label %ifend16

else15:                                           ; preds = %ifend8
  %42 = load ptr, ptr %fnc_node, align 8
  %memberidx18 = getelementptr inbounds %FunctionDeclarationNode, ptr %42, i32 0, i32 4
  store i1 true, ptr %memberidx18, align 1
  br label %ifend16

ifend16:                                          ; preds = %else15, %if.entry14
  %43 = load ptr, ptr %fnc_node, align 8
  ret ptr %43
}

define ptr @Parser_parse_import(ptr %0) {
  %this = alloca ptr, align 8
  %import_node = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %2)
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ImportNode, ptr null, i32 1) to i32))
  call void @ImportNode_constructor(ptr %3)
  store ptr %3, ptr %import_node, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %5, i32 0, i32 0
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp eq i64 %6, 53
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %8 = load ptr, ptr %import_node, align 8
  %memberidx2 = getelementptr inbounds %ImportNode, ptr %8, i32 0, i32 0
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = load ptr, ptr %this, align 8
  %11 = call ptr @Parser_parse_import_clause(ptr %10)
  call void @Array_ImportClause____sl__(ptr %9, ptr %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Parser, ptr %12, i32 0, i32 2
  %13 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Token, ptr %13, i32 0, i32 0
  %14 = load i64, ptr %memberidx4, align 4
  %15 = icmp eq i64 %14, 3
  %16 = load ptr, ptr %this, align 8
  %17 = call i1 @Parser_can_parse(ptr %16)
  %18 = and i1 %15, %17
  br i1 %18, label %while.entry, label %while.end

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else, %while.end
  %19 = load ptr, ptr %import_node, align 8
  %memberidx8 = getelementptr inbounds %ImportNode, ptr %19, i32 0, i32 1
  %20 = load ptr, ptr %this, align 8
  %21 = call ptr @Parser_eat(ptr %20, i64 34)
  store ptr %21, ptr %memberidx8, align 8
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Parser, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %memberidx9, align 8
  %memberidx10 = getelementptr inbounds %Token, ptr %23, i32 0, i32 0
  %24 = load i64, ptr %memberidx10, align 4
  %25 = icmp eq i64 %24, 74
  br i1 %25, label %if.entry11, label %else12

while.entry:                                      ; preds = %while.entry, %if.entry
  %26 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %26)
  %27 = load ptr, ptr %import_node, align 8
  %memberidx5 = getelementptr inbounds %ImportNode, ptr %27, i32 0, i32 0
  %28 = load ptr, ptr %memberidx5, align 8
  %29 = load ptr, ptr %this, align 8
  %30 = call ptr @Parser_parse_import_clause(ptr %29)
  call void @Array_ImportClause____sl__(ptr %28, ptr %30)
  %31 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Parser, ptr %31, i32 0, i32 2
  %32 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %Token, ptr %32, i32 0, i32 0
  %33 = load i64, ptr %memberidx7, align 4
  %34 = icmp eq i64 %33, 3
  %35 = load ptr, ptr %this, align 8
  %36 = call i1 @Parser_can_parse(ptr %35)
  %37 = and i1 %34, %36
  br i1 %37, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %if.entry
  %38 = load ptr, ptr %this, align 8
  %39 = call ptr @Parser_eat(ptr %38, i64 69)
  br label %ifend

if.entry11:                                       ; preds = %ifend
  %40 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %40)
  %41 = load ptr, ptr %import_node, align 8
  %memberidx14 = getelementptr inbounds %ImportNode, ptr %41, i32 0, i32 2
  %42 = load ptr, ptr %this, align 8
  %43 = call ptr @Parser_eat(ptr %42, i64 53)
  store ptr %43, ptr %memberidx14, align 8
  br label %ifend13

else12:                                           ; preds = %ifend
  br label %ifend13

ifend13:                                          ; preds = %else12, %if.entry11
  %44 = load ptr, ptr %import_node, align 8
  ret ptr %44
}

define ptr @Parser_eat(ptr %0, i64 %1) {
  %token_type = alloca i64, align 8
  %this = alloca ptr, align 8
  %current_token = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %token_type, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  store ptr %4, ptr %current_token, align 8
  %5 = load i64, ptr %token_type, align 4
  %6 = load ptr, ptr %current_token, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %6, i32 0, i32 0
  %7 = load i64, ptr %memberidx1, align 4
  %8 = icmp eq i64 %5, %7
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %9 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %9)
  %10 = load ptr, ptr %current_token, align 8
  ret ptr %10

else:                                             ; preds = %2
  %11 = load i64, ptr %token_type, align 4
  %12 = icmp eq i64 %11, 53
  br i1 %12, label %if.entry2, label %else3

ifend:                                            ; preds = %ifend4
  %13 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Token, ptr null, i32 1) to i32))
  %14 = load ptr, ptr %current_token, align 8
  %memberidx35 = getelementptr inbounds %Token, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx35, align 8
  call void @Token_constructor(ptr %13, i64 46, ptr %15)
  ret ptr %13

if.entry2:                                        ; preds = %else
  %16 = load ptr, ptr %this, align 8
  %17 = call ptr @string_from_bytes(ptr @285, i64 22)
  call void @Parser_error(ptr %16, ptr %17)
  br label %ifend4

else3:                                            ; preds = %else
  %18 = load i64, ptr %token_type, align 4
  %19 = icmp eq i64 %18, 38
  br i1 %19, label %if.entry5, label %else6

ifend4:                                           ; preds = %ifend7, %if.entry2
  br label %ifend

if.entry5:                                        ; preds = %else3
  %20 = load ptr, ptr %this, align 8
  %21 = call ptr @string_from_bytes(ptr @286, i64 12)
  call void @Parser_error(ptr %20, ptr %21)
  br label %ifend7

else6:                                            ; preds = %else3
  %22 = load i64, ptr %token_type, align 4
  %23 = icmp eq i64 %22, 1
  br i1 %23, label %if.entry8, label %else9

ifend7:                                           ; preds = %ifend10, %if.entry5
  br label %ifend4

if.entry8:                                        ; preds = %else6
  %24 = load ptr, ptr %this, align 8
  %25 = call ptr @string_from_bytes(ptr @287, i64 12)
  call void @Parser_error(ptr %24, ptr %25)
  br label %ifend10

else9:                                            ; preds = %else6
  %26 = load i64, ptr %token_type, align 4
  %27 = icmp eq i64 %26, 25
  br i1 %27, label %if.entry11, label %else12

ifend10:                                          ; preds = %ifend13, %if.entry8
  br label %ifend7

if.entry11:                                       ; preds = %else9
  %28 = load ptr, ptr %this, align 8
  %29 = call ptr @string_from_bytes(ptr @288, i64 12)
  call void @Parser_error(ptr %28, ptr %29)
  br label %ifend13

else12:                                           ; preds = %else9
  %30 = load i64, ptr %token_type, align 4
  %31 = icmp eq i64 %30, 26
  br i1 %31, label %if.entry14, label %else15

ifend13:                                          ; preds = %ifend16, %if.entry11
  br label %ifend10

if.entry14:                                       ; preds = %else12
  %32 = load ptr, ptr %this, align 8
  %33 = call ptr @string_from_bytes(ptr @289, i64 12)
  call void @Parser_error(ptr %32, ptr %33)
  br label %ifend16

else15:                                           ; preds = %else12
  %34 = load i64, ptr %token_type, align 4
  %35 = icmp eq i64 %34, 27
  br i1 %35, label %if.entry17, label %else18

ifend16:                                          ; preds = %ifend19, %if.entry14
  br label %ifend13

if.entry17:                                       ; preds = %else15
  %36 = load ptr, ptr %this, align 8
  %37 = call ptr @string_from_bytes(ptr @290, i64 12)
  call void @Parser_error(ptr %36, ptr %37)
  br label %ifend19

else18:                                           ; preds = %else15
  %38 = load i64, ptr %token_type, align 4
  %39 = icmp eq i64 %38, 28
  br i1 %39, label %if.entry20, label %else21

ifend19:                                          ; preds = %ifend22, %if.entry17
  br label %ifend16

if.entry20:                                       ; preds = %else18
  %40 = load ptr, ptr %this, align 8
  %41 = call ptr @string_from_bytes(ptr @291, i64 12)
  call void @Parser_error(ptr %40, ptr %41)
  br label %ifend22

else21:                                           ; preds = %else18
  %42 = load i64, ptr %token_type, align 4
  %43 = icmp eq i64 %42, 3
  br i1 %43, label %if.entry23, label %else24

ifend22:                                          ; preds = %ifend25, %if.entry20
  br label %ifend19

if.entry23:                                       ; preds = %else21
  %44 = load ptr, ptr %this, align 8
  %45 = call ptr @string_from_bytes(ptr @292, i64 12)
  call void @Parser_error(ptr %44, ptr %45)
  br label %ifend25

else24:                                           ; preds = %else21
  %46 = load i64, ptr %token_type, align 4
  %47 = icmp eq i64 %46, 42
  br i1 %47, label %if.entry26, label %else27

ifend25:                                          ; preds = %ifend28, %if.entry23
  br label %ifend22

if.entry26:                                       ; preds = %else24
  %48 = load ptr, ptr %this, align 8
  %49 = call ptr @string_from_bytes(ptr @293, i64 12)
  call void @Parser_error(ptr %48, ptr %49)
  br label %ifend28

else27:                                           ; preds = %else24
  %50 = load i64, ptr %token_type, align 4
  %51 = icmp eq i64 %50, 41
  br i1 %51, label %if.entry29, label %else30

ifend28:                                          ; preds = %ifend31, %if.entry26
  br label %ifend25

if.entry29:                                       ; preds = %else27
  %52 = load ptr, ptr %this, align 8
  %53 = call ptr @string_from_bytes(ptr @294, i64 12)
  call void @Parser_error(ptr %52, ptr %53)
  br label %ifend31

else30:                                           ; preds = %else27
  %54 = load i64, ptr %token_type, align 4
  %55 = icmp eq i64 %54, 45
  br i1 %55, label %if.entry32, label %else33

ifend31:                                          ; preds = %ifend34, %if.entry29
  br label %ifend28

if.entry32:                                       ; preds = %else30
  %56 = load ptr, ptr %this, align 8
  %57 = call ptr @string_from_bytes(ptr @295, i64 13)
  call void @Parser_error(ptr %56, ptr %57)
  br label %ifend34

else33:                                           ; preds = %else30
  br label %ifend34

ifend34:                                          ; preds = %else33, %if.entry32
  br label %ifend31
}

define i64 @Parser_is_unary_op(ptr %0) {
  %this = alloca ptr, align 8
  %token_type = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %2, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 0
  %4 = load i64, ptr %memberidx1, align 4
  store i64 %4, ptr %token_type, align 4
  %5 = load i64, ptr %token_type, align 4
  %6 = icmp eq i64 %5, 23
  br i1 %6, label %if.entry, label %else

if.entry:                                         ; preds = %1
  ret i64 2

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %7 = load i64, ptr %token_type, align 4
  %8 = icmp eq i64 %7, 24
  br i1 %8, label %if.entry2, label %else3

if.entry2:                                        ; preds = %ifend
  ret i64 3

else3:                                            ; preds = %ifend
  br label %ifend4

ifend4:                                           ; preds = %else3
  %9 = load i64, ptr %token_type, align 4
  %10 = icmp eq i64 %9, 5
  br i1 %10, label %if.entry5, label %else6

if.entry5:                                        ; preds = %ifend4
  ret i64 6

else6:                                            ; preds = %ifend4
  br label %ifend7

ifend7:                                           ; preds = %else6
  %11 = load i64, ptr %token_type, align 4
  %12 = icmp eq i64 %11, 37
  br i1 %12, label %if.entry8, label %else9

if.entry8:                                        ; preds = %ifend7
  ret i64 8

else9:                                            ; preds = %ifend7
  br label %ifend10

ifend10:                                          ; preds = %else9
  %13 = load i64, ptr %token_type, align 4
  %14 = icmp eq i64 %13, 73
  br i1 %14, label %if.entry11, label %else12

if.entry11:                                       ; preds = %ifend10
  ret i64 1

else12:                                           ; preds = %ifend10
  br label %ifend13

ifend13:                                          ; preds = %else12
  ret i64 0
}

define void @ArrayExpressionNode_constructor(ptr %0, ptr %1) {
  %range = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @ExpressionNode_constructor, ptr %super, align 8
  store ptr %1, ptr %range, align 8
  %3 = load ptr, ptr %super, align 8
  %4 = load ptr, ptr %range, align 8
  call void %3(ptr %0, i64 6, ptr %4)
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayExpressionNode, ptr %5, i32 0, i32 3
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ExpressionNode_, ptr null, i32 1) to i32))
  call void @Array_ExpressionNode__constructor(ptr %6, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx1 = getelementptr inbounds %Array_ExpressionNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %6, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  store ptr %6, ptr %memberidx, align 8
  ret void
}

define ptr @Parser_parse_array_expression(ptr %0) {
  %this = alloca ptr, align 8
  %array_expression = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayExpressionNode, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  call void @ArrayExpressionNode_constructor(ptr %2, ptr %5)
  store ptr %2, ptr %array_expression, align 8
  %6 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %6)
  %7 = load ptr, ptr %this, align 8
  %8 = load ptr, ptr %array_expression, align 8
  %memberidx2 = getelementptr inbounds %ArrayExpressionNode, ptr %8, i32 0, i32 3
  %9 = load ptr, ptr %memberidx2, align 8
  call void @Parser_parse_expression_list(ptr %7, ptr %9, i64 30)
  %10 = load ptr, ptr %array_expression, align 8
  %memberidx3 = getelementptr inbounds %Node, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %array_expression, align 8
  %memberidx4 = getelementptr inbounds %Node, ptr %11, i32 0, i32 0
  %12 = load ptr, ptr %memberidx4, align 8
  %13 = load ptr, ptr %this, align 8
  %14 = call ptr @Parser_eat(ptr %13, i64 30)
  %memberidx5 = getelementptr inbounds %Token, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = call ptr @FloRange_merge(ptr %12, ptr %15)
  store ptr %16, ptr %memberidx3, align 8
  %17 = load ptr, ptr %array_expression, align 8
  ret ptr %17
}

define void @NewExpressionNode_constructor(ptr %0, ptr %1, ptr %2) {
  %range = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  %parsed_type = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @ExpressionNode_constructor, ptr %super, align 8
  store ptr %1, ptr %parsed_type, align 8
  store ptr %2, ptr %range, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %NewExpressionNode, ptr %4, i32 0, i32 3
  %5 = load ptr, ptr %parsed_type, align 8
  store ptr %5, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %NewExpressionNode, ptr %6, i32 0, i32 4
  store i1 true, ptr %memberidx1, align 1
  %7 = load ptr, ptr %super, align 8
  %8 = load ptr, ptr %range, align 8
  call void %7(ptr %0, i64 12, ptr %8)
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %NewExpressionNode, ptr %9, i32 0, i32 5
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ExpressionNode_, ptr null, i32 1) to i32))
  call void @Array_ExpressionNode__constructor(ptr %10, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx3 = getelementptr inbounds %Array_ExpressionNode_, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Array_ExpressionNode_, ptr %10, i32 0, i32 2
  store i64 0, ptr %memberidx4, align 4
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define ptr @Parser_parse_new_expression(ptr %0) {
  %this = alloca ptr, align 8
  %new_node = alloca ptr, align 8
  %start_range = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %2, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  store ptr %4, ptr %start_range, align 8
  %5 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %5)
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%NewExpressionNode, ptr null, i32 1) to i32))
  %7 = load ptr, ptr %this, align 8
  %8 = call ptr @Parser_parse_type(ptr %7)
  %9 = load ptr, ptr %start_range, align 8
  call void @NewExpressionNode_constructor(ptr %6, ptr %8, ptr %9)
  store ptr %6, ptr %new_node, align 8
  %10 = load ptr, ptr %this, align 8
  %11 = call ptr @Parser_eat(ptr %10, i64 25)
  %12 = load ptr, ptr %this, align 8
  %13 = load ptr, ptr %new_node, align 8
  %memberidx2 = getelementptr inbounds %NewExpressionNode, ptr %13, i32 0, i32 5
  %14 = load ptr, ptr %memberidx2, align 8
  call void @Parser_parse_expression_list(ptr %12, ptr %14, i64 26)
  %15 = load ptr, ptr %new_node, align 8
  %memberidx3 = getelementptr inbounds %Node, ptr %15, i32 0, i32 0
  %16 = load ptr, ptr %new_node, align 8
  %memberidx4 = getelementptr inbounds %Node, ptr %16, i32 0, i32 0
  %17 = load ptr, ptr %memberidx4, align 8
  %18 = load ptr, ptr %this, align 8
  %19 = call ptr @Parser_eat(ptr %18, i64 26)
  %memberidx5 = getelementptr inbounds %Token, ptr %19, i32 0, i32 1
  %20 = load ptr, ptr %memberidx5, align 8
  %21 = call ptr @FloRange_merge(ptr %17, ptr %20)
  store ptr %21, ptr %memberidx3, align 8
  %22 = load ptr, ptr %new_node, align 8
  ret ptr %22
}

define void @ExpressionIndexNode_constructor(ptr %0, ptr %1, ptr %2, ptr %3) {
  %range = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca ptr, align 8
  %super = alloca ptr, align 8
  %expression = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @ExpressionNode_constructor, ptr %super, align 8
  store ptr %1, ptr %expression, align 8
  store ptr %2, ptr %index, align 8
  store ptr %3, ptr %range, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ExpressionIndexNode, ptr %5, i32 0, i32 3
  %6 = load ptr, ptr %expression, align 8
  store ptr %6, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ExpressionIndexNode, ptr %7, i32 0, i32 4
  %8 = load ptr, ptr %index, align 8
  store ptr %8, ptr %memberidx1, align 8
  %9 = load ptr, ptr %super, align 8
  %10 = load ptr, ptr %range, align 8
  call void %9(ptr %0, i64 14, ptr %10)
  ret void
}

define ptr @Parser_parse_index_expression(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %expression = alloca ptr, align 8
  %index_expression = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %expression, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = call ptr @Parser_eat(ptr %3, i64 29)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ExpressionIndexNode, ptr null, i32 1) to i32))
  %6 = load ptr, ptr %expression, align 8
  %7 = load ptr, ptr %this, align 8
  %8 = call ptr @Parser_parse_expression(ptr %7)
  %9 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %9, i32 0, i32 2
  %10 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx1, align 8
  call void @ExpressionIndexNode_constructor(ptr %5, ptr %6, ptr %8, ptr %11)
  store ptr %5, ptr %index_expression, align 8
  %12 = load ptr, ptr %index_expression, align 8
  %memberidx2 = getelementptr inbounds %Node, ptr %12, i32 0, i32 0
  %13 = load ptr, ptr %expression, align 8
  %memberidx3 = getelementptr inbounds %Node, ptr %13, i32 0, i32 0
  %14 = load ptr, ptr %memberidx3, align 8
  %15 = load ptr, ptr %this, align 8
  %16 = call ptr @Parser_eat(ptr %15, i64 30)
  %memberidx4 = getelementptr inbounds %Token, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx4, align 8
  %18 = call ptr @FloRange_merge(ptr %14, ptr %17)
  store ptr %18, ptr %memberidx2, align 8
  %19 = load ptr, ptr %index_expression, align 8
  ret ptr %19
}

define void @CallExpressionNode_constructor(ptr %0, ptr %1, ptr %2) {
  %range = alloca ptr, align 8
  %this = alloca ptr, align 8
  %callee = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @ExpressionNode_constructor, ptr %super, align 8
  store ptr %1, ptr %callee, align 8
  store ptr %2, ptr %range, align 8
  %4 = load ptr, ptr %super, align 8
  %5 = load ptr, ptr %range, align 8
  call void %4(ptr %0, i64 15, ptr %5)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CallExpressionNode, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %callee, align 8
  store ptr %7, ptr %memberidx, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %CallExpressionNode, ptr %8, i32 0, i32 4
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ExpressionNode_, ptr null, i32 1) to i32))
  call void @Array_ExpressionNode__constructor(ptr %9, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %9, i32 0, i32 1
  %10 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_ExpressionNode_, ptr %9, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  store ptr %9, ptr %memberidx1, align 8
  ret void
}

define ptr @Parser_parse_call_expression(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %expression = alloca ptr, align 8
  %call_expression = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %expression, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = call ptr @Parser_eat(ptr %3, i64 25)
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%CallExpressionNode, ptr null, i32 1) to i32))
  %6 = load ptr, ptr %expression, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %7, i32 0, i32 2
  %8 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  call void @CallExpressionNode_constructor(ptr %5, ptr %6, ptr %9)
  store ptr %5, ptr %call_expression, align 8
  %10 = load ptr, ptr %this, align 8
  %11 = load ptr, ptr %call_expression, align 8
  %memberidx2 = getelementptr inbounds %CallExpressionNode, ptr %11, i32 0, i32 4
  %12 = load ptr, ptr %memberidx2, align 8
  call void @Parser_parse_expression_list(ptr %10, ptr %12, i64 26)
  %13 = load ptr, ptr %call_expression, align 8
  %memberidx3 = getelementptr inbounds %Node, ptr %13, i32 0, i32 0
  %14 = load ptr, ptr %expression, align 8
  %memberidx4 = getelementptr inbounds %Node, ptr %14, i32 0, i32 0
  %15 = load ptr, ptr %memberidx4, align 8
  %16 = load ptr, ptr %this, align 8
  %17 = call ptr @Parser_eat(ptr %16, i64 26)
  %memberidx5 = getelementptr inbounds %Token, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = call ptr @FloRange_merge(ptr %15, ptr %18)
  store ptr %19, ptr %memberidx3, align 8
  %20 = load ptr, ptr %call_expression, align 8
  ret ptr %20
}

define void @MemberExpressionNode_constructor(ptr %0, ptr %1, ptr %2, ptr %3) {
  %range = alloca ptr, align 8
  %member = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  %expression = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @ExpressionNode_constructor, ptr %super, align 8
  store ptr %1, ptr %expression, align 8
  store ptr %2, ptr %member, align 8
  store ptr %3, ptr %range, align 8
  %5 = load ptr, ptr %super, align 8
  %6 = load ptr, ptr %range, align 8
  call void %5(ptr %0, i64 13, ptr %6)
  %7 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MemberExpressionNode, ptr %7, i32 0, i32 3
  %8 = load ptr, ptr %expression, align 8
  store ptr %8, ptr %memberidx, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MemberExpressionNode, ptr %9, i32 0, i32 4
  %10 = load ptr, ptr %member, align 8
  store ptr %10, ptr %memberidx1, align 8
  ret void
}

define ptr @Parser_parse_member_expression(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %expression = alloca ptr, align 8
  %identifier_tok = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %expression, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = call ptr @Parser_eat(ptr %3, i64 50)
  %5 = load ptr, ptr %this, align 8
  %6 = call ptr @Parser_eat(ptr %5, i64 53)
  store ptr %6, ptr %identifier_tok, align 8
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MemberExpressionNode, ptr null, i32 1) to i32))
  %8 = load ptr, ptr %expression, align 8
  %9 = load ptr, ptr %identifier_tok, align 8
  %10 = load ptr, ptr %expression, align 8
  %memberidx = getelementptr inbounds %Node, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %memberidx, align 8
  %12 = load ptr, ptr %identifier_tok, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx1, align 8
  %14 = call ptr @FloRange_merge(ptr %11, ptr %13)
  call void @MemberExpressionNode_constructor(ptr %7, ptr %8, ptr %9, ptr %14)
  ret ptr %7
}

define ptr @Parser_parse_term_expression(ptr %0) {
  %this = alloca ptr, align 8
  %op = alloca i64, align 8
  %unary = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = call ptr @Parser_parse_unary_expression_pre(ptr %2)
  store ptr %3, ptr %unary, align 8
  %4 = load ptr, ptr %this, align 8
  %5 = call i64 @Parser_is_term_expr_op(ptr %4)
  store i64 %5, ptr %op, align 4
  %6 = load i64, ptr %op, align 4
  %7 = icmp ne i64 %6, 0
  %8 = load ptr, ptr %this, align 8
  %9 = call i1 @Parser_can_parse(ptr %8)
  %10 = and i1 %7, %9
  br i1 %10, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %1
  %11 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %11)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpressionNode, ptr null, i32 1) to i32))
  %13 = load ptr, ptr %unary, align 8
  %14 = load i64, ptr %op, align 4
  %15 = load ptr, ptr %this, align 8
  %16 = call ptr @Parser_parse_unary_expression_pre(ptr %15)
  call void @BinaryExpressionNode_constructor(ptr %12, ptr %13, i64 %14, ptr %16)
  store ptr %12, ptr %unary, align 8
  %17 = load ptr, ptr %this, align 8
  %18 = call i64 @Parser_is_term_expr_op(ptr %17)
  store i64 %18, ptr %op, align 4
  %19 = load i64, ptr %op, align 4
  %20 = icmp ne i64 %19, 0
  %21 = load ptr, ptr %this, align 8
  %22 = call i1 @Parser_can_parse(ptr %21)
  %23 = and i1 %20, %22
  br i1 %23, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %1
  %24 = load ptr, ptr %unary, align 8
  ret ptr %24
}

define ptr @Parser_parse_arithmetic_expression(ptr %0) {
  %this = alloca ptr, align 8
  %op = alloca i64, align 8
  %term = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = call ptr @Parser_parse_term_expression(ptr %2)
  store ptr %3, ptr %term, align 8
  %4 = load ptr, ptr %this, align 8
  %5 = call i64 @Parser_is_arith_expr_op(ptr %4)
  store i64 %5, ptr %op, align 4
  %6 = load i64, ptr %op, align 4
  %7 = icmp ne i64 %6, 0
  %8 = load ptr, ptr %this, align 8
  %9 = call i1 @Parser_can_parse(ptr %8)
  %10 = and i1 %7, %9
  br i1 %10, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %1
  %11 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %11)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpressionNode, ptr null, i32 1) to i32))
  %13 = load ptr, ptr %term, align 8
  %14 = load i64, ptr %op, align 4
  %15 = load ptr, ptr %this, align 8
  %16 = call ptr @Parser_parse_term_expression(ptr %15)
  call void @BinaryExpressionNode_constructor(ptr %12, ptr %13, i64 %14, ptr %16)
  store ptr %12, ptr %term, align 8
  %17 = load ptr, ptr %this, align 8
  %18 = call i64 @Parser_is_arith_expr_op(ptr %17)
  store i64 %18, ptr %op, align 4
  %19 = load i64, ptr %op, align 4
  %20 = icmp ne i64 %19, 0
  %21 = load ptr, ptr %this, align 8
  %22 = call i1 @Parser_can_parse(ptr %21)
  %23 = and i1 %20, %22
  br i1 %23, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %1
  %24 = load ptr, ptr %term, align 8
  ret ptr %24
}

define ptr @Parser_parse_bitshift_expression(ptr %0) {
  %this = alloca ptr, align 8
  %op = alloca i64, align 8
  %arith = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = call ptr @Parser_parse_arithmetic_expression(ptr %2)
  store ptr %3, ptr %arith, align 8
  %4 = load ptr, ptr %this, align 8
  %5 = call i64 @Parser_is_bitshift_expr_op(ptr %4)
  store i64 %5, ptr %op, align 4
  %6 = load i64, ptr %op, align 4
  %7 = icmp ne i64 %6, 0
  %8 = load ptr, ptr %this, align 8
  %9 = call i1 @Parser_can_parse(ptr %8)
  %10 = and i1 %7, %9
  br i1 %10, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %1
  %11 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %11)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpressionNode, ptr null, i32 1) to i32))
  %13 = load ptr, ptr %arith, align 8
  %14 = load i64, ptr %op, align 4
  %15 = load ptr, ptr %this, align 8
  %16 = call ptr @Parser_parse_arithmetic_expression(ptr %15)
  call void @BinaryExpressionNode_constructor(ptr %12, ptr %13, i64 %14, ptr %16)
  store ptr %12, ptr %arith, align 8
  %17 = load ptr, ptr %this, align 8
  %18 = call i64 @Parser_is_bitshift_expr_op(ptr %17)
  store i64 %18, ptr %op, align 4
  %19 = load i64, ptr %op, align 4
  %20 = icmp ne i64 %19, 0
  %21 = load ptr, ptr %this, align 8
  %22 = call i1 @Parser_can_parse(ptr %21)
  %23 = and i1 %20, %22
  br i1 %23, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %1
  %24 = load ptr, ptr %arith, align 8
  ret ptr %24
}

define ptr @Parser_parse_comparison_expression(ptr %0) {
  %this = alloca ptr, align 8
  %op = alloca i64, align 8
  %bit = alloca ptr, align 8
  %start_range = alloca ptr, align 8
  %comp_val = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %2, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  store ptr %4, ptr %start_range, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Parser, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Token, ptr %6, i32 0, i32 0
  %7 = load i64, ptr %memberidx3, align 4
  %8 = icmp eq i64 %7, 47
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %9 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %9)
  %10 = load ptr, ptr %this, align 8
  %11 = call ptr @Parser_parse_comparison_expression(ptr %10)
  store ptr %11, ptr %comp_val, align 8
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%UnaryExpressionNode, ptr null, i32 1) to i32))
  %13 = load ptr, ptr %comp_val, align 8
  %14 = load ptr, ptr %start_range, align 8
  %15 = load ptr, ptr %comp_val, align 8
  %memberidx4 = getelementptr inbounds %Node, ptr %15, i32 0, i32 0
  %16 = load ptr, ptr %memberidx4, align 8
  %17 = call ptr @FloRange_merge(ptr %14, ptr %16)
  call void @UnaryExpressionNode_constructor(ptr %12, i64 7, ptr %13, ptr %17)
  ret ptr %12

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %18 = load ptr, ptr %this, align 8
  %19 = call ptr @Parser_parse_bitshift_expression(ptr %18)
  store ptr %19, ptr %bit, align 8
  %20 = load ptr, ptr %this, align 8
  %21 = call i64 @Parser_is_comp_expr_op(ptr %20)
  store i64 %21, ptr %op, align 4
  %22 = load i64, ptr %op, align 4
  %23 = icmp ne i64 %22, 0
  %24 = load ptr, ptr %this, align 8
  %25 = call i1 @Parser_can_parse(ptr %24)
  %26 = and i1 %23, %25
  br i1 %26, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %ifend
  %27 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %27)
  %28 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpressionNode, ptr null, i32 1) to i32))
  %29 = load ptr, ptr %bit, align 8
  %30 = load i64, ptr %op, align 4
  %31 = load ptr, ptr %this, align 8
  %32 = call ptr @Parser_parse_bitshift_expression(ptr %31)
  call void @BinaryExpressionNode_constructor(ptr %28, ptr %29, i64 %30, ptr %32)
  store ptr %28, ptr %bit, align 8
  %33 = load ptr, ptr %this, align 8
  %34 = call i64 @Parser_is_comp_expr_op(ptr %33)
  store i64 %34, ptr %op, align 4
  %35 = load i64, ptr %op, align 4
  %36 = icmp ne i64 %35, 0
  %37 = load ptr, ptr %this, align 8
  %38 = call i1 @Parser_can_parse(ptr %37)
  %39 = and i1 %36, %38
  br i1 %39, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %ifend
  %40 = load ptr, ptr %bit, align 8
  ret ptr %40
}

define ptr @Parser_parse_bit_expression(ptr %0) {
  %this = alloca ptr, align 8
  %op = alloca i64, align 8
  %cmp = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = call ptr @Parser_parse_comparison_expression(ptr %2)
  store ptr %3, ptr %cmp, align 8
  %4 = load ptr, ptr %this, align 8
  %5 = call i64 @Parser_is_logic_expr_op(ptr %4)
  store i64 %5, ptr %op, align 4
  %6 = load i64, ptr %op, align 4
  %7 = icmp ne i64 %6, 0
  %8 = load ptr, ptr %this, align 8
  %9 = call i1 @Parser_can_parse(ptr %8)
  %10 = and i1 %7, %9
  br i1 %10, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %1
  %11 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %11)
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpressionNode, ptr null, i32 1) to i32))
  %13 = load ptr, ptr %cmp, align 8
  %14 = load i64, ptr %op, align 4
  %15 = load ptr, ptr %this, align 8
  %16 = call ptr @Parser_parse_comparison_expression(ptr %15)
  call void @BinaryExpressionNode_constructor(ptr %12, ptr %13, i64 %14, ptr %16)
  store ptr %12, ptr %cmp, align 8
  %17 = load ptr, ptr %this, align 8
  %18 = call i64 @Parser_is_logic_expr_op(ptr %17)
  store i64 %18, ptr %op, align 4
  %19 = load i64, ptr %op, align 4
  %20 = icmp ne i64 %19, 0
  %21 = load ptr, ptr %this, align 8
  %22 = call i1 @Parser_can_parse(ptr %21)
  %23 = and i1 %20, %22
  br i1 %23, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %1
  %24 = load ptr, ptr %cmp, align 8
  ret ptr %24
}

define ptr @Parser_parse_range_expression(ptr %0) {
  %this = alloca ptr, align 8
  %left = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = call ptr @Parser_parse_bit_expression(ptr %2)
  store ptr %3, ptr %left, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %5, i32 0, i32 0
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %6, 52
  %8 = load ptr, ptr %this, align 8
  %9 = call i1 @Parser_can_parse(ptr %8)
  %10 = xor i1 %9, true
  %11 = or i1 %7, %10
  br i1 %11, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %12 = load ptr, ptr %left, align 8
  ret ptr %12

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %13 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %13)
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpressionNode, ptr null, i32 1) to i32))
  %15 = load ptr, ptr %left, align 8
  %16 = load ptr, ptr %this, align 8
  %17 = call ptr @Parser_parse_expression(ptr %16)
  call void @BinaryExpressionNode_constructor(ptr %14, ptr %15, i64 31, ptr %17)
  ret ptr %14
}

define ptr @Parser_parse_typecast_expression(ptr %0) {
  %this = alloca ptr, align 8
  %left = alloca ptr, align 8
  %node = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = call ptr @Parser_parse_range_expression(ptr %2)
  store ptr %3, ptr %left, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %5, i32 0, i32 0
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %6, 74
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %8 = load ptr, ptr %left, align 8
  ret ptr %8

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %9 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %9)
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%TypeCastExpressionNode, ptr null, i32 1) to i32))
  %11 = load ptr, ptr %left, align 8
  %12 = load ptr, ptr %this, align 8
  %13 = call ptr @Parser_parse_type(ptr %12)
  call void @TypeCastExpressionNode_constructor(ptr %10, ptr %11, ptr %13)
  store ptr %10, ptr %node, align 8
  %14 = load ptr, ptr %node, align 8
  ret ptr %14
}

define ptr @Parser_parse_ternary_expression(ptr %0) {
  %this = alloca ptr, align 8
  %cond = alloca ptr, align 8
  %is_true = alloca ptr, align 8
  %is_false = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = call ptr @Parser_parse_typecast_expression(ptr %2)
  store ptr %3, ptr %cond, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %5, i32 0, i32 0
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %6, 36
  %8 = load ptr, ptr %this, align 8
  %9 = call i1 @Parser_can_parse(ptr %8)
  %10 = xor i1 %9, true
  %11 = or i1 %7, %10
  br i1 %11, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %12 = load ptr, ptr %cond, align 8
  ret ptr %12

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %13 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %13)
  %14 = load ptr, ptr %this, align 8
  %15 = call ptr @Parser_parse_expression(ptr %14)
  store ptr %15, ptr %is_true, align 8
  %16 = load ptr, ptr %this, align 8
  %17 = call ptr @Parser_eat(ptr %16, i64 1)
  %18 = load ptr, ptr %this, align 8
  %19 = call ptr @Parser_parse_expression(ptr %18)
  store ptr %19, ptr %is_false, align 8
  %20 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%TernaryExpressionNode, ptr null, i32 1) to i32))
  %21 = load ptr, ptr %cond, align 8
  %22 = load ptr, ptr %is_true, align 8
  %23 = load ptr, ptr %is_false, align 8
  call void @TernaryExpressionNode_constructor(ptr %20, ptr %21, ptr %22, ptr %23)
  ret ptr %20
}

define ptr @Parser_parse_match_expression(ptr %0) {
  %this = alloca ptr, align 8
  %match_expression = alloca ptr, align 8
  %block = alloca ptr, align 8
  %condition = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MatchExpressionNode, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %4 = call ptr @Parser_eat(ptr %3, i64 57)
  %memberidx = getelementptr inbounds %Token, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  call void @MatchExpressionNode_constructor(ptr %2, ptr %5)
  store ptr %2, ptr %match_expression, align 8
  %6 = load ptr, ptr %match_expression, align 8
  %memberidx1 = getelementptr inbounds %MatchExpressionNode, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %this, align 8
  %8 = call ptr @Parser_parse_expression(ptr %7)
  store ptr %8, ptr %memberidx1, align 8
  %9 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %9)
  %10 = load ptr, ptr %this, align 8
  %11 = call ptr @Parser_eat(ptr %10, i64 27)
  %12 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %12)
  %13 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Parser, ptr %13, i32 0, i32 2
  %14 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Token, ptr %14, i32 0, i32 0
  %15 = load i64, ptr %memberidx3, align 4
  %16 = icmp ne i64 %15, 28
  %17 = load ptr, ptr %this, align 8
  %18 = call i1 @Parser_can_parse(ptr %17)
  %19 = and i1 %16, %18
  br i1 %19, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %1
  %20 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Parser, ptr %20, i32 0, i32 2
  %21 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Token, ptr %21, i32 0, i32 0
  %22 = load i64, ptr %memberidx5, align 4
  %23 = icmp eq i64 %22, 58
  br i1 %23, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %1
  %24 = load ptr, ptr %this, align 8
  %25 = call ptr @Parser_eat(ptr %24, i64 28)
  %26 = load ptr, ptr %match_expression, align 8
  ret ptr %26

if.entry:                                         ; preds = %while.entry
  %27 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %27)
  %28 = load ptr, ptr %this, align 8
  %29 = call ptr @Parser_eat(ptr %28, i64 1)
  %30 = load ptr, ptr %match_expression, align 8
  %memberidx6 = getelementptr inbounds %MatchExpressionNode, ptr %30, i32 0, i32 5
  %31 = load ptr, ptr %this, align 8
  %32 = call ptr @Parser_parse_block(ptr %31)
  store ptr %32, ptr %memberidx6, align 8
  %33 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %33)
  br label %ifend

else:                                             ; preds = %while.entry
  %34 = load ptr, ptr %this, align 8
  %35 = call ptr @Parser_parse_expression(ptr %34)
  store ptr %35, ptr %condition, align 8
  %36 = load ptr, ptr %this, align 8
  %37 = call ptr @Parser_eat(ptr %36, i64 1)
  %38 = load ptr, ptr %this, align 8
  %39 = call ptr @Parser_parse_block(ptr %38)
  store ptr %39, ptr %block, align 8
  %40 = load ptr, ptr %this, align 8
  call void @Parser_new_lines(ptr %40)
  %41 = load ptr, ptr %match_expression, align 8
  %memberidx7 = getelementptr inbounds %MatchExpressionNode, ptr %41, i32 0, i32 4
  %42 = load ptr, ptr %memberidx7, align 8
  %43 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MatchExpressionCaseNode, ptr null, i32 1) to i32))
  %44 = load ptr, ptr %condition, align 8
  %45 = load ptr, ptr %block, align 8
  call void @MatchExpressionCaseNode_constructor(ptr %43, ptr %44, ptr %45)
  call void @Array_MatchExpressionCaseNode____sl__(ptr %42, ptr %43)
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %46 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Parser, ptr %46, i32 0, i32 2
  %47 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Token, ptr %47, i32 0, i32 0
  %48 = load i64, ptr %memberidx9, align 4
  %49 = icmp ne i64 %48, 28
  %50 = load ptr, ptr %this, align 8
  %51 = call i1 @Parser_can_parse(ptr %50)
  %52 = and i1 %49, %51
  br i1 %52, label %while.entry, label %while.end
}

define ptr @Parser_parse_expression(ptr %0) {
  %this = alloca ptr, align 8
  %left = alloca ptr, align 8
  %op = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %2, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 0
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp eq i64 %4, 57
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %6 = load ptr, ptr %this, align 8
  %7 = call ptr @Parser_parse_match_expression(ptr %6)
  ret ptr %7

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %8 = load ptr, ptr %this, align 8
  %9 = call ptr @Parser_parse_ternary_expression(ptr %8)
  store ptr %9, ptr %left, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Parser, ptr %10, i32 0, i32 2
  %11 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Token, ptr %11, i32 0, i32 0
  %12 = load i64, ptr %memberidx3, align 4
  %13 = icmp eq i64 %12, 69
  %14 = load ptr, ptr %this, align 8
  %15 = call i1 @Parser_can_parse(ptr %14)
  %16 = and i1 %13, %15
  br i1 %16, label %if.entry4, label %else5

if.entry4:                                        ; preds = %ifend
  %17 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %17)
  %18 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpressionNode, ptr null, i32 1) to i32))
  %19 = load ptr, ptr %left, align 8
  %20 = load ptr, ptr %this, align 8
  %21 = call ptr @Parser_parse_expression(ptr %20)
  call void @BinaryExpressionNode_constructor(ptr %18, ptr %19, i64 18, ptr %21)
  ret ptr %18

else5:                                            ; preds = %ifend
  br label %ifend6

ifend6:                                           ; preds = %else5
  %22 = load ptr, ptr %this, align 8
  %23 = call i64 @Parser_is_assign_op(ptr %22)
  store i64 %23, ptr %op, align 4
  %24 = load i64, ptr %op, align 4
  %25 = icmp eq i64 %24, 0
  %26 = load ptr, ptr %this, align 8
  %27 = call i1 @Parser_can_parse(ptr %26)
  %28 = xor i1 %27, true
  %29 = or i1 %25, %28
  br i1 %29, label %if.entry7, label %else8

if.entry7:                                        ; preds = %ifend6
  %30 = load ptr, ptr %left, align 8
  ret ptr %30

else8:                                            ; preds = %ifend6
  br label %ifend9

ifend9:                                           ; preds = %else8
  %31 = load ptr, ptr %this, align 8
  call void @Parser_advance(ptr %31)
  %32 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpressionNode, ptr null, i32 1) to i32))
  %33 = load ptr, ptr %left, align 8
  %34 = load i64, ptr %op, align 4
  %35 = load ptr, ptr %this, align 8
  %36 = call ptr @Parser_parse_expression(ptr %35)
  call void @BinaryExpressionNode_constructor(ptr %32, ptr %33, i64 %34, ptr %36)
  ret ptr %32
}

define void @Parser_error(ptr %0, ptr %1) {
  %message = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %message, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloError, ptr null, i32 1) to i32))
  %6 = load ptr, ptr %message, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Parser, ptr %7, i32 0, i32 2
  %8 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Token, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  call void @FloError_constructor(ptr %5, i64 2, ptr %6, ptr %9)
  call void @Array_FloError____sl__(ptr %4, ptr %5)
  ret void
}

define i1 @Parser_can_parse(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %2, i32 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i32 0, i32 0
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp ne i64 %4, 46
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Parser, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_FloError_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx3, align 4
  %9 = icmp eq i64 %8, 0
  %10 = and i1 %5, %9
  ret i1 %10
}

define void @Parser_constructor(ptr %0, ptr %1, ptr %2) {
  %errors = alloca ptr, align 8
  %this = alloca ptr, align 8
  %tokens = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %tokens, align 8
  store ptr %2, ptr %errors, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %4, i32 0, i32 0
  %5 = load ptr, ptr %tokens, align 8
  store ptr %5, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Parser, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %errors, align 8
  store ptr %7, ptr %memberidx1, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Parser, ptr %8, i32 0, i32 3
  store i64 -1, ptr %memberidx2, align 4
  ret void
}

define void @FunctionTypeNode_constructor(ptr %0, ptr %1, ptr %2) {
  %args = alloca ptr, align 8
  %range = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @TypeNode_constructor, ptr %super, align 8
  store ptr %1, ptr %args, align 8
  store ptr %2, ptr %range, align 8
  %4 = load ptr, ptr %super, align 8
  %5 = load ptr, ptr %range, align 8
  call void %4(ptr %0, i64 16, ptr %5)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %FunctionTypeNode, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %args, align 8
  store ptr %7, ptr %memberidx, align 8
  ret void
}

define void @TupleTypeNode_constructor(ptr %0, ptr %1, ptr %2) {
  %range = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  %element_types = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @TypeNode_constructor, ptr %super, align 8
  store ptr %1, ptr %element_types, align 8
  store ptr %2, ptr %range, align 8
  %4 = load ptr, ptr %super, align 8
  %5 = load ptr, ptr %range, align 8
  call void %4(ptr %0, i64 15, ptr %5)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TupleTypeNode, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %element_types, align 8
  store ptr %7, ptr %memberidx, align 8
  ret void
}

define void @ArrayTypeNode_constructor(ptr %0, ptr %1, ptr %2, ptr %3) {
  %range = alloca ptr, align 8
  %length = alloca ptr, align 8
  %element_type = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @TypeNode_constructor, ptr %super, align 8
  store ptr %1, ptr %element_type, align 8
  store ptr %2, ptr %length, align 8
  store ptr %3, ptr %range, align 8
  %5 = load ptr, ptr %super, align 8
  %6 = load ptr, ptr %range, align 8
  call void %5(ptr %0, i64 14, ptr %6)
  %7 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayTypeNode, ptr %7, i32 0, i32 2
  %8 = load ptr, ptr %element_type, align 8
  store ptr %8, ptr %memberidx, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayTypeNode, ptr %9, i32 0, i32 3
  %10 = load ptr, ptr %length, align 8
  store ptr %10, ptr %memberidx1, align 8
  ret void
}

define void @PointerTypeNode_constructor(ptr %0, ptr %1, ptr %2) {
  %range = alloca ptr, align 8
  %this = alloca ptr, align 8
  %pointee_type = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @TypeNode_constructor, ptr %super, align 8
  store ptr %1, ptr %pointee_type, align 8
  store ptr %2, ptr %range, align 8
  %4 = load ptr, ptr %super, align 8
  %5 = load ptr, ptr %range, align 8
  call void %4(ptr %0, i64 13, ptr %5)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %PointerTypeNode, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %pointee_type, align 8
  store ptr %7, ptr %memberidx, align 8
  ret void
}

define void @TupleExpressionNode_constructor(ptr %0, ptr %1) {
  %range = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @ExpressionNode_constructor, ptr %super, align 8
  store ptr %1, ptr %range, align 8
  %3 = load ptr, ptr %super, align 8
  %4 = load ptr, ptr %range, align 8
  call void %3(ptr %0, i64 7, ptr %4)
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TupleExpressionNode, ptr %5, i32 0, i32 3
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_ExpressionNode_, ptr null, i32 1) to i32))
  call void @Array_ExpressionNode__constructor(ptr %6, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx1 = getelementptr inbounds %Array_ExpressionNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %6, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  store ptr %6, ptr %memberidx, align 8
  ret void
}

define void @IntExpressionNode_constructor(ptr %0, ptr %1) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @ExpressionNode_constructor, ptr %super, align 8
  store ptr %1, ptr %value, align 8
  %3 = load ptr, ptr %super, align 8
  %4 = load ptr, ptr %value, align 8
  %memberidx = getelementptr inbounds %Token, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  call void %3(ptr %0, i64 0, ptr %5)
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %IntExpressionNode, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %value, align 8
  store ptr %7, ptr %memberidx1, align 8
  ret void
}

define void @FloatExpressionNode_constructor(ptr %0, ptr %1) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @ExpressionNode_constructor, ptr %super, align 8
  store ptr %1, ptr %value, align 8
  %3 = load ptr, ptr %super, align 8
  %4 = load ptr, ptr %value, align 8
  %memberidx = getelementptr inbounds %Token, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  call void %3(ptr %0, i64 1, ptr %5)
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %FloatExpressionNode, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %value, align 8
  store ptr %7, ptr %memberidx1, align 8
  ret void
}

define void @CharExpressionNode_constructor(ptr %0, ptr %1) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @ExpressionNode_constructor, ptr %super, align 8
  store ptr %1, ptr %value, align 8
  %3 = load ptr, ptr %super, align 8
  %4 = load ptr, ptr %value, align 8
  %memberidx = getelementptr inbounds %Token, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  call void %3(ptr %0, i64 3, ptr %5)
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %CharExpressionNode, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %value, align 8
  store ptr %7, ptr %memberidx1, align 8
  ret void
}

define void @VarAccessExpressionNode_constructor(ptr %0, ptr %1) {
  %name = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @ExpressionNode_constructor, ptr %super, align 8
  store ptr %1, ptr %name, align 8
  %3 = load ptr, ptr %super, align 8
  %4 = load ptr, ptr %name, align 8
  %memberidx = getelementptr inbounds %Token, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  call void %3(ptr %0, i64 8, ptr %5)
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %VarAccessExpressionNode, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %name, align 8
  store ptr %7, ptr %memberidx1, align 8
  ret void
}

define void @UnaryExpressionNode_constructor(ptr %0, i64 %1, ptr %2, ptr %3) {
  %range = alloca ptr, align 8
  %op = alloca i64, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  %expression = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @ExpressionNode_constructor, ptr %super, align 8
  store i64 %1, ptr %op, align 4
  store ptr %2, ptr %expression, align 8
  store ptr %3, ptr %range, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %UnaryExpressionNode, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %op, align 4
  store i64 %6, ptr %memberidx, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %UnaryExpressionNode, ptr %7, i32 0, i32 4
  %8 = load ptr, ptr %expression, align 8
  store ptr %8, ptr %memberidx1, align 8
  %9 = load ptr, ptr %super, align 8
  %10 = load ptr, ptr %range, align 8
  call void %9(ptr %0, i64 10, ptr %10)
  ret void
}

define void @BinaryExpressionNode_constructor(ptr %0, ptr %1, i64 %2, ptr %3) {
  %left = alloca ptr, align 8
  %right = alloca ptr, align 8
  %op = alloca i64, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @ExpressionNode_constructor, ptr %super, align 8
  store ptr %1, ptr %left, align 8
  store i64 %2, ptr %op, align 4
  store ptr %3, ptr %right, align 8
  %5 = load ptr, ptr %super, align 8
  %6 = load ptr, ptr %left, align 8
  %memberidx = getelementptr inbounds %Node, ptr %6, i32 0, i32 0
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load ptr, ptr %right, align 8
  %memberidx1 = getelementptr inbounds %Node, ptr %8, i32 0, i32 0
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = call ptr @FloRange_merge(ptr %7, ptr %9)
  call void %5(ptr %0, i64 9, ptr %10)
  %11 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %BinaryExpressionNode, ptr %11, i32 0, i32 3
  %12 = load ptr, ptr %left, align 8
  store ptr %12, ptr %memberidx2, align 8
  %13 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %BinaryExpressionNode, ptr %13, i32 0, i32 4
  %14 = load i64, ptr %op, align 4
  store i64 %14, ptr %memberidx3, align 4
  %15 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %BinaryExpressionNode, ptr %15, i32 0, i32 5
  %16 = load ptr, ptr %right, align 8
  store ptr %16, ptr %memberidx4, align 8
  ret void
}

define void @TypeCastExpressionNode_constructor(ptr %0, ptr %1, ptr %2) {
  %bound_type = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  %expression = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @ExpressionNode_constructor, ptr %super, align 8
  store ptr %1, ptr %expression, align 8
  store ptr %2, ptr %bound_type, align 8
  %4 = load ptr, ptr %super, align 8
  %5 = load ptr, ptr %expression, align 8
  %memberidx = getelementptr inbounds %Node, ptr %5, i32 0, i32 0
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %bound_type, align 8
  %memberidx1 = getelementptr inbounds %Node, ptr %7, i32 0, i32 0
  %8 = load ptr, ptr %memberidx1, align 8
  %9 = call ptr @FloRange_merge(ptr %6, ptr %8)
  call void %4(ptr %0, i64 11, ptr %9)
  %10 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %TypeCastExpressionNode, ptr %10, i32 0, i32 3
  %11 = load ptr, ptr %expression, align 8
  store ptr %11, ptr %memberidx2, align 8
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %TypeCastExpressionNode, ptr %12, i32 0, i32 4
  %13 = load ptr, ptr %bound_type, align 8
  store ptr %13, ptr %memberidx3, align 8
  ret void
}

define void @TernaryExpressionNode_constructor(ptr %0, ptr %1, ptr %2, ptr %3) {
  %cond = alloca ptr, align 8
  %is_true = alloca ptr, align 8
  %is_false = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @ExpressionNode_constructor, ptr %super, align 8
  store ptr %1, ptr %cond, align 8
  store ptr %2, ptr %is_true, align 8
  store ptr %3, ptr %is_false, align 8
  %5 = load ptr, ptr %super, align 8
  %6 = load ptr, ptr %cond, align 8
  %memberidx = getelementptr inbounds %Node, ptr %6, i32 0, i32 0
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load ptr, ptr %is_false, align 8
  %memberidx1 = getelementptr inbounds %Node, ptr %8, i32 0, i32 0
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = call ptr @FloRange_merge(ptr %7, ptr %9)
  call void %5(ptr %0, i64 16, ptr %10)
  %11 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %TernaryExpressionNode, ptr %11, i32 0, i32 3
  %12 = load ptr, ptr %cond, align 8
  store ptr %12, ptr %memberidx2, align 8
  %13 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %TernaryExpressionNode, ptr %13, i32 0, i32 4
  %14 = load ptr, ptr %is_true, align 8
  store ptr %14, ptr %memberidx3, align 8
  %15 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %TernaryExpressionNode, ptr %15, i32 0, i32 5
  %16 = load ptr, ptr %is_false, align 8
  store ptr %16, ptr %memberidx4, align 8
  %17 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Node, ptr %17, i32 0, i32 0
  %18 = load ptr, ptr %is_true, align 8
  %memberidx6 = getelementptr inbounds %Node, ptr %18, i32 0, i32 0
  %19 = load ptr, ptr %memberidx6, align 8
  %20 = load ptr, ptr %is_false, align 8
  %memberidx7 = getelementptr inbounds %Node, ptr %20, i32 0, i32 0
  %21 = load ptr, ptr %memberidx7, align 8
  %22 = call ptr @FloRange_merge(ptr %19, ptr %21)
  store ptr %22, ptr %memberidx5, align 8
  ret void
}

define void @MatchExpressionCaseNode_constructor(ptr %0, ptr %1, ptr %2) {
  %block = alloca ptr, align 8
  %this = alloca ptr, align 8
  %condition = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %condition, align 8
  store ptr %2, ptr %block, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MatchExpressionCaseNode, ptr %4, i32 0, i32 0
  %5 = load ptr, ptr %condition, align 8
  store ptr %5, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MatchExpressionCaseNode, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %block, align 8
  store ptr %7, ptr %memberidx1, align 8
  ret void
}

define ptr @Array_MatchExpressionCaseNode__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_MatchExpressionCaseNode__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_MatchExpressionCaseNode__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_MatchExpressionCaseNode____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_MatchExpressionCaseNode__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_MatchExpressionCaseNode____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_MatchExpressionCaseNode____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_MatchExpressionCaseNode_, ptr null, i32 1) to i32))
  call void @Array_MatchExpressionCaseNode__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_MatchExpressionCaseNode____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_MatchExpressionCaseNode____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_MatchExpressionCaseNode____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_MatchExpressionCaseNode__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_MatchExpressionCaseNode_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_MatchExpressionCaseNode_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_MatchExpressionCaseNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_MatchExpressionCaseNode_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_MatchExpressionCaseNode_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_MatchExpressionCaseNode_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_MatchExpressionCaseNode__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_MatchExpressionCaseNode_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_MatchExpressionCaseNode_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_MatchExpressionCaseNode_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_MatchExpressionCaseNode_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_MatchExpressionCaseNode____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_MatchExpressionCaseNode_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_MatchExpressionCaseNode__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_MatchExpressionCaseNode____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_MatchExpressionCaseNode____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_MatchExpressionCaseNode____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_MatchExpressionCaseNode____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_MatchExpressionCaseNode____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_MatchExpressionCaseNode____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_MatchExpressionCaseNode____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_MatchExpressionCaseNode__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_MatchExpressionCaseNode__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_MatchExpressionCaseNode__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_MatchExpressionCaseNode_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @MatchExpressionNode_constructor(ptr %0, ptr %1) {
  %range = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @ExpressionNode_constructor, ptr %super, align 8
  store ptr %1, ptr %range, align 8
  %3 = load ptr, ptr %super, align 8
  %4 = load ptr, ptr %range, align 8
  call void %3(ptr %0, i64 17, ptr %4)
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MatchExpressionNode, ptr %5, i32 0, i32 4
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_MatchExpressionCaseNode_, ptr null, i32 1) to i32))
  call void @Array_MatchExpressionCaseNode__constructor(ptr %6, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx1 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_MatchExpressionCaseNode_, ptr %6, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  store ptr %6, ptr %memberidx, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %MatchExpressionNode, ptr %8, i32 0, i32 5
  store ptr null, ptr %memberidx3, align 8
  ret void
}

define i1 @tok_is_type_id(ptr %0) {
  %token = alloca ptr, align 8
  store ptr %0, ptr %token, align 8
  %2 = load ptr, ptr %token, align 8
  %memberidx = getelementptr inbounds %Token, ptr %2, i32 0, i32 0
  %3 = load i64, ptr %memberidx, align 4
  %4 = icmp eq i64 %3, 53
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %5 = load ptr, ptr %token, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = call ptr @string_from_bytes(ptr @303, i64 4)
  %8 = call i1 @string___eq__(ptr %6, ptr %7)
  ret i1 %8

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  ret i1 false
}

define ptr @TypeChecker_check(ptr %0, ptr %1, ptr %2) {
  %compiler = alloca ptr, align 8
  %filename = alloca ptr, align 8
  %module_ast = alloca ptr, align 8
  %typechecker = alloca ptr, align 8
  store ptr %0, ptr %module_ast, align 8
  store ptr %1, ptr %compiler, align 8
  store ptr %2, ptr %filename, align 8
  %4 = alloca %TypeChecker, align 8
  %5 = load ptr, ptr %compiler, align 8
  call void @TypeChecker_constructor(ptr %4, ptr %5)
  store ptr %4, ptr %typechecker, align 8
  %6 = load ptr, ptr %typechecker, align 8
  call void @TypeChecker_load_generic_module(ptr %6)
  %7 = load ptr, ptr %typechecker, align 8
  call void @TypeChecker_load_builtins_module(ptr %7)
  %8 = load ptr, ptr %typechecker, align 8
  call void @TypeChecker_switch_to_generic_module(ptr %8)
  %9 = load ptr, ptr %typechecker, align 8
  %10 = load ptr, ptr %typechecker, align 8
  %11 = call ptr @TypeChecker_get_module(ptr %10, i64 1)
  call void @TypeChecker_import_all_from_module(ptr %9, ptr %11)
  %12 = load ptr, ptr %typechecker, align 8
  %13 = call i1 @TypeChecker_has_errored(ptr %12)
  br i1 %13, label %if.entry, label %else

if.entry:                                         ; preds = %3
  ret ptr null

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %14 = load ptr, ptr %typechecker, align 8
  %15 = load ptr, ptr %module_ast, align 8
  %16 = load ptr, ptr %filename, align 8
  %17 = call ptr @TypeChecker_check_module(ptr %14, ptr %15, ptr %16)
  %18 = load ptr, ptr %typechecker, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %18, i32 0, i32 0
  %19 = load ptr, ptr %memberidx, align 8
  ret ptr %19
}

define void @TypeChecker_load_builtins_module(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %3, i32 0, i32 5
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Compiler, ptr %4, i32 0, i32 4
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr @TypeChecker_lex_and_parse_typecheck_file(ptr %2, ptr %5, ptr null)
  ret void
}

define void @TypeChecker_load_generic_module(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %2, i32 0, i32 5
  %3 = load ptr, ptr %memberidx, align 8
  %4 = getelementptr inbounds %Compiler, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx1 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = call ptr @string_from_bytes(ptr @341, i64 12)
  %8 = call ptr %6(ptr %3, ptr %7)
  %9 = load ptr, ptr %this, align 8
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ModuleAST, ptr null, i32 1) to i32))
  call void @ModuleAST_constructor(ptr %10)
  %11 = call ptr @string_from_bytes(ptr @341, i64 12)
  %12 = call ptr @TypeChecker_check_module(ptr %9, ptr %10, ptr %11)
  ret void
}

define void @TypeChecker_switch_to_generic_module(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %2, i32 0, i32 4
  %3 = load ptr, ptr %this, align 8
  %4 = call ptr @TypeChecker_get_module(ptr %3, i64 0)
  %memberidx1 = getelementptr inbounds %Module, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  store ptr %5, ptr %memberidx, align 8
  ret void
}

define ptr @TypeChecker_check_module(ptr %0, ptr %1, ptr %2) {
  %filename = alloca ptr, align 8
  %this = alloca ptr, align 8
  %module_ast = alloca ptr, align 8
  %prev_scope = alloca ptr, align 8
  %module_scope = alloca ptr, align 8
  %current_module_id = alloca i64, align 8
  %module = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %module_import = alloca ptr, align 8
  %tmp_it1 = alloca ptr, align 8
  %enum_ = alloca ptr, align 8
  %class_ = alloca ptr, align 8
  %tmp_it2 = alloca ptr, align 8
  %alias_name = alloca ptr, align 8
  %ty = alloca ptr, align 8
  %type_alias_node = alloca ptr, align 8
  %tmp_it3 = alloca ptr, align 8
  %identifer_tok = alloca ptr, align 8
  %global_const = alloca ptr, align 8
  %tmp_it4 = alloca ptr, align 8
  %tmp_it5 = alloca ptr, align 8
  %global_var = alloca ptr, align 8
  %tmp_it6 = alloca ptr, align 8
  %function = alloca ptr, align 8
  %i = alloca i64, align 8
  %class_7 = alloca ptr, align 8
  %tmp_it8 = alloca ptr, align 8
  %i9 = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %module_ast, align 8
  store ptr %2, ptr %filename, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %4, i32 0, i32 7
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %TypeChecker, ptr %5, i32 0, i32 4
  %6 = load ptr, ptr %memberidx10, align 8
  store ptr %6, ptr %prev_scope, align 8
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Module, ptr null, i32 1) to i32))
  %8 = load ptr, ptr %filename, align 8
  call void @Module_constructor(ptr %7, ptr %8)
  store ptr %7, ptr %module, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx11 = getelementptr inbounds %TypeChecker, ptr %9, i32 0, i32 0
  %10 = load ptr, ptr %memberidx11, align 8
  %memberidx12 = getelementptr inbounds %Program, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx12, align 8
  %memberidx13 = getelementptr inbounds %Array_Module_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx13, align 4
  store i64 %12, ptr %current_module_id, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx14 = getelementptr inbounds %TypeChecker, ptr %13, i32 0, i32 0
  %14 = load ptr, ptr %memberidx14, align 8
  %memberidx15 = getelementptr inbounds %Program, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx15, align 8
  %16 = load ptr, ptr %module, align 8
  call void @Array_Module____sl__(ptr %15, ptr %16)
  %17 = load ptr, ptr %this, align 8
  %18 = load i64, ptr %current_module_id, align 4
  %19 = call ptr @TypeChecker_create_scope(ptr %17, i64 %18)
  store ptr %19, ptr %module_scope, align 8
  %20 = load ptr, ptr %module, align 8
  %memberidx16 = getelementptr inbounds %Module, ptr %20, i32 0, i32 5
  %21 = load ptr, ptr %module_scope, align 8
  %memberidx17 = getelementptr inbounds %Scope, ptr %21, i32 0, i32 0
  %22 = load ptr, ptr %memberidx17, align 8
  store ptr %22, ptr %memberidx16, align 8
  %23 = load ptr, ptr %module_scope, align 8
  %memberidx18 = getelementptr inbounds %Scope, ptr %23, i32 0, i32 1
  %24 = load ptr, ptr %memberidx18, align 8
  %25 = call ptr @string_from_bytes(ptr @342, i64 4)
  call void @Map_string_VarId____setitem__(ptr %24, ptr %25, ptr null)
  %26 = load ptr, ptr %module_scope, align 8
  %memberidx19 = getelementptr inbounds %Scope, ptr %26, i32 0, i32 1
  %27 = load ptr, ptr %memberidx19, align 8
  %28 = call ptr @string_from_bytes(ptr @343, i64 5)
  call void @Map_string_VarId____setitem__(ptr %27, ptr %28, ptr null)
  %29 = load ptr, ptr %module_scope, align 8
  %memberidx20 = getelementptr inbounds %Scope, ptr %29, i32 0, i32 1
  %30 = load ptr, ptr %memberidx20, align 8
  %31 = call ptr @string_from_bytes(ptr @344, i64 4)
  call void @Map_string_VarId____setitem__(ptr %30, ptr %31, ptr null)
  %32 = load ptr, ptr %this, align 8
  %memberidx21 = getelementptr inbounds %TypeChecker, ptr %32, i32 0, i32 4
  %33 = load ptr, ptr %module_scope, align 8
  %memberidx22 = getelementptr inbounds %Scope, ptr %33, i32 0, i32 0
  %34 = load ptr, ptr %memberidx22, align 8
  store ptr %34, ptr %memberidx21, align 8
  %35 = load ptr, ptr %this, align 8
  %memberidx23 = getelementptr inbounds %TypeChecker, ptr %35, i32 0, i32 3
  store ptr null, ptr %memberidx23, align 8
  %36 = load ptr, ptr %this, align 8
  %memberidx24 = getelementptr inbounds %TypeChecker, ptr %36, i32 0, i32 1
  store ptr null, ptr %memberidx24, align 8
  %37 = load ptr, ptr %this, align 8
  %memberidx25 = getelementptr inbounds %TypeChecker, ptr %37, i32 0, i32 2
  store ptr null, ptr %memberidx25, align 8
  br label %for.entry

for.entry:                                        ; preds = %3
  %38 = load ptr, ptr %module_ast, align 8
  %memberidx26 = getelementptr inbounds %ModuleAST, ptr %38, i32 0, i32 3
  %39 = load ptr, ptr %memberidx26, align 8
  %40 = call ptr @Array_ImportNode____iter__(ptr %39)
  store ptr %40, ptr %tmp_it, align 8
  %41 = load ptr, ptr %tmp_it, align 8
  %42 = call ptr @ArrayIterator_ImportNode__next(ptr %41)
  store ptr %42, ptr %module_import, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %43 = load ptr, ptr %tmp_it, align 8
  %memberidx27 = getelementptr inbounds %ArrayIterator_ImportNode_, ptr %43, i32 0, i32 0
  %44 = load i1, ptr %memberidx27, align 1
  %45 = xor i1 %44, true
  br i1 %45, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %46 = load ptr, ptr %this, align 8
  %47 = load ptr, ptr %module_import, align 8
  call void @TypeChecker_check_module_import(ptr %46, ptr %47)
  %48 = load ptr, ptr %this, align 8
  %49 = call i1 @TypeChecker_has_errored(ptr %48)
  br i1 %49, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %50 = load ptr, ptr %tmp_it, align 8
  %51 = call ptr @ArrayIterator_ImportNode__next(ptr %50)
  store ptr %51, ptr %module_import, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %52 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %52)
  br label %for.entry28

if.entry:                                         ; preds = %for.body
  ret ptr null

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr

for.entry28:                                      ; preds = %for.end
  %53 = load ptr, ptr %module_ast, align 8
  %memberidx29 = getelementptr inbounds %ModuleAST, ptr %53, i32 0, i32 2
  %54 = load ptr, ptr %memberidx29, align 8
  %55 = call ptr @Array_EnumNode____iter__(ptr %54)
  store ptr %55, ptr %tmp_it1, align 8
  %56 = load ptr, ptr %tmp_it1, align 8
  %57 = call ptr @ArrayIterator_EnumNode__next(ptr %56)
  store ptr %57, ptr %enum_, align 8
  br label %for.cond30

for.cond30:                                       ; preds = %for.incr32, %for.entry28
  %58 = load ptr, ptr %tmp_it1, align 8
  %memberidx34 = getelementptr inbounds %ArrayIterator_EnumNode_, ptr %58, i32 0, i32 0
  %59 = load i1, ptr %memberidx34, align 1
  %60 = xor i1 %59, true
  br i1 %60, label %for.body31, label %for.end33

for.body31:                                       ; preds = %for.cond30
  %61 = load ptr, ptr %this, align 8
  %62 = load ptr, ptr %enum_, align 8
  call void @TypeChecker_declare_enum_within_module(ptr %61, ptr %62)
  br label %for.incr32

for.incr32:                                       ; preds = %for.body31
  %63 = load ptr, ptr %tmp_it1, align 8
  %64 = call ptr @ArrayIterator_EnumNode__next(ptr %63)
  store ptr %64, ptr %enum_, align 8
  br label %for.cond30

for.end33:                                        ; preds = %for.cond30
  %65 = load ptr, ptr %tmp_it1, align 8
  tail call void @free(ptr %65)
  br label %for.entry35

for.entry35:                                      ; preds = %for.end33
  %66 = load ptr, ptr %module_ast, align 8
  %memberidx36 = getelementptr inbounds %ModuleAST, ptr %66, i32 0, i32 1
  %67 = load ptr, ptr %memberidx36, align 8
  %68 = call ptr @Array_ClassDeclarationNode____iter__(ptr %67)
  store ptr %68, ptr %tmp_it2, align 8
  %69 = load ptr, ptr %tmp_it2, align 8
  %70 = call ptr @ArrayIterator_ClassDeclarationNode__next(ptr %69)
  store ptr %70, ptr %class_, align 8
  br label %for.cond37

for.cond37:                                       ; preds = %for.incr39, %for.entry35
  %71 = load ptr, ptr %tmp_it2, align 8
  %memberidx41 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %71, i32 0, i32 0
  %72 = load i1, ptr %memberidx41, align 1
  %73 = xor i1 %72, true
  br i1 %73, label %for.body38, label %for.end40

for.body38:                                       ; preds = %for.cond37
  %74 = load ptr, ptr %this, align 8
  %75 = load ptr, ptr %class_, align 8
  call void @TypeChecker_declare_class_within_module(ptr %74, ptr %75)
  br label %for.incr39

for.incr39:                                       ; preds = %for.body38
  %76 = load ptr, ptr %tmp_it2, align 8
  %77 = call ptr @ArrayIterator_ClassDeclarationNode__next(ptr %76)
  store ptr %77, ptr %class_, align 8
  br label %for.cond37

for.end40:                                        ; preds = %for.cond37
  %78 = load ptr, ptr %tmp_it2, align 8
  tail call void @free(ptr %78)
  %79 = load ptr, ptr %this, align 8
  %80 = call i1 @TypeChecker_has_errored(ptr %79)
  br i1 %80, label %if.entry42, label %else43

if.entry42:                                       ; preds = %for.end40
  ret ptr null

else43:                                           ; preds = %for.end40
  br label %ifend44

ifend44:                                          ; preds = %else43
  br label %for.entry45

for.entry45:                                      ; preds = %ifend44
  %81 = load ptr, ptr %module_ast, align 8
  %memberidx46 = getelementptr inbounds %ModuleAST, ptr %81, i32 0, i32 6
  %82 = load ptr, ptr %memberidx46, align 8
  %83 = call ptr @Array_TypeAliasNode____iter__(ptr %82)
  store ptr %83, ptr %tmp_it3, align 8
  %84 = load ptr, ptr %tmp_it3, align 8
  %85 = call ptr @ArrayIterator_TypeAliasNode__next(ptr %84)
  store ptr %85, ptr %type_alias_node, align 8
  br label %for.cond47

for.cond47:                                       ; preds = %for.incr49, %for.entry45
  %86 = load ptr, ptr %tmp_it3, align 8
  %memberidx51 = getelementptr inbounds %ArrayIterator_TypeAliasNode_, ptr %86, i32 0, i32 0
  %87 = load i1, ptr %memberidx51, align 1
  %88 = xor i1 %87, true
  br i1 %88, label %for.body48, label %for.end50

for.body48:                                       ; preds = %for.cond47
  %89 = load ptr, ptr %this, align 8
  %90 = load ptr, ptr %type_alias_node, align 8
  %memberidx52 = getelementptr inbounds %TypeAliasNode, ptr %90, i32 0, i32 1
  %91 = load ptr, ptr %memberidx52, align 8
  %92 = call ptr @TypeChecker_check_type(ptr %89, ptr %91)
  store ptr %92, ptr %ty, align 8
  %93 = load ptr, ptr %type_alias_node, align 8
  %memberidx53 = getelementptr inbounds %TypeAliasNode, ptr %93, i32 0, i32 0
  %94 = load ptr, ptr %memberidx53, align 8
  store ptr %94, ptr %identifer_tok, align 8
  %95 = load ptr, ptr %identifer_tok, align 8
  %memberidx54 = getelementptr inbounds %IdentifierToken, ptr %95, i32 0, i32 2
  %96 = load ptr, ptr %memberidx54, align 8
  store ptr %96, ptr %alias_name, align 8
  %97 = load ptr, ptr %this, align 8
  %98 = load ptr, ptr %alias_name, align 8
  %99 = call ptr @TypeChecker_get_type_from_current_scope(ptr %97, ptr %98)
  %memberidx55 = getelementptr inbounds %Type, ptr %99, i32 0, i32 0
  %100 = load i64, ptr %memberidx55, align 4
  %101 = icmp ne i64 %100, 21
  br i1 %101, label %if.entry56, label %else57

for.incr49:                                       ; preds = %ifend58
  %102 = load ptr, ptr %tmp_it3, align 8
  %103 = call ptr @ArrayIterator_TypeAliasNode__next(ptr %102)
  store ptr %103, ptr %type_alias_node, align 8
  br label %for.cond47

for.end50:                                        ; preds = %for.cond47
  %104 = load ptr, ptr %tmp_it3, align 8
  tail call void @free(ptr %104)
  br label %for.entry63

if.entry56:                                       ; preds = %for.body48
  %105 = load ptr, ptr %this, align 8
  %106 = load ptr, ptr %alias_name, align 8
  %107 = getelementptr inbounds %string, ptr %106, i32 0, i32 0
  %108 = load ptr, ptr %107, align 8
  %memberidx59 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %108, i32 0, i32 5
  %109 = load ptr, ptr %memberidx59, align 8
  %110 = call ptr %109(ptr %106)
  %111 = alloca ptr, align 8
  %112 = call i64 (ptr, ptr, ...) @asprintf(ptr %111, ptr @345, ptr %110)
  %113 = load ptr, ptr %111, align 8
  %114 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %114, ptr %113, i64 %112)
  tail call void @free(ptr %110)
  %115 = load ptr, ptr %type_alias_node, align 8
  %memberidx60 = getelementptr inbounds %TypeAliasNode, ptr %115, i32 0, i32 0
  %116 = load ptr, ptr %memberidx60, align 8
  %memberidx61 = getelementptr inbounds %Token, ptr %116, i32 0, i32 1
  %117 = load ptr, ptr %memberidx61, align 8
  call void @TypeChecker_error(ptr %105, i64 1, ptr %114, ptr %117)
  ret ptr null

else57:                                           ; preds = %for.body48
  br label %ifend58

ifend58:                                          ; preds = %else57
  %118 = load ptr, ptr %module_scope, align 8
  %memberidx62 = getelementptr inbounds %Scope, ptr %118, i32 0, i32 6
  %119 = load ptr, ptr %memberidx62, align 8
  %120 = load ptr, ptr %alias_name, align 8
  %121 = load ptr, ptr %ty, align 8
  call void @Map_string_Type____setitem__(ptr %119, ptr %120, ptr %121)
  br label %for.incr49

for.entry63:                                      ; preds = %for.end50
  %122 = load ptr, ptr %module_ast, align 8
  %memberidx64 = getelementptr inbounds %ModuleAST, ptr %122, i32 0, i32 4
  %123 = load ptr, ptr %memberidx64, align 8
  %124 = call ptr @Array_ConstDeclarationStatement____iter__(ptr %123)
  store ptr %124, ptr %tmp_it4, align 8
  %125 = load ptr, ptr %tmp_it4, align 8
  %126 = call ptr @ArrayIterator_ConstDeclarationStatement__next(ptr %125)
  store ptr %126, ptr %global_const, align 8
  br label %for.cond65

for.cond65:                                       ; preds = %for.incr67, %for.entry63
  %127 = load ptr, ptr %tmp_it4, align 8
  %memberidx69 = getelementptr inbounds %ArrayIterator_ConstDeclarationStatement_, ptr %127, i32 0, i32 0
  %128 = load i1, ptr %memberidx69, align 1
  %129 = xor i1 %128, true
  br i1 %129, label %for.body66, label %for.end68

for.body66:                                       ; preds = %for.cond65
  %130 = load ptr, ptr %this, align 8
  %131 = load ptr, ptr %global_const, align 8
  call void @TypeChecker_declare_global_const(ptr %130, ptr %131)
  br label %for.incr67

for.incr67:                                       ; preds = %for.body66
  %132 = load ptr, ptr %tmp_it4, align 8
  %133 = call ptr @ArrayIterator_ConstDeclarationStatement__next(ptr %132)
  store ptr %133, ptr %global_const, align 8
  br label %for.cond65

for.end68:                                        ; preds = %for.cond65
  %134 = load ptr, ptr %tmp_it4, align 8
  tail call void @free(ptr %134)
  br label %for.entry70

for.entry70:                                      ; preds = %for.end68
  %135 = load ptr, ptr %module_ast, align 8
  %memberidx71 = getelementptr inbounds %ModuleAST, ptr %135, i32 0, i32 5
  %136 = load ptr, ptr %memberidx71, align 8
  %137 = call ptr @Array_VarDeclarationStatement____iter__(ptr %136)
  store ptr %137, ptr %tmp_it5, align 8
  %138 = load ptr, ptr %tmp_it5, align 8
  %139 = call ptr @ArrayIterator_VarDeclarationStatement__next(ptr %138)
  store ptr %139, ptr %global_var, align 8
  br label %for.cond72

for.cond72:                                       ; preds = %for.incr74, %for.entry70
  %140 = load ptr, ptr %tmp_it5, align 8
  %memberidx76 = getelementptr inbounds %ArrayIterator_VarDeclarationStatement_, ptr %140, i32 0, i32 0
  %141 = load i1, ptr %memberidx76, align 1
  %142 = xor i1 %141, true
  br i1 %142, label %for.body73, label %for.end75

for.body73:                                       ; preds = %for.cond72
  %143 = load ptr, ptr %this, align 8
  %144 = load ptr, ptr %global_var, align 8
  call void @TypeChecker_declare_global_var(ptr %143, ptr %144)
  br label %for.incr74

for.incr74:                                       ; preds = %for.body73
  %145 = load ptr, ptr %tmp_it5, align 8
  %146 = call ptr @ArrayIterator_VarDeclarationStatement__next(ptr %145)
  store ptr %146, ptr %global_var, align 8
  br label %for.cond72

for.end75:                                        ; preds = %for.cond72
  %147 = load ptr, ptr %tmp_it5, align 8
  tail call void @free(ptr %147)
  br label %for.entry77

for.entry77:                                      ; preds = %for.end75
  %148 = load ptr, ptr %module_ast, align 8
  %memberidx78 = getelementptr inbounds %ModuleAST, ptr %148, i32 0, i32 0
  %149 = load ptr, ptr %memberidx78, align 8
  %150 = call ptr @Array_FunctionDeclarationNode____iter__(ptr %149)
  store ptr %150, ptr %tmp_it6, align 8
  %151 = load ptr, ptr %tmp_it6, align 8
  %152 = call ptr @ArrayIterator_FunctionDeclarationNode__next(ptr %151)
  store ptr %152, ptr %function, align 8
  br label %for.cond79

for.cond79:                                       ; preds = %for.incr81, %for.entry77
  %153 = load ptr, ptr %tmp_it6, align 8
  %memberidx83 = getelementptr inbounds %ArrayIterator_FunctionDeclarationNode_, ptr %153, i32 0, i32 0
  %154 = load i1, ptr %memberidx83, align 1
  %155 = xor i1 %154, true
  br i1 %155, label %for.body80, label %for.end82

for.body80:                                       ; preds = %for.cond79
  %156 = load ptr, ptr %this, align 8
  %157 = load ptr, ptr %function, align 8
  call void @TypeChecker_declare_function_within_module(ptr %156, ptr %157)
  br label %for.incr81

for.incr81:                                       ; preds = %for.body80
  %158 = load ptr, ptr %tmp_it6, align 8
  %159 = call ptr @ArrayIterator_FunctionDeclarationNode__next(ptr %158)
  store ptr %159, ptr %function, align 8
  br label %for.cond79

for.end82:                                        ; preds = %for.cond79
  %160 = load ptr, ptr %tmp_it6, align 8
  tail call void @free(ptr %160)
  %161 = load ptr, ptr %this, align 8
  %162 = call i1 @TypeChecker_has_errored(ptr %161)
  br i1 %162, label %if.entry84, label %else85

if.entry84:                                       ; preds = %for.end82
  ret ptr null

else85:                                           ; preds = %for.end82
  br label %ifend86

ifend86:                                          ; preds = %else85
  br label %for.entry87

for.entry87:                                      ; preds = %ifend86
  store i64 0, ptr %i, align 4
  br label %for.cond88

for.cond88:                                       ; preds = %for.incr90, %for.entry87
  %163 = load i64, ptr %i, align 4
  %164 = load ptr, ptr %module_ast, align 8
  %memberidx92 = getelementptr inbounds %ModuleAST, ptr %164, i32 0, i32 2
  %165 = load ptr, ptr %memberidx92, align 8
  %memberidx93 = getelementptr inbounds %Array_EnumNode_, ptr %165, i32 0, i32 2
  %166 = load i64, ptr %memberidx93, align 4
  %167 = icmp slt i64 %163, %166
  br i1 %167, label %for.body89, label %for.end91

for.body89:                                       ; preds = %for.cond88
  %168 = load ptr, ptr %this, align 8
  %169 = load ptr, ptr %module, align 8
  %memberidx94 = getelementptr inbounds %Module, ptr %169, i32 0, i32 6
  %170 = load ptr, ptr %memberidx94, align 8
  %171 = load i64, ptr %i, align 4
  %172 = call ptr @Array_Enum____getitem__(ptr %170, i64 %171)
  %173 = load ptr, ptr %module_ast, align 8
  %memberidx95 = getelementptr inbounds %ModuleAST, ptr %173, i32 0, i32 2
  %174 = load ptr, ptr %memberidx95, align 8
  %175 = load i64, ptr %i, align 4
  %176 = call ptr @Array_EnumNode____getitem__(ptr %174, i64 %175)
  call void @TypeChecker_check_enum_body(ptr %168, ptr %172, ptr %176)
  br label %for.incr90

for.incr90:                                       ; preds = %for.body89
  %177 = load i64, ptr %i, align 4
  %178 = add nsw i64 %177, 1
  store i64 %178, ptr %i, align 4
  br label %for.cond88

for.end91:                                        ; preds = %for.cond88
  br label %for.entry96

for.entry96:                                      ; preds = %for.end91
  %179 = load ptr, ptr %module_ast, align 8
  %memberidx97 = getelementptr inbounds %ModuleAST, ptr %179, i32 0, i32 1
  %180 = load ptr, ptr %memberidx97, align 8
  %181 = call ptr @Array_ClassDeclarationNode____iter__(ptr %180)
  store ptr %181, ptr %tmp_it8, align 8
  %182 = load ptr, ptr %tmp_it8, align 8
  %183 = call ptr @ArrayIterator_ClassDeclarationNode__next(ptr %182)
  store ptr %183, ptr %class_7, align 8
  br label %for.cond98

for.cond98:                                       ; preds = %for.incr100, %for.entry96
  %184 = load ptr, ptr %tmp_it8, align 8
  %memberidx102 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %184, i32 0, i32 0
  %185 = load i1, ptr %memberidx102, align 1
  %186 = xor i1 %185, true
  br i1 %186, label %for.body99, label %for.end101

for.body99:                                       ; preds = %for.cond98
  %187 = load ptr, ptr %this, align 8
  %188 = load ptr, ptr %class_7, align 8
  call void @TypeChecker_check_class_body(ptr %187, ptr %188)
  br label %for.incr100

for.incr100:                                      ; preds = %for.body99
  %189 = load ptr, ptr %tmp_it8, align 8
  %190 = call ptr @ArrayIterator_ClassDeclarationNode__next(ptr %189)
  store ptr %190, ptr %class_7, align 8
  br label %for.cond98

for.end101:                                       ; preds = %for.cond98
  %191 = load ptr, ptr %tmp_it8, align 8
  tail call void @free(ptr %191)
  br label %for.entry103

for.entry103:                                     ; preds = %for.end101
  store i64 0, ptr %i9, align 4
  br label %for.cond104

for.cond104:                                      ; preds = %for.incr106, %for.entry103
  %192 = load i64, ptr %i9, align 4
  %193 = load ptr, ptr %module_ast, align 8
  %memberidx108 = getelementptr inbounds %ModuleAST, ptr %193, i32 0, i32 0
  %194 = load ptr, ptr %memberidx108, align 8
  %memberidx109 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %194, i32 0, i32 2
  %195 = load i64, ptr %memberidx109, align 4
  %196 = icmp slt i64 %192, %195
  br i1 %196, label %for.body105, label %for.end107

for.body105:                                      ; preds = %for.cond104
  %197 = load ptr, ptr %this, align 8
  %198 = load ptr, ptr %module, align 8
  %memberidx110 = getelementptr inbounds %Module, ptr %198, i32 0, i32 4
  %199 = load ptr, ptr %memberidx110, align 8
  %200 = load i64, ptr %i9, align 4
  %201 = call ptr @Array_Function____getitem__(ptr %199, i64 %200)
  %202 = load ptr, ptr %module_ast, align 8
  %memberidx111 = getelementptr inbounds %ModuleAST, ptr %202, i32 0, i32 0
  %203 = load ptr, ptr %memberidx111, align 8
  %204 = load i64, ptr %i9, align 4
  %205 = call ptr @Array_FunctionDeclarationNode____getitem__(ptr %203, i64 %204)
  call void @TypeChecker_check_function_body(ptr %197, ptr %201, ptr %205)
  br label %for.incr106

for.incr106:                                      ; preds = %for.body105
  %206 = load i64, ptr %i9, align 4
  %207 = add nsw i64 %206, 1
  store i64 %207, ptr %i9, align 4
  br label %for.cond104

for.end107:                                       ; preds = %for.cond104
  %208 = load ptr, ptr %this, align 8
  %memberidx112 = getelementptr inbounds %TypeChecker, ptr %208, i32 0, i32 7
  %209 = load i1, ptr %memberidx112, align 1
  %210 = load ptr, ptr %this, align 8
  %memberidx113 = getelementptr inbounds %TypeChecker, ptr %210, i32 0, i32 4
  %211 = load ptr, ptr %memberidx113, align 8
  %memberidx114 = getelementptr inbounds %ScopeId, ptr %211, i32 0, i32 0
  %212 = load i64, ptr %memberidx114, align 4
  %213 = icmp ne i64 %212, 0
  %214 = and i1 %209, %213
  br i1 %214, label %if.entry115, label %else116

if.entry115:                                      ; preds = %for.end107
  %215 = load ptr, ptr %this, align 8
  call void @TypeChecker_switch_to_generic_module(ptr %215)
  %216 = load ptr, ptr %this, align 8
  %217 = load ptr, ptr %module, align 8
  call void @TypeChecker_import_all_from_module(ptr %216, ptr %217)
  br label %ifend117

else116:                                          ; preds = %for.end107
  br label %ifend117

ifend117:                                         ; preds = %else116, %if.entry115
  %218 = load ptr, ptr %this, align 8
  %memberidx118 = getelementptr inbounds %TypeChecker, ptr %218, i32 0, i32 4
  %219 = load ptr, ptr %prev_scope, align 8
  store ptr %219, ptr %memberidx118, align 8
  %220 = load ptr, ptr %this, align 8
  %221 = call i1 @TypeChecker_has_errored(ptr %220)
  br i1 %221, label %if.entry119, label %else120

if.entry119:                                      ; preds = %ifend117
  ret ptr null

else120:                                          ; preds = %ifend117
  br label %ifend121

ifend121:                                         ; preds = %else120
  %222 = load ptr, ptr %module, align 8
  ret ptr %222
}

define void @TypeChecker_add_imported_typealias_to_module(ptr %0, ptr %1, ptr %2) {
  %alias_name = alloca ptr, align 8
  %this = alloca ptr, align 8
  %type_ = alloca ptr, align 8
  %scope = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %alias_name, align 8
  store ptr %2, ptr %type_, align 8
  %4 = load ptr, ptr %this, align 8
  %5 = call ptr @TypeChecker_get_current_module_global_scope(ptr %4)
  store ptr %5, ptr %scope, align 8
  %6 = load ptr, ptr %scope, align 8
  %memberidx = getelementptr inbounds %Scope, ptr %6, i32 0, i32 6
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load ptr, ptr %alias_name, align 8
  %9 = load ptr, ptr %type_, align 8
  call void @Map_string_Type____setitem__(ptr %7, ptr %8, ptr %9)
  ret void
}

define void @TypeChecker_add_imported_var_to_module(ptr %0, ptr %1, ptr %2) {
  %var_id = alloca ptr, align 8
  %this = alloca ptr, align 8
  %var_name = alloca ptr, align 8
  %scope = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %var_name, align 8
  store ptr %2, ptr %var_id, align 8
  %4 = load ptr, ptr %this, align 8
  %5 = call ptr @TypeChecker_get_current_module_global_scope(ptr %4)
  store ptr %5, ptr %scope, align 8
  %6 = load ptr, ptr %scope, align 8
  %memberidx = getelementptr inbounds %Scope, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load ptr, ptr %var_name, align 8
  %9 = load ptr, ptr %var_id, align 8
  call void @Map_string_VarId____setitem__(ptr %7, ptr %8, ptr %9)
  ret void
}

define void @TypeChecker_add_imported_fnc_to_module(ptr %0, ptr %1, ptr %2) {
  %fnc_name = alloca ptr, align 8
  %fnc_id = alloca ptr, align 8
  %this = alloca ptr, align 8
  %scope = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %fnc_name, align 8
  store ptr %2, ptr %fnc_id, align 8
  %4 = load ptr, ptr %this, align 8
  %5 = call ptr @TypeChecker_get_current_module_global_scope(ptr %4)
  store ptr %5, ptr %scope, align 8
  %6 = load ptr, ptr %scope, align 8
  %memberidx = getelementptr inbounds %Scope, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load ptr, ptr %fnc_name, align 8
  %9 = load ptr, ptr %fnc_id, align 8
  call void @Map_string_VarId____setitem__(ptr %7, ptr %8, ptr %9)
  ret void
}

define void @TypeChecker_add_imported_class_to_module(ptr %0, ptr %1, ptr %2) {
  %class_id = alloca ptr, align 8
  %this = alloca ptr, align 8
  %class_name = alloca ptr, align 8
  %scope = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %class_name, align 8
  store ptr %2, ptr %class_id, align 8
  %4 = load ptr, ptr %this, align 8
  %5 = call ptr @TypeChecker_get_current_module_global_scope(ptr %4)
  store ptr %5, ptr %scope, align 8
  %6 = load ptr, ptr %scope, align 8
  %memberidx = getelementptr inbounds %Scope, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load ptr, ptr %class_name, align 8
  %9 = load ptr, ptr %class_id, align 8
  call void @Map_string_ClassId____setitem__(ptr %7, ptr %8, ptr %9)
  %10 = load ptr, ptr %scope, align 8
  %memberidx1 = getelementptr inbounds %Scope, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = load ptr, ptr %class_name, align 8
  %13 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ClassVarId, ptr null, i32 1) to i32))
  %14 = load ptr, ptr %class_id, align 8
  call void @ClassVarId_constructor(ptr %13, ptr %14)
  call void @Map_string_VarId____setitem__(ptr %11, ptr %12, ptr %13)
  ret void
}

define void @TypeChecker_add_imported_enum_to_module(ptr %0, ptr %1, ptr %2) {
  %enum_name = alloca ptr, align 8
  %enum_id = alloca ptr, align 8
  %this = alloca ptr, align 8
  %scope = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %enum_name, align 8
  store ptr %2, ptr %enum_id, align 8
  %4 = load ptr, ptr %this, align 8
  %5 = call ptr @TypeChecker_get_current_module_global_scope(ptr %4)
  store ptr %5, ptr %scope, align 8
  %6 = load ptr, ptr %scope, align 8
  %memberidx = getelementptr inbounds %Scope, ptr %6, i32 0, i32 4
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load ptr, ptr %enum_name, align 8
  %9 = load ptr, ptr %enum_id, align 8
  call void @Map_string_EnumId____setitem__(ptr %7, ptr %8, ptr %9)
  %10 = load ptr, ptr %scope, align 8
  %memberidx1 = getelementptr inbounds %Scope, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = load ptr, ptr %enum_name, align 8
  %13 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%EnumVarId, ptr null, i32 1) to i32))
  %14 = load ptr, ptr %enum_id, align 8
  call void @EnumVarId_constructor(ptr %13, ptr %14)
  call void @Map_string_VarId____setitem__(ptr %11, ptr %12, ptr %13)
  ret void
}

define void @TypeChecker_import_all_from_module(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %module = alloca ptr, align 8
  %global_module_scope = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %imported_var = alloca ptr, align 8
  %imported_const = alloca ptr, align 8
  %tmp_it1 = alloca ptr, align 8
  %tmp_it2 = alloca ptr, align 8
  %imported_func = alloca ptr, align 8
  %tmp_it3 = alloca ptr, align 8
  %imported_class = alloca ptr, align 8
  %tmp_it4 = alloca ptr, align 8
  %imported_enum = alloca ptr, align 8
  %type_alias_entry = alloca ptr, align 8
  %tmp_it5 = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %module, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %module, align 8
  %memberidx6 = getelementptr inbounds %Module, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx6, align 8
  %7 = call ptr @get_scope(ptr %4, ptr %6)
  store ptr %7, ptr %global_module_scope, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  %8 = load ptr, ptr %module, align 8
  %memberidx7 = getelementptr inbounds %Module, ptr %8, i32 0, i32 9
  %9 = load ptr, ptr %memberidx7, align 8
  %10 = call ptr @Array_VarDeclaration____iter__(ptr %9)
  store ptr %10, ptr %tmp_it, align 8
  %11 = load ptr, ptr %tmp_it, align 8
  %12 = call ptr @ArrayIterator_VarDeclaration__next(ptr %11)
  store ptr %12, ptr %imported_var, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %13 = load ptr, ptr %tmp_it, align 8
  %memberidx8 = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %13, i32 0, i32 0
  %14 = load i1, ptr %memberidx8, align 1
  %15 = xor i1 %14, true
  br i1 %15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load ptr, ptr %this, align 8
  %17 = load ptr, ptr %imported_var, align 8
  %memberidx9 = getelementptr inbounds %VarDeclaration, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx9, align 8
  %19 = load ptr, ptr %imported_var, align 8
  %memberidx10 = getelementptr inbounds %VarDeclaration, ptr %19, i32 0, i32 2
  %20 = load ptr, ptr %memberidx10, align 8
  call void @TypeChecker_add_imported_var_to_module(ptr %16, ptr %18, ptr %20)
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %21 = load ptr, ptr %tmp_it, align 8
  %22 = call ptr @ArrayIterator_VarDeclaration__next(ptr %21)
  store ptr %22, ptr %imported_var, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %23)
  br label %for.entry11

for.entry11:                                      ; preds = %for.end
  %24 = load ptr, ptr %module, align 8
  %memberidx12 = getelementptr inbounds %Module, ptr %24, i32 0, i32 8
  %25 = load ptr, ptr %memberidx12, align 8
  %26 = call ptr @Array_ConstDeclaration____iter__(ptr %25)
  store ptr %26, ptr %tmp_it1, align 8
  %27 = load ptr, ptr %tmp_it1, align 8
  %28 = call ptr @ArrayIterator_ConstDeclaration__next(ptr %27)
  store ptr %28, ptr %imported_const, align 8
  br label %for.cond13

for.cond13:                                       ; preds = %for.incr15, %for.entry11
  %29 = load ptr, ptr %tmp_it1, align 8
  %memberidx17 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %29, i32 0, i32 0
  %30 = load i1, ptr %memberidx17, align 1
  %31 = xor i1 %30, true
  br i1 %31, label %for.body14, label %for.end16

for.body14:                                       ; preds = %for.cond13
  %32 = load ptr, ptr %this, align 8
  %33 = load ptr, ptr %imported_const, align 8
  %memberidx18 = getelementptr inbounds %ConstDeclaration, ptr %33, i32 0, i32 1
  %34 = load ptr, ptr %memberidx18, align 8
  %35 = load ptr, ptr %imported_const, align 8
  %memberidx19 = getelementptr inbounds %ConstDeclaration, ptr %35, i32 0, i32 2
  %36 = load ptr, ptr %memberidx19, align 8
  call void @TypeChecker_add_imported_var_to_module(ptr %32, ptr %34, ptr %36)
  br label %for.incr15

for.incr15:                                       ; preds = %for.body14
  %37 = load ptr, ptr %tmp_it1, align 8
  %38 = call ptr @ArrayIterator_ConstDeclaration__next(ptr %37)
  store ptr %38, ptr %imported_const, align 8
  br label %for.cond13

for.end16:                                        ; preds = %for.cond13
  %39 = load ptr, ptr %tmp_it1, align 8
  tail call void @free(ptr %39)
  br label %for.entry20

for.entry20:                                      ; preds = %for.end16
  %40 = load ptr, ptr %module, align 8
  %memberidx21 = getelementptr inbounds %Module, ptr %40, i32 0, i32 4
  %41 = load ptr, ptr %memberidx21, align 8
  %42 = call ptr @Array_Function____iter__(ptr %41)
  store ptr %42, ptr %tmp_it2, align 8
  %43 = load ptr, ptr %tmp_it2, align 8
  %44 = call ptr @ArrayIterator_Function__next(ptr %43)
  store ptr %44, ptr %imported_func, align 8
  br label %for.cond22

for.cond22:                                       ; preds = %for.incr24, %for.entry20
  %45 = load ptr, ptr %tmp_it2, align 8
  %memberidx26 = getelementptr inbounds %ArrayIterator_Function_, ptr %45, i32 0, i32 0
  %46 = load i1, ptr %memberidx26, align 1
  %47 = xor i1 %46, true
  br i1 %47, label %for.body23, label %for.end25

for.body23:                                       ; preds = %for.cond22
  %48 = load ptr, ptr %this, align 8
  %49 = load ptr, ptr %imported_func, align 8
  %memberidx27 = getelementptr inbounds %Function, ptr %49, i32 0, i32 1
  %50 = load ptr, ptr %memberidx27, align 8
  %51 = load ptr, ptr %imported_func, align 8
  %memberidx28 = getelementptr inbounds %Function, ptr %51, i32 0, i32 0
  %52 = load ptr, ptr %memberidx28, align 8
  call void @TypeChecker_add_imported_fnc_to_module(ptr %48, ptr %50, ptr %52)
  br label %for.incr24

for.incr24:                                       ; preds = %for.body23
  %53 = load ptr, ptr %tmp_it2, align 8
  %54 = call ptr @ArrayIterator_Function__next(ptr %53)
  store ptr %54, ptr %imported_func, align 8
  br label %for.cond22

for.end25:                                        ; preds = %for.cond22
  %55 = load ptr, ptr %tmp_it2, align 8
  tail call void @free(ptr %55)
  br label %for.entry29

for.entry29:                                      ; preds = %for.end25
  %56 = load ptr, ptr %module, align 8
  %memberidx30 = getelementptr inbounds %Module, ptr %56, i32 0, i32 3
  %57 = load ptr, ptr %memberidx30, align 8
  %58 = call ptr @Array_Class____iter__(ptr %57)
  store ptr %58, ptr %tmp_it3, align 8
  %59 = load ptr, ptr %tmp_it3, align 8
  %60 = call ptr @ArrayIterator_Class__next(ptr %59)
  store ptr %60, ptr %imported_class, align 8
  br label %for.cond31

for.cond31:                                       ; preds = %for.incr33, %for.entry29
  %61 = load ptr, ptr %tmp_it3, align 8
  %memberidx35 = getelementptr inbounds %ArrayIterator_Class_, ptr %61, i32 0, i32 0
  %62 = load i1, ptr %memberidx35, align 1
  %63 = xor i1 %62, true
  br i1 %63, label %for.body32, label %for.end34

for.body32:                                       ; preds = %for.cond31
  %64 = load ptr, ptr %this, align 8
  %65 = load ptr, ptr %imported_class, align 8
  %memberidx36 = getelementptr inbounds %Class, ptr %65, i32 0, i32 1
  %66 = load ptr, ptr %memberidx36, align 8
  %67 = load ptr, ptr %imported_class, align 8
  %memberidx37 = getelementptr inbounds %Class, ptr %67, i32 0, i32 0
  %68 = load ptr, ptr %memberidx37, align 8
  call void @TypeChecker_add_imported_class_to_module(ptr %64, ptr %66, ptr %68)
  br label %for.incr33

for.incr33:                                       ; preds = %for.body32
  %69 = load ptr, ptr %tmp_it3, align 8
  %70 = call ptr @ArrayIterator_Class__next(ptr %69)
  store ptr %70, ptr %imported_class, align 8
  br label %for.cond31

for.end34:                                        ; preds = %for.cond31
  %71 = load ptr, ptr %tmp_it3, align 8
  tail call void @free(ptr %71)
  br label %for.entry38

for.entry38:                                      ; preds = %for.end34
  %72 = load ptr, ptr %module, align 8
  %memberidx39 = getelementptr inbounds %Module, ptr %72, i32 0, i32 6
  %73 = load ptr, ptr %memberidx39, align 8
  %74 = call ptr @Array_Enum____iter__(ptr %73)
  store ptr %74, ptr %tmp_it4, align 8
  %75 = load ptr, ptr %tmp_it4, align 8
  %76 = call ptr @ArrayIterator_Enum__next(ptr %75)
  store ptr %76, ptr %imported_enum, align 8
  br label %for.cond40

for.cond40:                                       ; preds = %for.incr42, %for.entry38
  %77 = load ptr, ptr %tmp_it4, align 8
  %memberidx44 = getelementptr inbounds %ArrayIterator_Enum_, ptr %77, i32 0, i32 0
  %78 = load i1, ptr %memberidx44, align 1
  %79 = xor i1 %78, true
  br i1 %79, label %for.body41, label %for.end43

for.body41:                                       ; preds = %for.cond40
  %80 = load ptr, ptr %this, align 8
  %81 = load ptr, ptr %imported_enum, align 8
  %memberidx45 = getelementptr inbounds %Enum, ptr %81, i32 0, i32 1
  %82 = load ptr, ptr %memberidx45, align 8
  %83 = load ptr, ptr %imported_enum, align 8
  %memberidx46 = getelementptr inbounds %Enum, ptr %83, i32 0, i32 0
  %84 = load ptr, ptr %memberidx46, align 8
  call void @TypeChecker_add_imported_enum_to_module(ptr %80, ptr %82, ptr %84)
  br label %for.incr42

for.incr42:                                       ; preds = %for.body41
  %85 = load ptr, ptr %tmp_it4, align 8
  %86 = call ptr @ArrayIterator_Enum__next(ptr %85)
  store ptr %86, ptr %imported_enum, align 8
  br label %for.cond40

for.end43:                                        ; preds = %for.cond40
  %87 = load ptr, ptr %tmp_it4, align 8
  tail call void @free(ptr %87)
  br label %for.entry47

for.entry47:                                      ; preds = %for.end43
  %88 = load ptr, ptr %global_module_scope, align 8
  %memberidx48 = getelementptr inbounds %Scope, ptr %88, i32 0, i32 6
  %89 = load ptr, ptr %memberidx48, align 8
  %90 = call ptr @Map_string_Type____iter__(ptr %89)
  store ptr %90, ptr %tmp_it5, align 8
  %91 = load ptr, ptr %tmp_it5, align 8
  %92 = call ptr @MapIterator_string_Type__next(ptr %91)
  store ptr %92, ptr %type_alias_entry, align 8
  br label %for.cond49

for.cond49:                                       ; preds = %for.incr51, %for.entry47
  %93 = load ptr, ptr %tmp_it5, align 8
  %memberidx53 = getelementptr inbounds %MapIterator_string_Type_, ptr %93, i32 0, i32 0
  %94 = load i1, ptr %memberidx53, align 1
  %95 = xor i1 %94, true
  br i1 %95, label %for.body50, label %for.end52

for.body50:                                       ; preds = %for.cond49
  %96 = load ptr, ptr %this, align 8
  %97 = load ptr, ptr %type_alias_entry, align 8
  %memberidx54 = getelementptr inbounds %MapEntry_string_Type_, ptr %97, i32 0, i32 0
  %98 = load ptr, ptr %memberidx54, align 8
  %99 = load ptr, ptr %type_alias_entry, align 8
  %memberidx55 = getelementptr inbounds %MapEntry_string_Type_, ptr %99, i32 0, i32 1
  %100 = load ptr, ptr %memberidx55, align 8
  call void @TypeChecker_add_imported_typealias_to_module(ptr %96, ptr %98, ptr %100)
  br label %for.incr51

for.incr51:                                       ; preds = %for.body50
  %101 = load ptr, ptr %tmp_it5, align 8
  %102 = call ptr @MapIterator_string_Type__next(ptr %101)
  store ptr %102, ptr %type_alias_entry, align 8
  br label %for.cond49

for.end52:                                        ; preds = %for.cond49
  %103 = load ptr, ptr %tmp_it5, align 8
  tail call void @free(ptr %103)
  ret void
}

define ptr @TypeChecker_check_typecast_expr(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %type_expr_node = alloca ptr, align 8
  %val_ty = alloca ptr, align 8
  %dest_ty = alloca ptr, align 8
  %is_valid_cast = alloca i1, align 1
  %exp = alloca ptr, align 8
  %call = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %type_expr_node, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = call ptr @Type_unknown()
  %5 = load ptr, ptr %type_expr_node, align 8
  %memberidx = getelementptr inbounds %TypeCastExpressionNode, ptr %5, i32 0, i32 3
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr @TypeChecker_check_expression(ptr %3, ptr %4, ptr %6)
  store ptr %7, ptr %exp, align 8
  %8 = load ptr, ptr %this, align 8
  %9 = load ptr, ptr %type_expr_node, align 8
  %memberidx1 = getelementptr inbounds %TypeCastExpressionNode, ptr %9, i32 0, i32 4
  %10 = load ptr, ptr %memberidx1, align 8
  %11 = call ptr @TypeChecker_check_type(ptr %8, ptr %10)
  store ptr %11, ptr %dest_ty, align 8
  %12 = load ptr, ptr %this, align 8
  %13 = call i1 @TypeChecker_has_errored(ptr %12)
  br i1 %13, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret ptr null

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %14 = load ptr, ptr %exp, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %14, i32 0, i32 3
  %15 = load ptr, ptr %memberidx2, align 8
  store ptr %15, ptr %val_ty, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %TypeChecker, ptr %16, i32 0, i32 0
  %17 = load ptr, ptr %memberidx3, align 8
  %18 = load ptr, ptr %dest_ty, align 8
  %19 = call ptr @string_from_bytes(ptr @465, i64 6)
  %20 = call i1 @is_buitin(ptr %17, ptr %18, ptr %19)
  br i1 %20, label %if.entry4, label %else5

if.entry4:                                        ; preds = %ifend
  %21 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%StringExpression, ptr null, i32 1) to i32))
  %22 = call ptr @string_from_bytes(ptr @315, i64 0)
  %23 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_uint_, ptr null, i32 1) to i32))
  call void @Array_uint__constructor(ptr %23, i64 ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64))
  %memberidx7 = getelementptr inbounds %Array_uint_, ptr %23, i32 0, i32 1
  %24 = load ptr, ptr %memberidx7, align 8
  store i64 0, ptr %24, align 4
  %25 = getelementptr inbounds ptr, ptr %24, i64 1
  %memberidx8 = getelementptr inbounds %Array_uint_, ptr %23, i32 0, i32 2
  store i64 1, ptr %memberidx8, align 4
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %26, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx9 = getelementptr inbounds %Array_Expression_, ptr %26, i32 0, i32 1
  %27 = load ptr, ptr %memberidx9, align 8
  %28 = load ptr, ptr %exp, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr inbounds ptr, ptr %27, i64 1
  %memberidx10 = getelementptr inbounds %Array_Expression_, ptr %26, i32 0, i32 2
  store i64 1, ptr %memberidx10, align 4
  %30 = load ptr, ptr %dest_ty, align 8
  call void @StringExpression_constructor(ptr %21, ptr %22, ptr %23, ptr %26, ptr %30)
  ret ptr %21

else5:                                            ; preds = %ifend
  br label %ifend6

ifend6:                                           ; preds = %else5
  store i1 false, ptr %is_valid_cast, align 1
  %31 = load ptr, ptr %dest_ty, align 8
  %32 = call i1 @is_numeric(ptr %31)
  %33 = load ptr, ptr %val_ty, align 8
  %34 = call i1 @is_numeric(ptr %33)
  %35 = and i1 %32, %34
  br i1 %35, label %if.entry11, label %else12

if.entry11:                                       ; preds = %ifend6
  store i1 true, ptr %is_valid_cast, align 1
  br label %ifend13

else12:                                           ; preds = %ifend6
  br label %ifend13

ifend13:                                          ; preds = %else12, %if.entry11
  %36 = load ptr, ptr %dest_ty, align 8
  %37 = call i1 @is_int(ptr %36)
  %38 = load ptr, ptr %val_ty, align 8
  %memberidx14 = getelementptr inbounds %Type, ptr %38, i32 0, i32 0
  %39 = load i64, ptr %memberidx14, align 4
  %40 = icmp eq i64 %39, 12
  %41 = and i1 %37, %40
  br i1 %41, label %if.entry15, label %else16

if.entry15:                                       ; preds = %ifend13
  store i1 true, ptr %is_valid_cast, align 1
  br label %ifend17

else16:                                           ; preds = %ifend13
  br label %ifend17

ifend17:                                          ; preds = %else16, %if.entry15
  %42 = load ptr, ptr %val_ty, align 8
  %43 = call i1 @is_int(ptr %42)
  %44 = load ptr, ptr %dest_ty, align 8
  %memberidx18 = getelementptr inbounds %Type, ptr %44, i32 0, i32 0
  %45 = load i64, ptr %memberidx18, align 4
  %46 = icmp eq i64 %45, 12
  %47 = and i1 %43, %46
  br i1 %47, label %if.entry19, label %else20

if.entry19:                                       ; preds = %ifend17
  store i1 true, ptr %is_valid_cast, align 1
  br label %ifend21

else20:                                           ; preds = %ifend17
  br label %ifend21

ifend21:                                          ; preds = %else20, %if.entry19
  %48 = load ptr, ptr %dest_ty, align 8
  %49 = call i1 @is_numeric(ptr %48)
  %50 = load ptr, ptr %this, align 8
  %memberidx22 = getelementptr inbounds %TypeChecker, ptr %50, i32 0, i32 0
  %51 = load ptr, ptr %memberidx22, align 8
  %52 = load ptr, ptr %val_ty, align 8
  %53 = call ptr @string_from_bytes(ptr @465, i64 6)
  %54 = call i1 @is_buitin(ptr %51, ptr %52, ptr %53)
  %55 = and i1 %49, %54
  br i1 %55, label %if.entry23, label %else24

if.entry23:                                       ; preds = %ifend21
  store ptr null, ptr %call, align 8
  %56 = load ptr, ptr %dest_ty, align 8
  %57 = call i1 @is_float(ptr %56)
  br i1 %57, label %if.entry26, label %else27

else24:                                           ; preds = %ifend21
  br label %ifend25

ifend25:                                          ; preds = %else24, %ifend28
  %58 = load ptr, ptr %dest_ty, align 8
  %59 = call i1 @is_object(ptr %58)
  %60 = load ptr, ptr %val_ty, align 8
  %61 = call i1 @is_object(ptr %60)
  %62 = and i1 %59, %61
  br i1 %62, label %if.entry35, label %else36

if.entry26:                                       ; preds = %if.entry23
  %63 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntrinsicCall, ptr null, i32 1) to i32))
  call void @IntrinsicCall_constructor(ptr %63, i64 0)
  store ptr %63, ptr %call, align 8
  br label %ifend28

else27:                                           ; preds = %if.entry23
  %64 = load ptr, ptr %dest_ty, align 8
  %memberidx29 = getelementptr inbounds %Type, ptr %64, i32 0, i32 0
  %65 = load i64, ptr %memberidx29, align 4
  %66 = icmp slt i64 %65, 5
  %67 = load i64, ptr @ARCH_WORD_SIZE, align 4
  %68 = icmp slt i64 %67, 64
  %69 = load ptr, ptr %dest_ty, align 8
  %memberidx30 = getelementptr inbounds %Type, ptr %69, i32 0, i32 0
  %70 = load i64, ptr %memberidx30, align 4
  %71 = icmp eq i64 %70, 6
  %72 = and i1 %68, %71
  %73 = or i1 %66, %72
  br i1 %73, label %if.entry31, label %else32

ifend28:                                          ; preds = %ifend33, %if.entry26
  %74 = load ptr, ptr %call, align 8
  %memberidx34 = getelementptr inbounds %IntrinsicCall, ptr %74, i32 0, i32 5
  %75 = load ptr, ptr %memberidx34, align 8
  %76 = load ptr, ptr %exp, align 8
  call void @Array_Expression____sl__(ptr %75, ptr %76)
  %77 = load ptr, ptr %call, align 8
  store ptr %77, ptr %exp, align 8
  store i1 true, ptr %is_valid_cast, align 1
  br label %ifend25

if.entry31:                                       ; preds = %else27
  %78 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntrinsicCall, ptr null, i32 1) to i32))
  call void @IntrinsicCall_constructor(ptr %78, i64 1)
  store ptr %78, ptr %call, align 8
  br label %ifend33

else32:                                           ; preds = %else27
  %79 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntrinsicCall, ptr null, i32 1) to i32))
  call void @IntrinsicCall_constructor(ptr %79, i64 2)
  store ptr %79, ptr %call, align 8
  br label %ifend33

ifend33:                                          ; preds = %else32, %if.entry31
  br label %ifend28

if.entry35:                                       ; preds = %ifend25
  store i1 true, ptr %is_valid_cast, align 1
  br label %ifend37

else36:                                           ; preds = %ifend25
  br label %ifend37

ifend37:                                          ; preds = %else36, %if.entry35
  %80 = load ptr, ptr %dest_ty, align 8
  %81 = call i1 @is_pointer(ptr %80)
  %82 = load ptr, ptr %val_ty, align 8
  %83 = call i1 @is_pointer(ptr %82)
  %84 = and i1 %81, %83
  br i1 %84, label %if.entry38, label %else39

if.entry38:                                       ; preds = %ifend37
  store i1 true, ptr %is_valid_cast, align 1
  br label %ifend40

else39:                                           ; preds = %ifend37
  br label %ifend40

ifend40:                                          ; preds = %else39, %if.entry38
  %85 = load ptr, ptr %dest_ty, align 8
  %86 = call i1 @is_bool(ptr %85)
  br i1 %86, label %if.entry41, label %else42

if.entry41:                                       ; preds = %ifend40
  store i1 true, ptr %is_valid_cast, align 1
  br label %ifend43

else42:                                           ; preds = %ifend40
  br label %ifend43

ifend43:                                          ; preds = %else42, %if.entry41
  %87 = load i1, ptr %is_valid_cast, align 1
  %88 = xor i1 %87, true
  br i1 %88, label %if.entry44, label %else45

if.entry44:                                       ; preds = %ifend43
  %89 = load ptr, ptr %this, align 8
  %90 = load ptr, ptr %this, align 8
  %91 = load ptr, ptr %val_ty, align 8
  %92 = call ptr @TypeChecker_dump_type(ptr %90, ptr %91)
  %93 = getelementptr inbounds %string, ptr %92, i32 0, i32 0
  %94 = load ptr, ptr %93, align 8
  %memberidx47 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %94, i32 0, i32 5
  %95 = load ptr, ptr %memberidx47, align 8
  %96 = call ptr %95(ptr %92)
  %97 = load ptr, ptr %this, align 8
  %98 = load ptr, ptr %dest_ty, align 8
  %99 = call ptr @TypeChecker_dump_type(ptr %97, ptr %98)
  %100 = getelementptr inbounds %string, ptr %99, i32 0, i32 0
  %101 = load ptr, ptr %100, align 8
  %memberidx48 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %101, i32 0, i32 5
  %102 = load ptr, ptr %memberidx48, align 8
  %103 = call ptr %102(ptr %99)
  %104 = alloca ptr, align 8
  %105 = call i64 (ptr, ptr, ...) @asprintf(ptr %104, ptr @466, ptr %96, ptr %103)
  %106 = load ptr, ptr %104, align 8
  %107 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %107, ptr %106, i64 %105)
  tail call void @free(ptr %96)
  tail call void @free(ptr %103)
  %108 = load ptr, ptr %type_expr_node, align 8
  %memberidx49 = getelementptr inbounds %Node, ptr %108, i32 0, i32 0
  %109 = load ptr, ptr %memberidx49, align 8
  call void @TypeChecker_error(ptr %89, i64 5, ptr %107, ptr %109)
  ret ptr null

else45:                                           ; preds = %ifend43
  br label %ifend46

ifend46:                                          ; preds = %else45
  %110 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%TypeCastExpression, ptr null, i32 1) to i32))
  %111 = load ptr, ptr %exp, align 8
  %112 = load ptr, ptr %dest_ty, align 8
  call void @TypeCastExpression_constructor(ptr %110, ptr %111, ptr %112)
  ret ptr %110
}

define ptr @Array_Expression__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Expression_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_Expression__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_Expression__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Expression_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Expression_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Expression_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_Expression____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_Expression__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Expression_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Expression_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Expression_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_Expression____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_Expression_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_Expression_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Expression_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_Expression_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_Expression_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_Expression_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_Expression_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_Expression_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_Expression_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_Expression____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_Expression_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_Expression_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_Expression_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_Expression_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_Expression_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_Expression_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_Expression_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_Expression_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_Expression____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_Expression____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_Expression____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_Expression__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Expression_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Expression_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Expression_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Expression_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_Expression_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_Expression_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_Expression__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Expression_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Expression_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Expression_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Expression_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_Expression____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_Expression_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_Expression__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_Expression____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_Expression____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_Expression____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_Expression____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Expression_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_Expression____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_Expression____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_Expression____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_Expression_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_Expression__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_Expression__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_Expression__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_Expression_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_Expression_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define ptr @TypeChecker_fill_in_call_args(ptr %0, ptr %1, ptr %2, ptr %3) {
  %args = alloca ptr, align 8
  %func_args = alloca ptr, align 8
  %this = alloca ptr, align 8
  %fnc_ty = alloca ptr, align 8
  %called_args = alloca ptr, align 8
  %i = alloca i64, align 8
  %expected_type = alloca ptr, align 8
  %i1 = alloca i64, align 8
  %arg = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %fnc_ty, align 8
  store ptr %2, ptr %func_args, align 8
  store ptr %3, ptr %args, align 8
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %5, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %memberidx2 = getelementptr inbounds %Array_Expression_, ptr %5, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  store ptr %5, ptr %called_args, align 8
  br label %for.entry

for.entry:                                        ; preds = %4
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %args, align 8
  %memberidx3 = getelementptr inbounds %Array_ExpressionNode_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %memberidx3, align 4
  %10 = icmp slt i64 %7, %9
  br i1 %10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load ptr, ptr %fnc_ty, align 8
  %memberidx4 = getelementptr inbounds %FunctionType, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Array_Type_, ptr %12, i32 0, i32 2
  %13 = load i64, ptr %memberidx5, align 4
  %14 = load i64, ptr %i, align 4
  %15 = icmp sgt i64 %13, %14
  br i1 %15, label %true_block, label %false_block

for.incr:                                         ; preds = %end
  %16 = load i64, ptr %i, align 4
  %17 = add nsw i64 %16, 1
  store i64 %17, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load ptr, ptr %this, align 8
  %19 = call i1 @TypeChecker_has_errored(ptr %18)
  %20 = load ptr, ptr %func_args, align 8
  %21 = icmp eq ptr %20, null
  %22 = or i1 %19, %21
  br i1 %22, label %if.entry, label %else

true_block:                                       ; preds = %for.body
  %23 = load ptr, ptr %fnc_ty, align 8
  %memberidx6 = getelementptr inbounds %FunctionType, ptr %23, i32 0, i32 1
  %24 = load ptr, ptr %memberidx6, align 8
  %25 = load i64, ptr %i, align 4
  %26 = call ptr @Array_Type____getitem__(ptr %24, i64 %25)
  br label %end

false_block:                                      ; preds = %for.body
  %27 = call ptr @Type_unknown()
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %26, %true_block ], [ %27, %false_block ]
  store ptr %ternary, ptr %expected_type, align 8
  %28 = load ptr, ptr %called_args, align 8
  %29 = load ptr, ptr %this, align 8
  %30 = load ptr, ptr %expected_type, align 8
  %31 = load ptr, ptr %args, align 8
  %32 = load i64, ptr %i, align 4
  %33 = call ptr @Array_ExpressionNode____getitem__(ptr %31, i64 %32)
  %34 = call ptr @TypeChecker_check_expression(ptr %29, ptr %30, ptr %33)
  call void @Array_Expression____sl__(ptr %28, ptr %34)
  br label %for.incr

if.entry:                                         ; preds = %for.end
  %35 = load ptr, ptr %called_args, align 8
  ret ptr %35

else:                                             ; preds = %for.end
  br label %ifend

ifend:                                            ; preds = %else
  %36 = load ptr, ptr %func_args, align 8
  %memberidx7 = getelementptr inbounds %Array_FunctionArg_, ptr %36, i32 0, i32 2
  %37 = load i64, ptr %memberidx7, align 4
  %38 = load ptr, ptr %args, align 8
  %memberidx8 = getelementptr inbounds %Array_ExpressionNode_, ptr %38, i32 0, i32 2
  %39 = load i64, ptr %memberidx8, align 4
  %40 = icmp sgt i64 %37, %39
  br i1 %40, label %if.entry9, label %else10

if.entry9:                                        ; preds = %ifend
  br label %for.entry12

else10:                                           ; preds = %ifend
  br label %ifend11

ifend11:                                          ; preds = %else10, %for.end17
  %41 = load ptr, ptr %called_args, align 8
  ret ptr %41

for.entry12:                                      ; preds = %if.entry9
  %42 = load ptr, ptr %args, align 8
  %memberidx13 = getelementptr inbounds %Array_ExpressionNode_, ptr %42, i32 0, i32 2
  %43 = load i64, ptr %memberidx13, align 4
  store i64 %43, ptr %i1, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.incr16, %for.entry12
  %44 = load i64, ptr %i1, align 4
  %45 = load ptr, ptr %func_args, align 8
  %memberidx18 = getelementptr inbounds %Array_FunctionArg_, ptr %45, i32 0, i32 2
  %46 = load i64, ptr %memberidx18, align 4
  %47 = icmp slt i64 %44, %46
  br i1 %47, label %for.body15, label %for.end17

for.body15:                                       ; preds = %for.cond14
  %48 = load ptr, ptr %func_args, align 8
  %49 = load i64, ptr %i1, align 4
  %50 = call ptr @Array_FunctionArg____getitem__(ptr %48, i64 %49)
  store ptr %50, ptr %arg, align 8
  %51 = load ptr, ptr %arg, align 8
  %memberidx19 = getelementptr inbounds %FunctionArg, ptr %51, i32 0, i32 6
  %52 = load ptr, ptr %memberidx19, align 8
  %53 = icmp ne ptr %52, null
  br i1 %53, label %if.entry20, label %else21

for.incr16:                                       ; preds = %ifend22
  %54 = load i64, ptr %i1, align 4
  %55 = add nsw i64 %54, 1
  store i64 %55, ptr %i1, align 4
  br label %for.cond14

for.end17:                                        ; preds = %for.cond14
  br label %ifend11

if.entry20:                                       ; preds = %for.body15
  %56 = load ptr, ptr %called_args, align 8
  %57 = load ptr, ptr %arg, align 8
  %memberidx23 = getelementptr inbounds %FunctionArg, ptr %57, i32 0, i32 6
  %58 = load ptr, ptr %memberidx23, align 8
  call void @Array_Expression____sl__(ptr %56, ptr %58)
  br label %ifend22

else21:                                           ; preds = %for.body15
  br label %ifend22

ifend22:                                          ; preds = %else21, %if.entry20
  br label %for.incr16
}

define void @TypeChecker_add_inherited_props_to_class(ptr %0, ptr %1, ptr %2) {
  %this = alloca ptr, align 8
  %declared_class = alloca ptr, align 8
  %class_node = alloca ptr, align 8
  %parent_type = alloca ptr, align 8
  %parent_class = alloca ptr, align 8
  %parent_entry_prop = alloca ptr, align 8
  %parent_prop_type = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %parent_prop_id = alloca ptr, align 8
  %parent_prop_name = alloca ptr, align 8
  %child_prop_id = alloca ptr, align 8
  %parent_prop_is_static = alloca i1, align 1
  %parent_prop_visibility = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %declared_class, align 8
  store ptr %2, ptr %class_node, align 8
  %4 = load ptr, ptr %declared_class, align 8
  %memberidx = getelementptr inbounds %Class, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx, align 8
  store ptr %5, ptr %parent_type, align 8
  %6 = load ptr, ptr %parent_type, align 8
  %7 = call i1 @is_object(ptr %6)
  %8 = xor i1 %7, true
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %9 = load ptr, ptr %this, align 8
  %10 = load ptr, ptr %this, align 8
  %11 = load ptr, ptr %parent_type, align 8
  %12 = call ptr @TypeChecker_dump_type(ptr %10, ptr %11)
  %13 = getelementptr inbounds %string, ptr %12, i32 0, i32 0
  %14 = load ptr, ptr %13, align 8
  %memberidx1 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %14, i32 0, i32 5
  %15 = load ptr, ptr %memberidx1, align 8
  %16 = call ptr %15(ptr %12)
  %17 = alloca ptr, align 8
  %18 = call i64 (ptr, ptr, ...) @asprintf(ptr %17, ptr @409, ptr %16)
  %19 = load ptr, ptr %17, align 8
  %20 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %20, ptr %19, i64 %18)
  tail call void @free(ptr %16)
  %21 = load ptr, ptr %class_node, align 8
  %memberidx2 = getelementptr inbounds %ClassDeclarationNode, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Node, ptr %22, i32 0, i32 0
  %23 = load ptr, ptr %memberidx3, align 8
  call void @TypeChecker_error(ptr %9, i64 5, ptr %20, ptr %23)
  br label %ifend

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %24 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %TypeChecker, ptr %24, i32 0, i32 0
  %25 = load ptr, ptr %memberidx4, align 8
  %26 = load ptr, ptr %parent_type, align 8
  %27 = call ptr @get_class_from_type(ptr %25, ptr %26)
  store ptr %27, ptr %parent_class, align 8
  br label %for.entry

for.entry:                                        ; preds = %ifend
  %28 = load ptr, ptr %parent_class, align 8
  %memberidx5 = getelementptr inbounds %Class, ptr %28, i32 0, i32 6
  %29 = load ptr, ptr %memberidx5, align 8
  %30 = call ptr @Map_string_PropId____iter__(ptr %29)
  store ptr %30, ptr %tmp_it, align 8
  %31 = load ptr, ptr %tmp_it, align 8
  %32 = call ptr @MapIterator_string_PropId__next(ptr %31)
  store ptr %32, ptr %parent_entry_prop, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %33 = load ptr, ptr %tmp_it, align 8
  %memberidx6 = getelementptr inbounds %MapIterator_string_PropId_, ptr %33, i32 0, i32 0
  %34 = load i1, ptr %memberidx6, align 1
  %35 = xor i1 %34, true
  br i1 %35, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %36 = load ptr, ptr %parent_entry_prop, align 8
  %memberidx7 = getelementptr inbounds %MapEntry_string_PropId_, ptr %36, i32 0, i32 0
  %37 = load ptr, ptr %memberidx7, align 8
  store ptr %37, ptr %parent_prop_name, align 8
  %38 = load ptr, ptr %parent_entry_prop, align 8
  %memberidx8 = getelementptr inbounds %MapEntry_string_PropId_, ptr %38, i32 0, i32 1
  %39 = load ptr, ptr %memberidx8, align 8
  store ptr %39, ptr %parent_prop_id, align 8
  %40 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %TypeChecker, ptr %40, i32 0, i32 0
  %41 = load ptr, ptr %memberidx9, align 8
  %42 = load ptr, ptr %parent_prop_id, align 8
  %43 = call ptr @get_class_prop_type(ptr %41, ptr %42)
  store ptr %43, ptr %parent_prop_type, align 8
  %44 = load ptr, ptr %declared_class, align 8
  %memberidx10 = getelementptr inbounds %Class, ptr %44, i32 0, i32 6
  %45 = load ptr, ptr %memberidx10, align 8
  %46 = load ptr, ptr %parent_prop_name, align 8
  %47 = call ptr @Map_string_PropId____getitem__(ptr %45, ptr %46)
  store ptr %47, ptr %child_prop_id, align 8
  %48 = load ptr, ptr %this, align 8
  %memberidx11 = getelementptr inbounds %TypeChecker, ptr %48, i32 0, i32 0
  %49 = load ptr, ptr %memberidx11, align 8
  %50 = load ptr, ptr %parent_prop_id, align 8
  %51 = call i64 @get_class_prop_visibility(ptr %49, ptr %50)
  store i64 %51, ptr %parent_prop_visibility, align 4
  %52 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %TypeChecker, ptr %52, i32 0, i32 0
  %53 = load ptr, ptr %memberidx12, align 8
  %54 = load ptr, ptr %parent_prop_id, align 8
  %55 = call i1 @is_class_prop_static(ptr %53, ptr %54)
  store i1 %55, ptr %parent_prop_is_static, align 1
  %56 = load i1, ptr %parent_prop_is_static, align 1
  br i1 %56, label %if.entry13, label %else14

for.incr:                                         ; preds = %ifend21, %if.entry16, %if.entry13
  %57 = load ptr, ptr %tmp_it, align 8
  %58 = call ptr @MapIterator_string_PropId__next(ptr %57)
  store ptr %58, ptr %parent_entry_prop, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %59 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %59)
  ret void

if.entry13:                                       ; preds = %for.body
  br label %for.incr

else14:                                           ; preds = %for.body
  br label %ifend15

ifend15:                                          ; preds = %else14
  %60 = load i64, ptr %parent_prop_visibility, align 4
  %61 = icmp eq i64 %60, 1
  %62 = load ptr, ptr %parent_prop_type, align 8
  %63 = call i1 @is_function(ptr %62)
  %64 = and i1 %61, %63
  br i1 %64, label %if.entry16, label %else17

if.entry16:                                       ; preds = %ifend15
  br label %for.incr

else17:                                           ; preds = %ifend15
  br label %ifend18

ifend18:                                          ; preds = %else17
  %65 = load ptr, ptr %child_prop_id, align 8
  %66 = icmp eq ptr %65, null
  br i1 %66, label %if.entry19, label %else20

if.entry19:                                       ; preds = %ifend18
  %67 = load ptr, ptr %parent_prop_id, align 8
  %memberidx22 = getelementptr inbounds %PropId, ptr %67, i32 0, i32 0
  %68 = load i64, ptr %memberidx22, align 4
  %69 = icmp eq i64 %68, 1
  br i1 %69, label %if.entry23, label %else24

else20:                                           ; preds = %ifend18
  br label %ifend21

ifend21:                                          ; preds = %else20, %ifend31
  br label %for.incr

if.entry23:                                       ; preds = %if.entry19
  %70 = load ptr, ptr %declared_class, align 8
  %memberidx26 = getelementptr inbounds %Class, ptr %70, i32 0, i32 9
  %71 = load i64, ptr %memberidx26, align 4
  %72 = load ptr, ptr %declared_class, align 8
  %memberidx27 = getelementptr inbounds %Class, ptr %72, i32 0, i32 9
  %73 = add nsw i64 %71, 1
  store i64 %73, ptr %memberidx27, align 4
  br label %ifend25

else24:                                           ; preds = %if.entry19
  br label %ifend25

ifend25:                                          ; preds = %else24, %if.entry23
  %74 = load ptr, ptr %parent_prop_id, align 8
  %memberidx28 = getelementptr inbounds %PropId, ptr %74, i32 0, i32 0
  %75 = load i64, ptr %memberidx28, align 4
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %if.entry29, label %else30

if.entry29:                                       ; preds = %ifend25
  %77 = load ptr, ptr %declared_class, align 8
  %memberidx32 = getelementptr inbounds %Class, ptr %77, i32 0, i32 8
  %78 = load i64, ptr %memberidx32, align 4
  %79 = load ptr, ptr %declared_class, align 8
  %memberidx33 = getelementptr inbounds %Class, ptr %79, i32 0, i32 8
  %80 = add nsw i64 %78, 1
  store i64 %80, ptr %memberidx33, align 4
  br label %ifend31

else30:                                           ; preds = %ifend25
  br label %ifend31

ifend31:                                          ; preds = %else30, %if.entry29
  %81 = load ptr, ptr %declared_class, align 8
  %memberidx34 = getelementptr inbounds %Class, ptr %81, i32 0, i32 6
  %82 = load ptr, ptr %memberidx34, align 8
  %83 = load ptr, ptr %parent_prop_name, align 8
  %84 = load ptr, ptr %parent_prop_id, align 8
  call void @Map_string_PropId____setitem__(ptr %82, ptr %83, ptr %84)
  br label %ifend21
}

define void @MatchExpressionCase_constructor(ptr %0, i64 %1, ptr %2, ptr %3) {
  %kind = alloca i64, align 8
  %block = alloca ptr, align 8
  %this = alloca ptr, align 8
  %condition = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %kind, align 4
  store ptr %2, ptr %condition, align 8
  store ptr %3, ptr %block, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MatchExpressionCase, ptr %5, i32 0, i32 0
  %6 = load i64, ptr %kind, align 4
  store i64 %6, ptr %memberidx, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MatchExpressionCase, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %condition, align 8
  store ptr %8, ptr %memberidx1, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %MatchExpressionCase, ptr %9, i32 0, i32 2
  %10 = load ptr, ptr %block, align 8
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define ptr @Array_MatchExpressionCase__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MatchExpressionCase_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_MatchExpressionCase__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MatchExpressionCase_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_MatchExpressionCase__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MatchExpressionCase_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_MatchExpressionCase____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MatchExpressionCase_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_MatchExpressionCase__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_MatchExpressionCase____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_MatchExpressionCase____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_MatchExpressionCase_, ptr null, i32 1) to i32))
  call void @Array_MatchExpressionCase__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_MatchExpressionCase_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_MatchExpressionCase____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_MatchExpressionCase____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_MatchExpressionCase____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_MatchExpressionCase__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_MatchExpressionCase_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_MatchExpressionCase_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_MatchExpressionCase_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_MatchExpressionCase_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_MatchExpressionCase_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_MatchExpressionCase_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_MatchExpressionCase__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_MatchExpressionCase_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_MatchExpressionCase_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_MatchExpressionCase_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_MatchExpressionCase_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_MatchExpressionCase____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_MatchExpressionCase_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MatchExpressionCase_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_MatchExpressionCase__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_MatchExpressionCase____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MatchExpressionCase_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_MatchExpressionCase____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MatchExpressionCase_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_MatchExpressionCase____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MatchExpressionCase_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_MatchExpressionCase____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MatchExpressionCase_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_MatchExpressionCase____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_MatchExpressionCase____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_MatchExpressionCase____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_MatchExpressionCase__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MatchExpressionCase_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_MatchExpressionCase__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_MatchExpressionCase__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_MatchExpressionCase_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_MatchExpressionCase_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @MatchExpression_constructor(ptr %0, ptr %1, i1 %2) {
  %this = alloca ptr, align 8
  %subject = alloca ptr, align 8
  %use_ifs = alloca i1, align 1
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Expression_constructor, ptr %super, align 8
  store ptr %1, ptr %subject, align 8
  store i1 %2, ptr %use_ifs, align 1
  %4 = load ptr, ptr %super, align 8
  call void %4(ptr %0, i64 17)
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MatchExpression, ptr %5, i32 0, i32 4
  %6 = load ptr, ptr %subject, align 8
  store ptr %6, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MatchExpression, ptr %7, i32 0, i32 7
  %8 = load i1, ptr %use_ifs, align 1
  store i1 %8, ptr %memberidx1, align 1
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %MatchExpression, ptr %9, i32 0, i32 5
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_MatchExpressionCase_, ptr null, i32 1) to i32))
  call void @Array_MatchExpressionCase__constructor(ptr %10, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx3 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %10, i32 0, i32 2
  store i64 0, ptr %memberidx4, align 4
  store ptr %10, ptr %memberidx2, align 8
  %12 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %MatchExpression, ptr %12, i32 0, i32 6
  store ptr null, ptr %memberidx5, align 8
  ret void
}

define ptr @TypeChecker_check_match_expr(ptr %0, ptr %1, ptr %2) {
  %match_node = alloca ptr, align 8
  %expected_type = alloca ptr, align 8
  %this = alloca ptr, align 8
  %unknown_ty = alloca ptr, align 8
  %subject = alloca ptr, align 8
  %result_type = alloca ptr, align 8
  %use_ifs = alloca i1, align 1
  %match_expression = alloca ptr, align 8
  %match_case_kind = alloca i64, align 8
  %block = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %case_type = alloca ptr, align 8
  %expression = alloca ptr, align 8
  %case = alloca ptr, align 8
  %bin_exp = alloca ptr, align 8
  %block1 = alloca ptr, align 8
  %case_type2 = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %expected_type, align 8
  store ptr %2, ptr %match_node, align 8
  %4 = alloca %Type, align 8
  call void @Type_constructor(ptr %4, i64 21)
  store ptr %4, ptr %unknown_ty, align 8
  %5 = load ptr, ptr %this, align 8
  %6 = load ptr, ptr %unknown_ty, align 8
  %7 = load ptr, ptr %match_node, align 8
  %memberidx = getelementptr inbounds %MatchExpressionNode, ptr %7, i32 0, i32 3
  %8 = load ptr, ptr %memberidx, align 8
  %9 = call ptr @TypeChecker_check_expression(ptr %5, ptr %6, ptr %8)
  store ptr %9, ptr %subject, align 8
  %10 = load ptr, ptr %this, align 8
  %11 = call i1 @TypeChecker_has_errored(ptr %10)
  br i1 %11, label %if.entry, label %else

if.entry:                                         ; preds = %3
  ret ptr null

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %12 = load ptr, ptr %subject, align 8
  %13 = call i1 @is_null_expression(ptr %12)
  br i1 %13, label %if.entry3, label %else4

if.entry3:                                        ; preds = %ifend
  %14 = load ptr, ptr %this, align 8
  %15 = call ptr @string_from_bytes(ptr @501, i64 31)
  %16 = load ptr, ptr %match_node, align 8
  %memberidx6 = getelementptr inbounds %MatchExpressionNode, ptr %16, i32 0, i32 3
  %17 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %Node, ptr %17, i32 0, i32 0
  %18 = load ptr, ptr %memberidx7, align 8
  call void @TypeChecker_error(ptr %14, i64 5, ptr %15, ptr %18)
  ret ptr null

else4:                                            ; preds = %ifend
  br label %ifend5

ifend5:                                           ; preds = %else4
  %19 = load ptr, ptr %subject, align 8
  %memberidx8 = getelementptr inbounds %Expression, ptr %19, i32 0, i32 3
  %20 = load ptr, ptr %memberidx8, align 8
  %21 = call i1 @is_object(ptr %20)
  store i1 %21, ptr %use_ifs, align 1
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MatchExpression, ptr null, i32 1) to i32))
  %23 = load ptr, ptr %subject, align 8
  %24 = load i1, ptr %use_ifs, align 1
  call void @MatchExpression_constructor(ptr %22, ptr %23, i1 %24)
  store ptr %22, ptr %match_expression, align 8
  %25 = load ptr, ptr %unknown_ty, align 8
  store ptr %25, ptr %result_type, align 8
  br label %for.entry

for.entry:                                        ; preds = %ifend5
  %26 = load ptr, ptr %match_node, align 8
  %memberidx9 = getelementptr inbounds %MatchExpressionNode, ptr %26, i32 0, i32 4
  %27 = load ptr, ptr %memberidx9, align 8
  %28 = call ptr @Array_MatchExpressionCaseNode____iter__(ptr %27)
  store ptr %28, ptr %tmp_it, align 8
  %29 = load ptr, ptr %tmp_it, align 8
  %30 = call ptr @ArrayIterator_MatchExpressionCaseNode__next(ptr %29)
  store ptr %30, ptr %case, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %31 = load ptr, ptr %tmp_it, align 8
  %memberidx10 = getelementptr inbounds %ArrayIterator_MatchExpressionCaseNode_, ptr %31, i32 0, i32 0
  %32 = load i1, ptr %memberidx10, align 1
  %33 = xor i1 %32, true
  br i1 %33, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  store ptr null, ptr %expression, align 8
  store i64 1, ptr %match_case_kind, align 4
  %34 = load i1, ptr %use_ifs, align 1
  br i1 %34, label %if.entry11, label %else12

for.incr:                                         ; preds = %ifend53
  %35 = load ptr, ptr %tmp_it, align 8
  %36 = call ptr @ArrayIterator_MatchExpressionCaseNode__next(ptr %35)
  store ptr %36, ptr %case, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %37 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %37)
  %38 = load ptr, ptr %match_node, align 8
  %memberidx62 = getelementptr inbounds %MatchExpressionNode, ptr %38, i32 0, i32 5
  %39 = load ptr, ptr %memberidx62, align 8
  %40 = icmp eq ptr %39, null
  br i1 %40, label %if.entry63, label %else64

if.entry11:                                       ; preds = %for.body
  %41 = alloca %BinaryExpressionNode, align 8
  %42 = load ptr, ptr %match_node, align 8
  %memberidx14 = getelementptr inbounds %MatchExpressionNode, ptr %42, i32 0, i32 3
  %43 = load ptr, ptr %memberidx14, align 8
  %44 = load ptr, ptr %case, align 8
  %memberidx15 = getelementptr inbounds %MatchExpressionCaseNode, ptr %44, i32 0, i32 0
  %45 = load ptr, ptr %memberidx15, align 8
  call void @BinaryExpressionNode_constructor(ptr %41, ptr %43, i64 11, ptr %45)
  store ptr %41, ptr %bin_exp, align 8
  %46 = load ptr, ptr %this, align 8
  %47 = load ptr, ptr %subject, align 8
  %48 = load ptr, ptr %bin_exp, align 8
  %49 = call ptr @TypeChecker_check_object_binary_expr(ptr %46, ptr %47, ptr %48, ptr null)
  store ptr %49, ptr %expression, align 8
  %50 = load ptr, ptr %this, align 8
  %51 = call i1 @TypeChecker_has_errored(ptr %50)
  br i1 %51, label %if.entry16, label %else17

else12:                                           ; preds = %for.body
  %52 = load ptr, ptr %this, align 8
  %53 = load ptr, ptr %subject, align 8
  %memberidx27 = getelementptr inbounds %Expression, ptr %53, i32 0, i32 3
  %54 = load ptr, ptr %memberidx27, align 8
  %55 = load ptr, ptr %case, align 8
  %memberidx28 = getelementptr inbounds %MatchExpressionCaseNode, ptr %55, i32 0, i32 0
  %56 = load ptr, ptr %memberidx28, align 8
  %57 = call ptr @TypeChecker_check_expression(ptr %52, ptr %54, ptr %56)
  store ptr %57, ptr %expression, align 8
  %58 = load ptr, ptr %this, align 8
  %59 = call i1 @TypeChecker_has_errored(ptr %58)
  br i1 %59, label %if.entry29, label %else30

ifend13:                                          ; preds = %ifend36, %ifend22
  %60 = load ptr, ptr %this, align 8
  %61 = load ptr, ptr %case, align 8
  %memberidx43 = getelementptr inbounds %MatchExpressionCaseNode, ptr %61, i32 0, i32 1
  %62 = load ptr, ptr %memberidx43, align 8
  %63 = call ptr @TypeChecker_check_block(ptr %60, ptr %62, ptr null, i1 true)
  store ptr %63, ptr %block, align 8
  %64 = load ptr, ptr %this, align 8
  %65 = call i1 @TypeChecker_has_errored(ptr %64)
  br i1 %65, label %if.entry44, label %else45

if.entry16:                                       ; preds = %if.entry11
  ret ptr null

else17:                                           ; preds = %if.entry11
  br label %ifend18

ifend18:                                          ; preds = %else17
  store i64 0, ptr %match_case_kind, align 4
  %66 = load ptr, ptr %expression, align 8
  %memberidx19 = getelementptr inbounds %Expression, ptr %66, i32 0, i32 3
  %67 = load ptr, ptr %memberidx19, align 8
  %68 = call i1 @is_bool(ptr %67)
  %69 = xor i1 %68, true
  br i1 %69, label %if.entry20, label %else21

if.entry20:                                       ; preds = %ifend18
  %70 = load ptr, ptr %this, align 8
  %71 = load ptr, ptr %this, align 8
  %72 = load ptr, ptr %subject, align 8
  %memberidx23 = getelementptr inbounds %Expression, ptr %72, i32 0, i32 3
  %73 = load ptr, ptr %memberidx23, align 8
  %74 = call ptr @TypeChecker_dump_type(ptr %71, ptr %73)
  %75 = getelementptr inbounds %string, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %memberidx24 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %76, i32 0, i32 5
  %77 = load ptr, ptr %memberidx24, align 8
  %78 = call ptr %77(ptr %74)
  %79 = alloca ptr, align 8
  %80 = call i64 (ptr, ptr, ...) @asprintf(ptr %79, ptr @502, ptr %78)
  %81 = load ptr, ptr %79, align 8
  %82 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %82, ptr %81, i64 %80)
  tail call void @free(ptr %78)
  %83 = load ptr, ptr %case, align 8
  %memberidx25 = getelementptr inbounds %MatchExpressionCaseNode, ptr %83, i32 0, i32 0
  %84 = load ptr, ptr %memberidx25, align 8
  %memberidx26 = getelementptr inbounds %Node, ptr %84, i32 0, i32 0
  %85 = load ptr, ptr %memberidx26, align 8
  call void @TypeChecker_error(ptr %70, i64 5, ptr %82, ptr %85)
  ret ptr null

else21:                                           ; preds = %ifend18
  br label %ifend22

ifend22:                                          ; preds = %else21
  br label %ifend13

if.entry29:                                       ; preds = %else12
  ret ptr null

else30:                                           ; preds = %else12
  br label %ifend31

ifend31:                                          ; preds = %else30
  %86 = load ptr, ptr %this, align 8
  %87 = load ptr, ptr %subject, align 8
  %memberidx32 = getelementptr inbounds %Expression, ptr %87, i32 0, i32 3
  %88 = load ptr, ptr %memberidx32, align 8
  %89 = load ptr, ptr %expression, align 8
  %memberidx33 = getelementptr inbounds %Expression, ptr %89, i32 0, i32 3
  %90 = load ptr, ptr %memberidx33, align 8
  %91 = call i1 @TypeChecker_types_are_eq(ptr %86, ptr %88, ptr %90)
  %92 = xor i1 %91, true
  br i1 %92, label %if.entry34, label %else35

if.entry34:                                       ; preds = %ifend31
  %93 = load ptr, ptr %this, align 8
  %94 = load ptr, ptr %this, align 8
  %95 = load ptr, ptr %subject, align 8
  %memberidx37 = getelementptr inbounds %Expression, ptr %95, i32 0, i32 3
  %96 = load ptr, ptr %memberidx37, align 8
  %97 = call ptr @TypeChecker_dump_type(ptr %94, ptr %96)
  %98 = getelementptr inbounds %string, ptr %97, i32 0, i32 0
  %99 = load ptr, ptr %98, align 8
  %memberidx38 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %99, i32 0, i32 5
  %100 = load ptr, ptr %memberidx38, align 8
  %101 = call ptr %100(ptr %97)
  %102 = load ptr, ptr %this, align 8
  %103 = load ptr, ptr %expression, align 8
  %memberidx39 = getelementptr inbounds %Expression, ptr %103, i32 0, i32 3
  %104 = load ptr, ptr %memberidx39, align 8
  %105 = call ptr @TypeChecker_dump_type(ptr %102, ptr %104)
  %106 = getelementptr inbounds %string, ptr %105, i32 0, i32 0
  %107 = load ptr, ptr %106, align 8
  %memberidx40 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %107, i32 0, i32 5
  %108 = load ptr, ptr %memberidx40, align 8
  %109 = call ptr %108(ptr %105)
  %110 = alloca ptr, align 8
  %111 = call i64 (ptr, ptr, ...) @asprintf(ptr %110, ptr @503, ptr %101, ptr %109)
  %112 = load ptr, ptr %110, align 8
  %113 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %113, ptr %112, i64 %111)
  tail call void @free(ptr %101)
  tail call void @free(ptr %109)
  %114 = load ptr, ptr %case, align 8
  %memberidx41 = getelementptr inbounds %MatchExpressionCaseNode, ptr %114, i32 0, i32 0
  %115 = load ptr, ptr %memberidx41, align 8
  %memberidx42 = getelementptr inbounds %Node, ptr %115, i32 0, i32 0
  %116 = load ptr, ptr %memberidx42, align 8
  call void @TypeChecker_error(ptr %93, i64 5, ptr %113, ptr %116)
  ret ptr null

else35:                                           ; preds = %ifend31
  br label %ifend36

ifend36:                                          ; preds = %else35
  br label %ifend13

if.entry44:                                       ; preds = %ifend13
  ret ptr null

else45:                                           ; preds = %ifend13
  br label %ifend46

ifend46:                                          ; preds = %else45
  %117 = load ptr, ptr %block, align 8
  %memberidx47 = getelementptr inbounds %Block, ptr %117, i32 0, i32 4
  %118 = load ptr, ptr %memberidx47, align 8
  %119 = icmp ne ptr %118, null
  br i1 %119, label %true_block, label %false_block

true_block:                                       ; preds = %ifend46
  %120 = load ptr, ptr %block, align 8
  %memberidx48 = getelementptr inbounds %Block, ptr %120, i32 0, i32 4
  %121 = load ptr, ptr %memberidx48, align 8
  %memberidx49 = getelementptr inbounds %Expression, ptr %121, i32 0, i32 3
  %122 = load ptr, ptr %memberidx49, align 8
  br label %end

false_block:                                      ; preds = %ifend46
  %123 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %123, i64 10)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %122, %true_block ], [ %123, %false_block ]
  store ptr %ternary, ptr %case_type, align 8
  %124 = load ptr, ptr %result_type, align 8
  %memberidx50 = getelementptr inbounds %Type, ptr %124, i32 0, i32 0
  %125 = load i64, ptr %memberidx50, align 4
  %126 = icmp eq i64 %125, 21
  br i1 %126, label %if.entry51, label %else52

if.entry51:                                       ; preds = %end
  %127 = load ptr, ptr %case_type, align 8
  store ptr %127, ptr %result_type, align 8
  br label %ifend53

else52:                                           ; preds = %end
  %128 = load ptr, ptr %this, align 8
  %129 = load ptr, ptr %result_type, align 8
  %130 = load ptr, ptr %case_type, align 8
  %131 = call i1 @TypeChecker_types_are_eq(ptr %128, ptr %129, ptr %130)
  %132 = xor i1 %131, true
  br i1 %132, label %if.entry54, label %else55

ifend53:                                          ; preds = %ifend56, %if.entry51
  %133 = load ptr, ptr %match_expression, align 8
  %memberidx61 = getelementptr inbounds %MatchExpression, ptr %133, i32 0, i32 5
  %134 = load ptr, ptr %memberidx61, align 8
  %135 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MatchExpressionCase, ptr null, i32 1) to i32))
  %136 = load i64, ptr %match_case_kind, align 4
  %137 = load ptr, ptr %expression, align 8
  %138 = load ptr, ptr %block, align 8
  call void @MatchExpressionCase_constructor(ptr %135, i64 %136, ptr %137, ptr %138)
  call void @Array_MatchExpressionCase____sl__(ptr %134, ptr %135)
  br label %for.incr

if.entry54:                                       ; preds = %else52
  %139 = load ptr, ptr %this, align 8
  %140 = load ptr, ptr %this, align 8
  %141 = load ptr, ptr %result_type, align 8
  %142 = call ptr @TypeChecker_dump_type(ptr %140, ptr %141)
  %143 = getelementptr inbounds %string, ptr %142, i32 0, i32 0
  %144 = load ptr, ptr %143, align 8
  %memberidx57 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %144, i32 0, i32 5
  %145 = load ptr, ptr %memberidx57, align 8
  %146 = call ptr %145(ptr %142)
  %147 = load ptr, ptr %this, align 8
  %148 = load ptr, ptr %case_type, align 8
  %149 = call ptr @TypeChecker_dump_type(ptr %147, ptr %148)
  %150 = getelementptr inbounds %string, ptr %149, i32 0, i32 0
  %151 = load ptr, ptr %150, align 8
  %memberidx58 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %151, i32 0, i32 5
  %152 = load ptr, ptr %memberidx58, align 8
  %153 = call ptr %152(ptr %149)
  %154 = alloca ptr, align 8
  %155 = call i64 (ptr, ptr, ...) @asprintf(ptr %154, ptr @504, ptr %146, ptr %153)
  %156 = load ptr, ptr %154, align 8
  %157 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %157, ptr %156, i64 %155)
  tail call void @free(ptr %146)
  tail call void @free(ptr %153)
  %158 = load ptr, ptr %case, align 8
  %memberidx59 = getelementptr inbounds %MatchExpressionCaseNode, ptr %158, i32 0, i32 0
  %159 = load ptr, ptr %memberidx59, align 8
  %memberidx60 = getelementptr inbounds %Node, ptr %159, i32 0, i32 0
  %160 = load ptr, ptr %memberidx60, align 8
  call void @TypeChecker_error(ptr %139, i64 5, ptr %157, ptr %160)
  ret ptr null

else55:                                           ; preds = %else52
  br label %ifend56

ifend56:                                          ; preds = %else55
  br label %ifend53

if.entry63:                                       ; preds = %for.end
  %161 = load ptr, ptr %this, align 8
  %162 = call ptr @string_from_bytes(ptr @505, i64 55)
  %163 = load ptr, ptr %match_node, align 8
  %memberidx66 = getelementptr inbounds %Node, ptr %163, i32 0, i32 0
  %164 = load ptr, ptr %memberidx66, align 8
  call void @TypeChecker_error(ptr %161, i64 4, ptr %162, ptr %164)
  ret ptr null

else64:                                           ; preds = %for.end
  %165 = load ptr, ptr %this, align 8
  %166 = load ptr, ptr %match_node, align 8
  %memberidx67 = getelementptr inbounds %MatchExpressionNode, ptr %166, i32 0, i32 5
  %167 = load ptr, ptr %memberidx67, align 8
  %168 = call ptr @TypeChecker_check_block(ptr %165, ptr %167, ptr null, i1 true)
  store ptr %168, ptr %block1, align 8
  %169 = load ptr, ptr %block1, align 8
  %memberidx71 = getelementptr inbounds %Block, ptr %169, i32 0, i32 4
  %170 = load ptr, ptr %memberidx71, align 8
  %171 = icmp ne ptr %170, null
  br i1 %171, label %true_block68, label %false_block69

ifend65:                                          ; preds = %ifend77
  %172 = load ptr, ptr %match_expression, align 8
  %memberidx82 = getelementptr inbounds %Expression, ptr %172, i32 0, i32 3
  %173 = load ptr, ptr %result_type, align 8
  store ptr %173, ptr %memberidx82, align 8
  %174 = load ptr, ptr %match_expression, align 8
  ret ptr %174

true_block68:                                     ; preds = %else64
  %175 = load ptr, ptr %block1, align 8
  %memberidx72 = getelementptr inbounds %Block, ptr %175, i32 0, i32 4
  %176 = load ptr, ptr %memberidx72, align 8
  %memberidx73 = getelementptr inbounds %Expression, ptr %176, i32 0, i32 3
  %177 = load ptr, ptr %memberidx73, align 8
  br label %end70

false_block69:                                    ; preds = %else64
  %178 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %178, i64 10)
  br label %end70

end70:                                            ; preds = %false_block69, %true_block68
  %ternary74 = phi ptr [ %177, %true_block68 ], [ %178, %false_block69 ]
  store ptr %ternary74, ptr %case_type2, align 8
  %179 = load ptr, ptr %this, align 8
  %180 = load ptr, ptr %result_type, align 8
  %181 = load ptr, ptr %case_type2, align 8
  %182 = call i1 @TypeChecker_types_are_eq(ptr %179, ptr %180, ptr %181)
  %183 = xor i1 %182, true
  br i1 %183, label %if.entry75, label %else76

if.entry75:                                       ; preds = %end70
  %184 = load ptr, ptr %this, align 8
  %185 = load ptr, ptr %this, align 8
  %186 = load ptr, ptr %result_type, align 8
  %187 = call ptr @TypeChecker_dump_type(ptr %185, ptr %186)
  %188 = getelementptr inbounds %string, ptr %187, i32 0, i32 0
  %189 = load ptr, ptr %188, align 8
  %memberidx78 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %189, i32 0, i32 5
  %190 = load ptr, ptr %memberidx78, align 8
  %191 = call ptr %190(ptr %187)
  %192 = load ptr, ptr %this, align 8
  %193 = load ptr, ptr %case_type2, align 8
  %194 = call ptr @TypeChecker_dump_type(ptr %192, ptr %193)
  %195 = getelementptr inbounds %string, ptr %194, i32 0, i32 0
  %196 = load ptr, ptr %195, align 8
  %memberidx79 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %196, i32 0, i32 5
  %197 = load ptr, ptr %memberidx79, align 8
  %198 = call ptr %197(ptr %194)
  %199 = alloca ptr, align 8
  %200 = call i64 (ptr, ptr, ...) @asprintf(ptr %199, ptr @506, ptr %191, ptr %198)
  %201 = load ptr, ptr %199, align 8
  %202 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %202, ptr %201, i64 %200)
  tail call void @free(ptr %191)
  tail call void @free(ptr %198)
  %203 = load ptr, ptr %match_node, align 8
  %memberidx80 = getelementptr inbounds %Node, ptr %203, i32 0, i32 0
  %204 = load ptr, ptr %memberidx80, align 8
  call void @TypeChecker_error(ptr %184, i64 5, ptr %202, ptr %204)
  ret ptr null

else76:                                           ; preds = %end70
  br label %ifend77

ifend77:                                          ; preds = %else76
  %205 = load ptr, ptr %match_expression, align 8
  %memberidx81 = getelementptr inbounds %MatchExpression, ptr %205, i32 0, i32 6
  %206 = load ptr, ptr %block1, align 8
  store ptr %206, ptr %memberidx81, align 8
  br label %ifend65
}

define ptr @TypeChecker_check_member_access(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %accessor = alloca ptr, align 8
  %accessee = alloca ptr, align 8
  %member_name = alloca ptr, align 8
  %visibility = alloca i64, align 8
  %method = alloca ptr, align 8
  %field = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %accessor, align 8
  store i64 2, ptr %visibility, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %accessor, align 8
  %6 = call ptr @get_class_from_prop_id(ptr %4, ptr %5)
  store ptr %6, ptr %accessee, align 8
  %7 = call ptr @string_from_bytes(ptr @315, i64 0)
  store ptr %7, ptr %member_name, align 8
  %8 = load ptr, ptr %accessor, align 8
  %memberidx1 = getelementptr inbounds %PropId, ptr %8, i32 0, i32 0
  %9 = load i64, ptr %memberidx1, align 4
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %11 = load ptr, ptr %accessee, align 8
  %memberidx2 = getelementptr inbounds %Class, ptr %11, i32 0, i32 5
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = load ptr, ptr %accessor, align 8
  %memberidx3 = getelementptr inbounds %PropId, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx3, align 4
  %15 = call ptr @Array_ClassMethod____getitem__(ptr %12, i64 %14)
  store ptr %15, ptr %method, align 8
  %16 = load ptr, ptr %method, align 8
  %memberidx4 = getelementptr inbounds %ClassMethod, ptr %16, i32 0, i32 2
  %17 = load i64, ptr %memberidx4, align 4
  store i64 %17, ptr %visibility, align 4
  %18 = load ptr, ptr %method, align 8
  %memberidx5 = getelementptr inbounds %ClassMethod, ptr %18, i32 0, i32 3
  %19 = load ptr, ptr %memberidx5, align 8
  store ptr %19, ptr %member_name, align 8
  br label %ifend

else:                                             ; preds = %2
  %20 = load ptr, ptr %accessee, align 8
  %memberidx6 = getelementptr inbounds %Class, ptr %20, i32 0, i32 4
  %21 = load ptr, ptr %memberidx6, align 8
  %22 = load ptr, ptr %accessor, align 8
  %memberidx7 = getelementptr inbounds %PropId, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx7, align 4
  %24 = call ptr @Array_ClassField____getitem__(ptr %21, i64 %23)
  store ptr %24, ptr %field, align 8
  %25 = load ptr, ptr %field, align 8
  %memberidx8 = getelementptr inbounds %ClassField, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx8, align 4
  store i64 %26, ptr %visibility, align 4
  %27 = load ptr, ptr %field, align 8
  %memberidx9 = getelementptr inbounds %ClassField, ptr %27, i32 0, i32 3
  %28 = load ptr, ptr %memberidx9, align 8
  store ptr %28, ptr %member_name, align 8
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %29 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %TypeChecker, ptr %29, i32 0, i32 1
  %30 = load ptr, ptr %memberidx10, align 8
  %31 = icmp ne ptr %30, null
  br i1 %31, label %if.entry11, label %else12

if.entry11:                                       ; preds = %ifend
  %32 = load ptr, ptr %this, align 8
  %memberidx14 = getelementptr inbounds %TypeChecker, ptr %32, i32 0, i32 1
  %33 = load ptr, ptr %memberidx14, align 8
  %memberidx15 = getelementptr inbounds %TypeId, ptr %33, i32 0, i32 0
  %34 = load i64, ptr %memberidx15, align 4
  %35 = load ptr, ptr %accessee, align 8
  %memberidx16 = getelementptr inbounds %Class, ptr %35, i32 0, i32 0
  %36 = load ptr, ptr %memberidx16, align 8
  %memberidx17 = getelementptr inbounds %TypeId, ptr %36, i32 0, i32 0
  %37 = load i64, ptr %memberidx17, align 4
  %38 = icmp ne i64 %34, %37
  %39 = load ptr, ptr %accessee, align 8
  %memberidx18 = getelementptr inbounds %Class, ptr %39, i32 0, i32 0
  %40 = load ptr, ptr %memberidx18, align 8
  %memberidx19 = getelementptr inbounds %TypeId, ptr %40, i32 0, i32 2
  %41 = load i64, ptr %memberidx19, align 4
  %42 = load ptr, ptr %this, align 8
  %memberidx20 = getelementptr inbounds %TypeChecker, ptr %42, i32 0, i32 1
  %43 = load ptr, ptr %memberidx20, align 8
  %memberidx21 = getelementptr inbounds %TypeId, ptr %43, i32 0, i32 2
  %44 = load i64, ptr %memberidx21, align 4
  %45 = icmp ne i64 %41, %44
  %46 = or i1 %38, %45
  br i1 %46, label %if.entry22, label %else23

else12:                                           ; preds = %ifend
  %47 = load i64, ptr %visibility, align 4
  %48 = icmp ne i64 %47, 2
  br i1 %48, label %if.entry31, label %else32

ifend13:                                          ; preds = %ifend33, %ifend24
  ret ptr null

if.entry22:                                       ; preds = %if.entry11
  %49 = load i64, ptr %visibility, align 4
  %50 = icmp eq i64 %49, 1
  br i1 %50, label %if.entry25, label %else26

else23:                                           ; preds = %if.entry11
  br label %ifend24

ifend24:                                          ; preds = %else23, %ifend27
  br label %ifend13

if.entry25:                                       ; preds = %if.entry22
  %51 = load ptr, ptr %member_name, align 8
  %52 = getelementptr inbounds %string, ptr %51, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %memberidx28 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %53, i32 0, i32 5
  %54 = load ptr, ptr %memberidx28, align 8
  %55 = call ptr %54(ptr %51)
  %56 = load ptr, ptr %accessee, align 8
  %memberidx29 = getelementptr inbounds %Class, ptr %56, i32 0, i32 1
  %57 = load ptr, ptr %memberidx29, align 8
  %58 = getelementptr inbounds %string, ptr %57, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %memberidx30 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %59, i32 0, i32 5
  %60 = load ptr, ptr %memberidx30, align 8
  %61 = call ptr %60(ptr %57)
  %62 = alloca ptr, align 8
  %63 = call i64 (ptr, ptr, ...) @asprintf(ptr %62, ptr @473, ptr %55, ptr %61)
  %64 = load ptr, ptr %62, align 8
  %65 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %65, ptr %64, i64 %63)
  tail call void @free(ptr %55)
  tail call void @free(ptr %61)
  ret ptr %65

else26:                                           ; preds = %if.entry22
  br label %ifend27

ifend27:                                          ; preds = %else26
  br label %ifend24

if.entry31:                                       ; preds = %else12
  %66 = load ptr, ptr %member_name, align 8
  %67 = getelementptr inbounds %string, ptr %66, i32 0, i32 0
  %68 = load ptr, ptr %67, align 8
  %memberidx34 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %68, i32 0, i32 5
  %69 = load ptr, ptr %memberidx34, align 8
  %70 = call ptr %69(ptr %66)
  %71 = load i64, ptr %visibility, align 4
  %72 = call ptr @dump_access(i64 %71)
  %73 = getelementptr inbounds %string, ptr %72, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %memberidx35 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %74, i32 0, i32 5
  %75 = load ptr, ptr %memberidx35, align 8
  %76 = call ptr %75(ptr %72)
  %77 = load ptr, ptr %accessee, align 8
  %memberidx36 = getelementptr inbounds %Class, ptr %77, i32 0, i32 1
  %78 = load ptr, ptr %memberidx36, align 8
  %79 = getelementptr inbounds %string, ptr %78, i32 0, i32 0
  %80 = load ptr, ptr %79, align 8
  %memberidx37 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %80, i32 0, i32 5
  %81 = load ptr, ptr %memberidx37, align 8
  %82 = call ptr %81(ptr %78)
  %83 = alloca ptr, align 8
  %84 = call i64 (ptr, ptr, ...) @asprintf(ptr %83, ptr @474, ptr %70, ptr %76, ptr %82)
  %85 = load ptr, ptr %83, align 8
  %86 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %86, ptr %85, i64 %84)
  tail call void @free(ptr %70)
  tail call void @free(ptr %76)
  tail call void @free(ptr %82)
  ret ptr %86

else32:                                           ; preds = %else12
  br label %ifend33

ifend33:                                          ; preds = %else32
  br label %ifend13
}

define void @ReturnStatement_constructor(ptr %0) {
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Statement_constructor, ptr %super, align 8
  %2 = load ptr, ptr %super, align 8
  call void %2(ptr %0, i64 7)
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ReturnStatement, ptr %3, i32 0, i32 1
  store ptr null, ptr %memberidx, align 8
  ret void
}

define ptr @TypeChecker_check_can_return(ptr %0, ptr %1) {
  %return_stmt = alloca ptr, align 8
  %this = alloca ptr, align 8
  %expr = alloca ptr, align 8
  %current_function_return_type = alloca ptr, align 8
  %rt_stmt = alloca ptr, align 8
  %rt_value = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %return_stmt, align 8
  %3 = load ptr, ptr %return_stmt, align 8
  %memberidx = getelementptr inbounds %ReturnStatementNode, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  store ptr %4, ptr %expr, align 8
  %5 = load ptr, ptr %this, align 8
  %6 = call ptr @TypeChecker_get_current_function_type(ptr %5)
  %memberidx1 = getelementptr inbounds %FunctionType, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %memberidx1, align 8
  store ptr %7, ptr %current_function_return_type, align 8
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ReturnStatement, ptr null, i32 1) to i32))
  call void @ReturnStatement_constructor(ptr %8)
  store ptr %8, ptr %rt_stmt, align 8
  %9 = load ptr, ptr %expr, align 8
  %10 = icmp ne ptr %9, null
  br i1 %10, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %11 = load ptr, ptr %this, align 8
  %12 = load ptr, ptr %current_function_return_type, align 8
  %13 = load ptr, ptr %expr, align 8
  %14 = call ptr @TypeChecker_check_expression(ptr %11, ptr %12, ptr %13)
  store ptr %14, ptr %rt_value, align 8
  %15 = load ptr, ptr %this, align 8
  %16 = call i1 @TypeChecker_has_errored(ptr %15)
  br i1 %16, label %if.entry2, label %else3

else:                                             ; preds = %2
  %17 = load ptr, ptr %current_function_return_type, align 8
  %memberidx14 = getelementptr inbounds %Type, ptr %17, i32 0, i32 0
  %18 = load i64, ptr %memberidx14, align 4
  %19 = icmp ne i64 %18, 10
  br i1 %19, label %if.entry15, label %else16

ifend:                                            ; preds = %ifend17, %ifend8
  %20 = load ptr, ptr %rt_stmt, align 8
  ret ptr %20

if.entry2:                                        ; preds = %if.entry
  ret ptr null

else3:                                            ; preds = %if.entry
  br label %ifend4

ifend4:                                           ; preds = %else3
  %21 = load ptr, ptr %this, align 8
  %22 = load ptr, ptr %current_function_return_type, align 8
  %23 = load ptr, ptr %rt_value, align 8
  %memberidx5 = getelementptr inbounds %Expression, ptr %23, i32 0, i32 3
  %24 = load ptr, ptr %memberidx5, align 8
  %25 = call i1 @TypeChecker_types_are_eq(ptr %21, ptr %22, ptr %24)
  %26 = xor i1 %25, true
  br i1 %26, label %if.entry6, label %else7

if.entry6:                                        ; preds = %ifend4
  %27 = load ptr, ptr %this, align 8
  %28 = load ptr, ptr %this, align 8
  %29 = load ptr, ptr %current_function_return_type, align 8
  %30 = call ptr @TypeChecker_dump_type(ptr %28, ptr %29)
  %31 = getelementptr inbounds %string, ptr %30, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  %memberidx9 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %32, i32 0, i32 5
  %33 = load ptr, ptr %memberidx9, align 8
  %34 = call ptr %33(ptr %30)
  %35 = load ptr, ptr %this, align 8
  %36 = load ptr, ptr %rt_value, align 8
  %memberidx10 = getelementptr inbounds %Expression, ptr %36, i32 0, i32 3
  %37 = load ptr, ptr %memberidx10, align 8
  %38 = call ptr @TypeChecker_dump_type(ptr %35, ptr %37)
  %39 = getelementptr inbounds %string, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %memberidx11 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %40, i32 0, i32 5
  %41 = load ptr, ptr %memberidx11, align 8
  %42 = call ptr %41(ptr %38)
  %43 = alloca ptr, align 8
  %44 = call i64 (ptr, ptr, ...) @asprintf(ptr %43, ptr @520, ptr %34, ptr %42)
  %45 = load ptr, ptr %43, align 8
  %46 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %46, ptr %45, i64 %44)
  tail call void @free(ptr %34)
  tail call void @free(ptr %42)
  %47 = load ptr, ptr %expr, align 8
  %memberidx12 = getelementptr inbounds %Node, ptr %47, i32 0, i32 0
  %48 = load ptr, ptr %memberidx12, align 8
  call void @TypeChecker_error(ptr %27, i64 5, ptr %46, ptr %48)
  ret ptr null

else7:                                            ; preds = %ifend4
  br label %ifend8

ifend8:                                           ; preds = %else7
  %49 = load ptr, ptr %rt_stmt, align 8
  %memberidx13 = getelementptr inbounds %ReturnStatement, ptr %49, i32 0, i32 1
  %50 = load ptr, ptr %rt_value, align 8
  store ptr %50, ptr %memberidx13, align 8
  br label %ifend

if.entry15:                                       ; preds = %else
  %51 = load ptr, ptr %this, align 8
  %52 = call ptr @string_from_bytes(ptr @521, i64 32)
  %53 = load ptr, ptr %return_stmt, align 8
  %memberidx18 = getelementptr inbounds %Node, ptr %53, i32 0, i32 0
  %54 = load ptr, ptr %memberidx18, align 8
  call void @TypeChecker_error(ptr %51, i64 5, ptr %52, ptr %54)
  ret ptr null

else16:                                           ; preds = %else
  br label %ifend17

ifend17:                                          ; preds = %else16
  br label %ifend
}

define void @TypeChecker_declare_global_const(ptr %0, ptr %1) {
  %const_decl_node = alloca ptr, align 8
  %this = alloca ptr, align 8
  %const_stmt = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %const_decl_node, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %const_decl_node, align 8
  %5 = call ptr @TypeChecker_check_const_declaration(ptr %3, ptr %4)
  store ptr %5, ptr %const_stmt, align 8
  %6 = load ptr, ptr %this, align 8
  %7 = call i1 @TypeChecker_has_errored(ptr %6)
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret void

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %8 = load ptr, ptr %const_stmt, align 8
  %memberidx = getelementptr inbounds %ConstDeclaration, ptr %8, i32 0, i32 3
  store i1 true, ptr %memberidx, align 1
  %9 = load ptr, ptr %this, align 8
  %10 = call ptr @TypeChecker_get_current_module(ptr %9)
  %memberidx1 = getelementptr inbounds %Module, ptr %10, i32 0, i32 8
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = load ptr, ptr %const_stmt, align 8
  call void @Array_ConstDeclaration____sl__(ptr %11, ptr %12)
  ret void
}

define ptr @TypeChecker_check_var_declaration(ptr %0, ptr %1) {
  %var_decl_node = alloca ptr, align 8
  %this = alloca ptr, align 8
  %var = alloca ptr, align 8
  %current_scope = alloca ptr, align 8
  %name = alloca ptr, align 8
  %var_type = alloca ptr, align 8
  %value = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %var_decl_node, align 8
  %3 = load ptr, ptr %var_decl_node, align 8
  %memberidx = getelementptr inbounds %VarDeclarationStatement, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx1, align 8
  store ptr %5, ptr %name, align 8
  %6 = load ptr, ptr %this, align 8
  %7 = load ptr, ptr %name, align 8
  %8 = call i1 @TypeChecker_is_constant_in_scope(ptr %6, ptr %7)
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %9 = load ptr, ptr %this, align 8
  %10 = load ptr, ptr %name, align 8
  %11 = getelementptr inbounds %string, ptr %10, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx2, align 8
  %14 = call ptr %13(ptr %10)
  %15 = alloca ptr, align 8
  %16 = call i64 (ptr, ptr, ...) @asprintf(ptr %15, ptr @353, ptr %14)
  %17 = load ptr, ptr %15, align 8
  %18 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %18, ptr %17, i64 %16)
  tail call void @free(ptr %14)
  %19 = load ptr, ptr %var_decl_node, align 8
  %memberidx3 = getelementptr inbounds %VarDeclarationStatement, ptr %19, i32 0, i32 2
  %20 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Token, ptr %20, i32 0, i32 1
  %21 = load ptr, ptr %memberidx4, align 8
  call void @TypeChecker_error(ptr %9, i64 1, ptr %18, ptr %21)
  ret ptr null

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %22 = load ptr, ptr %this, align 8
  %23 = call ptr @TypeChecker_get_current_scope(ptr %22)
  store ptr %23, ptr %current_scope, align 8
  %24 = load ptr, ptr %var_decl_node, align 8
  %memberidx5 = getelementptr inbounds %VarDeclarationStatement, ptr %24, i32 0, i32 3
  %25 = load ptr, ptr %memberidx5, align 8
  %26 = icmp ne ptr %25, null
  br i1 %26, label %true_block, label %false_block

true_block:                                       ; preds = %ifend
  %27 = load ptr, ptr %this, align 8
  %28 = load ptr, ptr %var_decl_node, align 8
  %memberidx6 = getelementptr inbounds %VarDeclarationStatement, ptr %28, i32 0, i32 3
  %29 = load ptr, ptr %memberidx6, align 8
  %30 = call ptr @TypeChecker_check_type(ptr %27, ptr %29)
  br label %end

false_block:                                      ; preds = %ifend
  %31 = call ptr @Type_unknown()
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %30, %true_block ], [ %31, %false_block ]
  store ptr %ternary, ptr %var_type, align 8
  %32 = load ptr, ptr %this, align 8
  %33 = call i1 @TypeChecker_has_errored(ptr %32)
  br i1 %33, label %if.entry7, label %else8

if.entry7:                                        ; preds = %end
  ret ptr null

else8:                                            ; preds = %end
  br label %ifend9

ifend9:                                           ; preds = %else8
  %34 = load ptr, ptr %var_decl_node, align 8
  %memberidx10 = getelementptr inbounds %VarDeclarationStatement, ptr %34, i32 0, i32 4
  %35 = load ptr, ptr %memberidx10, align 8
  %36 = icmp eq ptr %35, null
  %37 = load ptr, ptr %var_type, align 8
  %memberidx11 = getelementptr inbounds %Type, ptr %37, i32 0, i32 0
  %38 = load i64, ptr %memberidx11, align 4
  %39 = icmp eq i64 %38, 21
  %40 = and i1 %36, %39
  br i1 %40, label %if.entry12, label %else13

if.entry12:                                       ; preds = %ifend9
  %41 = load ptr, ptr %this, align 8
  %42 = load ptr, ptr %name, align 8
  %43 = getelementptr inbounds %string, ptr %42, i32 0, i32 0
  %44 = load ptr, ptr %43, align 8
  %memberidx15 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %44, i32 0, i32 5
  %45 = load ptr, ptr %memberidx15, align 8
  %46 = call ptr %45(ptr %42)
  %47 = alloca ptr, align 8
  %48 = call i64 (ptr, ptr, ...) @asprintf(ptr %47, ptr @507, ptr %46)
  %49 = load ptr, ptr %47, align 8
  %50 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %50, ptr %49, i64 %48)
  tail call void @free(ptr %46)
  %51 = load ptr, ptr %var_decl_node, align 8
  %memberidx16 = getelementptr inbounds %VarDeclarationStatement, ptr %51, i32 0, i32 2
  %52 = load ptr, ptr %memberidx16, align 8
  %memberidx17 = getelementptr inbounds %Token, ptr %52, i32 0, i32 1
  %53 = load ptr, ptr %memberidx17, align 8
  call void @TypeChecker_error(ptr %41, i64 4, ptr %50, ptr %53)
  ret ptr null

else13:                                           ; preds = %ifend9
  br label %ifend14

ifend14:                                          ; preds = %else13
  %54 = load ptr, ptr %var_decl_node, align 8
  %memberidx21 = getelementptr inbounds %VarDeclarationStatement, ptr %54, i32 0, i32 4
  %55 = load ptr, ptr %memberidx21, align 8
  %56 = icmp ne ptr %55, null
  br i1 %56, label %true_block18, label %false_block19

true_block18:                                     ; preds = %ifend14
  %57 = load ptr, ptr %this, align 8
  %58 = load ptr, ptr %var_type, align 8
  %59 = load ptr, ptr %var_decl_node, align 8
  %memberidx22 = getelementptr inbounds %VarDeclarationStatement, ptr %59, i32 0, i32 4
  %60 = load ptr, ptr %memberidx22, align 8
  %61 = call ptr @TypeChecker_check_expression(ptr %57, ptr %58, ptr %60)
  br label %end20

false_block19:                                    ; preds = %ifend14
  br label %end20

end20:                                            ; preds = %false_block19, %true_block18
  %ternary23 = phi ptr [ %61, %true_block18 ], [ null, %false_block19 ]
  store ptr %ternary23, ptr %value, align 8
  %62 = load ptr, ptr %this, align 8
  %63 = call i1 @TypeChecker_has_errored(ptr %62)
  br i1 %63, label %if.entry24, label %else25

if.entry24:                                       ; preds = %end20
  ret ptr null

else25:                                           ; preds = %end20
  br label %ifend26

ifend26:                                          ; preds = %else25
  %64 = load ptr, ptr %value, align 8
  %65 = icmp ne ptr %64, null
  br i1 %65, label %if.entry27, label %else28

if.entry27:                                       ; preds = %ifend26
  %66 = load ptr, ptr %value, align 8
  %67 = call i1 @is_null_expression(ptr %66)
  %68 = load ptr, ptr %value, align 8
  %memberidx30 = getelementptr inbounds %Expression, ptr %68, i32 0, i32 3
  %69 = load ptr, ptr %memberidx30, align 8
  %memberidx31 = getelementptr inbounds %Type, ptr %69, i32 0, i32 0
  %70 = load i64, ptr %memberidx31, align 4
  %71 = icmp eq i64 %70, 21
  %72 = and i1 %67, %71
  br i1 %72, label %if.entry32, label %else33

else28:                                           ; preds = %ifend26
  br label %ifend29

ifend29:                                          ; preds = %else28, %ifend53
  %73 = load ptr, ptr %current_scope, align 8
  %memberidx55 = getelementptr inbounds %Scope, ptr %73, i32 0, i32 1
  %74 = load ptr, ptr %memberidx55, align 8
  %75 = load ptr, ptr %name, align 8
  %76 = call ptr @Map_string_VarId____getitem__(ptr %74, ptr %75)
  %77 = icmp ne ptr %76, null
  br i1 %77, label %if.entry56, label %else57

if.entry32:                                       ; preds = %if.entry27
  %78 = load ptr, ptr %this, align 8
  %79 = call ptr @string_from_bytes(ptr @508, i64 69)
  %80 = load ptr, ptr %var_decl_node, align 8
  %memberidx35 = getelementptr inbounds %Node, ptr %80, i32 0, i32 0
  %81 = load ptr, ptr %memberidx35, align 8
  call void @TypeChecker_error(ptr %78, i64 5, ptr %79, ptr %81)
  ret ptr null

else33:                                           ; preds = %if.entry27
  br label %ifend34

ifend34:                                          ; preds = %else33
  %82 = load ptr, ptr %var_type, align 8
  %memberidx36 = getelementptr inbounds %Type, ptr %82, i32 0, i32 0
  %83 = load i64, ptr %memberidx36, align 4
  %84 = icmp ne i64 %83, 21
  %85 = load ptr, ptr %this, align 8
  %86 = load ptr, ptr %var_type, align 8
  %87 = load ptr, ptr %value, align 8
  %memberidx37 = getelementptr inbounds %Expression, ptr %87, i32 0, i32 3
  %88 = load ptr, ptr %memberidx37, align 8
  %89 = call i1 @TypeChecker_types_are_eq(ptr %85, ptr %86, ptr %88)
  %90 = xor i1 %89, true
  %91 = and i1 %84, %90
  br i1 %91, label %if.entry38, label %else39

if.entry38:                                       ; preds = %ifend34
  %92 = load ptr, ptr %this, align 8
  %93 = load ptr, ptr %this, align 8
  %94 = load ptr, ptr %var_type, align 8
  %95 = call ptr @TypeChecker_dump_type(ptr %93, ptr %94)
  %96 = getelementptr inbounds %string, ptr %95, i32 0, i32 0
  %97 = load ptr, ptr %96, align 8
  %memberidx41 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %97, i32 0, i32 5
  %98 = load ptr, ptr %memberidx41, align 8
  %99 = call ptr %98(ptr %95)
  %100 = load ptr, ptr %this, align 8
  %101 = load ptr, ptr %value, align 8
  %memberidx42 = getelementptr inbounds %Expression, ptr %101, i32 0, i32 3
  %102 = load ptr, ptr %memberidx42, align 8
  %103 = call ptr @TypeChecker_dump_type(ptr %100, ptr %102)
  %104 = getelementptr inbounds %string, ptr %103, i32 0, i32 0
  %105 = load ptr, ptr %104, align 8
  %memberidx43 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %105, i32 0, i32 5
  %106 = load ptr, ptr %memberidx43, align 8
  %107 = call ptr %106(ptr %103)
  %108 = alloca ptr, align 8
  %109 = call i64 (ptr, ptr, ...) @asprintf(ptr %108, ptr @509, ptr %99, ptr %107)
  %110 = load ptr, ptr %108, align 8
  %111 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %111, ptr %110, i64 %109)
  tail call void @free(ptr %99)
  tail call void @free(ptr %107)
  %112 = load ptr, ptr %var_decl_node, align 8
  %memberidx44 = getelementptr inbounds %Node, ptr %112, i32 0, i32 0
  %113 = load ptr, ptr %memberidx44, align 8
  call void @TypeChecker_error(ptr %92, i64 5, ptr %111, ptr %113)
  ret ptr null

else39:                                           ; preds = %ifend34
  br label %ifend40

ifend40:                                          ; preds = %else39
  %114 = load ptr, ptr %var_type, align 8
  %memberidx45 = getelementptr inbounds %Type, ptr %114, i32 0, i32 0
  %115 = load i64, ptr %memberidx45, align 4
  %116 = icmp eq i64 %115, 21
  br i1 %116, label %if.entry46, label %else47

if.entry46:                                       ; preds = %ifend40
  %117 = load ptr, ptr %value, align 8
  %memberidx49 = getelementptr inbounds %Expression, ptr %117, i32 0, i32 3
  %118 = load ptr, ptr %memberidx49, align 8
  store ptr %118, ptr %var_type, align 8
  br label %ifend48

else47:                                           ; preds = %ifend40
  br label %ifend48

ifend48:                                          ; preds = %else47, %if.entry46
  %119 = load ptr, ptr %var_type, align 8
  %memberidx50 = getelementptr inbounds %Type, ptr %119, i32 0, i32 0
  %120 = load i64, ptr %memberidx50, align 4
  %121 = icmp eq i64 %120, 10
  br i1 %121, label %if.entry51, label %else52

if.entry51:                                       ; preds = %ifend48
  %122 = load ptr, ptr %this, align 8
  %123 = call ptr @string_from_bytes(ptr @510, i64 38)
  %124 = load ptr, ptr %var_decl_node, align 8
  %memberidx54 = getelementptr inbounds %Node, ptr %124, i32 0, i32 0
  %125 = load ptr, ptr %memberidx54, align 8
  call void @TypeChecker_error(ptr %122, i64 5, ptr %123, ptr %125)
  ret ptr null

else52:                                           ; preds = %ifend48
  br label %ifend53

ifend53:                                          ; preds = %else52
  br label %ifend29

if.entry56:                                       ; preds = %ifend29
  %126 = load ptr, ptr %this, align 8
  %127 = load ptr, ptr %name, align 8
  %128 = getelementptr inbounds %string, ptr %127, i32 0, i32 0
  %129 = load ptr, ptr %128, align 8
  %memberidx59 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %129, i32 0, i32 5
  %130 = load ptr, ptr %memberidx59, align 8
  %131 = call ptr %130(ptr %127)
  %132 = alloca ptr, align 8
  %133 = call i64 (ptr, ptr, ...) @asprintf(ptr %132, ptr @511, ptr %131)
  %134 = load ptr, ptr %132, align 8
  %135 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %135, ptr %134, i64 %133)
  tail call void @free(ptr %131)
  %136 = load ptr, ptr %var_decl_node, align 8
  %memberidx60 = getelementptr inbounds %VarDeclarationStatement, ptr %136, i32 0, i32 2
  %137 = load ptr, ptr %memberidx60, align 8
  %memberidx61 = getelementptr inbounds %Token, ptr %137, i32 0, i32 1
  %138 = load ptr, ptr %memberidx61, align 8
  call void @TypeChecker_error(ptr %126, i64 1, ptr %135, ptr %138)
  ret ptr null

else57:                                           ; preds = %ifend29
  br label %ifend58

ifend58:                                          ; preds = %else57
  %139 = load ptr, ptr %this, align 8
  %140 = load ptr, ptr %name, align 8
  %141 = load ptr, ptr %value, align 8
  %142 = load ptr, ptr %var_type, align 8
  %143 = call ptr @TypeChecker_declare_var_within_current_scope(ptr %139, ptr %140, ptr %141, ptr %142)
  store ptr %143, ptr %var, align 8
  %144 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%VarDeclaration, ptr null, i32 1) to i32))
  %145 = load ptr, ptr %name, align 8
  %146 = load ptr, ptr %var, align 8
  %memberidx62 = getelementptr inbounds %Var, ptr %146, i32 0, i32 1
  %147 = load ptr, ptr %memberidx62, align 8
  call void @VarDeclaration_constructor(ptr %144, ptr %145, ptr %147)
  ret ptr %144
}

define ptr @TypeChecker_check_const_declaration(ptr %0, ptr %1) {
  %const_decl_stmt = alloca ptr, align 8
  %this = alloca ptr, align 8
  %current_scope = alloca ptr, align 8
  %name = alloca ptr, align 8
  %value = alloca ptr, align 8
  %constant = alloca ptr, align 8
  %const_type = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %const_decl_stmt, align 8
  %3 = load ptr, ptr %const_decl_stmt, align 8
  %memberidx = getelementptr inbounds %ConstDeclarationStatement, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx1, align 8
  store ptr %5, ptr %name, align 8
  %6 = load ptr, ptr %this, align 8
  %7 = call ptr @TypeChecker_get_current_scope(ptr %6)
  store ptr %7, ptr %current_scope, align 8
  %8 = load ptr, ptr %this, align 8
  %9 = load ptr, ptr %name, align 8
  %10 = call i1 @TypeChecker_is_constant_in_scope(ptr %8, ptr %9)
  %11 = load ptr, ptr %current_scope, align 8
  %memberidx2 = getelementptr inbounds %Scope, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = load ptr, ptr %name, align 8
  %14 = call ptr @Map_string_VarId____getitem__(ptr %12, ptr %13)
  %15 = icmp ne ptr %14, null
  %16 = or i1 %10, %15
  br i1 %16, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %17 = load ptr, ptr %this, align 8
  %18 = load ptr, ptr %name, align 8
  %19 = getelementptr inbounds %string, ptr %18, i32 0, i32 0
  %20 = load ptr, ptr %19, align 8
  %memberidx3 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %20, i32 0, i32 5
  %21 = load ptr, ptr %memberidx3, align 8
  %22 = call ptr %21(ptr %18)
  %23 = alloca ptr, align 8
  %24 = call i64 (ptr, ptr, ...) @asprintf(ptr %23, ptr @353, ptr %22)
  %25 = load ptr, ptr %23, align 8
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %26, ptr %25, i64 %24)
  tail call void @free(ptr %22)
  %27 = load ptr, ptr %const_decl_stmt, align 8
  %memberidx4 = getelementptr inbounds %ConstDeclarationStatement, ptr %27, i32 0, i32 2
  %28 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Token, ptr %28, i32 0, i32 1
  %29 = load ptr, ptr %memberidx5, align 8
  call void @TypeChecker_error(ptr %17, i64 1, ptr %26, ptr %29)
  ret ptr null

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %30 = load ptr, ptr %const_decl_stmt, align 8
  %memberidx6 = getelementptr inbounds %ConstDeclarationStatement, ptr %30, i32 0, i32 3
  %31 = load ptr, ptr %memberidx6, align 8
  %32 = icmp ne ptr %31, null
  br i1 %32, label %true_block, label %false_block

true_block:                                       ; preds = %ifend
  %33 = load ptr, ptr %this, align 8
  %34 = load ptr, ptr %const_decl_stmt, align 8
  %memberidx7 = getelementptr inbounds %ConstDeclarationStatement, ptr %34, i32 0, i32 3
  %35 = load ptr, ptr %memberidx7, align 8
  %36 = call ptr @TypeChecker_check_type(ptr %33, ptr %35)
  br label %end

false_block:                                      ; preds = %ifend
  %37 = call ptr @Type_unknown()
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %36, %true_block ], [ %37, %false_block ]
  store ptr %ternary, ptr %const_type, align 8
  %38 = load ptr, ptr %this, align 8
  %39 = call i1 @TypeChecker_has_errored(ptr %38)
  br i1 %39, label %if.entry8, label %else9

if.entry8:                                        ; preds = %end
  ret ptr null

else9:                                            ; preds = %end
  br label %ifend10

ifend10:                                          ; preds = %else9
  %40 = load ptr, ptr %this, align 8
  %41 = load ptr, ptr %const_type, align 8
  %42 = load ptr, ptr %const_decl_stmt, align 8
  %memberidx11 = getelementptr inbounds %ConstDeclarationStatement, ptr %42, i32 0, i32 4
  %43 = load ptr, ptr %memberidx11, align 8
  %44 = call ptr @TypeChecker_check_expression(ptr %40, ptr %41, ptr %43)
  store ptr %44, ptr %value, align 8
  %45 = load ptr, ptr %this, align 8
  %46 = call i1 @TypeChecker_has_errored(ptr %45)
  br i1 %46, label %if.entry12, label %else13

if.entry12:                                       ; preds = %ifend10
  ret ptr null

else13:                                           ; preds = %ifend10
  br label %ifend14

ifend14:                                          ; preds = %else13
  %47 = load ptr, ptr %value, align 8
  %memberidx15 = getelementptr inbounds %Expression, ptr %47, i32 0, i32 1
  %48 = load i1, ptr %memberidx15, align 1
  %49 = xor i1 %48, true
  br i1 %49, label %if.entry16, label %else17

if.entry16:                                       ; preds = %ifend14
  %50 = load ptr, ptr %this, align 8
  %51 = call ptr @string_from_bytes(ptr @512, i64 48)
  %52 = load ptr, ptr %const_decl_stmt, align 8
  %memberidx19 = getelementptr inbounds %ConstDeclarationStatement, ptr %52, i32 0, i32 4
  %53 = load ptr, ptr %memberidx19, align 8
  %memberidx20 = getelementptr inbounds %Node, ptr %53, i32 0, i32 0
  %54 = load ptr, ptr %memberidx20, align 8
  call void @TypeChecker_error(ptr %50, i64 4, ptr %51, ptr %54)
  ret ptr null

else17:                                           ; preds = %ifend14
  br label %ifend18

ifend18:                                          ; preds = %else17
  %55 = load ptr, ptr %value, align 8
  %56 = call i1 @is_null_expression(ptr %55)
  %57 = load ptr, ptr %const_type, align 8
  %memberidx21 = getelementptr inbounds %Type, ptr %57, i32 0, i32 0
  %58 = load i64, ptr %memberidx21, align 4
  %59 = icmp eq i64 %58, 21
  %60 = and i1 %56, %59
  br i1 %60, label %if.entry22, label %else23

if.entry22:                                       ; preds = %ifend18
  %61 = load ptr, ptr %this, align 8
  %62 = call ptr @string_from_bytes(ptr @508, i64 69)
  %63 = load ptr, ptr %const_decl_stmt, align 8
  %memberidx25 = getelementptr inbounds %Node, ptr %63, i32 0, i32 0
  %64 = load ptr, ptr %memberidx25, align 8
  call void @TypeChecker_error(ptr %61, i64 5, ptr %62, ptr %64)
  ret ptr null

else23:                                           ; preds = %ifend18
  br label %ifend24

ifend24:                                          ; preds = %else23
  %65 = load ptr, ptr %const_type, align 8
  %memberidx26 = getelementptr inbounds %Type, ptr %65, i32 0, i32 0
  %66 = load i64, ptr %memberidx26, align 4
  %67 = icmp ne i64 %66, 21
  %68 = load ptr, ptr %this, align 8
  %69 = load ptr, ptr %const_type, align 8
  %70 = load ptr, ptr %value, align 8
  %memberidx27 = getelementptr inbounds %Expression, ptr %70, i32 0, i32 3
  %71 = load ptr, ptr %memberidx27, align 8
  %72 = call i1 @TypeChecker_types_are_eq(ptr %68, ptr %69, ptr %71)
  %73 = xor i1 %72, true
  %74 = and i1 %67, %73
  br i1 %74, label %if.entry28, label %else29

if.entry28:                                       ; preds = %ifend24
  %75 = load ptr, ptr %this, align 8
  %76 = load ptr, ptr %this, align 8
  %77 = load ptr, ptr %const_type, align 8
  %78 = call ptr @TypeChecker_dump_type(ptr %76, ptr %77)
  %79 = getelementptr inbounds %string, ptr %78, i32 0, i32 0
  %80 = load ptr, ptr %79, align 8
  %memberidx31 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %80, i32 0, i32 5
  %81 = load ptr, ptr %memberidx31, align 8
  %82 = call ptr %81(ptr %78)
  %83 = load ptr, ptr %this, align 8
  %84 = load ptr, ptr %value, align 8
  %memberidx32 = getelementptr inbounds %Expression, ptr %84, i32 0, i32 3
  %85 = load ptr, ptr %memberidx32, align 8
  %86 = call ptr @TypeChecker_dump_type(ptr %83, ptr %85)
  %87 = getelementptr inbounds %string, ptr %86, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %memberidx33 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %88, i32 0, i32 5
  %89 = load ptr, ptr %memberidx33, align 8
  %90 = call ptr %89(ptr %86)
  %91 = alloca ptr, align 8
  %92 = call i64 (ptr, ptr, ...) @asprintf(ptr %91, ptr @513, ptr %82, ptr %90)
  %93 = load ptr, ptr %91, align 8
  %94 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %94, ptr %93, i64 %92)
  tail call void @free(ptr %82)
  tail call void @free(ptr %90)
  %95 = load ptr, ptr %const_decl_stmt, align 8
  %memberidx34 = getelementptr inbounds %Node, ptr %95, i32 0, i32 0
  %96 = load ptr, ptr %memberidx34, align 8
  call void @TypeChecker_error(ptr %75, i64 5, ptr %94, ptr %96)
  ret ptr null

else29:                                           ; preds = %ifend24
  br label %ifend30

ifend30:                                          ; preds = %else29
  %97 = load ptr, ptr %const_type, align 8
  %memberidx35 = getelementptr inbounds %Type, ptr %97, i32 0, i32 0
  %98 = load i64, ptr %memberidx35, align 4
  %99 = icmp eq i64 %98, 21
  br i1 %99, label %if.entry36, label %else37

if.entry36:                                       ; preds = %ifend30
  %100 = load ptr, ptr %value, align 8
  %memberidx39 = getelementptr inbounds %Expression, ptr %100, i32 0, i32 3
  %101 = load ptr, ptr %memberidx39, align 8
  store ptr %101, ptr %const_type, align 8
  br label %ifend38

else37:                                           ; preds = %ifend30
  br label %ifend38

ifend38:                                          ; preds = %else37, %if.entry36
  %102 = load ptr, ptr %const_type, align 8
  %memberidx40 = getelementptr inbounds %Type, ptr %102, i32 0, i32 0
  %103 = load i64, ptr %memberidx40, align 4
  %104 = icmp eq i64 %103, 10
  br i1 %104, label %if.entry41, label %else42

if.entry41:                                       ; preds = %ifend38
  %105 = load ptr, ptr %this, align 8
  %106 = call ptr @string_from_bytes(ptr @514, i64 35)
  %107 = load ptr, ptr %const_decl_stmt, align 8
  %memberidx44 = getelementptr inbounds %Node, ptr %107, i32 0, i32 0
  %108 = load ptr, ptr %memberidx44, align 8
  call void @TypeChecker_error(ptr %105, i64 5, ptr %106, ptr %108)
  ret ptr null

else42:                                           ; preds = %ifend38
  br label %ifend43

ifend43:                                          ; preds = %else42
  %109 = load ptr, ptr %this, align 8
  %110 = load ptr, ptr %name, align 8
  %111 = load ptr, ptr %value, align 8
  %112 = load ptr, ptr %const_type, align 8
  %113 = call ptr @TypeChecker_declare_const_within_current_scope(ptr %109, ptr %110, ptr %111, ptr %112)
  store ptr %113, ptr %constant, align 8
  %114 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ConstDeclaration, ptr null, i32 1) to i32))
  %115 = load ptr, ptr %name, align 8
  %116 = load ptr, ptr %constant, align 8
  %memberidx45 = getelementptr inbounds %Const, ptr %116, i32 0, i32 1
  %117 = load ptr, ptr %memberidx45, align 8
  call void @ConstDeclaration_constructor(ptr %114, ptr %115, ptr %117)
  ret ptr %114
}

define ptr @TypeChecker_get_current_scope(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %TypeChecker, ptr %4, i32 0, i32 4
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr @get_scope(ptr %3, ptr %5)
  ret ptr %6
}

define i1 @TypeChecker_is_constant_in_scope(ptr %0, ptr %1) {
  %name = alloca ptr, align 8
  %this = alloca ptr, align 8
  %var_id = alloca ptr, align 8
  %is_constant = alloca i1, align 1
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %name, align 8
  store i1 false, ptr %is_constant, align 1
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %name, align 8
  %5 = call ptr @TypeChecker_get_var_from_current_scope(ptr %3, ptr %4)
  store ptr %5, ptr %var_id, align 8
  %6 = load ptr, ptr %var_id, align 8
  %7 = icmp ne ptr %6, null
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %var_id, align 8
  %memberidx = getelementptr inbounds %VarId, ptr %8, i32 0, i32 0
  %9 = load i64, ptr %memberidx, align 4
  %10 = icmp eq i64 %9, 2
  store i1 %10, ptr %is_constant, align 1
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %11 = load i1, ptr %is_constant, align 1
  ret i1 %11
}

define ptr @TypeChecker_get_var_from_current_scope(ptr %0, ptr %1) {
  %name = alloca ptr, align 8
  %this = alloca ptr, align 8
  %current_scope = alloca ptr, align 8
  %value = alloca ptr, align 8
  %previous_scope = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %name, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = call ptr @TypeChecker_get_current_scope(ptr %3)
  store ptr %4, ptr %current_scope, align 8
  store ptr null, ptr %value, align 8
  %5 = load ptr, ptr %value, align 8
  %6 = icmp eq ptr %5, null
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend5, %2
  %7 = load ptr, ptr %current_scope, align 8
  %memberidx = getelementptr inbounds %Scope, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx, align 8
  %9 = load ptr, ptr %name, align 8
  %10 = call ptr @Map_string_VarId____getitem__(ptr %8, ptr %9)
  store ptr %10, ptr %value, align 8
  %11 = load ptr, ptr %value, align 8
  %12 = icmp eq ptr %11, null
  br i1 %12, label %if.entry, label %else

while.end:                                        ; preds = %ifend5, %if.entry3, %2
  %13 = load ptr, ptr %value, align 8
  %14 = icmp eq ptr %13, null
  %15 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %TypeChecker, ptr %15, i32 0, i32 4
  %16 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %ScopeId, ptr %16, i32 0, i32 0
  %17 = load i64, ptr %memberidx9, align 4
  %18 = icmp ne i64 %17, 0
  %19 = and i1 %14, %18
  br i1 %19, label %if.entry10, label %else11

if.entry:                                         ; preds = %while.entry
  %20 = load ptr, ptr %current_scope, align 8
  %memberidx1 = getelementptr inbounds %Scope, ptr %20, i32 0, i32 3
  %21 = load ptr, ptr %memberidx1, align 8
  %22 = load ptr, ptr %name, align 8
  %23 = call ptr @Map_string_VarId____getitem__(ptr %21, ptr %22)
  store ptr %23, ptr %value, align 8
  br label %ifend

else:                                             ; preds = %while.entry
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %24 = load ptr, ptr %current_scope, align 8
  %memberidx2 = getelementptr inbounds %Scope, ptr %24, i32 0, i32 5
  %25 = load ptr, ptr %memberidx2, align 8
  %26 = icmp eq ptr %25, null
  %27 = load ptr, ptr %value, align 8
  %28 = icmp ne ptr %27, null
  %29 = or i1 %26, %28
  br i1 %29, label %if.entry3, label %else4

if.entry3:                                        ; preds = %ifend
  br label %while.end

else4:                                            ; preds = %ifend
  br label %ifend5

ifend5:                                           ; preds = %else4
  %30 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %TypeChecker, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx6, align 8
  %32 = load ptr, ptr %current_scope, align 8
  %memberidx7 = getelementptr inbounds %Scope, ptr %32, i32 0, i32 5
  %33 = load ptr, ptr %memberidx7, align 8
  %34 = call ptr @get_scope(ptr %31, ptr %33)
  store ptr %34, ptr %current_scope, align 8
  %35 = load ptr, ptr %value, align 8
  %36 = icmp eq ptr %35, null
  br i1 %36, label %while.entry, label %while.end

if.entry10:                                       ; preds = %while.end
  %37 = load ptr, ptr %this, align 8
  %memberidx13 = getelementptr inbounds %TypeChecker, ptr %37, i32 0, i32 4
  %38 = load ptr, ptr %memberidx13, align 8
  store ptr %38, ptr %previous_scope, align 8
  %39 = load ptr, ptr %this, align 8
  %memberidx14 = getelementptr inbounds %TypeChecker, ptr %39, i32 0, i32 4
  %40 = load ptr, ptr %this, align 8
  %memberidx15 = getelementptr inbounds %TypeChecker, ptr %40, i32 0, i32 0
  %41 = load ptr, ptr %memberidx15, align 8
  %memberidx16 = getelementptr inbounds %Program, ptr %41, i32 0, i32 1
  %42 = load ptr, ptr %memberidx16, align 8
  %43 = call ptr @Array_Module____getitem__(ptr %42, i64 0)
  %memberidx17 = getelementptr inbounds %Module, ptr %43, i32 0, i32 5
  %44 = load ptr, ptr %memberidx17, align 8
  store ptr %44, ptr %memberidx14, align 8
  %45 = load ptr, ptr %this, align 8
  %46 = load ptr, ptr %name, align 8
  %47 = call ptr @TypeChecker_get_var_from_current_scope(ptr %45, ptr %46)
  store ptr %47, ptr %value, align 8
  %48 = load ptr, ptr %this, align 8
  %memberidx18 = getelementptr inbounds %TypeChecker, ptr %48, i32 0, i32 4
  %49 = load ptr, ptr %previous_scope, align 8
  store ptr %49, ptr %memberidx18, align 8
  %50 = load ptr, ptr %value, align 8
  %51 = icmp ne ptr %50, null
  br i1 %51, label %if.entry19, label %else20

else11:                                           ; preds = %while.end
  br label %ifend12

ifend12:                                          ; preds = %else11, %ifend21
  %52 = load ptr, ptr %value, align 8
  ret ptr %52

if.entry19:                                       ; preds = %if.entry10
  %53 = load ptr, ptr %this, align 8
  %memberidx22 = getelementptr inbounds %TypeChecker, ptr %53, i32 0, i32 0
  %54 = load ptr, ptr %memberidx22, align 8
  %memberidx23 = getelementptr inbounds %Program, ptr %54, i32 0, i32 0
  store i1 true, ptr %memberidx23, align 1
  %55 = load ptr, ptr %value, align 8
  %memberidx24 = getelementptr inbounds %VarId, ptr %55, i32 0, i32 0
  %56 = load i64, ptr %memberidx24, align 4
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %if.entry25, label %else26

else20:                                           ; preds = %if.entry10
  br label %ifend21

ifend21:                                          ; preds = %else20, %ifend40
  br label %ifend12

if.entry25:                                       ; preds = %if.entry19
  %58 = load ptr, ptr %this, align 8
  %59 = load ptr, ptr %name, align 8
  %60 = load ptr, ptr %value, align 8
  call void @TypeChecker_add_imported_fnc_to_module(ptr %58, ptr %59, ptr %60)
  br label %ifend27

else26:                                           ; preds = %if.entry19
  br label %ifend27

ifend27:                                          ; preds = %else26, %if.entry25
  %61 = load ptr, ptr %value, align 8
  %memberidx28 = getelementptr inbounds %VarId, ptr %61, i32 0, i32 0
  %62 = load i64, ptr %memberidx28, align 4
  %63 = icmp eq i64 %62, 1
  %64 = load ptr, ptr %value, align 8
  %memberidx29 = getelementptr inbounds %VarId, ptr %64, i32 0, i32 0
  %65 = load i64, ptr %memberidx29, align 4
  %66 = icmp eq i64 %65, 2
  %67 = or i1 %63, %66
  br i1 %67, label %if.entry30, label %else31

if.entry30:                                       ; preds = %ifend27
  %68 = load ptr, ptr %this, align 8
  %69 = load ptr, ptr %name, align 8
  %70 = load ptr, ptr %value, align 8
  call void @TypeChecker_add_imported_var_to_module(ptr %68, ptr %69, ptr %70)
  br label %ifend32

else31:                                           ; preds = %ifend27
  br label %ifend32

ifend32:                                          ; preds = %else31, %if.entry30
  %71 = load ptr, ptr %value, align 8
  %memberidx33 = getelementptr inbounds %VarId, ptr %71, i32 0, i32 0
  %72 = load i64, ptr %memberidx33, align 4
  %73 = icmp eq i64 %72, 3
  br i1 %73, label %if.entry34, label %else35

if.entry34:                                       ; preds = %ifend32
  %74 = load ptr, ptr %this, align 8
  %75 = load ptr, ptr %name, align 8
  %76 = load ptr, ptr %value, align 8
  %77 = call ptr @ClassVarId_to_classId(ptr %76)
  call void @TypeChecker_add_imported_class_to_module(ptr %74, ptr %75, ptr %77)
  br label %ifend36

else35:                                           ; preds = %ifend32
  br label %ifend36

ifend36:                                          ; preds = %else35, %if.entry34
  %78 = load ptr, ptr %value, align 8
  %memberidx37 = getelementptr inbounds %VarId, ptr %78, i32 0, i32 0
  %79 = load i64, ptr %memberidx37, align 4
  %80 = icmp eq i64 %79, 4
  br i1 %80, label %if.entry38, label %else39

if.entry38:                                       ; preds = %ifend36
  %81 = load ptr, ptr %this, align 8
  %82 = load ptr, ptr %name, align 8
  %83 = load ptr, ptr %value, align 8
  %84 = call ptr @EnumVarId_to_enumId(ptr %83)
  call void @TypeChecker_add_imported_enum_to_module(ptr %81, ptr %82, ptr %84)
  br label %ifend40

else39:                                           ; preds = %ifend36
  br label %ifend40

ifend40:                                          ; preds = %else39, %if.entry38
  br label %ifend21
}

define ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %1) {
  %name = alloca ptr, align 8
  %this = alloca ptr, align 8
  %current_scope = alloca ptr, align 8
  %class_id = alloca ptr, align 8
  %enum_id = alloca ptr, align 8
  %aliased_ty = alloca ptr, align 8
  %previous_scope = alloca ptr, align 8
  %builtin_type = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %name, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = call ptr @TypeChecker_get_current_scope(ptr %3)
  store ptr %4, ptr %current_scope, align 8
  br i1 true, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend12, %2
  %5 = load ptr, ptr %current_scope, align 8
  %memberidx = getelementptr inbounds %Scope, ptr %5, i32 0, i32 6
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %name, align 8
  %8 = call ptr @Map_string_Type____getitem__(ptr %6, ptr %7)
  store ptr %8, ptr %aliased_ty, align 8
  %9 = load ptr, ptr %aliased_ty, align 8
  %10 = icmp ne ptr %9, null
  br i1 %10, label %if.entry, label %else

while.end:                                        ; preds = %ifend12, %if.entry10, %2
  %11 = load ptr, ptr %this, align 8
  %memberidx15 = getelementptr inbounds %TypeChecker, ptr %11, i32 0, i32 4
  %12 = load ptr, ptr %memberidx15, align 8
  %memberidx16 = getelementptr inbounds %ScopeId, ptr %12, i32 0, i32 0
  %13 = load i64, ptr %memberidx16, align 4
  %14 = icmp ne i64 %13, 0
  br i1 %14, label %if.entry17, label %else18

if.entry:                                         ; preds = %while.entry
  %15 = load ptr, ptr %aliased_ty, align 8
  ret ptr %15

else:                                             ; preds = %while.entry
  br label %ifend

ifend:                                            ; preds = %else
  %16 = load ptr, ptr %current_scope, align 8
  %memberidx1 = getelementptr inbounds %Scope, ptr %16, i32 0, i32 2
  %17 = load ptr, ptr %memberidx1, align 8
  %18 = load ptr, ptr %name, align 8
  %19 = call ptr @Map_string_ClassId____getitem__(ptr %17, ptr %18)
  store ptr %19, ptr %class_id, align 8
  %20 = load ptr, ptr %class_id, align 8
  %21 = icmp ne ptr %20, null
  br i1 %21, label %if.entry2, label %else3

if.entry2:                                        ; preds = %ifend
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ObjectType, ptr null, i32 1) to i32))
  %23 = load ptr, ptr %class_id, align 8
  call void @ObjectType_constructor(ptr %22, ptr %23)
  ret ptr %22

else3:                                            ; preds = %ifend
  br label %ifend4

ifend4:                                           ; preds = %else3
  %24 = load ptr, ptr %current_scope, align 8
  %memberidx5 = getelementptr inbounds %Scope, ptr %24, i32 0, i32 4
  %25 = load ptr, ptr %memberidx5, align 8
  %26 = load ptr, ptr %name, align 8
  %27 = call ptr @Map_string_EnumId____getitem__(ptr %25, ptr %26)
  store ptr %27, ptr %enum_id, align 8
  %28 = load ptr, ptr %enum_id, align 8
  %29 = icmp ne ptr %28, null
  br i1 %29, label %if.entry6, label %else7

if.entry6:                                        ; preds = %ifend4
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%EnumType, ptr null, i32 1) to i32))
  %31 = load ptr, ptr %enum_id, align 8
  call void @EnumType_constructor(ptr %30, ptr %31)
  ret ptr %30

else7:                                            ; preds = %ifend4
  br label %ifend8

ifend8:                                           ; preds = %else7
  %32 = load ptr, ptr %current_scope, align 8
  %memberidx9 = getelementptr inbounds %Scope, ptr %32, i32 0, i32 5
  %33 = load ptr, ptr %memberidx9, align 8
  %34 = icmp eq ptr %33, null
  br i1 %34, label %if.entry10, label %else11

if.entry10:                                       ; preds = %ifend8
  br label %while.end

else11:                                           ; preds = %ifend8
  br label %ifend12

ifend12:                                          ; preds = %else11
  %35 = load ptr, ptr %this, align 8
  %memberidx13 = getelementptr inbounds %TypeChecker, ptr %35, i32 0, i32 0
  %36 = load ptr, ptr %memberidx13, align 8
  %37 = load ptr, ptr %current_scope, align 8
  %memberidx14 = getelementptr inbounds %Scope, ptr %37, i32 0, i32 5
  %38 = load ptr, ptr %memberidx14, align 8
  %39 = call ptr @get_scope(ptr %36, ptr %38)
  store ptr %39, ptr %current_scope, align 8
  br i1 true, label %while.entry, label %while.end

if.entry17:                                       ; preds = %while.end
  %40 = load ptr, ptr %this, align 8
  %memberidx20 = getelementptr inbounds %TypeChecker, ptr %40, i32 0, i32 4
  %41 = load ptr, ptr %memberidx20, align 8
  store ptr %41, ptr %previous_scope, align 8
  %42 = load ptr, ptr %this, align 8
  %memberidx21 = getelementptr inbounds %TypeChecker, ptr %42, i32 0, i32 4
  %43 = load ptr, ptr %this, align 8
  %memberidx22 = getelementptr inbounds %TypeChecker, ptr %43, i32 0, i32 0
  %44 = load ptr, ptr %memberidx22, align 8
  %memberidx23 = getelementptr inbounds %Program, ptr %44, i32 0, i32 1
  %45 = load ptr, ptr %memberidx23, align 8
  %46 = call ptr @Array_Module____getitem__(ptr %45, i64 0)
  %memberidx24 = getelementptr inbounds %Module, ptr %46, i32 0, i32 5
  %47 = load ptr, ptr %memberidx24, align 8
  store ptr %47, ptr %memberidx21, align 8
  %48 = load ptr, ptr %this, align 8
  %49 = load ptr, ptr %name, align 8
  %50 = call ptr @TypeChecker_get_type_from_current_scope(ptr %48, ptr %49)
  store ptr %50, ptr %builtin_type, align 8
  %51 = load ptr, ptr %builtin_type, align 8
  %memberidx25 = getelementptr inbounds %Type, ptr %51, i32 0, i32 0
  %52 = load i64, ptr %memberidx25, align 4
  %53 = icmp ne i64 %52, 21
  br i1 %53, label %if.entry26, label %else27

else18:                                           ; preds = %while.end
  br label %ifend19

ifend19:                                          ; preds = %else18
  %54 = call ptr @Type_unknown()
  ret ptr %54

if.entry26:                                       ; preds = %if.entry17
  %55 = load ptr, ptr %this, align 8
  %memberidx29 = getelementptr inbounds %TypeChecker, ptr %55, i32 0, i32 0
  %56 = load ptr, ptr %memberidx29, align 8
  %memberidx30 = getelementptr inbounds %Program, ptr %56, i32 0, i32 0
  store i1 true, ptr %memberidx30, align 1
  %57 = load ptr, ptr %builtin_type, align 8
  %memberidx31 = getelementptr inbounds %Type, ptr %57, i32 0, i32 0
  %58 = load i64, ptr %memberidx31, align 4
  %59 = icmp eq i64 %58, 11
  br i1 %59, label %if.entry32, label %else33

else27:                                           ; preds = %if.entry17
  br label %ifend28

ifend28:                                          ; preds = %else27, %ifend34
  %60 = load ptr, ptr %this, align 8
  %memberidx37 = getelementptr inbounds %TypeChecker, ptr %60, i32 0, i32 4
  %61 = load ptr, ptr %previous_scope, align 8
  store ptr %61, ptr %memberidx37, align 8
  %62 = load ptr, ptr %builtin_type, align 8
  ret ptr %62

if.entry32:                                       ; preds = %if.entry26
  %63 = load ptr, ptr %this, align 8
  %64 = load ptr, ptr %name, align 8
  %65 = load ptr, ptr %builtin_type, align 8
  %memberidx35 = getelementptr inbounds %ObjectType, ptr %65, i32 0, i32 1
  %66 = load ptr, ptr %memberidx35, align 8
  call void @TypeChecker_add_imported_class_to_module(ptr %63, ptr %64, ptr %66)
  br label %ifend34

else33:                                           ; preds = %if.entry26
  %67 = load ptr, ptr %this, align 8
  %68 = load ptr, ptr %name, align 8
  %69 = load ptr, ptr %builtin_type, align 8
  %memberidx36 = getelementptr inbounds %EnumType, ptr %69, i32 0, i32 1
  %70 = load ptr, ptr %memberidx36, align 8
  call void @TypeChecker_add_imported_enum_to_module(ptr %67, ptr %68, ptr %70)
  br label %ifend34

ifend34:                                          ; preds = %else33, %if.entry32
  br label %ifend28
}

define ptr @TypeChecker_create_child_scope_within_current_scope(ptr %0) {
  %this = alloca ptr, align 8
  %new_scope = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %3, i32 0, i32 4
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %ScopeId, ptr %4, i32 0, i32 0
  %5 = load i64, ptr %memberidx1, align 4
  %6 = call ptr @TypeChecker_create_scope(ptr %2, i64 %5)
  store ptr %6, ptr %new_scope, align 8
  %7 = load ptr, ptr %new_scope, align 8
  %memberidx2 = getelementptr inbounds %Scope, ptr %7, i32 0, i32 5
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %TypeChecker, ptr %8, i32 0, i32 4
  %9 = load ptr, ptr %memberidx3, align 8
  store ptr %9, ptr %memberidx2, align 8
  %10 = load ptr, ptr %this, align 8
  %11 = call ptr @TypeChecker_get_current_scope(ptr %10)
  %memberidx4 = getelementptr inbounds %Scope, ptr %11, i32 0, i32 7
  %12 = load ptr, ptr %memberidx4, align 8
  %13 = load ptr, ptr %new_scope, align 8
  %memberidx5 = getelementptr inbounds %Scope, ptr %13, i32 0, i32 0
  %14 = load ptr, ptr %memberidx5, align 8
  call void @Array_ScopeId____sl__(ptr %12, ptr %14)
  %15 = load ptr, ptr %new_scope, align 8
  ret ptr %15
}

define ptr @TypeChecker_declare_var_within_current_scope(ptr %0, ptr %1, ptr %2, ptr %3) {
  %name = alloca ptr, align 8
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %value_type = alloca ptr, align 8
  %var = alloca ptr, align 8
  %current_scope = alloca ptr, align 8
  %id = alloca ptr, align 8
  %current_module = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %name, align 8
  store ptr %2, ptr %value, align 8
  store ptr %3, ptr %value_type, align 8
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Var, ptr null, i32 1) to i32))
  %6 = load ptr, ptr %value, align 8
  %7 = load ptr, ptr %value_type, align 8
  call void @Var_constructor(ptr %5, ptr %6, ptr %7)
  store ptr %5, ptr %var, align 8
  %8 = load ptr, ptr %this, align 8
  %9 = call ptr @TypeChecker_get_current_module(ptr %8)
  store ptr %9, ptr %current_module, align 8
  %10 = load ptr, ptr %this, align 8
  %11 = call ptr @TypeChecker_get_current_scope(ptr %10)
  store ptr %11, ptr %current_scope, align 8
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%VarId, ptr null, i32 1) to i32))
  %13 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %13, i32 0, i32 4
  %14 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %ScopeId, ptr %14, i32 0, i32 0
  %15 = load i64, ptr %memberidx1, align 4
  %16 = load ptr, ptr %current_module, align 8
  %memberidx2 = getelementptr inbounds %Module, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_Var_, ptr %17, i32 0, i32 2
  %18 = load i64, ptr %memberidx3, align 4
  call void @VarId_constructor(ptr %12, i64 1, i64 %15, i64 %18)
  store ptr %12, ptr %id, align 8
  %19 = load ptr, ptr %var, align 8
  %memberidx4 = getelementptr inbounds %Var, ptr %19, i32 0, i32 1
  %20 = load ptr, ptr %id, align 8
  store ptr %20, ptr %memberidx4, align 8
  %21 = load ptr, ptr %current_module, align 8
  %memberidx5 = getelementptr inbounds %Module, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx5, align 8
  %23 = load ptr, ptr %var, align 8
  call void @Array_Var____sl__(ptr %22, ptr %23)
  %24 = load ptr, ptr %current_scope, align 8
  %memberidx6 = getelementptr inbounds %Scope, ptr %24, i32 0, i32 1
  %25 = load ptr, ptr %memberidx6, align 8
  %26 = load ptr, ptr %name, align 8
  %27 = load ptr, ptr %id, align 8
  call void @Map_string_VarId____setitem__(ptr %25, ptr %26, ptr %27)
  %28 = load ptr, ptr %var, align 8
  ret ptr %28
}

define ptr @TypeChecker_declare_const_within_current_scope(ptr %0, ptr %1, ptr %2, ptr %3) {
  %name = alloca ptr, align 8
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %value_type = alloca ptr, align 8
  %current_scope = alloca ptr, align 8
  %id = alloca ptr, align 8
  %current_module = alloca ptr, align 8
  %constant = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %name, align 8
  store ptr %2, ptr %value, align 8
  store ptr %3, ptr %value_type, align 8
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Const, ptr null, i32 1) to i32))
  %6 = load ptr, ptr %value, align 8
  %7 = load ptr, ptr %value_type, align 8
  call void @Const_constructor(ptr %5, ptr %6, ptr %7)
  store ptr %5, ptr %constant, align 8
  %8 = load ptr, ptr %this, align 8
  %9 = call ptr @TypeChecker_get_current_module(ptr %8)
  store ptr %9, ptr %current_module, align 8
  %10 = load ptr, ptr %this, align 8
  %11 = call ptr @TypeChecker_get_current_scope(ptr %10)
  store ptr %11, ptr %current_scope, align 8
  %12 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ConstId, ptr null, i32 1) to i32))
  %13 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %13, i32 0, i32 4
  %14 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %ScopeId, ptr %14, i32 0, i32 0
  %15 = load i64, ptr %memberidx1, align 4
  %16 = load ptr, ptr %current_module, align 8
  %memberidx2 = getelementptr inbounds %Module, ptr %16, i32 0, i32 2
  %17 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_Const_, ptr %17, i32 0, i32 2
  %18 = load i64, ptr %memberidx3, align 4
  call void @ConstId_constructor(ptr %12, i64 %15, i64 %18)
  store ptr %12, ptr %id, align 8
  %19 = load ptr, ptr %constant, align 8
  %memberidx4 = getelementptr inbounds %Const, ptr %19, i32 0, i32 1
  %20 = load ptr, ptr %id, align 8
  store ptr %20, ptr %memberidx4, align 8
  %21 = load ptr, ptr %current_module, align 8
  %memberidx5 = getelementptr inbounds %Module, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %memberidx5, align 8
  %23 = load ptr, ptr %constant, align 8
  call void @Array_Const____sl__(ptr %22, ptr %23)
  %24 = load ptr, ptr %current_scope, align 8
  %memberidx6 = getelementptr inbounds %Scope, ptr %24, i32 0, i32 1
  %25 = load ptr, ptr %memberidx6, align 8
  %26 = load ptr, ptr %name, align 8
  %27 = load ptr, ptr %id, align 8
  call void @Map_string_VarId____setitem__(ptr %25, ptr %26, ptr %27)
  %28 = load ptr, ptr %constant, align 8
  ret ptr %28
}

define i1 @TypeChecker_is_iteratable(ptr %0, ptr %1) {
  %suspect_type = alloca ptr, align 8
  %this = alloca ptr, align 8
  %class_ = alloca ptr, align 8
  %done_type = alloca ptr, align 8
  %next_type = alloca ptr, align 8
  %done_prop_id = alloca ptr, align 8
  %next_prop_id = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %suspect_type, align 8
  %3 = load ptr, ptr %suspect_type, align 8
  %4 = call i1 @is_object(ptr %3)
  %5 = xor i1 %4, true
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %6, i32 0, i32 0
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load ptr, ptr %suspect_type, align 8
  %9 = call ptr @get_class_from_type(ptr %7, ptr %8)
  store ptr %9, ptr %class_, align 8
  %10 = load ptr, ptr %class_, align 8
  %memberidx1 = getelementptr inbounds %Class, ptr %10, i32 0, i32 6
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = call ptr @string_from_bytes(ptr @395, i64 4)
  %13 = call ptr @Map_string_PropId____getitem__(ptr %11, ptr %12)
  store ptr %13, ptr %done_prop_id, align 8
  %14 = load ptr, ptr %done_prop_id, align 8
  %15 = icmp eq ptr %14, null
  br i1 %15, label %if.entry2, label %else3

if.entry2:                                        ; preds = %ifend
  ret i1 false

else3:                                            ; preds = %ifend
  br label %ifend4

ifend4:                                           ; preds = %else3
  %16 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %TypeChecker, ptr %16, i32 0, i32 0
  %17 = load ptr, ptr %memberidx5, align 8
  %18 = load ptr, ptr %done_prop_id, align 8
  %19 = call ptr @get_class_prop_type(ptr %17, ptr %18)
  store ptr %19, ptr %done_type, align 8
  %20 = load ptr, ptr %done_type, align 8
  %memberidx6 = getelementptr inbounds %Type, ptr %20, i32 0, i32 0
  %21 = load i64, ptr %memberidx6, align 4
  %22 = icmp ne i64 %21, 0
  br i1 %22, label %if.entry7, label %else8

if.entry7:                                        ; preds = %ifend4
  ret i1 false

else8:                                            ; preds = %ifend4
  br label %ifend9

ifend9:                                           ; preds = %else8
  %23 = load ptr, ptr %class_, align 8
  %memberidx10 = getelementptr inbounds %Class, ptr %23, i32 0, i32 6
  %24 = load ptr, ptr %memberidx10, align 8
  %25 = call ptr @string_from_bytes(ptr @396, i64 4)
  %26 = call ptr @Map_string_PropId____getitem__(ptr %24, ptr %25)
  store ptr %26, ptr %next_prop_id, align 8
  %27 = load ptr, ptr %next_prop_id, align 8
  %28 = icmp eq ptr %27, null
  br i1 %28, label %if.entry11, label %else12

if.entry11:                                       ; preds = %ifend9
  ret i1 false

else12:                                           ; preds = %ifend9
  br label %ifend13

ifend13:                                          ; preds = %else12
  %29 = load ptr, ptr %this, align 8
  %memberidx14 = getelementptr inbounds %TypeChecker, ptr %29, i32 0, i32 0
  %30 = load ptr, ptr %memberidx14, align 8
  %31 = load ptr, ptr %next_prop_id, align 8
  %32 = call ptr @get_class_prop_type(ptr %30, ptr %31)
  store ptr %32, ptr %next_type, align 8
  %33 = load ptr, ptr %next_type, align 8
  %memberidx15 = getelementptr inbounds %Type, ptr %33, i32 0, i32 0
  %34 = load i64, ptr %memberidx15, align 4
  %35 = icmp ne i64 %34, 16
  br i1 %35, label %if.entry16, label %else17

if.entry16:                                       ; preds = %ifend13
  ret i1 false

else17:                                           ; preds = %ifend13
  br label %ifend18

ifend18:                                          ; preds = %else17
  %36 = load ptr, ptr %next_type, align 8
  %memberidx19 = getelementptr inbounds %FunctionType, ptr %36, i32 0, i32 1
  %37 = load ptr, ptr %memberidx19, align 8
  %memberidx20 = getelementptr inbounds %Array_Type_, ptr %37, i32 0, i32 2
  %38 = load i64, ptr %memberidx20, align 4
  %39 = icmp ne i64 %38, 0
  br i1 %39, label %if.entry21, label %else22

if.entry21:                                       ; preds = %ifend18
  ret i1 false

else22:                                           ; preds = %ifend18
  br label %ifend23

ifend23:                                          ; preds = %else22
  ret i1 true
}

define ptr @TypeChecker_check_object_setitem_expr(ptr %0, ptr %1, ptr %2) {
  %object = alloca ptr, align 8
  %binary_node = alloca ptr, align 8
  %this = alloca ptr, align 8
  %args = alloca ptr, align 8
  %owner_class = alloca ptr, align 8
  %prop_id = alloca ptr, align 8
  %value = alloca ptr, align 8
  %index_expr_node = alloca ptr, align 8
  %arg1_type = alloca ptr, align 8
  %arg2_type = alloca ptr, align 8
  %member_expr = alloca ptr, align 8
  %index = alloca ptr, align 8
  %method_type = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %object, align 8
  store ptr %2, ptr %binary_node, align 8
  %4 = load ptr, ptr %binary_node, align 8
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %4, i32 0, i32 3
  %5 = load ptr, ptr %memberidx, align 8
  store ptr %5, ptr %index_expr_node, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %TypeChecker, ptr %6, i32 0, i32 0
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = load ptr, ptr %object, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %8, i32 0, i32 3
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = call ptr @get_class_from_type(ptr %7, ptr %9)
  store ptr %10, ptr %owner_class, align 8
  %11 = load ptr, ptr %owner_class, align 8
  %memberidx3 = getelementptr inbounds %Class, ptr %11, i32 0, i32 6
  %12 = load ptr, ptr %memberidx3, align 8
  %13 = call ptr @string_from_bytes(ptr @372, i64 11)
  %14 = call ptr @Map_string_PropId____getitem__(ptr %12, ptr %13)
  store ptr %14, ptr %prop_id, align 8
  %15 = load ptr, ptr %prop_id, align 8
  %16 = icmp eq ptr %15, null
  br i1 %16, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %17 = load ptr, ptr %this, align 8
  %18 = load ptr, ptr %owner_class, align 8
  %memberidx4 = getelementptr inbounds %Class, ptr %18, i32 0, i32 1
  %19 = load ptr, ptr %memberidx4, align 8
  %20 = getelementptr inbounds %string, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %memberidx5 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %21, i32 0, i32 5
  %22 = load ptr, ptr %memberidx5, align 8
  %23 = call ptr %22(ptr %19)
  %24 = alloca ptr, align 8
  %25 = call i64 (ptr, ptr, ...) @asprintf(ptr %24, ptr @454, ptr %23)
  %26 = load ptr, ptr %24, align 8
  %27 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %27, ptr %26, i64 %25)
  tail call void @free(ptr %23)
  %28 = load ptr, ptr %index_expr_node, align 8
  %memberidx6 = getelementptr inbounds %Node, ptr %28, i32 0, i32 0
  %29 = load ptr, ptr %memberidx6, align 8
  call void @TypeChecker_error(ptr %17, i64 4, ptr %27, ptr %29)
  ret ptr null

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %30 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %TypeChecker, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx7, align 8
  %32 = load ptr, ptr %prop_id, align 8
  %33 = call ptr @get_class_prop_type(ptr %31, ptr %32)
  store ptr %33, ptr %method_type, align 8
  %34 = load ptr, ptr %method_type, align 8
  %memberidx8 = getelementptr inbounds %FunctionType, ptr %34, i32 0, i32 1
  %35 = load ptr, ptr %memberidx8, align 8
  %36 = call ptr @Array_Type____getitem__(ptr %35, i64 0)
  store ptr %36, ptr %arg1_type, align 8
  %37 = load ptr, ptr %method_type, align 8
  %memberidx9 = getelementptr inbounds %FunctionType, ptr %37, i32 0, i32 1
  %38 = load ptr, ptr %memberidx9, align 8
  %39 = call ptr @Array_Type____getitem__(ptr %38, i64 1)
  store ptr %39, ptr %arg2_type, align 8
  %40 = load ptr, ptr %this, align 8
  %41 = call i1 @TypeChecker_has_errored(ptr %40)
  br i1 %41, label %if.entry10, label %else11

if.entry10:                                       ; preds = %ifend
  ret ptr null

else11:                                           ; preds = %ifend
  br label %ifend12

ifend12:                                          ; preds = %else11
  %42 = load ptr, ptr %this, align 8
  %43 = load ptr, ptr %arg1_type, align 8
  %44 = load ptr, ptr %index_expr_node, align 8
  %memberidx13 = getelementptr inbounds %ExpressionIndexNode, ptr %44, i32 0, i32 4
  %45 = load ptr, ptr %memberidx13, align 8
  %46 = call ptr @TypeChecker_check_expression(ptr %42, ptr %43, ptr %45)
  store ptr %46, ptr %index, align 8
  %47 = load ptr, ptr %this, align 8
  %48 = call i1 @TypeChecker_has_errored(ptr %47)
  br i1 %48, label %if.entry14, label %else15

if.entry14:                                       ; preds = %ifend12
  ret ptr null

else15:                                           ; preds = %ifend12
  br label %ifend16

ifend16:                                          ; preds = %else15
  %49 = load ptr, ptr %this, align 8
  %50 = load ptr, ptr %arg1_type, align 8
  %51 = load ptr, ptr %index, align 8
  %memberidx17 = getelementptr inbounds %Expression, ptr %51, i32 0, i32 3
  %52 = load ptr, ptr %memberidx17, align 8
  %53 = call i1 @TypeChecker_types_are_eq(ptr %49, ptr %50, ptr %52)
  %54 = xor i1 %53, true
  br i1 %54, label %if.entry18, label %else19

if.entry18:                                       ; preds = %ifend16
  %55 = load ptr, ptr %this, align 8
  %56 = load ptr, ptr %this, align 8
  %57 = load ptr, ptr %arg1_type, align 8
  %58 = call ptr @TypeChecker_dump_type(ptr %56, ptr %57)
  %59 = getelementptr inbounds %string, ptr %58, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %memberidx21 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %60, i32 0, i32 5
  %61 = load ptr, ptr %memberidx21, align 8
  %62 = call ptr %61(ptr %58)
  %63 = load ptr, ptr %this, align 8
  %64 = load ptr, ptr %index, align 8
  %memberidx22 = getelementptr inbounds %Expression, ptr %64, i32 0, i32 3
  %65 = load ptr, ptr %memberidx22, align 8
  %66 = call ptr @TypeChecker_dump_type(ptr %63, ptr %65)
  %67 = getelementptr inbounds %string, ptr %66, i32 0, i32 0
  %68 = load ptr, ptr %67, align 8
  %memberidx23 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %68, i32 0, i32 5
  %69 = load ptr, ptr %memberidx23, align 8
  %70 = call ptr %69(ptr %66)
  %71 = alloca ptr, align 8
  %72 = call i64 (ptr, ptr, ...) @asprintf(ptr %71, ptr @438, ptr %62, ptr %70)
  %73 = load ptr, ptr %71, align 8
  %74 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %74, ptr %73, i64 %72)
  tail call void @free(ptr %62)
  tail call void @free(ptr %70)
  %75 = load ptr, ptr %index_expr_node, align 8
  %memberidx24 = getelementptr inbounds %ExpressionIndexNode, ptr %75, i32 0, i32 4
  %76 = load ptr, ptr %memberidx24, align 8
  %memberidx25 = getelementptr inbounds %Node, ptr %76, i32 0, i32 0
  %77 = load ptr, ptr %memberidx25, align 8
  call void @TypeChecker_error(ptr %55, i64 5, ptr %74, ptr %77)
  ret ptr null

else19:                                           ; preds = %ifend16
  br label %ifend20

ifend20:                                          ; preds = %else19
  %78 = load ptr, ptr %this, align 8
  %79 = load ptr, ptr %arg2_type, align 8
  %80 = load ptr, ptr %binary_node, align 8
  %memberidx26 = getelementptr inbounds %BinaryExpressionNode, ptr %80, i32 0, i32 5
  %81 = load ptr, ptr %memberidx26, align 8
  %82 = call ptr @TypeChecker_check_expression(ptr %78, ptr %79, ptr %81)
  store ptr %82, ptr %value, align 8
  %83 = load ptr, ptr %this, align 8
  %84 = call i1 @TypeChecker_has_errored(ptr %83)
  br i1 %84, label %if.entry27, label %else28

if.entry27:                                       ; preds = %ifend20
  ret ptr null

else28:                                           ; preds = %ifend20
  br label %ifend29

ifend29:                                          ; preds = %else28
  %85 = load ptr, ptr %this, align 8
  %86 = load ptr, ptr %arg1_type, align 8
  %87 = load ptr, ptr %index, align 8
  %memberidx30 = getelementptr inbounds %Expression, ptr %87, i32 0, i32 3
  %88 = load ptr, ptr %memberidx30, align 8
  %89 = call i1 @TypeChecker_types_are_eq(ptr %85, ptr %86, ptr %88)
  %90 = xor i1 %89, true
  br i1 %90, label %if.entry31, label %else32

if.entry31:                                       ; preds = %ifend29
  %91 = load ptr, ptr %this, align 8
  %92 = load ptr, ptr %this, align 8
  %93 = load ptr, ptr %arg2_type, align 8
  %94 = call ptr @TypeChecker_dump_type(ptr %92, ptr %93)
  %95 = getelementptr inbounds %string, ptr %94, i32 0, i32 0
  %96 = load ptr, ptr %95, align 8
  %memberidx34 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %96, i32 0, i32 5
  %97 = load ptr, ptr %memberidx34, align 8
  %98 = call ptr %97(ptr %94)
  %99 = load ptr, ptr %this, align 8
  %100 = load ptr, ptr %value, align 8
  %memberidx35 = getelementptr inbounds %Expression, ptr %100, i32 0, i32 3
  %101 = load ptr, ptr %memberidx35, align 8
  %102 = call ptr @TypeChecker_dump_type(ptr %99, ptr %101)
  %103 = getelementptr inbounds %string, ptr %102, i32 0, i32 0
  %104 = load ptr, ptr %103, align 8
  %memberidx36 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %104, i32 0, i32 5
  %105 = load ptr, ptr %memberidx36, align 8
  %106 = call ptr %105(ptr %102)
  %107 = alloca ptr, align 8
  %108 = call i64 (ptr, ptr, ...) @asprintf(ptr %107, ptr @438, ptr %98, ptr %106)
  %109 = load ptr, ptr %107, align 8
  %110 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %110, ptr %109, i64 %108)
  tail call void @free(ptr %98)
  tail call void @free(ptr %106)
  %111 = load ptr, ptr %binary_node, align 8
  %memberidx37 = getelementptr inbounds %BinaryExpressionNode, ptr %111, i32 0, i32 5
  %112 = load ptr, ptr %memberidx37, align 8
  %memberidx38 = getelementptr inbounds %Node, ptr %112, i32 0, i32 0
  %113 = load ptr, ptr %memberidx38, align 8
  call void @TypeChecker_error(ptr %91, i64 5, ptr %110, ptr %113)
  ret ptr null

else32:                                           ; preds = %ifend29
  br label %ifend33

ifend33:                                          ; preds = %else32
  %114 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MemberExpression, ptr null, i32 1) to i32))
  %115 = load ptr, ptr %object, align 8
  %116 = load ptr, ptr %prop_id, align 8
  %117 = load ptr, ptr %method_type, align 8
  call void @MemberExpression_constructor(ptr %114, ptr %115, ptr %116, ptr %117)
  store ptr %114, ptr %member_expr, align 8
  %118 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %118, i64 mul (i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), i64 2))
  %memberidx39 = getelementptr inbounds %Array_Expression_, ptr %118, i32 0, i32 1
  %119 = load ptr, ptr %memberidx39, align 8
  %120 = load ptr, ptr %index, align 8
  store ptr %120, ptr %119, align 8
  %121 = getelementptr inbounds ptr, ptr %119, i64 1
  %122 = load ptr, ptr %value, align 8
  store ptr %122, ptr %121, align 8
  %123 = getelementptr inbounds ptr, ptr %121, i64 1
  %memberidx40 = getelementptr inbounds %Array_Expression_, ptr %118, i32 0, i32 2
  store i64 2, ptr %memberidx40, align 4
  store ptr %118, ptr %args, align 8
  %124 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%CallExpression, ptr null, i32 1) to i32))
  %125 = load ptr, ptr %member_expr, align 8
  %126 = load ptr, ptr %args, align 8
  %127 = load ptr, ptr %method_type, align 8
  %memberidx41 = getelementptr inbounds %FunctionType, ptr %127, i32 0, i32 2
  %128 = load ptr, ptr %memberidx41, align 8
  call void @CallExpression_constructor(ptr %124, ptr %125, ptr %126, ptr %128)
  ret ptr %124
}

define void @WhileStatement_constructor(ptr %0, ptr %1, ptr %2) {
  %block = alloca ptr, align 8
  %this = alloca ptr, align 8
  %condition = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Statement_constructor, ptr %super, align 8
  store ptr %1, ptr %condition, align 8
  store ptr %2, ptr %block, align 8
  %4 = load ptr, ptr %super, align 8
  call void %4(ptr %0, i64 4)
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %WhileStatement, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %condition, align 8
  store ptr %6, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %WhileStatement, ptr %7, i32 0, i32 2
  %8 = load ptr, ptr %block, align 8
  store ptr %8, ptr %memberidx1, align 8
  ret void
}

define ptr @TypeChecker_check_while_statment(ptr %0, ptr %1) {
  %while_stmt_node = alloca ptr, align 8
  %this = alloca ptr, align 8
  %block = alloca ptr, align 8
  %condition = alloca ptr, align 8
  %prev_in_loop = alloca i1, align 1
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %while_stmt_node, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %while_stmt_node, align 8
  %memberidx = getelementptr inbounds %WhileStatementNode, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @TypeChecker_check_condition(ptr %3, ptr %5)
  store ptr %6, ptr %condition, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %TypeChecker, ptr %7, i32 0, i32 6
  %8 = load i1, ptr %memberidx1, align 1
  store i1 %8, ptr %prev_in_loop, align 1
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %TypeChecker, ptr %9, i32 0, i32 6
  store i1 true, ptr %memberidx2, align 1
  %10 = load ptr, ptr %this, align 8
  %11 = load ptr, ptr %while_stmt_node, align 8
  %memberidx3 = getelementptr inbounds %WhileStatementNode, ptr %11, i32 0, i32 3
  %12 = load ptr, ptr %memberidx3, align 8
  %13 = call ptr @TypeChecker_check_block(ptr %10, ptr %12, ptr null, i1 false)
  store ptr %13, ptr %block, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %TypeChecker, ptr %14, i32 0, i32 6
  %15 = load i1, ptr %prev_in_loop, align 1
  store i1 %15, ptr %memberidx4, align 1
  %16 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%WhileStatement, ptr null, i32 1) to i32))
  %17 = load ptr, ptr %condition, align 8
  %18 = load ptr, ptr %block, align 8
  call void @WhileStatement_constructor(ptr %16, ptr %17, ptr %18)
  ret ptr %16
}

define void @BinaryExpression_constructor(ptr %0, ptr %1, i64 %2, ptr %3, ptr %4, i1 %5) {
  %rhs = alloca ptr, align 8
  %op = alloca i64, align 8
  %this = alloca ptr, align 8
  %value_type = alloca ptr, align 8
  %is_constant = alloca i1, align 1
  %super = alloca ptr, align 8
  %lhs = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Expression_constructor, ptr %super, align 8
  store ptr %1, ptr %lhs, align 8
  store i64 %2, ptr %op, align 4
  store ptr %3, ptr %rhs, align 8
  store ptr %4, ptr %value_type, align 8
  store i1 %5, ptr %is_constant, align 1
  %7 = load ptr, ptr %super, align 8
  call void %7(ptr %0, i64 9)
  %8 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %BinaryExpression, ptr %8, i32 0, i32 4
  %9 = load ptr, ptr %lhs, align 8
  store ptr %9, ptr %memberidx, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %BinaryExpression, ptr %10, i32 0, i32 5
  %11 = load i64, ptr %op, align 4
  store i64 %11, ptr %memberidx1, align 4
  %12 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %BinaryExpression, ptr %12, i32 0, i32 6
  %13 = load ptr, ptr %rhs, align 8
  store ptr %13, ptr %memberidx2, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %14, i32 0, i32 3
  %15 = load ptr, ptr %value_type, align 8
  store ptr %15, ptr %memberidx3, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Expression, ptr %16, i32 0, i32 1
  %17 = load i1, ptr %is_constant, align 1
  store i1 %17, ptr %memberidx4, align 1
  ret void
}

define ptr @TypeChecker_check_bin_expr(ptr %0, ptr %1, ptr %2) {
  %binary_node = alloca ptr, align 8
  %expected_type = alloca ptr, align 8
  %this = alloca ptr, align 8
  %is_assign_op = alloca i1, align 1
  %left = alloca ptr, align 8
  %right = alloca ptr, align 8
  %op = alloca i64, align 8
  %is_const = alloca i1, align 1
  %possible_obj = alloca ptr, align 8
  %exp_type = alloca ptr, align 8
  %boolean_type = alloca ptr, align 8
  %range_type = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %expected_type, align 8
  store ptr %2, ptr %binary_node, align 8
  %4 = load ptr, ptr %binary_node, align 8
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %4, i32 0, i32 4
  %5 = load i64, ptr %memberidx, align 4
  store i64 %5, ptr %op, align 4
  %6 = load i64, ptr %op, align 4
  %7 = icmp sge i64 %6, 19
  %8 = load i64, ptr %op, align 4
  %9 = icmp sle i64 %8, 30
  %10 = and i1 %7, %9
  store i1 %10, ptr %is_assign_op, align 1
  %11 = load i64, ptr %op, align 4
  %12 = icmp eq i64 %11, 19
  %13 = load ptr, ptr %binary_node, align 8
  %memberidx1 = getelementptr inbounds %BinaryExpressionNode, ptr %13, i32 0, i32 3
  %14 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %ExpressionNode, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx2, align 4
  %16 = icmp eq i64 %15, 14
  %17 = and i1 %12, %16
  br i1 %17, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %18 = load ptr, ptr %this, align 8
  %19 = call ptr @Type_unknown()
  %20 = load ptr, ptr %binary_node, align 8
  %memberidx3 = getelementptr inbounds %BinaryExpressionNode, ptr %20, i32 0, i32 3
  %21 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %ExpressionIndexNode, ptr %21, i32 0, i32 3
  %22 = load ptr, ptr %memberidx4, align 8
  %23 = call ptr @TypeChecker_check_expression(ptr %18, ptr %19, ptr %22)
  store ptr %23, ptr %possible_obj, align 8
  %24 = load ptr, ptr %this, align 8
  %25 = call i1 @TypeChecker_has_errored(ptr %24)
  br i1 %25, label %if.entry5, label %else6

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %ifend11
  %26 = load ptr, ptr %this, align 8
  %27 = load ptr, ptr %expected_type, align 8
  %28 = load ptr, ptr %binary_node, align 8
  %memberidx12 = getelementptr inbounds %BinaryExpressionNode, ptr %28, i32 0, i32 3
  %29 = load ptr, ptr %memberidx12, align 8
  %30 = call ptr @TypeChecker_check_expression(ptr %26, ptr %27, ptr %29)
  store ptr %30, ptr %left, align 8
  %31 = load ptr, ptr %this, align 8
  %32 = call i1 @TypeChecker_has_errored(ptr %31)
  br i1 %32, label %if.entry13, label %else14

if.entry5:                                        ; preds = %if.entry
  ret ptr null

else6:                                            ; preds = %if.entry
  br label %ifend7

ifend7:                                           ; preds = %else6
  %33 = load ptr, ptr %possible_obj, align 8
  %memberidx8 = getelementptr inbounds %Expression, ptr %33, i32 0, i32 3
  %34 = load ptr, ptr %memberidx8, align 8
  %35 = call i1 @is_object(ptr %34)
  br i1 %35, label %if.entry9, label %else10

if.entry9:                                        ; preds = %ifend7
  %36 = load ptr, ptr %this, align 8
  %37 = load ptr, ptr %possible_obj, align 8
  %38 = load ptr, ptr %binary_node, align 8
  %39 = call ptr @TypeChecker_check_object_setitem_expr(ptr %36, ptr %37, ptr %38)
  ret ptr %39

else10:                                           ; preds = %ifend7
  br label %ifend11

ifend11:                                          ; preds = %else10
  br label %ifend

if.entry13:                                       ; preds = %ifend
  ret ptr null

else14:                                           ; preds = %ifend
  br label %ifend15

ifend15:                                          ; preds = %else14
  %40 = load ptr, ptr %left, align 8
  %memberidx16 = getelementptr inbounds %Expression, ptr %40, i32 0, i32 3
  %41 = load ptr, ptr %memberidx16, align 8
  %42 = call i1 @is_object(ptr %41)
  %43 = load i1, ptr %is_assign_op, align 1
  %44 = xor i1 %43, true
  %45 = and i1 %42, %44
  %46 = load i64, ptr %op, align 4
  %47 = icmp ne i64 %46, 18
  %48 = and i1 %45, %47
  br i1 %48, label %if.entry17, label %else18

if.entry17:                                       ; preds = %ifend15
  %49 = load ptr, ptr %this, align 8
  %50 = load ptr, ptr %left, align 8
  %51 = load ptr, ptr %binary_node, align 8
  %52 = call ptr @TypeChecker_check_object_binary_expr(ptr %49, ptr %50, ptr %51, ptr null)
  ret ptr %52

else18:                                           ; preds = %ifend15
  br label %ifend19

ifend19:                                          ; preds = %else18
  %53 = load ptr, ptr %this, align 8
  %54 = load ptr, ptr %left, align 8
  %memberidx20 = getelementptr inbounds %Expression, ptr %54, i32 0, i32 3
  %55 = load ptr, ptr %memberidx20, align 8
  %56 = load ptr, ptr %binary_node, align 8
  %memberidx21 = getelementptr inbounds %BinaryExpressionNode, ptr %56, i32 0, i32 5
  %57 = load ptr, ptr %memberidx21, align 8
  %58 = call ptr @TypeChecker_check_expression(ptr %53, ptr %55, ptr %57)
  store ptr %58, ptr %right, align 8
  %59 = load ptr, ptr %this, align 8
  %60 = call i1 @TypeChecker_has_errored(ptr %59)
  br i1 %60, label %if.entry22, label %else23

if.entry22:                                       ; preds = %ifend19
  ret ptr null

else23:                                           ; preds = %ifend19
  br label %ifend24

ifend24:                                          ; preds = %else23
  %61 = load ptr, ptr %right, align 8
  %memberidx25 = getelementptr inbounds %Expression, ptr %61, i32 0, i32 3
  %62 = load ptr, ptr %memberidx25, align 8
  %63 = call i1 @is_object(ptr %62)
  %64 = load i64, ptr %op, align 4
  %65 = icmp eq i64 %64, 18
  %66 = and i1 %63, %65
  br i1 %66, label %if.entry26, label %else27

if.entry26:                                       ; preds = %ifend24
  %67 = load ptr, ptr %this, align 8
  %68 = load ptr, ptr %right, align 8
  %69 = load ptr, ptr %binary_node, align 8
  %70 = load ptr, ptr %left, align 8
  %71 = call ptr @TypeChecker_check_object_binary_expr(ptr %67, ptr %68, ptr %69, ptr %70)
  ret ptr %71

else27:                                           ; preds = %ifend24
  br label %ifend28

ifend28:                                          ; preds = %else27
  %72 = load ptr, ptr %this, align 8
  %73 = call i1 @TypeChecker_has_errored(ptr %72)
  br i1 %73, label %if.entry29, label %else30

if.entry29:                                       ; preds = %ifend28
  ret ptr null

else30:                                           ; preds = %ifend28
  br label %ifend31

ifend31:                                          ; preds = %else30
  %74 = load i1, ptr %is_assign_op, align 1
  br i1 %74, label %if.entry32, label %else33

if.entry32:                                       ; preds = %ifend31
  %75 = load ptr, ptr %this, align 8
  %76 = load ptr, ptr %left, align 8
  %77 = load ptr, ptr %right, align 8
  %78 = load ptr, ptr %binary_node, align 8
  %79 = call ptr @TypeChecker_check_assignment(ptr %75, ptr %76, ptr %77, ptr %78)
  ret ptr %79

else33:                                           ; preds = %ifend31
  br label %ifend34

ifend34:                                          ; preds = %else33
  %80 = load ptr, ptr %left, align 8
  %memberidx35 = getelementptr inbounds %Expression, ptr %80, i32 0, i32 1
  %81 = load i1, ptr %memberidx35, align 1
  %82 = load ptr, ptr %right, align 8
  %memberidx36 = getelementptr inbounds %Expression, ptr %82, i32 0, i32 1
  %83 = load i1, ptr %memberidx36, align 1
  %84 = and i1 %81, %83
  store i1 %84, ptr %is_const, align 1
  %85 = load ptr, ptr %left, align 8
  %memberidx37 = getelementptr inbounds %Expression, ptr %85, i32 0, i32 3
  %86 = load ptr, ptr %memberidx37, align 8
  %memberidx38 = getelementptr inbounds %Type, ptr %86, i32 0, i32 0
  %87 = load i64, ptr %memberidx38, align 4
  %88 = icmp eq i64 %87, 21
  %89 = load ptr, ptr %right, align 8
  %memberidx39 = getelementptr inbounds %Expression, ptr %89, i32 0, i32 3
  %90 = load ptr, ptr %memberidx39, align 8
  %memberidx40 = getelementptr inbounds %Type, ptr %90, i32 0, i32 0
  %91 = load i64, ptr %memberidx40, align 4
  %92 = icmp ne i64 %91, 21
  %93 = and i1 %88, %92
  br i1 %93, label %if.entry41, label %else42

if.entry41:                                       ; preds = %ifend34
  %94 = load ptr, ptr %left, align 8
  %memberidx44 = getelementptr inbounds %Expression, ptr %94, i32 0, i32 3
  %95 = load ptr, ptr %right, align 8
  %memberidx45 = getelementptr inbounds %Expression, ptr %95, i32 0, i32 3
  %96 = load ptr, ptr %memberidx45, align 8
  store ptr %96, ptr %memberidx44, align 8
  br label %ifend43

else42:                                           ; preds = %ifend34
  br label %ifend43

ifend43:                                          ; preds = %else42, %if.entry41
  %97 = load ptr, ptr %left, align 8
  %memberidx46 = getelementptr inbounds %Expression, ptr %97, i32 0, i32 3
  %98 = load ptr, ptr %memberidx46, align 8
  %99 = call i1 @is_numeric(ptr %98)
  %100 = load ptr, ptr %right, align 8
  %memberidx47 = getelementptr inbounds %Expression, ptr %100, i32 0, i32 3
  %101 = load ptr, ptr %memberidx47, align 8
  %102 = call i1 @is_numeric(ptr %101)
  %103 = and i1 %99, %102
  br i1 %103, label %if.entry48, label %else49

if.entry48:                                       ; preds = %ifend43
  %104 = load i64, ptr %op, align 4
  %105 = icmp eq i64 %104, 6
  br i1 %105, label %if.entry51, label %else52

else49:                                           ; preds = %ifend43
  %106 = load ptr, ptr %left, align 8
  %memberidx82 = getelementptr inbounds %Expression, ptr %106, i32 0, i32 3
  %107 = load ptr, ptr %memberidx82, align 8
  %108 = call i1 @is_bool(ptr %107)
  %109 = load ptr, ptr %right, align 8
  %memberidx83 = getelementptr inbounds %Expression, ptr %109, i32 0, i32 3
  %110 = load ptr, ptr %memberidx83, align 8
  %111 = call i1 @is_bool(ptr %110)
  %112 = and i1 %108, %111
  br i1 %112, label %if.entry84, label %else85

ifend50:                                          ; preds = %ifend86, %ifend72
  %113 = load i64, ptr %op, align 4
  %114 = icmp sge i64 %113, 7
  %115 = load i64, ptr %op, align 4
  %116 = icmp sle i64 %115, 12
  %117 = and i1 %114, %116
  br i1 %117, label %if.entry91, label %else92

if.entry51:                                       ; preds = %if.entry48
  %118 = load ptr, ptr %left, align 8
  %memberidx54 = getelementptr inbounds %Expression, ptr %118, i32 0, i32 3
  %119 = load ptr, ptr %memberidx54, align 8
  %120 = call i1 @is_int(ptr %119)
  br i1 %120, label %if.entry55, label %else56

else52:                                           ; preds = %if.entry48
  br label %ifend53

ifend53:                                          ; preds = %else52
  %121 = load i64, ptr %op, align 4
  %122 = icmp sge i64 %121, 1
  %123 = load i64, ptr %op, align 4
  %124 = icmp sle i64 %123, 10
  %125 = and i1 %122, %124
  br i1 %125, label %if.entry63, label %else64

if.entry55:                                       ; preds = %if.entry51
  %126 = load ptr, ptr %left, align 8
  %127 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %127, i64 9)
  %128 = call ptr @cast_exp_to_type(ptr %126, ptr %127)
  store ptr %128, ptr %left, align 8
  br label %ifend57

else56:                                           ; preds = %if.entry51
  br label %ifend57

ifend57:                                          ; preds = %else56, %if.entry55
  %129 = load ptr, ptr %right, align 8
  %memberidx58 = getelementptr inbounds %Expression, ptr %129, i32 0, i32 3
  %130 = load ptr, ptr %memberidx58, align 8
  %131 = call i1 @is_int(ptr %130)
  br i1 %131, label %if.entry59, label %else60

if.entry59:                                       ; preds = %ifend57
  %132 = load ptr, ptr %right, align 8
  %133 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %133, i64 9)
  %134 = call ptr @cast_exp_to_type(ptr %132, ptr %133)
  store ptr %134, ptr %right, align 8
  br label %ifend61

else60:                                           ; preds = %ifend57
  br label %ifend61

ifend61:                                          ; preds = %else60, %if.entry59
  %135 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpression, ptr null, i32 1) to i32))
  %136 = load ptr, ptr %left, align 8
  %137 = load i64, ptr %op, align 4
  %138 = load ptr, ptr %right, align 8
  %139 = load ptr, ptr %left, align 8
  %memberidx62 = getelementptr inbounds %Expression, ptr %139, i32 0, i32 3
  %140 = load ptr, ptr %memberidx62, align 8
  call void @BinaryExpression_constructor(ptr %135, ptr %136, i64 %137, ptr %138, ptr %140, i1 false)
  ret ptr %135

if.entry63:                                       ; preds = %ifend53
  %141 = load ptr, ptr %left, align 8
  %142 = load ptr, ptr %right, align 8
  call void @check_cast_lower_bits(ptr %left, ptr %right)
  %143 = load ptr, ptr %left, align 8
  %memberidx66 = getelementptr inbounds %Expression, ptr %143, i32 0, i32 3
  %144 = load ptr, ptr %memberidx66, align 8
  store ptr %144, ptr %exp_type, align 8
  %145 = load i64, ptr %op, align 4
  %146 = icmp sge i64 %145, 7
  %147 = load i64, ptr %op, align 4
  %148 = icmp sle i64 %147, 10
  %149 = and i1 %146, %148
  br i1 %149, label %if.entry67, label %else68

else64:                                           ; preds = %ifend53
  br label %ifend65

ifend65:                                          ; preds = %else64
  %150 = load i64, ptr %op, align 4
  %151 = icmp sge i64 %150, 13
  %152 = load i64, ptr %op, align 4
  %153 = icmp sle i64 %152, 17
  %154 = and i1 %151, %153
  br i1 %154, label %if.entry70, label %else71

if.entry67:                                       ; preds = %if.entry63
  %155 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BooleanType, ptr null, i32 1) to i32))
  call void @BooleanType_constructor(ptr %155)
  store ptr %155, ptr %exp_type, align 8
  br label %ifend69

else68:                                           ; preds = %if.entry63
  br label %ifend69

ifend69:                                          ; preds = %else68, %if.entry67
  %156 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpression, ptr null, i32 1) to i32))
  %157 = load ptr, ptr %left, align 8
  %158 = load i64, ptr %op, align 4
  %159 = load ptr, ptr %right, align 8
  %160 = load ptr, ptr %exp_type, align 8
  %161 = load i1, ptr %is_const, align 1
  call void @BinaryExpression_constructor(ptr %156, ptr %157, i64 %158, ptr %159, ptr %160, i1 %161)
  ret ptr %156

if.entry70:                                       ; preds = %ifend65
  %162 = load ptr, ptr %left, align 8
  %memberidx73 = getelementptr inbounds %Expression, ptr %162, i32 0, i32 3
  %163 = load ptr, ptr %memberidx73, align 8
  %164 = call i1 @is_float(ptr %163)
  br i1 %164, label %if.entry74, label %else75

else71:                                           ; preds = %ifend65
  br label %ifend72

ifend72:                                          ; preds = %else71
  br label %ifend50

if.entry74:                                       ; preds = %if.entry70
  %165 = load ptr, ptr %left, align 8
  %166 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntType, ptr null, i32 1) to i32))
  call void @IntType_constructor(ptr %166, i64 6, i1 true)
  %167 = call ptr @cast_exp_to_type(ptr %165, ptr %166)
  store ptr %167, ptr %left, align 8
  br label %ifend76

else75:                                           ; preds = %if.entry70
  br label %ifend76

ifend76:                                          ; preds = %else75, %if.entry74
  %168 = load ptr, ptr %right, align 8
  %memberidx77 = getelementptr inbounds %Expression, ptr %168, i32 0, i32 3
  %169 = load ptr, ptr %memberidx77, align 8
  %170 = call i1 @is_float(ptr %169)
  br i1 %170, label %if.entry78, label %else79

if.entry78:                                       ; preds = %ifend76
  %171 = load ptr, ptr %right, align 8
  %172 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntType, ptr null, i32 1) to i32))
  call void @IntType_constructor(ptr %172, i64 6, i1 true)
  %173 = call ptr @cast_exp_to_type(ptr %171, ptr %172)
  store ptr %173, ptr %right, align 8
  br label %ifend80

else79:                                           ; preds = %ifend76
  br label %ifend80

ifend80:                                          ; preds = %else79, %if.entry78
  %174 = load ptr, ptr %left, align 8
  %175 = load ptr, ptr %right, align 8
  call void @check_cast_lower_bits(ptr %left, ptr %right)
  %176 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpression, ptr null, i32 1) to i32))
  %177 = load ptr, ptr %left, align 8
  %178 = load i64, ptr %op, align 4
  %179 = load ptr, ptr %right, align 8
  %180 = load ptr, ptr %left, align 8
  %memberidx81 = getelementptr inbounds %Expression, ptr %180, i32 0, i32 3
  %181 = load ptr, ptr %memberidx81, align 8
  %182 = load i1, ptr %is_const, align 1
  call void @BinaryExpression_constructor(ptr %176, ptr %177, i64 %178, ptr %179, ptr %181, i1 %182)
  ret ptr %176

if.entry84:                                       ; preds = %else49
  %183 = load i64, ptr %op, align 4
  %184 = icmp sge i64 %183, 15
  %185 = load i64, ptr %op, align 4
  %186 = icmp sle i64 %185, 16
  %187 = and i1 %184, %186
  br i1 %187, label %if.entry87, label %else88

else85:                                           ; preds = %else49
  br label %ifend86

ifend86:                                          ; preds = %else85, %ifend89
  br label %ifend50

if.entry87:                                       ; preds = %if.entry84
  %188 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpression, ptr null, i32 1) to i32))
  %189 = load ptr, ptr %left, align 8
  %190 = load i64, ptr %op, align 4
  %191 = load ptr, ptr %right, align 8
  %192 = load ptr, ptr %left, align 8
  %memberidx90 = getelementptr inbounds %Expression, ptr %192, i32 0, i32 3
  %193 = load ptr, ptr %memberidx90, align 8
  %194 = load i1, ptr %is_const, align 1
  call void @BinaryExpression_constructor(ptr %188, ptr %189, i64 %190, ptr %191, ptr %193, i1 %194)
  ret ptr %188

else88:                                           ; preds = %if.entry84
  br label %ifend89

ifend89:                                          ; preds = %else88
  br label %ifend86

if.entry91:                                       ; preds = %ifend50
  %195 = load ptr, ptr %left, align 8
  %memberidx94 = getelementptr inbounds %Expression, ptr %195, i32 0, i32 3
  %196 = load ptr, ptr %memberidx94, align 8
  %197 = call i1 @is_numeric(ptr %196)
  %198 = load ptr, ptr %right, align 8
  %memberidx95 = getelementptr inbounds %Expression, ptr %198, i32 0, i32 3
  %199 = load ptr, ptr %memberidx95, align 8
  %200 = call i1 @is_numeric(ptr %199)
  %201 = and i1 %197, %200
  br i1 %201, label %if.entry96, label %else97

else92:                                           ; preds = %ifend50
  br label %ifend93

ifend93:                                          ; preds = %else92
  %202 = load i64, ptr %op, align 4
  %203 = icmp eq i64 %202, 1
  %204 = load i64, ptr %op, align 4
  %205 = icmp eq i64 %204, 2
  %206 = or i1 %203, %205
  %207 = load ptr, ptr %left, align 8
  %memberidx99 = getelementptr inbounds %Expression, ptr %207, i32 0, i32 3
  %208 = load ptr, ptr %memberidx99, align 8
  %209 = call i1 @is_pointer(ptr %208)
  %210 = and i1 %206, %209
  %211 = load ptr, ptr %right, align 8
  %memberidx100 = getelementptr inbounds %Expression, ptr %211, i32 0, i32 3
  %212 = load ptr, ptr %memberidx100, align 8
  %memberidx101 = getelementptr inbounds %Type, ptr %212, i32 0, i32 0
  %213 = load i64, ptr %memberidx101, align 4
  %214 = icmp eq i64 %213, 6
  %215 = and i1 %210, %214
  br i1 %215, label %if.entry102, label %else103

if.entry96:                                       ; preds = %if.entry91
  %216 = load ptr, ptr %left, align 8
  %217 = load ptr, ptr %right, align 8
  call void @check_cast_lower_bits(ptr %left, ptr %right)
  br label %ifend98

else97:                                           ; preds = %if.entry91
  br label %ifend98

ifend98:                                          ; preds = %else97, %if.entry96
  %218 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BooleanType, ptr null, i32 1) to i32))
  call void @BooleanType_constructor(ptr %218)
  store ptr %218, ptr %boolean_type, align 8
  %219 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpression, ptr null, i32 1) to i32))
  %220 = load ptr, ptr %left, align 8
  %221 = load i64, ptr %op, align 4
  %222 = load ptr, ptr %right, align 8
  %223 = load ptr, ptr %boolean_type, align 8
  %224 = load i1, ptr %is_const, align 1
  call void @BinaryExpression_constructor(ptr %219, ptr %220, i64 %221, ptr %222, ptr %223, i1 %224)
  ret ptr %219

if.entry102:                                      ; preds = %ifend93
  %225 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpression, ptr null, i32 1) to i32))
  %226 = load ptr, ptr %left, align 8
  %227 = load i64, ptr %op, align 4
  %228 = load ptr, ptr %right, align 8
  %229 = load ptr, ptr %left, align 8
  %memberidx105 = getelementptr inbounds %Expression, ptr %229, i32 0, i32 3
  %230 = load ptr, ptr %memberidx105, align 8
  call void @BinaryExpression_constructor(ptr %225, ptr %226, i64 %227, ptr %228, ptr %230, i1 false)
  ret ptr %225

else103:                                          ; preds = %ifend93
  br label %ifend104

ifend104:                                         ; preds = %else103
  %231 = load i64, ptr %op, align 4
  %232 = icmp eq i64 %231, 31
  %233 = load ptr, ptr %left, align 8
  %memberidx106 = getelementptr inbounds %Expression, ptr %233, i32 0, i32 3
  %234 = load ptr, ptr %memberidx106, align 8
  %memberidx107 = getelementptr inbounds %Type, ptr %234, i32 0, i32 0
  %235 = load i64, ptr %memberidx107, align 4
  %236 = icmp eq i64 %235, 6
  %237 = and i1 %232, %236
  %238 = load ptr, ptr %right, align 8
  %memberidx108 = getelementptr inbounds %Expression, ptr %238, i32 0, i32 3
  %239 = load ptr, ptr %memberidx108, align 8
  %memberidx109 = getelementptr inbounds %Type, ptr %239, i32 0, i32 0
  %240 = load i64, ptr %memberidx109, align 4
  %241 = icmp eq i64 %240, 6
  %242 = and i1 %237, %241
  br i1 %242, label %if.entry110, label %else111

if.entry110:                                      ; preds = %ifend104
  %243 = load ptr, ptr %this, align 8
  %244 = call ptr @string_from_bytes(ptr @455, i64 5)
  %245 = call ptr @TypeChecker_get_type_from_current_scope(ptr %243, ptr %244)
  store ptr %245, ptr %range_type, align 8
  %246 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%NewExpression, ptr null, i32 1) to i32))
  %247 = load ptr, ptr %range_type, align 8
  %248 = load ptr, ptr %range_type, align 8
  %249 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %249, i64 mul (i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), i64 2))
  %memberidx113 = getelementptr inbounds %Array_Expression_, ptr %249, i32 0, i32 1
  %250 = load ptr, ptr %memberidx113, align 8
  %251 = load ptr, ptr %left, align 8
  store ptr %251, ptr %250, align 8
  %252 = getelementptr inbounds ptr, ptr %250, i64 1
  %253 = load ptr, ptr %right, align 8
  store ptr %253, ptr %252, align 8
  %254 = getelementptr inbounds ptr, ptr %252, i64 1
  %memberidx114 = getelementptr inbounds %Array_Expression_, ptr %249, i32 0, i32 2
  store i64 2, ptr %memberidx114, align 4
  call void @NewExpression_constructor(ptr %246, ptr %247, ptr %248, ptr %249, i1 true)
  ret ptr %246

else111:                                          ; preds = %ifend104
  br label %ifend112

ifend112:                                         ; preds = %else111
  %255 = load ptr, ptr %this, align 8
  %256 = load i64, ptr %op, align 4
  %257 = call ptr @dump_bin_op(i64 %256)
  %258 = getelementptr inbounds %string, ptr %257, i32 0, i32 0
  %259 = load ptr, ptr %258, align 8
  %memberidx115 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %259, i32 0, i32 5
  %260 = load ptr, ptr %memberidx115, align 8
  %261 = call ptr %260(ptr %257)
  %262 = load ptr, ptr %this, align 8
  %263 = load ptr, ptr %left, align 8
  %memberidx116 = getelementptr inbounds %Expression, ptr %263, i32 0, i32 3
  %264 = load ptr, ptr %memberidx116, align 8
  %265 = call ptr @TypeChecker_dump_type(ptr %262, ptr %264)
  %266 = getelementptr inbounds %string, ptr %265, i32 0, i32 0
  %267 = load ptr, ptr %266, align 8
  %memberidx117 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %267, i32 0, i32 5
  %268 = load ptr, ptr %memberidx117, align 8
  %269 = call ptr %268(ptr %265)
  %270 = load ptr, ptr %this, align 8
  %271 = load ptr, ptr %right, align 8
  %memberidx118 = getelementptr inbounds %Expression, ptr %271, i32 0, i32 3
  %272 = load ptr, ptr %memberidx118, align 8
  %273 = call ptr @TypeChecker_dump_type(ptr %270, ptr %272)
  %274 = getelementptr inbounds %string, ptr %273, i32 0, i32 0
  %275 = load ptr, ptr %274, align 8
  %memberidx119 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %275, i32 0, i32 5
  %276 = load ptr, ptr %memberidx119, align 8
  %277 = call ptr %276(ptr %273)
  %278 = alloca ptr, align 8
  %279 = call i64 (ptr, ptr, ...) @asprintf(ptr %278, ptr @456, ptr %261, ptr %269, ptr %277)
  %280 = load ptr, ptr %278, align 8
  %281 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %281, ptr %280, i64 %279)
  tail call void @free(ptr %261)
  tail call void @free(ptr %269)
  tail call void @free(ptr %277)
  %282 = load ptr, ptr %binary_node, align 8
  %memberidx120 = getelementptr inbounds %Node, ptr %282, i32 0, i32 0
  %283 = load ptr, ptr %memberidx120, align 8
  call void @TypeChecker_error(ptr %255, i64 5, ptr %281, ptr %283)
  ret ptr null
}

define void @CallExpression_constructor(ptr %0, ptr %1, ptr %2, ptr %3) {
  %args = alloca ptr, align 8
  %this = alloca ptr, align 8
  %value_type = alloca ptr, align 8
  %callee = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Expression_constructor, ptr %super, align 8
  store ptr %1, ptr %callee, align 8
  store ptr %2, ptr %args, align 8
  store ptr %3, ptr %value_type, align 8
  %5 = load ptr, ptr %super, align 8
  call void %5(ptr %0, i64 15)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CallExpression, ptr %6, i32 0, i32 4
  %7 = load ptr, ptr %callee, align 8
  store ptr %7, ptr %memberidx, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %CallExpression, ptr %8, i32 0, i32 5
  %9 = load ptr, ptr %args, align 8
  store ptr %9, ptr %memberidx1, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %10, i32 0, i32 3
  %11 = load ptr, ptr %value_type, align 8
  store ptr %11, ptr %memberidx2, align 8
  ret void
}

define ptr @TypeChecker_check_call_expr(ptr %0, ptr %1, ptr %2) {
  %expected_type = alloca ptr, align 8
  %this = alloca ptr, align 8
  %call_expr_node = alloca ptr, align 8
  %args = alloca ptr, align 8
  %func_args = alloca ptr, align 8
  %called = alloca ptr, align 8
  %index = alloca i64, align 8
  %func_ty = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %expected_type, align 8
  store ptr %2, ptr %call_expr_node, align 8
  %4 = load ptr, ptr %this, align 8
  %5 = call ptr @Type_unknown()
  %6 = load ptr, ptr %call_expr_node, align 8
  %memberidx = getelementptr inbounds %CallExpressionNode, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx, align 8
  %8 = call ptr @TypeChecker_check_expression(ptr %4, ptr %5, ptr %7)
  store ptr %8, ptr %called, align 8
  %9 = load ptr, ptr %this, align 8
  %10 = call i1 @TypeChecker_has_errored(ptr %9)
  br i1 %10, label %if.entry, label %else

if.entry:                                         ; preds = %3
  ret ptr null

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %11 = load ptr, ptr %called, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx1, align 4
  %13 = icmp eq i64 %12, 18
  %14 = load ptr, ptr %called, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %14, i32 0, i32 3
  %15 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Type, ptr %15, i32 0, i32 0
  %16 = load i64, ptr %memberidx3, align 4
  %17 = icmp eq i64 %16, 21
  %18 = and i1 %13, %17
  br i1 %18, label %if.entry4, label %else5

if.entry4:                                        ; preds = %ifend
  %19 = load ptr, ptr %this, align 8
  %20 = load ptr, ptr %called, align 8
  %21 = load ptr, ptr %call_expr_node, align 8
  %22 = call ptr @TypeChecker_check_intrinsic_call(ptr %19, ptr %20, ptr %21)
  ret ptr %22

else5:                                            ; preds = %ifend
  br label %ifend6

ifend6:                                           ; preds = %else5
  %23 = load ptr, ptr %called, align 8
  %memberidx7 = getelementptr inbounds %Expression, ptr %23, i32 0, i32 3
  %24 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Type, ptr %24, i32 0, i32 0
  %25 = load i64, ptr %memberidx8, align 4
  %26 = icmp ne i64 %25, 16
  br i1 %26, label %if.entry9, label %else10

if.entry9:                                        ; preds = %ifend6
  %27 = load ptr, ptr %this, align 8
  %28 = load ptr, ptr %this, align 8
  %29 = load ptr, ptr %called, align 8
  %memberidx12 = getelementptr inbounds %Expression, ptr %29, i32 0, i32 3
  %30 = load ptr, ptr %memberidx12, align 8
  %31 = call ptr @TypeChecker_dump_type(ptr %28, ptr %30)
  %32 = getelementptr inbounds %string, ptr %31, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %memberidx13 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %33, i32 0, i32 5
  %34 = load ptr, ptr %memberidx13, align 8
  %35 = call ptr %34(ptr %31)
  %36 = alloca ptr, align 8
  %37 = call i64 (ptr, ptr, ...) @asprintf(ptr %36, ptr @493, ptr %35)
  %38 = load ptr, ptr %36, align 8
  %39 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %39, ptr %38, i64 %37)
  tail call void @free(ptr %35)
  %40 = load ptr, ptr %call_expr_node, align 8
  %memberidx14 = getelementptr inbounds %CallExpressionNode, ptr %40, i32 0, i32 3
  %41 = load ptr, ptr %memberidx14, align 8
  %memberidx15 = getelementptr inbounds %Node, ptr %41, i32 0, i32 0
  %42 = load ptr, ptr %memberidx15, align 8
  call void @TypeChecker_error(ptr %27, i64 5, ptr %39, ptr %42)
  ret ptr null

else10:                                           ; preds = %ifend6
  br label %ifend11

ifend11:                                          ; preds = %else10
  %43 = load ptr, ptr %called, align 8
  %memberidx16 = getelementptr inbounds %Expression, ptr %43, i32 0, i32 3
  %44 = load ptr, ptr %memberidx16, align 8
  store ptr %44, ptr %func_ty, align 8
  %45 = load ptr, ptr %this, align 8
  %46 = load ptr, ptr %called, align 8
  %47 = call ptr @TypeChecker_get_func_args_from_expression(ptr %45, ptr %46)
  store ptr %47, ptr %func_args, align 8
  %48 = load ptr, ptr %this, align 8
  %49 = load ptr, ptr %func_ty, align 8
  %50 = load ptr, ptr %func_args, align 8
  %51 = load ptr, ptr %call_expr_node, align 8
  %memberidx17 = getelementptr inbounds %CallExpressionNode, ptr %51, i32 0, i32 4
  %52 = load ptr, ptr %memberidx17, align 8
  %53 = call ptr @TypeChecker_fill_in_call_args(ptr %48, ptr %49, ptr %50, ptr %52)
  store ptr %53, ptr %args, align 8
  %54 = load ptr, ptr %this, align 8
  %55 = call i1 @TypeChecker_has_errored(ptr %54)
  br i1 %55, label %if.entry18, label %else19

if.entry18:                                       ; preds = %ifend11
  ret ptr null

else19:                                           ; preds = %ifend11
  br label %ifend20

ifend20:                                          ; preds = %else19
  %56 = load ptr, ptr %this, align 8
  %57 = load ptr, ptr %func_ty, align 8
  %58 = load ptr, ptr %args, align 8
  %59 = call i64 @TypeChecker_check_function_call_args_match(ptr %56, ptr %57, ptr %58)
  store i64 %59, ptr %index, align 4
  %60 = load i64, ptr %index, align 4
  %61 = icmp sge i64 %60, -1
  br i1 %61, label %if.entry21, label %else22

if.entry21:                                       ; preds = %ifend20
  %62 = load i64, ptr %index, align 4
  %63 = icmp eq i64 %62, -1
  br i1 %63, label %if.entry24, label %else25

else22:                                           ; preds = %ifend20
  br label %ifend23

ifend23:                                          ; preds = %else22
  %64 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%CallExpression, ptr null, i32 1) to i32))
  %65 = load ptr, ptr %called, align 8
  %66 = load ptr, ptr %args, align 8
  %67 = load ptr, ptr %func_ty, align 8
  %memberidx37 = getelementptr inbounds %FunctionType, ptr %67, i32 0, i32 2
  %68 = load ptr, ptr %memberidx37, align 8
  call void @CallExpression_constructor(ptr %64, ptr %65, ptr %66, ptr %68)
  ret ptr %64

if.entry24:                                       ; preds = %if.entry21
  %69 = load ptr, ptr %this, align 8
  %70 = load ptr, ptr %func_ty, align 8
  %memberidx27 = getelementptr inbounds %FunctionType, ptr %70, i32 0, i32 1
  %71 = load ptr, ptr %memberidx27, align 8
  %memberidx28 = getelementptr inbounds %Array_Type_, ptr %71, i32 0, i32 2
  %72 = load i64, ptr %memberidx28, align 4
  %73 = load ptr, ptr %args, align 8
  %memberidx29 = getelementptr inbounds %Array_Expression_, ptr %73, i32 0, i32 2
  %74 = load i64, ptr %memberidx29, align 4
  %75 = alloca ptr, align 8
  %76 = call i64 (ptr, ptr, ...) @asprintf(ptr %75, ptr @494, i64 %72, i64 %74)
  %77 = load ptr, ptr %75, align 8
  %78 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %78, ptr %77, i64 %76)
  %79 = load ptr, ptr %call_expr_node, align 8
  %memberidx30 = getelementptr inbounds %Node, ptr %79, i32 0, i32 0
  %80 = load ptr, ptr %memberidx30, align 8
  call void @TypeChecker_error(ptr %69, i64 4, ptr %78, ptr %80)
  br label %ifend26

else25:                                           ; preds = %if.entry21
  %81 = load ptr, ptr %this, align 8
  %82 = load ptr, ptr %this, align 8
  %83 = load ptr, ptr %func_ty, align 8
  %memberidx31 = getelementptr inbounds %FunctionType, ptr %83, i32 0, i32 1
  %84 = load ptr, ptr %memberidx31, align 8
  %85 = load i64, ptr %index, align 4
  %86 = call ptr @Array_Type____getitem__(ptr %84, i64 %85)
  %87 = call ptr @TypeChecker_dump_type(ptr %82, ptr %86)
  %88 = getelementptr inbounds %string, ptr %87, i32 0, i32 0
  %89 = load ptr, ptr %88, align 8
  %memberidx32 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %89, i32 0, i32 5
  %90 = load ptr, ptr %memberidx32, align 8
  %91 = call ptr %90(ptr %87)
  %92 = load ptr, ptr %this, align 8
  %93 = load ptr, ptr %args, align 8
  %94 = load i64, ptr %index, align 4
  %95 = call ptr @Array_Expression____getitem__(ptr %93, i64 %94)
  %memberidx33 = getelementptr inbounds %Expression, ptr %95, i32 0, i32 3
  %96 = load ptr, ptr %memberidx33, align 8
  %97 = call ptr @TypeChecker_dump_type(ptr %92, ptr %96)
  %98 = getelementptr inbounds %string, ptr %97, i32 0, i32 0
  %99 = load ptr, ptr %98, align 8
  %memberidx34 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %99, i32 0, i32 5
  %100 = load ptr, ptr %memberidx34, align 8
  %101 = call ptr %100(ptr %97)
  %102 = alloca ptr, align 8
  %103 = call i64 (ptr, ptr, ...) @asprintf(ptr %102, ptr @495, ptr %91, ptr %101)
  %104 = load ptr, ptr %102, align 8
  %105 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %105, ptr %104, i64 %103)
  tail call void @free(ptr %91)
  tail call void @free(ptr %101)
  %106 = load ptr, ptr %call_expr_node, align 8
  %memberidx35 = getelementptr inbounds %CallExpressionNode, ptr %106, i32 0, i32 4
  %107 = load ptr, ptr %memberidx35, align 8
  %108 = load i64, ptr %index, align 4
  %109 = call ptr @Array_ExpressionNode____getitem__(ptr %107, i64 %108)
  %memberidx36 = getelementptr inbounds %Node, ptr %109, i32 0, i32 0
  %110 = load ptr, ptr %memberidx36, align 8
  call void @TypeChecker_error(ptr %81, i64 5, ptr %105, ptr %110)
  br label %ifend26

ifend26:                                          ; preds = %else25, %if.entry24
  ret ptr null
}

define ptr @TypeChecker_get_current_class(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %TypeChecker, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = call ptr @get_class(ptr %3, ptr %5)
  ret ptr %6
}

define ptr @TypeChecker_check_can_break(ptr %0, ptr %1) {
  %stmt_node = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %stmt_node, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %3, i32 0, i32 6
  %4 = load i1, ptr %memberidx, align 1
  %5 = xor i1 %4, true
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %this, align 8
  %7 = call ptr @string_from_bytes(ptr @518, i64 29)
  %8 = load ptr, ptr %stmt_node, align 8
  %memberidx1 = getelementptr inbounds %Node, ptr %8, i32 0, i32 0
  %9 = load ptr, ptr %memberidx1, align 8
  call void @TypeChecker_error(ptr %6, i64 4, ptr %7, ptr %9)
  ret ptr null

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Statement, ptr null, i32 1) to i32))
  call void @Statement_constructor(ptr %10, i64 6)
  ret ptr %10
}

define ptr @TypeChecker_get_class_from_var_id(ptr %0, ptr %1) {
  %var_id = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %var_id, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %var_id, align 8
  %memberidx = getelementptr inbounds %VarId, ptr %4, i32 0, i32 1
  %5 = load i64, ptr %memberidx, align 4
  %6 = call ptr @TypeChecker_get_module(ptr %3, i64 %5)
  %memberidx1 = getelementptr inbounds %Module, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = load ptr, ptr %var_id, align 8
  %memberidx2 = getelementptr inbounds %VarId, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %memberidx2, align 4
  %10 = call ptr @Array_Class____getitem__(ptr %7, i64 %9)
  ret ptr %10
}

define ptr @TypeChecker_get_enum_from_var_id(ptr %0, ptr %1) {
  %var_id = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %var_id, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %var_id, align 8
  %memberidx = getelementptr inbounds %VarId, ptr %4, i32 0, i32 1
  %5 = load i64, ptr %memberidx, align 4
  %6 = call ptr @TypeChecker_get_module(ptr %3, i64 %5)
  %memberidx1 = getelementptr inbounds %Module, ptr %6, i32 0, i32 6
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = load ptr, ptr %var_id, align 8
  %memberidx2 = getelementptr inbounds %VarId, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %memberidx2, align 4
  %10 = call ptr @Array_Enum____getitem__(ptr %7, i64 %9)
  ret ptr %10
}

define ptr @TypeChecker_check_type(ptr %0, ptr %1) {
  %type_node = alloca ptr, align 8
  %this = alloca ptr, align 8
  %length = alloca i64, align 8
  %element_type = alloca ptr, align 8
  %len_expr = alloca ptr, align 8
  %int_ty = alloca ptr, align 8
  %size_ty = alloca ptr, align 8
  %array_node = alloca ptr, align 8
  %fnc_node = alloca ptr, align 8
  %return_type = alloca ptr, align 8
  %arg_types = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %arg = alloca ptr, align 8
  %tuple_type = alloca ptr, align 8
  %tuple_type_node = alloca ptr, align 8
  %element_type1 = alloca ptr, align 8
  %tmp_it2 = alloca ptr, align 8
  %types = alloca ptr, align 8
  %name = alloca ptr, align 8
  %record_type = alloca ptr, align 8
  %found_type = alloca ptr, align 8
  %identifer_tok = alloca ptr, align 8
  %generic_type = alloca ptr, align 8
  %tmp_it3 = alloca ptr, align 8
  %arg4 = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %type_node, align 8
  %3 = load ptr, ptr %type_node, align 8
  %memberidx = getelementptr inbounds %TypeNode, ptr %3, i32 0, i32 1
  %4 = load i64, ptr %memberidx, align 4
  %5 = icmp eq i64 %4, 13
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%PointerType, ptr null, i32 1) to i32))
  %7 = load ptr, ptr %this, align 8
  %8 = load ptr, ptr %type_node, align 8
  %memberidx5 = getelementptr inbounds %PointerTypeNode, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %memberidx5, align 8
  %10 = call ptr @TypeChecker_check_type(ptr %7, ptr %9)
  call void @PointerType_constructor(ptr %6, ptr %10)
  ret ptr %6

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %11 = load ptr, ptr %type_node, align 8
  %memberidx6 = getelementptr inbounds %TypeNode, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx6, align 4
  %13 = icmp eq i64 %12, 14
  br i1 %13, label %if.entry7, label %else8

if.entry7:                                        ; preds = %ifend
  %14 = load ptr, ptr %type_node, align 8
  store ptr %14, ptr %array_node, align 8
  %15 = alloca %IntType, align 8
  call void @IntType_constructor(ptr %15, i64 6, i1 false)
  store ptr %15, ptr %int_ty, align 8
  %16 = load ptr, ptr %this, align 8
  %17 = load ptr, ptr %int_ty, align 8
  %18 = load ptr, ptr %array_node, align 8
  %memberidx10 = getelementptr inbounds %ArrayTypeNode, ptr %18, i32 0, i32 3
  %19 = load ptr, ptr %memberidx10, align 8
  %20 = call ptr @TypeChecker_check_expression(ptr %16, ptr %17, ptr %19)
  store ptr %20, ptr %len_expr, align 8
  %21 = load ptr, ptr %this, align 8
  %22 = call i1 @TypeChecker_has_errored(ptr %21)
  br i1 %22, label %if.entry11, label %else12

else8:                                            ; preds = %ifend
  br label %ifend9

ifend9:                                           ; preds = %else8
  %23 = load ptr, ptr %type_node, align 8
  %memberidx41 = getelementptr inbounds %TypeNode, ptr %23, i32 0, i32 1
  %24 = load i64, ptr %memberidx41, align 4
  %25 = icmp eq i64 %24, 16
  br i1 %25, label %if.entry42, label %else43

if.entry11:                                       ; preds = %if.entry7
  %26 = call ptr @Type_unknown()
  ret ptr %26

else12:                                           ; preds = %if.entry7
  br label %ifend13

ifend13:                                          ; preds = %else12
  %27 = load ptr, ptr %len_expr, align 8
  %memberidx14 = getelementptr inbounds %Expression, ptr %27, i32 0, i32 3
  %28 = load ptr, ptr %memberidx14, align 8
  %29 = call i1 @is_int(ptr %28)
  %30 = xor i1 %29, true
  br i1 %30, label %if.entry15, label %else16

if.entry15:                                       ; preds = %ifend13
  %31 = load ptr, ptr %this, align 8
  %32 = call ptr @string_from_bytes(ptr @413, i64 23)
  %33 = load ptr, ptr %array_node, align 8
  %memberidx18 = getelementptr inbounds %ArrayTypeNode, ptr %33, i32 0, i32 3
  %34 = load ptr, ptr %memberidx18, align 8
  %memberidx19 = getelementptr inbounds %Node, ptr %34, i32 0, i32 0
  %35 = load ptr, ptr %memberidx19, align 8
  call void @TypeChecker_error(ptr %31, i64 4, ptr %32, ptr %35)
  ret ptr null

else16:                                           ; preds = %ifend13
  br label %ifend17

ifend17:                                          ; preds = %else16
  %36 = load ptr, ptr %len_expr, align 8
  %memberidx20 = getelementptr inbounds %Expression, ptr %36, i32 0, i32 3
  %37 = load ptr, ptr %memberidx20, align 8
  store ptr %37, ptr %size_ty, align 8
  %38 = load ptr, ptr %size_ty, align 8
  %memberidx21 = getelementptr inbounds %IntType, ptr %38, i32 0, i32 1
  %39 = load i1, ptr %memberidx21, align 1
  %40 = load ptr, ptr %size_ty, align 8
  %memberidx22 = getelementptr inbounds %Type, ptr %40, i32 0, i32 0
  %41 = load i64, ptr %memberidx22, align 4
  %42 = icmp ne i64 %41, 6
  %43 = or i1 %39, %42
  br i1 %43, label %if.entry23, label %else24

if.entry23:                                       ; preds = %ifend17
  %44 = load ptr, ptr %this, align 8
  %45 = call ptr @string_from_bytes(ptr @414, i64 23)
  %46 = load ptr, ptr %array_node, align 8
  %memberidx26 = getelementptr inbounds %ArrayTypeNode, ptr %46, i32 0, i32 3
  %47 = load ptr, ptr %memberidx26, align 8
  %memberidx27 = getelementptr inbounds %Node, ptr %47, i32 0, i32 0
  %48 = load ptr, ptr %memberidx27, align 8
  call void @TypeChecker_error(ptr %44, i64 4, ptr %45, ptr %48)
  ret ptr null

else24:                                           ; preds = %ifend17
  br label %ifend25

ifend25:                                          ; preds = %else24
  %49 = load ptr, ptr %len_expr, align 8
  %memberidx28 = getelementptr inbounds %Expression, ptr %49, i32 0, i32 1
  %50 = load i1, ptr %memberidx28, align 1
  %51 = xor i1 %50, true
  br i1 %51, label %if.entry29, label %else30

if.entry29:                                       ; preds = %ifend25
  %52 = load ptr, ptr %this, align 8
  %53 = call ptr @string_from_bytes(ptr @415, i64 30)
  %54 = load ptr, ptr %array_node, align 8
  %memberidx32 = getelementptr inbounds %ArrayTypeNode, ptr %54, i32 0, i32 3
  %55 = load ptr, ptr %memberidx32, align 8
  %memberidx33 = getelementptr inbounds %Node, ptr %55, i32 0, i32 0
  %56 = load ptr, ptr %memberidx33, align 8
  call void @TypeChecker_error(ptr %52, i64 4, ptr %53, ptr %56)
  ret ptr null

else30:                                           ; preds = %ifend25
  br label %ifend31

ifend31:                                          ; preds = %else30
  %57 = load ptr, ptr %this, align 8
  %memberidx34 = getelementptr inbounds %TypeChecker, ptr %57, i32 0, i32 0
  %58 = load ptr, ptr %memberidx34, align 8
  %59 = load ptr, ptr %len_expr, align 8
  %60 = call i64 @evaluate_const_int_expression(ptr %58, ptr %59)
  store i64 %60, ptr %length, align 4
  %61 = load i64, ptr %length, align 4
  %62 = icmp slt i64 %61, 0
  br i1 %62, label %if.entry35, label %else36

if.entry35:                                       ; preds = %ifend31
  %63 = load ptr, ptr %this, align 8
  %64 = call ptr @string_from_bytes(ptr @416, i64 28)
  %65 = load ptr, ptr %array_node, align 8
  %memberidx38 = getelementptr inbounds %ArrayTypeNode, ptr %65, i32 0, i32 3
  %66 = load ptr, ptr %memberidx38, align 8
  %memberidx39 = getelementptr inbounds %Node, ptr %66, i32 0, i32 0
  %67 = load ptr, ptr %memberidx39, align 8
  call void @TypeChecker_error(ptr %63, i64 4, ptr %64, ptr %67)
  ret ptr null

else36:                                           ; preds = %ifend31
  br label %ifend37

ifend37:                                          ; preds = %else36
  %68 = load ptr, ptr %this, align 8
  %69 = load ptr, ptr %array_node, align 8
  %memberidx40 = getelementptr inbounds %ArrayTypeNode, ptr %69, i32 0, i32 2
  %70 = load ptr, ptr %memberidx40, align 8
  %71 = call ptr @TypeChecker_check_type(ptr %68, ptr %70)
  store ptr %71, ptr %element_type, align 8
  %72 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayType, ptr null, i32 1) to i32))
  %73 = load ptr, ptr %element_type, align 8
  %74 = load i64, ptr %length, align 4
  call void @ArrayType_constructor(ptr %72, ptr %73, i64 %74)
  ret ptr %72

if.entry42:                                       ; preds = %ifend9
  %75 = load ptr, ptr %type_node, align 8
  store ptr %75, ptr %fnc_node, align 8
  %76 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Type_, ptr null, i32 1) to i32))
  call void @Array_Type__constructor(ptr %76, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx45 = getelementptr inbounds %Array_Type_, ptr %76, i32 0, i32 1
  %77 = load ptr, ptr %memberidx45, align 8
  %memberidx46 = getelementptr inbounds %Array_Type_, ptr %76, i32 0, i32 2
  store i64 0, ptr %memberidx46, align 4
  store ptr %76, ptr %arg_types, align 8
  br label %for.entry

else43:                                           ; preds = %ifend9
  %78 = load ptr, ptr %type_node, align 8
  %memberidx50 = getelementptr inbounds %TypeNode, ptr %78, i32 0, i32 1
  %79 = load i64, ptr %memberidx50, align 4
  %80 = icmp eq i64 %79, 15
  br i1 %80, label %if.entry51, label %else52

ifend44:                                          ; preds = %ifend53
  %81 = load ptr, ptr %type_node, align 8
  %memberidx62 = getelementptr inbounds %TypeNode, ptr %81, i32 0, i32 1
  %82 = load i64, ptr %memberidx62, align 4
  %83 = icmp eq i64 %82, 17
  br i1 %83, label %if.entry63, label %else64

for.entry:                                        ; preds = %if.entry42
  %84 = load ptr, ptr %fnc_node, align 8
  %memberidx47 = getelementptr inbounds %FunctionTypeNode, ptr %84, i32 0, i32 2
  %85 = load ptr, ptr %memberidx47, align 8
  %86 = call ptr @Array_TypeNode____iter__(ptr %85)
  store ptr %86, ptr %tmp_it, align 8
  %87 = load ptr, ptr %tmp_it, align 8
  %88 = call ptr @ArrayIterator_TypeNode__next(ptr %87)
  store ptr %88, ptr %arg, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %89 = load ptr, ptr %tmp_it, align 8
  %memberidx48 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %89, i32 0, i32 0
  %90 = load i1, ptr %memberidx48, align 1
  %91 = xor i1 %90, true
  br i1 %91, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %92 = load ptr, ptr %arg_types, align 8
  %93 = load ptr, ptr %this, align 8
  %94 = load ptr, ptr %arg, align 8
  %95 = call ptr @TypeChecker_check_type(ptr %93, ptr %94)
  call void @Array_Type____sl__(ptr %92, ptr %95)
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %96 = load ptr, ptr %tmp_it, align 8
  %97 = call ptr @ArrayIterator_TypeNode__next(ptr %96)
  store ptr %97, ptr %arg, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %98 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %98)
  %99 = load ptr, ptr %this, align 8
  %100 = load ptr, ptr %fnc_node, align 8
  %memberidx49 = getelementptr inbounds %FunctionTypeNode, ptr %100, i32 0, i32 3
  %101 = load ptr, ptr %memberidx49, align 8
  %102 = call ptr @TypeChecker_check_type(ptr %99, ptr %101)
  store ptr %102, ptr %return_type, align 8
  %103 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FunctionType, ptr null, i32 1) to i32))
  %104 = load ptr, ptr %arg_types, align 8
  %105 = load ptr, ptr %return_type, align 8
  call void @FunctionType_constructor(ptr %103, ptr %104, ptr %105)
  ret ptr %103

if.entry51:                                       ; preds = %else43
  %106 = load ptr, ptr %type_node, align 8
  store ptr %106, ptr %tuple_type_node, align 8
  %107 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%TupleType, ptr null, i32 1) to i32))
  call void @TupleType_constructor(ptr %107)
  store ptr %107, ptr %tuple_type, align 8
  br label %for.entry54

else52:                                           ; preds = %else43
  br label %ifend53

ifend53:                                          ; preds = %else52
  br label %ifend44

for.entry54:                                      ; preds = %if.entry51
  %108 = load ptr, ptr %tuple_type_node, align 8
  %memberidx55 = getelementptr inbounds %TupleTypeNode, ptr %108, i32 0, i32 2
  %109 = load ptr, ptr %memberidx55, align 8
  %110 = call ptr @Array_TypeNode____iter__(ptr %109)
  store ptr %110, ptr %tmp_it2, align 8
  %111 = load ptr, ptr %tmp_it2, align 8
  %112 = call ptr @ArrayIterator_TypeNode__next(ptr %111)
  store ptr %112, ptr %element_type1, align 8
  br label %for.cond56

for.cond56:                                       ; preds = %for.incr58, %for.entry54
  %113 = load ptr, ptr %tmp_it2, align 8
  %memberidx60 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %113, i32 0, i32 0
  %114 = load i1, ptr %memberidx60, align 1
  %115 = xor i1 %114, true
  br i1 %115, label %for.body57, label %for.end59

for.body57:                                       ; preds = %for.cond56
  %116 = load ptr, ptr %tuple_type, align 8
  %memberidx61 = getelementptr inbounds %TupleType, ptr %116, i32 0, i32 1
  %117 = load ptr, ptr %memberidx61, align 8
  %118 = load ptr, ptr %this, align 8
  %119 = load ptr, ptr %element_type1, align 8
  %120 = call ptr @TypeChecker_check_type(ptr %118, ptr %119)
  call void @Array_Type____sl__(ptr %117, ptr %120)
  br label %for.incr58

for.incr58:                                       ; preds = %for.body57
  %121 = load ptr, ptr %tmp_it2, align 8
  %122 = call ptr @ArrayIterator_TypeNode__next(ptr %121)
  store ptr %122, ptr %element_type1, align 8
  br label %for.cond56

for.end59:                                        ; preds = %for.cond56
  %123 = load ptr, ptr %tmp_it2, align 8
  tail call void @free(ptr %123)
  %124 = load ptr, ptr %tuple_type, align 8
  ret ptr %124

if.entry63:                                       ; preds = %ifend44
  %125 = load ptr, ptr %type_node, align 8
  store ptr %125, ptr %record_type, align 8
  %126 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Type_, ptr null, i32 1) to i32))
  call void @Array_Type__constructor(ptr %126, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx66 = getelementptr inbounds %Array_Type_, ptr %126, i32 0, i32 1
  %127 = load ptr, ptr %memberidx66, align 8
  %memberidx67 = getelementptr inbounds %Array_Type_, ptr %126, i32 0, i32 2
  store i64 0, ptr %memberidx67, align 4
  store ptr %126, ptr %types, align 8
  %128 = load ptr, ptr %record_type, align 8
  %memberidx68 = getelementptr inbounds %RecordTypeNode, ptr %128, i32 0, i32 2
  %129 = load ptr, ptr %memberidx68, align 8
  store ptr %129, ptr %identifer_tok, align 8
  %130 = load ptr, ptr %identifer_tok, align 8
  %memberidx69 = getelementptr inbounds %IdentifierToken, ptr %130, i32 0, i32 2
  %131 = load ptr, ptr %memberidx69, align 8
  store ptr %131, ptr %name, align 8
  %132 = load ptr, ptr %name, align 8
  %133 = call ptr @string_from_bytes(ptr @325, i64 4)
  %134 = call i1 @string___eq__(ptr %132, ptr %133)
  br i1 %134, label %if.entry70, label %else71

else64:                                           ; preds = %ifend44
  br label %ifend65

ifend65:                                          ; preds = %else64
  %135 = call ptr @Type_unknown()
  ret ptr %135

if.entry70:                                       ; preds = %if.entry63
  %136 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BooleanType, ptr null, i32 1) to i32))
  call void @BooleanType_constructor(ptr %136)
  ret ptr %136

else71:                                           ; preds = %if.entry63
  br label %ifend72

ifend72:                                          ; preds = %else71
  %137 = load ptr, ptr %name, align 8
  %138 = call ptr @string_from_bytes(ptr @417, i64 2)
  %139 = call i1 @string___eq__(ptr %137, ptr %138)
  br i1 %139, label %if.entry73, label %else74

if.entry73:                                       ; preds = %ifend72
  %140 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntType, ptr null, i32 1) to i32))
  call void @IntType_constructor(ptr %140, i64 1, i1 false)
  ret ptr %140

else74:                                           ; preds = %ifend72
  br label %ifend75

ifend75:                                          ; preds = %else74
  %141 = load ptr, ptr %name, align 8
  %142 = call ptr @string_from_bytes(ptr @418, i64 2)
  %143 = call i1 @string___eq__(ptr %141, ptr %142)
  br i1 %143, label %if.entry76, label %else77

if.entry76:                                       ; preds = %ifend75
  %144 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntType, ptr null, i32 1) to i32))
  call void @IntType_constructor(ptr %144, i64 2, i1 false)
  ret ptr %144

else77:                                           ; preds = %ifend75
  br label %ifend78

ifend78:                                          ; preds = %else77
  %145 = load ptr, ptr %name, align 8
  %146 = call ptr @string_from_bytes(ptr @419, i64 3)
  %147 = call i1 @string___eq__(ptr %145, ptr %146)
  br i1 %147, label %if.entry79, label %else80

if.entry79:                                       ; preds = %ifend78
  %148 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntType, ptr null, i32 1) to i32))
  call void @IntType_constructor(ptr %148, i64 3, i1 false)
  ret ptr %148

else80:                                           ; preds = %ifend78
  br label %ifend81

ifend81:                                          ; preds = %else80
  %149 = load ptr, ptr %name, align 8
  %150 = call ptr @string_from_bytes(ptr @420, i64 3)
  %151 = call i1 @string___eq__(ptr %149, ptr %150)
  br i1 %151, label %if.entry82, label %else83

if.entry82:                                       ; preds = %ifend81
  %152 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntType, ptr null, i32 1) to i32))
  call void @IntType_constructor(ptr %152, i64 4, i1 false)
  ret ptr %152

else83:                                           ; preds = %ifend81
  br label %ifend84

ifend84:                                          ; preds = %else83
  %153 = load ptr, ptr %name, align 8
  %154 = call ptr @string_from_bytes(ptr @421, i64 3)
  %155 = call i1 @string___eq__(ptr %153, ptr %154)
  br i1 %155, label %if.entry85, label %else86

if.entry85:                                       ; preds = %ifend84
  %156 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntType, ptr null, i32 1) to i32))
  call void @IntType_constructor(ptr %156, i64 5, i1 false)
  ret ptr %156

else86:                                           ; preds = %ifend84
  br label %ifend87

ifend87:                                          ; preds = %else86
  %157 = load ptr, ptr %name, align 8
  %158 = call ptr @string_from_bytes(ptr @422, i64 4)
  %159 = call i1 @string___eq__(ptr %157, ptr %158)
  br i1 %159, label %if.entry88, label %else89

if.entry88:                                       ; preds = %ifend87
  %160 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntType, ptr null, i32 1) to i32))
  call void @IntType_constructor(ptr %160, i64 7, i1 false)
  ret ptr %160

else89:                                           ; preds = %ifend87
  br label %ifend90

ifend90:                                          ; preds = %else89
  %161 = load ptr, ptr %name, align 8
  %162 = call ptr @string_from_bytes(ptr @328, i64 4)
  %163 = call i1 @string___eq__(ptr %161, ptr %162)
  br i1 %163, label %if.entry91, label %else92

if.entry91:                                       ; preds = %ifend90
  %164 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntType, ptr null, i32 1) to i32))
  call void @IntType_constructor(ptr %164, i64 6, i1 false)
  ret ptr %164

else92:                                           ; preds = %ifend90
  br label %ifend93

ifend93:                                          ; preds = %else92
  %165 = load ptr, ptr %name, align 8
  %166 = call ptr @string_from_bytes(ptr @423, i64 2)
  %167 = call i1 @string___eq__(ptr %165, ptr %166)
  br i1 %167, label %if.entry94, label %else95

if.entry94:                                       ; preds = %ifend93
  %168 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntType, ptr null, i32 1) to i32))
  call void @IntType_constructor(ptr %168, i64 1, i1 true)
  ret ptr %168

else95:                                           ; preds = %ifend93
  br label %ifend96

ifend96:                                          ; preds = %else95
  %169 = load ptr, ptr %name, align 8
  %170 = call ptr @string_from_bytes(ptr @424, i64 2)
  %171 = call i1 @string___eq__(ptr %169, ptr %170)
  br i1 %171, label %if.entry97, label %else98

if.entry97:                                       ; preds = %ifend96
  %172 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntType, ptr null, i32 1) to i32))
  call void @IntType_constructor(ptr %172, i64 2, i1 true)
  ret ptr %172

else98:                                           ; preds = %ifend96
  br label %ifend99

ifend99:                                          ; preds = %else98
  %173 = load ptr, ptr %name, align 8
  %174 = call ptr @string_from_bytes(ptr @425, i64 3)
  %175 = call i1 @string___eq__(ptr %173, ptr %174)
  br i1 %175, label %if.entry100, label %else101

if.entry100:                                      ; preds = %ifend99
  %176 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntType, ptr null, i32 1) to i32))
  call void @IntType_constructor(ptr %176, i64 3, i1 true)
  ret ptr %176

else101:                                          ; preds = %ifend99
  br label %ifend102

ifend102:                                         ; preds = %else101
  %177 = load ptr, ptr %name, align 8
  %178 = call ptr @string_from_bytes(ptr @426, i64 3)
  %179 = call i1 @string___eq__(ptr %177, ptr %178)
  br i1 %179, label %if.entry103, label %else104

if.entry103:                                      ; preds = %ifend102
  %180 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntType, ptr null, i32 1) to i32))
  call void @IntType_constructor(ptr %180, i64 4, i1 true)
  ret ptr %180

else104:                                          ; preds = %ifend102
  br label %ifend105

ifend105:                                         ; preds = %else104
  %181 = load ptr, ptr %name, align 8
  %182 = call ptr @string_from_bytes(ptr @427, i64 3)
  %183 = call i1 @string___eq__(ptr %181, ptr %182)
  br i1 %183, label %if.entry106, label %else107

if.entry106:                                      ; preds = %ifend105
  %184 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntType, ptr null, i32 1) to i32))
  call void @IntType_constructor(ptr %184, i64 5, i1 true)
  ret ptr %184

else107:                                          ; preds = %ifend105
  br label %ifend108

ifend108:                                         ; preds = %else107
  %185 = load ptr, ptr %name, align 8
  %186 = call ptr @string_from_bytes(ptr @428, i64 4)
  %187 = call i1 @string___eq__(ptr %185, ptr %186)
  br i1 %187, label %if.entry109, label %else110

if.entry109:                                      ; preds = %ifend108
  %188 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntType, ptr null, i32 1) to i32))
  call void @IntType_constructor(ptr %188, i64 7, i1 true)
  ret ptr %188

else110:                                          ; preds = %ifend108
  br label %ifend111

ifend111:                                         ; preds = %else110
  %189 = load ptr, ptr %name, align 8
  %190 = call ptr @string_from_bytes(ptr @327, i64 3)
  %191 = call i1 @string___eq__(ptr %189, ptr %190)
  br i1 %191, label %if.entry112, label %else113

if.entry112:                                      ; preds = %ifend111
  %192 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntType, ptr null, i32 1) to i32))
  call void @IntType_constructor(ptr %192, i64 6, i1 true)
  ret ptr %192

else113:                                          ; preds = %ifend111
  br label %ifend114

ifend114:                                         ; preds = %else113
  %193 = load ptr, ptr %name, align 8
  %194 = call ptr @string_from_bytes(ptr @337, i64 3)
  %195 = call i1 @string___eq__(ptr %193, ptr %194)
  br i1 %195, label %if.entry115, label %else116

if.entry115:                                      ; preds = %ifend114
  %196 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %196, i64 8)
  ret ptr %196

else116:                                          ; preds = %ifend114
  br label %ifend117

ifend117:                                         ; preds = %else116
  %197 = load ptr, ptr %name, align 8
  %198 = call ptr @string_from_bytes(ptr @338, i64 3)
  %199 = call i1 @string___eq__(ptr %197, ptr %198)
  br i1 %199, label %if.entry118, label %else119

if.entry118:                                      ; preds = %ifend117
  %200 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %200, i64 9)
  ret ptr %200

else119:                                          ; preds = %ifend117
  br label %ifend120

ifend120:                                         ; preds = %else119
  %201 = load ptr, ptr %name, align 8
  %202 = call ptr @string_from_bytes(ptr @300, i64 4)
  %203 = call i1 @string___eq__(ptr %201, ptr %202)
  br i1 %203, label %if.entry121, label %else122

if.entry121:                                      ; preds = %ifend120
  %204 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %204, i64 10)
  ret ptr %204

else122:                                          ; preds = %ifend120
  br label %ifend123

ifend123:                                         ; preds = %else122
  %205 = load ptr, ptr %record_type, align 8
  %memberidx124 = getelementptr inbounds %RecordTypeNode, ptr %205, i32 0, i32 3
  %206 = load ptr, ptr %memberidx124, align 8
  %memberidx125 = getelementptr inbounds %Array_TypeNode_, ptr %206, i32 0, i32 2
  %207 = load i64, ptr %memberidx125, align 4
  %208 = icmp sgt i64 %207, 0
  br i1 %208, label %if.entry126, label %else127

if.entry126:                                      ; preds = %ifend123
  br label %for.entry129

else127:                                          ; preds = %ifend123
  br label %ifend128

ifend128:                                         ; preds = %else127, %ifend149
  %209 = load ptr, ptr %this, align 8
  %210 = load ptr, ptr %identifer_tok, align 8
  %memberidx150 = getelementptr inbounds %IdentifierToken, ptr %210, i32 0, i32 2
  %211 = load ptr, ptr %memberidx150, align 8
  %212 = call ptr @TypeChecker_get_type_from_current_scope(ptr %209, ptr %211)
  store ptr %212, ptr %found_type, align 8
  %213 = load ptr, ptr %found_type, align 8
  %memberidx151 = getelementptr inbounds %Type, ptr %213, i32 0, i32 0
  %214 = load i64, ptr %memberidx151, align 4
  %215 = icmp eq i64 %214, 21
  br i1 %215, label %if.entry152, label %else153

for.entry129:                                     ; preds = %if.entry126
  %216 = load ptr, ptr %record_type, align 8
  %memberidx130 = getelementptr inbounds %RecordTypeNode, ptr %216, i32 0, i32 3
  %217 = load ptr, ptr %memberidx130, align 8
  %218 = call ptr @Array_TypeNode____iter__(ptr %217)
  store ptr %218, ptr %tmp_it3, align 8
  %219 = load ptr, ptr %tmp_it3, align 8
  %220 = call ptr @ArrayIterator_TypeNode__next(ptr %219)
  store ptr %220, ptr %arg4, align 8
  br label %for.cond131

for.cond131:                                      ; preds = %for.incr133, %for.entry129
  %221 = load ptr, ptr %tmp_it3, align 8
  %memberidx135 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %221, i32 0, i32 0
  %222 = load i1, ptr %memberidx135, align 1
  %223 = xor i1 %222, true
  br i1 %223, label %for.body132, label %for.end134

for.body132:                                      ; preds = %for.cond131
  %224 = load ptr, ptr %types, align 8
  %225 = load ptr, ptr %this, align 8
  %226 = load ptr, ptr %arg4, align 8
  %227 = call ptr @TypeChecker_check_type(ptr %225, ptr %226)
  call void @Array_Type____sl__(ptr %224, ptr %227)
  br label %for.incr133

for.incr133:                                      ; preds = %for.body132
  %228 = load ptr, ptr %tmp_it3, align 8
  %229 = call ptr @ArrayIterator_TypeNode__next(ptr %228)
  store ptr %229, ptr %arg4, align 8
  br label %for.cond131

for.end134:                                       ; preds = %for.cond131
  %230 = load ptr, ptr %tmp_it3, align 8
  tail call void @free(ptr %230)
  %231 = load ptr, ptr %this, align 8
  %232 = call i1 @TypeChecker_has_errored(ptr %231)
  br i1 %232, label %if.entry136, label %else137

if.entry136:                                      ; preds = %for.end134
  ret ptr null

else137:                                          ; preds = %for.end134
  br label %ifend138

ifend138:                                         ; preds = %else137
  %233 = load ptr, ptr %this, align 8
  %234 = load ptr, ptr %identifer_tok, align 8
  %memberidx139 = getelementptr inbounds %IdentifierToken, ptr %234, i32 0, i32 2
  %235 = load ptr, ptr %memberidx139, align 8
  %236 = load ptr, ptr %types, align 8
  %237 = call ptr @TypeChecker_create_generic_instance_in_module(ptr %233, ptr %235, ptr %236)
  store ptr %237, ptr %generic_type, align 8
  %238 = load ptr, ptr %this, align 8
  %239 = call i1 @TypeChecker_has_errored(ptr %238)
  br i1 %239, label %if.entry140, label %else141

if.entry140:                                      ; preds = %ifend138
  %240 = load ptr, ptr %this, align 8
  %memberidx143 = getelementptr inbounds %TypeChecker, ptr %240, i32 0, i32 5
  %241 = load ptr, ptr %memberidx143, align 8
  %memberidx144 = getelementptr inbounds %Compiler, ptr %241, i32 0, i32 6
  %242 = load ptr, ptr %memberidx144, align 8
  %243 = call ptr @Array_FloError____getitem__(ptr %242, i64 0)
  %memberidx145 = getelementptr inbounds %FloError, ptr %243, i32 0, i32 2
  %244 = load ptr, ptr %type_node, align 8
  %memberidx146 = getelementptr inbounds %Node, ptr %244, i32 0, i32 0
  %245 = load ptr, ptr %memberidx146, align 8
  store ptr %245, ptr %memberidx145, align 8
  br label %ifend142

else141:                                          ; preds = %ifend138
  br label %ifend142

ifend142:                                         ; preds = %else141, %if.entry140
  %246 = load ptr, ptr %generic_type, align 8
  %247 = icmp ne ptr %246, null
  br i1 %247, label %if.entry147, label %else148

if.entry147:                                      ; preds = %ifend142
  %248 = load ptr, ptr %generic_type, align 8
  ret ptr %248

else148:                                          ; preds = %ifend142
  br label %ifend149

ifend149:                                         ; preds = %else148
  br label %ifend128

if.entry152:                                      ; preds = %ifend128
  %249 = load ptr, ptr %this, align 8
  %250 = load ptr, ptr %name, align 8
  %251 = getelementptr inbounds %string, ptr %250, i32 0, i32 0
  %252 = load ptr, ptr %251, align 8
  %memberidx155 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %252, i32 0, i32 5
  %253 = load ptr, ptr %memberidx155, align 8
  %254 = call ptr %253(ptr %250)
  %255 = alloca ptr, align 8
  %256 = call i64 (ptr, ptr, ...) @asprintf(ptr %255, ptr @429, ptr %254)
  %257 = load ptr, ptr %255, align 8
  %258 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %258, ptr %257, i64 %256)
  tail call void @free(ptr %254)
  %259 = load ptr, ptr %identifer_tok, align 8
  %memberidx156 = getelementptr inbounds %Token, ptr %259, i32 0, i32 1
  %260 = load ptr, ptr %memberidx156, align 8
  call void @TypeChecker_error(ptr %249, i64 5, ptr %258, ptr %260)
  ret ptr null

else153:                                          ; preds = %ifend128
  br label %ifend154

ifend154:                                         ; preds = %else153
  %261 = load ptr, ptr %found_type, align 8
  ret ptr %261
}

define void @ForStatement_constructor(ptr %0) {
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Statement_constructor, ptr %super, align 8
  %2 = load ptr, ptr %super, align 8
  call void %2(ptr %0, i64 3)
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ForStatement, ptr %3, i32 0, i32 1
  store ptr null, ptr %memberidx, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ForStatement, ptr %4, i32 0, i32 2
  store ptr null, ptr %memberidx1, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ForStatement, ptr %5, i32 0, i32 3
  store ptr null, ptr %memberidx2, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ForStatement, ptr %6, i32 0, i32 4
  store ptr null, ptr %memberidx3, align 8
  ret void
}

define ptr @TypeChecker_check_for_statement(ptr %0, ptr %1) {
  %for_stmt_node = alloca ptr, align 8
  %this = alloca ptr, align 8
  %for_scope = alloca ptr, align 8
  %for_stmt = alloca ptr, align 8
  %prev_in_loop = alloca i1, align 1
  %iter_item_name = alloca ptr, align 8
  %iterator_name = alloca ptr, align 8
  %iterator_class = alloca ptr, align 8
  %iter_call = alloca ptr, align 8
  %iteratable_var_id = alloca ptr, align 8
  %iter_item_var_id = alloca ptr, align 8
  %iteratable_type = alloca ptr, align 8
  %iterator = alloca ptr, align 8
  %bool_type = alloca ptr, align 8
  %next_prop_type = alloca ptr, align 8
  %iteratable_class = alloca ptr, align 8
  %iter_item_type = alloca ptr, align 8
  %next_item_call = alloca ptr, align 8
  %iter_generator_type = alloca ptr, align 8
  %iteratable_load = alloca ptr, align 8
  %iter_prop_id = alloca ptr, align 8
  %done_prop_id = alloca ptr, align 8
  %next_prop_id = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %for_stmt_node, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ForStatement, ptr null, i32 1) to i32))
  call void @ForStatement_constructor(ptr %3)
  store ptr %3, ptr %for_stmt, align 8
  %4 = load ptr, ptr %this, align 8
  %5 = call ptr @TypeChecker_create_child_scope_within_current_scope(ptr %4)
  store ptr %5, ptr %for_scope, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %6, i32 0, i32 4
  %7 = load ptr, ptr %for_scope, align 8
  %memberidx1 = getelementptr inbounds %Scope, ptr %7, i32 0, i32 0
  %8 = load ptr, ptr %memberidx1, align 8
  store ptr %8, ptr %memberidx, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %TypeChecker, ptr %9, i32 0, i32 6
  %10 = load i1, ptr %memberidx2, align 1
  store i1 %10, ptr %prev_in_loop, align 1
  %11 = load ptr, ptr %for_stmt_node, align 8
  %memberidx3 = getelementptr inbounds %ForStatementNode, ptr %11, i32 0, i32 6
  %12 = load i64, ptr %memberidx3, align 4
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %14 = load ptr, ptr %for_stmt_node, align 8
  %memberidx4 = getelementptr inbounds %ForStatementNode, ptr %14, i32 0, i32 2
  %15 = load ptr, ptr %memberidx4, align 8
  %16 = icmp ne ptr %15, null
  br i1 %16, label %if.entry5, label %else6

else:                                             ; preds = %2
  %17 = load ptr, ptr %this, align 8
  %18 = call ptr @Type_unknown()
  %19 = load ptr, ptr %for_stmt_node, align 8
  %memberidx22 = getelementptr inbounds %ForStatementNode, ptr %19, i32 0, i32 5
  %20 = load ptr, ptr %memberidx22, align 8
  %21 = call ptr @TypeChecker_check_expression(ptr %17, ptr %18, ptr %20)
  store ptr %21, ptr %iterator, align 8
  %22 = load ptr, ptr %this, align 8
  %23 = call i1 @TypeChecker_has_errored(ptr %22)
  br i1 %23, label %if.entry23, label %else24

ifend:                                            ; preds = %ifend37, %ifend19
  %24 = load ptr, ptr %this, align 8
  %25 = call i1 @TypeChecker_has_errored(ptr %24)
  br i1 %25, label %if.entry59, label %else60

if.entry5:                                        ; preds = %if.entry
  %26 = load ptr, ptr %for_stmt, align 8
  %memberidx8 = getelementptr inbounds %ForStatement, ptr %26, i32 0, i32 2
  %27 = load ptr, ptr %this, align 8
  %28 = load ptr, ptr %for_stmt_node, align 8
  %memberidx9 = getelementptr inbounds %ForStatementNode, ptr %28, i32 0, i32 2
  %29 = load ptr, ptr %memberidx9, align 8
  %30 = call ptr @TypeChecker_check_statement(ptr %27, ptr %29)
  store ptr %30, ptr %memberidx8, align 8
  br label %ifend7

else6:                                            ; preds = %if.entry
  br label %ifend7

ifend7:                                           ; preds = %else6, %if.entry5
  %31 = load ptr, ptr %for_stmt_node, align 8
  %memberidx10 = getelementptr inbounds %ForStatementNode, ptr %31, i32 0, i32 3
  %32 = load ptr, ptr %memberidx10, align 8
  %33 = icmp ne ptr %32, null
  br i1 %33, label %if.entry11, label %else12

if.entry11:                                       ; preds = %ifend7
  %34 = load ptr, ptr %for_stmt, align 8
  %memberidx14 = getelementptr inbounds %ForStatement, ptr %34, i32 0, i32 3
  %35 = load ptr, ptr %this, align 8
  %36 = load ptr, ptr %for_stmt_node, align 8
  %memberidx15 = getelementptr inbounds %ForStatementNode, ptr %36, i32 0, i32 3
  %37 = load ptr, ptr %memberidx15, align 8
  %38 = call ptr @TypeChecker_check_condition(ptr %35, ptr %37)
  store ptr %38, ptr %memberidx14, align 8
  br label %ifend13

else12:                                           ; preds = %ifend7
  br label %ifend13

ifend13:                                          ; preds = %else12, %if.entry11
  %39 = load ptr, ptr %for_stmt_node, align 8
  %memberidx16 = getelementptr inbounds %ForStatementNode, ptr %39, i32 0, i32 4
  %40 = load ptr, ptr %memberidx16, align 8
  %41 = icmp ne ptr %40, null
  br i1 %41, label %if.entry17, label %else18

if.entry17:                                       ; preds = %ifend13
  %42 = load ptr, ptr %for_stmt, align 8
  %memberidx20 = getelementptr inbounds %ForStatement, ptr %42, i32 0, i32 4
  %43 = load ptr, ptr %this, align 8
  %44 = load ptr, ptr %for_stmt_node, align 8
  %memberidx21 = getelementptr inbounds %ForStatementNode, ptr %44, i32 0, i32 4
  %45 = load ptr, ptr %memberidx21, align 8
  %46 = call ptr @TypeChecker_check_statement(ptr %43, ptr %45)
  store ptr %46, ptr %memberidx20, align 8
  br label %ifend19

else18:                                           ; preds = %ifend13
  br label %ifend19

ifend19:                                          ; preds = %else18, %if.entry17
  br label %ifend

if.entry23:                                       ; preds = %else
  ret ptr null

else24:                                           ; preds = %else
  br label %ifend25

ifend25:                                          ; preds = %else24
  %47 = load ptr, ptr %iterator, align 8
  %memberidx26 = getelementptr inbounds %Expression, ptr %47, i32 0, i32 3
  %48 = load ptr, ptr %memberidx26, align 8
  %49 = call i1 @is_object(ptr %48)
  %50 = xor i1 %49, true
  br i1 %50, label %if.entry27, label %else28

if.entry27:                                       ; preds = %ifend25
  %51 = load ptr, ptr %this, align 8
  %52 = call ptr @string_from_bytes(ptr @515, i64 28)
  %53 = load ptr, ptr %for_stmt_node, align 8
  %memberidx30 = getelementptr inbounds %ForStatementNode, ptr %53, i32 0, i32 5
  %54 = load ptr, ptr %memberidx30, align 8
  %memberidx31 = getelementptr inbounds %Node, ptr %54, i32 0, i32 0
  %55 = load ptr, ptr %memberidx31, align 8
  call void @TypeChecker_error(ptr %51, i64 5, ptr %52, ptr %55)
  ret ptr null

else28:                                           ; preds = %ifend25
  br label %ifend29

ifend29:                                          ; preds = %else28
  %56 = load ptr, ptr %this, align 8
  %memberidx32 = getelementptr inbounds %TypeChecker, ptr %56, i32 0, i32 0
  %57 = load ptr, ptr %memberidx32, align 8
  %58 = load ptr, ptr %iterator, align 8
  %memberidx33 = getelementptr inbounds %Expression, ptr %58, i32 0, i32 3
  %59 = load ptr, ptr %memberidx33, align 8
  %60 = call ptr @get_class_from_type(ptr %57, ptr %59)
  store ptr %60, ptr %iterator_class, align 8
  %61 = load ptr, ptr %iterator_class, align 8
  %memberidx34 = getelementptr inbounds %Class, ptr %61, i32 0, i32 6
  %62 = load ptr, ptr %memberidx34, align 8
  %63 = call ptr @string_from_bytes(ptr @387, i64 8)
  %64 = call ptr @Map_string_PropId____getitem__(ptr %62, ptr %63)
  store ptr %64, ptr %iter_prop_id, align 8
  %65 = load ptr, ptr %iter_prop_id, align 8
  %66 = icmp eq ptr %65, null
  br i1 %66, label %if.entry35, label %else36

if.entry35:                                       ; preds = %ifend29
  %67 = load ptr, ptr %this, align 8
  %68 = call ptr @string_from_bytes(ptr @516, i64 46)
  %69 = load ptr, ptr %for_stmt_node, align 8
  %memberidx38 = getelementptr inbounds %ForStatementNode, ptr %69, i32 0, i32 5
  %70 = load ptr, ptr %memberidx38, align 8
  %memberidx39 = getelementptr inbounds %Node, ptr %70, i32 0, i32 0
  %71 = load ptr, ptr %memberidx39, align 8
  call void @TypeChecker_error(ptr %67, i64 5, ptr %68, ptr %71)
  ret ptr null

else36:                                           ; preds = %ifend29
  br label %ifend37

ifend37:                                          ; preds = %else36
  %72 = load ptr, ptr %this, align 8
  %memberidx40 = getelementptr inbounds %TypeChecker, ptr %72, i32 0, i32 0
  %73 = load ptr, ptr %memberidx40, align 8
  %74 = load ptr, ptr %iter_prop_id, align 8
  %75 = call ptr @get_class_prop_type(ptr %73, ptr %74)
  store ptr %75, ptr %iter_generator_type, align 8
  %76 = load ptr, ptr %iter_generator_type, align 8
  %memberidx41 = getelementptr inbounds %FunctionType, ptr %76, i32 0, i32 2
  %77 = load ptr, ptr %memberidx41, align 8
  store ptr %77, ptr %iteratable_type, align 8
  %78 = call ptr @string_from_bytes(ptr @517, i64 6)
  store ptr %78, ptr %iterator_name, align 8
  %79 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%CallExpression, ptr null, i32 1) to i32))
  %80 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MemberExpression, ptr null, i32 1) to i32))
  %81 = load ptr, ptr %iterator, align 8
  %82 = load ptr, ptr %iter_prop_id, align 8
  %83 = load ptr, ptr %iter_generator_type, align 8
  call void @MemberExpression_constructor(ptr %80, ptr %81, ptr %82, ptr %83)
  %84 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %84, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx42 = getelementptr inbounds %Array_Expression_, ptr %84, i32 0, i32 1
  %85 = load ptr, ptr %memberidx42, align 8
  %memberidx43 = getelementptr inbounds %Array_Expression_, ptr %84, i32 0, i32 2
  store i64 0, ptr %memberidx43, align 4
  %86 = load ptr, ptr %iteratable_type, align 8
  call void @CallExpression_constructor(ptr %79, ptr %80, ptr %84, ptr %86)
  store ptr %79, ptr %iter_call, align 8
  %87 = load ptr, ptr %this, align 8
  %88 = load ptr, ptr %iterator_name, align 8
  %89 = load ptr, ptr %iter_call, align 8
  %90 = load ptr, ptr %iteratable_type, align 8
  %91 = call ptr @TypeChecker_declare_var_within_current_scope(ptr %87, ptr %88, ptr %89, ptr %90)
  %memberidx44 = getelementptr inbounds %Var, ptr %91, i32 0, i32 1
  %92 = load ptr, ptr %memberidx44, align 8
  store ptr %92, ptr %iteratable_var_id, align 8
  %93 = load ptr, ptr %for_stmt, align 8
  %memberidx45 = getelementptr inbounds %ForStatement, ptr %93, i32 0, i32 1
  %94 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%VarDeclaration, ptr null, i32 1) to i32))
  %95 = load ptr, ptr %iterator_name, align 8
  %96 = load ptr, ptr %iteratable_var_id, align 8
  call void @VarDeclaration_constructor(ptr %94, ptr %95, ptr %96)
  store ptr %94, ptr %memberidx45, align 8
  %97 = load ptr, ptr %this, align 8
  %memberidx46 = getelementptr inbounds %TypeChecker, ptr %97, i32 0, i32 0
  %98 = load ptr, ptr %memberidx46, align 8
  %99 = load ptr, ptr %iteratable_type, align 8
  %100 = call ptr @get_class_from_type(ptr %98, ptr %99)
  store ptr %100, ptr %iteratable_class, align 8
  %101 = load ptr, ptr %iteratable_class, align 8
  %memberidx47 = getelementptr inbounds %Class, ptr %101, i32 0, i32 6
  %102 = load ptr, ptr %memberidx47, align 8
  %103 = call ptr @string_from_bytes(ptr @395, i64 4)
  %104 = call ptr @Map_string_PropId____getitem__(ptr %102, ptr %103)
  store ptr %104, ptr %done_prop_id, align 8
  %105 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%VarAccessExpression, ptr null, i32 1) to i32))
  %106 = load ptr, ptr %iteratable_var_id, align 8
  %107 = load ptr, ptr %iteratable_type, align 8
  call void @VarAccessExpression_constructor(ptr %105, ptr %106, ptr %107)
  store ptr %105, ptr %iteratable_load, align 8
  %108 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BooleanType, ptr null, i32 1) to i32))
  call void @BooleanType_constructor(ptr %108)
  store ptr %108, ptr %bool_type, align 8
  %109 = load ptr, ptr %for_stmt, align 8
  %memberidx48 = getelementptr inbounds %ForStatement, ptr %109, i32 0, i32 3
  %110 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%UnaryExpression, ptr null, i32 1) to i32))
  %111 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MemberExpression, ptr null, i32 1) to i32))
  %112 = load ptr, ptr %iteratable_load, align 8
  %113 = load ptr, ptr %done_prop_id, align 8
  %114 = load ptr, ptr %bool_type, align 8
  call void @MemberExpression_constructor(ptr %111, ptr %112, ptr %113, ptr %114)
  %115 = load ptr, ptr %bool_type, align 8
  call void @UnaryExpression_constructor(ptr %110, i64 7, ptr %111, ptr %115, i1 false)
  store ptr %110, ptr %memberidx48, align 8
  %116 = load ptr, ptr %for_stmt_node, align 8
  %memberidx49 = getelementptr inbounds %ForStatementNode, ptr %116, i32 0, i32 7
  %117 = load ptr, ptr %memberidx49, align 8
  %memberidx50 = getelementptr inbounds %IdentifierToken, ptr %117, i32 0, i32 2
  %118 = load ptr, ptr %memberidx50, align 8
  store ptr %118, ptr %iter_item_name, align 8
  %119 = load ptr, ptr %iteratable_class, align 8
  %memberidx51 = getelementptr inbounds %Class, ptr %119, i32 0, i32 6
  %120 = load ptr, ptr %memberidx51, align 8
  %121 = call ptr @string_from_bytes(ptr @396, i64 4)
  %122 = call ptr @Map_string_PropId____getitem__(ptr %120, ptr %121)
  store ptr %122, ptr %next_prop_id, align 8
  %123 = load ptr, ptr %this, align 8
  %memberidx52 = getelementptr inbounds %TypeChecker, ptr %123, i32 0, i32 0
  %124 = load ptr, ptr %memberidx52, align 8
  %125 = load ptr, ptr %next_prop_id, align 8
  %126 = call ptr @get_class_prop_type(ptr %124, ptr %125)
  store ptr %126, ptr %next_prop_type, align 8
  %127 = load ptr, ptr %next_prop_type, align 8
  %memberidx53 = getelementptr inbounds %FunctionType, ptr %127, i32 0, i32 2
  %128 = load ptr, ptr %memberidx53, align 8
  store ptr %128, ptr %iter_item_type, align 8
  %129 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%CallExpression, ptr null, i32 1) to i32))
  %130 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MemberExpression, ptr null, i32 1) to i32))
  %131 = load ptr, ptr %iteratable_load, align 8
  %132 = load ptr, ptr %next_prop_id, align 8
  %133 = load ptr, ptr %next_prop_type, align 8
  call void @MemberExpression_constructor(ptr %130, ptr %131, ptr %132, ptr %133)
  %134 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %134, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx54 = getelementptr inbounds %Array_Expression_, ptr %134, i32 0, i32 1
  %135 = load ptr, ptr %memberidx54, align 8
  %memberidx55 = getelementptr inbounds %Array_Expression_, ptr %134, i32 0, i32 2
  store i64 0, ptr %memberidx55, align 4
  %136 = load ptr, ptr %iter_item_type, align 8
  call void @CallExpression_constructor(ptr %129, ptr %130, ptr %134, ptr %136)
  store ptr %129, ptr %next_item_call, align 8
  %137 = load ptr, ptr %this, align 8
  %138 = load ptr, ptr %iter_item_name, align 8
  %139 = load ptr, ptr %next_item_call, align 8
  %140 = load ptr, ptr %iter_item_type, align 8
  %141 = call ptr @TypeChecker_declare_var_within_current_scope(ptr %137, ptr %138, ptr %139, ptr %140)
  %memberidx56 = getelementptr inbounds %Var, ptr %141, i32 0, i32 1
  %142 = load ptr, ptr %memberidx56, align 8
  store ptr %142, ptr %iter_item_var_id, align 8
  %143 = load ptr, ptr %for_stmt, align 8
  %memberidx57 = getelementptr inbounds %ForStatement, ptr %143, i32 0, i32 2
  %144 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%VarDeclaration, ptr null, i32 1) to i32))
  %145 = load ptr, ptr %iter_item_name, align 8
  %146 = load ptr, ptr %iter_item_var_id, align 8
  call void @VarDeclaration_constructor(ptr %144, ptr %145, ptr %146)
  store ptr %144, ptr %memberidx57, align 8
  %147 = load ptr, ptr %for_stmt, align 8
  %memberidx58 = getelementptr inbounds %ForStatement, ptr %147, i32 0, i32 4
  %148 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpression, ptr null, i32 1) to i32))
  %149 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%VarAccessExpression, ptr null, i32 1) to i32))
  %150 = load ptr, ptr %iter_item_var_id, align 8
  %151 = load ptr, ptr %iter_item_type, align 8
  call void @VarAccessExpression_constructor(ptr %149, ptr %150, ptr %151)
  %152 = load ptr, ptr %next_item_call, align 8
  %153 = load ptr, ptr %iter_item_type, align 8
  call void @BinaryExpression_constructor(ptr %148, ptr %149, i64 19, ptr %152, ptr %153, i1 false)
  store ptr %148, ptr %memberidx58, align 8
  br label %ifend

if.entry59:                                       ; preds = %ifend
  ret ptr null

else60:                                           ; preds = %ifend
  br label %ifend61

ifend61:                                          ; preds = %else60
  %154 = load ptr, ptr %this, align 8
  %memberidx62 = getelementptr inbounds %TypeChecker, ptr %154, i32 0, i32 6
  store i1 true, ptr %memberidx62, align 1
  %155 = load ptr, ptr %for_stmt, align 8
  %memberidx63 = getelementptr inbounds %ForStatement, ptr %155, i32 0, i32 5
  %156 = load ptr, ptr %this, align 8
  %157 = load ptr, ptr %for_stmt_node, align 8
  %memberidx64 = getelementptr inbounds %ForStatementNode, ptr %157, i32 0, i32 8
  %158 = load ptr, ptr %memberidx64, align 8
  %159 = load ptr, ptr %for_scope, align 8
  %160 = call ptr @TypeChecker_check_block(ptr %156, ptr %158, ptr %159, i1 false)
  store ptr %160, ptr %memberidx63, align 8
  %161 = load ptr, ptr %this, align 8
  %memberidx65 = getelementptr inbounds %TypeChecker, ptr %161, i32 0, i32 6
  %162 = load i1, ptr %prev_in_loop, align 1
  store i1 %162, ptr %memberidx65, align 1
  %163 = load ptr, ptr %for_stmt, align 8
  ret ptr %163
}

define ptr @TypeChecker_check_statement(ptr %0, ptr %1) {
  %stmt_node = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %stmt_node, align 8
  %3 = load ptr, ptr %stmt_node, align 8
  %memberidx = getelementptr inbounds %StatementNode, ptr %3, i32 0, i32 1
  %4 = load i64, ptr %memberidx, align 4
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %this, align 8
  %7 = load ptr, ptr %stmt_node, align 8
  %8 = call ptr @TypeChecker_check_if_stamement(ptr %6, ptr %7)
  ret ptr %8

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %9 = load ptr, ptr %stmt_node, align 8
  %memberidx1 = getelementptr inbounds %StatementNode, ptr %9, i32 0, i32 1
  %10 = load i64, ptr %memberidx1, align 4
  %11 = icmp eq i64 %10, 1
  br i1 %11, label %if.entry2, label %else3

if.entry2:                                        ; preds = %ifend
  %12 = load ptr, ptr %this, align 8
  %13 = load ptr, ptr %stmt_node, align 8
  %14 = call ptr @TypeChecker_check_var_declaration(ptr %12, ptr %13)
  ret ptr %14

else3:                                            ; preds = %ifend
  br label %ifend4

ifend4:                                           ; preds = %else3
  %15 = load ptr, ptr %stmt_node, align 8
  %memberidx5 = getelementptr inbounds %StatementNode, ptr %15, i32 0, i32 1
  %16 = load i64, ptr %memberidx5, align 4
  %17 = icmp eq i64 %16, 2
  br i1 %17, label %if.entry6, label %else7

if.entry6:                                        ; preds = %ifend4
  %18 = load ptr, ptr %this, align 8
  %19 = load ptr, ptr %stmt_node, align 8
  %20 = call ptr @TypeChecker_check_const_declaration(ptr %18, ptr %19)
  ret ptr %20

else7:                                            ; preds = %ifend4
  br label %ifend8

ifend8:                                           ; preds = %else7
  %21 = load ptr, ptr %stmt_node, align 8
  %memberidx9 = getelementptr inbounds %StatementNode, ptr %21, i32 0, i32 1
  %22 = load i64, ptr %memberidx9, align 4
  %23 = icmp eq i64 %22, 3
  br i1 %23, label %if.entry10, label %else11

if.entry10:                                       ; preds = %ifend8
  %24 = load ptr, ptr %this, align 8
  %25 = load ptr, ptr %stmt_node, align 8
  %26 = call ptr @TypeChecker_check_for_statement(ptr %24, ptr %25)
  ret ptr %26

else11:                                           ; preds = %ifend8
  br label %ifend12

ifend12:                                          ; preds = %else11
  %27 = load ptr, ptr %stmt_node, align 8
  %memberidx13 = getelementptr inbounds %StatementNode, ptr %27, i32 0, i32 1
  %28 = load i64, ptr %memberidx13, align 4
  %29 = icmp eq i64 %28, 4
  br i1 %29, label %if.entry14, label %else15

if.entry14:                                       ; preds = %ifend12
  %30 = load ptr, ptr %this, align 8
  %31 = load ptr, ptr %stmt_node, align 8
  %32 = call ptr @TypeChecker_check_while_statment(ptr %30, ptr %31)
  ret ptr %32

else15:                                           ; preds = %ifend12
  br label %ifend16

ifend16:                                          ; preds = %else15
  %33 = load ptr, ptr %stmt_node, align 8
  %memberidx17 = getelementptr inbounds %StatementNode, ptr %33, i32 0, i32 1
  %34 = load i64, ptr %memberidx17, align 4
  %35 = icmp eq i64 %34, 5
  br i1 %35, label %if.entry18, label %else19

if.entry18:                                       ; preds = %ifend16
  %36 = load ptr, ptr %this, align 8
  %37 = load ptr, ptr %stmt_node, align 8
  %38 = call ptr @TypeChecker_check_can_continue(ptr %36, ptr %37)
  ret ptr %38

else19:                                           ; preds = %ifend16
  br label %ifend20

ifend20:                                          ; preds = %else19
  %39 = load ptr, ptr %stmt_node, align 8
  %memberidx21 = getelementptr inbounds %StatementNode, ptr %39, i32 0, i32 1
  %40 = load i64, ptr %memberidx21, align 4
  %41 = icmp eq i64 %40, 6
  br i1 %41, label %if.entry22, label %else23

if.entry22:                                       ; preds = %ifend20
  %42 = load ptr, ptr %this, align 8
  %43 = load ptr, ptr %stmt_node, align 8
  %44 = call ptr @TypeChecker_check_can_break(ptr %42, ptr %43)
  ret ptr %44

else23:                                           ; preds = %ifend20
  br label %ifend24

ifend24:                                          ; preds = %else23
  %45 = load ptr, ptr %stmt_node, align 8
  %memberidx25 = getelementptr inbounds %StatementNode, ptr %45, i32 0, i32 1
  %46 = load i64, ptr %memberidx25, align 4
  %47 = icmp eq i64 %46, 7
  br i1 %47, label %if.entry26, label %else27

if.entry26:                                       ; preds = %ifend24
  %48 = load ptr, ptr %this, align 8
  %49 = load ptr, ptr %stmt_node, align 8
  %50 = call ptr @TypeChecker_check_can_return(ptr %48, ptr %49)
  ret ptr %50

else27:                                           ; preds = %ifend24
  br label %ifend28

ifend28:                                          ; preds = %else27
  %51 = load ptr, ptr %stmt_node, align 8
  %memberidx29 = getelementptr inbounds %StatementNode, ptr %51, i32 0, i32 1
  %52 = load i64, ptr %memberidx29, align 4
  %53 = icmp eq i64 %52, 8
  br i1 %53, label %if.entry30, label %else31

if.entry30:                                       ; preds = %ifend28
  %54 = load ptr, ptr %this, align 8
  %55 = call ptr @Type_unknown()
  %56 = load ptr, ptr %stmt_node, align 8
  %57 = call ptr @TypeChecker_check_expression(ptr %54, ptr %55, ptr %56)
  ret ptr %57

else31:                                           ; preds = %ifend28
  br label %ifend32

ifend32:                                          ; preds = %else31
  ret ptr null
}

define i1 @TypeChecker_types_are_eq(ptr %0, ptr %1, ptr %2) {
  %t1 = alloca ptr, align 8
  %t2 = alloca ptr, align 8
  %this = alloca ptr, align 8
  %t1_fnc_type = alloca ptr, align 8
  %t2_fnc_type = alloca ptr, align 8
  %i = alloca i64, align 8
  %t1_arr_type = alloca ptr, align 8
  %t2_arr_type = alloca ptr, align 8
  %t1_element_types_length = alloca i64, align 8
  %t1_tup_type = alloca ptr, align 8
  %t2_tup_type = alloca ptr, align 8
  %i1 = alloca i64, align 8
  %t1_ptr_type = alloca ptr, align 8
  %t2_ptr_type = alloca ptr, align 8
  %t1_obj_typeid = alloca ptr, align 8
  %t2_obj_typeid = alloca ptr, align 8
  %t2_class = alloca ptr, align 8
  %t1_obj_type = alloca ptr, align 8
  %t2_obj_type = alloca ptr, align 8
  %t1_enum_type = alloca ptr, align 8
  %t2_enum_type = alloca ptr, align 8
  %t1_enum_typeid = alloca ptr, align 8
  %t2_enum_typeid = alloca ptr, align 8
  %t1_gen_type = alloca ptr, align 8
  %t2_gen_type = alloca ptr, align 8
  %i2 = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %t1, align 8
  store ptr %2, ptr %t2, align 8
  %4 = load ptr, ptr %t1, align 8
  %memberidx = getelementptr inbounds %Type, ptr %4, i32 0, i32 0
  %5 = load i64, ptr %memberidx, align 4
  %6 = load ptr, ptr %t2, align 8
  %memberidx3 = getelementptr inbounds %Type, ptr %6, i32 0, i32 0
  %7 = load i64, ptr %memberidx3, align 4
  %8 = icmp ne i64 %5, %7
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %3
  ret i1 false

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %9 = load ptr, ptr %t1, align 8
  %10 = call i1 @is_function(ptr %9)
  br i1 %10, label %if.entry4, label %else5

if.entry4:                                        ; preds = %ifend
  %11 = load ptr, ptr %t1, align 8
  store ptr %11, ptr %t1_fnc_type, align 8
  %12 = load ptr, ptr %t2, align 8
  store ptr %12, ptr %t2_fnc_type, align 8
  %13 = load ptr, ptr %t1_fnc_type, align 8
  %memberidx7 = getelementptr inbounds %FunctionType, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Array_Type_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx8, align 4
  %16 = load ptr, ptr %t2_fnc_type, align 8
  %memberidx9 = getelementptr inbounds %FunctionType, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx9, align 8
  %memberidx10 = getelementptr inbounds %Array_Type_, ptr %17, i32 0, i32 2
  %18 = load i64, ptr %memberidx10, align 4
  %19 = icmp ne i64 %15, %18
  br i1 %19, label %if.entry11, label %else12

else5:                                            ; preds = %ifend
  br label %ifend6

ifend6:                                           ; preds = %else5, %for.end
  %20 = load ptr, ptr %t1, align 8
  %memberidx26 = getelementptr inbounds %Type, ptr %20, i32 0, i32 0
  %21 = load i64, ptr %memberidx26, align 4
  %22 = icmp eq i64 %21, 14
  br i1 %22, label %if.entry27, label %else28

if.entry11:                                       ; preds = %if.entry4
  ret i1 false

else12:                                           ; preds = %if.entry4
  br label %ifend13

ifend13:                                          ; preds = %else12
  %23 = load ptr, ptr %this, align 8
  %24 = load ptr, ptr %t2_fnc_type, align 8
  %memberidx14 = getelementptr inbounds %FunctionType, ptr %24, i32 0, i32 2
  %25 = load ptr, ptr %memberidx14, align 8
  %26 = load ptr, ptr %t1_fnc_type, align 8
  %memberidx15 = getelementptr inbounds %FunctionType, ptr %26, i32 0, i32 2
  %27 = load ptr, ptr %memberidx15, align 8
  %28 = call i1 @TypeChecker_types_are_eq(ptr %23, ptr %25, ptr %27)
  %29 = xor i1 %28, true
  br i1 %29, label %if.entry16, label %else17

if.entry16:                                       ; preds = %ifend13
  ret i1 false

else17:                                           ; preds = %ifend13
  br label %ifend18

ifend18:                                          ; preds = %else17
  br label %for.entry

for.entry:                                        ; preds = %ifend18
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %30 = load i64, ptr %i, align 4
  %31 = load ptr, ptr %t1_fnc_type, align 8
  %memberidx19 = getelementptr inbounds %FunctionType, ptr %31, i32 0, i32 1
  %32 = load ptr, ptr %memberidx19, align 8
  %memberidx20 = getelementptr inbounds %Array_Type_, ptr %32, i32 0, i32 2
  %33 = load i64, ptr %memberidx20, align 4
  %34 = icmp slt i64 %30, %33
  br i1 %34, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %35 = load ptr, ptr %this, align 8
  %36 = load ptr, ptr %t1_fnc_type, align 8
  %memberidx21 = getelementptr inbounds %FunctionType, ptr %36, i32 0, i32 1
  %37 = load ptr, ptr %memberidx21, align 8
  %38 = load i64, ptr %i, align 4
  %39 = call ptr @Array_Type____getitem__(ptr %37, i64 %38)
  %40 = load ptr, ptr %t2_fnc_type, align 8
  %memberidx22 = getelementptr inbounds %FunctionType, ptr %40, i32 0, i32 1
  %41 = load ptr, ptr %memberidx22, align 8
  %42 = load i64, ptr %i, align 4
  %43 = call ptr @Array_Type____getitem__(ptr %41, i64 %42)
  %44 = call i1 @TypeChecker_types_are_eq(ptr %35, ptr %39, ptr %43)
  %45 = xor i1 %44, true
  br i1 %45, label %if.entry23, label %else24

for.incr:                                         ; preds = %ifend25
  %46 = load i64, ptr %i, align 4
  %47 = add nsw i64 %46, 1
  store i64 %47, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend6

if.entry23:                                       ; preds = %for.body
  ret i1 false

else24:                                           ; preds = %for.body
  br label %ifend25

ifend25:                                          ; preds = %else24
  br label %for.incr

if.entry27:                                       ; preds = %ifend6
  %48 = load ptr, ptr %t1, align 8
  store ptr %48, ptr %t1_arr_type, align 8
  %49 = load ptr, ptr %t2, align 8
  store ptr %49, ptr %t2_arr_type, align 8
  %50 = load ptr, ptr %t1_arr_type, align 8
  %memberidx30 = getelementptr inbounds %ArrayType, ptr %50, i32 0, i32 2
  %51 = load i64, ptr %memberidx30, align 4
  %52 = load ptr, ptr %t2_arr_type, align 8
  %memberidx31 = getelementptr inbounds %ArrayType, ptr %52, i32 0, i32 2
  %53 = load i64, ptr %memberidx31, align 4
  %54 = icmp eq i64 %51, %53
  %55 = load ptr, ptr %this, align 8
  %56 = load ptr, ptr %t1_arr_type, align 8
  %memberidx32 = getelementptr inbounds %ArrayType, ptr %56, i32 0, i32 1
  %57 = load ptr, ptr %memberidx32, align 8
  %58 = load ptr, ptr %t2_arr_type, align 8
  %memberidx33 = getelementptr inbounds %ArrayType, ptr %58, i32 0, i32 1
  %59 = load ptr, ptr %memberidx33, align 8
  %60 = call i1 @TypeChecker_types_are_eq(ptr %55, ptr %57, ptr %59)
  %61 = and i1 %54, %60
  ret i1 %61

else28:                                           ; preds = %ifend6
  br label %ifend29

ifend29:                                          ; preds = %else28
  %62 = load ptr, ptr %t1, align 8
  %memberidx34 = getelementptr inbounds %Type, ptr %62, i32 0, i32 0
  %63 = load i64, ptr %memberidx34, align 4
  %64 = icmp eq i64 %63, 15
  br i1 %64, label %if.entry35, label %else36

if.entry35:                                       ; preds = %ifend29
  %65 = load ptr, ptr %t1, align 8
  store ptr %65, ptr %t1_tup_type, align 8
  %66 = load ptr, ptr %t2, align 8
  store ptr %66, ptr %t2_tup_type, align 8
  %67 = load ptr, ptr %t1_tup_type, align 8
  %memberidx38 = getelementptr inbounds %TupleType, ptr %67, i32 0, i32 1
  %68 = load ptr, ptr %memberidx38, align 8
  %memberidx39 = getelementptr inbounds %Array_Type_, ptr %68, i32 0, i32 2
  %69 = load i64, ptr %memberidx39, align 4
  store i64 %69, ptr %t1_element_types_length, align 4
  %70 = load i64, ptr %t1_element_types_length, align 4
  %71 = load ptr, ptr %t2_tup_type, align 8
  %memberidx40 = getelementptr inbounds %TupleType, ptr %71, i32 0, i32 1
  %72 = load ptr, ptr %memberidx40, align 8
  %memberidx41 = getelementptr inbounds %Array_Type_, ptr %72, i32 0, i32 2
  %73 = load i64, ptr %memberidx41, align 4
  %74 = icmp ne i64 %70, %73
  br i1 %74, label %if.entry42, label %else43

else36:                                           ; preds = %ifend29
  br label %ifend37

ifend37:                                          ; preds = %else36, %for.end49
  %75 = load ptr, ptr %t1, align 8
  %memberidx55 = getelementptr inbounds %Type, ptr %75, i32 0, i32 0
  %76 = load i64, ptr %memberidx55, align 4
  %77 = icmp eq i64 %76, 13
  br i1 %77, label %if.entry56, label %else57

if.entry42:                                       ; preds = %if.entry35
  ret i1 false

else43:                                           ; preds = %if.entry35
  br label %ifend44

ifend44:                                          ; preds = %else43
  br label %for.entry45

for.entry45:                                      ; preds = %ifend44
  store i64 0, ptr %i1, align 4
  br label %for.cond46

for.cond46:                                       ; preds = %for.incr48, %for.entry45
  %78 = load i64, ptr %i1, align 4
  %79 = load i64, ptr %t1_element_types_length, align 4
  %80 = icmp slt i64 %78, %79
  br i1 %80, label %for.body47, label %for.end49

for.body47:                                       ; preds = %for.cond46
  %81 = load ptr, ptr %this, align 8
  %82 = load ptr, ptr %t1_tup_type, align 8
  %memberidx50 = getelementptr inbounds %TupleType, ptr %82, i32 0, i32 1
  %83 = load ptr, ptr %memberidx50, align 8
  %84 = load i64, ptr %i1, align 4
  %85 = call ptr @Array_Type____getitem__(ptr %83, i64 %84)
  %86 = load ptr, ptr %t2_tup_type, align 8
  %memberidx51 = getelementptr inbounds %TupleType, ptr %86, i32 0, i32 1
  %87 = load ptr, ptr %memberidx51, align 8
  %88 = load i64, ptr %i1, align 4
  %89 = call ptr @Array_Type____getitem__(ptr %87, i64 %88)
  %90 = call i1 @TypeChecker_types_are_eq(ptr %81, ptr %85, ptr %89)
  %91 = xor i1 %90, true
  br i1 %91, label %if.entry52, label %else53

for.incr48:                                       ; preds = %ifend54
  %92 = load i64, ptr %i1, align 4
  %93 = add nsw i64 %92, 1
  store i64 %93, ptr %i1, align 4
  br label %for.cond46

for.end49:                                        ; preds = %for.cond46
  br label %ifend37

if.entry52:                                       ; preds = %for.body47
  ret i1 false

else53:                                           ; preds = %for.body47
  br label %ifend54

ifend54:                                          ; preds = %else53
  br label %for.incr48

if.entry56:                                       ; preds = %ifend37
  %94 = load ptr, ptr %t1, align 8
  store ptr %94, ptr %t1_ptr_type, align 8
  %95 = load ptr, ptr %t2, align 8
  store ptr %95, ptr %t2_ptr_type, align 8
  %96 = load ptr, ptr %this, align 8
  %97 = load ptr, ptr %t1_ptr_type, align 8
  %memberidx59 = getelementptr inbounds %PointerType, ptr %97, i32 0, i32 1
  %98 = load ptr, ptr %memberidx59, align 8
  %99 = load ptr, ptr %t2_ptr_type, align 8
  %memberidx60 = getelementptr inbounds %PointerType, ptr %99, i32 0, i32 1
  %100 = load ptr, ptr %memberidx60, align 8
  %101 = call i1 @TypeChecker_types_are_eq(ptr %96, ptr %98, ptr %100)
  ret i1 %101

else57:                                           ; preds = %ifend37
  br label %ifend58

ifend58:                                          ; preds = %else57
  %102 = load ptr, ptr %t1, align 8
  %memberidx61 = getelementptr inbounds %Type, ptr %102, i32 0, i32 0
  %103 = load i64, ptr %memberidx61, align 4
  %104 = icmp eq i64 %103, 11
  br i1 %104, label %if.entry62, label %else63

if.entry62:                                       ; preds = %ifend58
  %105 = load ptr, ptr %t1, align 8
  store ptr %105, ptr %t1_obj_type, align 8
  %106 = load ptr, ptr %t2, align 8
  store ptr %106, ptr %t2_obj_type, align 8
  %107 = load ptr, ptr %t1_obj_type, align 8
  %memberidx65 = getelementptr inbounds %ObjectType, ptr %107, i32 0, i32 1
  %108 = load ptr, ptr %memberidx65, align 8
  store ptr %108, ptr %t1_obj_typeid, align 8
  %109 = load ptr, ptr %t2_obj_type, align 8
  %memberidx66 = getelementptr inbounds %ObjectType, ptr %109, i32 0, i32 1
  %110 = load ptr, ptr %memberidx66, align 8
  store ptr %110, ptr %t2_obj_typeid, align 8
  %111 = load ptr, ptr %t1_obj_typeid, align 8
  %memberidx67 = getelementptr inbounds %TypeId, ptr %111, i32 0, i32 1
  %112 = load i64, ptr %memberidx67, align 4
  %113 = load ptr, ptr %t2_obj_typeid, align 8
  %memberidx68 = getelementptr inbounds %TypeId, ptr %113, i32 0, i32 1
  %114 = load i64, ptr %memberidx68, align 4
  %115 = icmp eq i64 %112, %114
  %116 = load ptr, ptr %t1_obj_typeid, align 8
  %memberidx69 = getelementptr inbounds %TypeId, ptr %116, i32 0, i32 0
  %117 = load i64, ptr %memberidx69, align 4
  %118 = load ptr, ptr %t2_obj_typeid, align 8
  %memberidx70 = getelementptr inbounds %TypeId, ptr %118, i32 0, i32 0
  %119 = load i64, ptr %memberidx70, align 4
  %120 = icmp eq i64 %117, %119
  %121 = and i1 %115, %120
  %122 = load ptr, ptr %t1_obj_typeid, align 8
  %memberidx71 = getelementptr inbounds %TypeId, ptr %122, i32 0, i32 2
  %123 = load i64, ptr %memberidx71, align 4
  %124 = load ptr, ptr %t2_obj_typeid, align 8
  %memberidx72 = getelementptr inbounds %TypeId, ptr %124, i32 0, i32 2
  %125 = load i64, ptr %memberidx72, align 4
  %126 = icmp eq i64 %123, %125
  %127 = and i1 %121, %126
  br i1 %127, label %if.entry73, label %else74

else63:                                           ; preds = %ifend58
  br label %ifend64

ifend64:                                          ; preds = %else63
  %128 = load ptr, ptr %t1, align 8
  %memberidx82 = getelementptr inbounds %Type, ptr %128, i32 0, i32 0
  %129 = load i64, ptr %memberidx82, align 4
  %130 = icmp eq i64 %129, 12
  br i1 %130, label %if.entry83, label %else84

if.entry73:                                       ; preds = %if.entry62
  ret i1 true

else74:                                           ; preds = %if.entry62
  br label %ifend75

ifend75:                                          ; preds = %else74
  %131 = load ptr, ptr %this, align 8
  %memberidx76 = getelementptr inbounds %TypeChecker, ptr %131, i32 0, i32 0
  %132 = load ptr, ptr %memberidx76, align 8
  %133 = load ptr, ptr %t2_obj_typeid, align 8
  %134 = call ptr @get_class(ptr %132, ptr %133)
  store ptr %134, ptr %t2_class, align 8
  %135 = load ptr, ptr %t2_class, align 8
  %memberidx77 = getelementptr inbounds %Class, ptr %135, i32 0, i32 2
  %136 = load ptr, ptr %memberidx77, align 8
  %137 = icmp ne ptr %136, null
  br i1 %137, label %if.entry78, label %else79

if.entry78:                                       ; preds = %ifend75
  %138 = load ptr, ptr %this, align 8
  %139 = load ptr, ptr %t1_obj_type, align 8
  %140 = load ptr, ptr %t2_class, align 8
  %memberidx81 = getelementptr inbounds %Class, ptr %140, i32 0, i32 2
  %141 = load ptr, ptr %memberidx81, align 8
  %142 = call i1 @TypeChecker_types_are_eq(ptr %138, ptr %139, ptr %141)
  ret i1 %142

else79:                                           ; preds = %ifend75
  br label %ifend80

ifend80:                                          ; preds = %else79
  ret i1 false

if.entry83:                                       ; preds = %ifend64
  %143 = load ptr, ptr %t1, align 8
  store ptr %143, ptr %t1_enum_type, align 8
  %144 = load ptr, ptr %t2, align 8
  store ptr %144, ptr %t2_enum_type, align 8
  %145 = load ptr, ptr %t1_enum_type, align 8
  %memberidx86 = getelementptr inbounds %EnumType, ptr %145, i32 0, i32 1
  %146 = load ptr, ptr %memberidx86, align 8
  store ptr %146, ptr %t1_enum_typeid, align 8
  %147 = load ptr, ptr %t2_enum_type, align 8
  %memberidx87 = getelementptr inbounds %EnumType, ptr %147, i32 0, i32 1
  %148 = load ptr, ptr %memberidx87, align 8
  store ptr %148, ptr %t2_enum_typeid, align 8
  %149 = load ptr, ptr %t1_enum_typeid, align 8
  %150 = load ptr, ptr %t2_enum_typeid, align 8
  %151 = icmp eq ptr %149, %150
  ret i1 %151

else84:                                           ; preds = %ifend64
  br label %ifend85

ifend85:                                          ; preds = %else84
  %152 = load ptr, ptr %t1, align 8
  %memberidx88 = getelementptr inbounds %Type, ptr %152, i32 0, i32 0
  %153 = load i64, ptr %memberidx88, align 4
  %154 = icmp eq i64 %153, 20
  br i1 %154, label %if.entry89, label %else90

if.entry89:                                       ; preds = %ifend85
  %155 = load ptr, ptr %t1, align 8
  store ptr %155, ptr %t1_gen_type, align 8
  %156 = load ptr, ptr %t2, align 8
  store ptr %156, ptr %t2_gen_type, align 8
  %157 = load ptr, ptr %t1_gen_type, align 8
  %memberidx92 = getelementptr inbounds %GenericType, ptr %157, i32 0, i32 1
  %158 = load ptr, ptr %memberidx92, align 8
  %159 = load ptr, ptr %t2_gen_type, align 8
  %memberidx93 = getelementptr inbounds %GenericType, ptr %159, i32 0, i32 1
  %160 = load ptr, ptr %memberidx93, align 8
  %161 = call i1 @string___ne__(ptr %158, ptr %160)
  br i1 %161, label %if.entry94, label %else95

else90:                                           ; preds = %ifend85
  br label %ifend91

ifend91:                                          ; preds = %else90, %for.end108
  %162 = load ptr, ptr %t1, align 8
  %163 = call i1 @is_int(ptr %162)
  br i1 %163, label %if.entry116, label %else117

if.entry94:                                       ; preds = %if.entry89
  ret i1 false

else95:                                           ; preds = %if.entry89
  br label %ifend96

ifend96:                                          ; preds = %else95
  %164 = load ptr, ptr %t1_gen_type, align 8
  %memberidx97 = getelementptr inbounds %GenericType, ptr %164, i32 0, i32 2
  %165 = load ptr, ptr %memberidx97, align 8
  %memberidx98 = getelementptr inbounds %Array_Type_, ptr %165, i32 0, i32 2
  %166 = load i64, ptr %memberidx98, align 4
  %167 = load ptr, ptr %t2_gen_type, align 8
  %memberidx99 = getelementptr inbounds %GenericType, ptr %167, i32 0, i32 2
  %168 = load ptr, ptr %memberidx99, align 8
  %memberidx100 = getelementptr inbounds %Array_Type_, ptr %168, i32 0, i32 2
  %169 = load i64, ptr %memberidx100, align 4
  %170 = icmp ne i64 %166, %169
  br i1 %170, label %if.entry101, label %else102

if.entry101:                                      ; preds = %ifend96
  ret i1 false

else102:                                          ; preds = %ifend96
  br label %ifend103

ifend103:                                         ; preds = %else102
  br label %for.entry104

for.entry104:                                     ; preds = %ifend103
  store i64 0, ptr %i2, align 4
  br label %for.cond105

for.cond105:                                      ; preds = %for.incr107, %for.entry104
  %171 = load i64, ptr %i2, align 4
  %172 = load ptr, ptr %t1_gen_type, align 8
  %memberidx109 = getelementptr inbounds %GenericType, ptr %172, i32 0, i32 2
  %173 = load ptr, ptr %memberidx109, align 8
  %memberidx110 = getelementptr inbounds %Array_Type_, ptr %173, i32 0, i32 2
  %174 = load i64, ptr %memberidx110, align 4
  %175 = icmp slt i64 %171, %174
  br i1 %175, label %for.body106, label %for.end108

for.body106:                                      ; preds = %for.cond105
  %176 = load ptr, ptr %this, align 8
  %177 = load ptr, ptr %t1_gen_type, align 8
  %memberidx111 = getelementptr inbounds %GenericType, ptr %177, i32 0, i32 2
  %178 = load ptr, ptr %memberidx111, align 8
  %179 = load i64, ptr %i2, align 4
  %180 = call ptr @Array_Type____getitem__(ptr %178, i64 %179)
  %181 = load ptr, ptr %t2_gen_type, align 8
  %memberidx112 = getelementptr inbounds %GenericType, ptr %181, i32 0, i32 2
  %182 = load ptr, ptr %memberidx112, align 8
  %183 = load i64, ptr %i2, align 4
  %184 = call ptr @Array_Type____getitem__(ptr %182, i64 %183)
  %185 = call i1 @TypeChecker_types_are_eq(ptr %176, ptr %180, ptr %184)
  %186 = xor i1 %185, true
  br i1 %186, label %if.entry113, label %else114

for.incr107:                                      ; preds = %ifend115
  %187 = load i64, ptr %i2, align 4
  %188 = add nsw i64 %187, 1
  store i64 %188, ptr %i2, align 4
  br label %for.cond105

for.end108:                                       ; preds = %for.cond105
  br label %ifend91

if.entry113:                                      ; preds = %for.body106
  ret i1 false

else114:                                          ; preds = %for.body106
  br label %ifend115

ifend115:                                         ; preds = %else114
  br label %for.incr107

if.entry116:                                      ; preds = %ifend91
  %189 = load ptr, ptr %t1, align 8
  %memberidx119 = getelementptr inbounds %IntType, ptr %189, i32 0, i32 1
  %190 = load i1, ptr %memberidx119, align 1
  %191 = load ptr, ptr %t2, align 8
  %memberidx120 = getelementptr inbounds %IntType, ptr %191, i32 0, i32 1
  %192 = load i1, ptr %memberidx120, align 1
  %193 = xor i1 %190, %192
  br i1 %193, label %if.entry121, label %else122

else117:                                          ; preds = %ifend91
  br label %ifend118

ifend118:                                         ; preds = %else117, %ifend123
  ret i1 true

if.entry121:                                      ; preds = %if.entry116
  ret i1 false

else122:                                          ; preds = %if.entry116
  br label %ifend123

ifend123:                                         ; preds = %else122
  br label %ifend118
}

define ptr @TypeChecker_create_scope(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %module_id = alloca i64, align 8
  %scope = alloca ptr, align 8
  %module = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %module_id, align 4
  %3 = load ptr, ptr %this, align 8
  %4 = load i64, ptr %module_id, align 4
  %5 = call ptr @TypeChecker_get_module(ptr %3, i64 %4)
  store ptr %5, ptr %module, align 8
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Scope, ptr null, i32 1) to i32))
  %7 = load i64, ptr %module_id, align 4
  %8 = load ptr, ptr %module, align 8
  %memberidx = getelementptr inbounds %Module, ptr %8, i32 0, i32 7
  %9 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_Scope_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx1, align 4
  call void @Scope_constructor(ptr %6, i64 %7, i64 %10)
  store ptr %6, ptr %scope, align 8
  %11 = load ptr, ptr %module, align 8
  %memberidx2 = getelementptr inbounds %Module, ptr %11, i32 0, i32 7
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = load ptr, ptr %scope, align 8
  call void @Array_Scope____sl__(ptr %12, ptr %13)
  %14 = load ptr, ptr %scope, align 8
  ret ptr %14
}

define ptr @TypeChecker_check_object_binary_expr(ptr %0, ptr %1, ptr %2, ptr %3) {
  %left = alloca ptr, align 8
  %right = alloca ptr, align 8
  %binary_node = alloca ptr, align 8
  %this = alloca ptr, align 8
  %args = alloca ptr, align 8
  %owner_class = alloca ptr, align 8
  %op = alloca i64, align 8
  %prop_id = alloca ptr, align 8
  %method_name = alloca ptr, align 8
  %arg_type = alloca ptr, align 8
  %member_exp = alloca ptr, align 8
  %method_type = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %left, align 8
  store ptr %2, ptr %binary_node, align 8
  store ptr %3, ptr %right, align 8
  %5 = load ptr, ptr %binary_node, align 8
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %5, i32 0, i32 4
  %6 = load i64, ptr %memberidx, align 4
  store i64 %6, ptr %op, align 4
  %7 = load i64, ptr %op, align 4
  %8 = call ptr @bin_op_to_op_overload_name(i64 %7)
  store ptr %8, ptr %method_name, align 8
  %9 = load ptr, ptr %method_name, align 8
  %10 = icmp eq ptr %9, null
  br i1 %10, label %if.entry, label %else

if.entry:                                         ; preds = %4
  %11 = load ptr, ptr %this, align 8
  %12 = load i64, ptr %op, align 4
  %13 = call ptr @dump_bin_op(i64 %12)
  %14 = getelementptr inbounds %string, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %memberidx1 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %15, i32 0, i32 5
  %16 = load ptr, ptr %memberidx1, align 8
  %17 = call ptr %16(ptr %13)
  %18 = alloca ptr, align 8
  %19 = call i64 (ptr, ptr, ...) @asprintf(ptr %18, ptr @452, ptr %17)
  %20 = load ptr, ptr %18, align 8
  %21 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %21, ptr %20, i64 %19)
  tail call void @free(ptr %17)
  %22 = load ptr, ptr %binary_node, align 8
  %memberidx2 = getelementptr inbounds %Node, ptr %22, i32 0, i32 0
  %23 = load ptr, ptr %memberidx2, align 8
  call void @TypeChecker_error(ptr %11, i64 4, ptr %21, ptr %23)
  ret ptr null

else:                                             ; preds = %4
  br label %ifend

ifend:                                            ; preds = %else
  %24 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %TypeChecker, ptr %24, i32 0, i32 0
  %25 = load ptr, ptr %memberidx3, align 8
  %26 = load ptr, ptr %left, align 8
  %memberidx4 = getelementptr inbounds %Expression, ptr %26, i32 0, i32 3
  %27 = load ptr, ptr %memberidx4, align 8
  %28 = call ptr @get_class_from_type(ptr %25, ptr %27)
  store ptr %28, ptr %owner_class, align 8
  %29 = load ptr, ptr %owner_class, align 8
  %memberidx5 = getelementptr inbounds %Class, ptr %29, i32 0, i32 6
  %30 = load ptr, ptr %memberidx5, align 8
  %31 = load ptr, ptr %method_name, align 8
  %32 = call ptr @Map_string_PropId____getitem__(ptr %30, ptr %31)
  store ptr %32, ptr %prop_id, align 8
  %33 = load ptr, ptr %prop_id, align 8
  %34 = icmp eq ptr %33, null
  br i1 %34, label %if.entry6, label %else7

if.entry6:                                        ; preds = %ifend
  %35 = load i64, ptr %op, align 4
  %36 = icmp eq i64 %35, 11
  %37 = load i64, ptr %op, align 4
  %38 = icmp eq i64 %37, 12
  %39 = or i1 %36, %38
  br i1 %39, label %if.entry9, label %else10

else7:                                            ; preds = %ifend
  br label %ifend8

ifend8:                                           ; preds = %else7
  %40 = load ptr, ptr %this, align 8
  %memberidx19 = getelementptr inbounds %TypeChecker, ptr %40, i32 0, i32 0
  %41 = load ptr, ptr %memberidx19, align 8
  %42 = load ptr, ptr %prop_id, align 8
  %43 = call ptr @get_class_prop_type(ptr %41, ptr %42)
  store ptr %43, ptr %method_type, align 8
  %44 = load ptr, ptr %method_type, align 8
  %memberidx20 = getelementptr inbounds %FunctionType, ptr %44, i32 0, i32 1
  %45 = load ptr, ptr %memberidx20, align 8
  %46 = call ptr @Array_Type____getitem__(ptr %45, i64 0)
  store ptr %46, ptr %arg_type, align 8
  %47 = load ptr, ptr %right, align 8
  %48 = icmp eq ptr %47, null
  br i1 %48, label %if.entry21, label %else22

if.entry9:                                        ; preds = %if.entry6
  %49 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpression, ptr null, i32 1) to i32))
  %50 = load ptr, ptr %left, align 8
  %51 = load i64, ptr %op, align 4
  %52 = load ptr, ptr %this, align 8
  %53 = load ptr, ptr %left, align 8
  %memberidx12 = getelementptr inbounds %Expression, ptr %53, i32 0, i32 3
  %54 = load ptr, ptr %memberidx12, align 8
  %55 = load ptr, ptr %binary_node, align 8
  %memberidx13 = getelementptr inbounds %BinaryExpressionNode, ptr %55, i32 0, i32 5
  %56 = load ptr, ptr %memberidx13, align 8
  %57 = call ptr @TypeChecker_check_expression(ptr %52, ptr %54, ptr %56)
  %58 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BooleanType, ptr null, i32 1) to i32))
  call void @BooleanType_constructor(ptr %58)
  call void @BinaryExpression_constructor(ptr %49, ptr %50, i64 %51, ptr %57, ptr %58, i1 false)
  ret ptr %49

else10:                                           ; preds = %if.entry6
  br label %ifend11

ifend11:                                          ; preds = %else10
  %59 = load ptr, ptr %this, align 8
  %60 = load i64, ptr %op, align 4
  %61 = call ptr @dump_bin_op(i64 %60)
  %62 = getelementptr inbounds %string, ptr %61, i32 0, i32 0
  %63 = load ptr, ptr %62, align 8
  %memberidx14 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %63, i32 0, i32 5
  %64 = load ptr, ptr %memberidx14, align 8
  %65 = call ptr %64(ptr %61)
  %66 = load ptr, ptr %owner_class, align 8
  %memberidx15 = getelementptr inbounds %Class, ptr %66, i32 0, i32 1
  %67 = load ptr, ptr %memberidx15, align 8
  %68 = getelementptr inbounds %string, ptr %67, i32 0, i32 0
  %69 = load ptr, ptr %68, align 8
  %memberidx16 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %69, i32 0, i32 5
  %70 = load ptr, ptr %memberidx16, align 8
  %71 = call ptr %70(ptr %67)
  %72 = load ptr, ptr %method_name, align 8
  %73 = getelementptr inbounds %string, ptr %72, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %memberidx17 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %74, i32 0, i32 5
  %75 = load ptr, ptr %memberidx17, align 8
  %76 = call ptr %75(ptr %72)
  %77 = alloca ptr, align 8
  %78 = call i64 (ptr, ptr, ...) @asprintf(ptr %77, ptr @453, ptr %65, ptr %71, ptr %76)
  %79 = load ptr, ptr %77, align 8
  %80 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %80, ptr %79, i64 %78)
  tail call void @free(ptr %65)
  tail call void @free(ptr %71)
  tail call void @free(ptr %76)
  %81 = load ptr, ptr %binary_node, align 8
  %memberidx18 = getelementptr inbounds %Node, ptr %81, i32 0, i32 0
  %82 = load ptr, ptr %memberidx18, align 8
  call void @TypeChecker_error(ptr %59, i64 1, ptr %80, ptr %82)
  ret ptr null

if.entry21:                                       ; preds = %ifend8
  %83 = load ptr, ptr %this, align 8
  %84 = load ptr, ptr %arg_type, align 8
  %85 = load ptr, ptr %binary_node, align 8
  %memberidx24 = getelementptr inbounds %BinaryExpressionNode, ptr %85, i32 0, i32 5
  %86 = load ptr, ptr %memberidx24, align 8
  %87 = call ptr @TypeChecker_check_expression(ptr %83, ptr %84, ptr %86)
  store ptr %87, ptr %right, align 8
  br label %ifend23

else22:                                           ; preds = %ifend8
  br label %ifend23

ifend23:                                          ; preds = %else22, %if.entry21
  %88 = load ptr, ptr %this, align 8
  %89 = call i1 @TypeChecker_has_errored(ptr %88)
  br i1 %89, label %if.entry25, label %else26

if.entry25:                                       ; preds = %ifend23
  ret ptr null

else26:                                           ; preds = %ifend23
  br label %ifend27

ifend27:                                          ; preds = %else26
  %90 = load ptr, ptr %right, align 8
  %91 = call i1 @is_null_expression(ptr %90)
  %92 = load i64, ptr %op, align 4
  %93 = icmp eq i64 %92, 11
  %94 = load i64, ptr %op, align 4
  %95 = icmp eq i64 %94, 12
  %96 = or i1 %93, %95
  %97 = and i1 %91, %96
  br i1 %97, label %if.entry28, label %else29

if.entry28:                                       ; preds = %ifend27
  %98 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpression, ptr null, i32 1) to i32))
  %99 = load ptr, ptr %left, align 8
  %100 = load i64, ptr %op, align 4
  %101 = load ptr, ptr %right, align 8
  %102 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BooleanType, ptr null, i32 1) to i32))
  call void @BooleanType_constructor(ptr %102)
  call void @BinaryExpression_constructor(ptr %98, ptr %99, i64 %100, ptr %101, ptr %102, i1 false)
  ret ptr %98

else29:                                           ; preds = %ifend27
  br label %ifend30

ifend30:                                          ; preds = %else29
  %103 = load i64, ptr %op, align 4
  %104 = icmp eq i64 %103, 18
  br i1 %104, label %if.entry31, label %else32

if.entry31:                                       ; preds = %ifend30
  %105 = load ptr, ptr %right, align 8
  %memberidx34 = getelementptr inbounds %Expression, ptr %105, i32 0, i32 3
  %106 = load ptr, ptr %memberidx34, align 8
  %107 = call i1 @is_int(ptr %106)
  %108 = load ptr, ptr %arg_type, align 8
  %109 = call i1 @is_int(ptr %108)
  %110 = and i1 %107, %109
  br i1 %110, label %if.entry35, label %else36

else32:                                           ; preds = %ifend30
  br label %ifend33

ifend33:                                          ; preds = %else32, %ifend37
  %111 = load ptr, ptr %this, align 8
  %112 = load ptr, ptr %arg_type, align 8
  %113 = load ptr, ptr %right, align 8
  %memberidx39 = getelementptr inbounds %Expression, ptr %113, i32 0, i32 3
  %114 = load ptr, ptr %memberidx39, align 8
  %115 = call i1 @TypeChecker_types_are_eq(ptr %111, ptr %112, ptr %114)
  %116 = xor i1 %115, true
  br i1 %116, label %if.entry40, label %else41

if.entry35:                                       ; preds = %if.entry31
  %117 = load ptr, ptr %right, align 8
  %118 = load ptr, ptr %right, align 8
  %memberidx38 = getelementptr inbounds %Expression, ptr %118, i32 0, i32 3
  %119 = load ptr, ptr %memberidx38, align 8
  %120 = load ptr, ptr %arg_type, align 8
  %121 = call ptr @max_type(ptr %119, ptr %120)
  %122 = call ptr @cast_exp_to_type(ptr %117, ptr %121)
  store ptr %122, ptr %right, align 8
  br label %ifend37

else36:                                           ; preds = %if.entry31
  br label %ifend37

ifend37:                                          ; preds = %else36, %if.entry35
  br label %ifend33

if.entry40:                                       ; preds = %ifend33
  %123 = load ptr, ptr %this, align 8
  %124 = load ptr, ptr %this, align 8
  %125 = load ptr, ptr %arg_type, align 8
  %126 = call ptr @TypeChecker_dump_type(ptr %124, ptr %125)
  %127 = getelementptr inbounds %string, ptr %126, i32 0, i32 0
  %128 = load ptr, ptr %127, align 8
  %memberidx43 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %128, i32 0, i32 5
  %129 = load ptr, ptr %memberidx43, align 8
  %130 = call ptr %129(ptr %126)
  %131 = load ptr, ptr %this, align 8
  %132 = load ptr, ptr %right, align 8
  %memberidx44 = getelementptr inbounds %Expression, ptr %132, i32 0, i32 3
  %133 = load ptr, ptr %memberidx44, align 8
  %134 = call ptr @TypeChecker_dump_type(ptr %131, ptr %133)
  %135 = getelementptr inbounds %string, ptr %134, i32 0, i32 0
  %136 = load ptr, ptr %135, align 8
  %memberidx45 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %136, i32 0, i32 5
  %137 = load ptr, ptr %memberidx45, align 8
  %138 = call ptr %137(ptr %134)
  %139 = alloca ptr, align 8
  %140 = call i64 (ptr, ptr, ...) @asprintf(ptr %139, ptr @438, ptr %130, ptr %138)
  %141 = load ptr, ptr %139, align 8
  %142 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %142, ptr %141, i64 %140)
  tail call void @free(ptr %130)
  tail call void @free(ptr %138)
  %143 = load ptr, ptr %binary_node, align 8
  %memberidx46 = getelementptr inbounds %BinaryExpressionNode, ptr %143, i32 0, i32 5
  %144 = load ptr, ptr %memberidx46, align 8
  %memberidx47 = getelementptr inbounds %Node, ptr %144, i32 0, i32 0
  %145 = load ptr, ptr %memberidx47, align 8
  call void @TypeChecker_error(ptr %123, i64 5, ptr %142, ptr %145)
  ret ptr null

else41:                                           ; preds = %ifend33
  br label %ifend42

ifend42:                                          ; preds = %else41
  %146 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MemberExpression, ptr null, i32 1) to i32))
  %147 = load ptr, ptr %left, align 8
  %148 = load ptr, ptr %prop_id, align 8
  %149 = load ptr, ptr %method_type, align 8
  call void @MemberExpression_constructor(ptr %146, ptr %147, ptr %148, ptr %149)
  store ptr %146, ptr %member_exp, align 8
  %150 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %150, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx48 = getelementptr inbounds %Array_Expression_, ptr %150, i32 0, i32 1
  %151 = load ptr, ptr %memberidx48, align 8
  %152 = load ptr, ptr %right, align 8
  store ptr %152, ptr %151, align 8
  %153 = getelementptr inbounds ptr, ptr %151, i64 1
  %memberidx49 = getelementptr inbounds %Array_Expression_, ptr %150, i32 0, i32 2
  store i64 1, ptr %memberidx49, align 4
  store ptr %150, ptr %args, align 8
  %154 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%CallExpression, ptr null, i32 1) to i32))
  %155 = load ptr, ptr %member_exp, align 8
  %156 = load ptr, ptr %args, align 8
  %157 = load ptr, ptr %method_type, align 8
  %memberidx50 = getelementptr inbounds %FunctionType, ptr %157, i32 0, i32 2
  %158 = load ptr, ptr %memberidx50, align 8
  call void @CallExpression_constructor(ptr %154, ptr %155, ptr %156, ptr %158)
  ret ptr %154
}

define void @UnaryExpression_constructor(ptr %0, i64 %1, ptr %2, ptr %3, i1 %4) {
  %op = alloca i64, align 8
  %this = alloca ptr, align 8
  %value_type = alloca ptr, align 8
  %is_constant = alloca i1, align 1
  %super = alloca ptr, align 8
  %expression = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Expression_constructor, ptr %super, align 8
  store i64 %1, ptr %op, align 4
  store ptr %2, ptr %expression, align 8
  store ptr %3, ptr %value_type, align 8
  store i1 %4, ptr %is_constant, align 1
  %6 = load ptr, ptr %super, align 8
  call void %6(ptr %0, i64 10)
  %7 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %UnaryExpression, ptr %7, i32 0, i32 4
  %8 = load i64, ptr %op, align 4
  store i64 %8, ptr %memberidx, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %UnaryExpression, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %expression, align 8
  store ptr %10, ptr %memberidx1, align 8
  %11 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %11, i32 0, i32 3
  %12 = load ptr, ptr %value_type, align 8
  store ptr %12, ptr %memberidx2, align 8
  %13 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %13, i32 0, i32 1
  %14 = load i1, ptr %is_constant, align 1
  store i1 %14, ptr %memberidx3, align 1
  ret void
}

define ptr @TypeChecker_check_unary_expr(ptr %0, ptr %1, ptr %2) {
  %unary_node = alloca ptr, align 8
  %expected_type = alloca ptr, align 8
  %this = alloca ptr, align 8
  %op = alloca i64, align 8
  %ty = alloca ptr, align 8
  %expression = alloca ptr, align 8
  %is_const = alloca i1, align 1
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %expected_type, align 8
  store ptr %2, ptr %unary_node, align 8
  %4 = load ptr, ptr %unary_node, align 8
  %memberidx = getelementptr inbounds %UnaryExpressionNode, ptr %4, i32 0, i32 3
  %5 = load i64, ptr %memberidx, align 4
  store i64 %5, ptr %op, align 4
  %6 = load ptr, ptr %this, align 8
  %7 = load ptr, ptr %expected_type, align 8
  %8 = load ptr, ptr %unary_node, align 8
  %memberidx1 = getelementptr inbounds %UnaryExpressionNode, ptr %8, i32 0, i32 4
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = call ptr @TypeChecker_check_expression(ptr %6, ptr %7, ptr %9)
  store ptr %10, ptr %expression, align 8
  %11 = load ptr, ptr %this, align 8
  %12 = call i1 @TypeChecker_has_errored(ptr %11)
  br i1 %12, label %if.entry, label %else

if.entry:                                         ; preds = %3
  ret ptr null

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %13 = load ptr, ptr %expression, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %13, i32 0, i32 3
  %14 = load ptr, ptr %memberidx2, align 8
  store ptr %14, ptr %ty, align 8
  %15 = load ptr, ptr %expression, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %15, i32 0, i32 1
  %16 = load i1, ptr %memberidx3, align 1
  store i1 %16, ptr %is_const, align 1
  %17 = load i64, ptr %op, align 4
  %18 = icmp eq i64 %17, 6
  br i1 %18, label %if.entry4, label %else5

if.entry4:                                        ; preds = %ifend
  %19 = load ptr, ptr %ty, align 8
  %20 = call i1 @is_numeric(ptr %19)
  br i1 %20, label %if.entry7, label %else8

else5:                                            ; preds = %ifend
  br label %ifend6

ifend6:                                           ; preds = %else5, %ifend9
  %21 = load i64, ptr %op, align 4
  %22 = icmp eq i64 %21, 7
  br i1 %22, label %if.entry14, label %else15

if.entry7:                                        ; preds = %if.entry4
  %23 = load ptr, ptr %ty, align 8
  %24 = call i1 @is_int(ptr %23)
  br i1 %24, label %if.entry10, label %else11

else8:                                            ; preds = %if.entry4
  br label %ifend9

ifend9:                                           ; preds = %else8
  br label %ifend6

if.entry10:                                       ; preds = %if.entry7
  %25 = load ptr, ptr %ty, align 8
  %memberidx13 = getelementptr inbounds %IntType, ptr %25, i32 0, i32 1
  store i1 true, ptr %memberidx13, align 1
  br label %ifend12

else11:                                           ; preds = %if.entry7
  br label %ifend12

ifend12:                                          ; preds = %else11, %if.entry10
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%UnaryExpression, ptr null, i32 1) to i32))
  %27 = load i64, ptr %op, align 4
  %28 = load ptr, ptr %expression, align 8
  %29 = load ptr, ptr %ty, align 8
  %30 = load i1, ptr %is_const, align 1
  call void @UnaryExpression_constructor(ptr %26, i64 %27, ptr %28, ptr %29, i1 %30)
  ret ptr %26

if.entry14:                                       ; preds = %ifend6
  %31 = load ptr, ptr %ty, align 8
  %32 = call i1 @is_bool(ptr %31)
  %33 = load ptr, ptr %ty, align 8
  %34 = call i1 @is_numeric(ptr %33)
  %35 = or i1 %32, %34
  br i1 %35, label %if.entry17, label %else18

else15:                                           ; preds = %ifend6
  br label %ifend16

ifend16:                                          ; preds = %else15, %ifend19
  %36 = load i64, ptr %op, align 4
  %37 = icmp sge i64 %36, 2
  %38 = load i64, ptr %op, align 4
  %39 = icmp sle i64 %38, 5
  %40 = and i1 %37, %39
  br i1 %40, label %if.entry20, label %else21

if.entry17:                                       ; preds = %if.entry14
  %41 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%UnaryExpression, ptr null, i32 1) to i32))
  %42 = load i64, ptr %op, align 4
  %43 = load ptr, ptr %expression, align 8
  %44 = load ptr, ptr %ty, align 8
  %45 = load i1, ptr %is_const, align 1
  call void @UnaryExpression_constructor(ptr %41, i64 %42, ptr %43, ptr %44, i1 %45)
  ret ptr %41

else18:                                           ; preds = %if.entry14
  br label %ifend19

ifend19:                                          ; preds = %else18
  br label %ifend16

if.entry20:                                       ; preds = %ifend16
  %46 = load ptr, ptr %ty, align 8
  %47 = call i1 @is_numeric(ptr %46)
  %48 = load ptr, ptr %ty, align 8
  %49 = call i1 @is_pointer(ptr %48)
  %50 = or i1 %47, %49
  br i1 %50, label %if.entry23, label %else24

else21:                                           ; preds = %ifend16
  br label %ifend22

ifend22:                                          ; preds = %else21, %ifend25
  %51 = load i64, ptr %op, align 4
  %52 = icmp eq i64 %51, 8
  br i1 %52, label %if.entry32, label %else33

if.entry23:                                       ; preds = %if.entry20
  %53 = load ptr, ptr %expression, align 8
  %54 = call i1 @check_is_var(ptr %53)
  %55 = xor i1 %54, true
  br i1 %55, label %if.entry26, label %else27

else24:                                           ; preds = %if.entry20
  br label %ifend25

ifend25:                                          ; preds = %else24
  br label %ifend22

if.entry26:                                       ; preds = %if.entry23
  %56 = load ptr, ptr %this, align 8
  %57 = load i64, ptr %op, align 4
  %58 = call ptr @dump_unary_op(i64 %57)
  %59 = getelementptr inbounds %string, ptr %58, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %memberidx29 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %60, i32 0, i32 5
  %61 = load ptr, ptr %memberidx29, align 8
  %62 = call ptr %61(ptr %58)
  %63 = alloca ptr, align 8
  %64 = call i64 (ptr, ptr, ...) @asprintf(ptr %63, ptr @463, ptr %62)
  %65 = load ptr, ptr %63, align 8
  %66 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %66, ptr %65, i64 %64)
  tail call void @free(ptr %62)
  %67 = load ptr, ptr %unary_node, align 8
  %memberidx30 = getelementptr inbounds %UnaryExpressionNode, ptr %67, i32 0, i32 4
  %68 = load ptr, ptr %memberidx30, align 8
  %memberidx31 = getelementptr inbounds %Node, ptr %68, i32 0, i32 0
  %69 = load ptr, ptr %memberidx31, align 8
  call void @TypeChecker_error(ptr %56, i64 4, ptr %66, ptr %69)
  ret ptr null

else27:                                           ; preds = %if.entry23
  br label %ifend28

ifend28:                                          ; preds = %else27
  %70 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%UnaryExpression, ptr null, i32 1) to i32))
  %71 = load i64, ptr %op, align 4
  %72 = load ptr, ptr %expression, align 8
  %73 = load ptr, ptr %ty, align 8
  call void @UnaryExpression_constructor(ptr %70, i64 %71, ptr %72, ptr %73, i1 false)
  ret ptr %70

if.entry32:                                       ; preds = %ifend22
  %74 = load ptr, ptr %expression, align 8
  %75 = call i1 @check_is_var(ptr %74)
  br i1 %75, label %if.entry35, label %else36

else33:                                           ; preds = %ifend22
  br label %ifend34

ifend34:                                          ; preds = %else33, %ifend37
  %76 = load i64, ptr %op, align 4
  %77 = icmp eq i64 %76, 1
  br i1 %77, label %if.entry39, label %else40

if.entry35:                                       ; preds = %if.entry32
  %78 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%UnaryExpression, ptr null, i32 1) to i32))
  %79 = load i64, ptr %op, align 4
  %80 = load ptr, ptr %expression, align 8
  %81 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%PointerType, ptr null, i32 1) to i32))
  %82 = load ptr, ptr %expression, align 8
  %memberidx38 = getelementptr inbounds %Expression, ptr %82, i32 0, i32 3
  %83 = load ptr, ptr %memberidx38, align 8
  call void @PointerType_constructor(ptr %81, ptr %83)
  call void @UnaryExpression_constructor(ptr %78, i64 %79, ptr %80, ptr %81, i1 false)
  ret ptr %78

else36:                                           ; preds = %if.entry32
  br label %ifend37

ifend37:                                          ; preds = %else36
  br label %ifend34

if.entry39:                                       ; preds = %ifend34
  %84 = load ptr, ptr %ty, align 8
  %85 = call i1 @is_object(ptr %84)
  %86 = load ptr, ptr %ty, align 8
  %87 = call i1 @is_pointer(ptr %86)
  %88 = or i1 %85, %87
  br i1 %88, label %if.entry42, label %else43

else40:                                           ; preds = %ifend34
  br label %ifend41

ifend41:                                          ; preds = %else40, %ifend44
  %89 = load ptr, ptr %this, align 8
  %90 = load i64, ptr %op, align 4
  %91 = call ptr @dump_unary_op(i64 %90)
  %92 = getelementptr inbounds %string, ptr %91, i32 0, i32 0
  %93 = load ptr, ptr %92, align 8
  %memberidx45 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %93, i32 0, i32 5
  %94 = load ptr, ptr %memberidx45, align 8
  %95 = call ptr %94(ptr %91)
  %96 = load ptr, ptr %this, align 8
  %97 = load ptr, ptr %ty, align 8
  %98 = call ptr @TypeChecker_dump_type(ptr %96, ptr %97)
  %99 = getelementptr inbounds %string, ptr %98, i32 0, i32 0
  %100 = load ptr, ptr %99, align 8
  %memberidx46 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %100, i32 0, i32 5
  %101 = load ptr, ptr %memberidx46, align 8
  %102 = call ptr %101(ptr %98)
  %103 = alloca ptr, align 8
  %104 = call i64 (ptr, ptr, ...) @asprintf(ptr %103, ptr @464, ptr %95, ptr %102)
  %105 = load ptr, ptr %103, align 8
  %106 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %106, ptr %105, i64 %104)
  tail call void @free(ptr %95)
  tail call void @free(ptr %102)
  %107 = load ptr, ptr %unary_node, align 8
  %memberidx47 = getelementptr inbounds %Node, ptr %107, i32 0, i32 0
  %108 = load ptr, ptr %memberidx47, align 8
  call void @TypeChecker_error(ptr %89, i64 5, ptr %106, ptr %108)
  ret ptr null

if.entry42:                                       ; preds = %if.entry39
  %109 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%UnaryExpression, ptr null, i32 1) to i32))
  %110 = load i64, ptr %op, align 4
  %111 = load ptr, ptr %expression, align 8
  %112 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %112, i64 10)
  call void @UnaryExpression_constructor(ptr %109, i64 %110, ptr %111, ptr %112, i1 false)
  ret ptr %109

else43:                                           ; preds = %if.entry39
  br label %ifend44

ifend44:                                          ; preds = %else43
  br label %ifend41
}

define void @NewExpression_constructor(ptr %0, ptr %1, ptr %2, ptr %3, i1 %4) {
  %args = alloca ptr, align 8
  %this = alloca ptr, align 8
  %value_type = alloca ptr, align 8
  %onheap = alloca i1, align 1
  %super = alloca ptr, align 8
  %memory_type = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Expression_constructor, ptr %super, align 8
  store ptr %1, ptr %memory_type, align 8
  store ptr %2, ptr %value_type, align 8
  store ptr %3, ptr %args, align 8
  store i1 %4, ptr %onheap, align 1
  %6 = load ptr, ptr %super, align 8
  call void %6(ptr %0, i64 12)
  %7 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %NewExpression, ptr %7, i32 0, i32 6
  %8 = load ptr, ptr %memory_type, align 8
  store ptr %8, ptr %memberidx, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %NewExpression, ptr %9, i32 0, i32 5
  %10 = load i1, ptr %onheap, align 1
  store i1 %10, ptr %memberidx1, align 1
  %11 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %NewExpression, ptr %11, i32 0, i32 4
  %12 = load ptr, ptr %args, align 8
  store ptr %12, ptr %memberidx2, align 8
  %13 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %13, i32 0, i32 3
  %14 = load ptr, ptr %value_type, align 8
  store ptr %14, ptr %memberidx3, align 8
  ret void
}

define ptr @TypeChecker_check_new_expr(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %new_expr_node = alloca ptr, align 8
  %args = alloca ptr, align 8
  %expression_type = alloca ptr, align 8
  %memory_type = alloca ptr, align 8
  %msg = alloca ptr, align 8
  %int_ty = alloca ptr, align 8
  %argno = alloca i64, align 8
  %arg = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %new_expr_node, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %new_expr_node, align 8
  %memberidx = getelementptr inbounds %NewExpressionNode, ptr %4, i32 0, i32 3
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @TypeChecker_check_type(ptr %3, ptr %5)
  store ptr %6, ptr %expression_type, align 8
  %7 = load ptr, ptr %this, align 8
  %8 = call i1 @TypeChecker_has_errored(ptr %7)
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret ptr null

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %9 = load ptr, ptr %expression_type, align 8
  store ptr %9, ptr %memory_type, align 8
  %10 = load ptr, ptr %memory_type, align 8
  %memberidx1 = getelementptr inbounds %Type, ptr %10, i32 0, i32 0
  %11 = load i64, ptr %memberidx1, align 4
  %12 = icmp eq i64 %11, 20
  br i1 %12, label %if.entry2, label %else3

if.entry2:                                        ; preds = %ifend
  %13 = load ptr, ptr %memory_type, align 8
  %memberidx5 = getelementptr inbounds %GenericType, ptr %13, i32 0, i32 3
  %14 = load ptr, ptr %memberidx5, align 8
  store ptr %14, ptr %memory_type, align 8
  br label %ifend4

else3:                                            ; preds = %ifend
  br label %ifend4

ifend4:                                           ; preds = %else3, %if.entry2
  %15 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %15, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx6 = getelementptr inbounds %Array_Expression_, ptr %15, i32 0, i32 1
  %16 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %Array_Expression_, ptr %15, i32 0, i32 2
  store i64 0, ptr %memberidx7, align 4
  store ptr %15, ptr %args, align 8
  %17 = load ptr, ptr %memory_type, align 8
  %18 = call i1 @is_object(ptr %17)
  br i1 %18, label %if.entry8, label %else9

if.entry8:                                        ; preds = %ifend4
  %19 = load ptr, ptr %this, align 8
  %20 = load ptr, ptr %this, align 8
  %memberidx11 = getelementptr inbounds %TypeChecker, ptr %20, i32 0, i32 0
  %21 = load ptr, ptr %memberidx11, align 8
  %22 = load ptr, ptr %memory_type, align 8
  %23 = call ptr @get_class_from_type(ptr %21, ptr %22)
  %memberidx12 = getelementptr inbounds %Class, ptr %23, i32 0, i32 0
  %24 = load ptr, ptr %memberidx12, align 8
  %25 = load ptr, ptr %new_expr_node, align 8
  %memberidx13 = getelementptr inbounds %NewExpressionNode, ptr %25, i32 0, i32 5
  %26 = load ptr, ptr %memberidx13, align 8
  %27 = load ptr, ptr %args, align 8
  %28 = call ptr @TypeChecker_check_constructor_call(ptr %19, ptr %24, ptr %26, ptr %args)
  store ptr %28, ptr %msg, align 8
  %29 = load ptr, ptr %msg, align 8
  %30 = icmp ne ptr %29, null
  br i1 %30, label %if.entry14, label %else15

else9:                                            ; preds = %ifend4
  %31 = load ptr, ptr %memory_type, align 8
  %memberidx18 = getelementptr inbounds %Type, ptr %31, i32 0, i32 0
  %32 = load i64, ptr %memberidx18, align 4
  %33 = icmp eq i64 %32, 13
  br i1 %33, label %if.entry19, label %else20

ifend10:                                          ; preds = %ifend21, %ifend16
  %34 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%NewExpression, ptr null, i32 1) to i32))
  %35 = load ptr, ptr %memory_type, align 8
  %36 = load ptr, ptr %expression_type, align 8
  %37 = load ptr, ptr %args, align 8
  %38 = load ptr, ptr %new_expr_node, align 8
  %memberidx44 = getelementptr inbounds %NewExpressionNode, ptr %38, i32 0, i32 4
  %39 = load i1, ptr %memberidx44, align 1
  call void @NewExpression_constructor(ptr %34, ptr %35, ptr %36, ptr %37, i1 %39)
  ret ptr %34

if.entry14:                                       ; preds = %if.entry8
  %40 = load ptr, ptr %this, align 8
  %41 = load ptr, ptr %msg, align 8
  %42 = load ptr, ptr %new_expr_node, align 8
  %memberidx17 = getelementptr inbounds %Node, ptr %42, i32 0, i32 0
  %43 = load ptr, ptr %memberidx17, align 8
  call void @TypeChecker_error(ptr %40, i64 4, ptr %41, ptr %43)
  ret ptr null

else15:                                           ; preds = %if.entry8
  br label %ifend16

ifend16:                                          ; preds = %else15
  br label %ifend10

if.entry19:                                       ; preds = %else9
  %44 = load ptr, ptr %memory_type, align 8
  %memberidx22 = getelementptr inbounds %PointerType, ptr %44, i32 0, i32 1
  %45 = load ptr, ptr %memberidx22, align 8
  store ptr %45, ptr %memory_type, align 8
  %46 = load ptr, ptr %new_expr_node, align 8
  %memberidx23 = getelementptr inbounds %NewExpressionNode, ptr %46, i32 0, i32 5
  %47 = load ptr, ptr %memberidx23, align 8
  %memberidx24 = getelementptr inbounds %Array_ExpressionNode_, ptr %47, i32 0, i32 2
  %48 = load i64, ptr %memberidx24, align 4
  store i64 %48, ptr %argno, align 4
  %49 = load i64, ptr %argno, align 4
  %50 = icmp ne i64 %49, 1
  br i1 %50, label %if.entry25, label %else26

else20:                                           ; preds = %else9
  %51 = load ptr, ptr %this, align 8
  %52 = load ptr, ptr %this, align 8
  %53 = load ptr, ptr %memory_type, align 8
  %54 = call ptr @TypeChecker_dump_type(ptr %52, ptr %53)
  %55 = getelementptr inbounds %string, ptr %54, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %memberidx42 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %56, i32 0, i32 5
  %57 = load ptr, ptr %memberidx42, align 8
  %58 = call ptr %57(ptr %54)
  %59 = alloca ptr, align 8
  %60 = call i64 (ptr, ptr, ...) @asprintf(ptr %59, ptr @472, ptr %58)
  %61 = load ptr, ptr %59, align 8
  %62 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %62, ptr %61, i64 %60)
  tail call void @free(ptr %58)
  %63 = load ptr, ptr %new_expr_node, align 8
  %memberidx43 = getelementptr inbounds %Node, ptr %63, i32 0, i32 0
  %64 = load ptr, ptr %memberidx43, align 8
  call void @TypeChecker_error(ptr %51, i64 5, ptr %62, ptr %64)
  ret ptr null

ifend21:                                          ; preds = %ifend36
  br label %ifend10

if.entry25:                                       ; preds = %if.entry19
  %65 = load ptr, ptr %this, align 8
  %66 = load i64, ptr %argno, align 4
  %67 = alloca ptr, align 8
  %68 = call i64 (ptr, ptr, ...) @asprintf(ptr %67, ptr @470, i64 %66)
  %69 = load ptr, ptr %67, align 8
  %70 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %70, ptr %69, i64 %68)
  %71 = load ptr, ptr %new_expr_node, align 8
  %memberidx28 = getelementptr inbounds %Node, ptr %71, i32 0, i32 0
  %72 = load ptr, ptr %memberidx28, align 8
  call void @TypeChecker_error(ptr %65, i64 4, ptr %70, ptr %72)
  ret ptr null

else26:                                           ; preds = %if.entry19
  br label %ifend27

ifend27:                                          ; preds = %else26
  %73 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntType, ptr null, i32 1) to i32))
  call void @IntType_constructor(ptr %73, i64 6, i1 false)
  store ptr %73, ptr %int_ty, align 8
  %74 = load ptr, ptr %this, align 8
  %75 = load ptr, ptr %int_ty, align 8
  %76 = load ptr, ptr %new_expr_node, align 8
  %memberidx29 = getelementptr inbounds %NewExpressionNode, ptr %76, i32 0, i32 5
  %77 = load ptr, ptr %memberidx29, align 8
  %78 = call ptr @Array_ExpressionNode____getitem__(ptr %77, i64 0)
  %79 = call ptr @TypeChecker_check_expression(ptr %74, ptr %75, ptr %78)
  store ptr %79, ptr %arg, align 8
  %80 = load ptr, ptr %this, align 8
  %81 = call i1 @TypeChecker_has_errored(ptr %80)
  br i1 %81, label %if.entry30, label %else31

if.entry30:                                       ; preds = %ifend27
  ret ptr null

else31:                                           ; preds = %ifend27
  br label %ifend32

ifend32:                                          ; preds = %else31
  %82 = load ptr, ptr %this, align 8
  %83 = load ptr, ptr %int_ty, align 8
  %84 = load ptr, ptr %arg, align 8
  %memberidx33 = getelementptr inbounds %Expression, ptr %84, i32 0, i32 3
  %85 = load ptr, ptr %memberidx33, align 8
  %86 = call i1 @TypeChecker_types_are_eq(ptr %82, ptr %83, ptr %85)
  %87 = xor i1 %86, true
  br i1 %87, label %if.entry34, label %else35

if.entry34:                                       ; preds = %ifend32
  %88 = load ptr, ptr %this, align 8
  %89 = load ptr, ptr %this, align 8
  %90 = load ptr, ptr %int_ty, align 8
  %91 = call ptr @TypeChecker_dump_type(ptr %89, ptr %90)
  %92 = getelementptr inbounds %string, ptr %91, i32 0, i32 0
  %93 = load ptr, ptr %92, align 8
  %memberidx37 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %93, i32 0, i32 5
  %94 = load ptr, ptr %memberidx37, align 8
  %95 = call ptr %94(ptr %91)
  %96 = load ptr, ptr %this, align 8
  %97 = load ptr, ptr %arg, align 8
  %memberidx38 = getelementptr inbounds %Expression, ptr %97, i32 0, i32 3
  %98 = load ptr, ptr %memberidx38, align 8
  %99 = call ptr @TypeChecker_dump_type(ptr %96, ptr %98)
  %100 = getelementptr inbounds %string, ptr %99, i32 0, i32 0
  %101 = load ptr, ptr %100, align 8
  %memberidx39 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %101, i32 0, i32 5
  %102 = load ptr, ptr %memberidx39, align 8
  %103 = call ptr %102(ptr %99)
  %104 = alloca ptr, align 8
  %105 = call i64 (ptr, ptr, ...) @asprintf(ptr %104, ptr @471, ptr %95, ptr %103)
  %106 = load ptr, ptr %104, align 8
  %107 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %107, ptr %106, i64 %105)
  tail call void @free(ptr %95)
  tail call void @free(ptr %103)
  %108 = load ptr, ptr %new_expr_node, align 8
  %memberidx40 = getelementptr inbounds %NewExpressionNode, ptr %108, i32 0, i32 5
  %109 = load ptr, ptr %memberidx40, align 8
  %110 = call ptr @Array_ExpressionNode____getitem__(ptr %109, i64 0)
  %memberidx41 = getelementptr inbounds %Node, ptr %110, i32 0, i32 0
  %111 = load ptr, ptr %memberidx41, align 8
  call void @TypeChecker_error(ptr %88, i64 4, ptr %107, ptr %111)
  %112 = load ptr, ptr %int_ty, align 8
  tail call void @free(ptr %112)
  ret ptr null

else35:                                           ; preds = %ifend32
  br label %ifend36

ifend36:                                          ; preds = %else35
  %113 = load ptr, ptr %args, align 8
  %114 = load ptr, ptr %arg, align 8
  call void @Array_Expression____sl__(ptr %113, ptr %114)
  br label %ifend21
}

define void @TernaryExpression_constructor(ptr %0, ptr %1, ptr %2, ptr %3) {
  %cond = alloca ptr, align 8
  %is_true = alloca ptr, align 8
  %is_false = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Expression_constructor, ptr %super, align 8
  store ptr %1, ptr %cond, align 8
  store ptr %2, ptr %is_true, align 8
  store ptr %3, ptr %is_false, align 8
  %5 = load ptr, ptr %super, align 8
  call void %5(ptr %0, i64 16)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TernaryExpression, ptr %6, i32 0, i32 4
  %7 = load ptr, ptr %cond, align 8
  store ptr %7, ptr %memberidx, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %TernaryExpression, ptr %8, i32 0, i32 5
  %9 = load ptr, ptr %is_true, align 8
  store ptr %9, ptr %memberidx1, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %TernaryExpression, ptr %10, i32 0, i32 6
  %11 = load ptr, ptr %is_false, align 8
  store ptr %11, ptr %memberidx2, align 8
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %12, i32 0, i32 3
  %13 = load ptr, ptr %is_true, align 8
  %memberidx4 = getelementptr inbounds %Expression, ptr %13, i32 0, i32 3
  %14 = load ptr, ptr %memberidx4, align 8
  store ptr %14, ptr %memberidx3, align 8
  ret void
}

define ptr @TypeChecker_check_ternary_expr(ptr %0, ptr %1, ptr %2) {
  %expected_type = alloca ptr, align 8
  %this = alloca ptr, align 8
  %ternary_expr_node = alloca ptr, align 8
  %cond = alloca ptr, align 8
  %is_true_ty = alloca ptr, align 8
  %is_true = alloca ptr, align 8
  %is_false = alloca ptr, align 8
  %is_false_ty = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %expected_type, align 8
  store ptr %2, ptr %ternary_expr_node, align 8
  %4 = load ptr, ptr %this, align 8
  %5 = load ptr, ptr %ternary_expr_node, align 8
  %memberidx = getelementptr inbounds %TernaryExpressionNode, ptr %5, i32 0, i32 3
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr @TypeChecker_check_condition(ptr %4, ptr %6)
  store ptr %7, ptr %cond, align 8
  %8 = load ptr, ptr %this, align 8
  %9 = call i1 @TypeChecker_has_errored(ptr %8)
  br i1 %9, label %if.entry, label %else

if.entry:                                         ; preds = %3
  ret ptr null

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %10 = load ptr, ptr %this, align 8
  %11 = load ptr, ptr %expected_type, align 8
  %12 = load ptr, ptr %ternary_expr_node, align 8
  %memberidx1 = getelementptr inbounds %TernaryExpressionNode, ptr %12, i32 0, i32 4
  %13 = load ptr, ptr %memberidx1, align 8
  %14 = call ptr @TypeChecker_check_expression(ptr %10, ptr %11, ptr %13)
  store ptr %14, ptr %is_true, align 8
  %15 = load ptr, ptr %this, align 8
  %16 = call i1 @TypeChecker_has_errored(ptr %15)
  br i1 %16, label %if.entry2, label %else3

if.entry2:                                        ; preds = %ifend
  ret ptr null

else3:                                            ; preds = %ifend
  br label %ifend4

ifend4:                                           ; preds = %else3
  %17 = load ptr, ptr %is_true, align 8
  %memberidx5 = getelementptr inbounds %Expression, ptr %17, i32 0, i32 3
  %18 = load ptr, ptr %memberidx5, align 8
  store ptr %18, ptr %is_true_ty, align 8
  %19 = load ptr, ptr %this, align 8
  %20 = load ptr, ptr %is_true_ty, align 8
  %21 = load ptr, ptr %ternary_expr_node, align 8
  %memberidx6 = getelementptr inbounds %TernaryExpressionNode, ptr %21, i32 0, i32 5
  %22 = load ptr, ptr %memberidx6, align 8
  %23 = call ptr @TypeChecker_check_expression(ptr %19, ptr %20, ptr %22)
  store ptr %23, ptr %is_false, align 8
  %24 = load ptr, ptr %this, align 8
  %25 = call i1 @TypeChecker_has_errored(ptr %24)
  br i1 %25, label %if.entry7, label %else8

if.entry7:                                        ; preds = %ifend4
  ret ptr null

else8:                                            ; preds = %ifend4
  br label %ifend9

ifend9:                                           ; preds = %else8
  %26 = load ptr, ptr %is_false, align 8
  %memberidx10 = getelementptr inbounds %Expression, ptr %26, i32 0, i32 3
  %27 = load ptr, ptr %memberidx10, align 8
  store ptr %27, ptr %is_false_ty, align 8
  %28 = load ptr, ptr %this, align 8
  %29 = load ptr, ptr %is_true_ty, align 8
  %30 = load ptr, ptr %is_false_ty, align 8
  %31 = call i1 @TypeChecker_types_are_eq(ptr %28, ptr %29, ptr %30)
  %32 = xor i1 %31, true
  br i1 %32, label %if.entry11, label %else12

if.entry11:                                       ; preds = %ifend9
  %33 = load ptr, ptr %this, align 8
  %34 = load ptr, ptr %this, align 8
  %35 = load ptr, ptr %is_true_ty, align 8
  %36 = call ptr @TypeChecker_dump_type(ptr %34, ptr %35)
  %37 = getelementptr inbounds %string, ptr %36, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %memberidx14 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %38, i32 0, i32 5
  %39 = load ptr, ptr %memberidx14, align 8
  %40 = call ptr %39(ptr %36)
  %41 = load ptr, ptr %this, align 8
  %42 = load ptr, ptr %is_false_ty, align 8
  %43 = call ptr @TypeChecker_dump_type(ptr %41, ptr %42)
  %44 = getelementptr inbounds %string, ptr %43, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %memberidx15 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %45, i32 0, i32 5
  %46 = load ptr, ptr %memberidx15, align 8
  %47 = call ptr %46(ptr %43)
  %48 = alloca ptr, align 8
  %49 = call i64 (ptr, ptr, ...) @asprintf(ptr %48, ptr @486, ptr %40, ptr %47)
  %50 = load ptr, ptr %48, align 8
  %51 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %51, ptr %50, i64 %49)
  tail call void @free(ptr %40)
  tail call void @free(ptr %47)
  %52 = load ptr, ptr %ternary_expr_node, align 8
  %memberidx16 = getelementptr inbounds %Node, ptr %52, i32 0, i32 0
  %53 = load ptr, ptr %memberidx16, align 8
  call void @TypeChecker_error(ptr %33, i64 5, ptr %51, ptr %53)
  ret ptr null

else12:                                           ; preds = %ifend9
  br label %ifend13

ifend13:                                          ; preds = %else12
  %54 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%TernaryExpression, ptr null, i32 1) to i32))
  %55 = load ptr, ptr %cond, align 8
  %56 = load ptr, ptr %is_true, align 8
  %57 = load ptr, ptr %is_false, align 8
  call void @TernaryExpression_constructor(ptr %54, ptr %55, ptr %56, ptr %57)
  ret ptr %54
}

define ptr @TypeChecker_dump_type(ptr %0, ptr %1) {
  %ty = alloca ptr, align 8
  %this = alloca ptr, align 8
  %fnc_ty = alloca ptr, align 8
  %args_tys_str = alloca ptr, align 8
  %i = alloca i64, align 8
  %arr_ty = alloca ptr, align 8
  %tup_ty = alloca ptr, align 8
  %tup_str = alloca ptr, align 8
  %i1 = alloca i64, align 8
  %s = alloca ptr, align 8
  %gen_ty = alloca ptr, align 8
  %x = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %ty, align 8
  %3 = load ptr, ptr %ty, align 8
  %4 = call i1 @is_function(ptr %3)
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %5 = load ptr, ptr %ty, align 8
  store ptr %5, ptr %fnc_ty, align 8
  %6 = call ptr @string_from_bytes(ptr @315, i64 0)
  store ptr %6, ptr %args_tys_str, align 8
  br label %for.entry

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %7 = load ptr, ptr %ty, align 8
  %memberidx12 = getelementptr inbounds %Type, ptr %7, i32 0, i32 0
  %8 = load i64, ptr %memberidx12, align 4
  %9 = icmp eq i64 %8, 13
  br i1 %9, label %if.entry13, label %else14

for.entry:                                        ; preds = %if.entry
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %10 = load i64, ptr %i, align 4
  %11 = load ptr, ptr %fnc_ty, align 8
  %memberidx = getelementptr inbounds %FunctionType, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx, align 8
  %memberidx2 = getelementptr inbounds %Array_Type_, ptr %12, i32 0, i32 2
  %13 = load i64, ptr %memberidx2, align 4
  %14 = icmp slt i64 %10, %13
  br i1 %14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load ptr, ptr %args_tys_str, align 8
  %16 = load ptr, ptr %this, align 8
  %17 = load ptr, ptr %fnc_ty, align 8
  %memberidx3 = getelementptr inbounds %FunctionType, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx3, align 8
  %19 = load i64, ptr %i, align 4
  %20 = call ptr @Array_Type____getitem__(ptr %18, i64 %19)
  %21 = call ptr @TypeChecker_dump_type(ptr %16, ptr %20)
  %22 = call ptr @string___adda__(ptr %15, ptr %21)
  %23 = load i64, ptr %i, align 4
  %24 = load ptr, ptr %fnc_ty, align 8
  %memberidx4 = getelementptr inbounds %FunctionType, ptr %24, i32 0, i32 1
  %25 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Array_Type_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx5, align 4
  %27 = sub nuw i64 %26, 1
  %28 = icmp slt i64 %23, %27
  br i1 %28, label %if.entry6, label %else7

for.incr:                                         ; preds = %ifend8
  %29 = load i64, ptr %i, align 4
  %30 = add nsw i64 %29, 1
  store i64 %30, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %31 = load ptr, ptr %args_tys_str, align 8
  %32 = getelementptr inbounds %string, ptr %31, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %memberidx9 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %33, i32 0, i32 5
  %34 = load ptr, ptr %memberidx9, align 8
  %35 = call ptr %34(ptr %31)
  %36 = load ptr, ptr %this, align 8
  %37 = load ptr, ptr %fnc_ty, align 8
  %memberidx10 = getelementptr inbounds %FunctionType, ptr %37, i32 0, i32 2
  %38 = load ptr, ptr %memberidx10, align 8
  %39 = call ptr @TypeChecker_dump_type(ptr %36, ptr %38)
  %40 = getelementptr inbounds %string, ptr %39, i32 0, i32 0
  %41 = load ptr, ptr %40, align 8
  %memberidx11 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %41, i32 0, i32 5
  %42 = load ptr, ptr %memberidx11, align 8
  %43 = call ptr %42(ptr %39)
  %44 = alloca ptr, align 8
  %45 = call i64 (ptr, ptr, ...) @asprintf(ptr %44, ptr @317, ptr %35, ptr %43)
  %46 = load ptr, ptr %44, align 8
  %47 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %47, ptr %46, i64 %45)
  tail call void @free(ptr %35)
  tail call void @free(ptr %43)
  ret ptr %47

if.entry6:                                        ; preds = %for.body
  %48 = load ptr, ptr %args_tys_str, align 8
  %49 = call ptr @string_from_bytes(ptr @316, i64 2)
  %50 = call ptr @string___adda__(ptr %48, ptr %49)
  br label %ifend8

else7:                                            ; preds = %for.body
  br label %ifend8

ifend8:                                           ; preds = %else7, %if.entry6
  br label %for.incr

if.entry13:                                       ; preds = %ifend
  %51 = load ptr, ptr %this, align 8
  %52 = load ptr, ptr %ty, align 8
  %memberidx16 = getelementptr inbounds %PointerType, ptr %52, i32 0, i32 1
  %53 = load ptr, ptr %memberidx16, align 8
  %54 = call ptr @TypeChecker_dump_type(ptr %51, ptr %53)
  %55 = getelementptr inbounds %string, ptr %54, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %memberidx17 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %56, i32 0, i32 5
  %57 = load ptr, ptr %memberidx17, align 8
  %58 = call ptr %57(ptr %54)
  %59 = alloca ptr, align 8
  %60 = call i64 (ptr, ptr, ...) @asprintf(ptr %59, ptr @318, ptr %58)
  %61 = load ptr, ptr %59, align 8
  %62 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %62, ptr %61, i64 %60)
  tail call void @free(ptr %58)
  ret ptr %62

else14:                                           ; preds = %ifend
  br label %ifend15

ifend15:                                          ; preds = %else14
  %63 = load ptr, ptr %ty, align 8
  %memberidx18 = getelementptr inbounds %Type, ptr %63, i32 0, i32 0
  %64 = load i64, ptr %memberidx18, align 4
  %65 = icmp eq i64 %64, 11
  br i1 %65, label %if.entry19, label %else20

if.entry19:                                       ; preds = %ifend15
  %66 = load ptr, ptr %this, align 8
  %memberidx22 = getelementptr inbounds %TypeChecker, ptr %66, i32 0, i32 0
  %67 = load ptr, ptr %memberidx22, align 8
  %68 = load ptr, ptr %ty, align 8
  %69 = call ptr @get_class_from_type(ptr %67, ptr %68)
  %memberidx23 = getelementptr inbounds %Class, ptr %69, i32 0, i32 1
  %70 = load ptr, ptr %memberidx23, align 8
  ret ptr %70

else20:                                           ; preds = %ifend15
  br label %ifend21

ifend21:                                          ; preds = %else20
  %71 = load ptr, ptr %ty, align 8
  %memberidx24 = getelementptr inbounds %Type, ptr %71, i32 0, i32 0
  %72 = load i64, ptr %memberidx24, align 4
  %73 = icmp eq i64 %72, 12
  br i1 %73, label %if.entry25, label %else26

if.entry25:                                       ; preds = %ifend21
  %74 = load ptr, ptr %this, align 8
  %memberidx28 = getelementptr inbounds %TypeChecker, ptr %74, i32 0, i32 0
  %75 = load ptr, ptr %memberidx28, align 8
  %76 = load ptr, ptr %ty, align 8
  %memberidx29 = getelementptr inbounds %EnumType, ptr %76, i32 0, i32 1
  %77 = load ptr, ptr %memberidx29, align 8
  %78 = call ptr @get_enum(ptr %75, ptr %77)
  %memberidx30 = getelementptr inbounds %Enum, ptr %78, i32 0, i32 1
  %79 = load ptr, ptr %memberidx30, align 8
  ret ptr %79

else26:                                           ; preds = %ifend21
  br label %ifend27

ifend27:                                          ; preds = %else26
  %80 = load ptr, ptr %ty, align 8
  %memberidx31 = getelementptr inbounds %Type, ptr %80, i32 0, i32 0
  %81 = load i64, ptr %memberidx31, align 4
  %82 = icmp eq i64 %81, 14
  br i1 %82, label %if.entry32, label %else33

if.entry32:                                       ; preds = %ifend27
  %83 = load ptr, ptr %ty, align 8
  store ptr %83, ptr %arr_ty, align 8
  %84 = load ptr, ptr %this, align 8
  %85 = load ptr, ptr %arr_ty, align 8
  %memberidx35 = getelementptr inbounds %ArrayType, ptr %85, i32 0, i32 1
  %86 = load ptr, ptr %memberidx35, align 8
  %87 = call ptr @TypeChecker_dump_type(ptr %84, ptr %86)
  %88 = getelementptr inbounds %string, ptr %87, i32 0, i32 0
  %89 = load ptr, ptr %88, align 8
  %memberidx36 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %89, i32 0, i32 5
  %90 = load ptr, ptr %memberidx36, align 8
  %91 = call ptr %90(ptr %87)
  %92 = load ptr, ptr %arr_ty, align 8
  %memberidx37 = getelementptr inbounds %ArrayType, ptr %92, i32 0, i32 2
  %93 = load i64, ptr %memberidx37, align 4
  %94 = alloca ptr, align 8
  %95 = call i64 (ptr, ptr, ...) @asprintf(ptr %94, ptr @319, ptr %91, i64 %93)
  %96 = load ptr, ptr %94, align 8
  %97 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %97, ptr %96, i64 %95)
  tail call void @free(ptr %91)
  ret ptr %97

else33:                                           ; preds = %ifend27
  br label %ifend34

ifend34:                                          ; preds = %else33
  %98 = load ptr, ptr %ty, align 8
  %memberidx38 = getelementptr inbounds %Type, ptr %98, i32 0, i32 0
  %99 = load i64, ptr %memberidx38, align 4
  %100 = icmp eq i64 %99, 15
  br i1 %100, label %if.entry39, label %else40

if.entry39:                                       ; preds = %ifend34
  %101 = load ptr, ptr %ty, align 8
  store ptr %101, ptr %tup_ty, align 8
  %102 = call ptr @string_from_bytes(ptr @315, i64 0)
  store ptr %102, ptr %tup_str, align 8
  br label %for.entry42

else40:                                           ; preds = %ifend34
  br label %ifend41

ifend41:                                          ; preds = %else40
  %103 = load ptr, ptr %ty, align 8
  %memberidx56 = getelementptr inbounds %Type, ptr %103, i32 0, i32 0
  %104 = load i64, ptr %memberidx56, align 4
  %105 = icmp eq i64 %104, 20
  br i1 %105, label %if.entry57, label %else58

for.entry42:                                      ; preds = %if.entry39
  store i64 0, ptr %i1, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.incr45, %for.entry42
  %106 = load i64, ptr %i1, align 4
  %107 = load ptr, ptr %tup_ty, align 8
  %memberidx47 = getelementptr inbounds %TupleType, ptr %107, i32 0, i32 1
  %108 = load ptr, ptr %memberidx47, align 8
  %memberidx48 = getelementptr inbounds %Array_Type_, ptr %108, i32 0, i32 2
  %109 = load i64, ptr %memberidx48, align 4
  %110 = icmp slt i64 %106, %109
  br i1 %110, label %for.body44, label %for.end46

for.body44:                                       ; preds = %for.cond43
  %111 = load ptr, ptr %tup_str, align 8
  %112 = load ptr, ptr %this, align 8
  %113 = load ptr, ptr %tup_ty, align 8
  %memberidx49 = getelementptr inbounds %TupleType, ptr %113, i32 0, i32 1
  %114 = load ptr, ptr %memberidx49, align 8
  %115 = load i64, ptr %i1, align 4
  %116 = call ptr @Array_Type____getitem__(ptr %114, i64 %115)
  %117 = call ptr @TypeChecker_dump_type(ptr %112, ptr %116)
  %118 = call ptr @string___adda__(ptr %111, ptr %117)
  %119 = load i64, ptr %i1, align 4
  %120 = load ptr, ptr %tup_ty, align 8
  %memberidx50 = getelementptr inbounds %TupleType, ptr %120, i32 0, i32 1
  %121 = load ptr, ptr %memberidx50, align 8
  %memberidx51 = getelementptr inbounds %Array_Type_, ptr %121, i32 0, i32 2
  %122 = load i64, ptr %memberidx51, align 4
  %123 = sub nuw i64 %122, 1
  %124 = icmp slt i64 %119, %123
  br i1 %124, label %if.entry52, label %else53

for.incr45:                                       ; preds = %ifend54
  %125 = load i64, ptr %i1, align 4
  %126 = add nsw i64 %125, 1
  store i64 %126, ptr %i1, align 4
  br label %for.cond43

for.end46:                                        ; preds = %for.cond43
  %127 = load ptr, ptr %tup_str, align 8
  %128 = getelementptr inbounds %string, ptr %127, i32 0, i32 0
  %129 = load ptr, ptr %128, align 8
  %memberidx55 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %129, i32 0, i32 5
  %130 = load ptr, ptr %memberidx55, align 8
  %131 = call ptr %130(ptr %127)
  %132 = alloca ptr, align 8
  %133 = call i64 (ptr, ptr, ...) @asprintf(ptr %132, ptr @320, ptr %131)
  %134 = load ptr, ptr %132, align 8
  %135 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %135, ptr %134, i64 %133)
  tail call void @free(ptr %131)
  ret ptr %135

if.entry52:                                       ; preds = %for.body44
  %136 = load ptr, ptr %tup_str, align 8
  %137 = call ptr @string_from_bytes(ptr @316, i64 2)
  %138 = call ptr @string___adda__(ptr %136, ptr %137)
  br label %ifend54

else53:                                           ; preds = %for.body44
  br label %ifend54

ifend54:                                          ; preds = %else53, %if.entry52
  br label %for.incr45

if.entry57:                                       ; preds = %ifend41
  %139 = load ptr, ptr %ty, align 8
  store ptr %139, ptr %gen_ty, align 8
  %140 = load ptr, ptr %gen_ty, align 8
  %memberidx60 = getelementptr inbounds %GenericType, ptr %140, i32 0, i32 1
  %141 = load ptr, ptr %memberidx60, align 8
  %142 = call ptr @string_from_bytes(ptr @321, i64 1)
  %143 = call ptr @string___add__(ptr %141, ptr %142)
  store ptr %143, ptr %s, align 8
  br label %for.entry61

else58:                                           ; preds = %ifend41
  br label %ifend59

ifend59:                                          ; preds = %else58
  %144 = load ptr, ptr %ty, align 8
  %memberidx69 = getelementptr inbounds %Type, ptr %144, i32 0, i32 0
  %145 = load i64, ptr %memberidx69, align 4
  %146 = icmp eq i64 %145, 18
  br i1 %146, label %if.entry70, label %else71

for.entry61:                                      ; preds = %if.entry57
  store i64 0, ptr %x, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.incr64, %for.entry61
  %147 = load i64, ptr %x, align 4
  %148 = load ptr, ptr %gen_ty, align 8
  %memberidx66 = getelementptr inbounds %GenericType, ptr %148, i32 0, i32 2
  %149 = load ptr, ptr %memberidx66, align 8
  %memberidx67 = getelementptr inbounds %Array_Type_, ptr %149, i32 0, i32 2
  %150 = load i64, ptr %memberidx67, align 4
  %151 = icmp slt i64 %147, %150
  br i1 %151, label %for.body63, label %for.end65

for.body63:                                       ; preds = %for.cond62
  %152 = load ptr, ptr %s, align 8
  %153 = load ptr, ptr %this, align 8
  %154 = load ptr, ptr %gen_ty, align 8
  %memberidx68 = getelementptr inbounds %GenericType, ptr %154, i32 0, i32 2
  %155 = load ptr, ptr %memberidx68, align 8
  %156 = load i64, ptr %x, align 4
  %157 = call ptr @Array_Type____getitem__(ptr %155, i64 %156)
  %158 = call ptr @TypeChecker_dump_type(ptr %153, ptr %157)
  %159 = call ptr @string___adda__(ptr %152, ptr %158)
  br label %for.incr64

for.incr64:                                       ; preds = %for.body63
  %160 = load i64, ptr %x, align 4
  %161 = add nsw i64 %160, 1
  store i64 %161, ptr %x, align 4
  br label %for.cond62

for.end65:                                        ; preds = %for.cond62
  %162 = load ptr, ptr %s, align 8
  %163 = call ptr @string_from_bytes(ptr @322, i64 1)
  %164 = call ptr @string___add__(ptr %162, ptr %163)
  ret ptr %164

if.entry70:                                       ; preds = %ifend59
  %165 = call ptr @string_from_bytes(ptr @323, i64 9)
  ret ptr %165

else71:                                           ; preds = %ifend59
  br label %ifend72

ifend72:                                          ; preds = %else71
  %166 = load ptr, ptr %ty, align 8
  %memberidx73 = getelementptr inbounds %Type, ptr %166, i32 0, i32 0
  %167 = load i64, ptr %memberidx73, align 4
  %168 = icmp eq i64 %167, 17
  br i1 %168, label %if.entry74, label %else75

if.entry74:                                       ; preds = %ifend72
  %169 = call ptr @string_from_bytes(ptr @324, i64 6)
  ret ptr %169

else75:                                           ; preds = %ifend72
  br label %ifend76

ifend76:                                          ; preds = %else75
  %170 = load ptr, ptr %ty, align 8
  %171 = call ptr @dump_type(ptr %170, i1 false)
  ret ptr %171
}

define void @IfStatement_constructor(ptr %0, ptr %1, ptr %2, ptr %3) {
  %else_block = alloca ptr, align 8
  %block = alloca ptr, align 8
  %this = alloca ptr, align 8
  %condition = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Statement_constructor, ptr %super, align 8
  store ptr %1, ptr %condition, align 8
  store ptr %2, ptr %block, align 8
  store ptr %3, ptr %else_block, align 8
  %5 = load ptr, ptr %super, align 8
  call void %5(ptr %0, i64 0)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %IfStatement, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %condition, align 8
  store ptr %7, ptr %memberidx, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %IfStatement, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %block, align 8
  store ptr %9, ptr %memberidx1, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %IfStatement, ptr %10, i32 0, i32 3
  %11 = load ptr, ptr %else_block, align 8
  store ptr %11, ptr %memberidx2, align 8
  ret void
}

define ptr @TypeChecker_check_if_stamement(ptr %0, ptr %1) {
  %if_stmt_node = alloca ptr, align 8
  %this = alloca ptr, align 8
  %else_block = alloca ptr, align 8
  %block = alloca ptr, align 8
  %condition = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %if_stmt_node, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %if_stmt_node, align 8
  %memberidx = getelementptr inbounds %IfStatementNode, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @TypeChecker_check_condition(ptr %3, ptr %5)
  store ptr %6, ptr %condition, align 8
  %7 = load ptr, ptr %this, align 8
  %8 = load ptr, ptr %if_stmt_node, align 8
  %memberidx1 = getelementptr inbounds %IfStatementNode, ptr %8, i32 0, i32 3
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = call ptr @TypeChecker_check_block(ptr %7, ptr %9, ptr null, i1 false)
  store ptr %10, ptr %block, align 8
  %11 = load ptr, ptr %if_stmt_node, align 8
  %memberidx2 = getelementptr inbounds %IfStatementNode, ptr %11, i32 0, i32 4
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = icmp ne ptr %12, null
  br i1 %13, label %true_block, label %false_block

true_block:                                       ; preds = %2
  %14 = load ptr, ptr %this, align 8
  %15 = load ptr, ptr %if_stmt_node, align 8
  %memberidx3 = getelementptr inbounds %IfStatementNode, ptr %15, i32 0, i32 4
  %16 = load ptr, ptr %memberidx3, align 8
  %17 = call ptr @TypeChecker_check_block(ptr %14, ptr %16, ptr null, i1 false)
  br label %end

false_block:                                      ; preds = %2
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %17, %true_block ], [ null, %false_block ]
  store ptr %ternary, ptr %else_block, align 8
  %18 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IfStatement, ptr null, i32 1) to i32))
  %19 = load ptr, ptr %condition, align 8
  %20 = load ptr, ptr %block, align 8
  %21 = load ptr, ptr %else_block, align 8
  call void @IfStatement_constructor(ptr %18, ptr %19, ptr %20, ptr %21)
  ret ptr %18
}

define ptr @TypeChecker_get_module(ptr %0, i64 %1) {
  %id = alloca i64, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %id, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Program, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = load i64, ptr %id, align 4
  %7 = call ptr @Array_Module____getitem__(ptr %5, i64 %6)
  ret ptr %7
}

define ptr @TypeChecker_get_current_module(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %3, i32 0, i32 4
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %ScopeId, ptr %4, i32 0, i32 0
  %5 = load i64, ptr %memberidx1, align 4
  %6 = call ptr @TypeChecker_get_module(ptr %2, i64 %5)
  ret ptr %6
}

define void @GenericType_constructor(ptr %0, ptr %1, ptr %2, ptr %3) {
  %name = alloca ptr, align 8
  %instantiated_type = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arg_types = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Type_constructor, ptr %super, align 8
  store ptr %1, ptr %name, align 8
  store ptr %2, ptr %arg_types, align 8
  store ptr %3, ptr %instantiated_type, align 8
  %5 = load ptr, ptr %super, align 8
  call void %5(ptr %0, i64 20)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %GenericType, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %name, align 8
  store ptr %7, ptr %memberidx, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %GenericType, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %arg_types, align 8
  store ptr %9, ptr %memberidx1, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %GenericType, ptr %10, i32 0, i32 3
  %11 = load ptr, ptr %instantiated_type, align 8
  store ptr %11, ptr %memberidx2, align 8
  ret void
}

define ptr @TypeChecker_create_generic_instance_in_module(ptr %0, ptr %1, ptr %2) {
  %types = alloca ptr, align 8
  %name = alloca ptr, align 8
  %this = alloca ptr, align 8
  %param_strings = alloca ptr, align 8
  %possible_type = alloca ptr, align 8
  %generic = alloca ptr, align 8
  %generic_scope = alloca ptr, align 8
  %generic_params = alloca ptr, align 8
  %instantiated_generic_name = alloca ptr, align 8
  %scope_id = alloca ptr, align 8
  %param_name = alloca ptr, align 8
  %i = alloca i64, align 8
  %param_type = alloca ptr, align 8
  %new_identok = alloca ptr, align 8
  %instantiated_generic_class = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %name, align 8
  store ptr %2, ptr %types, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %4, i32 0, i32 8
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load ptr, ptr %name, align 8
  %7 = call ptr @Map_string_Generic____getitem__(ptr %5, ptr %6)
  store ptr %7, ptr %generic, align 8
  %8 = load ptr, ptr %generic, align 8
  %9 = icmp eq ptr %8, null
  br i1 %9, label %if.entry, label %else

if.entry:                                         ; preds = %3
  ret ptr null

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %10 = load ptr, ptr %generic, align 8
  %memberidx1 = getelementptr inbounds %Generic, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %ClassDeclarationNode, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx2, align 8
  store ptr %12, ptr %generic_params, align 8
  %13 = load ptr, ptr %generic_params, align 8
  %memberidx3 = getelementptr inbounds %Array_GenericParameterNode_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx3, align 4
  %15 = load ptr, ptr %types, align 8
  %memberidx4 = getelementptr inbounds %Array_Type_, ptr %15, i32 0, i32 2
  %16 = load i64, ptr %memberidx4, align 4
  %17 = icmp ne i64 %14, %16
  br i1 %17, label %if.entry5, label %else6

if.entry5:                                        ; preds = %ifend
  %18 = load ptr, ptr %this, align 8
  %19 = load ptr, ptr %generic_params, align 8
  %memberidx8 = getelementptr inbounds %Array_GenericParameterNode_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx8, align 4
  %21 = load ptr, ptr %types, align 8
  %memberidx9 = getelementptr inbounds %Array_Type_, ptr %21, i32 0, i32 2
  %22 = load i64, ptr %memberidx9, align 4
  %23 = alloca ptr, align 8
  %24 = call i64 (ptr, ptr, ...) @asprintf(ptr %23, ptr @346, i64 %20, i64 %22)
  %25 = load ptr, ptr %23, align 8
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %26, ptr %25, i64 %24)
  call void @TypeChecker_error(ptr %18, i64 5, ptr %26, ptr null)
  ret ptr null

else6:                                            ; preds = %ifend
  br label %ifend7

ifend7:                                           ; preds = %else6
  %27 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %TypeChecker, ptr %27, i32 0, i32 4
  %28 = load ptr, ptr %memberidx10, align 8
  store ptr %28, ptr %scope_id, align 8
  %29 = load ptr, ptr %this, align 8
  call void @TypeChecker_switch_to_generic_module(ptr %29)
  %30 = load ptr, ptr %this, align 8
  %31 = call ptr @TypeChecker_create_child_scope_within_current_scope(ptr %30)
  store ptr %31, ptr %generic_scope, align 8
  %32 = call ptr @string_from_bytes(ptr @315, i64 0)
  store ptr %32, ptr %param_strings, align 8
  br label %for.entry

for.entry:                                        ; preds = %ifend7
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %33 = load i64, ptr %i, align 4
  %34 = load ptr, ptr %generic_params, align 8
  %memberidx11 = getelementptr inbounds %Array_GenericParameterNode_, ptr %34, i32 0, i32 2
  %35 = load i64, ptr %memberidx11, align 4
  %36 = icmp slt i64 %33, %35
  br i1 %36, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %37 = load ptr, ptr %generic_params, align 8
  %38 = load i64, ptr %i, align 4
  %39 = call ptr @Array_GenericParameterNode____getitem__(ptr %37, i64 %38)
  %memberidx12 = getelementptr inbounds %GenericParameterNode, ptr %39, i32 0, i32 0
  %40 = load ptr, ptr %memberidx12, align 8
  %memberidx13 = getelementptr inbounds %IdentifierToken, ptr %40, i32 0, i32 2
  %41 = load ptr, ptr %memberidx13, align 8
  store ptr %41, ptr %param_name, align 8
  %42 = load ptr, ptr %types, align 8
  %43 = load i64, ptr %i, align 4
  %44 = call ptr @Array_Type____getitem__(ptr %42, i64 %43)
  %memberidx14 = getelementptr inbounds %Type, ptr %44, i32 0, i32 0
  %45 = load i64, ptr %memberidx14, align 4
  %46 = icmp eq i64 %45, 20
  br i1 %46, label %true_block, label %false_block

for.incr:                                         ; preds = %end
  %47 = load i64, ptr %i, align 4
  %48 = add nsw i64 %47, 1
  store i64 %48, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %49 = load ptr, ptr %name, align 8
  %50 = getelementptr inbounds %string, ptr %49, i32 0, i32 0
  %51 = load ptr, ptr %50, align 8
  %memberidx18 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %51, i32 0, i32 5
  %52 = load ptr, ptr %memberidx18, align 8
  %53 = call ptr %52(ptr %49)
  %54 = load ptr, ptr %param_strings, align 8
  %55 = getelementptr inbounds %string, ptr %54, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %memberidx19 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %56, i32 0, i32 5
  %57 = load ptr, ptr %memberidx19, align 8
  %58 = call ptr %57(ptr %54)
  %59 = alloca ptr, align 8
  %60 = call i64 (ptr, ptr, ...) @asprintf(ptr %59, ptr @348, ptr %53, ptr %58)
  %61 = load ptr, ptr %59, align 8
  %62 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %62, ptr %61, i64 %60)
  tail call void @free(ptr %53)
  tail call void @free(ptr %58)
  store ptr %62, ptr %instantiated_generic_name, align 8
  %63 = load ptr, ptr %this, align 8
  %64 = load ptr, ptr %instantiated_generic_name, align 8
  %65 = call ptr @TypeChecker_get_type_from_current_scope(ptr %63, ptr %64)
  store ptr %65, ptr %possible_type, align 8
  %66 = load ptr, ptr %possible_type, align 8
  %memberidx20 = getelementptr inbounds %Type, ptr %66, i32 0, i32 0
  %67 = load i64, ptr %memberidx20, align 4
  %68 = icmp eq i64 %67, 21
  br i1 %68, label %if.entry21, label %else22

true_block:                                       ; preds = %for.body
  %69 = load ptr, ptr %types, align 8
  %70 = load i64, ptr %i, align 4
  %71 = call ptr @Array_Type____getitem__(ptr %69, i64 %70)
  %memberidx15 = getelementptr inbounds %GenericType, ptr %71, i32 0, i32 3
  %72 = load ptr, ptr %memberidx15, align 8
  br label %end

false_block:                                      ; preds = %for.body
  %73 = load ptr, ptr %types, align 8
  %74 = load i64, ptr %i, align 4
  %75 = call ptr @Array_Type____getitem__(ptr %73, i64 %74)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %72, %true_block ], [ %75, %false_block ]
  store ptr %ternary, ptr %param_type, align 8
  %76 = load ptr, ptr %param_strings, align 8
  %77 = load ptr, ptr %this, align 8
  %78 = load ptr, ptr %param_type, align 8
  %79 = call ptr @TypeChecker_dump_type(ptr %77, ptr %78)
  %80 = getelementptr inbounds %string, ptr %79, i32 0, i32 0
  %81 = load ptr, ptr %80, align 8
  %memberidx16 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %81, i32 0, i32 5
  %82 = load ptr, ptr %memberidx16, align 8
  %83 = call ptr %82(ptr %79)
  %84 = alloca ptr, align 8
  %85 = call i64 (ptr, ptr, ...) @asprintf(ptr %84, ptr @347, ptr %83)
  %86 = load ptr, ptr %84, align 8
  %87 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %87, ptr %86, i64 %85)
  tail call void @free(ptr %83)
  %88 = call ptr @string___adda__(ptr %76, ptr %87)
  %89 = load ptr, ptr %generic_scope, align 8
  %memberidx17 = getelementptr inbounds %Scope, ptr %89, i32 0, i32 6
  %90 = load ptr, ptr %memberidx17, align 8
  %91 = load ptr, ptr %param_name, align 8
  %92 = load ptr, ptr %types, align 8
  %93 = load i64, ptr %i, align 4
  %94 = call ptr @Array_Type____getitem__(ptr %92, i64 %93)
  call void @Map_string_Type____setitem__(ptr %90, ptr %91, ptr %94)
  br label %for.incr

if.entry21:                                       ; preds = %for.end
  %95 = alloca %IdentifierToken, align 8
  %96 = load ptr, ptr %instantiated_generic_name, align 8
  %97 = load ptr, ptr %generic, align 8
  %memberidx24 = getelementptr inbounds %Generic, ptr %97, i32 0, i32 1
  %98 = load ptr, ptr %memberidx24, align 8
  %memberidx25 = getelementptr inbounds %ClassDeclarationNode, ptr %98, i32 0, i32 0
  %99 = load ptr, ptr %memberidx25, align 8
  %memberidx26 = getelementptr inbounds %Token, ptr %99, i32 0, i32 1
  %100 = load ptr, ptr %memberidx26, align 8
  call void @IdentifierToken_constructor(ptr %95, ptr %96, ptr %100)
  store ptr %95, ptr %new_identok, align 8
  %101 = alloca %ClassDeclarationNode, align 8
  %102 = load ptr, ptr %new_identok, align 8
  call void @ClassDeclarationNode_constructor(ptr %101, ptr %102)
  store ptr %101, ptr %instantiated_generic_class, align 8
  %103 = load ptr, ptr %instantiated_generic_class, align 8
  %memberidx27 = getelementptr inbounds %ClassDeclarationNode, ptr %103, i32 0, i32 2
  %104 = load ptr, ptr %generic, align 8
  %memberidx28 = getelementptr inbounds %Generic, ptr %104, i32 0, i32 1
  %105 = load ptr, ptr %memberidx28, align 8
  %memberidx29 = getelementptr inbounds %ClassDeclarationNode, ptr %105, i32 0, i32 2
  %106 = load ptr, ptr %memberidx29, align 8
  store ptr %106, ptr %memberidx27, align 8
  %107 = load ptr, ptr %instantiated_generic_class, align 8
  %memberidx30 = getelementptr inbounds %ClassDeclarationNode, ptr %107, i32 0, i32 3
  %108 = load ptr, ptr %generic, align 8
  %memberidx31 = getelementptr inbounds %Generic, ptr %108, i32 0, i32 1
  %109 = load ptr, ptr %memberidx31, align 8
  %memberidx32 = getelementptr inbounds %ClassDeclarationNode, ptr %109, i32 0, i32 3
  %110 = load ptr, ptr %memberidx32, align 8
  store ptr %110, ptr %memberidx30, align 8
  %111 = load ptr, ptr %instantiated_generic_class, align 8
  %memberidx33 = getelementptr inbounds %ClassDeclarationNode, ptr %111, i32 0, i32 4
  %112 = load ptr, ptr %generic, align 8
  %memberidx34 = getelementptr inbounds %Generic, ptr %112, i32 0, i32 1
  %113 = load ptr, ptr %memberidx34, align 8
  %memberidx35 = getelementptr inbounds %ClassDeclarationNode, ptr %113, i32 0, i32 4
  %114 = load ptr, ptr %memberidx35, align 8
  store ptr %114, ptr %memberidx33, align 8
  %115 = load ptr, ptr %this, align 8
  %memberidx36 = getelementptr inbounds %TypeChecker, ptr %115, i32 0, i32 4
  %116 = load ptr, ptr %generic_scope, align 8
  %memberidx37 = getelementptr inbounds %Scope, ptr %116, i32 0, i32 0
  %117 = load ptr, ptr %memberidx37, align 8
  store ptr %117, ptr %memberidx36, align 8
  %118 = load ptr, ptr %this, align 8
  %119 = load ptr, ptr %instantiated_generic_class, align 8
  call void @TypeChecker_declare_class_within_module(ptr %118, ptr %119)
  %120 = load ptr, ptr %this, align 8
  %121 = load ptr, ptr %instantiated_generic_class, align 8
  call void @TypeChecker_check_class_body(ptr %120, ptr %121)
  %122 = load ptr, ptr %this, align 8
  %123 = load ptr, ptr %instantiated_generic_name, align 8
  %124 = call ptr @TypeChecker_get_type_from_current_scope(ptr %122, ptr %123)
  store ptr %124, ptr %possible_type, align 8
  br label %ifend23

else22:                                           ; preds = %for.end
  br label %ifend23

ifend23:                                          ; preds = %else22, %if.entry21
  %125 = load ptr, ptr %this, align 8
  %memberidx38 = getelementptr inbounds %TypeChecker, ptr %125, i32 0, i32 4
  %126 = load ptr, ptr %scope_id, align 8
  store ptr %126, ptr %memberidx38, align 8
  %127 = load ptr, ptr %generic_scope, align 8
  call void @Scope___del__(ptr %127)
  tail call void @free(ptr %127)
  %128 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%GenericType, ptr null, i32 1) to i32))
  %129 = load ptr, ptr %name, align 8
  %130 = load ptr, ptr %types, align 8
  %131 = load ptr, ptr %possible_type, align 8
  call void @GenericType_constructor(ptr %128, ptr %129, ptr %130, ptr %131)
  ret ptr %128
}

define void @TypeChecker_declare_enum_within_module(ptr %0, ptr %1) {
  %enum_node = alloca ptr, align 8
  %this = alloca ptr, align 8
  %name = alloca ptr, align 8
  %module_scope = alloca ptr, align 8
  %declared_enum = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %enum_node, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Enum, ptr null, i32 1) to i32))
  call void @Enum_constructor(ptr %3)
  store ptr %3, ptr %declared_enum, align 8
  %4 = load ptr, ptr %enum_node, align 8
  %memberidx = getelementptr inbounds %EnumNode, ptr %4, i32 0, i32 0
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx1, align 8
  store ptr %6, ptr %name, align 8
  %7 = load ptr, ptr %this, align 8
  %8 = call ptr @TypeChecker_get_current_module_global_scope(ptr %7)
  store ptr %8, ptr %module_scope, align 8
  %9 = load ptr, ptr %declared_enum, align 8
  %memberidx2 = getelementptr inbounds %Enum, ptr %9, i32 0, i32 1
  %10 = load ptr, ptr %name, align 8
  store ptr %10, ptr %memberidx2, align 8
  %11 = load ptr, ptr %this, align 8
  %12 = load ptr, ptr %name, align 8
  %13 = call ptr @TypeChecker_get_type_from_current_scope(ptr %11, ptr %12)
  %memberidx3 = getelementptr inbounds %Type, ptr %13, i32 0, i32 0
  %14 = load i64, ptr %memberidx3, align 4
  %15 = icmp ne i64 %14, 21
  br i1 %15, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %16 = load ptr, ptr %this, align 8
  %17 = load ptr, ptr %name, align 8
  %18 = getelementptr inbounds %string, ptr %17, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  %memberidx4 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %19, i32 0, i32 5
  %20 = load ptr, ptr %memberidx4, align 8
  %21 = call ptr %20(ptr %17)
  %22 = alloca ptr, align 8
  %23 = call i64 (ptr, ptr, ...) @asprintf(ptr %22, ptr @345, ptr %21)
  %24 = load ptr, ptr %22, align 8
  %25 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %25, ptr %24, i64 %23)
  tail call void @free(ptr %21)
  %26 = load ptr, ptr %enum_node, align 8
  %memberidx5 = getelementptr inbounds %EnumNode, ptr %26, i32 0, i32 0
  %27 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %Token, ptr %27, i32 0, i32 1
  %28 = load ptr, ptr %memberidx6, align 8
  call void @TypeChecker_error(ptr %16, i64 1, ptr %25, ptr %28)
  ret void

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %29 = load ptr, ptr %declared_enum, align 8
  %memberidx7 = getelementptr inbounds %Enum, ptr %29, i32 0, i32 0
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%EnumId, ptr null, i32 1) to i32))
  %31 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %TypeChecker, ptr %31, i32 0, i32 4
  %32 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %ScopeId, ptr %32, i32 0, i32 0
  %33 = load i64, ptr %memberidx9, align 4
  %34 = load ptr, ptr %this, align 8
  %35 = call ptr @TypeChecker_get_current_module(ptr %34)
  %memberidx10 = getelementptr inbounds %Module, ptr %35, i32 0, i32 6
  %36 = load ptr, ptr %memberidx10, align 8
  %memberidx11 = getelementptr inbounds %Array_Enum_, ptr %36, i32 0, i32 2
  %37 = load i64, ptr %memberidx11, align 4
  call void @EnumId_constructor(ptr %30, i64 %33, i64 %37)
  store ptr %30, ptr %memberidx7, align 8
  %38 = load ptr, ptr %this, align 8
  %39 = call ptr @TypeChecker_get_current_module(ptr %38)
  %memberidx12 = getelementptr inbounds %Module, ptr %39, i32 0, i32 6
  %40 = load ptr, ptr %memberidx12, align 8
  %41 = load ptr, ptr %declared_enum, align 8
  call void @Array_Enum____sl__(ptr %40, ptr %41)
  %42 = load ptr, ptr %module_scope, align 8
  %memberidx13 = getelementptr inbounds %Scope, ptr %42, i32 0, i32 4
  %43 = load ptr, ptr %memberidx13, align 8
  %44 = load ptr, ptr %declared_enum, align 8
  %memberidx14 = getelementptr inbounds %Enum, ptr %44, i32 0, i32 1
  %45 = load ptr, ptr %memberidx14, align 8
  %46 = load ptr, ptr %declared_enum, align 8
  %memberidx15 = getelementptr inbounds %Enum, ptr %46, i32 0, i32 0
  %47 = load ptr, ptr %memberidx15, align 8
  call void @Map_string_EnumId____setitem__(ptr %43, ptr %45, ptr %47)
  %48 = load ptr, ptr %module_scope, align 8
  %memberidx16 = getelementptr inbounds %Scope, ptr %48, i32 0, i32 1
  %49 = load ptr, ptr %memberidx16, align 8
  %50 = load ptr, ptr %declared_enum, align 8
  %memberidx17 = getelementptr inbounds %Enum, ptr %50, i32 0, i32 1
  %51 = load ptr, ptr %memberidx17, align 8
  %52 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%EnumVarId, ptr null, i32 1) to i32))
  %53 = load ptr, ptr %declared_enum, align 8
  %memberidx18 = getelementptr inbounds %Enum, ptr %53, i32 0, i32 0
  %54 = load ptr, ptr %memberidx18, align 8
  call void @EnumVarId_constructor(ptr %52, ptr %54)
  call void @Map_string_VarId____setitem__(ptr %49, ptr %51, ptr %52)
  ret void
}

define void @TypeChecker_declare_class_within_module(ptr %0, ptr %1) {
  %class_decl_node = alloca ptr, align 8
  %this = alloca ptr, align 8
  %name = alloca ptr, align 8
  %module_scope = alloca ptr, align 8
  %declared_class = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %class_decl_node, align 8
  %3 = load ptr, ptr %class_decl_node, align 8
  %memberidx = getelementptr inbounds %ClassDeclarationNode, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx1, align 8
  store ptr %5, ptr %name, align 8
  %6 = load ptr, ptr %this, align 8
  %7 = load ptr, ptr %name, align 8
  %8 = call ptr @TypeChecker_get_type_from_current_scope(ptr %6, ptr %7)
  %memberidx2 = getelementptr inbounds %Type, ptr %8, i32 0, i32 0
  %9 = load i64, ptr %memberidx2, align 4
  %10 = icmp ne i64 %9, 21
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %TypeChecker, ptr %11, i32 0, i32 8
  %12 = load ptr, ptr %memberidx3, align 8
  %13 = load ptr, ptr %name, align 8
  %14 = call ptr @Map_string_Generic____getitem__(ptr %12, ptr %13)
  %15 = icmp ne ptr %14, null
  %16 = or i1 %10, %15
  br i1 %16, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %17 = load ptr, ptr %this, align 8
  %18 = load ptr, ptr %name, align 8
  %19 = getelementptr inbounds %string, ptr %18, i32 0, i32 0
  %20 = load ptr, ptr %19, align 8
  %memberidx4 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %20, i32 0, i32 5
  %21 = load ptr, ptr %memberidx4, align 8
  %22 = call ptr %21(ptr %18)
  %23 = alloca ptr, align 8
  %24 = call i64 (ptr, ptr, ...) @asprintf(ptr %23, ptr @345, ptr %22)
  %25 = load ptr, ptr %23, align 8
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %26, ptr %25, i64 %24)
  tail call void @free(ptr %22)
  %27 = load ptr, ptr %class_decl_node, align 8
  %memberidx5 = getelementptr inbounds %ClassDeclarationNode, ptr %27, i32 0, i32 0
  %28 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %Token, ptr %28, i32 0, i32 1
  %29 = load ptr, ptr %memberidx6, align 8
  call void @TypeChecker_error(ptr %17, i64 1, ptr %26, ptr %29)
  ret void

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %30 = load ptr, ptr %class_decl_node, align 8
  %memberidx7 = getelementptr inbounds %ClassDeclarationNode, ptr %30, i32 0, i32 1
  %31 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Array_GenericParameterNode_, ptr %31, i32 0, i32 2
  %32 = load i64, ptr %memberidx8, align 4
  %33 = icmp sgt i64 %32, 0
  br i1 %33, label %if.entry9, label %else10

if.entry9:                                        ; preds = %ifend
  %34 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %TypeChecker, ptr %34, i32 0, i32 7
  store i1 true, ptr %memberidx12, align 1
  %35 = load ptr, ptr %this, align 8
  %memberidx13 = getelementptr inbounds %TypeChecker, ptr %35, i32 0, i32 8
  %36 = load ptr, ptr %memberidx13, align 8
  %37 = load ptr, ptr %name, align 8
  %38 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Generic, ptr null, i32 1) to i32))
  %39 = load ptr, ptr %this, align 8
  %memberidx14 = getelementptr inbounds %TypeChecker, ptr %39, i32 0, i32 4
  %40 = load ptr, ptr %memberidx14, align 8
  %memberidx15 = getelementptr inbounds %ScopeId, ptr %40, i32 0, i32 0
  %41 = load i64, ptr %memberidx15, align 4
  %42 = load ptr, ptr %class_decl_node, align 8
  call void @Generic_constructor(ptr %38, i64 %41, ptr %42)
  call void @Map_string_Generic____setitem__(ptr %36, ptr %37, ptr %38)
  ret void

else10:                                           ; preds = %ifend
  br label %ifend11

ifend11:                                          ; preds = %else10
  %43 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Class, ptr null, i32 1) to i32))
  call void @Class_constructor(ptr %43)
  store ptr %43, ptr %declared_class, align 8
  %44 = load ptr, ptr %this, align 8
  %45 = call ptr @TypeChecker_get_current_module_global_scope(ptr %44)
  store ptr %45, ptr %module_scope, align 8
  %46 = load ptr, ptr %class_decl_node, align 8
  %memberidx16 = getelementptr inbounds %ClassDeclarationNode, ptr %46, i32 0, i32 2
  %47 = load ptr, ptr %memberidx16, align 8
  %48 = icmp ne ptr %47, null
  br i1 %48, label %if.entry17, label %else18

if.entry17:                                       ; preds = %ifend11
  %49 = load ptr, ptr %declared_class, align 8
  %memberidx20 = getelementptr inbounds %Class, ptr %49, i32 0, i32 2
  %50 = load ptr, ptr %this, align 8
  %51 = load ptr, ptr %class_decl_node, align 8
  %memberidx21 = getelementptr inbounds %ClassDeclarationNode, ptr %51, i32 0, i32 2
  %52 = load ptr, ptr %memberidx21, align 8
  %53 = call ptr @TypeChecker_check_type(ptr %50, ptr %52)
  store ptr %53, ptr %memberidx20, align 8
  %54 = load ptr, ptr %this, align 8
  %55 = call i1 @TypeChecker_has_errored(ptr %54)
  br i1 %55, label %if.entry22, label %else23

else18:                                           ; preds = %ifend11
  %56 = load ptr, ptr %declared_class, align 8
  %memberidx25 = getelementptr inbounds %Class, ptr %56, i32 0, i32 2
  store ptr null, ptr %memberidx25, align 8
  br label %ifend19

ifend19:                                          ; preds = %else18, %ifend24
  %57 = load ptr, ptr %declared_class, align 8
  %memberidx26 = getelementptr inbounds %Class, ptr %57, i32 0, i32 1
  %58 = load ptr, ptr %name, align 8
  store ptr %58, ptr %memberidx26, align 8
  %59 = load ptr, ptr %declared_class, align 8
  %memberidx27 = getelementptr inbounds %Class, ptr %59, i32 0, i32 0
  %60 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ClassId, ptr null, i32 1) to i32))
  %61 = load ptr, ptr %this, align 8
  %memberidx28 = getelementptr inbounds %TypeChecker, ptr %61, i32 0, i32 4
  %62 = load ptr, ptr %memberidx28, align 8
  %memberidx29 = getelementptr inbounds %ScopeId, ptr %62, i32 0, i32 0
  %63 = load i64, ptr %memberidx29, align 4
  %64 = load ptr, ptr %this, align 8
  %65 = call ptr @TypeChecker_get_current_module(ptr %64)
  %memberidx30 = getelementptr inbounds %Module, ptr %65, i32 0, i32 3
  %66 = load ptr, ptr %memberidx30, align 8
  %memberidx31 = getelementptr inbounds %Array_Class_, ptr %66, i32 0, i32 2
  %67 = load i64, ptr %memberidx31, align 4
  call void @ClassId_constructor(ptr %60, i64 %63, i64 %67)
  store ptr %60, ptr %memberidx27, align 8
  %68 = load ptr, ptr %this, align 8
  %69 = call ptr @TypeChecker_get_current_module(ptr %68)
  %memberidx32 = getelementptr inbounds %Module, ptr %69, i32 0, i32 3
  %70 = load ptr, ptr %memberidx32, align 8
  %71 = load ptr, ptr %declared_class, align 8
  call void @Array_Class____sl__(ptr %70, ptr %71)
  %72 = load ptr, ptr %module_scope, align 8
  %memberidx33 = getelementptr inbounds %Scope, ptr %72, i32 0, i32 2
  %73 = load ptr, ptr %memberidx33, align 8
  %74 = load ptr, ptr %name, align 8
  %75 = load ptr, ptr %declared_class, align 8
  %memberidx34 = getelementptr inbounds %Class, ptr %75, i32 0, i32 0
  %76 = load ptr, ptr %memberidx34, align 8
  call void @Map_string_ClassId____setitem__(ptr %73, ptr %74, ptr %76)
  %77 = load ptr, ptr %module_scope, align 8
  %memberidx35 = getelementptr inbounds %Scope, ptr %77, i32 0, i32 1
  %78 = load ptr, ptr %memberidx35, align 8
  %79 = load ptr, ptr %name, align 8
  %80 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ClassVarId, ptr null, i32 1) to i32))
  %81 = load ptr, ptr %declared_class, align 8
  %memberidx36 = getelementptr inbounds %Class, ptr %81, i32 0, i32 0
  %82 = load ptr, ptr %memberidx36, align 8
  call void @ClassVarId_constructor(ptr %80, ptr %82)
  call void @Map_string_VarId____setitem__(ptr %78, ptr %79, ptr %80)
  ret void

if.entry22:                                       ; preds = %if.entry17
  ret void

else23:                                           ; preds = %if.entry17
  br label %ifend24

ifend24:                                          ; preds = %else23
  br label %ifend19
}

define void @TypeChecker_declare_function_within_module(ptr %0, ptr %1) {
  %function_node = alloca ptr, align 8
  %this = alloca ptr, align 8
  %parent_scope = alloca ptr, align 8
  %name = alloca ptr, align 8
  %module_scope = alloca ptr, align 8
  %declared_function = alloca ptr, align 8
  %fnc_scope = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %function_node, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Function, ptr null, i32 1) to i32))
  call void @Function_constructor(ptr %3)
  store ptr %3, ptr %declared_function, align 8
  %4 = load ptr, ptr %declared_function, align 8
  %memberidx = getelementptr inbounds %Function, ptr %4, i32 0, i32 6
  %5 = load ptr, ptr %function_node, align 8
  %memberidx1 = getelementptr inbounds %FunctionDeclarationNode, ptr %5, i32 0, i32 4
  %6 = load i1, ptr %memberidx1, align 1
  store i1 %6, ptr %memberidx, align 1
  %7 = load ptr, ptr %function_node, align 8
  %memberidx2 = getelementptr inbounds %FunctionDeclarationNode, ptr %7, i32 0, i32 0
  %8 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %IdentifierToken, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %memberidx3, align 8
  store ptr %9, ptr %name, align 8
  %10 = load ptr, ptr %declared_function, align 8
  %memberidx4 = getelementptr inbounds %Function, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %name, align 8
  store ptr %11, ptr %memberidx4, align 8
  %12 = load ptr, ptr %this, align 8
  %13 = load ptr, ptr %name, align 8
  %14 = call i1 @TypeChecker_is_constant_in_scope(ptr %12, ptr %13)
  br i1 %14, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %15 = load ptr, ptr %this, align 8
  %16 = load ptr, ptr %name, align 8
  %17 = getelementptr inbounds %string, ptr %16, i32 0, i32 0
  %18 = load ptr, ptr %17, align 8
  %memberidx5 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %18, i32 0, i32 5
  %19 = load ptr, ptr %memberidx5, align 8
  %20 = call ptr %19(ptr %16)
  %21 = alloca ptr, align 8
  %22 = call i64 (ptr, ptr, ...) @asprintf(ptr %21, ptr @353, ptr %20)
  %23 = load ptr, ptr %21, align 8
  %24 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %24, ptr %23, i64 %22)
  tail call void @free(ptr %20)
  %25 = load ptr, ptr %function_node, align 8
  %memberidx6 = getelementptr inbounds %FunctionDeclarationNode, ptr %25, i32 0, i32 0
  %26 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %Token, ptr %26, i32 0, i32 1
  %27 = load ptr, ptr %memberidx7, align 8
  call void @TypeChecker_error(ptr %15, i64 1, ptr %24, ptr %27)
  ret void

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %28 = load ptr, ptr %this, align 8
  %29 = load ptr, ptr %name, align 8
  %30 = call ptr @TypeChecker_get_type_from_current_scope(ptr %28, ptr %29)
  %memberidx8 = getelementptr inbounds %Type, ptr %30, i32 0, i32 0
  %31 = load i64, ptr %memberidx8, align 4
  %32 = icmp ne i64 %31, 21
  br i1 %32, label %if.entry9, label %else10

if.entry9:                                        ; preds = %ifend
  %33 = load ptr, ptr %this, align 8
  %34 = load ptr, ptr %name, align 8
  %35 = getelementptr inbounds %string, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  %memberidx12 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %36, i32 0, i32 5
  %37 = load ptr, ptr %memberidx12, align 8
  %38 = call ptr %37(ptr %34)
  %39 = alloca ptr, align 8
  %40 = call i64 (ptr, ptr, ...) @asprintf(ptr %39, ptr @354, ptr %38)
  %41 = load ptr, ptr %39, align 8
  %42 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %42, ptr %41, i64 %40)
  tail call void @free(ptr %38)
  %43 = load ptr, ptr %function_node, align 8
  %memberidx13 = getelementptr inbounds %FunctionDeclarationNode, ptr %43, i32 0, i32 0
  %44 = load ptr, ptr %memberidx13, align 8
  %memberidx14 = getelementptr inbounds %Token, ptr %44, i32 0, i32 1
  %45 = load ptr, ptr %memberidx14, align 8
  call void @TypeChecker_error(ptr %33, i64 1, ptr %42, ptr %45)
  ret void

else10:                                           ; preds = %ifend
  br label %ifend11

ifend11:                                          ; preds = %else10
  %46 = load ptr, ptr %this, align 8
  %memberidx15 = getelementptr inbounds %TypeChecker, ptr %46, i32 0, i32 4
  %47 = load ptr, ptr %memberidx15, align 8
  store ptr %47, ptr %parent_scope, align 8
  %48 = load ptr, ptr %this, align 8
  %49 = call ptr @TypeChecker_create_child_scope_within_current_scope(ptr %48)
  store ptr %49, ptr %fnc_scope, align 8
  %50 = load ptr, ptr %this, align 8
  %memberidx16 = getelementptr inbounds %TypeChecker, ptr %50, i32 0, i32 4
  %51 = load ptr, ptr %fnc_scope, align 8
  %memberidx17 = getelementptr inbounds %Scope, ptr %51, i32 0, i32 0
  %52 = load ptr, ptr %memberidx17, align 8
  store ptr %52, ptr %memberidx16, align 8
  %53 = load ptr, ptr %declared_function, align 8
  %memberidx18 = getelementptr inbounds %Function, ptr %53, i32 0, i32 2
  %54 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_FunctionArg_, ptr null, i32 1) to i32))
  call void @Array_FunctionArg__constructor(ptr %54, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx19 = getelementptr inbounds %Array_FunctionArg_, ptr %54, i32 0, i32 1
  %55 = load ptr, ptr %memberidx19, align 8
  %memberidx20 = getelementptr inbounds %Array_FunctionArg_, ptr %54, i32 0, i32 2
  store i64 0, ptr %memberidx20, align 4
  store ptr %54, ptr %memberidx18, align 8
  %56 = load ptr, ptr %declared_function, align 8
  %memberidx21 = getelementptr inbounds %Function, ptr %56, i32 0, i32 4
  %57 = load ptr, ptr %this, align 8
  %58 = load ptr, ptr %function_node, align 8
  %memberidx22 = getelementptr inbounds %FunctionDeclarationNode, ptr %58, i32 0, i32 1
  %59 = load ptr, ptr %memberidx22, align 8
  %60 = load ptr, ptr %function_node, align 8
  %memberidx23 = getelementptr inbounds %FunctionDeclarationNode, ptr %60, i32 0, i32 3
  %61 = load ptr, ptr %memberidx23, align 8
  %62 = load ptr, ptr %declared_function, align 8
  %memberidx24 = getelementptr inbounds %Function, ptr %62, i32 0, i32 2
  %63 = load ptr, ptr %memberidx24, align 8
  %64 = call ptr @TypeChecker_init_function_signature(ptr %57, ptr %59, ptr %61, ptr %63)
  store ptr %64, ptr %memberidx21, align 8
  %65 = load ptr, ptr %this, align 8
  %66 = call i1 @TypeChecker_has_errored(ptr %65)
  br i1 %66, label %if.entry25, label %else26

if.entry25:                                       ; preds = %ifend11
  ret void

else26:                                           ; preds = %ifend11
  br label %ifend27

ifend27:                                          ; preds = %else26
  %67 = load ptr, ptr %declared_function, align 8
  %memberidx28 = getelementptr inbounds %Function, ptr %67, i32 0, i32 0
  %68 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%VarId, ptr null, i32 1) to i32))
  %69 = load ptr, ptr %this, align 8
  %memberidx29 = getelementptr inbounds %TypeChecker, ptr %69, i32 0, i32 4
  %70 = load ptr, ptr %memberidx29, align 8
  %memberidx30 = getelementptr inbounds %ScopeId, ptr %70, i32 0, i32 0
  %71 = load i64, ptr %memberidx30, align 4
  %72 = load ptr, ptr %this, align 8
  %73 = call ptr @TypeChecker_get_current_module(ptr %72)
  %memberidx31 = getelementptr inbounds %Module, ptr %73, i32 0, i32 4
  %74 = load ptr, ptr %memberidx31, align 8
  %memberidx32 = getelementptr inbounds %Array_Function_, ptr %74, i32 0, i32 2
  %75 = load i64, ptr %memberidx32, align 4
  call void @VarId_constructor(ptr %68, i64 0, i64 %71, i64 %75)
  store ptr %68, ptr %memberidx28, align 8
  %76 = load ptr, ptr %this, align 8
  %memberidx33 = getelementptr inbounds %TypeChecker, ptr %76, i32 0, i32 4
  %77 = load ptr, ptr %fnc_scope, align 8
  %memberidx34 = getelementptr inbounds %Scope, ptr %77, i32 0, i32 5
  %78 = load ptr, ptr %memberidx34, align 8
  store ptr %78, ptr %memberidx33, align 8
  %79 = load ptr, ptr %declared_function, align 8
  %memberidx35 = getelementptr inbounds %Function, ptr %79, i32 0, i32 5
  %80 = load ptr, ptr %fnc_scope, align 8
  %memberidx36 = getelementptr inbounds %Scope, ptr %80, i32 0, i32 0
  %81 = load ptr, ptr %memberidx36, align 8
  store ptr %81, ptr %memberidx35, align 8
  %82 = load ptr, ptr %this, align 8
  %83 = call ptr @TypeChecker_get_current_module_global_scope(ptr %82)
  store ptr %83, ptr %module_scope, align 8
  %84 = load ptr, ptr %this, align 8
  %85 = call ptr @TypeChecker_get_current_module(ptr %84)
  %memberidx37 = getelementptr inbounds %Module, ptr %85, i32 0, i32 4
  %86 = load ptr, ptr %memberidx37, align 8
  %87 = load ptr, ptr %declared_function, align 8
  call void @Array_Function____sl__(ptr %86, ptr %87)
  %88 = load ptr, ptr %module_scope, align 8
  %memberidx38 = getelementptr inbounds %Scope, ptr %88, i32 0, i32 3
  %89 = load ptr, ptr %memberidx38, align 8
  %90 = load ptr, ptr %declared_function, align 8
  %memberidx39 = getelementptr inbounds %Function, ptr %90, i32 0, i32 1
  %91 = load ptr, ptr %memberidx39, align 8
  %92 = load ptr, ptr %declared_function, align 8
  %memberidx40 = getelementptr inbounds %Function, ptr %92, i32 0, i32 0
  %93 = load ptr, ptr %memberidx40, align 8
  call void @Map_string_VarId____setitem__(ptr %89, ptr %91, ptr %93)
  ret void
}

define ptr @TypeChecker_check_object_bin_assign(ptr %0, ptr %1, ptr %2) {
  %left = alloca ptr, align 8
  %binary_node = alloca ptr, align 8
  %this = alloca ptr, align 8
  %args = alloca ptr, align 8
  %right = alloca ptr, align 8
  %owner_class = alloca ptr, align 8
  %op = alloca i64, align 8
  %prop_id = alloca ptr, align 8
  %method_name = alloca ptr, align 8
  %arg_type = alloca ptr, align 8
  %member_exp = alloca ptr, align 8
  %method_type = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %left, align 8
  store ptr %2, ptr %binary_node, align 8
  %4 = load ptr, ptr %binary_node, align 8
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %4, i32 0, i32 4
  %5 = load i64, ptr %memberidx, align 4
  store i64 %5, ptr %op, align 4
  %6 = load i64, ptr %op, align 4
  %7 = call ptr @bin_op_to_op_overload_name(i64 %6)
  store ptr %7, ptr %method_name, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %TypeChecker, ptr %8, i32 0, i32 0
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = load ptr, ptr %left, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %10, i32 0, i32 3
  %11 = load ptr, ptr %memberidx2, align 8
  %12 = call ptr @get_class_from_type(ptr %9, ptr %11)
  store ptr %12, ptr %owner_class, align 8
  %13 = load ptr, ptr %owner_class, align 8
  %memberidx3 = getelementptr inbounds %Class, ptr %13, i32 0, i32 6
  %14 = load ptr, ptr %memberidx3, align 8
  %15 = load ptr, ptr %method_name, align 8
  %16 = call ptr @Map_string_PropId____getitem__(ptr %14, ptr %15)
  store ptr %16, ptr %prop_id, align 8
  %17 = load ptr, ptr %prop_id, align 8
  %18 = icmp eq ptr %17, null
  br i1 %18, label %if.entry, label %else

if.entry:                                         ; preds = %3
  ret ptr null

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %19 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %TypeChecker, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx4, align 8
  %21 = load ptr, ptr %prop_id, align 8
  %22 = call ptr @get_class_prop_type(ptr %20, ptr %21)
  store ptr %22, ptr %method_type, align 8
  %23 = load ptr, ptr %method_type, align 8
  %memberidx5 = getelementptr inbounds %FunctionType, ptr %23, i32 0, i32 1
  %24 = load ptr, ptr %memberidx5, align 8
  %25 = call ptr @Array_Type____getitem__(ptr %24, i64 0)
  store ptr %25, ptr %arg_type, align 8
  %26 = load ptr, ptr %this, align 8
  %27 = load ptr, ptr %arg_type, align 8
  %28 = load ptr, ptr %binary_node, align 8
  %memberidx6 = getelementptr inbounds %BinaryExpressionNode, ptr %28, i32 0, i32 5
  %29 = load ptr, ptr %memberidx6, align 8
  %30 = call ptr @TypeChecker_check_expression(ptr %26, ptr %27, ptr %29)
  store ptr %30, ptr %right, align 8
  %31 = load ptr, ptr %this, align 8
  %32 = call i1 @TypeChecker_has_errored(ptr %31)
  br i1 %32, label %if.entry7, label %else8

if.entry7:                                        ; preds = %ifend
  ret ptr null

else8:                                            ; preds = %ifend
  br label %ifend9

ifend9:                                           ; preds = %else8
  %33 = load ptr, ptr %this, align 8
  %34 = load ptr, ptr %arg_type, align 8
  %35 = load ptr, ptr %right, align 8
  %memberidx10 = getelementptr inbounds %Expression, ptr %35, i32 0, i32 3
  %36 = load ptr, ptr %memberidx10, align 8
  %37 = call i1 @TypeChecker_types_are_eq(ptr %33, ptr %34, ptr %36)
  %38 = xor i1 %37, true
  br i1 %38, label %if.entry11, label %else12

if.entry11:                                       ; preds = %ifend9
  %39 = load ptr, ptr %this, align 8
  %40 = load ptr, ptr %this, align 8
  %41 = load ptr, ptr %arg_type, align 8
  %42 = call ptr @TypeChecker_dump_type(ptr %40, ptr %41)
  %43 = getelementptr inbounds %string, ptr %42, i32 0, i32 0
  %44 = load ptr, ptr %43, align 8
  %memberidx14 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %44, i32 0, i32 5
  %45 = load ptr, ptr %memberidx14, align 8
  %46 = call ptr %45(ptr %42)
  %47 = load ptr, ptr %this, align 8
  %48 = load ptr, ptr %right, align 8
  %memberidx15 = getelementptr inbounds %Expression, ptr %48, i32 0, i32 3
  %49 = load ptr, ptr %memberidx15, align 8
  %50 = call ptr @TypeChecker_dump_type(ptr %47, ptr %49)
  %51 = getelementptr inbounds %string, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %memberidx16 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %52, i32 0, i32 5
  %53 = load ptr, ptr %memberidx16, align 8
  %54 = call ptr %53(ptr %50)
  %55 = alloca ptr, align 8
  %56 = call i64 (ptr, ptr, ...) @asprintf(ptr %55, ptr @438, ptr %46, ptr %54)
  %57 = load ptr, ptr %55, align 8
  %58 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %58, ptr %57, i64 %56)
  tail call void @free(ptr %46)
  tail call void @free(ptr %54)
  %59 = load ptr, ptr %binary_node, align 8
  %memberidx17 = getelementptr inbounds %BinaryExpressionNode, ptr %59, i32 0, i32 5
  %60 = load ptr, ptr %memberidx17, align 8
  %memberidx18 = getelementptr inbounds %Node, ptr %60, i32 0, i32 0
  %61 = load ptr, ptr %memberidx18, align 8
  call void @TypeChecker_error(ptr %39, i64 5, ptr %58, ptr %61)
  ret ptr null

else12:                                           ; preds = %ifend9
  br label %ifend13

ifend13:                                          ; preds = %else12
  %62 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MemberExpression, ptr null, i32 1) to i32))
  %63 = load ptr, ptr %left, align 8
  %64 = load ptr, ptr %prop_id, align 8
  %65 = load ptr, ptr %method_type, align 8
  call void @MemberExpression_constructor(ptr %62, ptr %63, ptr %64, ptr %65)
  store ptr %62, ptr %member_exp, align 8
  %66 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %66, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx19 = getelementptr inbounds %Array_Expression_, ptr %66, i32 0, i32 1
  %67 = load ptr, ptr %memberidx19, align 8
  %68 = load ptr, ptr %right, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr inbounds ptr, ptr %67, i64 1
  %memberidx20 = getelementptr inbounds %Array_Expression_, ptr %66, i32 0, i32 2
  store i64 1, ptr %memberidx20, align 4
  store ptr %66, ptr %args, align 8
  %70 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%CallExpression, ptr null, i32 1) to i32))
  %71 = load ptr, ptr %member_exp, align 8
  %72 = load ptr, ptr %args, align 8
  %73 = load ptr, ptr %method_type, align 8
  %memberidx21 = getelementptr inbounds %FunctionType, ptr %73, i32 0, i32 2
  %74 = load ptr, ptr %memberidx21, align 8
  call void @CallExpression_constructor(ptr %70, ptr %71, ptr %72, ptr %74)
  ret ptr %70
}

define ptr @TypeChecker_check_object_index_expr(ptr %0, ptr %1, ptr %2) {
  %object = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index_expr_node = alloca ptr, align 8
  %owner_class = alloca ptr, align 8
  %prop_id = alloca ptr, align 8
  %arg_type = alloca ptr, align 8
  %member_expr = alloca ptr, align 8
  %index = alloca ptr, align 8
  %method_type = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %object, align 8
  store ptr %2, ptr %index_expr_node, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %4, i32 0, i32 0
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load ptr, ptr %object, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = call ptr @get_class_from_type(ptr %5, ptr %7)
  store ptr %8, ptr %owner_class, align 8
  %9 = load ptr, ptr %owner_class, align 8
  %memberidx2 = getelementptr inbounds %Class, ptr %9, i32 0, i32 6
  %10 = load ptr, ptr %memberidx2, align 8
  %11 = call ptr @string_from_bytes(ptr @371, i64 11)
  %12 = call ptr @Map_string_PropId____getitem__(ptr %10, ptr %11)
  store ptr %12, ptr %prop_id, align 8
  %13 = load ptr, ptr %prop_id, align 8
  %14 = icmp eq ptr %13, null
  br i1 %14, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %15 = load ptr, ptr %this, align 8
  %16 = load ptr, ptr %owner_class, align 8
  %memberidx3 = getelementptr inbounds %Class, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx3, align 8
  %18 = getelementptr inbounds %string, ptr %17, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  %memberidx4 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %19, i32 0, i32 5
  %20 = load ptr, ptr %memberidx4, align 8
  %21 = call ptr %20(ptr %17)
  %22 = alloca ptr, align 8
  %23 = call i64 (ptr, ptr, ...) @asprintf(ptr %22, ptr @487, ptr %21)
  %24 = load ptr, ptr %22, align 8
  %25 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %25, ptr %24, i64 %23)
  tail call void @free(ptr %21)
  %26 = load ptr, ptr %index_expr_node, align 8
  %memberidx5 = getelementptr inbounds %Node, ptr %26, i32 0, i32 0
  %27 = load ptr, ptr %memberidx5, align 8
  call void @TypeChecker_error(ptr %15, i64 4, ptr %25, ptr %27)
  ret ptr null

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %28 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %TypeChecker, ptr %28, i32 0, i32 0
  %29 = load ptr, ptr %memberidx6, align 8
  %30 = load ptr, ptr %prop_id, align 8
  %31 = call ptr @get_class_prop_type(ptr %29, ptr %30)
  store ptr %31, ptr %method_type, align 8
  %32 = load ptr, ptr %method_type, align 8
  %memberidx7 = getelementptr inbounds %FunctionType, ptr %32, i32 0, i32 1
  %33 = load ptr, ptr %memberidx7, align 8
  %34 = call ptr @Array_Type____getitem__(ptr %33, i64 0)
  store ptr %34, ptr %arg_type, align 8
  %35 = load ptr, ptr %this, align 8
  %36 = load ptr, ptr %arg_type, align 8
  %37 = load ptr, ptr %index_expr_node, align 8
  %memberidx8 = getelementptr inbounds %ExpressionIndexNode, ptr %37, i32 0, i32 4
  %38 = load ptr, ptr %memberidx8, align 8
  %39 = call ptr @TypeChecker_check_expression(ptr %35, ptr %36, ptr %38)
  store ptr %39, ptr %index, align 8
  %40 = load ptr, ptr %this, align 8
  %41 = call i1 @TypeChecker_has_errored(ptr %40)
  br i1 %41, label %if.entry9, label %else10

if.entry9:                                        ; preds = %ifend
  ret ptr null

else10:                                           ; preds = %ifend
  br label %ifend11

ifend11:                                          ; preds = %else10
  %42 = load ptr, ptr %this, align 8
  %43 = load ptr, ptr %arg_type, align 8
  %44 = load ptr, ptr %index, align 8
  %memberidx12 = getelementptr inbounds %Expression, ptr %44, i32 0, i32 3
  %45 = load ptr, ptr %memberidx12, align 8
  %46 = call i1 @TypeChecker_types_are_eq(ptr %42, ptr %43, ptr %45)
  %47 = xor i1 %46, true
  br i1 %47, label %if.entry13, label %else14

if.entry13:                                       ; preds = %ifend11
  %48 = load ptr, ptr %this, align 8
  %49 = load ptr, ptr %this, align 8
  %50 = load ptr, ptr %arg_type, align 8
  %51 = call ptr @TypeChecker_dump_type(ptr %49, ptr %50)
  %52 = getelementptr inbounds %string, ptr %51, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %memberidx16 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %53, i32 0, i32 5
  %54 = load ptr, ptr %memberidx16, align 8
  %55 = call ptr %54(ptr %51)
  %56 = load ptr, ptr %this, align 8
  %57 = load ptr, ptr %index, align 8
  %memberidx17 = getelementptr inbounds %Expression, ptr %57, i32 0, i32 3
  %58 = load ptr, ptr %memberidx17, align 8
  %59 = call ptr @TypeChecker_dump_type(ptr %56, ptr %58)
  %60 = getelementptr inbounds %string, ptr %59, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %memberidx18 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %61, i32 0, i32 5
  %62 = load ptr, ptr %memberidx18, align 8
  %63 = call ptr %62(ptr %59)
  %64 = alloca ptr, align 8
  %65 = call i64 (ptr, ptr, ...) @asprintf(ptr %64, ptr @438, ptr %55, ptr %63)
  %66 = load ptr, ptr %64, align 8
  %67 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %67, ptr %66, i64 %65)
  tail call void @free(ptr %55)
  tail call void @free(ptr %63)
  %68 = load ptr, ptr %index_expr_node, align 8
  %memberidx19 = getelementptr inbounds %ExpressionIndexNode, ptr %68, i32 0, i32 4
  %69 = load ptr, ptr %memberidx19, align 8
  %memberidx20 = getelementptr inbounds %Node, ptr %69, i32 0, i32 0
  %70 = load ptr, ptr %memberidx20, align 8
  call void @TypeChecker_error(ptr %48, i64 5, ptr %67, ptr %70)
  ret ptr null

else14:                                           ; preds = %ifend11
  br label %ifend15

ifend15:                                          ; preds = %else14
  %71 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MemberExpression, ptr null, i32 1) to i32))
  %72 = load ptr, ptr %object, align 8
  %73 = load ptr, ptr %prop_id, align 8
  %74 = load ptr, ptr %method_type, align 8
  call void @MemberExpression_constructor(ptr %71, ptr %72, ptr %73, ptr %74)
  store ptr %71, ptr %member_expr, align 8
  %75 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%CallExpression, ptr null, i32 1) to i32))
  %76 = load ptr, ptr %member_expr, align 8
  %77 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %77, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx21 = getelementptr inbounds %Array_Expression_, ptr %77, i32 0, i32 1
  %78 = load ptr, ptr %memberidx21, align 8
  %79 = load ptr, ptr %index, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr inbounds ptr, ptr %78, i64 1
  %memberidx22 = getelementptr inbounds %Array_Expression_, ptr %77, i32 0, i32 2
  store i64 1, ptr %memberidx22, align 4
  %81 = load ptr, ptr %method_type, align 8
  %memberidx23 = getelementptr inbounds %FunctionType, ptr %81, i32 0, i32 2
  %82 = load ptr, ptr %memberidx23, align 8
  call void @CallExpression_constructor(ptr %75, ptr %76, ptr %77, ptr %82)
  ret ptr %75
}

define ptr @TypeChecker_check_tuple_index_expr(ptr %0, ptr %1, ptr %2) {
  %this = alloca ptr, align 8
  %index_expr_node = alloca ptr, align 8
  %root_expression = alloca ptr, align 8
  %tuple_type = alloca ptr, align 8
  %inty = alloca ptr, align 8
  %value_type = alloca ptr, align 8
  %index_value = alloca i64, align 8
  %index = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %root_expression, align 8
  store ptr %2, ptr %index_expr_node, align 8
  %4 = alloca %IntType, align 8
  call void @IntType_constructor(ptr %4, i64 6, i1 false)
  store ptr %4, ptr %inty, align 8
  %5 = load ptr, ptr %this, align 8
  %6 = load ptr, ptr %inty, align 8
  %7 = load ptr, ptr %index_expr_node, align 8
  %memberidx = getelementptr inbounds %ExpressionIndexNode, ptr %7, i32 0, i32 4
  %8 = load ptr, ptr %memberidx, align 8
  %9 = call ptr @TypeChecker_check_expression(ptr %5, ptr %6, ptr %8)
  store ptr %9, ptr %index, align 8
  %10 = load ptr, ptr %index, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %10, i32 0, i32 3
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = call i1 @is_int(ptr %11)
  %13 = xor i1 %12, true
  br i1 %13, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %14 = load ptr, ptr %this, align 8
  %15 = call ptr @string_from_bytes(ptr @488, i64 34)
  %16 = load ptr, ptr %index_expr_node, align 8
  %memberidx2 = getelementptr inbounds %ExpressionIndexNode, ptr %16, i32 0, i32 4
  %17 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Node, ptr %17, i32 0, i32 0
  %18 = load ptr, ptr %memberidx3, align 8
  call void @TypeChecker_error(ptr %14, i64 5, ptr %15, ptr %18)
  ret ptr null

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %19 = load ptr, ptr %index, align 8
  %memberidx4 = getelementptr inbounds %Expression, ptr %19, i32 0, i32 3
  %20 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %IntType, ptr %20, i32 0, i32 1
  %21 = load i1, ptr %memberidx5, align 1
  br i1 %21, label %if.entry6, label %else7

if.entry6:                                        ; preds = %ifend
  %22 = load ptr, ptr %this, align 8
  %23 = load ptr, ptr %this, align 8
  %24 = load ptr, ptr %index, align 8
  %memberidx9 = getelementptr inbounds %Expression, ptr %24, i32 0, i32 3
  %25 = load ptr, ptr %memberidx9, align 8
  %26 = call ptr @TypeChecker_dump_type(ptr %23, ptr %25)
  %27 = getelementptr inbounds %string, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %memberidx10 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %28, i32 0, i32 5
  %29 = load ptr, ptr %memberidx10, align 8
  %30 = call ptr %29(ptr %26)
  %31 = alloca ptr, align 8
  %32 = call i64 (ptr, ptr, ...) @asprintf(ptr %31, ptr @489, ptr %30)
  %33 = load ptr, ptr %31, align 8
  %34 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %34, ptr %33, i64 %32)
  tail call void @free(ptr %30)
  %35 = load ptr, ptr %index_expr_node, align 8
  %memberidx11 = getelementptr inbounds %ExpressionIndexNode, ptr %35, i32 0, i32 4
  %36 = load ptr, ptr %memberidx11, align 8
  %memberidx12 = getelementptr inbounds %Node, ptr %36, i32 0, i32 0
  %37 = load ptr, ptr %memberidx12, align 8
  call void @TypeChecker_error(ptr %22, i64 5, ptr %34, ptr %37)
  ret ptr null

else7:                                            ; preds = %ifend
  br label %ifend8

ifend8:                                           ; preds = %else7
  %38 = load ptr, ptr %index, align 8
  %memberidx13 = getelementptr inbounds %Expression, ptr %38, i32 0, i32 1
  %39 = load i1, ptr %memberidx13, align 1
  %40 = xor i1 %39, true
  br i1 %40, label %if.entry14, label %else15

if.entry14:                                       ; preds = %ifend8
  %41 = load ptr, ptr %this, align 8
  %42 = call ptr @string_from_bytes(ptr @490, i64 40)
  %43 = load ptr, ptr %index_expr_node, align 8
  %memberidx17 = getelementptr inbounds %ExpressionIndexNode, ptr %43, i32 0, i32 4
  %44 = load ptr, ptr %memberidx17, align 8
  %memberidx18 = getelementptr inbounds %Node, ptr %44, i32 0, i32 0
  %45 = load ptr, ptr %memberidx18, align 8
  call void @TypeChecker_error(ptr %41, i64 5, ptr %42, ptr %45)
  ret ptr null

else15:                                           ; preds = %ifend8
  br label %ifend16

ifend16:                                          ; preds = %else15
  %46 = load ptr, ptr %this, align 8
  %memberidx19 = getelementptr inbounds %TypeChecker, ptr %46, i32 0, i32 0
  %47 = load ptr, ptr %memberidx19, align 8
  %48 = load ptr, ptr %index, align 8
  %49 = call i64 @evaluate_const_int_expression(ptr %47, ptr %48)
  store i64 %49, ptr %index_value, align 4
  %50 = load ptr, ptr %root_expression, align 8
  %memberidx20 = getelementptr inbounds %Expression, ptr %50, i32 0, i32 3
  %51 = load ptr, ptr %memberidx20, align 8
  store ptr %51, ptr %tuple_type, align 8
  %52 = load i64, ptr %index_value, align 4
  %53 = icmp slt i64 %52, 0
  %54 = load i64, ptr %index_value, align 4
  %55 = load ptr, ptr %tuple_type, align 8
  %memberidx21 = getelementptr inbounds %TupleType, ptr %55, i32 0, i32 1
  %56 = load ptr, ptr %memberidx21, align 8
  %memberidx22 = getelementptr inbounds %Array_Type_, ptr %56, i32 0, i32 2
  %57 = load i64, ptr %memberidx22, align 4
  %58 = icmp sge i64 %54, %57
  %59 = or i1 %53, %58
  br i1 %59, label %if.entry23, label %else24

if.entry23:                                       ; preds = %ifend16
  %60 = load ptr, ptr %this, align 8
  %61 = load ptr, ptr %this, align 8
  %62 = load ptr, ptr %tuple_type, align 8
  %63 = call ptr @TypeChecker_dump_type(ptr %61, ptr %62)
  %64 = getelementptr inbounds %string, ptr %63, i32 0, i32 0
  %65 = load ptr, ptr %64, align 8
  %memberidx26 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %65, i32 0, i32 5
  %66 = load ptr, ptr %memberidx26, align 8
  %67 = call ptr %66(ptr %63)
  %68 = alloca ptr, align 8
  %69 = call i64 (ptr, ptr, ...) @asprintf(ptr %68, ptr @491, ptr %67)
  %70 = load ptr, ptr %68, align 8
  %71 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %71, ptr %70, i64 %69)
  tail call void @free(ptr %67)
  %72 = load ptr, ptr %index_expr_node, align 8
  %memberidx27 = getelementptr inbounds %ExpressionIndexNode, ptr %72, i32 0, i32 4
  %73 = load ptr, ptr %memberidx27, align 8
  %memberidx28 = getelementptr inbounds %Node, ptr %73, i32 0, i32 0
  %74 = load ptr, ptr %memberidx28, align 8
  call void @TypeChecker_error(ptr %60, i64 5, ptr %71, ptr %74)
  ret ptr null

else24:                                           ; preds = %ifend16
  br label %ifend25

ifend25:                                          ; preds = %else24
  %75 = load ptr, ptr %tuple_type, align 8
  %memberidx29 = getelementptr inbounds %TupleType, ptr %75, i32 0, i32 1
  %76 = load ptr, ptr %memberidx29, align 8
  %77 = load i64, ptr %index_value, align 4
  %78 = call ptr @Array_Type____getitem__(ptr %76, i64 %77)
  store ptr %78, ptr %value_type, align 8
  %79 = load ptr, ptr %index, align 8
  tail call void @free(ptr %79)
  %80 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IndexExpression, ptr null, i32 1) to i32))
  %81 = load ptr, ptr %root_expression, align 8
  %82 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntExpression, ptr null, i32 1) to i32))
  %83 = load i64, ptr %index_value, align 4
  call void @IntExpression_constructor(ptr %82, i64 %83)
  %84 = load ptr, ptr %value_type, align 8
  call void @IndexExpression_constructor(ptr %80, ptr %81, ptr %82, ptr %84)
  ret ptr %80
}

define ptr @TypeChecker_check_index_expr(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %index_expr_node = alloca ptr, align 8
  %inty = alloca ptr, align 8
  %root_type = alloca ptr, align 8
  %value_type = alloca ptr, align 8
  %index = alloca ptr, align 8
  %root_expression = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %index_expr_node, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = call ptr @Type_unknown()
  %5 = load ptr, ptr %index_expr_node, align 8
  %memberidx = getelementptr inbounds %ExpressionIndexNode, ptr %5, i32 0, i32 3
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr @TypeChecker_check_expression(ptr %3, ptr %4, ptr %6)
  store ptr %7, ptr %root_expression, align 8
  %8 = load ptr, ptr %this, align 8
  %9 = call i1 @TypeChecker_has_errored(ptr %8)
  br i1 %9, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret ptr null

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %10 = load ptr, ptr %root_expression, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %10, i32 0, i32 3
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = call i1 @is_object(ptr %11)
  br i1 %12, label %if.entry2, label %else3

if.entry2:                                        ; preds = %ifend
  %13 = load ptr, ptr %this, align 8
  %14 = load ptr, ptr %root_expression, align 8
  %15 = load ptr, ptr %index_expr_node, align 8
  %16 = call ptr @TypeChecker_check_object_index_expr(ptr %13, ptr %14, ptr %15)
  ret ptr %16

else3:                                            ; preds = %ifend
  br label %ifend4

ifend4:                                           ; preds = %else3
  %17 = load ptr, ptr %root_expression, align 8
  %memberidx5 = getelementptr inbounds %Expression, ptr %17, i32 0, i32 3
  %18 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %Type, ptr %18, i32 0, i32 0
  %19 = load i64, ptr %memberidx6, align 4
  %20 = icmp eq i64 %19, 15
  br i1 %20, label %if.entry7, label %else8

if.entry7:                                        ; preds = %ifend4
  %21 = load ptr, ptr %this, align 8
  %22 = load ptr, ptr %root_expression, align 8
  %23 = load ptr, ptr %index_expr_node, align 8
  %24 = call ptr @TypeChecker_check_tuple_index_expr(ptr %21, ptr %22, ptr %23)
  ret ptr %24

else8:                                            ; preds = %ifend4
  br label %ifend9

ifend9:                                           ; preds = %else8
  %25 = alloca %IntType, align 8
  call void @IntType_constructor(ptr %25, i64 6, i1 false)
  store ptr %25, ptr %inty, align 8
  %26 = load ptr, ptr %this, align 8
  %27 = load ptr, ptr %inty, align 8
  %28 = load ptr, ptr %index_expr_node, align 8
  %memberidx10 = getelementptr inbounds %ExpressionIndexNode, ptr %28, i32 0, i32 4
  %29 = load ptr, ptr %memberidx10, align 8
  %30 = call ptr @TypeChecker_check_expression(ptr %26, ptr %27, ptr %29)
  store ptr %30, ptr %index, align 8
  %31 = load ptr, ptr %this, align 8
  %32 = call i1 @TypeChecker_has_errored(ptr %31)
  br i1 %32, label %if.entry11, label %else12

if.entry11:                                       ; preds = %ifend9
  ret ptr null

else12:                                           ; preds = %ifend9
  br label %ifend13

ifend13:                                          ; preds = %else12
  %33 = load ptr, ptr %index, align 8
  %memberidx14 = getelementptr inbounds %Expression, ptr %33, i32 0, i32 3
  %34 = load ptr, ptr %memberidx14, align 8
  %35 = call i1 @is_int(ptr %34)
  %36 = xor i1 %35, true
  br i1 %36, label %if.entry15, label %else16

if.entry15:                                       ; preds = %ifend13
  %37 = load ptr, ptr %this, align 8
  %38 = call ptr @string_from_bytes(ptr @488, i64 34)
  %39 = load ptr, ptr %index_expr_node, align 8
  %memberidx18 = getelementptr inbounds %ExpressionIndexNode, ptr %39, i32 0, i32 4
  %40 = load ptr, ptr %memberidx18, align 8
  %memberidx19 = getelementptr inbounds %Node, ptr %40, i32 0, i32 0
  %41 = load ptr, ptr %memberidx19, align 8
  call void @TypeChecker_error(ptr %37, i64 5, ptr %38, ptr %41)
  ret ptr null

else16:                                           ; preds = %ifend13
  br label %ifend17

ifend17:                                          ; preds = %else16
  %42 = call ptr @Type_unknown()
  store ptr %42, ptr %value_type, align 8
  %43 = load ptr, ptr %root_expression, align 8
  %memberidx20 = getelementptr inbounds %Expression, ptr %43, i32 0, i32 3
  %44 = load ptr, ptr %memberidx20, align 8
  store ptr %44, ptr %root_type, align 8
  %45 = load ptr, ptr %root_type, align 8
  %memberidx21 = getelementptr inbounds %Type, ptr %45, i32 0, i32 0
  %46 = load i64, ptr %memberidx21, align 4
  %47 = icmp eq i64 %46, 13
  br i1 %47, label %if.entry22, label %else23

if.entry22:                                       ; preds = %ifend17
  %48 = load ptr, ptr %root_type, align 8
  %memberidx25 = getelementptr inbounds %PointerType, ptr %48, i32 0, i32 1
  %49 = load ptr, ptr %memberidx25, align 8
  store ptr %49, ptr %value_type, align 8
  br label %ifend24

else23:                                           ; preds = %ifend17
  %50 = load ptr, ptr %root_type, align 8
  %memberidx26 = getelementptr inbounds %Type, ptr %50, i32 0, i32 0
  %51 = load i64, ptr %memberidx26, align 4
  %52 = icmp eq i64 %51, 14
  br i1 %52, label %if.entry27, label %else28

ifend24:                                          ; preds = %ifend29, %if.entry22
  %53 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IndexExpression, ptr null, i32 1) to i32))
  %54 = load ptr, ptr %root_expression, align 8
  %55 = load ptr, ptr %index, align 8
  %56 = load ptr, ptr %value_type, align 8
  call void @IndexExpression_constructor(ptr %53, ptr %54, ptr %55, ptr %56)
  ret ptr %53

if.entry27:                                       ; preds = %else23
  %57 = load ptr, ptr %root_type, align 8
  %memberidx30 = getelementptr inbounds %ArrayType, ptr %57, i32 0, i32 1
  %58 = load ptr, ptr %memberidx30, align 8
  store ptr %58, ptr %value_type, align 8
  br label %ifend29

else28:                                           ; preds = %else23
  %59 = load ptr, ptr %this, align 8
  %60 = load ptr, ptr %this, align 8
  %61 = load ptr, ptr %root_type, align 8
  %62 = call ptr @TypeChecker_dump_type(ptr %60, ptr %61)
  %63 = getelementptr inbounds %string, ptr %62, i32 0, i32 0
  %64 = load ptr, ptr %63, align 8
  %memberidx31 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %64, i32 0, i32 5
  %65 = load ptr, ptr %memberidx31, align 8
  %66 = call ptr %65(ptr %62)
  %67 = alloca ptr, align 8
  %68 = call i64 (ptr, ptr, ...) @asprintf(ptr %67, ptr @492, ptr %66)
  %69 = load ptr, ptr %67, align 8
  %70 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %70, ptr %69, i64 %68)
  tail call void @free(ptr %66)
  %71 = load ptr, ptr %index_expr_node, align 8
  %memberidx32 = getelementptr inbounds %Node, ptr %71, i32 0, i32 0
  %72 = load ptr, ptr %memberidx32, align 8
  call void @TypeChecker_error(ptr %59, i64 5, ptr %70, ptr %72)
  ret ptr null

ifend29:                                          ; preds = %if.entry27
  br label %ifend24
}

define ptr @TypeChecker_check_block(ptr %0, ptr %1, ptr %2, i1 %3) {
  %block_scope = alloca ptr, align 8
  %this = alloca ptr, align 8
  %yields = alloca i1, align 1
  %block_node = alloca ptr, align 8
  %block = alloca ptr, align 8
  %stmt = alloca ptr, align 8
  %stmt_node = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %if_stmt = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %block_node, align 8
  store ptr %2, ptr %block_scope, align 8
  store i1 %3, ptr %yields, align 1
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Block, ptr null, i32 1) to i32))
  call void @Block_constructor(ptr %5)
  store ptr %5, ptr %block, align 8
  %6 = load ptr, ptr %block_scope, align 8
  %7 = icmp ne ptr %6, null
  br i1 %7, label %true_block, label %false_block

true_block:                                       ; preds = %4
  %8 = load ptr, ptr %block_scope, align 8
  br label %end

false_block:                                      ; preds = %4
  %9 = load ptr, ptr %this, align 8
  %10 = call ptr @TypeChecker_create_child_scope_within_current_scope(ptr %9)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %8, %true_block ], [ %10, %false_block ]
  store ptr %ternary, ptr %block_scope, align 8
  %11 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %11, i32 0, i32 4
  %12 = load ptr, ptr %block_scope, align 8
  %memberidx1 = getelementptr inbounds %Scope, ptr %12, i32 0, i32 0
  %13 = load ptr, ptr %memberidx1, align 8
  store ptr %13, ptr %memberidx, align 8
  store ptr null, ptr %stmt, align 8
  br label %for.entry

for.entry:                                        ; preds = %end
  %14 = load ptr, ptr %block_node, align 8
  %memberidx2 = getelementptr inbounds %BlockNode, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx2, align 8
  %16 = call ptr @Array_StatementNode____iter__(ptr %15)
  store ptr %16, ptr %tmp_it, align 8
  %17 = load ptr, ptr %tmp_it, align 8
  %18 = call ptr @ArrayIterator_StatementNode__next(ptr %17)
  store ptr %18, ptr %stmt_node, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %19 = load ptr, ptr %tmp_it, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_StatementNode_, ptr %19, i32 0, i32 0
  %20 = load i1, ptr %memberidx3, align 1
  %21 = xor i1 %20, true
  br i1 %21, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %22 = load ptr, ptr %this, align 8
  %23 = load ptr, ptr %stmt_node, align 8
  %24 = call ptr @TypeChecker_check_statement(ptr %22, ptr %23)
  store ptr %24, ptr %stmt, align 8
  %25 = load ptr, ptr %this, align 8
  %26 = call i1 @TypeChecker_has_errored(ptr %25)
  br i1 %26, label %if.entry, label %else

for.incr:                                         ; preds = %ifend34
  %27 = load ptr, ptr %tmp_it, align 8
  %28 = call ptr @ArrayIterator_StatementNode__next(ptr %27)
  store ptr %28, ptr %stmt_node, align 8
  br label %for.cond

for.end:                                          ; preds = %if.entry32, %if.entry27, %if.entry22, %if.entry6, %for.cond
  %29 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %29)
  %30 = load ptr, ptr %stmt, align 8
  %31 = icmp ne ptr %30, null
  br i1 %31, label %if.entry36, label %else37

if.entry:                                         ; preds = %for.body
  ret ptr null

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  %32 = load ptr, ptr %block, align 8
  %memberidx4 = getelementptr inbounds %Block, ptr %32, i32 0, i32 0
  %33 = load ptr, ptr %memberidx4, align 8
  %34 = load ptr, ptr %stmt, align 8
  call void @Array_Statement____sl__(ptr %33, ptr %34)
  %35 = load ptr, ptr %stmt, align 8
  %memberidx5 = getelementptr inbounds %Statement, ptr %35, i32 0, i32 0
  %36 = load i64, ptr %memberidx5, align 4
  %37 = icmp eq i64 %36, 7
  br i1 %37, label %if.entry6, label %else7

if.entry6:                                        ; preds = %ifend
  %38 = load ptr, ptr %block, align 8
  %memberidx9 = getelementptr inbounds %Block, ptr %38, i32 0, i32 1
  store i1 true, ptr %memberidx9, align 1
  br label %for.end

else7:                                            ; preds = %ifend
  br label %ifend8

ifend8:                                           ; preds = %else7
  %39 = load ptr, ptr %stmt, align 8
  %memberidx10 = getelementptr inbounds %Statement, ptr %39, i32 0, i32 0
  %40 = load i64, ptr %memberidx10, align 4
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %if.entry11, label %else12

if.entry11:                                       ; preds = %ifend8
  %42 = load ptr, ptr %stmt, align 8
  store ptr %42, ptr %if_stmt, align 8
  %43 = load ptr, ptr %if_stmt, align 8
  %memberidx14 = getelementptr inbounds %IfStatement, ptr %43, i32 0, i32 3
  %44 = load ptr, ptr %memberidx14, align 8
  %45 = icmp ne ptr %44, null
  br i1 %45, label %if.entry15, label %else16

else12:                                           ; preds = %ifend8
  br label %ifend13

ifend13:                                          ; preds = %else12, %ifend17
  %46 = load ptr, ptr %stmt, align 8
  %memberidx26 = getelementptr inbounds %Statement, ptr %46, i32 0, i32 0
  %47 = load i64, ptr %memberidx26, align 4
  %48 = icmp eq i64 %47, 5
  br i1 %48, label %if.entry27, label %else28

if.entry15:                                       ; preds = %if.entry11
  %49 = load ptr, ptr %if_stmt, align 8
  %memberidx18 = getelementptr inbounds %IfStatement, ptr %49, i32 0, i32 2
  %50 = load ptr, ptr %memberidx18, align 8
  %memberidx19 = getelementptr inbounds %Block, ptr %50, i32 0, i32 1
  %51 = load i1, ptr %memberidx19, align 1
  %52 = load ptr, ptr %if_stmt, align 8
  %memberidx20 = getelementptr inbounds %IfStatement, ptr %52, i32 0, i32 3
  %53 = load ptr, ptr %memberidx20, align 8
  %memberidx21 = getelementptr inbounds %Block, ptr %53, i32 0, i32 1
  %54 = load i1, ptr %memberidx21, align 1
  %55 = and i1 %51, %54
  br i1 %55, label %if.entry22, label %else23

else16:                                           ; preds = %if.entry11
  br label %ifend17

ifend17:                                          ; preds = %else16, %ifend24
  br label %ifend13

if.entry22:                                       ; preds = %if.entry15
  %56 = load ptr, ptr %block, align 8
  %memberidx25 = getelementptr inbounds %Block, ptr %56, i32 0, i32 1
  store i1 true, ptr %memberidx25, align 1
  br label %for.end

else23:                                           ; preds = %if.entry15
  br label %ifend24

ifend24:                                          ; preds = %else23
  br label %ifend17

if.entry27:                                       ; preds = %ifend13
  %57 = load ptr, ptr %block, align 8
  %memberidx30 = getelementptr inbounds %Block, ptr %57, i32 0, i32 2
  store i1 true, ptr %memberidx30, align 1
  br label %for.end

else28:                                           ; preds = %ifend13
  br label %ifend29

ifend29:                                          ; preds = %else28
  %58 = load ptr, ptr %stmt, align 8
  %memberidx31 = getelementptr inbounds %Statement, ptr %58, i32 0, i32 0
  %59 = load i64, ptr %memberidx31, align 4
  %60 = icmp eq i64 %59, 6
  br i1 %60, label %if.entry32, label %else33

if.entry32:                                       ; preds = %ifend29
  %61 = load ptr, ptr %block, align 8
  %memberidx35 = getelementptr inbounds %Block, ptr %61, i32 0, i32 3
  store i1 true, ptr %memberidx35, align 1
  br label %for.end

else33:                                           ; preds = %ifend29
  br label %ifend34

ifend34:                                          ; preds = %else33
  br label %for.incr

if.entry36:                                       ; preds = %for.end
  %62 = load i1, ptr %yields, align 1
  %63 = load ptr, ptr %stmt, align 8
  %memberidx39 = getelementptr inbounds %Statement, ptr %63, i32 0, i32 0
  %64 = load i64, ptr %memberidx39, align 4
  %65 = icmp eq i64 %64, 8
  %66 = and i1 %62, %65
  br i1 %66, label %if.entry40, label %else41

else37:                                           ; preds = %for.end
  br label %ifend38

ifend38:                                          ; preds = %else37, %ifend42
  %67 = load ptr, ptr %this, align 8
  %memberidx46 = getelementptr inbounds %TypeChecker, ptr %67, i32 0, i32 4
  %68 = load ptr, ptr %block_scope, align 8
  %memberidx47 = getelementptr inbounds %Scope, ptr %68, i32 0, i32 5
  %69 = load ptr, ptr %memberidx47, align 8
  store ptr %69, ptr %memberidx46, align 8
  %70 = load ptr, ptr %block, align 8
  ret ptr %70

if.entry40:                                       ; preds = %if.entry36
  %71 = load ptr, ptr %block, align 8
  %memberidx43 = getelementptr inbounds %Block, ptr %71, i32 0, i32 4
  %72 = load ptr, ptr %stmt, align 8
  store ptr %72, ptr %memberidx43, align 8
  %73 = load ptr, ptr %block, align 8
  %memberidx44 = getelementptr inbounds %Block, ptr %73, i32 0, i32 0
  %74 = load ptr, ptr %memberidx44, align 8
  %75 = getelementptr inbounds %Array_Statement_, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %memberidx45 = getelementptr inbounds { ptr, ptr, ptr }, ptr %76, i32 0, i32 0
  %77 = load ptr, ptr %memberidx45, align 8
  %78 = call ptr %77(ptr %74)
  br label %ifend42

else41:                                           ; preds = %if.entry36
  br label %ifend42

ifend42:                                          ; preds = %else41, %if.entry40
  br label %ifend38
}

define i1 @TypeChecker_has_errored(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %2, i32 0, i32 5
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Compiler, ptr %3, i32 0, i32 6
  %4 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_FloError_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx2, align 4
  %6 = icmp sgt i64 %5, 0
  ret i1 %6
}

define ptr @TypeChecker_check_can_continue(ptr %0, ptr %1) {
  %stmt_node = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %stmt_node, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %3, i32 0, i32 6
  %4 = load i1, ptr %memberidx, align 1
  %5 = xor i1 %4, true
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %this, align 8
  %7 = call ptr @string_from_bytes(ptr @519, i64 32)
  %8 = load ptr, ptr %stmt_node, align 8
  %memberidx1 = getelementptr inbounds %Node, ptr %8, i32 0, i32 0
  %9 = load ptr, ptr %memberidx1, align 8
  call void @TypeChecker_error(ptr %6, i64 4, ptr %7, ptr %9)
  ret ptr null

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Statement, ptr null, i32 1) to i32))
  call void @Statement_constructor(ptr %10, i64 5)
  ret ptr %10
}

define void @Map_string_Generic__resize(ptr %0) {
  %this = alloca ptr, align 8
  %old_entries = alloca ptr, align 8
  %old_size = alloca i64, align 8
  %i = alloca i64, align 8
  %i1 = alloca i64, align 8
  %entry = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_Generic_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = alloca ptr, i64 %3, align 8
  store ptr %4, ptr %old_entries, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_Generic_, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx2, align 4
  store i64 %6, ptr %old_size, align 4
  %7 = load ptr, ptr %old_entries, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_Generic_, ptr %8, i32 0, i32 0
  %9 = load ptr, ptr %memberidx3, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_Generic_, ptr %10, i32 0, i32 1
  %11 = load i64, ptr %memberidx4, align 4
  %12 = mul i64 %11, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %9, i64 %12, i1 false)
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Map_string_Generic_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Map_string_Generic_, ptr %14, i32 0, i32 1
  %15 = load i64, ptr %memberidx6, align 4
  %16 = mul nuw i64 %15, 2
  store i64 %16, ptr %memberidx5, align 4
  %17 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Map_string_Generic_, ptr %17, i32 0, i32 2
  store i64 0, ptr %memberidx7, align 4
  %18 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Map_string_Generic_, ptr %18, i32 0, i32 0
  %19 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Map_string_Generic_, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx9, align 8
  %21 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_Generic_, ptr %21, i32 0, i32 1
  %22 = load i64, ptr %memberidx10, align 4
  %23 = mul i64 %22, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %24 = call ptr @realloc(ptr %20, i64 %23)
  store ptr %24, ptr %memberidx8, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %25 = load i64, ptr %i, align 4
  %26 = load ptr, ptr %this, align 8
  %memberidx11 = getelementptr inbounds %Map_string_Generic_, ptr %26, i32 0, i32 1
  %27 = load i64, ptr %memberidx11, align 4
  %28 = icmp slt i64 %25, %27
  br i1 %28, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load i64, ptr %i, align 4
  %30 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %Map_string_Generic_, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx12, align 8
  %32 = getelementptr inbounds ptr, ptr %31, i64 %29
  store ptr null, ptr %32, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %33 = load i64, ptr %i, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.entry13

for.entry13:                                      ; preds = %for.end
  store i64 0, ptr %i1, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.incr16, %for.entry13
  %35 = load i64, ptr %i1, align 4
  %36 = load i64, ptr %old_size, align 4
  %37 = icmp slt i64 %35, %36
  br i1 %37, label %for.body15, label %for.end17

for.body15:                                       ; preds = %for.cond14
  %38 = load i64, ptr %i1, align 4
  %39 = load ptr, ptr %old_entries, align 8
  %40 = getelementptr inbounds ptr, ptr %39, i64 %38
  %41 = load ptr, ptr %40, align 8
  store ptr %41, ptr %entry, align 8
  %42 = load ptr, ptr %entry, align 8
  %43 = icmp ne ptr %42, null
  br i1 %43, label %if.entry, label %else

for.incr16:                                       ; preds = %ifend
  %44 = load i64, ptr %i1, align 4
  %45 = add nsw i64 %44, 1
  store i64 %45, ptr %i1, align 4
  br label %for.cond14

for.end17:                                        ; preds = %for.cond14
  ret void

if.entry:                                         ; preds = %for.body15
  %46 = load ptr, ptr %this, align 8
  %47 = load ptr, ptr %entry, align 8
  %memberidx18 = getelementptr inbounds %MapEntry_string_Generic_, ptr %47, i32 0, i32 0
  %48 = load ptr, ptr %memberidx18, align 8
  %49 = load ptr, ptr %entry, align 8
  %memberidx19 = getelementptr inbounds %MapEntry_string_Generic_, ptr %49, i32 0, i32 1
  %50 = load ptr, ptr %memberidx19, align 8
  call void @Map_string_Generic____setitem__(ptr %46, ptr %48, ptr %50)
  br label %ifend

else:                                             ; preds = %for.body15
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  br label %for.incr16
}

define void @Generic_constructor(ptr %0, i64 %1, ptr %2) {
  %template = alloca ptr, align 8
  %this = alloca ptr, align 8
  %module_id = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %module_id, align 4
  store ptr %2, ptr %template, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Generic, ptr %4, i32 0, i32 0
  %5 = load i64, ptr %module_id, align 4
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Generic, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %template, align 8
  store ptr %7, ptr %memberidx1, align 8
  ret void
}

define void @MapEntry_string_Generic__constructor(ptr %0, ptr %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  store ptr %2, ptr %value, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapEntry_string_Generic_, ptr %4, i32 0, i32 0
  %5 = load ptr, ptr %key, align 8
  store ptr %5, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapEntry_string_Generic_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %value, align 8
  store ptr %7, ptr %memberidx1, align 8
  ret void
}

define ptr @MapIterator_string_Generic__next(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapIterator_string_Generic_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapIterator_string_Generic_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = icmp sgt i64 %3, 0
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %1
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %MapIterator_string_Generic_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %MapIterator_string_Generic_, ptr %9, i32 0, i32 1
  %incdec.ptr = getelementptr inbounds ptr, ptr %8, i32 1
  store ptr %incdec.ptr, ptr %memberidx3, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %MapIterator_string_Generic_, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx4, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 -1
  %13 = load ptr, ptr %12, align 8
  %14 = icmp ne ptr %13, null
  br i1 %14, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %if.entry, %1
  %15 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %MapIterator_string_Generic_, ptr %15, i32 0, i32 0
  %16 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %MapIterator_string_Generic_, ptr %16, i32 0, i32 3
  %17 = load i64, ptr %memberidx8, align 4
  %18 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %MapIterator_string_Generic_, ptr %18, i32 0, i32 3
  %19 = add nsw i64 %17, -1
  store i64 %19, ptr %memberidx9, align 4
  %20 = icmp sle i64 %17, 0
  store i1 %20, ptr %memberidx7, align 1
  %21 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %MapIterator_string_Generic_, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx10, align 8
  %23 = getelementptr inbounds ptr, ptr %22, i64 -1
  %24 = load ptr, ptr %23, align 8
  ret ptr %24

if.entry:                                         ; preds = %while.entry
  br label %while.end

else:                                             ; preds = %while.entry
  br label %ifend

ifend:                                            ; preds = %else
  %25 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %MapIterator_string_Generic_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx5, align 4
  %27 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %MapIterator_string_Generic_, ptr %27, i32 0, i32 2
  %28 = add nsw i64 %26, -1
  store i64 %28, ptr %memberidx6, align 4
  %29 = icmp sgt i64 %26, 0
  br i1 %29, label %while.entry, label %while.end
}

define void @MapIterator_string_Generic__constructor(ptr %0, ptr %1, i64 %2, i64 %3) {
  %remaining_size = alloca i64, align 8
  %this = alloca ptr, align 8
  %entries = alloca ptr, align 8
  %items_remaining = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %entries, align 8
  store i64 %2, ptr %remaining_size, align 4
  store i64 %3, ptr %items_remaining, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapIterator_string_Generic_, ptr %5, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapIterator_string_Generic_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %entries, align 8
  store ptr %7, ptr %memberidx1, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %MapIterator_string_Generic_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %remaining_size, align 4
  store i64 %9, ptr %memberidx2, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %MapIterator_string_Generic_, ptr %10, i32 0, i32 3
  %11 = load i64, ptr %items_remaining, align 4
  store i64 %11, ptr %memberidx3, align 4
  ret void
}

define ptr @Map_string_Generic____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MapIterator_string_Generic_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_Generic_, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_Generic_, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_Generic_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx2, align 4
  call void @MapIterator_string_Generic__constructor(ptr %2, ptr %4, i64 %6, i64 %8)
  ret ptr %2
}

define void @Map_string_Generic____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_Generic_, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Map_string_Generic____setitem__(ptr %0, ptr %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  %should_add = alloca i1, align 1
  %ratio = alloca double, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  store ptr %2, ptr %value, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_Generic_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = sitofp i64 %5 to double
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_Generic_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %memberidx1, align 4
  %9 = sitofp i64 %8 to double
  %10 = fdiv double %6, %9
  store double %10, ptr %ratio, align 8
  %11 = load double, ptr %ratio, align 8
  %12 = fcmp ogt double %11, 7.500000e-01
  br i1 %12, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %13 = load ptr, ptr %this, align 8
  call void @Map_string_Generic__resize(ptr %13)
  br label %ifend

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %14 = load ptr, ptr %this, align 8
  %15 = load ptr, ptr %key, align 8
  %16 = call i64 @Map_string_Generic__hash_fnc(ptr %14, ptr %15)
  %17 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_Generic_, ptr %17, i32 0, i32 1
  %18 = load i64, ptr %memberidx2, align 4
  %19 = urem i64 %16, %18
  store i64 %19, ptr %hash, align 4
  store i1 true, ptr %should_add, align 1
  %20 = load i64, ptr %hash, align 4
  %21 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_Generic_, ptr %21, i32 0, i32 0
  %22 = load ptr, ptr %memberidx3, align 8
  %23 = getelementptr inbounds ptr, ptr %22, i64 %20
  %24 = load ptr, ptr %23, align 8
  %25 = icmp ne ptr %24, null
  br i1 %25, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend8, %ifend
  %26 = load i64, ptr %hash, align 4
  %27 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_Generic_, ptr %27, i32 0, i32 0
  %28 = load ptr, ptr %memberidx4, align 8
  %29 = getelementptr inbounds ptr, ptr %28, i64 %26
  %30 = load ptr, ptr %29, align 8
  %memberidx5 = getelementptr inbounds %MapEntry_string_Generic_, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx5, align 8
  %32 = load ptr, ptr %key, align 8
  %33 = call i1 @string___eq__(ptr %31, ptr %32)
  br i1 %33, label %if.entry6, label %else7

while.end:                                        ; preds = %ifend8, %if.entry6, %ifend
  %34 = load i1, ptr %should_add, align 1
  br i1 %34, label %if.entry11, label %else12

if.entry6:                                        ; preds = %while.entry
  store i1 false, ptr %should_add, align 1
  br label %while.end

else7:                                            ; preds = %while.entry
  br label %ifend8

ifend8:                                           ; preds = %else7
  %35 = load i64, ptr %hash, align 4
  %36 = add nuw i64 %35, 1
  %37 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Map_string_Generic_, ptr %37, i32 0, i32 1
  %38 = load i64, ptr %memberidx9, align 4
  %39 = urem i64 %36, %38
  store i64 %39, ptr %hash, align 4
  %40 = load i64, ptr %hash, align 4
  %41 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_Generic_, ptr %41, i32 0, i32 0
  %42 = load ptr, ptr %memberidx10, align 8
  %43 = getelementptr inbounds ptr, ptr %42, i64 %40
  %44 = load ptr, ptr %43, align 8
  %45 = icmp ne ptr %44, null
  br i1 %45, label %while.entry, label %while.end

if.entry11:                                       ; preds = %while.end
  %46 = load ptr, ptr %this, align 8
  %memberidx14 = getelementptr inbounds %Map_string_Generic_, ptr %46, i32 0, i32 2
  %47 = load i64, ptr %memberidx14, align 4
  %48 = load ptr, ptr %this, align 8
  %memberidx15 = getelementptr inbounds %Map_string_Generic_, ptr %48, i32 0, i32 2
  %49 = add nsw i64 %47, 1
  store i64 %49, ptr %memberidx15, align 4
  br label %ifend13

else12:                                           ; preds = %while.end
  br label %ifend13

ifend13:                                          ; preds = %else12, %if.entry11
  %50 = load i64, ptr %hash, align 4
  %51 = load ptr, ptr %this, align 8
  %memberidx16 = getelementptr inbounds %Map_string_Generic_, ptr %51, i32 0, i32 0
  %52 = load ptr, ptr %memberidx16, align 8
  %53 = getelementptr inbounds ptr, ptr %52, i64 %50
  %54 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MapEntry_string_Generic_, ptr null, i32 1) to i32))
  %55 = load ptr, ptr %key, align 8
  %56 = load ptr, ptr %value, align 8
  call void @MapEntry_string_Generic__constructor(ptr %54, ptr %55, ptr %56)
  store ptr %54, ptr %53, align 8
  ret void
}

define ptr @Map_string_Generic____getitem__(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %key, align 8
  %5 = call i64 @Map_string_Generic__hash_fnc(ptr %3, ptr %4)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_Generic_, ptr %6, i32 0, i32 1
  %7 = load i64, ptr %memberidx, align 4
  %8 = urem i64 %5, %7
  store i64 %8, ptr %hash, align 4
  %9 = load i64, ptr %hash, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_Generic_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 %9
  %13 = load ptr, ptr %12, align 8
  %14 = icmp ne ptr %13, null
  br i1 %14, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %2
  %15 = load i64, ptr %hash, align 4
  %16 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_Generic_, ptr %16, i32 0, i32 0
  %17 = load ptr, ptr %memberidx2, align 8
  %18 = getelementptr inbounds ptr, ptr %17, i64 %15
  %19 = load ptr, ptr %18, align 8
  %memberidx3 = getelementptr inbounds %MapEntry_string_Generic_, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx3, align 8
  %21 = load ptr, ptr %key, align 8
  %22 = call i1 @string___eq__(ptr %20, ptr %21)
  br i1 %22, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %if.entry, %2
  %23 = load i64, ptr %hash, align 4
  %24 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Map_string_Generic_, ptr %24, i32 0, i32 0
  %25 = load ptr, ptr %memberidx6, align 8
  %26 = getelementptr inbounds ptr, ptr %25, i64 %23
  %27 = load ptr, ptr %26, align 8
  %28 = icmp ne ptr %27, null
  br i1 %28, label %if.entry7, label %else8

if.entry:                                         ; preds = %while.entry
  br label %while.end

else:                                             ; preds = %while.entry
  %29 = load i64, ptr %hash, align 4
  %30 = add nuw i64 %29, 1
  %31 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_Generic_, ptr %31, i32 0, i32 1
  %32 = load i64, ptr %memberidx4, align 4
  %33 = urem i64 %30, %32
  store i64 %33, ptr %hash, align 4
  br label %ifend

ifend:                                            ; preds = %else
  %34 = load i64, ptr %hash, align 4
  %35 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Map_string_Generic_, ptr %35, i32 0, i32 0
  %36 = load ptr, ptr %memberidx5, align 8
  %37 = getelementptr inbounds ptr, ptr %36, i64 %34
  %38 = load ptr, ptr %37, align 8
  %39 = icmp ne ptr %38, null
  br i1 %39, label %while.entry, label %while.end

if.entry7:                                        ; preds = %while.end
  %40 = load i64, ptr %hash, align 4
  %41 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_Generic_, ptr %41, i32 0, i32 0
  %42 = load ptr, ptr %memberidx10, align 8
  %43 = getelementptr inbounds ptr, ptr %42, i64 %40
  %44 = load ptr, ptr %43, align 8
  %memberidx11 = getelementptr inbounds %MapEntry_string_Generic_, ptr %44, i32 0, i32 1
  %45 = load ptr, ptr %memberidx11, align 8
  ret ptr %45

else8:                                            ; preds = %while.end
  br label %ifend9

ifend9:                                           ; preds = %else8
  ret ptr null
}

define i64 @Map_string_Generic__hash_fnc(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  %str = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  %3 = load ptr, ptr %key, align 8
  %4 = getelementptr inbounds %string, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr %6(ptr %3)
  %8 = alloca ptr, align 8
  %9 = call i64 (ptr, ptr, ...) @asprintf(ptr %8, ptr @58, ptr %7)
  %10 = load ptr, ptr %8, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %11, ptr %10, i64 %9)
  tail call void @free(ptr %7)
  store ptr %11, ptr %str, align 8
  store i64 0, ptr %hash, align 4
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %12 = load i64, ptr %i, align 4
  %13 = load ptr, ptr %str, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx1, align 4
  %15 = icmp slt i64 %12, %14
  br i1 %15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i64, ptr %hash, align 4
  %17 = shl i64 %16, 1
  %18 = load ptr, ptr %str, align 8
  %19 = getelementptr inbounds %string, ptr %18, i32 0, i32 0
  %20 = load ptr, ptr %19, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %20, i32 0, i32 2
  %21 = load ptr, ptr %memberidx2, align 8
  %22 = load i64, ptr %i, align 4
  %23 = call i8 %21(ptr %18, i64 %22)
  %24 = zext i8 %23 to i64
  %25 = add nuw i64 %17, %24
  store i64 %25, ptr %hash, align 4
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %26 = load i64, ptr %i, align 4
  %27 = add nsw i64 %26, 1
  store i64 %27, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load ptr, ptr %str, align 8
  call void @string___del__(ptr %28)
  tail call void @free(ptr %28)
  %29 = load i64, ptr %hash, align 4
  ret i64 %29
}

define void @Map_string_Generic__constructor(ptr %0) {
  %this = alloca ptr, align 8
  %initial_capacity = alloca i64, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 256, ptr %initial_capacity, align 4
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_Generic_, ptr %2, i32 0, i32 0
  %3 = load i64, ptr %initial_capacity, align 4
  %4 = trunc i64 %3 to i32
  %mallocsize = mul i32 %4, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %5 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %5, ptr %memberidx, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %initial_capacity, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i64, ptr %i, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_Generic_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 %9
  store ptr null, ptr %12, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %13 = load i64, ptr %i, align 4
  %14 = add nsw i64 %13, 1
  store i64 %14, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_Generic_, ptr %15, i32 0, i32 1
  %16 = load i64, ptr %initial_capacity, align 4
  store i64 %16, ptr %memberidx2, align 4
  %17 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_Generic_, ptr %17, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  ret void
}

define void @TypeChecker_check_class_body(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %class_node = alloca ptr, align 8
  %outer_class = alloca ptr, align 8
  %resolved_type = alloca ptr, align 8
  %class_name = alloca ptr, align 8
  %declared_class = alloca ptr, align 8
  %prop_entry = alloca ptr, align 8
  %prop_id = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %prop_name = alloca ptr, align 8
  %prop_method = alloca ptr, align 8
  %prev_method = alloca ptr, align 8
  %i = alloca i64, align 8
  %method = alloca ptr, align 8
  %method_node = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %class_node, align 8
  %3 = load ptr, ptr %class_node, align 8
  %memberidx = getelementptr inbounds %ClassDeclarationNode, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx1, align 8
  store ptr %5, ptr %class_name, align 8
  %6 = load ptr, ptr %this, align 8
  %7 = load ptr, ptr %class_name, align 8
  %8 = call ptr @TypeChecker_get_type_from_current_scope(ptr %6, ptr %7)
  store ptr %8, ptr %resolved_type, align 8
  %9 = load ptr, ptr %resolved_type, align 8
  %memberidx2 = getelementptr inbounds %Type, ptr %9, i32 0, i32 0
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp eq i64 %10, 21
  br i1 %11, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret void

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %TypeChecker, ptr %12, i32 0, i32 0
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %resolved_type, align 8
  %15 = call ptr @get_class_from_type(ptr %13, ptr %14)
  store ptr %15, ptr %declared_class, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %TypeChecker, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx4, align 8
  store ptr %17, ptr %outer_class, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %TypeChecker, ptr %18, i32 0, i32 1
  %19 = load ptr, ptr %declared_class, align 8
  %memberidx6 = getelementptr inbounds %Class, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx6, align 8
  store ptr %20, ptr %memberidx5, align 8
  %21 = load ptr, ptr %declared_class, align 8
  %memberidx7 = getelementptr inbounds %Class, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %memberidx7, align 8
  %23 = icmp ne ptr %22, null
  br i1 %23, label %if.entry8, label %else9

if.entry8:                                        ; preds = %ifend
  %24 = load ptr, ptr %this, align 8
  %25 = load ptr, ptr %declared_class, align 8
  %26 = load ptr, ptr %class_node, align 8
  call void @TypeChecker_add_inherited_props_to_class(ptr %24, ptr %25, ptr %26)
  br label %ifend10

else9:                                            ; preds = %ifend
  br label %ifend10

ifend10:                                          ; preds = %else9, %if.entry8
  %27 = load ptr, ptr %this, align 8
  %28 = load ptr, ptr %declared_class, align 8
  %29 = load ptr, ptr %class_node, align 8
  call void @TypeChecker_declare_class_fields(ptr %27, ptr %28, ptr %29)
  %30 = load ptr, ptr %this, align 8
  %31 = call i1 @TypeChecker_has_errored(ptr %30)
  br i1 %31, label %if.entry11, label %else12

if.entry11:                                       ; preds = %ifend10
  ret void

else12:                                           ; preds = %ifend10
  br label %ifend13

ifend13:                                          ; preds = %else12
  %32 = load ptr, ptr %this, align 8
  %33 = load ptr, ptr %declared_class, align 8
  %34 = load ptr, ptr %class_node, align 8
  call void @TypeChecker_declare_class_methods(ptr %32, ptr %33, ptr %34)
  %35 = load ptr, ptr %this, align 8
  %36 = call i1 @TypeChecker_has_errored(ptr %35)
  br i1 %36, label %if.entry14, label %else15

if.entry14:                                       ; preds = %ifend13
  ret void

else15:                                           ; preds = %ifend13
  br label %ifend16

ifend16:                                          ; preds = %else15
  br label %for.entry

for.entry:                                        ; preds = %ifend16
  %37 = load ptr, ptr %declared_class, align 8
  %memberidx17 = getelementptr inbounds %Class, ptr %37, i32 0, i32 6
  %38 = load ptr, ptr %memberidx17, align 8
  %39 = call ptr @Map_string_PropId____iter__(ptr %38)
  store ptr %39, ptr %tmp_it, align 8
  %40 = load ptr, ptr %tmp_it, align 8
  %41 = call ptr @MapIterator_string_PropId__next(ptr %40)
  store ptr %41, ptr %prop_entry, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %42 = load ptr, ptr %tmp_it, align 8
  %memberidx18 = getelementptr inbounds %MapIterator_string_PropId_, ptr %42, i32 0, i32 0
  %43 = load i1, ptr %memberidx18, align 1
  %44 = xor i1 %43, true
  br i1 %44, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %45 = load ptr, ptr %prop_entry, align 8
  %memberidx19 = getelementptr inbounds %MapEntry_string_PropId_, ptr %45, i32 0, i32 1
  %46 = load ptr, ptr %memberidx19, align 8
  store ptr %46, ptr %prop_id, align 8
  %47 = load ptr, ptr %prop_entry, align 8
  %memberidx20 = getelementptr inbounds %MapEntry_string_PropId_, ptr %47, i32 0, i32 0
  %48 = load ptr, ptr %memberidx20, align 8
  store ptr %48, ptr %prop_name, align 8
  %49 = load ptr, ptr %prop_id, align 8
  %memberidx21 = getelementptr inbounds %PropId, ptr %49, i32 0, i32 0
  %50 = load i64, ptr %memberidx21, align 4
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %if.entry22, label %else23

for.incr:                                         ; preds = %ifend24
  %52 = load ptr, ptr %tmp_it, align 8
  %53 = call ptr @MapIterator_string_PropId__next(ptr %52)
  store ptr %53, ptr %prop_entry, align 8
  br label %for.cond

for.end:                                          ; preds = %ifend33, %for.cond
  %54 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %54)
  br label %for.entry38

if.entry22:                                       ; preds = %for.body
  %55 = load ptr, ptr %this, align 8
  %memberidx25 = getelementptr inbounds %TypeChecker, ptr %55, i32 0, i32 0
  %56 = load ptr, ptr %memberidx25, align 8
  %57 = load ptr, ptr %prop_id, align 8
  %58 = call ptr @get_method(ptr %56, ptr %57)
  store ptr %58, ptr %prop_method, align 8
  %59 = load ptr, ptr %prop_method, align 8
  %memberidx26 = getelementptr inbounds %ClassMethod, ptr %59, i32 0, i32 7
  %60 = load i1, ptr %memberidx26, align 1
  br i1 %60, label %if.entry27, label %else28

else23:                                           ; preds = %for.body
  br label %ifend24

ifend24:                                          ; preds = %else23, %ifend29
  br label %for.incr

if.entry27:                                       ; preds = %if.entry22
  %61 = load ptr, ptr %declared_class, align 8
  %memberidx30 = getelementptr inbounds %Class, ptr %61, i32 0, i32 3
  %62 = load ptr, ptr %memberidx30, align 8
  %63 = icmp ne ptr %62, null
  br i1 %63, label %if.entry31, label %else32

else28:                                           ; preds = %if.entry22
  br label %ifend29

ifend29:                                          ; preds = %else28
  br label %ifend24

if.entry31:                                       ; preds = %if.entry27
  %64 = load ptr, ptr %this, align 8
  %65 = load ptr, ptr %prop_name, align 8
  %66 = getelementptr inbounds %string, ptr %65, i32 0, i32 0
  %67 = load ptr, ptr %66, align 8
  %memberidx34 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %67, i32 0, i32 5
  %68 = load ptr, ptr %memberidx34, align 8
  %69 = call ptr %68(ptr %65)
  %70 = alloca ptr, align 8
  %71 = call i64 (ptr, ptr, ...) @asprintf(ptr %70, ptr @410, ptr %69)
  %72 = load ptr, ptr %70, align 8
  %73 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %73, ptr %72, i64 %71)
  tail call void @free(ptr %69)
  %74 = load ptr, ptr %class_node, align 8
  %memberidx35 = getelementptr inbounds %ClassDeclarationNode, ptr %74, i32 0, i32 0
  %75 = load ptr, ptr %memberidx35, align 8
  %memberidx36 = getelementptr inbounds %Token, ptr %75, i32 0, i32 1
  %76 = load ptr, ptr %memberidx36, align 8
  call void @TypeChecker_error(ptr %64, i64 4, ptr %73, ptr %76)
  ret void

else32:                                           ; preds = %if.entry27
  br label %ifend33

ifend33:                                          ; preds = %else32
  %77 = load ptr, ptr %declared_class, align 8
  %memberidx37 = getelementptr inbounds %Class, ptr %77, i32 0, i32 10
  store i1 true, ptr %memberidx37, align 1
  br label %for.end

for.entry38:                                      ; preds = %for.end
  store i64 0, ptr %i, align 4
  br label %for.cond39

for.cond39:                                       ; preds = %for.incr41, %for.entry38
  %78 = load i64, ptr %i, align 4
  %79 = load ptr, ptr %declared_class, align 8
  %memberidx43 = getelementptr inbounds %Class, ptr %79, i32 0, i32 5
  %80 = load ptr, ptr %memberidx43, align 8
  %memberidx44 = getelementptr inbounds %Array_ClassMethod_, ptr %80, i32 0, i32 2
  %81 = load i64, ptr %memberidx44, align 4
  %82 = icmp slt i64 %78, %81
  br i1 %82, label %for.body40, label %for.end42

for.body40:                                       ; preds = %for.cond39
  %83 = load ptr, ptr %this, align 8
  %memberidx45 = getelementptr inbounds %TypeChecker, ptr %83, i32 0, i32 3
  %84 = load ptr, ptr %memberidx45, align 8
  store ptr %84, ptr %prev_method, align 8
  %85 = load ptr, ptr %declared_class, align 8
  %memberidx46 = getelementptr inbounds %Class, ptr %85, i32 0, i32 5
  %86 = load ptr, ptr %memberidx46, align 8
  %87 = load i64, ptr %i, align 4
  %88 = call ptr @Array_ClassMethod____getitem__(ptr %86, i64 %87)
  store ptr %88, ptr %method, align 8
  %89 = load ptr, ptr %this, align 8
  %memberidx47 = getelementptr inbounds %TypeChecker, ptr %89, i32 0, i32 3
  %90 = load ptr, ptr %method, align 8
  %memberidx48 = getelementptr inbounds %ClassMethod, ptr %90, i32 0, i32 0
  %91 = load ptr, ptr %memberidx48, align 8
  store ptr %91, ptr %memberidx47, align 8
  %92 = load ptr, ptr %class_node, align 8
  %memberidx49 = getelementptr inbounds %ClassDeclarationNode, ptr %92, i32 0, i32 4
  %93 = load ptr, ptr %memberidx49, align 8
  %94 = load i64, ptr %i, align 4
  %95 = call ptr @Array_MethodNode____getitem__(ptr %93, i64 %94)
  store ptr %95, ptr %method_node, align 8
  %96 = load ptr, ptr %this, align 8
  %memberidx50 = getelementptr inbounds %TypeChecker, ptr %96, i32 0, i32 4
  %97 = load ptr, ptr %method, align 8
  %memberidx51 = getelementptr inbounds %ClassMethod, ptr %97, i32 0, i32 8
  %98 = load ptr, ptr %memberidx51, align 8
  store ptr %98, ptr %memberidx50, align 8
  %99 = load ptr, ptr %method, align 8
  %memberidx52 = getelementptr inbounds %ClassMethod, ptr %99, i32 0, i32 7
  %100 = load i1, ptr %memberidx52, align 1
  br i1 %100, label %if.entry53, label %else54

for.incr41:                                       ; preds = %ifend65, %if.entry53
  %101 = load i64, ptr %i, align 4
  %102 = add nsw i64 %101, 1
  store i64 %102, ptr %i, align 4
  br label %for.cond39

for.end42:                                        ; preds = %for.cond39
  %103 = load ptr, ptr %this, align 8
  %memberidx81 = getelementptr inbounds %TypeChecker, ptr %103, i32 0, i32 1
  %104 = load ptr, ptr %outer_class, align 8
  store ptr %104, ptr %memberidx81, align 8
  ret void

if.entry53:                                       ; preds = %for.body40
  br label %for.incr41

else54:                                           ; preds = %for.body40
  br label %ifend55

ifend55:                                          ; preds = %else54
  %105 = load ptr, ptr %method, align 8
  %memberidx56 = getelementptr inbounds %ClassMethod, ptr %105, i32 0, i32 5
  %106 = load ptr, ptr %this, align 8
  %107 = load ptr, ptr %method_node, align 8
  %memberidx57 = getelementptr inbounds %MethodNode, ptr %107, i32 0, i32 2
  %108 = load ptr, ptr %memberidx57, align 8
  %109 = call ptr @TypeChecker_check_block(ptr %106, ptr %108, ptr null, i1 false)
  store ptr %109, ptr %memberidx56, align 8
  %110 = load ptr, ptr %this, align 8
  %111 = call i1 @TypeChecker_has_errored(ptr %110)
  br i1 %111, label %if.entry58, label %else59

if.entry58:                                       ; preds = %ifend55
  ret void

else59:                                           ; preds = %ifend55
  br label %ifend60

ifend60:                                          ; preds = %else59
  %112 = load ptr, ptr %method, align 8
  %memberidx61 = getelementptr inbounds %ClassMethod, ptr %112, i32 0, i32 5
  %113 = load ptr, ptr %memberidx61, align 8
  %memberidx62 = getelementptr inbounds %Block, ptr %113, i32 0, i32 1
  %114 = load i1, ptr %memberidx62, align 1
  %115 = xor i1 %114, true
  br i1 %115, label %if.entry63, label %else64

if.entry63:                                       ; preds = %ifend60
  %116 = load ptr, ptr %method, align 8
  %memberidx66 = getelementptr inbounds %ClassMethod, ptr %116, i32 0, i32 4
  %117 = load ptr, ptr %memberidx66, align 8
  %memberidx67 = getelementptr inbounds %FunctionType, ptr %117, i32 0, i32 2
  %118 = load ptr, ptr %memberidx67, align 8
  %memberidx68 = getelementptr inbounds %Type, ptr %118, i32 0, i32 0
  %119 = load i64, ptr %memberidx68, align 4
  %120 = icmp eq i64 %119, 10
  br i1 %120, label %if.entry69, label %else70

else64:                                           ; preds = %ifend60
  br label %ifend65

ifend65:                                          ; preds = %else64, %ifend71
  %121 = load ptr, ptr %this, align 8
  %memberidx76 = getelementptr inbounds %TypeChecker, ptr %121, i32 0, i32 3
  %122 = load ptr, ptr %prev_method, align 8
  store ptr %122, ptr %memberidx76, align 8
  %123 = load ptr, ptr %this, align 8
  %memberidx77 = getelementptr inbounds %TypeChecker, ptr %123, i32 0, i32 4
  %124 = load ptr, ptr %this, align 8
  %memberidx78 = getelementptr inbounds %TypeChecker, ptr %124, i32 0, i32 0
  %125 = load ptr, ptr %memberidx78, align 8
  %126 = load ptr, ptr %method, align 8
  %memberidx79 = getelementptr inbounds %ClassMethod, ptr %126, i32 0, i32 8
  %127 = load ptr, ptr %memberidx79, align 8
  %128 = call ptr @get_scope(ptr %125, ptr %127)
  %memberidx80 = getelementptr inbounds %Scope, ptr %128, i32 0, i32 5
  %129 = load ptr, ptr %memberidx80, align 8
  store ptr %129, ptr %memberidx77, align 8
  br label %for.incr41

if.entry69:                                       ; preds = %if.entry63
  %130 = load ptr, ptr %method, align 8
  %memberidx72 = getelementptr inbounds %ClassMethod, ptr %130, i32 0, i32 5
  %131 = load ptr, ptr %memberidx72, align 8
  %memberidx73 = getelementptr inbounds %Block, ptr %131, i32 0, i32 0
  %132 = load ptr, ptr %memberidx73, align 8
  %133 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ReturnStatement, ptr null, i32 1) to i32))
  call void @ReturnStatement_constructor(ptr %133)
  call void @Array_Statement____sl__(ptr %132, ptr %133)
  br label %ifend71

else70:                                           ; preds = %if.entry63
  %134 = load ptr, ptr %this, align 8
  %135 = call ptr @string_from_bytes(ptr @411, i64 38)
  %136 = load ptr, ptr %method_node, align 8
  %memberidx74 = getelementptr inbounds %MethodNode, ptr %136, i32 0, i32 4
  %137 = load ptr, ptr %memberidx74, align 8
  %memberidx75 = getelementptr inbounds %Node, ptr %137, i32 0, i32 0
  %138 = load ptr, ptr %memberidx75, align 8
  call void @TypeChecker_error(ptr %134, i64 4, ptr %135, ptr %138)
  ret void

ifend71:                                          ; preds = %if.entry69
  br label %ifend65
}

define ptr @TypeChecker_check_condition(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %cond_node = alloca ptr, align 8
  %condition = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %cond_node, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = call ptr @Type_unknown()
  %5 = load ptr, ptr %cond_node, align 8
  %6 = call ptr @TypeChecker_check_expression(ptr %3, ptr %4, ptr %5)
  store ptr %6, ptr %condition, align 8
  %7 = load ptr, ptr %this, align 8
  %8 = call i1 @TypeChecker_has_errored(ptr %7)
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret ptr null

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %9 = load ptr, ptr %condition, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %9, i32 0, i32 3
  %10 = load ptr, ptr %memberidx, align 8
  %11 = call i1 @is_bool(ptr %10)
  %12 = xor i1 %11, true
  br i1 %12, label %true_block, label %false_block

true_block:                                       ; preds = %ifend
  %13 = load ptr, ptr %condition, align 8
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BooleanType, ptr null, i32 1) to i32))
  call void @BooleanType_constructor(ptr %14)
  %15 = call ptr @cast_exp_to_type(ptr %13, ptr %14)
  br label %end

false_block:                                      ; preds = %ifend
  %16 = load ptr, ptr %condition, align 8
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %15, %true_block ], [ %16, %false_block ]
  ret ptr %ternary
}

define ptr @TypeChecker_lex_and_parse_typecheck_file(ptr %0, ptr %1, ptr %2) {
  %range = alloca ptr, align 8
  %filename = alloca ptr, align 8
  %this = alloca ptr, align 8
  %file_id = alloca ptr, align 8
  %filepath = alloca ptr, align 8
  %module_node = alloca ptr, align 8
  %tokens = alloca ptr, align 8
  %prev_file_id = alloca ptr, align 8
  %module = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %filename, align 8
  store ptr %2, ptr %range, align 8
  %4 = load ptr, ptr %filename, align 8
  store ptr %4, ptr %filepath, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Compiler, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx1, align 8
  store ptr %7, ptr %prev_file_id, align 8
  %8 = load ptr, ptr %range, align 8
  %9 = icmp ne ptr %8, null
  %10 = load ptr, ptr %filename, align 8
  %11 = getelementptr inbounds %string, ptr %10, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %12, i32 0, i32 7
  %13 = load ptr, ptr %memberidx2, align 8
  %14 = call ptr @string_from_bytes(ptr @62, i64 1)
  %15 = call i1 %13(ptr %10, ptr %14)
  %16 = xor i1 %15, true
  %17 = and i1 %9, %16
  br i1 %17, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %18 = load ptr, ptr %this, align 8
  %19 = call ptr @TypeChecker_get_current_module(ptr %18)
  %memberidx3 = getelementptr inbounds %Module, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx3, align 8
  %21 = call ptr @Path_dirname(ptr %20)
  %22 = load ptr, ptr %filename, align 8
  %23 = call ptr @Path_join(ptr %21, ptr %22)
  store ptr %23, ptr %filepath, align 8
  br label %ifend

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %24 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %TypeChecker, ptr %24, i32 0, i32 5
  %25 = load ptr, ptr %memberidx4, align 8
  %26 = getelementptr inbounds %Compiler, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %memberidx5 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr }, ptr %27, i32 0, i32 1
  %28 = load ptr, ptr %memberidx5, align 8
  %29 = load ptr, ptr %filepath, align 8
  %30 = call ptr %28(ptr %25, ptr %29)
  store ptr %30, ptr %file_id, align 8
  %31 = load ptr, ptr %file_id, align 8
  %memberidx6 = getelementptr inbounds %FileId, ptr %31, i32 0, i32 0
  %32 = load i64, ptr %memberidx6, align 4
  %33 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %TypeChecker, ptr %33, i32 0, i32 0
  %34 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Program, ptr %34, i32 0, i32 1
  %35 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Array_Module_, ptr %35, i32 0, i32 2
  %36 = load i64, ptr %memberidx9, align 4
  %37 = icmp slt i64 %32, %36
  br i1 %37, label %if.entry10, label %else11

if.entry10:                                       ; preds = %ifend
  %38 = load ptr, ptr %this, align 8
  %39 = load ptr, ptr %file_id, align 8
  %memberidx13 = getelementptr inbounds %FileId, ptr %39, i32 0, i32 0
  %40 = load i64, ptr %memberidx13, align 4
  %41 = call ptr @TypeChecker_get_module(ptr %38, i64 %40)
  ret ptr %41

else11:                                           ; preds = %ifend
  br label %ifend12

ifend12:                                          ; preds = %else11
  %42 = load ptr, ptr %this, align 8
  %memberidx14 = getelementptr inbounds %TypeChecker, ptr %42, i32 0, i32 5
  %43 = load ptr, ptr %memberidx14, align 8
  %44 = getelementptr inbounds %Compiler, ptr %43, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %memberidx15 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr }, ptr %45, i32 0, i32 2
  %46 = load ptr, ptr %memberidx15, align 8
  %47 = load ptr, ptr %file_id, align 8
  %48 = call i1 %46(ptr %43, ptr %47)
  %49 = xor i1 %48, true
  br i1 %49, label %if.entry16, label %else17

if.entry16:                                       ; preds = %ifend12
  %50 = load ptr, ptr %this, align 8
  %51 = load ptr, ptr %filename, align 8
  %52 = getelementptr inbounds %string, ptr %51, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %memberidx19 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %53, i32 0, i32 5
  %54 = load ptr, ptr %memberidx19, align 8
  %55 = call ptr %54(ptr %51)
  %56 = alloca ptr, align 8
  %57 = call i64 (ptr, ptr, ...) @asprintf(ptr %56, ptr @212, ptr %55)
  %58 = load ptr, ptr %56, align 8
  %59 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %59, ptr %58, i64 %57)
  tail call void @free(ptr %55)
  %60 = load ptr, ptr %range, align 8
  call void @TypeChecker_error(ptr %50, i64 3, ptr %59, ptr %60)
  ret ptr null

else17:                                           ; preds = %ifend12
  br label %ifend18

ifend18:                                          ; preds = %else17
  %61 = load ptr, ptr %this, align 8
  %memberidx20 = getelementptr inbounds %TypeChecker, ptr %61, i32 0, i32 5
  %62 = load ptr, ptr %memberidx20, align 8
  %memberidx21 = getelementptr inbounds %Compiler, ptr %62, i32 0, i32 3
  %63 = load ptr, ptr %memberidx21, align 8
  %64 = load ptr, ptr %this, align 8
  %memberidx22 = getelementptr inbounds %TypeChecker, ptr %64, i32 0, i32 5
  %65 = load ptr, ptr %memberidx22, align 8
  %memberidx23 = getelementptr inbounds %Compiler, ptr %65, i32 0, i32 6
  %66 = load ptr, ptr %memberidx23, align 8
  %67 = call ptr @Lexer_tokenize(ptr %63, ptr %66)
  store ptr %67, ptr %tokens, align 8
  %68 = load ptr, ptr %this, align 8
  %69 = call i1 @TypeChecker_has_errored(ptr %68)
  br i1 %69, label %if.entry24, label %else25

if.entry24:                                       ; preds = %ifend18
  ret ptr null

else25:                                           ; preds = %ifend18
  br label %ifend26

ifend26:                                          ; preds = %else25
  %70 = load ptr, ptr %tokens, align 8
  %71 = load ptr, ptr %this, align 8
  %memberidx27 = getelementptr inbounds %TypeChecker, ptr %71, i32 0, i32 5
  %72 = load ptr, ptr %memberidx27, align 8
  %memberidx28 = getelementptr inbounds %Compiler, ptr %72, i32 0, i32 6
  %73 = load ptr, ptr %memberidx28, align 8
  %74 = call ptr @Parser_parse(ptr %70, ptr %73)
  store ptr %74, ptr %module_node, align 8
  %75 = load ptr, ptr %this, align 8
  %76 = call i1 @TypeChecker_has_errored(ptr %75)
  br i1 %76, label %if.entry29, label %else30

if.entry29:                                       ; preds = %ifend26
  ret ptr null

else30:                                           ; preds = %ifend26
  br label %ifend31

ifend31:                                          ; preds = %else30
  %77 = load ptr, ptr %this, align 8
  %78 = load ptr, ptr %module_node, align 8
  %79 = load ptr, ptr %filepath, align 8
  %80 = call ptr @TypeChecker_check_module(ptr %77, ptr %78, ptr %79)
  store ptr %80, ptr %module, align 8
  %81 = load ptr, ptr %this, align 8
  %82 = call i1 @TypeChecker_has_errored(ptr %81)
  br i1 %82, label %if.entry32, label %else33

if.entry32:                                       ; preds = %ifend31
  ret ptr null

else33:                                           ; preds = %ifend31
  br label %ifend34

ifend34:                                          ; preds = %else33
  %83 = load ptr, ptr %this, align 8
  %memberidx35 = getelementptr inbounds %TypeChecker, ptr %83, i32 0, i32 5
  %84 = load ptr, ptr %memberidx35, align 8
  %85 = getelementptr inbounds %Compiler, ptr %84, i32 0, i32 0
  %86 = load ptr, ptr %85, align 8
  %memberidx36 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr }, ptr %86, i32 0, i32 2
  %87 = load ptr, ptr %memberidx36, align 8
  %88 = load ptr, ptr %prev_file_id, align 8
  %89 = call i1 %87(ptr %84, ptr %88)
  %90 = load ptr, ptr %module, align 8
  ret ptr %90
}

define void @TypeChecker_declare_class_fields(ptr %0, ptr %1, ptr %2) {
  %this = alloca ptr, align 8
  %declared_class = alloca ptr, align 8
  %class_node = alloca ptr, align 8
  %current_vtable_index = alloca i64, align 8
  %field_node = alloca ptr, align 8
  %i = alloca i64, align 8
  %field = alloca ptr, align 8
  %possible_prop_id = alloca ptr, align 8
  %parent_prop_type = alloca ptr, align 8
  %parent_prop_visibility = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %declared_class, align 8
  store ptr %2, ptr %class_node, align 8
  %4 = load ptr, ptr %declared_class, align 8
  %memberidx = getelementptr inbounds %Class, ptr %4, i32 0, i32 9
  %5 = load i64, ptr %memberidx, align 4
  store i64 %5, ptr %current_vtable_index, align 4
  br label %for.entry

for.entry:                                        ; preds = %3
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load ptr, ptr %class_node, align 8
  %memberidx1 = getelementptr inbounds %ClassDeclarationNode, ptr %7, i32 0, i32 3
  %8 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_FieldNode_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %memberidx2, align 4
  %10 = icmp slt i64 %6, %9
  br i1 %10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load ptr, ptr %class_node, align 8
  %memberidx3 = getelementptr inbounds %ClassDeclarationNode, ptr %11, i32 0, i32 3
  %12 = load ptr, ptr %memberidx3, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_FieldNode____getitem__(ptr %12, i64 %13)
  store ptr %14, ptr %field_node, align 8
  %15 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ClassField, ptr null, i32 1) to i32))
  call void @ClassField_constructor(ptr %15)
  store ptr %15, ptr %field, align 8
  %16 = load ptr, ptr %field, align 8
  %memberidx4 = getelementptr inbounds %ClassField, ptr %16, i32 0, i32 3
  %17 = load ptr, ptr %field_node, align 8
  %memberidx5 = getelementptr inbounds %FieldNode, ptr %17, i32 0, i32 0
  %18 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %IdentifierToken, ptr %18, i32 0, i32 2
  %19 = load ptr, ptr %memberidx6, align 8
  store ptr %19, ptr %memberidx4, align 8
  %20 = load ptr, ptr %field, align 8
  %memberidx7 = getelementptr inbounds %ClassField, ptr %20, i32 0, i32 3
  %21 = load ptr, ptr %memberidx7, align 8
  %22 = call i1 @is_operator_overload_name(ptr %21)
  br i1 %22, label %if.entry, label %else

for.incr:                                         ; preds = %ifend64
  %23 = load i64, ptr %i, align 4
  %24 = add nsw i64 %23, 1
  store i64 %24, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void

if.entry:                                         ; preds = %for.body
  %25 = load ptr, ptr %this, align 8
  %26 = load ptr, ptr %field, align 8
  %memberidx8 = getelementptr inbounds %ClassField, ptr %26, i32 0, i32 3
  %27 = load ptr, ptr %memberidx8, align 8
  %28 = call ptr @string_from_bytes(ptr @389, i64 75)
  %29 = call ptr @string___add__(ptr %27, ptr %28)
  %30 = load ptr, ptr %field_node, align 8
  %memberidx9 = getelementptr inbounds %FieldNode, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx9, align 8
  %memberidx10 = getelementptr inbounds %Token, ptr %31, i32 0, i32 1
  %32 = load ptr, ptr %memberidx10, align 8
  call void @TypeChecker_error(ptr %25, i64 1, ptr %29, ptr %32)
  br label %ifend

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %33 = load ptr, ptr %field, align 8
  %memberidx11 = getelementptr inbounds %ClassField, ptr %33, i32 0, i32 2
  %34 = load ptr, ptr %field_node, align 8
  %memberidx12 = getelementptr inbounds %FieldNode, ptr %34, i32 0, i32 1
  %35 = load i64, ptr %memberidx12, align 4
  store i64 %35, ptr %memberidx11, align 4
  %36 = load ptr, ptr %field, align 8
  %memberidx13 = getelementptr inbounds %ClassField, ptr %36, i32 0, i32 0
  %37 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%PropId, ptr null, i32 1) to i32))
  %38 = load ptr, ptr %declared_class, align 8
  %memberidx14 = getelementptr inbounds %Class, ptr %38, i32 0, i32 0
  %39 = load ptr, ptr %memberidx14, align 8
  %40 = load i64, ptr %i, align 4
  call void @PropId_constructor(ptr %37, i64 1, ptr %39, i64 %40)
  store ptr %37, ptr %memberidx13, align 8
  %41 = load ptr, ptr %field, align 8
  %memberidx15 = getelementptr inbounds %ClassField, ptr %41, i32 0, i32 4
  %42 = load ptr, ptr %this, align 8
  %43 = load ptr, ptr %field_node, align 8
  %memberidx16 = getelementptr inbounds %FieldNode, ptr %43, i32 0, i32 3
  %44 = load ptr, ptr %memberidx16, align 8
  %45 = call ptr @TypeChecker_check_type(ptr %42, ptr %44)
  store ptr %45, ptr %memberidx15, align 8
  %46 = load ptr, ptr %field, align 8
  %memberidx17 = getelementptr inbounds %ClassField, ptr %46, i32 0, i32 6
  %47 = load i64, ptr %current_vtable_index, align 4
  store i64 %47, ptr %memberidx17, align 4
  %48 = load ptr, ptr %this, align 8
  %49 = call i1 @TypeChecker_has_errored(ptr %48)
  br i1 %49, label %if.entry18, label %else19

if.entry18:                                       ; preds = %ifend
  ret void

else19:                                           ; preds = %ifend
  br label %ifend20

ifend20:                                          ; preds = %else19
  %50 = load ptr, ptr %declared_class, align 8
  %memberidx21 = getelementptr inbounds %Class, ptr %50, i32 0, i32 6
  %51 = load ptr, ptr %memberidx21, align 8
  %52 = load ptr, ptr %field, align 8
  %memberidx22 = getelementptr inbounds %ClassField, ptr %52, i32 0, i32 3
  %53 = load ptr, ptr %memberidx22, align 8
  %54 = call ptr @Map_string_PropId____getitem__(ptr %51, ptr %53)
  store ptr %54, ptr %possible_prop_id, align 8
  %55 = load ptr, ptr %possible_prop_id, align 8
  %56 = icmp ne ptr %55, null
  br i1 %56, label %if.entry23, label %else24

if.entry23:                                       ; preds = %ifend20
  %57 = load ptr, ptr %possible_prop_id, align 8
  %memberidx26 = getelementptr inbounds %PropId, ptr %57, i32 0, i32 1
  %58 = load ptr, ptr %memberidx26, align 8
  %59 = load ptr, ptr %declared_class, align 8
  %memberidx27 = getelementptr inbounds %Class, ptr %59, i32 0, i32 0
  %60 = load ptr, ptr %memberidx27, align 8
  %61 = icmp eq ptr %58, %60
  br i1 %61, label %if.entry28, label %else29

else24:                                           ; preds = %ifend20
  br label %ifend25

ifend25:                                          ; preds = %else24, %ifend53
  %62 = load ptr, ptr %field_node, align 8
  %memberidx61 = getelementptr inbounds %FieldNode, ptr %62, i32 0, i32 2
  %63 = load ptr, ptr %memberidx61, align 8
  %64 = icmp ne ptr %63, null
  br i1 %64, label %if.entry62, label %else63

if.entry28:                                       ; preds = %if.entry23
  %65 = load ptr, ptr %this, align 8
  %66 = load ptr, ptr %field, align 8
  %memberidx31 = getelementptr inbounds %ClassField, ptr %66, i32 0, i32 3
  %67 = load ptr, ptr %memberidx31, align 8
  %68 = getelementptr inbounds %string, ptr %67, i32 0, i32 0
  %69 = load ptr, ptr %68, align 8
  %memberidx32 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %69, i32 0, i32 5
  %70 = load ptr, ptr %memberidx32, align 8
  %71 = call ptr %70(ptr %67)
  %72 = load ptr, ptr %declared_class, align 8
  %memberidx33 = getelementptr inbounds %Class, ptr %72, i32 0, i32 1
  %73 = load ptr, ptr %memberidx33, align 8
  %74 = getelementptr inbounds %string, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %74, align 8
  %memberidx34 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %75, i32 0, i32 5
  %76 = load ptr, ptr %memberidx34, align 8
  %77 = call ptr %76(ptr %73)
  %78 = alloca ptr, align 8
  %79 = call i64 (ptr, ptr, ...) @asprintf(ptr %78, ptr @390, ptr %71, ptr %77)
  %80 = load ptr, ptr %78, align 8
  %81 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %81, ptr %80, i64 %79)
  tail call void @free(ptr %71)
  tail call void @free(ptr %77)
  %82 = load ptr, ptr %field_node, align 8
  %memberidx35 = getelementptr inbounds %FieldNode, ptr %82, i32 0, i32 0
  %83 = load ptr, ptr %memberidx35, align 8
  %memberidx36 = getelementptr inbounds %Token, ptr %83, i32 0, i32 1
  %84 = load ptr, ptr %memberidx36, align 8
  call void @TypeChecker_error(ptr %65, i64 1, ptr %81, ptr %84)
  ret void

else29:                                           ; preds = %if.entry23
  br label %ifend30

ifend30:                                          ; preds = %else29
  %85 = load ptr, ptr %this, align 8
  %memberidx37 = getelementptr inbounds %TypeChecker, ptr %85, i32 0, i32 0
  %86 = load ptr, ptr %memberidx37, align 8
  %87 = load ptr, ptr %possible_prop_id, align 8
  %88 = call ptr @get_class_prop_type(ptr %86, ptr %87)
  store ptr %88, ptr %parent_prop_type, align 8
  %89 = load ptr, ptr %this, align 8
  %memberidx38 = getelementptr inbounds %TypeChecker, ptr %89, i32 0, i32 0
  %90 = load ptr, ptr %memberidx38, align 8
  %91 = load ptr, ptr %possible_prop_id, align 8
  %92 = call i64 @get_class_prop_visibility(ptr %90, ptr %91)
  store i64 %92, ptr %parent_prop_visibility, align 4
  %93 = load ptr, ptr %this, align 8
  %94 = load ptr, ptr %parent_prop_type, align 8
  %95 = load ptr, ptr %field, align 8
  %memberidx39 = getelementptr inbounds %ClassField, ptr %95, i32 0, i32 4
  %96 = load ptr, ptr %memberidx39, align 8
  %97 = call i1 @TypeChecker_types_are_eq(ptr %93, ptr %94, ptr %96)
  %98 = xor i1 %97, true
  br i1 %98, label %if.entry40, label %else41

if.entry40:                                       ; preds = %ifend30
  %99 = load ptr, ptr %this, align 8
  %100 = load ptr, ptr %field, align 8
  %memberidx43 = getelementptr inbounds %ClassField, ptr %100, i32 0, i32 3
  %101 = load ptr, ptr %memberidx43, align 8
  %102 = getelementptr inbounds %string, ptr %101, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8
  %memberidx44 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %103, i32 0, i32 5
  %104 = load ptr, ptr %memberidx44, align 8
  %105 = call ptr %104(ptr %101)
  %106 = load ptr, ptr %declared_class, align 8
  %memberidx45 = getelementptr inbounds %Class, ptr %106, i32 0, i32 1
  %107 = load ptr, ptr %memberidx45, align 8
  %108 = getelementptr inbounds %string, ptr %107, i32 0, i32 0
  %109 = load ptr, ptr %108, align 8
  %memberidx46 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %109, i32 0, i32 5
  %110 = load ptr, ptr %memberidx46, align 8
  %111 = call ptr %110(ptr %107)
  %112 = load ptr, ptr %this, align 8
  %113 = load ptr, ptr %parent_prop_type, align 8
  %114 = call ptr @TypeChecker_dump_type(ptr %112, ptr %113)
  %115 = getelementptr inbounds %string, ptr %114, i32 0, i32 0
  %116 = load ptr, ptr %115, align 8
  %memberidx47 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %116, i32 0, i32 5
  %117 = load ptr, ptr %memberidx47, align 8
  %118 = call ptr %117(ptr %114)
  %119 = alloca ptr, align 8
  %120 = call i64 (ptr, ptr, ...) @asprintf(ptr %119, ptr @391, ptr %105, ptr %111, ptr %118)
  %121 = load ptr, ptr %119, align 8
  %122 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %122, ptr %121, i64 %120)
  tail call void @free(ptr %105)
  tail call void @free(ptr %111)
  tail call void @free(ptr %118)
  %123 = load ptr, ptr %field_node, align 8
  %memberidx48 = getelementptr inbounds %FieldNode, ptr %123, i32 0, i32 0
  %124 = load ptr, ptr %memberidx48, align 8
  %memberidx49 = getelementptr inbounds %Token, ptr %124, i32 0, i32 1
  %125 = load ptr, ptr %memberidx49, align 8
  call void @TypeChecker_error(ptr %99, i64 5, ptr %122, ptr %125)
  ret void

else41:                                           ; preds = %ifend30
  br label %ifend42

ifend42:                                          ; preds = %else41
  %126 = load ptr, ptr %field, align 8
  %memberidx50 = getelementptr inbounds %ClassField, ptr %126, i32 0, i32 2
  %127 = load i64, ptr %memberidx50, align 4
  %128 = load i64, ptr %parent_prop_visibility, align 4
  %129 = icmp ne i64 %127, %128
  br i1 %129, label %if.entry51, label %else52

if.entry51:                                       ; preds = %ifend42
  %130 = load ptr, ptr %this, align 8
  %131 = load ptr, ptr %field, align 8
  %memberidx54 = getelementptr inbounds %ClassField, ptr %131, i32 0, i32 3
  %132 = load ptr, ptr %memberidx54, align 8
  %133 = getelementptr inbounds %string, ptr %132, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %memberidx55 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %134, i32 0, i32 5
  %135 = load ptr, ptr %memberidx55, align 8
  %136 = call ptr %135(ptr %132)
  %137 = load ptr, ptr %declared_class, align 8
  %memberidx56 = getelementptr inbounds %Class, ptr %137, i32 0, i32 1
  %138 = load ptr, ptr %memberidx56, align 8
  %139 = getelementptr inbounds %string, ptr %138, i32 0, i32 0
  %140 = load ptr, ptr %139, align 8
  %memberidx57 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %140, i32 0, i32 5
  %141 = load ptr, ptr %memberidx57, align 8
  %142 = call ptr %141(ptr %138)
  %143 = load i64, ptr %parent_prop_visibility, align 4
  %144 = call ptr @dump_access(i64 %143)
  %145 = getelementptr inbounds %string, ptr %144, i32 0, i32 0
  %146 = load ptr, ptr %145, align 8
  %memberidx58 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %146, i32 0, i32 5
  %147 = load ptr, ptr %memberidx58, align 8
  %148 = call ptr %147(ptr %144)
  %149 = alloca ptr, align 8
  %150 = call i64 (ptr, ptr, ...) @asprintf(ptr %149, ptr @392, ptr %136, ptr %142, ptr %148)
  %151 = load ptr, ptr %149, align 8
  %152 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %152, ptr %151, i64 %150)
  tail call void @free(ptr %136)
  tail call void @free(ptr %142)
  tail call void @free(ptr %148)
  %153 = load ptr, ptr %field_node, align 8
  %memberidx59 = getelementptr inbounds %FieldNode, ptr %153, i32 0, i32 0
  %154 = load ptr, ptr %memberidx59, align 8
  %memberidx60 = getelementptr inbounds %Token, ptr %154, i32 0, i32 1
  %155 = load ptr, ptr %memberidx60, align 8
  call void @TypeChecker_error(ptr %130, i64 4, ptr %152, ptr %155)
  ret void

else52:                                           ; preds = %ifend42
  br label %ifend53

ifend53:                                          ; preds = %else52
  br label %ifend25

if.entry62:                                       ; preds = %ifend25
  %156 = load ptr, ptr %field, align 8
  %memberidx65 = getelementptr inbounds %ClassField, ptr %156, i32 0, i32 5
  %157 = load ptr, ptr %this, align 8
  %158 = load ptr, ptr %field, align 8
  %memberidx66 = getelementptr inbounds %ClassField, ptr %158, i32 0, i32 4
  %159 = load ptr, ptr %memberidx66, align 8
  %160 = load ptr, ptr %field_node, align 8
  %memberidx67 = getelementptr inbounds %FieldNode, ptr %160, i32 0, i32 2
  %161 = load ptr, ptr %memberidx67, align 8
  %162 = call ptr @TypeChecker_check_expression(ptr %157, ptr %159, ptr %161)
  store ptr %162, ptr %memberidx65, align 8
  %163 = load ptr, ptr %this, align 8
  %164 = call i1 @TypeChecker_has_errored(ptr %163)
  br i1 %164, label %if.entry68, label %else69

else63:                                           ; preds = %ifend25
  %165 = load ptr, ptr %field, align 8
  %memberidx95 = getelementptr inbounds %ClassField, ptr %165, i32 0, i32 1
  store i1 false, ptr %memberidx95, align 1
  %166 = load ptr, ptr %declared_class, align 8
  %memberidx96 = getelementptr inbounds %Class, ptr %166, i32 0, i32 6
  %167 = load ptr, ptr %memberidx96, align 8
  %168 = load ptr, ptr %field, align 8
  %memberidx97 = getelementptr inbounds %ClassField, ptr %168, i32 0, i32 3
  %169 = load ptr, ptr %memberidx97, align 8
  %170 = load ptr, ptr %field, align 8
  %memberidx98 = getelementptr inbounds %ClassField, ptr %170, i32 0, i32 0
  %171 = load ptr, ptr %memberidx98, align 8
  call void @Map_string_PropId____setitem__(ptr %167, ptr %169, ptr %171)
  %172 = load i64, ptr %current_vtable_index, align 4
  %173 = add nsw i64 %172, 1
  store i64 %173, ptr %current_vtable_index, align 4
  br label %ifend64

ifend64:                                          ; preds = %else63, %ifend88
  %174 = load ptr, ptr %declared_class, align 8
  %memberidx99 = getelementptr inbounds %Class, ptr %174, i32 0, i32 4
  %175 = load ptr, ptr %memberidx99, align 8
  %176 = load ptr, ptr %field, align 8
  call void @Array_ClassField____sl__(ptr %175, ptr %176)
  br label %for.incr

if.entry68:                                       ; preds = %if.entry62
  ret void

else69:                                           ; preds = %if.entry62
  br label %ifend70

ifend70:                                          ; preds = %else69
  %177 = load ptr, ptr %this, align 8
  %178 = load ptr, ptr %field, align 8
  %memberidx71 = getelementptr inbounds %ClassField, ptr %178, i32 0, i32 4
  %179 = load ptr, ptr %memberidx71, align 8
  %180 = load ptr, ptr %field, align 8
  %memberidx72 = getelementptr inbounds %ClassField, ptr %180, i32 0, i32 5
  %181 = load ptr, ptr %memberidx72, align 8
  %memberidx73 = getelementptr inbounds %Expression, ptr %181, i32 0, i32 3
  %182 = load ptr, ptr %memberidx73, align 8
  %183 = call i1 @TypeChecker_types_are_eq(ptr %177, ptr %179, ptr %182)
  %184 = xor i1 %183, true
  br i1 %184, label %if.entry74, label %else75

if.entry74:                                       ; preds = %ifend70
  %185 = load ptr, ptr %this, align 8
  %186 = load ptr, ptr %this, align 8
  %187 = load ptr, ptr %field, align 8
  %memberidx77 = getelementptr inbounds %ClassField, ptr %187, i32 0, i32 4
  %188 = load ptr, ptr %memberidx77, align 8
  %189 = call ptr @TypeChecker_dump_type(ptr %186, ptr %188)
  %190 = getelementptr inbounds %string, ptr %189, i32 0, i32 0
  %191 = load ptr, ptr %190, align 8
  %memberidx78 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %191, i32 0, i32 5
  %192 = load ptr, ptr %memberidx78, align 8
  %193 = call ptr %192(ptr %189)
  %194 = load ptr, ptr %this, align 8
  %195 = load ptr, ptr %field, align 8
  %memberidx79 = getelementptr inbounds %ClassField, ptr %195, i32 0, i32 5
  %196 = load ptr, ptr %memberidx79, align 8
  %memberidx80 = getelementptr inbounds %Expression, ptr %196, i32 0, i32 3
  %197 = load ptr, ptr %memberidx80, align 8
  %198 = call ptr @TypeChecker_dump_type(ptr %194, ptr %197)
  %199 = getelementptr inbounds %string, ptr %198, i32 0, i32 0
  %200 = load ptr, ptr %199, align 8
  %memberidx81 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %200, i32 0, i32 5
  %201 = load ptr, ptr %memberidx81, align 8
  %202 = call ptr %201(ptr %198)
  %203 = alloca ptr, align 8
  %204 = call i64 (ptr, ptr, ...) @asprintf(ptr %203, ptr @393, ptr %193, ptr %202)
  %205 = load ptr, ptr %203, align 8
  %206 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %206, ptr %205, i64 %204)
  tail call void @free(ptr %193)
  tail call void @free(ptr %202)
  %207 = load ptr, ptr %field_node, align 8
  %memberidx82 = getelementptr inbounds %FieldNode, ptr %207, i32 0, i32 2
  %208 = load ptr, ptr %memberidx82, align 8
  %memberidx83 = getelementptr inbounds %Node, ptr %208, i32 0, i32 0
  %209 = load ptr, ptr %memberidx83, align 8
  call void @TypeChecker_error(ptr %185, i64 5, ptr %206, ptr %209)
  br label %ifend76

else75:                                           ; preds = %ifend70
  br label %ifend76

ifend76:                                          ; preds = %else75, %if.entry74
  %210 = load ptr, ptr %field, align 8
  %memberidx84 = getelementptr inbounds %ClassField, ptr %210, i32 0, i32 5
  %211 = load ptr, ptr %memberidx84, align 8
  %memberidx85 = getelementptr inbounds %Expression, ptr %211, i32 0, i32 1
  %212 = load i1, ptr %memberidx85, align 1
  %213 = xor i1 %212, true
  br i1 %213, label %if.entry86, label %else87

if.entry86:                                       ; preds = %ifend76
  %214 = load ptr, ptr %this, align 8
  %215 = call ptr @string_from_bytes(ptr @394, i64 45)
  %216 = load ptr, ptr %field_node, align 8
  %memberidx89 = getelementptr inbounds %FieldNode, ptr %216, i32 0, i32 2
  %217 = load ptr, ptr %memberidx89, align 8
  %memberidx90 = getelementptr inbounds %Node, ptr %217, i32 0, i32 0
  %218 = load ptr, ptr %memberidx90, align 8
  call void @TypeChecker_error(ptr %214, i64 4, ptr %215, ptr %218)
  ret void

else87:                                           ; preds = %ifend76
  br label %ifend88

ifend88:                                          ; preds = %else87
  %219 = load ptr, ptr %field, align 8
  %memberidx91 = getelementptr inbounds %ClassField, ptr %219, i32 0, i32 1
  store i1 true, ptr %memberidx91, align 1
  %220 = load ptr, ptr %declared_class, align 8
  %memberidx92 = getelementptr inbounds %Class, ptr %220, i32 0, i32 7
  %221 = load ptr, ptr %memberidx92, align 8
  %222 = load ptr, ptr %field, align 8
  %memberidx93 = getelementptr inbounds %ClassField, ptr %222, i32 0, i32 3
  %223 = load ptr, ptr %memberidx93, align 8
  %224 = load ptr, ptr %field, align 8
  %memberidx94 = getelementptr inbounds %ClassField, ptr %224, i32 0, i32 0
  %225 = load ptr, ptr %memberidx94, align 8
  call void @Map_string_PropId____setitem__(ptr %221, ptr %223, ptr %225)
  br label %ifend64
}

define ptr @TypeChecker_get_current_module_global_scope(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load ptr, ptr %this, align 8
  %5 = call ptr @TypeChecker_get_current_module(ptr %4)
  %memberidx1 = getelementptr inbounds %Module, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = call ptr @get_scope(ptr %3, ptr %6)
  ret ptr %7
}

define ptr @TypeChecker_get_current_function_type(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %4 = icmp ne ptr %3, null
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %TypeChecker, ptr %5, i32 0, i32 0
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %TypeChecker, ptr %7, i32 0, i32 3
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = call ptr @get_class_prop_type(ptr %6, ptr %8)
  ret ptr %9

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %10 = load ptr, ptr %this, align 8
  %11 = call ptr @TypeChecker_get_current_function(ptr %10)
  %memberidx3 = getelementptr inbounds %Function, ptr %11, i32 0, i32 4
  %12 = load ptr, ptr %memberidx3, align 8
  ret ptr %12
}

define ptr @TypeChecker_get_current_function(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %3 = call ptr @TypeChecker_get_current_module(ptr %2)
  %memberidx = getelementptr inbounds %Module, ptr %3, i32 0, i32 4
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %TypeChecker, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %VarId, ptr %6, i32 0, i32 2
  %7 = load i64, ptr %memberidx2, align 4
  %8 = call ptr @Array_Function____getitem__(ptr %4, i64 %7)
  ret ptr %8
}

define void @TypeChecker_check_module_import(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %import_node = alloca ptr, align 8
  %path = alloca ptr, align 8
  %global_module_scope = alloca ptr, align 8
  %module = alloca ptr, align 8
  %import_clause = alloca ptr, align 8
  %var_id = alloca ptr, align 8
  %class_id = alloca ptr, align 8
  %renamed_name = alloca ptr, align 8
  %type_alias = alloca ptr, align 8
  %enum_id = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %name_to_import = alloca ptr, align 8
  %func_id = alloca ptr, align 8
  %name = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %import_node, align 8
  %3 = load ptr, ptr %import_node, align 8
  %memberidx = getelementptr inbounds %ImportNode, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %StrToken, ptr %4, i32 0, i32 4
  %5 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Array_Token__, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx2, align 4
  %7 = icmp sgt i64 %6, 0
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  %9 = call ptr @string_from_bytes(ptr @351, i64 51)
  %10 = load ptr, ptr %import_node, align 8
  %memberidx3 = getelementptr inbounds %ImportNode, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Token, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx4, align 8
  call void @TypeChecker_error(ptr %8, i64 4, ptr %9, ptr %12)
  ret void

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %13 = load ptr, ptr %import_node, align 8
  %memberidx5 = getelementptr inbounds %ImportNode, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %StrToken, ptr %14, i32 0, i32 2
  %15 = load ptr, ptr %memberidx6, align 8
  store ptr %15, ptr %path, align 8
  %16 = load ptr, ptr %this, align 8
  %17 = load ptr, ptr %path, align 8
  %18 = load ptr, ptr %import_node, align 8
  %memberidx7 = getelementptr inbounds %ImportNode, ptr %18, i32 0, i32 1
  %19 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Token, ptr %19, i32 0, i32 1
  %20 = load ptr, ptr %memberidx8, align 8
  %21 = call ptr @TypeChecker_lex_and_parse_typecheck_file(ptr %16, ptr %17, ptr %20)
  store ptr %21, ptr %module, align 8
  %22 = load ptr, ptr %this, align 8
  %23 = call i1 @TypeChecker_has_errored(ptr %22)
  br i1 %23, label %if.entry9, label %else10

if.entry9:                                        ; preds = %ifend
  ret void

else10:                                           ; preds = %ifend
  br label %ifend11

ifend11:                                          ; preds = %else10
  %24 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %TypeChecker, ptr %24, i32 0, i32 0
  %25 = load ptr, ptr %memberidx12, align 8
  %26 = load ptr, ptr %module, align 8
  %memberidx13 = getelementptr inbounds %Module, ptr %26, i32 0, i32 5
  %27 = load ptr, ptr %memberidx13, align 8
  %28 = call ptr @get_scope(ptr %25, ptr %27)
  store ptr %28, ptr %global_module_scope, align 8
  %29 = load ptr, ptr %import_node, align 8
  %memberidx14 = getelementptr inbounds %ImportNode, ptr %29, i32 0, i32 0
  %30 = load ptr, ptr %memberidx14, align 8
  %memberidx15 = getelementptr inbounds %Array_ImportClause_, ptr %30, i32 0, i32 2
  %31 = load i64, ptr %memberidx15, align 4
  %32 = icmp sgt i64 %31, 0
  br i1 %32, label %if.entry16, label %else17

if.entry16:                                       ; preds = %ifend11
  br label %for.entry

else17:                                           ; preds = %ifend11
  %33 = load ptr, ptr %import_node, align 8
  %memberidx54 = getelementptr inbounds %ImportNode, ptr %33, i32 0, i32 2
  %34 = load ptr, ptr %memberidx54, align 8
  %35 = icmp ne ptr %34, null
  br i1 %35, label %if.entry55, label %else56

ifend18:                                          ; preds = %ifend57, %for.end
  ret void

for.entry:                                        ; preds = %if.entry16
  %36 = load ptr, ptr %import_node, align 8
  %memberidx19 = getelementptr inbounds %ImportNode, ptr %36, i32 0, i32 0
  %37 = load ptr, ptr %memberidx19, align 8
  %38 = call ptr @Array_ImportClause____iter__(ptr %37)
  store ptr %38, ptr %tmp_it, align 8
  %39 = load ptr, ptr %tmp_it, align 8
  %40 = call ptr @ArrayIterator_ImportClause__next(ptr %39)
  store ptr %40, ptr %import_clause, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %41 = load ptr, ptr %tmp_it, align 8
  %memberidx20 = getelementptr inbounds %ArrayIterator_ImportClause_, ptr %41, i32 0, i32 0
  %42 = load i1, ptr %memberidx20, align 1
  %43 = xor i1 %42, true
  br i1 %43, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %44 = load ptr, ptr %import_clause, align 8
  %memberidx21 = getelementptr inbounds %ImportClause, ptr %44, i32 0, i32 0
  %45 = load ptr, ptr %memberidx21, align 8
  %memberidx22 = getelementptr inbounds %IdentifierToken, ptr %45, i32 0, i32 2
  %46 = load ptr, ptr %memberidx22, align 8
  store ptr %46, ptr %name_to_import, align 8
  %47 = load ptr, ptr %import_clause, align 8
  %memberidx23 = getelementptr inbounds %ImportClause, ptr %47, i32 0, i32 1
  %48 = load ptr, ptr %memberidx23, align 8
  %49 = icmp ne ptr %48, null
  br i1 %49, label %true_block, label %false_block

for.incr:                                         ; preds = <badref>, %if.entry47, %if.entry43, %if.entry39, %if.entry35, %if.entry31, %if.entry27
  %50 = load ptr, ptr %tmp_it, align 8
  %51 = call ptr @ArrayIterator_ImportClause__next(ptr %50)
  store ptr %51, ptr %import_clause, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %52 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %52)
  br label %ifend18

true_block:                                       ; preds = %for.body
  %53 = load ptr, ptr %import_clause, align 8
  %memberidx24 = getelementptr inbounds %ImportClause, ptr %53, i32 0, i32 1
  %54 = load ptr, ptr %memberidx24, align 8
  %memberidx25 = getelementptr inbounds %IdentifierToken, ptr %54, i32 0, i32 2
  %55 = load ptr, ptr %memberidx25, align 8
  br label %end

false_block:                                      ; preds = %for.body
  %56 = load ptr, ptr %name_to_import, align 8
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %55, %true_block ], [ %56, %false_block ]
  store ptr %ternary, ptr %renamed_name, align 8
  %57 = load ptr, ptr %this, align 8
  %memberidx26 = getelementptr inbounds %TypeChecker, ptr %57, i32 0, i32 8
  %58 = load ptr, ptr %memberidx26, align 8
  %59 = load ptr, ptr %name_to_import, align 8
  %60 = call ptr @Map_string_Generic____getitem__(ptr %58, ptr %59)
  %61 = icmp ne ptr %60, null
  br i1 %61, label %if.entry27, label %else28

if.entry27:                                       ; preds = %end
  br label %for.incr

else28:                                           ; preds = %end
  br label %ifend29

ifend29:                                          ; preds = %else28
  %62 = load ptr, ptr %global_module_scope, align 8
  %memberidx30 = getelementptr inbounds %Scope, ptr %62, i32 0, i32 2
  %63 = load ptr, ptr %memberidx30, align 8
  %64 = load ptr, ptr %name_to_import, align 8
  %65 = call ptr @Map_string_ClassId____getitem__(ptr %63, ptr %64)
  store ptr %65, ptr %class_id, align 8
  %66 = load ptr, ptr %class_id, align 8
  %67 = icmp ne ptr %66, null
  br i1 %67, label %if.entry31, label %else32

if.entry31:                                       ; preds = %ifend29
  %68 = load ptr, ptr %this, align 8
  %69 = load ptr, ptr %renamed_name, align 8
  %70 = load ptr, ptr %class_id, align 8
  call void @TypeChecker_add_imported_class_to_module(ptr %68, ptr %69, ptr %70)
  br label %for.incr

else32:                                           ; preds = %ifend29
  br label %ifend33

ifend33:                                          ; preds = %else32
  %71 = load ptr, ptr %global_module_scope, align 8
  %memberidx34 = getelementptr inbounds %Scope, ptr %71, i32 0, i32 4
  %72 = load ptr, ptr %memberidx34, align 8
  %73 = load ptr, ptr %name_to_import, align 8
  %74 = call ptr @Map_string_EnumId____getitem__(ptr %72, ptr %73)
  store ptr %74, ptr %enum_id, align 8
  %75 = load ptr, ptr %enum_id, align 8
  %76 = icmp ne ptr %75, null
  br i1 %76, label %if.entry35, label %else36

if.entry35:                                       ; preds = %ifend33
  %77 = load ptr, ptr %this, align 8
  %78 = load ptr, ptr %renamed_name, align 8
  %79 = load ptr, ptr %enum_id, align 8
  call void @TypeChecker_add_imported_enum_to_module(ptr %77, ptr %78, ptr %79)
  br label %for.incr

else36:                                           ; preds = %ifend33
  br label %ifend37

ifend37:                                          ; preds = %else36
  %80 = load ptr, ptr %global_module_scope, align 8
  %memberidx38 = getelementptr inbounds %Scope, ptr %80, i32 0, i32 1
  %81 = load ptr, ptr %memberidx38, align 8
  %82 = load ptr, ptr %name_to_import, align 8
  %83 = call ptr @Map_string_VarId____getitem__(ptr %81, ptr %82)
  store ptr %83, ptr %var_id, align 8
  %84 = load ptr, ptr %var_id, align 8
  %85 = icmp ne ptr %84, null
  br i1 %85, label %if.entry39, label %else40

if.entry39:                                       ; preds = %ifend37
  %86 = load ptr, ptr %this, align 8
  %87 = load ptr, ptr %renamed_name, align 8
  %88 = load ptr, ptr %var_id, align 8
  call void @TypeChecker_add_imported_var_to_module(ptr %86, ptr %87, ptr %88)
  br label %for.incr

else40:                                           ; preds = %ifend37
  br label %ifend41

ifend41:                                          ; preds = %else40
  %89 = load ptr, ptr %global_module_scope, align 8
  %memberidx42 = getelementptr inbounds %Scope, ptr %89, i32 0, i32 3
  %90 = load ptr, ptr %memberidx42, align 8
  %91 = load ptr, ptr %name_to_import, align 8
  %92 = call ptr @Map_string_VarId____getitem__(ptr %90, ptr %91)
  store ptr %92, ptr %func_id, align 8
  %93 = load ptr, ptr %func_id, align 8
  %94 = icmp ne ptr %93, null
  br i1 %94, label %if.entry43, label %else44

if.entry43:                                       ; preds = %ifend41
  %95 = load ptr, ptr %this, align 8
  %96 = load ptr, ptr %renamed_name, align 8
  %97 = load ptr, ptr %func_id, align 8
  call void @TypeChecker_add_imported_fnc_to_module(ptr %95, ptr %96, ptr %97)
  br label %for.incr

else44:                                           ; preds = %ifend41
  br label %ifend45

ifend45:                                          ; preds = %else44
  %98 = load ptr, ptr %global_module_scope, align 8
  %memberidx46 = getelementptr inbounds %Scope, ptr %98, i32 0, i32 6
  %99 = load ptr, ptr %memberidx46, align 8
  %100 = load ptr, ptr %name_to_import, align 8
  %101 = call ptr @Map_string_Type____getitem__(ptr %99, ptr %100)
  store ptr %101, ptr %type_alias, align 8
  %102 = load ptr, ptr %type_alias, align 8
  %103 = icmp ne ptr %102, null
  br i1 %103, label %if.entry47, label %else48

if.entry47:                                       ; preds = %ifend45
  %104 = load ptr, ptr %this, align 8
  %105 = load ptr, ptr %renamed_name, align 8
  %106 = load ptr, ptr %type_alias, align 8
  call void @TypeChecker_add_imported_typealias_to_module(ptr %104, ptr %105, ptr %106)
  br label %for.incr

else48:                                           ; preds = %ifend45
  %107 = load ptr, ptr %this, align 8
  %108 = load ptr, ptr %name_to_import, align 8
  %109 = getelementptr inbounds %string, ptr %108, i32 0, i32 0
  %110 = load ptr, ptr %109, align 8
  %memberidx50 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %110, i32 0, i32 5
  %111 = load ptr, ptr %memberidx50, align 8
  %112 = call ptr %111(ptr %108)
  %113 = load ptr, ptr %path, align 8
  %114 = getelementptr inbounds %string, ptr %113, i32 0, i32 0
  %115 = load ptr, ptr %114, align 8
  %memberidx51 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %115, i32 0, i32 5
  %116 = load ptr, ptr %memberidx51, align 8
  %117 = call ptr %116(ptr %113)
  %118 = alloca ptr, align 8
  %119 = call i64 (ptr, ptr, ...) @asprintf(ptr %118, ptr @352, ptr %112, ptr %117)
  %120 = load ptr, ptr %118, align 8
  %121 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %121, ptr %120, i64 %119)
  tail call void @free(ptr %112)
  tail call void @free(ptr %117)
  %122 = load ptr, ptr %import_clause, align 8
  %memberidx52 = getelementptr inbounds %ImportClause, ptr %122, i32 0, i32 0
  %123 = load ptr, ptr %memberidx52, align 8
  %memberidx53 = getelementptr inbounds %Token, ptr %123, i32 0, i32 1
  %124 = load ptr, ptr %memberidx53, align 8
  call void @TypeChecker_error(ptr %107, i64 1, ptr %121, ptr %124)
  ret void

if.entry55:                                       ; preds = %else17
  %125 = load ptr, ptr %import_node, align 8
  %memberidx58 = getelementptr inbounds %ImportNode, ptr %125, i32 0, i32 2
  %126 = load ptr, ptr %memberidx58, align 8
  %memberidx59 = getelementptr inbounds %IdentifierToken, ptr %126, i32 0, i32 2
  %127 = load ptr, ptr %memberidx59, align 8
  store ptr %127, ptr %name, align 8
  %128 = load ptr, ptr %this, align 8
  %129 = call ptr @TypeChecker_get_current_module_global_scope(ptr %128)
  %memberidx60 = getelementptr inbounds %Scope, ptr %129, i32 0, i32 1
  %130 = load ptr, ptr %memberidx60, align 8
  %131 = load ptr, ptr %name, align 8
  %132 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ModuleVarId, ptr null, i32 1) to i32))
  %133 = load ptr, ptr %global_module_scope, align 8
  %memberidx61 = getelementptr inbounds %Scope, ptr %133, i32 0, i32 0
  %134 = load ptr, ptr %memberidx61, align 8
  call void @ModuleVarId_constructor(ptr %132, ptr %134)
  call void @Map_string_VarId____setitem__(ptr %130, ptr %131, ptr %132)
  br label %ifend57

else56:                                           ; preds = %else17
  %135 = load ptr, ptr %this, align 8
  %136 = load ptr, ptr %module, align 8
  call void @TypeChecker_import_all_from_module(ptr %135, ptr %136)
  br label %ifend57

ifend57:                                          ; preds = %else56, %if.entry55
  br label %ifend18
}

define ptr @TypeChecker_check_member_expr(ptr %0, ptr %1, ptr %2) {
  %expected_type = alloca ptr, align 8
  %this = alloca ptr, align 8
  %member_expr_node = alloca ptr, align 8
  %prop_owner_type = alloca ptr, align 8
  %parent_class = alloca ptr, align 8
  %prop_id = alloca ptr, align 8
  %prop_ty = alloca ptr, align 8
  %err_msg = alloca ptr, align 8
  %prop_name = alloca ptr, align 8
  %prop_owner = alloca ptr, align 8
  %var_id = alloca ptr, align 8
  %parent_enum = alloca ptr, align 8
  %mem_intrinsic = alloca i64, align 8
  %intrinsic_call = alloca ptr, align 8
  %current_scope = alloca ptr, align 8
  %value = alloca ptr, align 8
  %var_access_node = alloca ptr, align 8
  %scope_id = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %expected_type, align 8
  store ptr %2, ptr %member_expr_node, align 8
  %4 = load ptr, ptr %this, align 8
  %5 = call ptr @Type_unknown()
  %6 = load ptr, ptr %member_expr_node, align 8
  %memberidx = getelementptr inbounds %MemberExpressionNode, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx, align 8
  %8 = call ptr @TypeChecker_check_expression(ptr %4, ptr %5, ptr %7)
  store ptr %8, ptr %prop_owner, align 8
  %9 = load ptr, ptr %this, align 8
  %10 = call i1 @TypeChecker_has_errored(ptr %9)
  br i1 %10, label %if.entry, label %else

if.entry:                                         ; preds = %3
  ret ptr null

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %11 = load ptr, ptr %prop_owner, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %11, i32 0, i32 3
  %12 = load ptr, ptr %memberidx1, align 8
  store ptr %12, ptr %prop_owner_type, align 8
  %13 = load ptr, ptr %member_expr_node, align 8
  %memberidx2 = getelementptr inbounds %MemberExpressionNode, ptr %13, i32 0, i32 4
  %14 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %IdentifierToken, ptr %14, i32 0, i32 2
  %15 = load ptr, ptr %memberidx3, align 8
  store ptr %15, ptr %prop_name, align 8
  %16 = call ptr @Type_unknown()
  store ptr %16, ptr %prop_ty, align 8
  store ptr null, ptr %parent_class, align 8
  store ptr null, ptr %prop_id, align 8
  store ptr null, ptr %err_msg, align 8
  %17 = load ptr, ptr %prop_owner_type, align 8
  %18 = call i1 @is_object(ptr %17)
  br i1 %18, label %if.entry4, label %else5

if.entry4:                                        ; preds = %ifend
  %19 = load ptr, ptr %prop_owner_type, align 8
  %memberidx7 = getelementptr inbounds %Type, ptr %19, i32 0, i32 0
  %20 = load i64, ptr %memberidx7, align 4
  %21 = icmp eq i64 %20, 20
  br i1 %21, label %while.entry, label %while.end

else5:                                            ; preds = %ifend
  %22 = load ptr, ptr %prop_owner_type, align 8
  %memberidx26 = getelementptr inbounds %Type, ptr %22, i32 0, i32 0
  %23 = load i64, ptr %memberidx26, align 4
  %24 = icmp eq i64 %23, 17
  br i1 %24, label %if.entry27, label %else28

ifend6:                                           ; preds = %ifend29, %ifend22
  %25 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MemberExpression, ptr null, i32 1) to i32))
  %26 = load ptr, ptr %prop_owner, align 8
  %27 = load ptr, ptr %prop_id, align 8
  %28 = load ptr, ptr %prop_ty, align 8
  call void @MemberExpression_constructor(ptr %25, ptr %26, ptr %27, ptr %28)
  ret ptr %25

while.entry:                                      ; preds = %while.entry, %if.entry4
  %29 = load ptr, ptr %prop_owner_type, align 8
  %memberidx8 = getelementptr inbounds %GenericType, ptr %29, i32 0, i32 3
  %30 = load ptr, ptr %memberidx8, align 8
  store ptr %30, ptr %prop_owner_type, align 8
  %31 = load ptr, ptr %prop_owner_type, align 8
  %memberidx9 = getelementptr inbounds %Type, ptr %31, i32 0, i32 0
  %32 = load i64, ptr %memberidx9, align 4
  %33 = icmp eq i64 %32, 20
  br i1 %33, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %if.entry4
  %34 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %TypeChecker, ptr %34, i32 0, i32 0
  %35 = load ptr, ptr %memberidx10, align 8
  %36 = load ptr, ptr %prop_owner_type, align 8
  %37 = call ptr @get_class_from_type(ptr %35, ptr %36)
  store ptr %37, ptr %parent_class, align 8
  %38 = load ptr, ptr %parent_class, align 8
  %memberidx11 = getelementptr inbounds %Class, ptr %38, i32 0, i32 6
  %39 = load ptr, ptr %memberidx11, align 8
  %40 = load ptr, ptr %prop_name, align 8
  %41 = call ptr @Map_string_PropId____getitem__(ptr %39, ptr %40)
  store ptr %41, ptr %prop_id, align 8
  %42 = load ptr, ptr %prop_id, align 8
  %43 = icmp eq ptr %42, null
  br i1 %43, label %if.entry12, label %else13

if.entry12:                                       ; preds = %while.end
  %44 = load ptr, ptr %this, align 8
  %45 = load ptr, ptr %prop_name, align 8
  %46 = getelementptr inbounds %string, ptr %45, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  %memberidx15 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %47, i32 0, i32 5
  %48 = load ptr, ptr %memberidx15, align 8
  %49 = call ptr %48(ptr %45)
  %50 = load ptr, ptr %parent_class, align 8
  %memberidx16 = getelementptr inbounds %Class, ptr %50, i32 0, i32 1
  %51 = load ptr, ptr %memberidx16, align 8
  %52 = getelementptr inbounds %string, ptr %51, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %memberidx17 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %53, i32 0, i32 5
  %54 = load ptr, ptr %memberidx17, align 8
  %55 = call ptr %54(ptr %51)
  %56 = alloca ptr, align 8
  %57 = call i64 (ptr, ptr, ...) @asprintf(ptr %56, ptr @475, ptr %49, ptr %55)
  %58 = load ptr, ptr %56, align 8
  %59 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %59, ptr %58, i64 %57)
  tail call void @free(ptr %49)
  tail call void @free(ptr %55)
  %60 = load ptr, ptr %member_expr_node, align 8
  %memberidx18 = getelementptr inbounds %MemberExpressionNode, ptr %60, i32 0, i32 4
  %61 = load ptr, ptr %memberidx18, align 8
  %memberidx19 = getelementptr inbounds %Token, ptr %61, i32 0, i32 1
  %62 = load ptr, ptr %memberidx19, align 8
  call void @TypeChecker_error(ptr %44, i64 1, ptr %59, ptr %62)
  ret ptr null

else13:                                           ; preds = %while.end
  br label %ifend14

ifend14:                                          ; preds = %else13
  %63 = load ptr, ptr %this, align 8
  %64 = load ptr, ptr %prop_id, align 8
  %65 = call ptr @TypeChecker_check_member_access(ptr %63, ptr %64)
  store ptr %65, ptr %err_msg, align 8
  %66 = load ptr, ptr %err_msg, align 8
  %67 = icmp ne ptr %66, null
  br i1 %67, label %if.entry20, label %else21

if.entry20:                                       ; preds = %ifend14
  %68 = load ptr, ptr %this, align 8
  %69 = load ptr, ptr %err_msg, align 8
  %70 = load ptr, ptr %member_expr_node, align 8
  %memberidx23 = getelementptr inbounds %MemberExpressionNode, ptr %70, i32 0, i32 4
  %71 = load ptr, ptr %memberidx23, align 8
  %memberidx24 = getelementptr inbounds %Token, ptr %71, i32 0, i32 1
  %72 = load ptr, ptr %memberidx24, align 8
  call void @TypeChecker_error(ptr %68, i64 4, ptr %69, ptr %72)
  ret ptr null

else21:                                           ; preds = %ifend14
  br label %ifend22

ifend22:                                          ; preds = %else21
  %73 = load ptr, ptr %this, align 8
  %memberidx25 = getelementptr inbounds %TypeChecker, ptr %73, i32 0, i32 0
  %74 = load ptr, ptr %memberidx25, align 8
  %75 = load ptr, ptr %prop_id, align 8
  %76 = call ptr @get_class_prop_type(ptr %74, ptr %75)
  store ptr %76, ptr %prop_ty, align 8
  br label %ifend6

if.entry27:                                       ; preds = %else5
  %77 = load ptr, ptr %prop_owner, align 8
  %memberidx30 = getelementptr inbounds %VarAccessExpression, ptr %77, i32 0, i32 4
  %78 = load ptr, ptr %memberidx30, align 8
  store ptr %78, ptr %var_id, align 8
  %79 = load ptr, ptr %var_id, align 8
  %memberidx31 = getelementptr inbounds %VarId, ptr %79, i32 0, i32 0
  %80 = load i64, ptr %memberidx31, align 4
  %81 = icmp eq i64 %80, 3
  br i1 %81, label %if.entry32, label %else33

else28:                                           ; preds = %else5
  %82 = load ptr, ptr %prop_owner_type, align 8
  %83 = call i1 @is_pointer(ptr %82)
  br i1 %83, label %if.entry60, label %else61

ifend29:                                          ; preds = %ifend62, %ifend34
  br label %ifend6

if.entry32:                                       ; preds = %if.entry27
  %84 = load ptr, ptr %this, align 8
  %85 = load ptr, ptr %var_id, align 8
  %86 = call ptr @TypeChecker_get_class_from_var_id(ptr %84, ptr %85)
  store ptr %86, ptr %parent_class, align 8
  %87 = load ptr, ptr %parent_class, align 8
  %memberidx35 = getelementptr inbounds %Class, ptr %87, i32 0, i32 7
  %88 = load ptr, ptr %memberidx35, align 8
  %89 = load ptr, ptr %prop_name, align 8
  %90 = call ptr @Map_string_PropId____getitem__(ptr %88, ptr %89)
  store ptr %90, ptr %prop_id, align 8
  %91 = load ptr, ptr %prop_id, align 8
  %92 = icmp eq ptr %91, null
  br i1 %92, label %if.entry36, label %else37

else33:                                           ; preds = %if.entry27
  %93 = load ptr, ptr %this, align 8
  %94 = load ptr, ptr %var_id, align 8
  %95 = call ptr @TypeChecker_get_enum_from_var_id(ptr %93, ptr %94)
  store ptr %95, ptr %parent_enum, align 8
  %96 = load ptr, ptr %parent_enum, align 8
  %memberidx50 = getelementptr inbounds %Enum, ptr %96, i32 0, i32 3
  %97 = load ptr, ptr %memberidx50, align 8
  %98 = load ptr, ptr %prop_name, align 8
  %99 = call ptr @Map_string_PropId____getitem__(ptr %97, ptr %98)
  store ptr %99, ptr %prop_id, align 8
  %100 = load ptr, ptr %prop_id, align 8
  %101 = icmp eq ptr %100, null
  br i1 %101, label %if.entry51, label %else52

ifend34:                                          ; preds = %ifend53, %ifend46
  br label %ifend29

if.entry36:                                       ; preds = %if.entry32
  %102 = load ptr, ptr %this, align 8
  %103 = load ptr, ptr %prop_name, align 8
  %104 = getelementptr inbounds %string, ptr %103, i32 0, i32 0
  %105 = load ptr, ptr %104, align 8
  %memberidx39 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %105, i32 0, i32 5
  %106 = load ptr, ptr %memberidx39, align 8
  %107 = call ptr %106(ptr %103)
  %108 = load ptr, ptr %parent_class, align 8
  %memberidx40 = getelementptr inbounds %Class, ptr %108, i32 0, i32 1
  %109 = load ptr, ptr %memberidx40, align 8
  %110 = getelementptr inbounds %string, ptr %109, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %memberidx41 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %111, i32 0, i32 5
  %112 = load ptr, ptr %memberidx41, align 8
  %113 = call ptr %112(ptr %109)
  %114 = alloca ptr, align 8
  %115 = call i64 (ptr, ptr, ...) @asprintf(ptr %114, ptr @476, ptr %107, ptr %113)
  %116 = load ptr, ptr %114, align 8
  %117 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %117, ptr %116, i64 %115)
  tail call void @free(ptr %107)
  tail call void @free(ptr %113)
  %118 = load ptr, ptr %member_expr_node, align 8
  %memberidx42 = getelementptr inbounds %MemberExpressionNode, ptr %118, i32 0, i32 4
  %119 = load ptr, ptr %memberidx42, align 8
  %memberidx43 = getelementptr inbounds %Token, ptr %119, i32 0, i32 1
  %120 = load ptr, ptr %memberidx43, align 8
  call void @TypeChecker_error(ptr %102, i64 1, ptr %117, ptr %120)
  ret ptr null

else37:                                           ; preds = %if.entry32
  br label %ifend38

ifend38:                                          ; preds = %else37
  %121 = load ptr, ptr %this, align 8
  %122 = load ptr, ptr %prop_id, align 8
  %123 = call ptr @TypeChecker_check_member_access(ptr %121, ptr %122)
  store ptr %123, ptr %err_msg, align 8
  %124 = load ptr, ptr %err_msg, align 8
  %125 = icmp ne ptr %124, null
  br i1 %125, label %if.entry44, label %else45

if.entry44:                                       ; preds = %ifend38
  %126 = load ptr, ptr %this, align 8
  %127 = load ptr, ptr %err_msg, align 8
  %128 = load ptr, ptr %member_expr_node, align 8
  %memberidx47 = getelementptr inbounds %MemberExpressionNode, ptr %128, i32 0, i32 4
  %129 = load ptr, ptr %memberidx47, align 8
  %memberidx48 = getelementptr inbounds %Token, ptr %129, i32 0, i32 1
  %130 = load ptr, ptr %memberidx48, align 8
  call void @TypeChecker_error(ptr %126, i64 4, ptr %127, ptr %130)
  ret ptr null

else45:                                           ; preds = %ifend38
  br label %ifend46

ifend46:                                          ; preds = %else45
  %131 = load ptr, ptr %this, align 8
  %memberidx49 = getelementptr inbounds %TypeChecker, ptr %131, i32 0, i32 0
  %132 = load ptr, ptr %memberidx49, align 8
  %133 = load ptr, ptr %prop_id, align 8
  %134 = call ptr @get_class_prop_type(ptr %132, ptr %133)
  store ptr %134, ptr %prop_ty, align 8
  br label %ifend34

if.entry51:                                       ; preds = %else33
  %135 = load ptr, ptr %this, align 8
  %136 = load ptr, ptr %prop_name, align 8
  %137 = getelementptr inbounds %string, ptr %136, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %memberidx54 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %138, i32 0, i32 5
  %139 = load ptr, ptr %memberidx54, align 8
  %140 = call ptr %139(ptr %136)
  %141 = load ptr, ptr %parent_enum, align 8
  %memberidx55 = getelementptr inbounds %Enum, ptr %141, i32 0, i32 1
  %142 = load ptr, ptr %memberidx55, align 8
  %143 = getelementptr inbounds %string, ptr %142, i32 0, i32 0
  %144 = load ptr, ptr %143, align 8
  %memberidx56 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %144, i32 0, i32 5
  %145 = load ptr, ptr %memberidx56, align 8
  %146 = call ptr %145(ptr %142)
  %147 = alloca ptr, align 8
  %148 = call i64 (ptr, ptr, ...) @asprintf(ptr %147, ptr @477, ptr %140, ptr %146)
  %149 = load ptr, ptr %147, align 8
  %150 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %150, ptr %149, i64 %148)
  tail call void @free(ptr %140)
  tail call void @free(ptr %146)
  %151 = load ptr, ptr %member_expr_node, align 8
  %memberidx57 = getelementptr inbounds %MemberExpressionNode, ptr %151, i32 0, i32 4
  %152 = load ptr, ptr %memberidx57, align 8
  %memberidx58 = getelementptr inbounds %Token, ptr %152, i32 0, i32 1
  %153 = load ptr, ptr %memberidx58, align 8
  call void @TypeChecker_error(ptr %135, i64 1, ptr %150, ptr %153)
  ret ptr null

else52:                                           ; preds = %else33
  br label %ifend53

ifend53:                                          ; preds = %else52
  %154 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%EnumType, ptr null, i32 1) to i32))
  %155 = load ptr, ptr %parent_enum, align 8
  %memberidx59 = getelementptr inbounds %Enum, ptr %155, i32 0, i32 0
  %156 = load ptr, ptr %memberidx59, align 8
  call void @EnumType_constructor(ptr %154, ptr %156)
  store ptr %154, ptr %prop_ty, align 8
  br label %ifend34

if.entry60:                                       ; preds = %else28
  store i64 3, ptr %mem_intrinsic, align 4
  %157 = load ptr, ptr %prop_name, align 8
  %158 = call ptr @string_from_bytes(ptr @478, i64 9)
  %159 = call i1 @string___eq__(ptr %157, ptr %158)
  br i1 %159, label %if.entry63, label %else64

else61:                                           ; preds = %else28
  %160 = load ptr, ptr %prop_owner_type, align 8
  %memberidx82 = getelementptr inbounds %Type, ptr %160, i32 0, i32 0
  %161 = load i64, ptr %memberidx82, align 4
  %162 = icmp eq i64 %161, 14
  br i1 %162, label %if.entry83, label %else84

ifend62:                                          ; preds = %ifend85
  br label %ifend29

if.entry63:                                       ; preds = %if.entry60
  store i64 3, ptr %mem_intrinsic, align 4
  br label %ifend65

else64:                                           ; preds = %if.entry60
  %163 = load ptr, ptr %prop_name, align 8
  %164 = call ptr @string_from_bytes(ptr @479, i64 9)
  %165 = call i1 @string___eq__(ptr %163, ptr %164)
  br i1 %165, label %if.entry66, label %else67

ifend65:                                          ; preds = %ifend68, %if.entry63
  %166 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntrinsicCall, ptr null, i32 1) to i32))
  %167 = load i64, ptr %mem_intrinsic, align 4
  call void @IntrinsicCall_constructor(ptr %166, i64 %167)
  store ptr %166, ptr %intrinsic_call, align 8
  %168 = load ptr, ptr %intrinsic_call, align 8
  %memberidx81 = getelementptr inbounds %IntrinsicCall, ptr %168, i32 0, i32 5
  %169 = load ptr, ptr %memberidx81, align 8
  %170 = load ptr, ptr %prop_owner, align 8
  call void @Array_Expression____sl__(ptr %169, ptr %170)
  %171 = load ptr, ptr %intrinsic_call, align 8
  ret ptr %171

if.entry66:                                       ; preds = %else64
  store i64 4, ptr %mem_intrinsic, align 4
  br label %ifend68

else67:                                           ; preds = %else64
  %172 = load ptr, ptr %prop_name, align 8
  %173 = call ptr @string_from_bytes(ptr @480, i64 9)
  %174 = call i1 @string___eq__(ptr %172, ptr %173)
  br i1 %174, label %if.entry69, label %else70

ifend68:                                          ; preds = %ifend71, %if.entry66
  br label %ifend65

if.entry69:                                       ; preds = %else67
  store i64 5, ptr %mem_intrinsic, align 4
  br label %ifend71

else70:                                           ; preds = %else67
  %175 = load ptr, ptr %prop_name, align 8
  %176 = call ptr @string_from_bytes(ptr @481, i64 6)
  %177 = call i1 @string___eq__(ptr %175, ptr %176)
  br i1 %177, label %if.entry72, label %else73

ifend71:                                          ; preds = %ifend74, %if.entry69
  br label %ifend68

if.entry72:                                       ; preds = %else70
  store i64 6, ptr %mem_intrinsic, align 4
  br label %ifend74

else73:                                           ; preds = %else70
  %178 = load ptr, ptr %prop_name, align 8
  %179 = call ptr @string_from_bytes(ptr @482, i64 7)
  %180 = call i1 @string___eq__(ptr %178, ptr %179)
  br i1 %180, label %if.entry75, label %else76

ifend74:                                          ; preds = %ifend77, %if.entry72
  br label %ifend71

if.entry75:                                       ; preds = %else73
  store i64 7, ptr %mem_intrinsic, align 4
  br label %ifend77

else76:                                           ; preds = %else73
  %181 = load ptr, ptr %this, align 8
  %182 = load ptr, ptr %prop_name, align 8
  %183 = getelementptr inbounds %string, ptr %182, i32 0, i32 0
  %184 = load ptr, ptr %183, align 8
  %memberidx78 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %184, i32 0, i32 5
  %185 = load ptr, ptr %memberidx78, align 8
  %186 = call ptr %185(ptr %182)
  %187 = alloca ptr, align 8
  %188 = call i64 (ptr, ptr, ...) @asprintf(ptr %187, ptr @483, ptr %186)
  %189 = load ptr, ptr %187, align 8
  %190 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %190, ptr %189, i64 %188)
  tail call void @free(ptr %186)
  %191 = load ptr, ptr %member_expr_node, align 8
  %memberidx79 = getelementptr inbounds %MemberExpressionNode, ptr %191, i32 0, i32 4
  %192 = load ptr, ptr %memberidx79, align 8
  %memberidx80 = getelementptr inbounds %Token, ptr %192, i32 0, i32 1
  %193 = load ptr, ptr %memberidx80, align 8
  call void @TypeChecker_error(ptr %181, i64 1, ptr %190, ptr %193)
  ret ptr null

ifend77:                                          ; preds = %if.entry75
  br label %ifend74

if.entry83:                                       ; preds = %else61
  %194 = load ptr, ptr %prop_name, align 8
  %195 = call ptr @string_from_bytes(ptr @484, i64 4)
  %196 = call i1 @string___eq__(ptr %194, ptr %195)
  br i1 %196, label %if.entry86, label %else87

else84:                                           ; preds = %else61
  %197 = load ptr, ptr %prop_owner_type, align 8
  %memberidx90 = getelementptr inbounds %Type, ptr %197, i32 0, i32 0
  %198 = load i64, ptr %memberidx90, align 4
  %199 = icmp eq i64 %198, 18
  br i1 %199, label %if.entry91, label %else92

ifend85:                                          ; preds = %ifend88
  br label %ifend62

if.entry86:                                       ; preds = %if.entry83
  %200 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntExpression, ptr null, i32 1) to i32))
  %201 = load ptr, ptr %prop_owner_type, align 8
  %memberidx89 = getelementptr inbounds %ArrayType, ptr %201, i32 0, i32 2
  %202 = load i64, ptr %memberidx89, align 4
  call void @IntExpression_constructor(ptr %200, i64 %202)
  ret ptr %200

else87:                                           ; preds = %if.entry83
  br label %ifend88

ifend88:                                          ; preds = %else87
  br label %ifend85

if.entry91:                                       ; preds = %else84
  %203 = load ptr, ptr %prop_owner, align 8
  %memberidx94 = getelementptr inbounds %VarAccessExpression, ptr %203, i32 0, i32 4
  %204 = load ptr, ptr %memberidx94, align 8
  %memberidx95 = getelementptr inbounds %ModuleVarId, ptr %204, i32 0, i32 3
  %205 = load ptr, ptr %memberidx95, align 8
  store ptr %205, ptr %scope_id, align 8
  %206 = load ptr, ptr %this, align 8
  %memberidx96 = getelementptr inbounds %TypeChecker, ptr %206, i32 0, i32 4
  %207 = load ptr, ptr %memberidx96, align 8
  store ptr %207, ptr %current_scope, align 8
  %208 = load ptr, ptr %this, align 8
  %memberidx97 = getelementptr inbounds %TypeChecker, ptr %208, i32 0, i32 4
  %209 = load ptr, ptr %scope_id, align 8
  store ptr %209, ptr %memberidx97, align 8
  %210 = alloca %VarAccessExpressionNode, align 8
  %211 = load ptr, ptr %member_expr_node, align 8
  %memberidx98 = getelementptr inbounds %MemberExpressionNode, ptr %211, i32 0, i32 4
  %212 = load ptr, ptr %memberidx98, align 8
  call void @VarAccessExpressionNode_constructor(ptr %210, ptr %212)
  store ptr %210, ptr %var_access_node, align 8
  %213 = load ptr, ptr %this, align 8
  %214 = call ptr @Type_unknown()
  %215 = load ptr, ptr %var_access_node, align 8
  %216 = call ptr @TypeChecker_check_var_access_expr(ptr %213, ptr %214, ptr %215)
  store ptr %216, ptr %value, align 8
  %217 = load ptr, ptr %this, align 8
  %memberidx99 = getelementptr inbounds %TypeChecker, ptr %217, i32 0, i32 4
  %218 = load ptr, ptr %current_scope, align 8
  store ptr %218, ptr %memberidx99, align 8
  %219 = load ptr, ptr %value, align 8
  ret ptr %219

else92:                                           ; preds = %else84
  %220 = load ptr, ptr %this, align 8
  %221 = load ptr, ptr %prop_name, align 8
  %222 = getelementptr inbounds %string, ptr %221, i32 0, i32 0
  %223 = load ptr, ptr %222, align 8
  %memberidx100 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %223, i32 0, i32 5
  %224 = load ptr, ptr %memberidx100, align 8
  %225 = call ptr %224(ptr %221)
  %226 = load ptr, ptr %this, align 8
  %227 = load ptr, ptr %prop_owner, align 8
  %memberidx101 = getelementptr inbounds %Expression, ptr %227, i32 0, i32 3
  %228 = load ptr, ptr %memberidx101, align 8
  %229 = call ptr @TypeChecker_dump_type(ptr %226, ptr %228)
  %230 = getelementptr inbounds %string, ptr %229, i32 0, i32 0
  %231 = load ptr, ptr %230, align 8
  %memberidx102 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %231, i32 0, i32 5
  %232 = load ptr, ptr %memberidx102, align 8
  %233 = call ptr %232(ptr %229)
  %234 = alloca ptr, align 8
  %235 = call i64 (ptr, ptr, ...) @asprintf(ptr %234, ptr @485, ptr %225, ptr %233)
  %236 = load ptr, ptr %234, align 8
  %237 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %237, ptr %236, i64 %235)
  tail call void @free(ptr %225)
  tail call void @free(ptr %233)
  %238 = load ptr, ptr %member_expr_node, align 8
  %memberidx103 = getelementptr inbounds %MemberExpressionNode, ptr %238, i32 0, i32 3
  %239 = load ptr, ptr %memberidx103, align 8
  %memberidx104 = getelementptr inbounds %Node, ptr %239, i32 0, i32 0
  %240 = load ptr, ptr %memberidx104, align 8
  call void @TypeChecker_error(ptr %220, i64 4, ptr %237, ptr %240)
  ret ptr null
}

define ptr @TypeChecker_check_assignment(ptr %0, ptr %1, ptr %2, ptr %3) {
  %left = alloca ptr, align 8
  %right = alloca ptr, align 8
  %binary_node = alloca ptr, align 8
  %this = alloca ptr, align 8
  %op = alloca i64, align 8
  %exp = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %left, align 8
  store ptr %2, ptr %right, align 8
  store ptr %3, ptr %binary_node, align 8
  %5 = load ptr, ptr %binary_node, align 8
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %5, i32 0, i32 4
  %6 = load i64, ptr %memberidx, align 4
  store i64 %6, ptr %op, align 4
  %7 = load i64, ptr %op, align 4
  %8 = icmp ne i64 %7, 19
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %4
  %9 = load ptr, ptr %left, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %9, i32 0, i32 3
  %10 = load ptr, ptr %memberidx1, align 8
  %11 = call i1 @is_object(ptr %10)
  br i1 %11, label %if.entry2, label %else3

else:                                             ; preds = %4
  br label %ifend

ifend:                                            ; preds = %else, %ifend11
  %12 = load ptr, ptr %left, align 8
  %13 = call i1 @check_is_var(ptr %12)
  %14 = xor i1 %13, true
  br i1 %14, label %if.entry12, label %else13

if.entry2:                                        ; preds = %if.entry
  %15 = load ptr, ptr %this, align 8
  %16 = load ptr, ptr %left, align 8
  %17 = load ptr, ptr %binary_node, align 8
  %18 = call ptr @TypeChecker_check_object_bin_assign(ptr %15, ptr %16, ptr %17)
  store ptr %18, ptr %exp, align 8
  %19 = load ptr, ptr %exp, align 8
  %20 = icmp ne ptr %19, null
  %21 = load ptr, ptr %this, align 8
  %22 = call i1 @TypeChecker_has_errored(ptr %21)
  %23 = or i1 %20, %22
  br i1 %23, label %if.entry5, label %else6

else3:                                            ; preds = %if.entry
  br label %ifend4

ifend4:                                           ; preds = %else3, %ifend7
  %24 = load ptr, ptr %this, align 8
  %25 = load ptr, ptr %left, align 8
  %memberidx8 = getelementptr inbounds %Expression, ptr %25, i32 0, i32 3
  %26 = load ptr, ptr %memberidx8, align 8
  %27 = load ptr, ptr %binary_node, align 8
  %28 = call ptr @lower_bin_assign_node(ptr %27)
  %29 = call ptr @TypeChecker_check_bin_expr(ptr %24, ptr %26, ptr %28)
  store ptr %29, ptr %right, align 8
  %30 = load ptr, ptr %this, align 8
  %31 = call i1 @TypeChecker_has_errored(ptr %30)
  br i1 %31, label %if.entry9, label %else10

if.entry5:                                        ; preds = %if.entry2
  %32 = load ptr, ptr %exp, align 8
  ret ptr %32

else6:                                            ; preds = %if.entry2
  br label %ifend7

ifend7:                                           ; preds = %else6
  br label %ifend4

if.entry9:                                        ; preds = %ifend4
  ret ptr null

else10:                                           ; preds = %ifend4
  br label %ifend11

ifend11:                                          ; preds = %else10
  br label %ifend

if.entry12:                                       ; preds = %ifend
  %33 = load ptr, ptr %this, align 8
  %34 = call ptr @string_from_bytes(ptr @433, i64 33)
  %35 = load ptr, ptr %binary_node, align 8
  %memberidx15 = getelementptr inbounds %BinaryExpressionNode, ptr %35, i32 0, i32 3
  %36 = load ptr, ptr %memberidx15, align 8
  %memberidx16 = getelementptr inbounds %Node, ptr %36, i32 0, i32 0
  %37 = load ptr, ptr %memberidx16, align 8
  call void @TypeChecker_error(ptr %33, i64 5, ptr %34, ptr %37)
  ret ptr null

else13:                                           ; preds = %ifend
  br label %ifend14

ifend14:                                          ; preds = %else13
  %38 = load ptr, ptr %this, align 8
  %39 = load ptr, ptr %left, align 8
  %memberidx17 = getelementptr inbounds %Expression, ptr %39, i32 0, i32 3
  %40 = load ptr, ptr %memberidx17, align 8
  %41 = load ptr, ptr %right, align 8
  %memberidx18 = getelementptr inbounds %Expression, ptr %41, i32 0, i32 3
  %42 = load ptr, ptr %memberidx18, align 8
  %43 = call i1 @TypeChecker_types_are_eq(ptr %38, ptr %40, ptr %42)
  %44 = xor i1 %43, true
  br i1 %44, label %if.entry19, label %else20

if.entry19:                                       ; preds = %ifend14
  %45 = load ptr, ptr %this, align 8
  %46 = load ptr, ptr %this, align 8
  %47 = load ptr, ptr %right, align 8
  %memberidx22 = getelementptr inbounds %Expression, ptr %47, i32 0, i32 3
  %48 = load ptr, ptr %memberidx22, align 8
  %49 = call ptr @TypeChecker_dump_type(ptr %46, ptr %48)
  %50 = getelementptr inbounds %string, ptr %49, i32 0, i32 0
  %51 = load ptr, ptr %50, align 8
  %memberidx23 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %51, i32 0, i32 5
  %52 = load ptr, ptr %memberidx23, align 8
  %53 = call ptr %52(ptr %49)
  %54 = load ptr, ptr %this, align 8
  %55 = load ptr, ptr %left, align 8
  %memberidx24 = getelementptr inbounds %Expression, ptr %55, i32 0, i32 3
  %56 = load ptr, ptr %memberidx24, align 8
  %57 = call ptr @TypeChecker_dump_type(ptr %54, ptr %56)
  %58 = getelementptr inbounds %string, ptr %57, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %memberidx25 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %59, i32 0, i32 5
  %60 = load ptr, ptr %memberidx25, align 8
  %61 = call ptr %60(ptr %57)
  %62 = alloca ptr, align 8
  %63 = call i64 (ptr, ptr, ...) @asprintf(ptr %62, ptr @434, ptr %53, ptr %61)
  %64 = load ptr, ptr %62, align 8
  %65 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %65, ptr %64, i64 %63)
  tail call void @free(ptr %53)
  tail call void @free(ptr %61)
  %66 = load ptr, ptr %binary_node, align 8
  %memberidx26 = getelementptr inbounds %Node, ptr %66, i32 0, i32 0
  %67 = load ptr, ptr %memberidx26, align 8
  call void @TypeChecker_error(ptr %45, i64 5, ptr %65, ptr %67)
  ret ptr null

else20:                                           ; preds = %ifend14
  br label %ifend21

ifend21:                                          ; preds = %else20
  %68 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpression, ptr null, i32 1) to i32))
  %69 = load ptr, ptr %left, align 8
  %70 = load ptr, ptr %right, align 8
  %71 = load ptr, ptr %right, align 8
  %memberidx27 = getelementptr inbounds %Expression, ptr %71, i32 0, i32 3
  %72 = load ptr, ptr %memberidx27, align 8
  call void @BinaryExpression_constructor(ptr %68, ptr %69, i64 19, ptr %70, ptr %72, i1 false)
  ret ptr %68
}

define ptr @TypeChecker_init_function_signature(ptr %0, ptr %1, ptr %2, ptr %3) {
  %args = alloca ptr, align 8
  %return_type_node = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arg_nodes = alloca ptr, align 8
  %ret_type = alloca ptr, align 8
  %arg_types = alloca ptr, align 8
  %var = alloca ptr, align 8
  %fnc_arg = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %arg_type = alloca ptr, align 8
  %arg = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %arg_nodes, align 8
  store ptr %2, ptr %return_type_node, align 8
  store ptr %3, ptr %args, align 8
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Type_, ptr null, i32 1) to i32))
  call void @Array_Type__constructor(ptr %5, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Type_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_Type_, ptr %5, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %5, ptr %arg_types, align 8
  br label %for.entry

for.entry:                                        ; preds = %4
  %7 = load ptr, ptr %arg_nodes, align 8
  %8 = call ptr @Array_ArgNode____iter__(ptr %7)
  store ptr %8, ptr %tmp_it, align 8
  %9 = load ptr, ptr %tmp_it, align 8
  %10 = call ptr @ArrayIterator_ArgNode__next(ptr %9)
  store ptr %10, ptr %arg, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %11 = load ptr, ptr %tmp_it, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_ArgNode_, ptr %11, i32 0, i32 0
  %12 = load i1, ptr %memberidx2, align 1
  %13 = xor i1 %12, true
  br i1 %13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FunctionArg, ptr null, i32 1) to i32))
  call void @FunctionArg_constructor(ptr %14)
  store ptr %14, ptr %fnc_arg, align 8
  %15 = load ptr, ptr %fnc_arg, align 8
  %memberidx3 = getelementptr inbounds %FunctionArg, ptr %15, i32 0, i32 5
  %16 = load ptr, ptr %arg, align 8
  %memberidx4 = getelementptr inbounds %ArgNode, ptr %16, i32 0, i32 0
  %17 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %IdentifierToken, ptr %17, i32 0, i32 2
  %18 = load ptr, ptr %memberidx5, align 8
  store ptr %18, ptr %memberidx3, align 8
  %19 = load ptr, ptr %fnc_arg, align 8
  %memberidx6 = getelementptr inbounds %FunctionArg, ptr %19, i32 0, i32 6
  store ptr null, ptr %memberidx6, align 8
  %20 = call ptr @Type_unknown()
  store ptr %20, ptr %arg_type, align 8
  %21 = load ptr, ptr %arg, align 8
  %memberidx7 = getelementptr inbounds %ArgNode, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx7, align 8
  %23 = icmp ne ptr %22, null
  br i1 %23, label %if.entry, label %else

for.incr:                                         ; preds = %ifend15
  %24 = load ptr, ptr %tmp_it, align 8
  %25 = call ptr @ArrayIterator_ArgNode__next(ptr %24)
  store ptr %25, ptr %arg, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %26 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %26)
  %27 = load ptr, ptr %this, align 8
  %28 = load ptr, ptr %return_type_node, align 8
  %29 = call ptr @TypeChecker_check_type(ptr %27, ptr %28)
  store ptr %29, ptr %ret_type, align 8
  %30 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FunctionType, ptr null, i32 1) to i32))
  %31 = load ptr, ptr %arg_types, align 8
  %32 = load ptr, ptr %ret_type, align 8
  call void @FunctionType_constructor(ptr %30, ptr %31, ptr %32)
  ret ptr %30

if.entry:                                         ; preds = %for.body
  %33 = load ptr, ptr %this, align 8
  %34 = load ptr, ptr %arg, align 8
  %memberidx8 = getelementptr inbounds %ArgNode, ptr %34, i32 0, i32 1
  %35 = load ptr, ptr %memberidx8, align 8
  %36 = call ptr @TypeChecker_check_type(ptr %33, ptr %35)
  store ptr %36, ptr %arg_type, align 8
  %37 = load ptr, ptr %this, align 8
  %38 = call i1 @TypeChecker_has_errored(ptr %37)
  br i1 %38, label %if.entry9, label %else10

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else, %ifend11
  %39 = load ptr, ptr %arg, align 8
  %memberidx12 = getelementptr inbounds %ArgNode, ptr %39, i32 0, i32 2
  %40 = load ptr, ptr %memberidx12, align 8
  %41 = icmp ne ptr %40, null
  br i1 %41, label %if.entry13, label %else14

if.entry9:                                        ; preds = %if.entry
  ret ptr null

else10:                                           ; preds = %if.entry
  br label %ifend11

ifend11:                                          ; preds = %else10
  br label %ifend

if.entry13:                                       ; preds = %ifend
  %42 = load ptr, ptr %fnc_arg, align 8
  %memberidx16 = getelementptr inbounds %FunctionArg, ptr %42, i32 0, i32 6
  %43 = load ptr, ptr %this, align 8
  %44 = load ptr, ptr %arg_type, align 8
  %45 = load ptr, ptr %arg, align 8
  %memberidx17 = getelementptr inbounds %ArgNode, ptr %45, i32 0, i32 2
  %46 = load ptr, ptr %memberidx17, align 8
  %47 = call ptr @TypeChecker_check_expression(ptr %43, ptr %44, ptr %46)
  store ptr %47, ptr %memberidx16, align 8
  %48 = load ptr, ptr %this, align 8
  %49 = call i1 @TypeChecker_has_errored(ptr %48)
  br i1 %49, label %if.entry18, label %else19

else14:                                           ; preds = %ifend
  br label %ifend15

ifend15:                                          ; preds = %else14, %ifend24
  %50 = load ptr, ptr %args, align 8
  %51 = load ptr, ptr %fnc_arg, align 8
  call void @Array_FunctionArg____sl__(ptr %50, ptr %51)
  %52 = load ptr, ptr %fnc_arg, align 8
  %memberidx38 = getelementptr inbounds %Expression, ptr %52, i32 0, i32 3
  %53 = load ptr, ptr %arg_type, align 8
  store ptr %53, ptr %memberidx38, align 8
  %54 = load ptr, ptr %this, align 8
  %55 = load ptr, ptr %fnc_arg, align 8
  %memberidx39 = getelementptr inbounds %FunctionArg, ptr %55, i32 0, i32 5
  %56 = load ptr, ptr %memberidx39, align 8
  %57 = load ptr, ptr %fnc_arg, align 8
  %58 = load ptr, ptr %arg_type, align 8
  %59 = call ptr @TypeChecker_declare_var_within_current_scope(ptr %54, ptr %56, ptr %57, ptr %58)
  store ptr %59, ptr %var, align 8
  %60 = load ptr, ptr %fnc_arg, align 8
  %memberidx40 = getelementptr inbounds %FunctionArg, ptr %60, i32 0, i32 4
  %61 = load ptr, ptr %var, align 8
  %memberidx41 = getelementptr inbounds %Var, ptr %61, i32 0, i32 1
  %62 = load ptr, ptr %memberidx41, align 8
  store ptr %62, ptr %memberidx40, align 8
  %63 = load ptr, ptr %arg_types, align 8
  %64 = load ptr, ptr %arg_type, align 8
  call void @Array_Type____sl__(ptr %63, ptr %64)
  br label %for.incr

if.entry18:                                       ; preds = %if.entry13
  ret ptr null

else19:                                           ; preds = %if.entry13
  br label %ifend20

ifend20:                                          ; preds = %else19
  %65 = load ptr, ptr %arg_type, align 8
  %memberidx21 = getelementptr inbounds %Type, ptr %65, i32 0, i32 0
  %66 = load i64, ptr %memberidx21, align 4
  %67 = icmp eq i64 %66, 21
  br i1 %67, label %if.entry22, label %else23

if.entry22:                                       ; preds = %ifend20
  %68 = load ptr, ptr %fnc_arg, align 8
  %memberidx25 = getelementptr inbounds %FunctionArg, ptr %68, i32 0, i32 6
  %69 = load ptr, ptr %memberidx25, align 8
  %memberidx26 = getelementptr inbounds %Expression, ptr %69, i32 0, i32 3
  %70 = load ptr, ptr %memberidx26, align 8
  store ptr %70, ptr %arg_type, align 8
  br label %ifend24

else23:                                           ; preds = %ifend20
  %71 = load ptr, ptr %this, align 8
  %72 = load ptr, ptr %arg_type, align 8
  %73 = load ptr, ptr %fnc_arg, align 8
  %memberidx27 = getelementptr inbounds %FunctionArg, ptr %73, i32 0, i32 6
  %74 = load ptr, ptr %memberidx27, align 8
  %memberidx28 = getelementptr inbounds %Expression, ptr %74, i32 0, i32 3
  %75 = load ptr, ptr %memberidx28, align 8
  %76 = call i1 @TypeChecker_types_are_eq(ptr %71, ptr %72, ptr %75)
  %77 = xor i1 %76, true
  br i1 %77, label %if.entry29, label %else30

ifend24:                                          ; preds = %ifend31, %if.entry22
  br label %ifend15

if.entry29:                                       ; preds = %else23
  %78 = load ptr, ptr %this, align 8
  %79 = load ptr, ptr %this, align 8
  %80 = load ptr, ptr %arg_type, align 8
  %81 = call ptr @TypeChecker_dump_type(ptr %79, ptr %80)
  %82 = getelementptr inbounds %string, ptr %81, i32 0, i32 0
  %83 = load ptr, ptr %82, align 8
  %memberidx32 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %83, i32 0, i32 5
  %84 = load ptr, ptr %memberidx32, align 8
  %85 = call ptr %84(ptr %81)
  %86 = load ptr, ptr %this, align 8
  %87 = load ptr, ptr %fnc_arg, align 8
  %memberidx33 = getelementptr inbounds %FunctionArg, ptr %87, i32 0, i32 6
  %88 = load ptr, ptr %memberidx33, align 8
  %memberidx34 = getelementptr inbounds %Expression, ptr %88, i32 0, i32 3
  %89 = load ptr, ptr %memberidx34, align 8
  %90 = call ptr @TypeChecker_dump_type(ptr %86, ptr %89)
  %91 = getelementptr inbounds %string, ptr %90, i32 0, i32 0
  %92 = load ptr, ptr %91, align 8
  %memberidx35 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %92, i32 0, i32 5
  %93 = load ptr, ptr %memberidx35, align 8
  %94 = call ptr %93(ptr %90)
  %95 = alloca ptr, align 8
  %96 = call i64 (ptr, ptr, ...) @asprintf(ptr %95, ptr @350, ptr %85, ptr %94)
  %97 = load ptr, ptr %95, align 8
  %98 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %98, ptr %97, i64 %96)
  tail call void @free(ptr %85)
  tail call void @free(ptr %94)
  %99 = load ptr, ptr %arg, align 8
  %memberidx36 = getelementptr inbounds %ArgNode, ptr %99, i32 0, i32 2
  %100 = load ptr, ptr %memberidx36, align 8
  %memberidx37 = getelementptr inbounds %Node, ptr %100, i32 0, i32 0
  %101 = load ptr, ptr %memberidx37, align 8
  call void @TypeChecker_error(ptr %78, i64 5, ptr %98, ptr %101)
  br label %ifend31

else30:                                           ; preds = %else23
  br label %ifend31

ifend31:                                          ; preds = %else30, %if.entry29
  br label %ifend24
}

define ptr @TypeChecker_check_constructor_call(ptr %0, ptr %1, ptr %2, ptr %3) {
  %args = alloca ptr, align 8
  %class_id = alloca ptr, align 8
  %this = alloca ptr, align 8
  %argsp = alloca ptr, align 8
  %checked_args = alloca ptr, align 8
  %constructor = alloca ptr, align 8
  %field_id = alloca ptr, align 8
  %construct_type = alloca ptr, align 8
  %obj_class = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %class_id, align 8
  store ptr %2, ptr %args, align 8
  store ptr %3, ptr %argsp, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %5, i32 0, i32 0
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %class_id, align 8
  %8 = call ptr @get_class(ptr %6, ptr %7)
  store ptr %8, ptr %obj_class, align 8
  %9 = load ptr, ptr %obj_class, align 8
  %memberidx1 = getelementptr inbounds %Class, ptr %9, i32 0, i32 3
  %10 = load ptr, ptr %memberidx1, align 8
  store ptr %10, ptr %field_id, align 8
  %11 = load ptr, ptr %field_id, align 8
  %12 = icmp eq ptr %11, null
  br i1 %12, label %if.entry, label %else

if.entry:                                         ; preds = %4
  %13 = call ptr @string_from_bytes(ptr @467, i64 44)
  ret ptr %13

else:                                             ; preds = %4
  br label %ifend

ifend:                                            ; preds = %else
  %14 = load ptr, ptr %obj_class, align 8
  %memberidx2 = getelementptr inbounds %Class, ptr %14, i32 0, i32 5
  %15 = load ptr, ptr %memberidx2, align 8
  %16 = load ptr, ptr %field_id, align 8
  %memberidx3 = getelementptr inbounds %PropId, ptr %16, i32 0, i32 2
  %17 = load i64, ptr %memberidx3, align 4
  %18 = call ptr @Array_ClassMethod____getitem__(ptr %15, i64 %17)
  store ptr %18, ptr %constructor, align 8
  %19 = load ptr, ptr %constructor, align 8
  %memberidx4 = getelementptr inbounds %ClassMethod, ptr %19, i32 0, i32 4
  %20 = load ptr, ptr %memberidx4, align 8
  store ptr %20, ptr %construct_type, align 8
  %21 = load ptr, ptr %this, align 8
  %22 = load ptr, ptr %construct_type, align 8
  %23 = load ptr, ptr %constructor, align 8
  %memberidx5 = getelementptr inbounds %ClassMethod, ptr %23, i32 0, i32 6
  %24 = load ptr, ptr %memberidx5, align 8
  %25 = load ptr, ptr %args, align 8
  %26 = call ptr @TypeChecker_fill_in_call_args(ptr %21, ptr %22, ptr %24, ptr %25)
  store ptr %26, ptr %checked_args, align 8
  %27 = load ptr, ptr %this, align 8
  %28 = call i1 @TypeChecker_has_errored(ptr %27)
  br i1 %28, label %if.entry6, label %else7

if.entry6:                                        ; preds = %ifend
  ret ptr null

else7:                                            ; preds = %ifend
  br label %ifend8

ifend8:                                           ; preds = %else7
  %29 = load ptr, ptr %this, align 8
  %30 = load ptr, ptr %construct_type, align 8
  %31 = load ptr, ptr %checked_args, align 8
  %32 = call i64 @TypeChecker_check_function_call_args_match(ptr %29, ptr %30, ptr %31)
  store i64 %32, ptr %index, align 4
  %33 = load i64, ptr %index, align 4
  %34 = icmp sge i64 %33, -1
  br i1 %34, label %if.entry9, label %else10

if.entry9:                                        ; preds = %ifend8
  %35 = load i64, ptr %index, align 4
  %36 = icmp eq i64 %35, -1
  br i1 %36, label %if.entry12, label %else13

else10:                                           ; preds = %ifend8
  br label %ifend11

ifend11:                                          ; preds = %else10
  %37 = load ptr, ptr %argsp, align 8
  %38 = getelementptr inbounds ptr, ptr %37, i64 0
  %39 = load ptr, ptr %checked_args, align 8
  store ptr %39, ptr %38, align 8
  ret ptr null

if.entry12:                                       ; preds = %if.entry9
  %40 = load ptr, ptr %construct_type, align 8
  %memberidx15 = getelementptr inbounds %FunctionType, ptr %40, i32 0, i32 1
  %41 = load ptr, ptr %memberidx15, align 8
  %memberidx16 = getelementptr inbounds %Array_Type_, ptr %41, i32 0, i32 2
  %42 = load i64, ptr %memberidx16, align 4
  %43 = load ptr, ptr %args, align 8
  %memberidx17 = getelementptr inbounds %Array_ExpressionNode_, ptr %43, i32 0, i32 2
  %44 = load i64, ptr %memberidx17, align 4
  %45 = alloca ptr, align 8
  %46 = call i64 (ptr, ptr, ...) @asprintf(ptr %45, ptr @468, i64 %42, i64 %44)
  %47 = load ptr, ptr %45, align 8
  %48 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %48, ptr %47, i64 %46)
  ret ptr %48

else13:                                           ; preds = %if.entry9
  %49 = load ptr, ptr %this, align 8
  %50 = load ptr, ptr %construct_type, align 8
  %memberidx18 = getelementptr inbounds %FunctionType, ptr %50, i32 0, i32 1
  %51 = load ptr, ptr %memberidx18, align 8
  %52 = load i64, ptr %index, align 4
  %53 = call ptr @Array_Type____getitem__(ptr %51, i64 %52)
  %54 = call ptr @TypeChecker_dump_type(ptr %49, ptr %53)
  %55 = getelementptr inbounds %string, ptr %54, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %memberidx19 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %56, i32 0, i32 5
  %57 = load ptr, ptr %memberidx19, align 8
  %58 = call ptr %57(ptr %54)
  %59 = load ptr, ptr %this, align 8
  %60 = load ptr, ptr %checked_args, align 8
  %61 = load i64, ptr %index, align 4
  %62 = call ptr @Array_Expression____getitem__(ptr %60, i64 %61)
  %memberidx20 = getelementptr inbounds %Expression, ptr %62, i32 0, i32 3
  %63 = load ptr, ptr %memberidx20, align 8
  %64 = call ptr @TypeChecker_dump_type(ptr %59, ptr %63)
  %65 = getelementptr inbounds %string, ptr %64, i32 0, i32 0
  %66 = load ptr, ptr %65, align 8
  %memberidx21 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %66, i32 0, i32 5
  %67 = load ptr, ptr %memberidx21, align 8
  %68 = call ptr %67(ptr %64)
  %69 = load i64, ptr %index, align 4
  %70 = alloca ptr, align 8
  %71 = call i64 (ptr, ptr, ...) @asprintf(ptr %70, ptr @469, ptr %58, ptr %68, i64 %69)
  %72 = load ptr, ptr %70, align 8
  %73 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %73, ptr %72, i64 %71)
  tail call void @free(ptr %58)
  tail call void @free(ptr %68)
  ret ptr %73
}

define void @TypeChecker_declare_class_methods(ptr %0, ptr %1, ptr %2) {
  %this = alloca ptr, align 8
  %declared_class = alloca ptr, align 8
  %class_node = alloca ptr, align 8
  %current_vtable_index = alloca i64, align 8
  %name = alloca ptr, align 8
  %i = alloca i64, align 8
  %method = alloca ptr, align 8
  %method_node = alloca ptr, align 8
  %method_scope = alloca ptr, align 8
  %possible_prop_id = alloca ptr, align 8
  %args_num = alloca i64, align 8
  %parent_prop_type = alloca ptr, align 8
  %parent_prop_visibility = alloca i64, align 8
  %object_type = alloca ptr, align 8
  %this_const = alloca ptr, align 8
  %constructor_method = alloca ptr, align 8
  %constructor_type = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %declared_class, align 8
  store ptr %2, ptr %class_node, align 8
  %4 = load ptr, ptr %declared_class, align 8
  %memberidx = getelementptr inbounds %Class, ptr %4, i32 0, i32 8
  %5 = load i64, ptr %memberidx, align 4
  store i64 %5, ptr %current_vtable_index, align 4
  br label %for.entry

for.entry:                                        ; preds = %3
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load ptr, ptr %class_node, align 8
  %memberidx1 = getelementptr inbounds %ClassDeclarationNode, ptr %7, i32 0, i32 4
  %8 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_MethodNode_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %memberidx2, align 4
  %10 = icmp slt i64 %6, %9
  br i1 %10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load ptr, ptr %class_node, align 8
  %memberidx3 = getelementptr inbounds %ClassDeclarationNode, ptr %11, i32 0, i32 4
  %12 = load ptr, ptr %memberidx3, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_MethodNode____getitem__(ptr %12, i64 %13)
  store ptr %14, ptr %method_node, align 8
  %15 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ClassMethod, ptr null, i32 1) to i32))
  call void @ClassMethod_constructor(ptr %15)
  store ptr %15, ptr %method, align 8
  %16 = load ptr, ptr %method_node, align 8
  %memberidx4 = getelementptr inbounds %MethodNode, ptr %16, i32 0, i32 0
  %17 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %IdentifierToken, ptr %17, i32 0, i32 2
  %18 = load ptr, ptr %memberidx5, align 8
  store ptr %18, ptr %name, align 8
  %19 = load ptr, ptr %method, align 8
  %memberidx6 = getelementptr inbounds %ClassMethod, ptr %19, i32 0, i32 3
  %20 = load ptr, ptr %name, align 8
  store ptr %20, ptr %memberidx6, align 8
  %21 = load ptr, ptr %this, align 8
  %22 = call ptr @TypeChecker_create_child_scope_within_current_scope(ptr %21)
  store ptr %22, ptr %method_scope, align 8
  %23 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %TypeChecker, ptr %23, i32 0, i32 4
  %24 = load ptr, ptr %method_scope, align 8
  %memberidx8 = getelementptr inbounds %Scope, ptr %24, i32 0, i32 0
  %25 = load ptr, ptr %memberidx8, align 8
  store ptr %25, ptr %memberidx7, align 8
  %26 = load ptr, ptr %method, align 8
  %memberidx9 = getelementptr inbounds %ClassMethod, ptr %26, i32 0, i32 6
  %27 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_FunctionArg_, ptr null, i32 1) to i32))
  call void @Array_FunctionArg__constructor(ptr %27, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx10 = getelementptr inbounds %Array_FunctionArg_, ptr %27, i32 0, i32 1
  %28 = load ptr, ptr %memberidx10, align 8
  %memberidx11 = getelementptr inbounds %Array_FunctionArg_, ptr %27, i32 0, i32 2
  store i64 0, ptr %memberidx11, align 4
  store ptr %27, ptr %memberidx9, align 8
  %29 = load ptr, ptr %name, align 8
  %30 = call i1 @is_operator_overload_name(ptr %29)
  br i1 %30, label %if.entry, label %else

for.incr:                                         ; preds = %ifend99
  %31 = load i64, ptr %i, align 4
  %32 = add nsw i64 %31, 1
  store i64 %32, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void

if.entry:                                         ; preds = %for.body
  store i64 1, ptr %args_num, align 4
  %33 = load ptr, ptr %name, align 8
  %34 = call ptr @string_from_bytes(ptr @387, i64 8)
  %35 = call i1 @string___eq__(ptr %33, ptr %34)
  %36 = load ptr, ptr %name, align 8
  %37 = call ptr @string_from_bytes(ptr @388, i64 7)
  %38 = call i1 @string___eq__(ptr %36, ptr %37)
  %39 = or i1 %35, %38
  br i1 %39, label %if.entry12, label %else13

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else, %ifend31
  %40 = load ptr, ptr %method, align 8
  %memberidx35 = getelementptr inbounds %ClassMethod, ptr %40, i32 0, i32 7
  %41 = load ptr, ptr %method_node, align 8
  %memberidx36 = getelementptr inbounds %MethodNode, ptr %41, i32 0, i32 6
  %42 = load i1, ptr %memberidx36, align 1
  store i1 %42, ptr %memberidx35, align 1
  %43 = load ptr, ptr %method, align 8
  %memberidx37 = getelementptr inbounds %ClassMethod, ptr %43, i32 0, i32 1
  %44 = load ptr, ptr %method_node, align 8
  %memberidx38 = getelementptr inbounds %MethodNode, ptr %44, i32 0, i32 5
  %45 = load i1, ptr %memberidx38, align 1
  store i1 %45, ptr %memberidx37, align 1
  %46 = load ptr, ptr %method, align 8
  %memberidx39 = getelementptr inbounds %ClassMethod, ptr %46, i32 0, i32 2
  %47 = load ptr, ptr %method_node, align 8
  %memberidx40 = getelementptr inbounds %MethodNode, ptr %47, i32 0, i32 3
  %48 = load i64, ptr %memberidx40, align 4
  store i64 %48, ptr %memberidx39, align 4
  %49 = load ptr, ptr %method, align 8
  %memberidx41 = getelementptr inbounds %ClassMethod, ptr %49, i32 0, i32 4
  %50 = load ptr, ptr %this, align 8
  %51 = load ptr, ptr %method_node, align 8
  %memberidx42 = getelementptr inbounds %MethodNode, ptr %51, i32 0, i32 1
  %52 = load ptr, ptr %memberidx42, align 8
  %53 = load ptr, ptr %method_node, align 8
  %memberidx43 = getelementptr inbounds %MethodNode, ptr %53, i32 0, i32 4
  %54 = load ptr, ptr %memberidx43, align 8
  %55 = load ptr, ptr %method, align 8
  %memberidx44 = getelementptr inbounds %ClassMethod, ptr %55, i32 0, i32 6
  %56 = load ptr, ptr %memberidx44, align 8
  %57 = call ptr @TypeChecker_init_function_signature(ptr %50, ptr %52, ptr %54, ptr %56)
  store ptr %57, ptr %memberidx41, align 8
  %58 = load ptr, ptr %name, align 8
  %59 = call ptr @string_from_bytes(ptr @387, i64 8)
  %60 = call i1 @string___eq__(ptr %58, ptr %59)
  br i1 %60, label %if.entry45, label %else46

if.entry12:                                       ; preds = %if.entry
  store i64 0, ptr %args_num, align 4
  br label %ifend14

else13:                                           ; preds = %if.entry
  %61 = load ptr, ptr %name, align 8
  %62 = call ptr @string_from_bytes(ptr @372, i64 11)
  %63 = call i1 @string___eq__(ptr %61, ptr %62)
  br i1 %63, label %if.entry15, label %else16

ifend14:                                          ; preds = %ifend17, %if.entry12
  %64 = load ptr, ptr %method_node, align 8
  %memberidx18 = getelementptr inbounds %MethodNode, ptr %64, i32 0, i32 1
  %65 = load ptr, ptr %memberidx18, align 8
  %memberidx19 = getelementptr inbounds %Array_ArgNode_, ptr %65, i32 0, i32 2
  %66 = load i64, ptr %memberidx19, align 4
  %67 = load i64, ptr %args_num, align 4
  %68 = icmp ne i64 %66, %67
  br i1 %68, label %if.entry20, label %else21

if.entry15:                                       ; preds = %else13
  store i64 2, ptr %args_num, align 4
  br label %ifend17

else16:                                           ; preds = %else13
  br label %ifend17

ifend17:                                          ; preds = %else16, %if.entry15
  br label %ifend14

if.entry20:                                       ; preds = %ifend14
  %69 = load ptr, ptr %this, align 8
  %70 = load i64, ptr %args_num, align 4
  %71 = load ptr, ptr %name, align 8
  %72 = getelementptr inbounds %string, ptr %71, i32 0, i32 0
  %73 = load ptr, ptr %72, align 8
  %memberidx23 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %73, i32 0, i32 5
  %74 = load ptr, ptr %memberidx23, align 8
  %75 = call ptr %74(ptr %71)
  %76 = load ptr, ptr %method_node, align 8
  %memberidx24 = getelementptr inbounds %MethodNode, ptr %76, i32 0, i32 1
  %77 = load ptr, ptr %memberidx24, align 8
  %memberidx25 = getelementptr inbounds %Array_ArgNode_, ptr %77, i32 0, i32 2
  %78 = load i64, ptr %memberidx25, align 4
  %79 = alloca ptr, align 8
  %80 = call i64 (ptr, ptr, ...) @asprintf(ptr %79, ptr @397, i64 %70, ptr %75, i64 %78)
  %81 = load ptr, ptr %79, align 8
  %82 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %82, ptr %81, i64 %80)
  tail call void @free(ptr %75)
  %83 = load ptr, ptr %method_node, align 8
  %memberidx26 = getelementptr inbounds %MethodNode, ptr %83, i32 0, i32 0
  %84 = load ptr, ptr %memberidx26, align 8
  %memberidx27 = getelementptr inbounds %Token, ptr %84, i32 0, i32 1
  %85 = load ptr, ptr %memberidx27, align 8
  call void @TypeChecker_error(ptr %69, i64 4, ptr %82, ptr %85)
  ret void

else21:                                           ; preds = %ifend14
  br label %ifend22

ifend22:                                          ; preds = %else21
  %86 = load ptr, ptr %method_node, align 8
  %memberidx28 = getelementptr inbounds %MethodNode, ptr %86, i32 0, i32 5
  %87 = load i1, ptr %memberidx28, align 1
  br i1 %87, label %if.entry29, label %else30

if.entry29:                                       ; preds = %ifend22
  %88 = load ptr, ptr %this, align 8
  %89 = load ptr, ptr %name, align 8
  %90 = getelementptr inbounds %string, ptr %89, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  %memberidx32 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %91, i32 0, i32 5
  %92 = load ptr, ptr %memberidx32, align 8
  %93 = call ptr %92(ptr %89)
  %94 = alloca ptr, align 8
  %95 = call i64 (ptr, ptr, ...) @asprintf(ptr %94, ptr @398, ptr %93)
  %96 = load ptr, ptr %94, align 8
  %97 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %97, ptr %96, i64 %95)
  tail call void @free(ptr %93)
  %98 = load ptr, ptr %method_node, align 8
  %memberidx33 = getelementptr inbounds %MethodNode, ptr %98, i32 0, i32 0
  %99 = load ptr, ptr %memberidx33, align 8
  %memberidx34 = getelementptr inbounds %Token, ptr %99, i32 0, i32 1
  %100 = load ptr, ptr %memberidx34, align 8
  call void @TypeChecker_error(ptr %88, i64 4, ptr %97, ptr %100)
  ret void

else30:                                           ; preds = %ifend22
  br label %ifend31

ifend31:                                          ; preds = %else30
  br label %ifend

if.entry45:                                       ; preds = %ifend
  %101 = load ptr, ptr %this, align 8
  %102 = load ptr, ptr %method, align 8
  %memberidx48 = getelementptr inbounds %ClassMethod, ptr %102, i32 0, i32 4
  %103 = load ptr, ptr %memberidx48, align 8
  %memberidx49 = getelementptr inbounds %FunctionType, ptr %103, i32 0, i32 2
  %104 = load ptr, ptr %memberidx49, align 8
  %105 = call i1 @TypeChecker_is_iteratable(ptr %101, ptr %104)
  %106 = xor i1 %105, true
  br i1 %106, label %if.entry50, label %else51

else46:                                           ; preds = %ifend
  br label %ifend47

ifend47:                                          ; preds = %else46, %ifend52
  %107 = load ptr, ptr %declared_class, align 8
  %memberidx55 = getelementptr inbounds %Class, ptr %107, i32 0, i32 6
  %108 = load ptr, ptr %memberidx55, align 8
  %109 = load ptr, ptr %name, align 8
  %110 = call ptr @Map_string_PropId____getitem__(ptr %108, ptr %109)
  store ptr %110, ptr %possible_prop_id, align 8
  %111 = load ptr, ptr %possible_prop_id, align 8
  %112 = icmp ne ptr %111, null
  br i1 %112, label %if.entry56, label %else57

if.entry50:                                       ; preds = %if.entry45
  %113 = load ptr, ptr %this, align 8
  %114 = call ptr @string_from_bytes(ptr @399, i64 74)
  %115 = load ptr, ptr %method_node, align 8
  %memberidx53 = getelementptr inbounds %MethodNode, ptr %115, i32 0, i32 0
  %116 = load ptr, ptr %memberidx53, align 8
  %memberidx54 = getelementptr inbounds %Token, ptr %116, i32 0, i32 1
  %117 = load ptr, ptr %memberidx54, align 8
  call void @TypeChecker_error(ptr %113, i64 5, ptr %114, ptr %117)
  ret void

else51:                                           ; preds = %if.entry45
  br label %ifend52

ifend52:                                          ; preds = %else51
  br label %ifend47

if.entry56:                                       ; preds = %ifend47
  %118 = load ptr, ptr %possible_prop_id, align 8
  %memberidx59 = getelementptr inbounds %PropId, ptr %118, i32 0, i32 1
  %119 = load ptr, ptr %memberidx59, align 8
  %120 = load ptr, ptr %declared_class, align 8
  %memberidx60 = getelementptr inbounds %Class, ptr %120, i32 0, i32 0
  %121 = load ptr, ptr %memberidx60, align 8
  %122 = icmp eq ptr %119, %121
  br i1 %122, label %if.entry61, label %else62

else57:                                           ; preds = %ifend47
  %123 = load ptr, ptr %method, align 8
  %memberidx93 = getelementptr inbounds %ClassMethod, ptr %123, i32 0, i32 9
  %124 = load i64, ptr %current_vtable_index, align 4
  store i64 %124, ptr %memberidx93, align 4
  br label %ifend58

ifend58:                                          ; preds = %else57, %ifend84
  %125 = load ptr, ptr %method, align 8
  %memberidx94 = getelementptr inbounds %ClassMethod, ptr %125, i32 0, i32 0
  %126 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%PropId, ptr null, i32 1) to i32))
  %127 = load ptr, ptr %declared_class, align 8
  %memberidx95 = getelementptr inbounds %Class, ptr %127, i32 0, i32 0
  %128 = load ptr, ptr %memberidx95, align 8
  %129 = load i64, ptr %i, align 4
  call void @PropId_constructor(ptr %126, i64 0, ptr %128, i64 %129)
  store ptr %126, ptr %memberidx94, align 8
  %130 = load ptr, ptr %method_node, align 8
  %memberidx96 = getelementptr inbounds %MethodNode, ptr %130, i32 0, i32 5
  %131 = load i1, ptr %memberidx96, align 1
  br i1 %131, label %if.entry97, label %else98

if.entry61:                                       ; preds = %if.entry56
  %132 = load ptr, ptr %this, align 8
  %133 = load ptr, ptr %name, align 8
  %134 = getelementptr inbounds %string, ptr %133, i32 0, i32 0
  %135 = load ptr, ptr %134, align 8
  %memberidx64 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %135, i32 0, i32 5
  %136 = load ptr, ptr %memberidx64, align 8
  %137 = call ptr %136(ptr %133)
  %138 = load ptr, ptr %declared_class, align 8
  %memberidx65 = getelementptr inbounds %Class, ptr %138, i32 0, i32 1
  %139 = load ptr, ptr %memberidx65, align 8
  %140 = getelementptr inbounds %string, ptr %139, i32 0, i32 0
  %141 = load ptr, ptr %140, align 8
  %memberidx66 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %141, i32 0, i32 5
  %142 = load ptr, ptr %memberidx66, align 8
  %143 = call ptr %142(ptr %139)
  %144 = alloca ptr, align 8
  %145 = call i64 (ptr, ptr, ...) @asprintf(ptr %144, ptr @400, ptr %137, ptr %143)
  %146 = load ptr, ptr %144, align 8
  %147 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %147, ptr %146, i64 %145)
  tail call void @free(ptr %137)
  tail call void @free(ptr %143)
  %148 = load ptr, ptr %method_node, align 8
  %memberidx67 = getelementptr inbounds %MethodNode, ptr %148, i32 0, i32 0
  %149 = load ptr, ptr %memberidx67, align 8
  %memberidx68 = getelementptr inbounds %Token, ptr %149, i32 0, i32 1
  %150 = load ptr, ptr %memberidx68, align 8
  call void @TypeChecker_error(ptr %132, i64 1, ptr %147, ptr %150)
  ret void

else62:                                           ; preds = %if.entry56
  br label %ifend63

ifend63:                                          ; preds = %else62
  %151 = load ptr, ptr %this, align 8
  %memberidx69 = getelementptr inbounds %TypeChecker, ptr %151, i32 0, i32 0
  %152 = load ptr, ptr %memberidx69, align 8
  %153 = load ptr, ptr %possible_prop_id, align 8
  %154 = call ptr @get_class_prop_type(ptr %152, ptr %153)
  store ptr %154, ptr %parent_prop_type, align 8
  %155 = load ptr, ptr %this, align 8
  %memberidx70 = getelementptr inbounds %TypeChecker, ptr %155, i32 0, i32 0
  %156 = load ptr, ptr %memberidx70, align 8
  %157 = load ptr, ptr %possible_prop_id, align 8
  %158 = call i64 @get_class_prop_visibility(ptr %156, ptr %157)
  store i64 %158, ptr %parent_prop_visibility, align 4
  %159 = load ptr, ptr %this, align 8
  %160 = load ptr, ptr %parent_prop_type, align 8
  %161 = load ptr, ptr %method, align 8
  %memberidx71 = getelementptr inbounds %ClassMethod, ptr %161, i32 0, i32 4
  %162 = load ptr, ptr %memberidx71, align 8
  %163 = call i1 @TypeChecker_types_are_eq(ptr %159, ptr %160, ptr %162)
  %164 = xor i1 %163, true
  br i1 %164, label %if.entry72, label %else73

if.entry72:                                       ; preds = %ifend63
  %165 = load ptr, ptr %this, align 8
  %166 = load ptr, ptr %name, align 8
  %167 = getelementptr inbounds %string, ptr %166, i32 0, i32 0
  %168 = load ptr, ptr %167, align 8
  %memberidx75 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %168, i32 0, i32 5
  %169 = load ptr, ptr %memberidx75, align 8
  %170 = call ptr %169(ptr %166)
  %171 = load ptr, ptr %declared_class, align 8
  %memberidx76 = getelementptr inbounds %Class, ptr %171, i32 0, i32 1
  %172 = load ptr, ptr %memberidx76, align 8
  %173 = getelementptr inbounds %string, ptr %172, i32 0, i32 0
  %174 = load ptr, ptr %173, align 8
  %memberidx77 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %174, i32 0, i32 5
  %175 = load ptr, ptr %memberidx77, align 8
  %176 = call ptr %175(ptr %172)
  %177 = load ptr, ptr %this, align 8
  %178 = load ptr, ptr %parent_prop_type, align 8
  %179 = call ptr @TypeChecker_dump_type(ptr %177, ptr %178)
  %180 = getelementptr inbounds %string, ptr %179, i32 0, i32 0
  %181 = load ptr, ptr %180, align 8
  %memberidx78 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %181, i32 0, i32 5
  %182 = load ptr, ptr %memberidx78, align 8
  %183 = call ptr %182(ptr %179)
  %184 = alloca ptr, align 8
  %185 = call i64 (ptr, ptr, ...) @asprintf(ptr %184, ptr @401, ptr %170, ptr %176, ptr %183)
  %186 = load ptr, ptr %184, align 8
  %187 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %187, ptr %186, i64 %185)
  tail call void @free(ptr %170)
  tail call void @free(ptr %176)
  tail call void @free(ptr %183)
  %188 = load ptr, ptr %method_node, align 8
  %memberidx79 = getelementptr inbounds %MethodNode, ptr %188, i32 0, i32 0
  %189 = load ptr, ptr %memberidx79, align 8
  %memberidx80 = getelementptr inbounds %Token, ptr %189, i32 0, i32 1
  %190 = load ptr, ptr %memberidx80, align 8
  call void @TypeChecker_error(ptr %165, i64 5, ptr %187, ptr %190)
  ret void

else73:                                           ; preds = %ifend63
  br label %ifend74

ifend74:                                          ; preds = %else73
  %191 = load ptr, ptr %method, align 8
  %memberidx81 = getelementptr inbounds %ClassMethod, ptr %191, i32 0, i32 2
  %192 = load i64, ptr %memberidx81, align 4
  %193 = load i64, ptr %parent_prop_visibility, align 4
  %194 = icmp ne i64 %192, %193
  br i1 %194, label %if.entry82, label %else83

if.entry82:                                       ; preds = %ifend74
  %195 = load ptr, ptr %this, align 8
  %196 = load ptr, ptr %name, align 8
  %197 = getelementptr inbounds %string, ptr %196, i32 0, i32 0
  %198 = load ptr, ptr %197, align 8
  %memberidx85 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %198, i32 0, i32 5
  %199 = load ptr, ptr %memberidx85, align 8
  %200 = call ptr %199(ptr %196)
  %201 = load ptr, ptr %declared_class, align 8
  %memberidx86 = getelementptr inbounds %Class, ptr %201, i32 0, i32 1
  %202 = load ptr, ptr %memberidx86, align 8
  %203 = getelementptr inbounds %string, ptr %202, i32 0, i32 0
  %204 = load ptr, ptr %203, align 8
  %memberidx87 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %204, i32 0, i32 5
  %205 = load ptr, ptr %memberidx87, align 8
  %206 = call ptr %205(ptr %202)
  %207 = load i64, ptr %parent_prop_visibility, align 4
  %208 = call ptr @dump_access(i64 %207)
  %209 = getelementptr inbounds %string, ptr %208, i32 0, i32 0
  %210 = load ptr, ptr %209, align 8
  %memberidx88 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %210, i32 0, i32 5
  %211 = load ptr, ptr %memberidx88, align 8
  %212 = call ptr %211(ptr %208)
  %213 = alloca ptr, align 8
  %214 = call i64 (ptr, ptr, ...) @asprintf(ptr %213, ptr @402, ptr %200, ptr %206, ptr %212)
  %215 = load ptr, ptr %213, align 8
  %216 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %216, ptr %215, i64 %214)
  tail call void @free(ptr %200)
  tail call void @free(ptr %206)
  tail call void @free(ptr %212)
  %217 = load ptr, ptr %method_node, align 8
  %memberidx89 = getelementptr inbounds %MethodNode, ptr %217, i32 0, i32 0
  %218 = load ptr, ptr %memberidx89, align 8
  %memberidx90 = getelementptr inbounds %Token, ptr %218, i32 0, i32 1
  %219 = load ptr, ptr %memberidx90, align 8
  call void @TypeChecker_error(ptr %195, i64 4, ptr %216, ptr %219)
  ret void

else83:                                           ; preds = %ifend74
  br label %ifend84

ifend84:                                          ; preds = %else83
  %220 = load ptr, ptr %method, align 8
  %memberidx91 = getelementptr inbounds %ClassMethod, ptr %220, i32 0, i32 9
  %221 = load ptr, ptr %this, align 8
  %memberidx92 = getelementptr inbounds %TypeChecker, ptr %221, i32 0, i32 0
  %222 = load ptr, ptr %memberidx92, align 8
  %223 = load ptr, ptr %possible_prop_id, align 8
  %224 = call i64 @get_vtable_index(ptr %222, ptr %223)
  store i64 %224, ptr %memberidx91, align 4
  br label %ifend58

if.entry97:                                       ; preds = %ifend58
  %225 = load ptr, ptr %method_node, align 8
  %memberidx100 = getelementptr inbounds %MethodNode, ptr %225, i32 0, i32 6
  %226 = load i1, ptr %memberidx100, align 1
  br i1 %226, label %if.entry101, label %else102

else98:                                           ; preds = %ifend58
  %227 = load ptr, ptr %method, align 8
  %memberidx114 = getelementptr inbounds %ClassMethod, ptr %227, i32 0, i32 3
  %228 = load ptr, ptr %memberidx114, align 8
  %229 = call ptr @string_from_bytes(ptr @404, i64 11)
  %230 = call i1 @string___eq__(ptr %228, ptr %229)
  br i1 %230, label %if.entry115, label %else116

ifend99:                                          ; preds = %ifend142, %ifend109
  %231 = load ptr, ptr %method, align 8
  %memberidx150 = getelementptr inbounds %ClassMethod, ptr %231, i32 0, i32 8
  %232 = load ptr, ptr %method_scope, align 8
  %memberidx151 = getelementptr inbounds %Scope, ptr %232, i32 0, i32 0
  %233 = load ptr, ptr %memberidx151, align 8
  store ptr %233, ptr %memberidx150, align 8
  %234 = load ptr, ptr %declared_class, align 8
  %memberidx152 = getelementptr inbounds %Class, ptr %234, i32 0, i32 5
  %235 = load ptr, ptr %memberidx152, align 8
  %236 = load ptr, ptr %method, align 8
  call void @Array_ClassMethod____sl__(ptr %235, ptr %236)
  %237 = load ptr, ptr %this, align 8
  %memberidx153 = getelementptr inbounds %TypeChecker, ptr %237, i32 0, i32 4
  %238 = load ptr, ptr %method_scope, align 8
  %memberidx154 = getelementptr inbounds %Scope, ptr %238, i32 0, i32 5
  %239 = load ptr, ptr %memberidx154, align 8
  store ptr %239, ptr %memberidx153, align 8
  br label %for.incr

if.entry101:                                      ; preds = %if.entry97
  %240 = load ptr, ptr %this, align 8
  %241 = call ptr @string_from_bytes(ptr @403, i64 31)
  %242 = load ptr, ptr %method_node, align 8
  %memberidx104 = getelementptr inbounds %MethodNode, ptr %242, i32 0, i32 0
  %243 = load ptr, ptr %memberidx104, align 8
  %memberidx105 = getelementptr inbounds %Token, ptr %243, i32 0, i32 1
  %244 = load ptr, ptr %memberidx105, align 8
  call void @TypeChecker_error(ptr %240, i64 4, ptr %241, ptr %244)
  ret void

else102:                                          ; preds = %if.entry97
  br label %ifend103

ifend103:                                         ; preds = %else102
  %245 = load ptr, ptr %method, align 8
  %memberidx106 = getelementptr inbounds %ClassMethod, ptr %245, i32 0, i32 3
  %246 = load ptr, ptr %memberidx106, align 8
  %247 = call ptr @string_from_bytes(ptr @404, i64 11)
  %248 = call i1 @string___eq__(ptr %246, ptr %247)
  br i1 %248, label %if.entry107, label %else108

if.entry107:                                      ; preds = %ifend103
  %249 = load ptr, ptr %this, align 8
  %250 = call ptr @string_from_bytes(ptr @405, i64 33)
  %251 = load ptr, ptr %method_node, align 8
  %memberidx110 = getelementptr inbounds %MethodNode, ptr %251, i32 0, i32 0
  %252 = load ptr, ptr %memberidx110, align 8
  %memberidx111 = getelementptr inbounds %Token, ptr %252, i32 0, i32 1
  %253 = load ptr, ptr %memberidx111, align 8
  call void @TypeChecker_error(ptr %249, i64 4, ptr %250, ptr %253)
  ret void

else108:                                          ; preds = %ifend103
  br label %ifend109

ifend109:                                         ; preds = %else108
  %254 = load ptr, ptr %declared_class, align 8
  %memberidx112 = getelementptr inbounds %Class, ptr %254, i32 0, i32 7
  %255 = load ptr, ptr %memberidx112, align 8
  %256 = load ptr, ptr %name, align 8
  %257 = load ptr, ptr %method, align 8
  %memberidx113 = getelementptr inbounds %ClassMethod, ptr %257, i32 0, i32 0
  %258 = load ptr, ptr %memberidx113, align 8
  call void @Map_string_PropId____setitem__(ptr %255, ptr %256, ptr %258)
  br label %ifend99

if.entry115:                                      ; preds = %else98
  %259 = load ptr, ptr %method_node, align 8
  %memberidx118 = getelementptr inbounds %MethodNode, ptr %259, i32 0, i32 6
  %260 = load i1, ptr %memberidx118, align 1
  br i1 %260, label %if.entry119, label %else120

else116:                                          ; preds = %else98
  %261 = load ptr, ptr %method, align 8
  %memberidx126 = getelementptr inbounds %ClassMethod, ptr %261, i32 0, i32 2
  %262 = load i64, ptr %memberidx126, align 4
  %263 = icmp ne i64 %262, 1
  br i1 %263, label %if.entry127, label %else128

ifend117:                                         ; preds = %ifend129, %ifend121
  %264 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ObjectType, ptr null, i32 1) to i32))
  %265 = load ptr, ptr %declared_class, align 8
  %memberidx138 = getelementptr inbounds %Class, ptr %265, i32 0, i32 0
  %266 = load ptr, ptr %memberidx138, align 8
  call void @ObjectType_constructor(ptr %264, ptr %266)
  store ptr %264, ptr %object_type, align 8
  %267 = load ptr, ptr %this, align 8
  %268 = call ptr @string_from_bytes(ptr @301, i64 4)
  %269 = load ptr, ptr %object_type, align 8
  %270 = call ptr @TypeChecker_declare_const_within_current_scope(ptr %267, ptr %268, ptr null, ptr %269)
  store ptr %270, ptr %this_const, align 8
  %271 = load ptr, ptr %declared_class, align 8
  %memberidx139 = getelementptr inbounds %Class, ptr %271, i32 0, i32 2
  %272 = load ptr, ptr %memberidx139, align 8
  %273 = icmp ne ptr %272, null
  br i1 %273, label %if.entry140, label %else141

if.entry119:                                      ; preds = %if.entry115
  %274 = load ptr, ptr %this, align 8
  %275 = call ptr @string_from_bytes(ptr @406, i64 35)
  %276 = load ptr, ptr %method_node, align 8
  %memberidx122 = getelementptr inbounds %MethodNode, ptr %276, i32 0, i32 0
  %277 = load ptr, ptr %memberidx122, align 8
  %memberidx123 = getelementptr inbounds %Token, ptr %277, i32 0, i32 1
  %278 = load ptr, ptr %memberidx123, align 8
  call void @TypeChecker_error(ptr %274, i64 4, ptr %275, ptr %278)
  ret void

else120:                                          ; preds = %if.entry115
  br label %ifend121

ifend121:                                         ; preds = %else120
  %279 = load ptr, ptr %declared_class, align 8
  %memberidx124 = getelementptr inbounds %Class, ptr %279, i32 0, i32 3
  %280 = load ptr, ptr %method, align 8
  %memberidx125 = getelementptr inbounds %ClassMethod, ptr %280, i32 0, i32 0
  %281 = load ptr, ptr %memberidx125, align 8
  store ptr %281, ptr %memberidx124, align 8
  br label %ifend117

if.entry127:                                      ; preds = %else116
  %282 = load i64, ptr %current_vtable_index, align 4
  %283 = add nsw i64 %282, 1
  store i64 %283, ptr %current_vtable_index, align 4
  br label %ifend129

else128:                                          ; preds = %else116
  %284 = load ptr, ptr %method_node, align 8
  %memberidx130 = getelementptr inbounds %MethodNode, ptr %284, i32 0, i32 6
  %285 = load i1, ptr %memberidx130, align 1
  br i1 %285, label %if.entry131, label %else132

ifend129:                                         ; preds = %ifend133, %if.entry127
  %286 = load ptr, ptr %declared_class, align 8
  %memberidx136 = getelementptr inbounds %Class, ptr %286, i32 0, i32 6
  %287 = load ptr, ptr %memberidx136, align 8
  %288 = load ptr, ptr %name, align 8
  %289 = load ptr, ptr %method, align 8
  %memberidx137 = getelementptr inbounds %ClassMethod, ptr %289, i32 0, i32 0
  %290 = load ptr, ptr %memberidx137, align 8
  call void @Map_string_PropId____setitem__(ptr %287, ptr %288, ptr %290)
  br label %ifend117

if.entry131:                                      ; preds = %else128
  %291 = load ptr, ptr %this, align 8
  %292 = call ptr @string_from_bytes(ptr @407, i64 58)
  %293 = load ptr, ptr %method_node, align 8
  %memberidx134 = getelementptr inbounds %MethodNode, ptr %293, i32 0, i32 0
  %294 = load ptr, ptr %memberidx134, align 8
  %memberidx135 = getelementptr inbounds %Token, ptr %294, i32 0, i32 1
  %295 = load ptr, ptr %memberidx135, align 8
  call void @TypeChecker_error(ptr %291, i64 4, ptr %292, ptr %295)
  ret void

else132:                                          ; preds = %else128
  br label %ifend133

ifend133:                                         ; preds = %else132
  br label %ifend129

if.entry140:                                      ; preds = %ifend117
  %296 = load ptr, ptr %this, align 8
  %memberidx143 = getelementptr inbounds %TypeChecker, ptr %296, i32 0, i32 0
  %297 = load ptr, ptr %memberidx143, align 8
  %298 = load ptr, ptr %declared_class, align 8
  %memberidx144 = getelementptr inbounds %Class, ptr %298, i32 0, i32 2
  %299 = load ptr, ptr %memberidx144, align 8
  %300 = call ptr @get_class_from_type(ptr %297, ptr %299)
  %memberidx145 = getelementptr inbounds %Class, ptr %300, i32 0, i32 3
  %301 = load ptr, ptr %memberidx145, align 8
  store ptr %301, ptr %constructor_method, align 8
  %302 = load ptr, ptr %constructor_method, align 8
  %303 = icmp ne ptr %302, null
  br i1 %303, label %if.entry146, label %else147

else141:                                          ; preds = %ifend117
  br label %ifend142

ifend142:                                         ; preds = %else141, %ifend148
  br label %ifend99

if.entry146:                                      ; preds = %if.entry140
  %304 = load ptr, ptr %this, align 8
  %memberidx149 = getelementptr inbounds %TypeChecker, ptr %304, i32 0, i32 0
  %305 = load ptr, ptr %memberidx149, align 8
  %306 = load ptr, ptr %constructor_method, align 8
  %307 = call ptr @get_class_prop_type(ptr %305, ptr %306)
  store ptr %307, ptr %constructor_type, align 8
  %308 = load ptr, ptr %this, align 8
  %309 = call ptr @string_from_bytes(ptr @408, i64 5)
  %310 = load ptr, ptr %constructor_type, align 8
  %311 = call ptr @TypeChecker_declare_const_within_current_scope(ptr %308, ptr %309, ptr null, ptr %310)
  br label %ifend148

else147:                                          ; preds = %if.entry140
  br label %ifend148

ifend148:                                         ; preds = %else147, %if.entry146
  br label %ifend142
}

define void @TupleExpression_constructor(ptr %0, ptr %1) {
  %elements = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Expression_constructor, ptr %super, align 8
  store ptr %1, ptr %elements, align 8
  %3 = load ptr, ptr %super, align 8
  call void %3(ptr %0, i64 7)
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TupleExpression, ptr %4, i32 0, i32 4
  %5 = load ptr, ptr %elements, align 8
  store ptr %5, ptr %memberidx, align 8
  ret void
}

define ptr @TypeChecker_check_tuple_expression(ptr %0, ptr %1, ptr %2) {
  %expected_type = alloca ptr, align 8
  %this = alloca ptr, align 8
  %tuple_node = alloca ptr, align 8
  %elements = alloca ptr, align 8
  %expected_tuple_type = alloca ptr, align 8
  %actual_tuple_type = alloca ptr, align 8
  %unknown_ty = alloca ptr, align 8
  %is_constant = alloca i1, align 1
  %tuple_expression = alloca ptr, align 8
  %expected_element_type = alloca ptr, align 8
  %i = alloca i64, align 8
  %expression = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %expected_type, align 8
  store ptr %2, ptr %tuple_node, align 8
  %4 = alloca %Type, align 8
  call void @Type_constructor(ptr %4, i64 21)
  store ptr %4, ptr %unknown_ty, align 8
  store ptr null, ptr %expected_tuple_type, align 8
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %5, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %5, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %5, ptr %elements, align 8
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%TupleType, ptr null, i32 1) to i32))
  call void @TupleType_constructor(ptr %7)
  store ptr %7, ptr %actual_tuple_type, align 8
  store i1 true, ptr %is_constant, align 1
  %8 = load ptr, ptr %expected_type, align 8
  %memberidx2 = getelementptr inbounds %Type, ptr %8, i32 0, i32 0
  %9 = load i64, ptr %memberidx2, align 4
  %10 = icmp eq i64 %9, 15
  br i1 %10, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %11 = load ptr, ptr %expected_type, align 8
  store ptr %11, ptr %expected_tuple_type, align 8
  br label %ifend

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  br label %for.entry

for.entry:                                        ; preds = %ifend
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %12 = load i64, ptr %i, align 4
  %13 = load ptr, ptr %tuple_node, align 8
  %memberidx3 = getelementptr inbounds %TupleExpressionNode, ptr %13, i32 0, i32 3
  %14 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Array_ExpressionNode_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = icmp slt i64 %12, %15
  br i1 %16, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load ptr, ptr %unknown_ty, align 8
  store ptr %17, ptr %expected_element_type, align 8
  %18 = load ptr, ptr %expected_tuple_type, align 8
  %19 = icmp ne ptr %18, null
  br i1 %19, label %if.entry5, label %else6

for.incr:                                         ; preds = %ifend17
  %20 = load i64, ptr %i, align 4
  %21 = add nsw i64 %20, 1
  store i64 %21, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %22 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%TupleExpression, ptr null, i32 1) to i32))
  %23 = load ptr, ptr %elements, align 8
  call void @TupleExpression_constructor(ptr %22, ptr %23)
  store ptr %22, ptr %tuple_expression, align 8
  %24 = load ptr, ptr %tuple_expression, align 8
  %memberidx21 = getelementptr inbounds %Expression, ptr %24, i32 0, i32 1
  %25 = load i1, ptr %is_constant, align 1
  store i1 %25, ptr %memberidx21, align 1
  %26 = load ptr, ptr %tuple_expression, align 8
  %memberidx22 = getelementptr inbounds %Expression, ptr %26, i32 0, i32 3
  %27 = load ptr, ptr %actual_tuple_type, align 8
  store ptr %27, ptr %memberidx22, align 8
  %28 = load ptr, ptr %tuple_expression, align 8
  ret ptr %28

if.entry5:                                        ; preds = %for.body
  %29 = load i64, ptr %i, align 4
  %30 = load ptr, ptr %expected_tuple_type, align 8
  %memberidx8 = getelementptr inbounds %TupleType, ptr %30, i32 0, i32 1
  %31 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Array_Type_, ptr %31, i32 0, i32 2
  %32 = load i64, ptr %memberidx9, align 4
  %33 = icmp slt i64 %29, %32
  br i1 %33, label %if.entry10, label %else11

else6:                                            ; preds = %for.body
  br label %ifend7

ifend7:                                           ; preds = %else6, %ifend12
  %34 = load ptr, ptr %this, align 8
  %35 = load ptr, ptr %expected_element_type, align 8
  %36 = load ptr, ptr %tuple_node, align 8
  %memberidx14 = getelementptr inbounds %TupleExpressionNode, ptr %36, i32 0, i32 3
  %37 = load ptr, ptr %memberidx14, align 8
  %38 = load i64, ptr %i, align 4
  %39 = call ptr @Array_ExpressionNode____getitem__(ptr %37, i64 %38)
  %40 = call ptr @TypeChecker_check_expression(ptr %34, ptr %35, ptr %39)
  store ptr %40, ptr %expression, align 8
  %41 = load ptr, ptr %this, align 8
  %42 = call i1 @TypeChecker_has_errored(ptr %41)
  br i1 %42, label %if.entry15, label %else16

if.entry10:                                       ; preds = %if.entry5
  %43 = load ptr, ptr %expected_tuple_type, align 8
  %memberidx13 = getelementptr inbounds %TupleType, ptr %43, i32 0, i32 1
  %44 = load ptr, ptr %memberidx13, align 8
  %45 = load i64, ptr %i, align 4
  %46 = call ptr @Array_Type____getitem__(ptr %44, i64 %45)
  store ptr %46, ptr %expected_element_type, align 8
  br label %ifend12

else11:                                           ; preds = %if.entry5
  br label %ifend12

ifend12:                                          ; preds = %else11, %if.entry10
  br label %ifend7

if.entry15:                                       ; preds = %ifend7
  ret ptr null

else16:                                           ; preds = %ifend7
  br label %ifend17

ifend17:                                          ; preds = %else16
  %47 = load i1, ptr %is_constant, align 1
  %48 = load ptr, ptr %expression, align 8
  %memberidx18 = getelementptr inbounds %Expression, ptr %48, i32 0, i32 1
  %49 = load i1, ptr %memberidx18, align 1
  %50 = and i1 %47, %49
  store i1 %50, ptr %is_constant, align 1
  %51 = load ptr, ptr %actual_tuple_type, align 8
  %memberidx19 = getelementptr inbounds %TupleType, ptr %51, i32 0, i32 1
  %52 = load ptr, ptr %memberidx19, align 8
  %53 = load ptr, ptr %expression, align 8
  %memberidx20 = getelementptr inbounds %Expression, ptr %53, i32 0, i32 3
  %54 = load ptr, ptr %memberidx20, align 8
  call void @Array_Type____sl__(ptr %52, ptr %54)
  %55 = load ptr, ptr %elements, align 8
  %56 = load ptr, ptr %expression, align 8
  call void @Array_Expression____sl__(ptr %55, ptr %56)
  br label %for.incr
}

define void @ArrayExpression_constructor(ptr %0, ptr %1) {
  %elements = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Expression_constructor, ptr %super, align 8
  store ptr %1, ptr %elements, align 8
  %3 = load ptr, ptr %super, align 8
  call void %3(ptr %0, i64 6)
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayExpression, ptr %4, i32 0, i32 4
  %5 = load ptr, ptr %elements, align 8
  store ptr %5, ptr %memberidx, align 8
  ret void
}

define ptr @TypeChecker_check_array_expression(ptr %0, ptr %1, ptr %2) {
  %expected_type = alloca ptr, align 8
  %this = alloca ptr, align 8
  %array_node = alloca ptr, align 8
  %array_type = alloca ptr, align 8
  %elements = alloca ptr, align 8
  %element_type = alloca ptr, align 8
  %arr_exp = alloca ptr, align 8
  %is_constant = alloca i1, align 1
  %generic_ty = alloca ptr, align 8
  %element = alloca ptr, align 8
  %i = alloca i64, align 8
  %generic_array_type = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %expected_type, align 8
  store ptr %2, ptr %array_node, align 8
  %4 = load ptr, ptr %this, align 8
  %5 = call i1 @TypeChecker_has_errored(ptr %4)
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %3
  ret ptr null

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %6 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %6, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %6, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %6, ptr %elements, align 8
  %8 = call ptr @Type_unknown()
  store ptr %8, ptr %element_type, align 8
  store i1 true, ptr %is_constant, align 1
  %9 = load ptr, ptr %expected_type, align 8
  store ptr %9, ptr %array_type, align 8
  %10 = load ptr, ptr %expected_type, align 8
  %memberidx2 = getelementptr inbounds %Type, ptr %10, i32 0, i32 0
  %11 = load i64, ptr %memberidx2, align 4
  %12 = icmp eq i64 %11, 14
  br i1 %12, label %if.entry3, label %else4

if.entry3:                                        ; preds = %ifend
  %13 = load ptr, ptr %expected_type, align 8
  %memberidx6 = getelementptr inbounds %ArrayType, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx6, align 8
  store ptr %14, ptr %element_type, align 8
  br label %ifend5

else4:                                            ; preds = %ifend
  %15 = load ptr, ptr %expected_type, align 8
  %memberidx7 = getelementptr inbounds %Type, ptr %15, i32 0, i32 0
  %16 = load i64, ptr %memberidx7, align 4
  %17 = icmp eq i64 %16, 20
  br i1 %17, label %if.entry8, label %else9

ifend5:                                           ; preds = %ifend10, %if.entry3
  %18 = load ptr, ptr %array_node, align 8
  %memberidx16 = getelementptr inbounds %ArrayExpressionNode, ptr %18, i32 0, i32 3
  %19 = load ptr, ptr %memberidx16, align 8
  %memberidx17 = getelementptr inbounds %Array_ExpressionNode_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx17, align 4
  %21 = icmp sgt i64 %20, 0
  br i1 %21, label %if.entry18, label %else19

if.entry8:                                        ; preds = %else4
  store i1 false, ptr %is_constant, align 1
  %22 = load ptr, ptr %expected_type, align 8
  store ptr %22, ptr %generic_ty, align 8
  %23 = load ptr, ptr %generic_ty, align 8
  %24 = call i1 @is_object(ptr %23)
  %25 = load ptr, ptr %generic_ty, align 8
  %memberidx11 = getelementptr inbounds %GenericType, ptr %25, i32 0, i32 1
  %26 = load ptr, ptr %memberidx11, align 8
  %27 = call ptr @string_from_bytes(ptr @297, i64 5)
  %28 = call i1 @string___eq__(ptr %26, ptr %27)
  %29 = and i1 %24, %28
  br i1 %29, label %if.entry12, label %else13

else9:                                            ; preds = %else4
  br label %ifend10

ifend10:                                          ; preds = %else9, %ifend14
  br label %ifend5

if.entry12:                                       ; preds = %if.entry8
  %30 = load ptr, ptr %generic_ty, align 8
  %memberidx15 = getelementptr inbounds %GenericType, ptr %30, i32 0, i32 2
  %31 = load ptr, ptr %memberidx15, align 8
  %32 = call ptr @Array_Type____getitem__(ptr %31, i64 0)
  store ptr %32, ptr %element_type, align 8
  br label %ifend14

else13:                                           ; preds = %if.entry8
  br label %ifend14

ifend14:                                          ; preds = %else13, %if.entry12
  br label %ifend10

if.entry18:                                       ; preds = %ifend5
  br label %for.entry

else19:                                           ; preds = %ifend5
  br label %ifend20

ifend20:                                          ; preds = %else19, %for.end
  %33 = load ptr, ptr %array_type, align 8
  %memberidx42 = getelementptr inbounds %Type, ptr %33, i32 0, i32 0
  %34 = load i64, ptr %memberidx42, align 4
  %35 = icmp ne i64 %34, 14
  br i1 %35, label %if.entry43, label %else44

for.entry:                                        ; preds = %if.entry18
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %36 = load i64, ptr %i, align 4
  %37 = load ptr, ptr %array_node, align 8
  %memberidx21 = getelementptr inbounds %ArrayExpressionNode, ptr %37, i32 0, i32 3
  %38 = load ptr, ptr %memberidx21, align 8
  %memberidx22 = getelementptr inbounds %Array_ExpressionNode_, ptr %38, i32 0, i32 2
  %39 = load i64, ptr %memberidx22, align 4
  %40 = icmp slt i64 %36, %39
  br i1 %40, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %41 = load ptr, ptr %this, align 8
  %42 = load ptr, ptr %element_type, align 8
  %43 = load ptr, ptr %array_node, align 8
  %memberidx23 = getelementptr inbounds %ArrayExpressionNode, ptr %43, i32 0, i32 3
  %44 = load ptr, ptr %memberidx23, align 8
  %45 = load i64, ptr %i, align 4
  %46 = call ptr @Array_ExpressionNode____getitem__(ptr %44, i64 %45)
  %47 = call ptr @TypeChecker_check_expression(ptr %41, ptr %42, ptr %46)
  store ptr %47, ptr %element, align 8
  %48 = load ptr, ptr %this, align 8
  %49 = call i1 @TypeChecker_has_errored(ptr %48)
  br i1 %49, label %if.entry24, label %else25

for.incr:                                         ; preds = %ifend36
  %50 = load i64, ptr %i, align 4
  %51 = add nsw i64 %50, 1
  store i64 %51, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend20

if.entry24:                                       ; preds = %for.body
  ret ptr null

else25:                                           ; preds = %for.body
  br label %ifend26

ifend26:                                          ; preds = %else25
  %52 = load i64, ptr %i, align 4
  %53 = icmp eq i64 %52, 0
  %54 = load ptr, ptr %element_type, align 8
  %memberidx27 = getelementptr inbounds %Type, ptr %54, i32 0, i32 0
  %55 = load i64, ptr %memberidx27, align 4
  %56 = icmp eq i64 %55, 21
  %57 = and i1 %53, %56
  br i1 %57, label %if.entry28, label %else29

if.entry28:                                       ; preds = %ifend26
  %58 = load ptr, ptr %element, align 8
  %memberidx31 = getelementptr inbounds %Expression, ptr %58, i32 0, i32 3
  %59 = load ptr, ptr %memberidx31, align 8
  store ptr %59, ptr %element_type, align 8
  br label %ifend30

else29:                                           ; preds = %ifend26
  br label %ifend30

ifend30:                                          ; preds = %else29, %if.entry28
  %60 = load i1, ptr %is_constant, align 1
  %61 = load ptr, ptr %element, align 8
  %memberidx32 = getelementptr inbounds %Expression, ptr %61, i32 0, i32 1
  %62 = load i1, ptr %memberidx32, align 1
  %63 = and i1 %60, %62
  store i1 %63, ptr %is_constant, align 1
  %64 = load ptr, ptr %this, align 8
  %65 = load ptr, ptr %element_type, align 8
  %66 = load ptr, ptr %element, align 8
  %memberidx33 = getelementptr inbounds %Expression, ptr %66, i32 0, i32 3
  %67 = load ptr, ptr %memberidx33, align 8
  %68 = call i1 @TypeChecker_types_are_eq(ptr %64, ptr %65, ptr %67)
  br i1 %68, label %if.entry34, label %else35

if.entry34:                                       ; preds = %ifend30
  %69 = load ptr, ptr %elements, align 8
  %70 = load ptr, ptr %element, align 8
  call void @Array_Expression____sl__(ptr %69, ptr %70)
  br label %ifend36

else35:                                           ; preds = %ifend30
  %71 = load ptr, ptr %this, align 8
  %72 = load ptr, ptr %this, align 8
  %73 = load ptr, ptr %element_type, align 8
  %74 = call ptr @TypeChecker_dump_type(ptr %72, ptr %73)
  %75 = getelementptr inbounds %string, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %memberidx37 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %76, i32 0, i32 5
  %77 = load ptr, ptr %memberidx37, align 8
  %78 = call ptr %77(ptr %74)
  %79 = load ptr, ptr %this, align 8
  %80 = load ptr, ptr %element, align 8
  %memberidx38 = getelementptr inbounds %Expression, ptr %80, i32 0, i32 3
  %81 = load ptr, ptr %memberidx38, align 8
  %82 = call ptr @TypeChecker_dump_type(ptr %79, ptr %81)
  %83 = getelementptr inbounds %string, ptr %82, i32 0, i32 0
  %84 = load ptr, ptr %83, align 8
  %memberidx39 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %84, i32 0, i32 5
  %85 = load ptr, ptr %memberidx39, align 8
  %86 = call ptr %85(ptr %82)
  %87 = alloca ptr, align 8
  %88 = call i64 (ptr, ptr, ...) @asprintf(ptr %87, ptr @430, ptr %78, ptr %86)
  %89 = load ptr, ptr %87, align 8
  %90 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %90, ptr %89, i64 %88)
  tail call void @free(ptr %78)
  tail call void @free(ptr %86)
  %91 = load ptr, ptr %array_node, align 8
  %memberidx40 = getelementptr inbounds %ArrayExpressionNode, ptr %91, i32 0, i32 3
  %92 = load ptr, ptr %memberidx40, align 8
  %93 = load i64, ptr %i, align 4
  %94 = call ptr @Array_ExpressionNode____getitem__(ptr %92, i64 %93)
  %memberidx41 = getelementptr inbounds %Node, ptr %94, i32 0, i32 0
  %95 = load ptr, ptr %memberidx41, align 8
  call void @TypeChecker_error(ptr %71, i64 5, ptr %90, ptr %95)
  ret ptr null

ifend36:                                          ; preds = %if.entry34
  br label %for.incr

if.entry43:                                       ; preds = %ifend20
  %96 = load ptr, ptr %this, align 8
  %97 = call ptr @string_from_bytes(ptr @297, i64 5)
  %98 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Type_, ptr null, i32 1) to i32))
  call void @Array_Type__constructor(ptr %98, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx46 = getelementptr inbounds %Array_Type_, ptr %98, i32 0, i32 1
  %99 = load ptr, ptr %memberidx46, align 8
  %100 = load ptr, ptr %element_type, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr inbounds ptr, ptr %99, i64 1
  %memberidx47 = getelementptr inbounds %Array_Type_, ptr %98, i32 0, i32 2
  store i64 1, ptr %memberidx47, align 4
  %102 = call ptr @TypeChecker_create_generic_instance_in_module(ptr %96, ptr %97, ptr %98)
  store ptr %102, ptr %generic_array_type, align 8
  %103 = load ptr, ptr %generic_array_type, align 8
  %104 = icmp ne ptr %103, null
  br i1 %104, label %if.entry48, label %else49

else44:                                           ; preds = %ifend20
  %105 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayType, ptr null, i32 1) to i32))
  %106 = load ptr, ptr %element_type, align 8
  %107 = load ptr, ptr %elements, align 8
  %memberidx51 = getelementptr inbounds %Array_Expression_, ptr %107, i32 0, i32 2
  %108 = load i64, ptr %memberidx51, align 4
  call void @ArrayType_constructor(ptr %105, ptr %106, i64 %108)
  store ptr %105, ptr %array_type, align 8
  br label %ifend45

ifend45:                                          ; preds = %else44, %ifend50
  %109 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayExpression, ptr null, i32 1) to i32))
  %110 = load ptr, ptr %elements, align 8
  call void @ArrayExpression_constructor(ptr %109, ptr %110)
  store ptr %109, ptr %arr_exp, align 8
  %111 = load ptr, ptr %arr_exp, align 8
  %memberidx52 = getelementptr inbounds %Expression, ptr %111, i32 0, i32 1
  %112 = load i1, ptr %is_constant, align 1
  store i1 %112, ptr %memberidx52, align 1
  %113 = load ptr, ptr %arr_exp, align 8
  %memberidx53 = getelementptr inbounds %Expression, ptr %113, i32 0, i32 3
  %114 = load ptr, ptr %array_type, align 8
  store ptr %114, ptr %memberidx53, align 8
  %115 = load ptr, ptr %arr_exp, align 8
  ret ptr %115

if.entry48:                                       ; preds = %if.entry43
  %116 = load ptr, ptr %generic_array_type, align 8
  store ptr %116, ptr %array_type, align 8
  store i1 false, ptr %is_constant, align 1
  br label %ifend50

else49:                                           ; preds = %if.entry43
  br label %ifend50

ifend50:                                          ; preds = %else49, %if.entry48
  br label %ifend45
}

define ptr @TypeChecker_get_func_args_from_expression(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %called = alloca ptr, align 8
  %var_id = alloca ptr, align 8
  %prop_id = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %called, align 8
  %3 = load ptr, ptr %called, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = icmp eq i64 %4, 8
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %called, align 8
  %memberidx1 = getelementptr inbounds %VarAccessExpression, ptr %6, i32 0, i32 4
  %7 = load ptr, ptr %memberidx1, align 8
  store ptr %7, ptr %var_id, align 8
  %8 = load ptr, ptr %var_id, align 8
  %memberidx2 = getelementptr inbounds %VarId, ptr %8, i32 0, i32 0
  %9 = load i64, ptr %memberidx2, align 4
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %if.entry3, label %else4

else:                                             ; preds = %2
  %11 = load ptr, ptr %called, align 8
  %memberidx8 = getelementptr inbounds %Expression, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx8, align 4
  %13 = icmp eq i64 %12, 13
  br i1 %13, label %if.entry9, label %else10

ifend:                                            ; preds = %ifend11, %ifend5
  ret ptr null

if.entry3:                                        ; preds = %if.entry
  %14 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %TypeChecker, ptr %14, i32 0, i32 0
  %15 = load ptr, ptr %memberidx6, align 8
  %16 = load ptr, ptr %var_id, align 8
  %17 = call ptr @get_func(ptr %15, ptr %16)
  %memberidx7 = getelementptr inbounds %Function, ptr %17, i32 0, i32 2
  %18 = load ptr, ptr %memberidx7, align 8
  ret ptr %18

else4:                                            ; preds = %if.entry
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %ifend

if.entry9:                                        ; preds = %else
  %19 = load ptr, ptr %called, align 8
  %memberidx12 = getelementptr inbounds %MemberExpression, ptr %19, i32 0, i32 5
  %20 = load ptr, ptr %memberidx12, align 8
  store ptr %20, ptr %prop_id, align 8
  %21 = load ptr, ptr %this, align 8
  %memberidx13 = getelementptr inbounds %TypeChecker, ptr %21, i32 0, i32 0
  %22 = load ptr, ptr %memberidx13, align 8
  %23 = load ptr, ptr %prop_id, align 8
  %24 = call ptr @get_method(ptr %22, ptr %23)
  %memberidx14 = getelementptr inbounds %ClassMethod, ptr %24, i32 0, i32 6
  %25 = load ptr, ptr %memberidx14, align 8
  ret ptr %25

else10:                                           ; preds = %else
  br label %ifend11

ifend11:                                          ; preds = %else10
  br label %ifend
}

define void @IntExpression_constructor(ptr %0, i64 %1) {
  %value = alloca i64, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Expression_constructor, ptr %super, align 8
  store i64 %1, ptr %value, align 4
  %3 = load ptr, ptr %super, align 8
  call void %3(ptr %0, i64 0)
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %4, i32 0, i32 3
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntType, ptr null, i32 1) to i32))
  call void @IntType_constructor(ptr %5, i64 6, i1 false)
  store ptr %5, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %IntExpression, ptr %6, i32 0, i32 4
  %7 = load i64, ptr %value, align 4
  store i64 %7, ptr %memberidx1, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %8, i32 0, i32 1
  store i1 true, ptr %memberidx2, align 1
  ret void
}

define void @IntType_constructor(ptr %0, i64 %1, i1 %2) {
  %is_signed = alloca i1, align 1
  %ty = alloca i64, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Type_constructor, ptr %super, align 8
  store i64 %1, ptr %ty, align 4
  store i1 %2, ptr %is_signed, align 1
  %4 = load ptr, ptr %super, align 8
  %5 = load i64, ptr %ty, align 4
  call void %4(ptr %0, i64 %5)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %IntType, ptr %6, i32 0, i32 1
  %7 = load i1, ptr %is_signed, align 1
  store i1 %7, ptr %memberidx, align 1
  ret void
}

define ptr @TypeChecker_check_int_expression(ptr %0, ptr %1, ptr %2) {
  %expected_type = alloca ptr, align 8
  %this = alloca ptr, align 8
  %int_node = alloca ptr, align 8
  %int_value = alloca i64, align 8
  %is_signed = alloca i1, align 1
  %expr_value = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %expected_type, align 8
  store ptr %2, ptr %int_node, align 8
  %4 = load ptr, ptr %int_node, align 8
  %memberidx = getelementptr inbounds %IntExpressionNode, ptr %4, i32 0, i32 3
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IntToken, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  store i64 %6, ptr %int_value, align 4
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntExpression, ptr null, i32 1) to i32))
  %8 = load i64, ptr %int_value, align 4
  call void @IntExpression_constructor(ptr %7, i64 %8)
  store ptr %7, ptr %expr_value, align 8
  store i1 true, ptr %is_signed, align 1
  %9 = load ptr, ptr %expected_type, align 8
  %10 = call i1 @is_int(ptr %9)
  br i1 %10, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %11 = load ptr, ptr %expr_value, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %11, i32 0, i32 3
  %12 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Type, ptr %12, i32 0, i32 0
  %13 = load ptr, ptr %expected_type, align 8
  %memberidx4 = getelementptr inbounds %Type, ptr %13, i32 0, i32 0
  %14 = load i64, ptr %memberidx4, align 4
  store i64 %14, ptr %memberidx3, align 4
  %15 = load ptr, ptr %expr_value, align 8
  %memberidx5 = getelementptr inbounds %Expression, ptr %15, i32 0, i32 3
  %16 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %IntType, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %expected_type, align 8
  %memberidx7 = getelementptr inbounds %IntType, ptr %17, i32 0, i32 1
  %18 = load i1, ptr %memberidx7, align 1
  store i1 %18, ptr %memberidx6, align 1
  br label %ifend

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %19 = load i64, ptr %int_value, align 4
  %20 = icmp slt i64 %19, -8
  %21 = load i64, ptr %int_value, align 4
  %22 = icmp sgt i64 %21, 7
  %23 = or i1 %20, %22
  %24 = load ptr, ptr %expr_value, align 8
  %memberidx8 = getelementptr inbounds %Expression, ptr %24, i32 0, i32 3
  %25 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Type, ptr %25, i32 0, i32 0
  %26 = load i64, ptr %memberidx9, align 4
  %27 = icmp eq i64 %26, 1
  %28 = and i1 %23, %27
  br i1 %28, label %if.entry10, label %else11

if.entry10:                                       ; preds = %ifend
  %29 = load ptr, ptr %expr_value, align 8
  %memberidx13 = getelementptr inbounds %Expression, ptr %29, i32 0, i32 3
  %30 = load ptr, ptr %memberidx13, align 8
  %memberidx14 = getelementptr inbounds %Type, ptr %30, i32 0, i32 0
  store i64 2, ptr %memberidx14, align 4
  br label %ifend12

else11:                                           ; preds = %ifend
  br label %ifend12

ifend12:                                          ; preds = %else11, %if.entry10
  %31 = load i64, ptr %int_value, align 4
  %32 = icmp slt i64 %31, -128
  %33 = load i64, ptr %int_value, align 4
  %34 = icmp sgt i64 %33, 127
  %35 = or i1 %32, %34
  %36 = load ptr, ptr %expr_value, align 8
  %memberidx15 = getelementptr inbounds %Expression, ptr %36, i32 0, i32 3
  %37 = load ptr, ptr %memberidx15, align 8
  %memberidx16 = getelementptr inbounds %Type, ptr %37, i32 0, i32 0
  %38 = load i64, ptr %memberidx16, align 4
  %39 = icmp eq i64 %38, 2
  %40 = and i1 %35, %39
  br i1 %40, label %if.entry17, label %else18

if.entry17:                                       ; preds = %ifend12
  %41 = load ptr, ptr %expr_value, align 8
  %memberidx20 = getelementptr inbounds %Expression, ptr %41, i32 0, i32 3
  %42 = load ptr, ptr %memberidx20, align 8
  %memberidx21 = getelementptr inbounds %Type, ptr %42, i32 0, i32 0
  store i64 3, ptr %memberidx21, align 4
  br label %ifend19

else18:                                           ; preds = %ifend12
  br label %ifend19

ifend19:                                          ; preds = %else18, %if.entry17
  %43 = load i64, ptr %int_value, align 4
  %44 = icmp slt i64 %43, -32768
  %45 = load i64, ptr %int_value, align 4
  %46 = icmp sgt i64 %45, 32767
  %47 = or i1 %44, %46
  %48 = load ptr, ptr %expr_value, align 8
  %memberidx22 = getelementptr inbounds %Expression, ptr %48, i32 0, i32 3
  %49 = load ptr, ptr %memberidx22, align 8
  %memberidx23 = getelementptr inbounds %Type, ptr %49, i32 0, i32 0
  %50 = load i64, ptr %memberidx23, align 4
  %51 = icmp eq i64 %50, 3
  %52 = and i1 %47, %51
  br i1 %52, label %if.entry24, label %else25

if.entry24:                                       ; preds = %ifend19
  %53 = load ptr, ptr %expr_value, align 8
  %memberidx27 = getelementptr inbounds %Expression, ptr %53, i32 0, i32 3
  %54 = load ptr, ptr %memberidx27, align 8
  %memberidx28 = getelementptr inbounds %Type, ptr %54, i32 0, i32 0
  store i64 4, ptr %memberidx28, align 4
  br label %ifend26

else25:                                           ; preds = %ifend19
  br label %ifend26

ifend26:                                          ; preds = %else25, %if.entry24
  %55 = load i64, ptr %int_value, align 4
  %56 = icmp slt i64 %55, -2147483648
  %57 = load i64, ptr %int_value, align 4
  %58 = icmp sgt i64 %57, 2147483647
  %59 = or i1 %56, %58
  %60 = load ptr, ptr %expr_value, align 8
  %memberidx29 = getelementptr inbounds %Expression, ptr %60, i32 0, i32 3
  %61 = load ptr, ptr %memberidx29, align 8
  %memberidx30 = getelementptr inbounds %Type, ptr %61, i32 0, i32 0
  %62 = load i64, ptr %memberidx30, align 4
  %63 = icmp eq i64 %62, 4
  %64 = load ptr, ptr %expr_value, align 8
  %memberidx31 = getelementptr inbounds %Expression, ptr %64, i32 0, i32 3
  %65 = load ptr, ptr %memberidx31, align 8
  %memberidx32 = getelementptr inbounds %Type, ptr %65, i32 0, i32 0
  %66 = load i64, ptr %memberidx32, align 4
  %67 = icmp eq i64 %66, 6
  %68 = load i64, ptr @ARCH_WORD_SIZE, align 4
  %69 = icmp eq i64 %68, 32
  %70 = and i1 %67, %69
  %71 = or i1 %63, %70
  %72 = and i1 %59, %71
  br i1 %72, label %if.entry33, label %else34

if.entry33:                                       ; preds = %ifend26
  %73 = load ptr, ptr %expr_value, align 8
  %memberidx36 = getelementptr inbounds %Expression, ptr %73, i32 0, i32 3
  %74 = load ptr, ptr %memberidx36, align 8
  %memberidx37 = getelementptr inbounds %Type, ptr %74, i32 0, i32 0
  store i64 5, ptr %memberidx37, align 4
  br label %ifend35

else34:                                           ; preds = %ifend26
  br label %ifend35

ifend35:                                          ; preds = %else34, %if.entry33
  %75 = load i64, ptr %int_value, align 4
  %76 = icmp slt i64 %75, -9223372036854775807
  %77 = load i64, ptr %int_value, align 4
  %78 = icmp sgt i64 %77, 9223372036854775807
  %79 = or i1 %76, %78
  %80 = load ptr, ptr %expr_value, align 8
  %memberidx38 = getelementptr inbounds %Expression, ptr %80, i32 0, i32 3
  %81 = load ptr, ptr %memberidx38, align 8
  %memberidx39 = getelementptr inbounds %Type, ptr %81, i32 0, i32 0
  %82 = load i64, ptr %memberidx39, align 4
  %83 = icmp eq i64 %82, 5
  %84 = load ptr, ptr %expr_value, align 8
  %memberidx40 = getelementptr inbounds %Expression, ptr %84, i32 0, i32 3
  %85 = load ptr, ptr %memberidx40, align 8
  %memberidx41 = getelementptr inbounds %Type, ptr %85, i32 0, i32 0
  %86 = load i64, ptr %memberidx41, align 4
  %87 = icmp eq i64 %86, 6
  %88 = load i64, ptr @ARCH_WORD_SIZE, align 4
  %89 = icmp eq i64 %88, 64
  %90 = and i1 %87, %89
  %91 = or i1 %83, %90
  %92 = and i1 %79, %91
  br i1 %92, label %if.entry42, label %else43

if.entry42:                                       ; preds = %ifend35
  %93 = load ptr, ptr %expr_value, align 8
  %memberidx45 = getelementptr inbounds %Expression, ptr %93, i32 0, i32 3
  %94 = load ptr, ptr %memberidx45, align 8
  %memberidx46 = getelementptr inbounds %Type, ptr %94, i32 0, i32 0
  store i64 7, ptr %memberidx46, align 4
  br label %ifend44

else43:                                           ; preds = %ifend35
  br label %ifend44

ifend44:                                          ; preds = %else43, %if.entry42
  %95 = load ptr, ptr %expr_value, align 8
  ret ptr %95
}

define void @FloatExpression_constructor(ptr %0, double %1) {
  %value = alloca double, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Expression_constructor, ptr %super, align 8
  store double %1, ptr %value, align 8
  %3 = load ptr, ptr %super, align 8
  call void %3(ptr %0, i64 1)
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %4, i32 0, i32 3
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %5, i64 9)
  store ptr %5, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %FloatExpression, ptr %6, i32 0, i32 4
  %7 = load double, ptr %value, align 8
  store double %7, ptr %memberidx1, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %8, i32 0, i32 1
  store i1 true, ptr %memberidx2, align 1
  ret void
}

define ptr @TypeChecker_check_float_expression(ptr %0, ptr %1, ptr %2) {
  %expected_type = alloca ptr, align 8
  %this = alloca ptr, align 8
  %float_node = alloca ptr, align 8
  %max_f32 = alloca double, align 8
  %float_value = alloca double, align 8
  %expr_value = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %expected_type, align 8
  store ptr %2, ptr %float_node, align 8
  %4 = load ptr, ptr %float_node, align 8
  %memberidx = getelementptr inbounds %FloatExpressionNode, ptr %4, i32 0, i32 3
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %FloatToken, ptr %5, i32 0, i32 2
  %6 = load double, ptr %memberidx1, align 8
  store double %6, ptr %float_value, align 8
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloatExpression, ptr null, i32 1) to i32))
  %8 = load double, ptr %float_value, align 8
  call void @FloatExpression_constructor(ptr %7, double %8)
  store ptr %7, ptr %expr_value, align 8
  %9 = call ptr @string_from_bytes(ptr @500, i64 6)
  %10 = getelementptr inbounds %string, ptr %9, i32 0, i32 0
  %11 = load ptr, ptr %10, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %11, i32 0, i32 5
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = call ptr %12(ptr %9)
  %14 = call double @atof(ptr %13)
  tail call void @free(ptr %13)
  store double %14, ptr %max_f32, align 8
  %15 = load ptr, ptr %expected_type, align 8
  %16 = call i1 @is_float(ptr %15)
  br i1 %16, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %17 = load ptr, ptr %expr_value, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %17, i32 0, i32 3
  %18 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Type, ptr %18, i32 0, i32 0
  %19 = load ptr, ptr %expected_type, align 8
  %memberidx5 = getelementptr inbounds %Type, ptr %19, i32 0, i32 0
  %20 = load i64, ptr %memberidx5, align 4
  store i64 %20, ptr %memberidx4, align 4
  br label %ifend

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %21 = load double, ptr %float_value, align 8
  %22 = load double, ptr %max_f32, align 8
  %23 = fneg double %22
  %24 = fcmp olt double %21, %23
  %25 = load double, ptr %float_value, align 8
  %26 = load double, ptr %max_f32, align 8
  %27 = fcmp ogt double %25, %26
  %28 = or i1 %24, %27
  %29 = load ptr, ptr %expr_value, align 8
  %memberidx6 = getelementptr inbounds %Expression, ptr %29, i32 0, i32 3
  %30 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %Type, ptr %30, i32 0, i32 0
  %31 = load i64, ptr %memberidx7, align 4
  %32 = icmp eq i64 %31, 8
  %33 = and i1 %28, %32
  br i1 %33, label %if.entry8, label %else9

if.entry8:                                        ; preds = %ifend
  %34 = load ptr, ptr %expr_value, align 8
  %memberidx11 = getelementptr inbounds %Expression, ptr %34, i32 0, i32 3
  %35 = load ptr, ptr %memberidx11, align 8
  %memberidx12 = getelementptr inbounds %Type, ptr %35, i32 0, i32 0
  store i64 9, ptr %memberidx12, align 4
  br label %ifend10

else9:                                            ; preds = %ifend
  br label %ifend10

ifend10:                                          ; preds = %else9, %if.entry8
  %36 = load ptr, ptr %expr_value, align 8
  ret ptr %36
}

define void @TypeChecker_check_enum_body(ptr %0, ptr %1, ptr %2) {
  %enum_node = alloca ptr, align 8
  %this = alloca ptr, align 8
  %declared_enum = alloca ptr, align 8
  %next_enum_value = alloca i64, align 8
  %enum_variant = alloca ptr, align 8
  %enum_name = alloca ptr, align 8
  %enum_field = alloca ptr, align 8
  %i = alloca i64, align 8
  %enum_node_field = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %declared_enum, align 8
  store ptr %2, ptr %enum_node, align 8
  store ptr null, ptr %enum_variant, align 8
  %4 = load ptr, ptr %enum_node, align 8
  %memberidx = getelementptr inbounds %EnumNode, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx, align 8
  %6 = icmp eq ptr %5, null
  br i1 %6, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntType, ptr null, i32 1) to i32))
  call void @IntType_constructor(ptr %7, i64 6, i1 true)
  store ptr %7, ptr %enum_variant, align 8
  br label %ifend

else:                                             ; preds = %3
  %8 = load ptr, ptr %this, align 8
  %9 = load ptr, ptr %enum_node, align 8
  %memberidx1 = getelementptr inbounds %EnumNode, ptr %9, i32 0, i32 2
  %10 = load ptr, ptr %memberidx1, align 8
  %11 = call ptr @TypeChecker_check_type(ptr %8, ptr %10)
  store ptr %11, ptr %enum_variant, align 8
  %12 = load ptr, ptr %enum_variant, align 8
  %13 = call i1 @is_int(ptr %12)
  %14 = xor i1 %13, true
  br i1 %14, label %if.entry2, label %else3

ifend:                                            ; preds = %ifend4, %if.entry
  store i64 0, ptr %next_enum_value, align 4
  br label %for.entry

if.entry2:                                        ; preds = %else
  %15 = load ptr, ptr %this, align 8
  %16 = load ptr, ptr %this, align 8
  %17 = load ptr, ptr %enum_variant, align 8
  %18 = call ptr @TypeChecker_dump_type(ptr %16, ptr %17)
  %19 = getelementptr inbounds %string, ptr %18, i32 0, i32 0
  %20 = load ptr, ptr %19, align 8
  %memberidx5 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %20, i32 0, i32 5
  %21 = load ptr, ptr %memberidx5, align 8
  %22 = call ptr %21(ptr %18)
  %23 = alloca ptr, align 8
  %24 = call i64 (ptr, ptr, ...) @asprintf(ptr %23, ptr @355, ptr %22)
  %25 = load ptr, ptr %23, align 8
  %26 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %26, ptr %25, i64 %24)
  tail call void @free(ptr %22)
  %27 = load ptr, ptr %enum_node, align 8
  %memberidx6 = getelementptr inbounds %EnumNode, ptr %27, i32 0, i32 2
  %28 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %Node, ptr %28, i32 0, i32 0
  %29 = load ptr, ptr %memberidx7, align 8
  call void @TypeChecker_error(ptr %15, i64 5, ptr %26, ptr %29)
  br label %ifend4

else3:                                            ; preds = %else
  br label %ifend4

ifend4:                                           ; preds = %else3, %if.entry2
  br label %ifend

for.entry:                                        ; preds = %ifend
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %30 = load i64, ptr %i, align 4
  %31 = load ptr, ptr %enum_node, align 8
  %memberidx8 = getelementptr inbounds %EnumNode, ptr %31, i32 0, i32 1
  %32 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Array_EnumNodeField_, ptr %32, i32 0, i32 2
  %33 = load i64, ptr %memberidx9, align 4
  %34 = icmp slt i64 %30, %33
  br i1 %34, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %35 = load ptr, ptr %enum_node, align 8
  %memberidx10 = getelementptr inbounds %EnumNode, ptr %35, i32 0, i32 1
  %36 = load ptr, ptr %memberidx10, align 8
  %37 = load i64, ptr %i, align 4
  %38 = call ptr @Array_EnumNodeField____getitem__(ptr %36, i64 %37)
  store ptr %38, ptr %enum_node_field, align 8
  %39 = load ptr, ptr %enum_node_field, align 8
  %memberidx11 = getelementptr inbounds %EnumNodeField, ptr %39, i32 0, i32 0
  %40 = load ptr, ptr %memberidx11, align 8
  %memberidx12 = getelementptr inbounds %IdentifierToken, ptr %40, i32 0, i32 2
  %41 = load ptr, ptr %memberidx12, align 8
  store ptr %41, ptr %enum_name, align 8
  %42 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%EnumField, ptr null, i32 1) to i32))
  %43 = load ptr, ptr %enum_name, align 8
  call void @EnumField_constructor(ptr %42, ptr %43)
  store ptr %42, ptr %enum_field, align 8
  %44 = load ptr, ptr %enum_field, align 8
  %memberidx13 = getelementptr inbounds %EnumField, ptr %44, i32 0, i32 0
  %45 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%PropId, ptr null, i32 1) to i32))
  %46 = load ptr, ptr %declared_enum, align 8
  %memberidx14 = getelementptr inbounds %Enum, ptr %46, i32 0, i32 0
  %47 = load ptr, ptr %memberidx14, align 8
  %48 = load i64, ptr %i, align 4
  call void @PropId_constructor(ptr %45, i64 1, ptr %47, i64 %48)
  store ptr %45, ptr %memberidx13, align 8
  %49 = load ptr, ptr %enum_node_field, align 8
  %memberidx15 = getelementptr inbounds %EnumNodeField, ptr %49, i32 0, i32 1
  %50 = load ptr, ptr %memberidx15, align 8
  %51 = icmp ne ptr %50, null
  br i1 %51, label %if.entry16, label %else17

for.incr:                                         ; preds = %ifend18
  %52 = load i64, ptr %i, align 4
  %53 = add nsw i64 %52, 1
  store i64 %53, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void

if.entry16:                                       ; preds = %for.body
  %54 = load ptr, ptr %enum_field, align 8
  %memberidx19 = getelementptr inbounds %EnumField, ptr %54, i32 0, i32 2
  %55 = load ptr, ptr %this, align 8
  %56 = load ptr, ptr %enum_variant, align 8
  %57 = load ptr, ptr %enum_node_field, align 8
  %memberidx20 = getelementptr inbounds %EnumNodeField, ptr %57, i32 0, i32 1
  %58 = load ptr, ptr %memberidx20, align 8
  %59 = call ptr @TypeChecker_check_expression(ptr %55, ptr %56, ptr %58)
  store ptr %59, ptr %memberidx19, align 8
  %60 = load ptr, ptr %enum_field, align 8
  %memberidx21 = getelementptr inbounds %EnumField, ptr %60, i32 0, i32 2
  %61 = load ptr, ptr %memberidx21, align 8
  %memberidx22 = getelementptr inbounds %Expression, ptr %61, i32 0, i32 1
  %62 = load i1, ptr %memberidx22, align 1
  %63 = xor i1 %62, true
  br i1 %63, label %if.entry23, label %else24

else17:                                           ; preds = %for.body
  %64 = load ptr, ptr %enum_field, align 8
  %memberidx41 = getelementptr inbounds %EnumField, ptr %64, i32 0, i32 2
  %65 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntExpression, ptr null, i32 1) to i32))
  %66 = load i64, ptr %next_enum_value, align 4
  call void @IntExpression_constructor(ptr %65, i64 %66)
  store ptr %65, ptr %memberidx41, align 8
  %67 = load ptr, ptr %enum_field, align 8
  %memberidx42 = getelementptr inbounds %EnumField, ptr %67, i32 0, i32 2
  %68 = load ptr, ptr %memberidx42, align 8
  %memberidx43 = getelementptr inbounds %Expression, ptr %68, i32 0, i32 3
  %69 = load ptr, ptr %enum_variant, align 8
  store ptr %69, ptr %memberidx43, align 8
  %70 = load i64, ptr %next_enum_value, align 4
  %71 = add nsw i64 %70, 1
  store i64 %71, ptr %next_enum_value, align 4
  br label %ifend18

ifend18:                                          ; preds = %else17, %ifend32
  %72 = load ptr, ptr %declared_enum, align 8
  %memberidx44 = getelementptr inbounds %Enum, ptr %72, i32 0, i32 3
  %73 = load ptr, ptr %memberidx44, align 8
  %74 = load ptr, ptr %enum_name, align 8
  %75 = load ptr, ptr %enum_field, align 8
  %memberidx45 = getelementptr inbounds %EnumField, ptr %75, i32 0, i32 0
  %76 = load ptr, ptr %memberidx45, align 8
  call void @Map_string_PropId____setitem__(ptr %73, ptr %74, ptr %76)
  %77 = load ptr, ptr %declared_enum, align 8
  %memberidx46 = getelementptr inbounds %Enum, ptr %77, i32 0, i32 2
  %78 = load ptr, ptr %memberidx46, align 8
  %79 = load ptr, ptr %enum_field, align 8
  call void @Array_EnumField____sl__(ptr %78, ptr %79)
  br label %for.incr

if.entry23:                                       ; preds = %if.entry16
  %80 = load ptr, ptr %this, align 8
  %81 = call ptr @string_from_bytes(ptr @356, i64 37)
  %82 = load ptr, ptr %enum_node_field, align 8
  %memberidx26 = getelementptr inbounds %EnumNodeField, ptr %82, i32 0, i32 1
  %83 = load ptr, ptr %memberidx26, align 8
  %memberidx27 = getelementptr inbounds %Node, ptr %83, i32 0, i32 0
  %84 = load ptr, ptr %memberidx27, align 8
  call void @TypeChecker_error(ptr %80, i64 5, ptr %81, ptr %84)
  ret void

else24:                                           ; preds = %if.entry16
  br label %ifend25

ifend25:                                          ; preds = %else24
  %85 = load ptr, ptr %this, align 8
  %86 = load ptr, ptr %enum_variant, align 8
  %87 = load ptr, ptr %enum_field, align 8
  %memberidx28 = getelementptr inbounds %EnumField, ptr %87, i32 0, i32 2
  %88 = load ptr, ptr %memberidx28, align 8
  %memberidx29 = getelementptr inbounds %Expression, ptr %88, i32 0, i32 3
  %89 = load ptr, ptr %memberidx29, align 8
  %90 = call i1 @TypeChecker_types_are_eq(ptr %85, ptr %86, ptr %89)
  %91 = xor i1 %90, true
  br i1 %91, label %if.entry30, label %else31

if.entry30:                                       ; preds = %ifend25
  %92 = load ptr, ptr %this, align 8
  %93 = load ptr, ptr %this, align 8
  %94 = load ptr, ptr %enum_variant, align 8
  %95 = call ptr @TypeChecker_dump_type(ptr %93, ptr %94)
  %96 = getelementptr inbounds %string, ptr %95, i32 0, i32 0
  %97 = load ptr, ptr %96, align 8
  %memberidx33 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %97, i32 0, i32 5
  %98 = load ptr, ptr %memberidx33, align 8
  %99 = call ptr %98(ptr %95)
  %100 = load ptr, ptr %this, align 8
  %101 = load ptr, ptr %enum_field, align 8
  %memberidx34 = getelementptr inbounds %EnumField, ptr %101, i32 0, i32 2
  %102 = load ptr, ptr %memberidx34, align 8
  %memberidx35 = getelementptr inbounds %Expression, ptr %102, i32 0, i32 3
  %103 = load ptr, ptr %memberidx35, align 8
  %104 = call ptr @TypeChecker_dump_type(ptr %100, ptr %103)
  %105 = getelementptr inbounds %string, ptr %104, i32 0, i32 0
  %106 = load ptr, ptr %105, align 8
  %memberidx36 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %106, i32 0, i32 5
  %107 = load ptr, ptr %memberidx36, align 8
  %108 = call ptr %107(ptr %104)
  %109 = alloca ptr, align 8
  %110 = call i64 (ptr, ptr, ...) @asprintf(ptr %109, ptr @357, ptr %99, ptr %108)
  %111 = load ptr, ptr %109, align 8
  %112 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %112, ptr %111, i64 %110)
  tail call void @free(ptr %99)
  tail call void @free(ptr %108)
  %113 = load ptr, ptr %enum_node_field, align 8
  %memberidx37 = getelementptr inbounds %EnumNodeField, ptr %113, i32 0, i32 1
  %114 = load ptr, ptr %memberidx37, align 8
  %memberidx38 = getelementptr inbounds %Node, ptr %114, i32 0, i32 0
  %115 = load ptr, ptr %memberidx38, align 8
  call void @TypeChecker_error(ptr %92, i64 5, ptr %112, ptr %115)
  ret void

else31:                                           ; preds = %ifend25
  br label %ifend32

ifend32:                                          ; preds = %else31
  %116 = load ptr, ptr %this, align 8
  %memberidx39 = getelementptr inbounds %TypeChecker, ptr %116, i32 0, i32 0
  %117 = load ptr, ptr %memberidx39, align 8
  %118 = load ptr, ptr %enum_field, align 8
  %memberidx40 = getelementptr inbounds %EnumField, ptr %118, i32 0, i32 2
  %119 = load ptr, ptr %memberidx40, align 8
  %120 = call i64 @evaluate_const_int_expression(ptr %117, ptr %119)
  %121 = add nsw i64 %120, 1
  store i64 %121, ptr %next_enum_value, align 4
  br label %ifend18
}

define ptr @TypeChecker_check_char_expression(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %char_node = alloca ptr, align 8
  %expr_value = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %char_node, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntExpression, ptr null, i32 1) to i32))
  %4 = load ptr, ptr %char_node, align 8
  %memberidx = getelementptr inbounds %CharExpressionNode, ptr %4, i32 0, i32 3
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %CharToken, ptr %5, i32 0, i32 2
  %6 = load i8, ptr %memberidx1, align 1
  %7 = zext i8 %6 to i64
  call void @IntExpression_constructor(ptr %3, i64 %7)
  store ptr %3, ptr %expr_value, align 8
  %8 = load ptr, ptr %expr_value, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %8, i32 0, i32 3
  %9 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Type, ptr %9, i32 0, i32 0
  store i64 2, ptr %memberidx3, align 4
  %10 = load ptr, ptr %expr_value, align 8
  ret ptr %10
}

define void @StringExpression_constructor(ptr %0, ptr %1, ptr %2, ptr %3, ptr %4) {
  %template_args = alloca ptr, align 8
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %value_type = alloca ptr, align 8
  %fmt_indices = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Expression_constructor, ptr %super, align 8
  store ptr %1, ptr %value, align 8
  store ptr %2, ptr %fmt_indices, align 8
  store ptr %3, ptr %template_args, align 8
  store ptr %4, ptr %value_type, align 8
  %6 = load ptr, ptr %super, align 8
  call void %6(ptr %0, i64 2)
  %7 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %StringExpression, ptr %7, i32 0, i32 6
  %8 = load ptr, ptr %template_args, align 8
  store ptr %8, ptr %memberidx, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %StringExpression, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %fmt_indices, align 8
  store ptr %10, ptr %memberidx1, align 8
  %11 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %11, i32 0, i32 3
  %12 = load ptr, ptr %value_type, align 8
  store ptr %12, ptr %memberidx2, align 8
  %13 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %StringExpression, ptr %13, i32 0, i32 4
  %14 = load ptr, ptr %value, align 8
  store ptr %14, ptr %memberidx3, align 8
  %15 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Expression, ptr %15, i32 0, i32 1
  store i1 true, ptr %memberidx4, align 1
  ret void
}

define ptr @TypeChecker_check_string_expression(ptr %0, ptr %1, ptr %2) {
  %str_node = alloca ptr, align 8
  %expected_type = alloca ptr, align 8
  %this = alloca ptr, align 8
  %template_args = alloca ptr, align 8
  %str_exp = alloca ptr, align 8
  %is_const = alloca i1, align 1
  %tmp_it = alloca ptr, align 8
  %arg = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %expected_type, align 8
  store ptr %2, ptr %str_node, align 8
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %4, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %4, ptr %template_args, align 8
  store i1 true, ptr %is_const, align 1
  br label %for.entry

for.entry:                                        ; preds = %3
  %6 = load ptr, ptr %str_node, align 8
  %memberidx2 = getelementptr inbounds %StringExpressionNode, ptr %6, i32 0, i32 4
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = call ptr @Array_ExpressionNode____iter__(ptr %7)
  store ptr %8, ptr %tmp_it, align 8
  %9 = load ptr, ptr %tmp_it, align 8
  %10 = call ptr @ArrayIterator_ExpressionNode__next(ptr %9)
  store ptr %10, ptr %arg, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %11 = load ptr, ptr %tmp_it, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_ExpressionNode_, ptr %11, i32 0, i32 0
  %12 = load i1, ptr %memberidx3, align 1
  %13 = xor i1 %12, true
  br i1 %13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load ptr, ptr %template_args, align 8
  %15 = load ptr, ptr %this, align 8
  %16 = call ptr @Type_unknown()
  %17 = load ptr, ptr %arg, align 8
  %18 = call ptr @TypeChecker_check_expression(ptr %15, ptr %16, ptr %17)
  call void @Array_Expression____sl__(ptr %14, ptr %18)
  store i1 false, ptr %is_const, align 1
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %19 = load ptr, ptr %tmp_it, align 8
  %20 = call ptr @ArrayIterator_ExpressionNode__next(ptr %19)
  store ptr %20, ptr %arg, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %21 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %21)
  %22 = load ptr, ptr %expected_type, align 8
  %23 = call i1 @is_u8_ptr(ptr %22)
  %24 = xor i1 %23, true
  br i1 %24, label %if.entry, label %else

if.entry:                                         ; preds = %for.end
  %25 = load ptr, ptr %this, align 8
  %26 = call ptr @string_from_bytes(ptr @465, i64 6)
  %27 = call ptr @TypeChecker_get_type_from_current_scope(ptr %25, ptr %26)
  store ptr %27, ptr %expected_type, align 8
  store i1 false, ptr %is_const, align 1
  br label %ifend

else:                                             ; preds = %for.end
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %28 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%StringExpression, ptr null, i32 1) to i32))
  %29 = load ptr, ptr %str_node, align 8
  %memberidx4 = getelementptr inbounds %StringExpressionNode, ptr %29, i32 0, i32 3
  %30 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %StrToken, ptr %30, i32 0, i32 2
  %31 = load ptr, ptr %memberidx5, align 8
  %32 = load ptr, ptr %str_node, align 8
  %memberidx6 = getelementptr inbounds %StringExpressionNode, ptr %32, i32 0, i32 3
  %33 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %StrToken, ptr %33, i32 0, i32 3
  %34 = load ptr, ptr %memberidx7, align 8
  %35 = load ptr, ptr %template_args, align 8
  %36 = load ptr, ptr %expected_type, align 8
  call void @StringExpression_constructor(ptr %28, ptr %31, ptr %34, ptr %35, ptr %36)
  store ptr %28, ptr %str_exp, align 8
  %37 = load ptr, ptr %str_exp, align 8
  %memberidx8 = getelementptr inbounds %Expression, ptr %37, i32 0, i32 3
  %38 = load ptr, ptr %expected_type, align 8
  store ptr %38, ptr %memberidx8, align 8
  %39 = load ptr, ptr %str_exp, align 8
  %memberidx9 = getelementptr inbounds %Expression, ptr %39, i32 0, i32 1
  %40 = load i1, ptr %is_const, align 1
  store i1 %40, ptr %memberidx9, align 1
  %41 = load ptr, ptr %str_exp, align 8
  ret ptr %41
}

define ptr @TypeChecker_check_expression(ptr %0, ptr %1, ptr %2) {
  %expected_type = alloca ptr, align 8
  %this = alloca ptr, align 8
  %expr_node = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %expected_type, align 8
  store ptr %2, ptr %expr_node, align 8
  %4 = load ptr, ptr %expr_node, align 8
  %memberidx = getelementptr inbounds %ExpressionNode, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %7 = load ptr, ptr %this, align 8
  %8 = load ptr, ptr %expected_type, align 8
  %9 = load ptr, ptr %expr_node, align 8
  %10 = call ptr @TypeChecker_check_int_expression(ptr %7, ptr %8, ptr %9)
  ret ptr %10

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %11 = load ptr, ptr %expr_node, align 8
  %memberidx1 = getelementptr inbounds %ExpressionNode, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx1, align 4
  %13 = icmp eq i64 %12, 1
  br i1 %13, label %if.entry2, label %else3

if.entry2:                                        ; preds = %ifend
  %14 = load ptr, ptr %this, align 8
  %15 = load ptr, ptr %expected_type, align 8
  %16 = load ptr, ptr %expr_node, align 8
  %17 = call ptr @TypeChecker_check_float_expression(ptr %14, ptr %15, ptr %16)
  ret ptr %17

else3:                                            ; preds = %ifend
  br label %ifend4

ifend4:                                           ; preds = %else3
  %18 = load ptr, ptr %expr_node, align 8
  %memberidx5 = getelementptr inbounds %ExpressionNode, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx5, align 4
  %20 = icmp eq i64 %19, 3
  br i1 %20, label %if.entry6, label %else7

if.entry6:                                        ; preds = %ifend4
  %21 = load ptr, ptr %this, align 8
  %22 = load ptr, ptr %expr_node, align 8
  %23 = call ptr @TypeChecker_check_char_expression(ptr %21, ptr %22)
  ret ptr %23

else7:                                            ; preds = %ifend4
  br label %ifend8

ifend8:                                           ; preds = %else7
  %24 = load ptr, ptr %expr_node, align 8
  %memberidx9 = getelementptr inbounds %ExpressionNode, ptr %24, i32 0, i32 2
  %25 = load i64, ptr %memberidx9, align 4
  %26 = icmp eq i64 %25, 2
  br i1 %26, label %if.entry10, label %else11

if.entry10:                                       ; preds = %ifend8
  %27 = load ptr, ptr %this, align 8
  %28 = load ptr, ptr %expected_type, align 8
  %29 = load ptr, ptr %expr_node, align 8
  %30 = call ptr @TypeChecker_check_string_expression(ptr %27, ptr %28, ptr %29)
  ret ptr %30

else11:                                           ; preds = %ifend8
  br label %ifend12

ifend12:                                          ; preds = %else11
  %31 = load ptr, ptr %expr_node, align 8
  %memberidx13 = getelementptr inbounds %ExpressionNode, ptr %31, i32 0, i32 2
  %32 = load i64, ptr %memberidx13, align 4
  %33 = icmp eq i64 %32, 6
  br i1 %33, label %if.entry14, label %else15

if.entry14:                                       ; preds = %ifend12
  %34 = load ptr, ptr %this, align 8
  %35 = load ptr, ptr %expected_type, align 8
  %36 = load ptr, ptr %expr_node, align 8
  %37 = call ptr @TypeChecker_check_array_expression(ptr %34, ptr %35, ptr %36)
  ret ptr %37

else15:                                           ; preds = %ifend12
  br label %ifend16

ifend16:                                          ; preds = %else15
  %38 = load ptr, ptr %expr_node, align 8
  %memberidx17 = getelementptr inbounds %ExpressionNode, ptr %38, i32 0, i32 2
  %39 = load i64, ptr %memberidx17, align 4
  %40 = icmp eq i64 %39, 7
  br i1 %40, label %if.entry18, label %else19

if.entry18:                                       ; preds = %ifend16
  %41 = load ptr, ptr %this, align 8
  %42 = load ptr, ptr %expected_type, align 8
  %43 = load ptr, ptr %expr_node, align 8
  %44 = call ptr @TypeChecker_check_tuple_expression(ptr %41, ptr %42, ptr %43)
  ret ptr %44

else19:                                           ; preds = %ifend16
  br label %ifend20

ifend20:                                          ; preds = %else19
  %45 = load ptr, ptr %expr_node, align 8
  %memberidx21 = getelementptr inbounds %ExpressionNode, ptr %45, i32 0, i32 2
  %46 = load i64, ptr %memberidx21, align 4
  %47 = icmp eq i64 %46, 8
  br i1 %47, label %if.entry22, label %else23

if.entry22:                                       ; preds = %ifend20
  %48 = load ptr, ptr %this, align 8
  %49 = load ptr, ptr %expected_type, align 8
  %50 = load ptr, ptr %expr_node, align 8
  %51 = call ptr @TypeChecker_check_var_access_expr(ptr %48, ptr %49, ptr %50)
  ret ptr %51

else23:                                           ; preds = %ifend20
  br label %ifend24

ifend24:                                          ; preds = %else23
  %52 = load ptr, ptr %expr_node, align 8
  %memberidx25 = getelementptr inbounds %ExpressionNode, ptr %52, i32 0, i32 2
  %53 = load i64, ptr %memberidx25, align 4
  %54 = icmp eq i64 %53, 9
  br i1 %54, label %if.entry26, label %else27

if.entry26:                                       ; preds = %ifend24
  %55 = load ptr, ptr %this, align 8
  %56 = load ptr, ptr %expected_type, align 8
  %57 = load ptr, ptr %expr_node, align 8
  %58 = call ptr @TypeChecker_check_bin_expr(ptr %55, ptr %56, ptr %57)
  ret ptr %58

else27:                                           ; preds = %ifend24
  br label %ifend28

ifend28:                                          ; preds = %else27
  %59 = load ptr, ptr %expr_node, align 8
  %memberidx29 = getelementptr inbounds %ExpressionNode, ptr %59, i32 0, i32 2
  %60 = load i64, ptr %memberidx29, align 4
  %61 = icmp eq i64 %60, 10
  br i1 %61, label %if.entry30, label %else31

if.entry30:                                       ; preds = %ifend28
  %62 = load ptr, ptr %this, align 8
  %63 = load ptr, ptr %expected_type, align 8
  %64 = load ptr, ptr %expr_node, align 8
  %65 = call ptr @TypeChecker_check_unary_expr(ptr %62, ptr %63, ptr %64)
  ret ptr %65

else31:                                           ; preds = %ifend28
  br label %ifend32

ifend32:                                          ; preds = %else31
  %66 = load ptr, ptr %expr_node, align 8
  %memberidx33 = getelementptr inbounds %ExpressionNode, ptr %66, i32 0, i32 2
  %67 = load i64, ptr %memberidx33, align 4
  %68 = icmp eq i64 %67, 16
  br i1 %68, label %if.entry34, label %else35

if.entry34:                                       ; preds = %ifend32
  %69 = load ptr, ptr %this, align 8
  %70 = load ptr, ptr %expected_type, align 8
  %71 = load ptr, ptr %expr_node, align 8
  %72 = call ptr @TypeChecker_check_ternary_expr(ptr %69, ptr %70, ptr %71)
  ret ptr %72

else35:                                           ; preds = %ifend32
  br label %ifend36

ifend36:                                          ; preds = %else35
  %73 = load ptr, ptr %expr_node, align 8
  %memberidx37 = getelementptr inbounds %ExpressionNode, ptr %73, i32 0, i32 2
  %74 = load i64, ptr %memberidx37, align 4
  %75 = icmp eq i64 %74, 11
  br i1 %75, label %if.entry38, label %else39

if.entry38:                                       ; preds = %ifend36
  %76 = load ptr, ptr %this, align 8
  %77 = load ptr, ptr %expr_node, align 8
  %78 = call ptr @TypeChecker_check_typecast_expr(ptr %76, ptr %77)
  ret ptr %78

else39:                                           ; preds = %ifend36
  br label %ifend40

ifend40:                                          ; preds = %else39
  %79 = load ptr, ptr %expr_node, align 8
  %memberidx41 = getelementptr inbounds %ExpressionNode, ptr %79, i32 0, i32 2
  %80 = load i64, ptr %memberidx41, align 4
  %81 = icmp eq i64 %80, 12
  br i1 %81, label %if.entry42, label %else43

if.entry42:                                       ; preds = %ifend40
  %82 = load ptr, ptr %this, align 8
  %83 = load ptr, ptr %expr_node, align 8
  %84 = call ptr @TypeChecker_check_new_expr(ptr %82, ptr %83)
  ret ptr %84

else43:                                           ; preds = %ifend40
  br label %ifend44

ifend44:                                          ; preds = %else43
  %85 = load ptr, ptr %expr_node, align 8
  %memberidx45 = getelementptr inbounds %ExpressionNode, ptr %85, i32 0, i32 2
  %86 = load i64, ptr %memberidx45, align 4
  %87 = icmp eq i64 %86, 13
  br i1 %87, label %if.entry46, label %else47

if.entry46:                                       ; preds = %ifend44
  %88 = load ptr, ptr %this, align 8
  %89 = load ptr, ptr %expected_type, align 8
  %90 = load ptr, ptr %expr_node, align 8
  %91 = call ptr @TypeChecker_check_member_expr(ptr %88, ptr %89, ptr %90)
  ret ptr %91

else47:                                           ; preds = %ifend44
  br label %ifend48

ifend48:                                          ; preds = %else47
  %92 = load ptr, ptr %expr_node, align 8
  %memberidx49 = getelementptr inbounds %ExpressionNode, ptr %92, i32 0, i32 2
  %93 = load i64, ptr %memberidx49, align 4
  %94 = icmp eq i64 %93, 14
  br i1 %94, label %if.entry50, label %else51

if.entry50:                                       ; preds = %ifend48
  %95 = load ptr, ptr %this, align 8
  %96 = load ptr, ptr %expr_node, align 8
  %97 = call ptr @TypeChecker_check_index_expr(ptr %95, ptr %96)
  ret ptr %97

else51:                                           ; preds = %ifend48
  br label %ifend52

ifend52:                                          ; preds = %else51
  %98 = load ptr, ptr %expr_node, align 8
  %memberidx53 = getelementptr inbounds %ExpressionNode, ptr %98, i32 0, i32 2
  %99 = load i64, ptr %memberidx53, align 4
  %100 = icmp eq i64 %99, 15
  br i1 %100, label %if.entry54, label %else55

if.entry54:                                       ; preds = %ifend52
  %101 = load ptr, ptr %this, align 8
  %102 = load ptr, ptr %expected_type, align 8
  %103 = load ptr, ptr %expr_node, align 8
  %104 = call ptr @TypeChecker_check_call_expr(ptr %101, ptr %102, ptr %103)
  ret ptr %104

else55:                                           ; preds = %ifend52
  br label %ifend56

ifend56:                                          ; preds = %else55
  %105 = load ptr, ptr %expr_node, align 8
  %memberidx57 = getelementptr inbounds %ExpressionNode, ptr %105, i32 0, i32 2
  %106 = load i64, ptr %memberidx57, align 4
  %107 = icmp eq i64 %106, 17
  br i1 %107, label %if.entry58, label %else59

if.entry58:                                       ; preds = %ifend56
  %108 = load ptr, ptr %this, align 8
  %109 = load ptr, ptr %expected_type, align 8
  %110 = load ptr, ptr %expr_node, align 8
  %111 = call ptr @TypeChecker_check_match_expr(ptr %108, ptr %109, ptr %110)
  ret ptr %111

else59:                                           ; preds = %ifend56
  br label %ifend60

ifend60:                                          ; preds = %else59
  ret ptr null
}

define void @TypeChecker_declare_global_var(ptr %0, ptr %1) {
  %var_decl_node = alloca ptr, align 8
  %this = alloca ptr, align 8
  %var_stmt = alloca ptr, align 8
  %value = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %var_decl_node, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %var_decl_node, align 8
  %5 = call ptr @TypeChecker_check_var_declaration(ptr %3, ptr %4)
  store ptr %5, ptr %var_stmt, align 8
  %6 = load ptr, ptr %this, align 8
  %7 = call i1 @TypeChecker_has_errored(ptr %6)
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret void

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %8 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %8, i32 0, i32 0
  %9 = load ptr, ptr %memberidx, align 8
  %10 = load ptr, ptr %var_stmt, align 8
  %memberidx1 = getelementptr inbounds %VarDeclaration, ptr %10, i32 0, i32 2
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = call ptr @get_var(ptr %9, ptr %11)
  %memberidx2 = getelementptr inbounds %Var, ptr %12, i32 0, i32 2
  %13 = load ptr, ptr %memberidx2, align 8
  store ptr %13, ptr %value, align 8
  %14 = load ptr, ptr %value, align 8
  %15 = icmp ne ptr %14, null
  br i1 %15, label %if.entry3, label %else4

if.entry3:                                        ; preds = %ifend
  %16 = load ptr, ptr %value, align 8
  %memberidx6 = getelementptr inbounds %Expression, ptr %16, i32 0, i32 1
  %17 = load i1, ptr %memberidx6, align 1
  %18 = xor i1 %17, true
  br i1 %18, label %if.entry7, label %else8

else4:                                            ; preds = %ifend
  br label %ifend5

ifend5:                                           ; preds = %else4, %ifend9
  %19 = load ptr, ptr %var_stmt, align 8
  %memberidx12 = getelementptr inbounds %VarDeclaration, ptr %19, i32 0, i32 3
  store i1 true, ptr %memberidx12, align 1
  %20 = load ptr, ptr %this, align 8
  %21 = call ptr @TypeChecker_get_current_module(ptr %20)
  %memberidx13 = getelementptr inbounds %Module, ptr %21, i32 0, i32 9
  %22 = load ptr, ptr %memberidx13, align 8
  %23 = load ptr, ptr %var_stmt, align 8
  call void @Array_VarDeclaration____sl__(ptr %22, ptr %23)
  ret void

if.entry7:                                        ; preds = %if.entry3
  %24 = load ptr, ptr %this, align 8
  %25 = call ptr @string_from_bytes(ptr @349, i64 54)
  %26 = load ptr, ptr %var_decl_node, align 8
  %memberidx10 = getelementptr inbounds %VarDeclarationStatement, ptr %26, i32 0, i32 4
  %27 = load ptr, ptr %memberidx10, align 8
  %memberidx11 = getelementptr inbounds %Node, ptr %27, i32 0, i32 0
  %28 = load ptr, ptr %memberidx11, align 8
  call void @TypeChecker_error(ptr %24, i64 4, ptr %25, ptr %28)
  ret void

else8:                                            ; preds = %if.entry3
  br label %ifend9

ifend9:                                           ; preds = %else8
  br label %ifend5
}

define ptr @TypeChecker_check_var_access_expr(ptr %0, ptr %1, ptr %2) {
  %expected_type = alloca ptr, align 8
  %this = alloca ptr, align 8
  %var_access_node = alloca ptr, align 8
  %current_scope = alloca ptr, align 8
  %name = alloca ptr, align 8
  %var_ty = alloca ptr, align 8
  %resolved = alloca ptr, align 8
  %var_id = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %expected_type, align 8
  store ptr %2, ptr %var_access_node, align 8
  %4 = load ptr, ptr %var_access_node, align 8
  %memberidx = getelementptr inbounds %VarAccessExpressionNode, ptr %4, i32 0, i32 3
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx1, align 8
  store ptr %6, ptr %name, align 8
  %7 = load ptr, ptr %name, align 8
  %8 = call ptr @string_from_bytes(ptr @342, i64 4)
  %9 = call i1 @string___eq__(ptr %7, ptr %8)
  br i1 %9, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %10 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BooleanExpression, ptr null, i32 1) to i32))
  call void @BooleanExpression_constructor(ptr %10, i1 true)
  ret ptr %10

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %11 = load ptr, ptr %name, align 8
  %12 = call ptr @string_from_bytes(ptr @343, i64 5)
  %13 = call i1 @string___eq__(ptr %11, ptr %12)
  br i1 %13, label %if.entry2, label %else3

if.entry2:                                        ; preds = %ifend
  %14 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BooleanExpression, ptr null, i32 1) to i32))
  call void @BooleanExpression_constructor(ptr %14, i1 false)
  ret ptr %14

else3:                                            ; preds = %ifend
  br label %ifend4

ifend4:                                           ; preds = %else3
  %15 = load ptr, ptr %name, align 8
  %16 = call ptr @string_from_bytes(ptr @344, i64 4)
  %17 = call i1 @string___eq__(ptr %15, ptr %16)
  br i1 %17, label %if.entry5, label %else6

if.entry5:                                        ; preds = %ifend4
  %18 = load ptr, ptr %expected_type, align 8
  %memberidx8 = getelementptr inbounds %Type, ptr %18, i32 0, i32 0
  %19 = load i64, ptr %memberidx8, align 4
  %20 = icmp eq i64 %19, 10
  br i1 %20, label %if.entry9, label %else10

else6:                                            ; preds = %ifend4
  br label %ifend7

ifend7:                                           ; preds = %else6
  %21 = load ptr, ptr %this, align 8
  %22 = call ptr @TypeChecker_get_current_scope(ptr %21)
  store ptr %22, ptr %current_scope, align 8
  %23 = load ptr, ptr %this, align 8
  %24 = load ptr, ptr %name, align 8
  %25 = call ptr @TypeChecker_get_var_from_current_scope(ptr %23, ptr %24)
  store ptr %25, ptr %resolved, align 8
  %26 = call ptr @Type_unknown()
  store ptr %26, ptr %var_ty, align 8
  %27 = load ptr, ptr %resolved, align 8
  %28 = icmp ne ptr %27, null
  br i1 %28, label %if.entry14, label %else15

if.entry9:                                        ; preds = %if.entry5
  %29 = load ptr, ptr %this, align 8
  %30 = call ptr @string_from_bytes(ptr @431, i64 37)
  %31 = load ptr, ptr %var_access_node, align 8
  %memberidx12 = getelementptr inbounds %VarAccessExpressionNode, ptr %31, i32 0, i32 3
  %32 = load ptr, ptr %memberidx12, align 8
  %memberidx13 = getelementptr inbounds %Token, ptr %32, i32 0, i32 1
  %33 = load ptr, ptr %memberidx13, align 8
  call void @TypeChecker_error(ptr %29, i64 5, ptr %30, ptr %33)
  ret ptr null

else10:                                           ; preds = %if.entry5
  br label %ifend11

ifend11:                                          ; preds = %else10
  %34 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%NullExpression, ptr null, i32 1) to i32))
  %35 = load ptr, ptr %expected_type, align 8
  call void @NullExpression_constructor(ptr %34, ptr %35)
  ret ptr %34

if.entry14:                                       ; preds = %ifend7
  %36 = load ptr, ptr %resolved, align 8
  store ptr %36, ptr %var_id, align 8
  %37 = load ptr, ptr %var_id, align 8
  %memberidx17 = getelementptr inbounds %VarId, ptr %37, i32 0, i32 0
  %38 = load i64, ptr %memberidx17, align 4
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %if.entry18, label %else19

else15:                                           ; preds = %ifend7
  br label %ifend16

ifend16:                                          ; preds = %else15
  %40 = load ptr, ptr %this, align 8
  %41 = load ptr, ptr %name, align 8
  %42 = getelementptr inbounds %string, ptr %41, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %memberidx44 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %43, i32 0, i32 5
  %44 = load ptr, ptr %memberidx44, align 8
  %45 = call ptr %44(ptr %41)
  %46 = alloca ptr, align 8
  %47 = call i64 (ptr, ptr, ...) @asprintf(ptr %46, ptr @432, ptr %45)
  %48 = load ptr, ptr %46, align 8
  %49 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %49, ptr %48, i64 %47)
  tail call void @free(ptr %45)
  %50 = load ptr, ptr %var_access_node, align 8
  %memberidx45 = getelementptr inbounds %Node, ptr %50, i32 0, i32 0
  %51 = load ptr, ptr %memberidx45, align 8
  call void @TypeChecker_error(ptr %40, i64 1, ptr %49, ptr %51)
  ret ptr null

if.entry18:                                       ; preds = %if.entry14
  %52 = load ptr, ptr %this, align 8
  %memberidx21 = getelementptr inbounds %TypeChecker, ptr %52, i32 0, i32 0
  %53 = load ptr, ptr %memberidx21, align 8
  %54 = load ptr, ptr %var_id, align 8
  %55 = call ptr @get_func(ptr %53, ptr %54)
  %memberidx22 = getelementptr inbounds %Function, ptr %55, i32 0, i32 4
  %56 = load ptr, ptr %memberidx22, align 8
  store ptr %56, ptr %var_ty, align 8
  br label %ifend20

else19:                                           ; preds = %if.entry14
  %57 = load ptr, ptr %var_id, align 8
  %memberidx23 = getelementptr inbounds %VarId, ptr %57, i32 0, i32 0
  %58 = load i64, ptr %memberidx23, align 4
  %59 = icmp eq i64 %58, 1
  br i1 %59, label %if.entry24, label %else25

ifend20:                                          ; preds = %ifend26, %if.entry18
  %60 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%VarAccessExpression, ptr null, i32 1) to i32))
  %61 = load ptr, ptr %var_id, align 8
  %62 = load ptr, ptr %var_ty, align 8
  call void @VarAccessExpression_constructor(ptr %60, ptr %61, ptr %62)
  ret ptr %60

if.entry24:                                       ; preds = %else19
  %63 = load ptr, ptr %this, align 8
  %memberidx27 = getelementptr inbounds %TypeChecker, ptr %63, i32 0, i32 0
  %64 = load ptr, ptr %memberidx27, align 8
  %65 = load ptr, ptr %var_id, align 8
  %66 = call ptr @get_var(ptr %64, ptr %65)
  %memberidx28 = getelementptr inbounds %Value, ptr %66, i32 0, i32 0
  %67 = load ptr, ptr %memberidx28, align 8
  store ptr %67, ptr %var_ty, align 8
  br label %ifend26

else25:                                           ; preds = %else19
  %68 = load ptr, ptr %var_id, align 8
  %memberidx29 = getelementptr inbounds %VarId, ptr %68, i32 0, i32 0
  %69 = load i64, ptr %memberidx29, align 4
  %70 = icmp eq i64 %69, 2
  br i1 %70, label %if.entry30, label %else31

ifend26:                                          ; preds = %ifend32, %if.entry24
  br label %ifend20

if.entry30:                                       ; preds = %else25
  %71 = load ptr, ptr %this, align 8
  %memberidx33 = getelementptr inbounds %TypeChecker, ptr %71, i32 0, i32 0
  %72 = load ptr, ptr %memberidx33, align 8
  %73 = load ptr, ptr %var_id, align 8
  %74 = call ptr @get_const(ptr %72, ptr %73)
  %memberidx34 = getelementptr inbounds %Value, ptr %74, i32 0, i32 0
  %75 = load ptr, ptr %memberidx34, align 8
  store ptr %75, ptr %var_ty, align 8
  br label %ifend32

else31:                                           ; preds = %else25
  %76 = load ptr, ptr %var_id, align 8
  %memberidx35 = getelementptr inbounds %VarId, ptr %76, i32 0, i32 0
  %77 = load i64, ptr %memberidx35, align 4
  %78 = icmp eq i64 %77, 3
  %79 = load ptr, ptr %var_id, align 8
  %memberidx36 = getelementptr inbounds %VarId, ptr %79, i32 0, i32 0
  %80 = load i64, ptr %memberidx36, align 4
  %81 = icmp eq i64 %80, 4
  %82 = or i1 %78, %81
  br i1 %82, label %if.entry37, label %else38

ifend32:                                          ; preds = %ifend39, %if.entry30
  br label %ifend26

if.entry37:                                       ; preds = %else31
  %83 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %83, i64 17)
  store ptr %83, ptr %var_ty, align 8
  br label %ifend39

else38:                                           ; preds = %else31
  %84 = load ptr, ptr %var_id, align 8
  %memberidx40 = getelementptr inbounds %VarId, ptr %84, i32 0, i32 0
  %85 = load i64, ptr %memberidx40, align 4
  %86 = icmp eq i64 %85, 5
  br i1 %86, label %if.entry41, label %else42

ifend39:                                          ; preds = %ifend43, %if.entry37
  br label %ifend32

if.entry41:                                       ; preds = %else38
  %87 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Type, ptr null, i32 1) to i32))
  call void @Type_constructor(ptr %87, i64 18)
  store ptr %87, ptr %var_ty, align 8
  br label %ifend43

else42:                                           ; preds = %else38
  br label %ifend43

ifend43:                                          ; preds = %else42, %if.entry41
  br label %ifend39
}

define void @IntrinsicCall_constructor(ptr %0, i64 %1) {
  %intrinsic = alloca i64, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Expression_constructor, ptr %super, align 8
  store i64 %1, ptr %intrinsic, align 4
  %3 = load ptr, ptr %super, align 8
  call void %3(ptr %0, i64 18)
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %IntrinsicCall, ptr %4, i32 0, i32 4
  %5 = load i64, ptr %intrinsic, align 4
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %IntrinsicCall, ptr %6, i32 0, i32 5
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Expression_, ptr null, i32 1) to i32))
  call void @Array_Expression__constructor(ptr %7, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx2 = getelementptr inbounds %Array_Expression_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_Expression_, ptr %7, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  store ptr %7, ptr %memberidx1, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Expression, ptr %9, i32 0, i32 3
  %10 = call ptr @Type_unknown()
  store ptr %10, ptr %memberidx4, align 8
  ret void
}

define ptr @TypeChecker_check_intrinsic_call(ptr %0, ptr %1, ptr %2) {
  %this = alloca ptr, align 8
  %call_expr_node = alloca ptr, align 8
  %intrinsic_call = alloca ptr, align 8
  %args = alloca ptr, align 8
  %intrinsic_func = alloca i64, align 8
  %is_mem_grp1 = alloca i1, align 1
  %int_ty = alloca ptr, align 8
  %unknown_ty = alloca ptr, align 8
  %arg_value = alloca ptr, align 8
  %i = alloca i64, align 8
  %expected_type = alloca ptr, align 8
  %exp_arg2_type = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %intrinsic_call, align 8
  store ptr %2, ptr %call_expr_node, align 8
  %4 = load ptr, ptr %call_expr_node, align 8
  %memberidx = getelementptr inbounds %CallExpressionNode, ptr %4, i32 0, i32 4
  %5 = load ptr, ptr %memberidx, align 8
  store ptr %5, ptr %args, align 8
  %6 = load ptr, ptr %intrinsic_call, align 8
  %memberidx1 = getelementptr inbounds %IntrinsicCall, ptr %6, i32 0, i32 4
  %7 = load i64, ptr %memberidx1, align 4
  store i64 %7, ptr %intrinsic_func, align 4
  %8 = load i64, ptr %intrinsic_func, align 4
  %9 = icmp eq i64 %8, 3
  %10 = load i64, ptr %intrinsic_func, align 4
  %11 = icmp eq i64 %10, 4
  %12 = or i1 %9, %11
  %13 = load i64, ptr %intrinsic_func, align 4
  %14 = icmp eq i64 %13, 7
  %15 = or i1 %12, %14
  store i1 %15, ptr %is_mem_grp1, align 1
  %16 = alloca %IntType, align 8
  call void @IntType_constructor(ptr %16, i64 6, i1 false)
  store ptr %16, ptr %int_ty, align 8
  %17 = alloca %Type, align 8
  call void @Type_constructor(ptr %17, i64 21)
  store ptr %17, ptr %unknown_ty, align 8
  br label %for.entry

for.entry:                                        ; preds = %3
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %18 = load i64, ptr %i, align 4
  %19 = load ptr, ptr %args, align 8
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx2, align 4
  %21 = icmp slt i64 %18, %20
  br i1 %21, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %22 = load i1, ptr %is_mem_grp1, align 1
  %23 = load i64, ptr %i, align 4
  %24 = icmp eq i64 %23, 1
  %25 = and i1 %22, %24
  br i1 %25, label %true_block, label %false_block

for.incr:                                         ; preds = %ifend17
  %26 = load i64, ptr %i, align 4
  %27 = add nsw i64 %26, 1
  store i64 %27, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load ptr, ptr %intrinsic_call, align 8
  %memberidx27 = getelementptr inbounds %IntrinsicCall, ptr %28, i32 0, i32 5
  %29 = load ptr, ptr %memberidx27, align 8
  %30 = call ptr @Array_Expression____getitem__(ptr %29, i64 0)
  %memberidx28 = getelementptr inbounds %Expression, ptr %30, i32 0, i32 3
  %31 = load ptr, ptr %memberidx28, align 8
  %32 = call i1 @is_pointer(ptr %31)
  %33 = xor i1 %32, true
  br i1 %33, label %if.entry29, label %else30

true_block:                                       ; preds = %for.body
  %34 = load ptr, ptr %unknown_ty, align 8
  br label %end

false_block:                                      ; preds = %for.body
  %35 = load ptr, ptr %intrinsic_call, align 8
  %memberidx3 = getelementptr inbounds %IntrinsicCall, ptr %35, i32 0, i32 5
  %36 = load ptr, ptr %memberidx3, align 8
  %37 = call ptr @Array_Expression____getitem__(ptr %36, i64 0)
  %memberidx4 = getelementptr inbounds %Expression, ptr %37, i32 0, i32 3
  %38 = load ptr, ptr %memberidx4, align 8
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %34, %true_block ], [ %38, %false_block ]
  store ptr %ternary, ptr %expected_type, align 8
  %39 = load i64, ptr %intrinsic_func, align 4
  %40 = icmp eq i64 %39, 3
  %41 = load i64, ptr %intrinsic_func, align 4
  %42 = icmp eq i64 %41, 4
  %43 = or i1 %40, %42
  %44 = load i64, ptr %i, align 4
  %45 = icmp eq i64 %44, 1
  %46 = and i1 %43, %45
  br i1 %46, label %if.entry, label %else

if.entry:                                         ; preds = %end
  %47 = load ptr, ptr %int_ty, align 8
  store ptr %47, ptr %expected_type, align 8
  br label %ifend

else:                                             ; preds = %end
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %48 = load i64, ptr %intrinsic_func, align 4
  %49 = icmp eq i64 %48, 6
  %50 = load i64, ptr %i, align 4
  %51 = icmp eq i64 %50, 0
  %52 = and i1 %49, %51
  br i1 %52, label %if.entry5, label %else6

if.entry5:                                        ; preds = %ifend
  %53 = load ptr, ptr %int_ty, align 8
  store ptr %53, ptr %expected_type, align 8
  br label %ifend7

else6:                                            ; preds = %ifend
  br label %ifend7

ifend7:                                           ; preds = %else6, %if.entry5
  %54 = load i64, ptr %intrinsic_func, align 4
  %55 = icmp eq i64 %54, 5
  br i1 %55, label %if.entry8, label %else9

if.entry8:                                        ; preds = %ifend7
  %56 = load ptr, ptr %int_ty, align 8
  store ptr %56, ptr %expected_type, align 8
  br label %ifend10

else9:                                            ; preds = %ifend7
  br label %ifend10

ifend10:                                          ; preds = %else9, %if.entry8
  %57 = load ptr, ptr %this, align 8
  %58 = load ptr, ptr %expected_type, align 8
  %59 = load ptr, ptr %args, align 8
  %60 = load i64, ptr %i, align 4
  %61 = call ptr @Array_ExpressionNode____getitem__(ptr %59, i64 %60)
  %62 = call ptr @TypeChecker_check_expression(ptr %57, ptr %58, ptr %61)
  store ptr %62, ptr %arg_value, align 8
  %63 = load ptr, ptr %this, align 8
  %64 = call i1 @TypeChecker_has_errored(ptr %63)
  br i1 %64, label %if.entry11, label %else12

if.entry11:                                       ; preds = %ifend10
  ret ptr null

else12:                                           ; preds = %ifend10
  br label %ifend13

ifend13:                                          ; preds = %else12
  %65 = load ptr, ptr %expected_type, align 8
  %memberidx14 = getelementptr inbounds %Type, ptr %65, i32 0, i32 0
  %66 = load i64, ptr %memberidx14, align 4
  %67 = icmp ne i64 %66, 21
  br i1 %67, label %if.entry15, label %else16

if.entry15:                                       ; preds = %ifend13
  %68 = load ptr, ptr %this, align 8
  %69 = load ptr, ptr %expected_type, align 8
  %70 = load ptr, ptr %arg_value, align 8
  %memberidx18 = getelementptr inbounds %Expression, ptr %70, i32 0, i32 3
  %71 = load ptr, ptr %memberidx18, align 8
  %72 = call i1 @TypeChecker_types_are_eq(ptr %68, ptr %69, ptr %71)
  %73 = xor i1 %72, true
  br i1 %73, label %if.entry19, label %else20

else16:                                           ; preds = %ifend13
  br label %ifend17

ifend17:                                          ; preds = %else16, %ifend21
  %74 = load ptr, ptr %intrinsic_call, align 8
  %memberidx26 = getelementptr inbounds %IntrinsicCall, ptr %74, i32 0, i32 5
  %75 = load ptr, ptr %memberidx26, align 8
  %76 = load ptr, ptr %arg_value, align 8
  call void @Array_Expression____sl__(ptr %75, ptr %76)
  br label %for.incr

if.entry19:                                       ; preds = %if.entry15
  %77 = load ptr, ptr %this, align 8
  %78 = load i64, ptr %i, align 4
  %79 = load ptr, ptr %this, align 8
  %80 = load ptr, ptr %expected_type, align 8
  %81 = call ptr @TypeChecker_dump_type(ptr %79, ptr %80)
  %82 = getelementptr inbounds %string, ptr %81, i32 0, i32 0
  %83 = load ptr, ptr %82, align 8
  %memberidx22 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %83, i32 0, i32 5
  %84 = load ptr, ptr %memberidx22, align 8
  %85 = call ptr %84(ptr %81)
  %86 = load ptr, ptr %this, align 8
  %87 = load ptr, ptr %arg_value, align 8
  %memberidx23 = getelementptr inbounds %Expression, ptr %87, i32 0, i32 3
  %88 = load ptr, ptr %memberidx23, align 8
  %89 = call ptr @TypeChecker_dump_type(ptr %86, ptr %88)
  %90 = getelementptr inbounds %string, ptr %89, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  %memberidx24 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %91, i32 0, i32 5
  %92 = load ptr, ptr %memberidx24, align 8
  %93 = call ptr %92(ptr %89)
  %94 = alloca ptr, align 8
  %95 = call i64 (ptr, ptr, ...) @asprintf(ptr %94, ptr @496, i64 %78, ptr %85, ptr %93)
  %96 = load ptr, ptr %94, align 8
  %97 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %97, ptr %96, i64 %95)
  tail call void @free(ptr %85)
  tail call void @free(ptr %93)
  %98 = load ptr, ptr %args, align 8
  %99 = load i64, ptr %i, align 4
  %100 = call ptr @Array_ExpressionNode____getitem__(ptr %98, i64 %99)
  %memberidx25 = getelementptr inbounds %Node, ptr %100, i32 0, i32 0
  %101 = load ptr, ptr %memberidx25, align 8
  call void @TypeChecker_error(ptr %77, i64 5, ptr %97, ptr %101)
  ret ptr null

else20:                                           ; preds = %if.entry15
  br label %ifend21

ifend21:                                          ; preds = %else20
  br label %ifend17

if.entry29:                                       ; preds = %for.end
  %102 = load ptr, ptr %this, align 8
  %103 = load ptr, ptr %this, align 8
  %104 = load ptr, ptr %intrinsic_call, align 8
  %memberidx32 = getelementptr inbounds %IntrinsicCall, ptr %104, i32 0, i32 5
  %105 = load ptr, ptr %memberidx32, align 8
  %106 = call ptr @Array_Expression____getitem__(ptr %105, i64 0)
  %memberidx33 = getelementptr inbounds %Expression, ptr %106, i32 0, i32 3
  %107 = load ptr, ptr %memberidx33, align 8
  %108 = call ptr @TypeChecker_dump_type(ptr %103, ptr %107)
  %109 = getelementptr inbounds %string, ptr %108, i32 0, i32 0
  %110 = load ptr, ptr %109, align 8
  %memberidx34 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %110, i32 0, i32 5
  %111 = load ptr, ptr %memberidx34, align 8
  %112 = call ptr %111(ptr %108)
  %113 = alloca ptr, align 8
  %114 = call i64 (ptr, ptr, ...) @asprintf(ptr %113, ptr @497, ptr %112)
  %115 = load ptr, ptr %113, align 8
  %116 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %116, ptr %115, i64 %114)
  tail call void @free(ptr %112)
  %117 = load ptr, ptr %call_expr_node, align 8
  %memberidx35 = getelementptr inbounds %CallExpressionNode, ptr %117, i32 0, i32 3
  %118 = load ptr, ptr %memberidx35, align 8
  %memberidx36 = getelementptr inbounds %Node, ptr %118, i32 0, i32 0
  %119 = load ptr, ptr %memberidx36, align 8
  call void @TypeChecker_error(ptr %102, i64 5, ptr %116, ptr %119)
  ret ptr null

else30:                                           ; preds = %for.end
  br label %ifend31

ifend31:                                          ; preds = %else30
  %120 = load i64, ptr %intrinsic_func, align 4
  %121 = icmp eq i64 %120, 6
  br i1 %121, label %if.entry37, label %else38

if.entry37:                                       ; preds = %ifend31
  %122 = load ptr, ptr %intrinsic_call, align 8
  %memberidx40 = getelementptr inbounds %IntrinsicCall, ptr %122, i32 0, i32 5
  %123 = load ptr, ptr %memberidx40, align 8
  %memberidx41 = getelementptr inbounds %Array_Expression_, ptr %123, i32 0, i32 2
  %124 = load i64, ptr %memberidx41, align 4
  %125 = icmp ne i64 %124, 2
  br i1 %125, label %if.entry42, label %else43

else38:                                           ; preds = %ifend31
  %126 = load i1, ptr %is_mem_grp1, align 1
  %127 = load i64, ptr %intrinsic_func, align 4
  %128 = icmp eq i64 %127, 5
  %129 = or i1 %126, %128
  br i1 %129, label %if.entry51, label %else52

ifend39:                                          ; preds = %ifend53, %ifend44
  %130 = load ptr, ptr %intrinsic_call, align 8
  ret ptr %130

if.entry42:                                       ; preds = %if.entry37
  %131 = load ptr, ptr %this, align 8
  %132 = load ptr, ptr %intrinsic_call, align 8
  %memberidx45 = getelementptr inbounds %IntrinsicCall, ptr %132, i32 0, i32 5
  %133 = load ptr, ptr %memberidx45, align 8
  %memberidx46 = getelementptr inbounds %Array_Expression_, ptr %133, i32 0, i32 2
  %134 = load i64, ptr %memberidx46, align 4
  %135 = alloca ptr, align 8
  %136 = call i64 (ptr, ptr, ...) @asprintf(ptr %135, ptr @498, i64 %134)
  %137 = load ptr, ptr %135, align 8
  %138 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %138, ptr %137, i64 %136)
  %139 = load ptr, ptr %call_expr_node, align 8
  %memberidx47 = getelementptr inbounds %Node, ptr %139, i32 0, i32 0
  %140 = load ptr, ptr %memberidx47, align 8
  call void @TypeChecker_error(ptr %131, i64 4, ptr %138, ptr %140)
  ret ptr null

else43:                                           ; preds = %if.entry37
  br label %ifend44

ifend44:                                          ; preds = %else43
  %141 = load ptr, ptr %intrinsic_call, align 8
  %memberidx48 = getelementptr inbounds %Expression, ptr %141, i32 0, i32 3
  %142 = load ptr, ptr %intrinsic_call, align 8
  %memberidx49 = getelementptr inbounds %IntrinsicCall, ptr %142, i32 0, i32 5
  %143 = load ptr, ptr %memberidx49, align 8
  %144 = call ptr @Array_Expression____getitem__(ptr %143, i64 0)
  %memberidx50 = getelementptr inbounds %Expression, ptr %144, i32 0, i32 3
  %145 = load ptr, ptr %memberidx50, align 8
  store ptr %145, ptr %memberidx48, align 8
  br label %ifend39

if.entry51:                                       ; preds = %else38
  %146 = load ptr, ptr %intrinsic_call, align 8
  %memberidx54 = getelementptr inbounds %IntrinsicCall, ptr %146, i32 0, i32 5
  %147 = load ptr, ptr %memberidx54, align 8
  %memberidx55 = getelementptr inbounds %Array_Expression_, ptr %147, i32 0, i32 2
  %148 = load i64, ptr %memberidx55, align 4
  %149 = icmp ne i64 %148, 3
  br i1 %149, label %if.entry56, label %else57

else52:                                           ; preds = %else38
  br label %ifend53

ifend53:                                          ; preds = %else52, %ifend67
  br label %ifend39

if.entry56:                                       ; preds = %if.entry51
  %150 = load ptr, ptr %this, align 8
  %151 = load ptr, ptr %intrinsic_call, align 8
  %memberidx59 = getelementptr inbounds %IntrinsicCall, ptr %151, i32 0, i32 5
  %152 = load ptr, ptr %memberidx59, align 8
  %memberidx60 = getelementptr inbounds %Array_Expression_, ptr %152, i32 0, i32 2
  %153 = load i64, ptr %memberidx60, align 4
  %154 = alloca ptr, align 8
  %155 = call i64 (ptr, ptr, ...) @asprintf(ptr %154, ptr @499, i64 %153)
  %156 = load ptr, ptr %154, align 8
  %157 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %157, ptr %156, i64 %155)
  %158 = load ptr, ptr %call_expr_node, align 8
  %memberidx61 = getelementptr inbounds %Node, ptr %158, i32 0, i32 0
  %159 = load ptr, ptr %memberidx61, align 8
  call void @TypeChecker_error(ptr %150, i64 4, ptr %157, ptr %159)
  ret ptr null

else57:                                           ; preds = %if.entry51
  br label %ifend58

ifend58:                                          ; preds = %else57
  %160 = load ptr, ptr %intrinsic_call, align 8
  %memberidx62 = getelementptr inbounds %IntrinsicCall, ptr %160, i32 0, i32 5
  %161 = load ptr, ptr %memberidx62, align 8
  %162 = call ptr @Array_Expression____getitem__(ptr %161, i64 0)
  %memberidx63 = getelementptr inbounds %Expression, ptr %162, i32 0, i32 3
  %163 = load ptr, ptr %memberidx63, align 8
  store ptr %163, ptr %exp_arg2_type, align 8
  %164 = load ptr, ptr %intrinsic_call, align 8
  %memberidx64 = getelementptr inbounds %Expression, ptr %164, i32 0, i32 3
  %165 = load ptr, ptr %exp_arg2_type, align 8
  store ptr %165, ptr %memberidx64, align 8
  %166 = load i64, ptr %intrinsic_func, align 4
  %167 = icmp eq i64 %166, 7
  br i1 %167, label %if.entry65, label %else66

if.entry65:                                       ; preds = %ifend58
  %168 = load ptr, ptr %intrinsic_call, align 8
  %memberidx68 = getelementptr inbounds %Expression, ptr %168, i32 0, i32 3
  %169 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntType, ptr null, i32 1) to i32))
  call void @IntType_constructor(ptr %169, i64 6, i1 true)
  store ptr %169, ptr %memberidx68, align 8
  br label %ifend67

else66:                                           ; preds = %ifend58
  br label %ifend67

ifend67:                                          ; preds = %else66, %if.entry65
  br label %ifend53
}

define i64 @TypeChecker_check_function_call_args_match(ptr %0, ptr %1, ptr %2) {
  %args = alloca ptr, align 8
  %this = alloca ptr, align 8
  %func_ty = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %func_ty, align 8
  store ptr %2, ptr %args, align 8
  %4 = load ptr, ptr %func_ty, align 8
  %memberidx = getelementptr inbounds %FunctionType, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_Type_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = load ptr, ptr %args, align 8
  %memberidx2 = getelementptr inbounds %Array_Expression_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx2, align 4
  %9 = icmp ne i64 %6, %8
  br i1 %9, label %if.entry, label %else

if.entry:                                         ; preds = %3
  ret i64 -1

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.entry

for.entry:                                        ; preds = %ifend
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %10 = load i64, ptr %i, align 4
  %11 = load ptr, ptr %args, align 8
  %memberidx3 = getelementptr inbounds %Array_Expression_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx3, align 4
  %13 = icmp slt i64 %10, %12
  br i1 %13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load ptr, ptr %this, align 8
  %15 = load ptr, ptr %func_ty, align 8
  %memberidx4 = getelementptr inbounds %FunctionType, ptr %15, i32 0, i32 1
  %16 = load ptr, ptr %memberidx4, align 8
  %17 = load i64, ptr %i, align 4
  %18 = call ptr @Array_Type____getitem__(ptr %16, i64 %17)
  %19 = load ptr, ptr %args, align 8
  %20 = load i64, ptr %i, align 4
  %21 = call ptr @Array_Expression____getitem__(ptr %19, i64 %20)
  %memberidx5 = getelementptr inbounds %Expression, ptr %21, i32 0, i32 3
  %22 = load ptr, ptr %memberidx5, align 8
  %23 = call i1 @TypeChecker_types_are_eq(ptr %14, ptr %18, ptr %22)
  %24 = xor i1 %23, true
  br i1 %24, label %if.entry6, label %else7

for.incr:                                         ; preds = %ifend8
  %25 = load i64, ptr %i, align 4
  %26 = add nsw i64 %25, 1
  store i64 %26, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -2

if.entry6:                                        ; preds = %for.body
  %27 = load i64, ptr %i, align 4
  ret i64 %27

else7:                                            ; preds = %for.body
  br label %ifend8

ifend8:                                           ; preds = %else7
  br label %for.incr
}

define void @TypeChecker_error(ptr %0, i64 %1, ptr %2, ptr %3) {
  %range = alloca ptr, align 8
  %kind = alloca i64, align 8
  %message = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %kind, align 4
  store ptr %2, ptr %message, align 8
  store ptr %3, ptr %range, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Compiler, ptr %6, i32 0, i32 6
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%FloError, ptr null, i32 1) to i32))
  %9 = load i64, ptr %kind, align 4
  %10 = load ptr, ptr %message, align 8
  %11 = load ptr, ptr %range, align 8
  call void @FloError_constructor(ptr %8, i64 %9, ptr %10, ptr %11)
  call void @Array_FloError____sl__(ptr %7, ptr %8)
  ret void
}

define void @TypeChecker_check_function_body(ptr %0, ptr %1, ptr %2) {
  %func = alloca ptr, align 8
  %this = alloca ptr, align 8
  %func_node = alloca ptr, align 8
  %prev_scope = alloca ptr, align 8
  %prev_func = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %func, align 8
  store ptr %2, ptr %func_node, align 8
  %4 = load ptr, ptr %func, align 8
  %memberidx = getelementptr inbounds %Function, ptr %4, i32 0, i32 6
  %5 = load i1, ptr %memberidx, align 1
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %3
  ret void

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %TypeChecker, ptr %6, i32 0, i32 2
  %7 = load ptr, ptr %memberidx1, align 8
  store ptr %7, ptr %prev_func, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %TypeChecker, ptr %8, i32 0, i32 2
  %9 = load ptr, ptr %func, align 8
  %memberidx3 = getelementptr inbounds %Function, ptr %9, i32 0, i32 0
  %10 = load ptr, ptr %memberidx3, align 8
  store ptr %10, ptr %memberidx2, align 8
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %TypeChecker, ptr %11, i32 0, i32 4
  %12 = load ptr, ptr %memberidx4, align 8
  store ptr %12, ptr %prev_scope, align 8
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %TypeChecker, ptr %13, i32 0, i32 4
  %14 = load ptr, ptr %func, align 8
  %memberidx6 = getelementptr inbounds %Function, ptr %14, i32 0, i32 5
  %15 = load ptr, ptr %memberidx6, align 8
  store ptr %15, ptr %memberidx5, align 8
  %16 = load ptr, ptr %func, align 8
  %memberidx7 = getelementptr inbounds %Function, ptr %16, i32 0, i32 3
  %17 = load ptr, ptr %this, align 8
  %18 = load ptr, ptr %func_node, align 8
  %memberidx8 = getelementptr inbounds %FunctionDeclarationNode, ptr %18, i32 0, i32 2
  %19 = load ptr, ptr %memberidx8, align 8
  %20 = call ptr @TypeChecker_check_block(ptr %17, ptr %19, ptr null, i1 false)
  store ptr %20, ptr %memberidx7, align 8
  %21 = load ptr, ptr %this, align 8
  %22 = call i1 @TypeChecker_has_errored(ptr %21)
  br i1 %22, label %if.entry9, label %else10

if.entry9:                                        ; preds = %ifend
  ret void

else10:                                           ; preds = %ifend
  br label %ifend11

ifend11:                                          ; preds = %else10
  %23 = load ptr, ptr %func, align 8
  %memberidx12 = getelementptr inbounds %Function, ptr %23, i32 0, i32 3
  %24 = load ptr, ptr %memberidx12, align 8
  %memberidx13 = getelementptr inbounds %Block, ptr %24, i32 0, i32 1
  %25 = load i1, ptr %memberidx13, align 1
  %26 = xor i1 %25, true
  br i1 %26, label %if.entry14, label %else15

if.entry14:                                       ; preds = %ifend11
  %27 = load ptr, ptr %func, align 8
  %memberidx17 = getelementptr inbounds %Function, ptr %27, i32 0, i32 4
  %28 = load ptr, ptr %memberidx17, align 8
  %memberidx18 = getelementptr inbounds %FunctionType, ptr %28, i32 0, i32 2
  %29 = load ptr, ptr %memberidx18, align 8
  %memberidx19 = getelementptr inbounds %Type, ptr %29, i32 0, i32 0
  %30 = load i64, ptr %memberidx19, align 4
  %31 = icmp eq i64 %30, 10
  br i1 %31, label %if.entry20, label %else21

else15:                                           ; preds = %ifend11
  br label %ifend16

ifend16:                                          ; preds = %else15, %ifend22
  %32 = load ptr, ptr %this, align 8
  %memberidx27 = getelementptr inbounds %TypeChecker, ptr %32, i32 0, i32 4
  %33 = load ptr, ptr %this, align 8
  %memberidx28 = getelementptr inbounds %TypeChecker, ptr %33, i32 0, i32 0
  %34 = load ptr, ptr %memberidx28, align 8
  %35 = load ptr, ptr %func, align 8
  %memberidx29 = getelementptr inbounds %Function, ptr %35, i32 0, i32 5
  %36 = load ptr, ptr %memberidx29, align 8
  %37 = call ptr @get_scope(ptr %34, ptr %36)
  %memberidx30 = getelementptr inbounds %Scope, ptr %37, i32 0, i32 5
  %38 = load ptr, ptr %memberidx30, align 8
  store ptr %38, ptr %memberidx27, align 8
  ret void

if.entry20:                                       ; preds = %if.entry14
  %39 = load ptr, ptr %func, align 8
  %memberidx23 = getelementptr inbounds %Function, ptr %39, i32 0, i32 3
  %40 = load ptr, ptr %memberidx23, align 8
  %memberidx24 = getelementptr inbounds %Block, ptr %40, i32 0, i32 0
  %41 = load ptr, ptr %memberidx24, align 8
  %42 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ReturnStatement, ptr null, i32 1) to i32))
  call void @ReturnStatement_constructor(ptr %42)
  call void @Array_Statement____sl__(ptr %41, ptr %42)
  br label %ifend22

else21:                                           ; preds = %if.entry14
  %43 = load ptr, ptr %this, align 8
  %44 = call ptr @string_from_bytes(ptr @412, i64 40)
  %45 = load ptr, ptr %func_node, align 8
  %memberidx25 = getelementptr inbounds %FunctionDeclarationNode, ptr %45, i32 0, i32 3
  %46 = load ptr, ptr %memberidx25, align 8
  %memberidx26 = getelementptr inbounds %Node, ptr %46, i32 0, i32 0
  %47 = load ptr, ptr %memberidx26, align 8
  call void @TypeChecker_error(ptr %43, i64 4, ptr %44, ptr %47)
  ret void

ifend22:                                          ; preds = %if.entry20
  br label %ifend16
}

define void @TypeChecker_constructor(ptr %0, ptr %1) {
  %compiler = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %compiler, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %3, i32 0, i32 5
  %4 = load ptr, ptr %compiler, align 8
  store ptr %4, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %TypeChecker, ptr %5, i32 0, i32 6
  store i1 false, ptr %memberidx1, align 1
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %TypeChecker, ptr %6, i32 0, i32 0
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Program, ptr null, i32 1) to i32))
  call void @Program_constructor(ptr %7)
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %TypeChecker, ptr %8, i32 0, i32 8
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_Generic_, ptr null, i32 1) to i32))
  call void @Map_string_Generic__constructor(ptr %9)
  store ptr %9, ptr %memberidx3, align 8
  ret void
}

define ptr @get_scope(ptr %0, ptr %1) {
  %program = alloca ptr, align 8
  %scope_id = alloca ptr, align 8
  store ptr %0, ptr %program, align 8
  store ptr %1, ptr %scope_id, align 8
  %3 = load ptr, ptr %program, align 8
  %memberidx = getelementptr inbounds %Program, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %scope_id, align 8
  %memberidx1 = getelementptr inbounds %ScopeId, ptr %5, i32 0, i32 0
  %6 = load i64, ptr %memberidx1, align 4
  %7 = call ptr @Array_Module____getitem__(ptr %4, i64 %6)
  %memberidx2 = getelementptr inbounds %Module, ptr %7, i32 0, i32 7
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %scope_id, align 8
  %memberidx3 = getelementptr inbounds %ScopeId, ptr %9, i32 0, i32 1
  %10 = load i64, ptr %memberidx3, align 4
  %11 = call ptr @Array_Scope____getitem__(ptr %8, i64 %10)
  ret ptr %11
}

define ptr @get_class_prop_type(ptr %0, ptr %1) {
  %program = alloca ptr, align 8
  %prop_id = alloca ptr, align 8
  %owner = alloca ptr, align 8
  store ptr %0, ptr %program, align 8
  store ptr %1, ptr %prop_id, align 8
  %3 = load ptr, ptr %program, align 8
  %4 = load ptr, ptr %prop_id, align 8
  %5 = call ptr @get_class_from_prop_id(ptr %3, ptr %4)
  store ptr %5, ptr %owner, align 8
  %6 = load ptr, ptr %prop_id, align 8
  %memberidx = getelementptr inbounds %PropId, ptr %6, i32 0, i32 0
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %9 = load ptr, ptr %owner, align 8
  %memberidx1 = getelementptr inbounds %Class, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx1, align 8
  %11 = load ptr, ptr %prop_id, align 8
  %memberidx2 = getelementptr inbounds %PropId, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx2, align 4
  %13 = call ptr @Array_ClassMethod____getitem__(ptr %10, i64 %12)
  %memberidx3 = getelementptr inbounds %ClassMethod, ptr %13, i32 0, i32 4
  %14 = load ptr, ptr %memberidx3, align 8
  ret ptr %14

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %15 = load ptr, ptr %owner, align 8
  %memberidx4 = getelementptr inbounds %Class, ptr %15, i32 0, i32 4
  %16 = load ptr, ptr %memberidx4, align 8
  %17 = load ptr, ptr %prop_id, align 8
  %memberidx5 = getelementptr inbounds %PropId, ptr %17, i32 0, i32 2
  %18 = load i64, ptr %memberidx5, align 4
  %19 = call ptr @Array_ClassField____getitem__(ptr %16, i64 %18)
  %memberidx6 = getelementptr inbounds %ClassField, ptr %19, i32 0, i32 4
  %20 = load ptr, ptr %memberidx6, align 8
  ret ptr %20
}

define ptr @get_class_from_prop_id(ptr %0, ptr %1) {
  %program = alloca ptr, align 8
  %prop_id = alloca ptr, align 8
  store ptr %0, ptr %program, align 8
  store ptr %1, ptr %prop_id, align 8
  %3 = load ptr, ptr %program, align 8
  %4 = load ptr, ptr %prop_id, align 8
  %memberidx = getelementptr inbounds %PropId, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @get_class(ptr %3, ptr %5)
  ret ptr %6
}

define ptr @get_class(ptr %0, ptr %1) {
  %program = alloca ptr, align 8
  %type_id = alloca ptr, align 8
  store ptr %0, ptr %program, align 8
  store ptr %1, ptr %type_id, align 8
  %3 = load ptr, ptr %program, align 8
  %memberidx = getelementptr inbounds %Program, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %type_id, align 8
  %memberidx1 = getelementptr inbounds %TypeId, ptr %5, i32 0, i32 0
  %6 = load i64, ptr %memberidx1, align 4
  %7 = call ptr @Array_Module____getitem__(ptr %4, i64 %6)
  %memberidx2 = getelementptr inbounds %Module, ptr %7, i32 0, i32 3
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %type_id, align 8
  %memberidx3 = getelementptr inbounds %TypeId, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = call ptr @Array_Class____getitem__(ptr %8, i64 %10)
  ret ptr %11
}

define void @ArrayType_constructor(ptr %0, ptr %1, i64 %2) {
  %length = alloca i64, align 8
  %element_type = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Type_constructor, ptr %super, align 8
  store ptr %1, ptr %element_type, align 8
  store i64 %2, ptr %length, align 4
  %4 = load ptr, ptr %super, align 8
  call void %4(ptr %0, i64 14)
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayType, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %element_type, align 8
  store ptr %6, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayType, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %length, align 4
  store i64 %8, ptr %memberidx1, align 4
  ret void
}

define void @TupleType_constructor(ptr %0) {
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Type_constructor, ptr %super, align 8
  %2 = load ptr, ptr %super, align 8
  call void %2(ptr %0, i64 15)
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TupleType, ptr %3, i32 0, i32 1
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Type_, ptr null, i32 1) to i32))
  call void @Array_Type__constructor(ptr %4, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx1 = getelementptr inbounds %Array_Type_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Type_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx2, align 4
  store ptr %4, ptr %memberidx, align 8
  ret void
}

define void @PointerType_constructor(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %pointee_type = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Type_constructor, ptr %super, align 8
  store ptr %1, ptr %pointee_type, align 8
  %3 = load ptr, ptr %super, align 8
  call void %3(ptr %0, i64 13)
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %PointerType, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %pointee_type, align 8
  store ptr %5, ptr %memberidx, align 8
  ret void
}

define void @ObjectType_constructor(ptr %0, ptr %1) {
  %class_id = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Type_constructor, ptr %super, align 8
  store ptr %1, ptr %class_id, align 8
  %3 = load ptr, ptr %super, align 8
  call void %3(ptr %0, i64 11)
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ObjectType, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %class_id, align 8
  store ptr %5, ptr %memberidx, align 8
  ret void
}

define void @EnumType_constructor(ptr %0, ptr %1) {
  %enum_id = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Type_constructor, ptr %super, align 8
  store ptr %1, ptr %enum_id, align 8
  %3 = load ptr, ptr %super, align 8
  call void %3(ptr %0, i64 12)
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %EnumType, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %enum_id, align 8
  store ptr %5, ptr %memberidx, align 8
  ret void
}

define i1 @is_function(ptr %0) {
  %val_ty = alloca ptr, align 8
  store ptr %0, ptr %val_ty, align 8
  %2 = load ptr, ptr %val_ty, align 8
  %memberidx = getelementptr inbounds %Type, ptr %2, i32 0, i32 0
  %3 = load i64, ptr %memberidx, align 4
  %4 = icmp eq i64 %3, 16
  ret i1 %4
}

define i1 @is_int(ptr %0) {
  %val_ty = alloca ptr, align 8
  store ptr %0, ptr %val_ty, align 8
  %2 = load ptr, ptr %val_ty, align 8
  %memberidx = getelementptr inbounds %Type, ptr %2, i32 0, i32 0
  %3 = load i64, ptr %memberidx, align 4
  %4 = icmp sge i64 %3, 1
  %5 = load ptr, ptr %val_ty, align 8
  %memberidx1 = getelementptr inbounds %Type, ptr %5, i32 0, i32 0
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sle i64 %6, 7
  %8 = and i1 %4, %7
  ret i1 %8
}

define ptr @get_class_from_type(ptr %0, ptr %1) {
  %program = alloca ptr, align 8
  %type_ = alloca ptr, align 8
  store ptr %0, ptr %program, align 8
  store ptr %1, ptr %type_, align 8
  %3 = load ptr, ptr %type_, align 8
  %memberidx = getelementptr inbounds %Type, ptr %3, i32 0, i32 0
  %4 = load i64, ptr %memberidx, align 4
  %5 = icmp eq i64 %4, 20
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %program, align 8
  %7 = load ptr, ptr %type_, align 8
  %memberidx1 = getelementptr inbounds %GenericType, ptr %7, i32 0, i32 3
  %8 = load ptr, ptr %memberidx1, align 8
  %9 = call ptr @get_class_from_type(ptr %6, ptr %8)
  ret ptr %9

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %10 = load ptr, ptr %type_, align 8
  %memberidx2 = getelementptr inbounds %Type, ptr %10, i32 0, i32 0
  %11 = load i64, ptr %memberidx2, align 4
  %12 = icmp eq i64 %11, 11
  br i1 %12, label %if.entry3, label %else4

if.entry3:                                        ; preds = %ifend
  %13 = load ptr, ptr %program, align 8
  %14 = load ptr, ptr %type_, align 8
  %memberidx6 = getelementptr inbounds %ObjectType, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx6, align 8
  %16 = call ptr @get_class(ptr %13, ptr %15)
  ret ptr %16

else4:                                            ; preds = %ifend
  br label %ifend5

ifend5:                                           ; preds = %else4
  ret ptr null
}

define ptr @get_enum(ptr %0, ptr %1) {
  %program = alloca ptr, align 8
  %enum_id = alloca ptr, align 8
  store ptr %0, ptr %program, align 8
  store ptr %1, ptr %enum_id, align 8
  %3 = load ptr, ptr %program, align 8
  %memberidx = getelementptr inbounds %Program, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %enum_id, align 8
  %memberidx1 = getelementptr inbounds %TypeId, ptr %5, i32 0, i32 0
  %6 = load i64, ptr %memberidx1, align 4
  %7 = call ptr @Array_Module____getitem__(ptr %4, i64 %6)
  %memberidx2 = getelementptr inbounds %Module, ptr %7, i32 0, i32 6
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %enum_id, align 8
  %memberidx3 = getelementptr inbounds %TypeId, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = call ptr @Array_Enum____getitem__(ptr %8, i64 %10)
  ret ptr %11
}

define ptr @dump_type(ptr %0, i1 %1) {
  %force_bit_size = alloca i1, align 1
  %ty = alloca ptr, align 8
  %is_signed = alloca i1, align 1
  %char = alloca ptr, align 8
  store ptr %0, ptr %ty, align 8
  store i1 %1, ptr %force_bit_size, align 1
  %3 = load ptr, ptr %ty, align 8
  %memberidx = getelementptr inbounds %Type, ptr %3, i32 0, i32 0
  %4 = load i64, ptr %memberidx, align 4
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %6 = call ptr @string_from_bytes(ptr @325, i64 4)
  ret ptr %6

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %7 = load ptr, ptr %ty, align 8
  %8 = call i1 @is_int(ptr %7)
  br i1 %8, label %if.entry1, label %else2

if.entry1:                                        ; preds = %ifend
  %9 = load i1, ptr %force_bit_size, align 1
  br i1 %9, label %if.entry4, label %else5

else2:                                            ; preds = %ifend
  br label %ifend3

ifend3:                                           ; preds = %else2, %ifend44
  %10 = load ptr, ptr %ty, align 8
  %memberidx46 = getelementptr inbounds %Type, ptr %10, i32 0, i32 0
  %11 = load i64, ptr %memberidx46, align 4
  %12 = icmp eq i64 %11, 8
  br i1 %12, label %if.entry47, label %else48

if.entry4:                                        ; preds = %if.entry1
  %13 = load i64, ptr @ARCH_WORD_SIZE, align 4
  %14 = alloca ptr, align 8
  %15 = call i64 (ptr, ptr, ...) @asprintf(ptr %14, ptr @326, i64 %13)
  %16 = load ptr, ptr %14, align 8
  %17 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %17, ptr %16, i64 %15)
  ret ptr %17

else5:                                            ; preds = %if.entry1
  br label %ifend6

ifend6:                                           ; preds = %else5
  %18 = load ptr, ptr %ty, align 8
  %memberidx7 = getelementptr inbounds %IntType, ptr %18, i32 0, i32 1
  %19 = load i1, ptr %memberidx7, align 1
  store i1 %19, ptr %is_signed, align 1
  %20 = load ptr, ptr %ty, align 8
  %memberidx8 = getelementptr inbounds %Type, ptr %20, i32 0, i32 0
  %21 = load i64, ptr %memberidx8, align 4
  %22 = icmp eq i64 %21, 6
  br i1 %22, label %if.entry9, label %else10

if.entry9:                                        ; preds = %ifend6
  %23 = load i1, ptr %is_signed, align 1
  br i1 %23, label %true_block, label %false_block

else10:                                           ; preds = %ifend6
  br label %ifend11

ifend11:                                          ; preds = %else10
  %24 = load i1, ptr %is_signed, align 1
  br i1 %24, label %true_block12, label %false_block13

true_block:                                       ; preds = %if.entry9
  %25 = call ptr @string_from_bytes(ptr @327, i64 3)
  br label %end

false_block:                                      ; preds = %if.entry9
  %26 = call ptr @string_from_bytes(ptr @328, i64 4)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %25, %true_block ], [ %26, %false_block ]
  ret ptr %ternary

true_block12:                                     ; preds = %ifend11
  %27 = call ptr @string_from_bytes(ptr @329, i64 1)
  br label %end14

false_block13:                                    ; preds = %ifend11
  %28 = call ptr @string_from_bytes(ptr @330, i64 1)
  br label %end14

end14:                                            ; preds = %false_block13, %true_block12
  %ternary15 = phi ptr [ %27, %true_block12 ], [ %28, %false_block13 ]
  store ptr %ternary15, ptr %char, align 8
  %29 = load ptr, ptr %ty, align 8
  %memberidx16 = getelementptr inbounds %Type, ptr %29, i32 0, i32 0
  %30 = load i64, ptr %memberidx16, align 4
  %31 = icmp eq i64 %30, 1
  br i1 %31, label %if.entry17, label %else18

if.entry17:                                       ; preds = %end14
  %32 = load ptr, ptr %char, align 8
  %33 = getelementptr inbounds %string, ptr %32, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %memberidx20 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %34, i32 0, i32 5
  %35 = load ptr, ptr %memberidx20, align 8
  %36 = call ptr %35(ptr %32)
  %37 = alloca ptr, align 8
  %38 = call i64 (ptr, ptr, ...) @asprintf(ptr %37, ptr @331, ptr %36)
  %39 = load ptr, ptr %37, align 8
  %40 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %40, ptr %39, i64 %38)
  tail call void @free(ptr %36)
  ret ptr %40

else18:                                           ; preds = %end14
  br label %ifend19

ifend19:                                          ; preds = %else18
  %41 = load ptr, ptr %ty, align 8
  %memberidx21 = getelementptr inbounds %Type, ptr %41, i32 0, i32 0
  %42 = load i64, ptr %memberidx21, align 4
  %43 = icmp eq i64 %42, 2
  br i1 %43, label %if.entry22, label %else23

if.entry22:                                       ; preds = %ifend19
  %44 = load ptr, ptr %char, align 8
  %45 = getelementptr inbounds %string, ptr %44, i32 0, i32 0
  %46 = load ptr, ptr %45, align 8
  %memberidx25 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %46, i32 0, i32 5
  %47 = load ptr, ptr %memberidx25, align 8
  %48 = call ptr %47(ptr %44)
  %49 = alloca ptr, align 8
  %50 = call i64 (ptr, ptr, ...) @asprintf(ptr %49, ptr @332, ptr %48)
  %51 = load ptr, ptr %49, align 8
  %52 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %52, ptr %51, i64 %50)
  tail call void @free(ptr %48)
  ret ptr %52

else23:                                           ; preds = %ifend19
  br label %ifend24

ifend24:                                          ; preds = %else23
  %53 = load ptr, ptr %ty, align 8
  %memberidx26 = getelementptr inbounds %Type, ptr %53, i32 0, i32 0
  %54 = load i64, ptr %memberidx26, align 4
  %55 = icmp eq i64 %54, 3
  br i1 %55, label %if.entry27, label %else28

if.entry27:                                       ; preds = %ifend24
  %56 = load ptr, ptr %char, align 8
  %57 = getelementptr inbounds %string, ptr %56, i32 0, i32 0
  %58 = load ptr, ptr %57, align 8
  %memberidx30 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %58, i32 0, i32 5
  %59 = load ptr, ptr %memberidx30, align 8
  %60 = call ptr %59(ptr %56)
  %61 = alloca ptr, align 8
  %62 = call i64 (ptr, ptr, ...) @asprintf(ptr %61, ptr @333, ptr %60)
  %63 = load ptr, ptr %61, align 8
  %64 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %64, ptr %63, i64 %62)
  tail call void @free(ptr %60)
  ret ptr %64

else28:                                           ; preds = %ifend24
  br label %ifend29

ifend29:                                          ; preds = %else28
  %65 = load ptr, ptr %ty, align 8
  %memberidx31 = getelementptr inbounds %Type, ptr %65, i32 0, i32 0
  %66 = load i64, ptr %memberidx31, align 4
  %67 = icmp eq i64 %66, 4
  br i1 %67, label %if.entry32, label %else33

if.entry32:                                       ; preds = %ifend29
  %68 = load ptr, ptr %char, align 8
  %69 = getelementptr inbounds %string, ptr %68, i32 0, i32 0
  %70 = load ptr, ptr %69, align 8
  %memberidx35 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %70, i32 0, i32 5
  %71 = load ptr, ptr %memberidx35, align 8
  %72 = call ptr %71(ptr %68)
  %73 = alloca ptr, align 8
  %74 = call i64 (ptr, ptr, ...) @asprintf(ptr %73, ptr @334, ptr %72)
  %75 = load ptr, ptr %73, align 8
  %76 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %76, ptr %75, i64 %74)
  tail call void @free(ptr %72)
  ret ptr %76

else33:                                           ; preds = %ifend29
  br label %ifend34

ifend34:                                          ; preds = %else33
  %77 = load ptr, ptr %ty, align 8
  %memberidx36 = getelementptr inbounds %Type, ptr %77, i32 0, i32 0
  %78 = load i64, ptr %memberidx36, align 4
  %79 = icmp eq i64 %78, 5
  br i1 %79, label %if.entry37, label %else38

if.entry37:                                       ; preds = %ifend34
  %80 = load ptr, ptr %char, align 8
  %81 = getelementptr inbounds %string, ptr %80, i32 0, i32 0
  %82 = load ptr, ptr %81, align 8
  %memberidx40 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %82, i32 0, i32 5
  %83 = load ptr, ptr %memberidx40, align 8
  %84 = call ptr %83(ptr %80)
  %85 = alloca ptr, align 8
  %86 = call i64 (ptr, ptr, ...) @asprintf(ptr %85, ptr @335, ptr %84)
  %87 = load ptr, ptr %85, align 8
  %88 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %88, ptr %87, i64 %86)
  tail call void @free(ptr %84)
  ret ptr %88

else38:                                           ; preds = %ifend34
  br label %ifend39

ifend39:                                          ; preds = %else38
  %89 = load ptr, ptr %ty, align 8
  %memberidx41 = getelementptr inbounds %Type, ptr %89, i32 0, i32 0
  %90 = load i64, ptr %memberidx41, align 4
  %91 = icmp eq i64 %90, 7
  br i1 %91, label %if.entry42, label %else43

if.entry42:                                       ; preds = %ifend39
  %92 = load ptr, ptr %char, align 8
  %93 = getelementptr inbounds %string, ptr %92, i32 0, i32 0
  %94 = load ptr, ptr %93, align 8
  %memberidx45 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %94, i32 0, i32 5
  %95 = load ptr, ptr %memberidx45, align 8
  %96 = call ptr %95(ptr %92)
  %97 = alloca ptr, align 8
  %98 = call i64 (ptr, ptr, ...) @asprintf(ptr %97, ptr @336, ptr %96)
  %99 = load ptr, ptr %97, align 8
  %100 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %100, ptr %99, i64 %98)
  tail call void @free(ptr %96)
  ret ptr %100

else43:                                           ; preds = %ifend39
  br label %ifend44

ifend44:                                          ; preds = %else43
  br label %ifend3

if.entry47:                                       ; preds = %ifend3
  %101 = call ptr @string_from_bytes(ptr @337, i64 3)
  ret ptr %101

else48:                                           ; preds = %ifend3
  br label %ifend49

ifend49:                                          ; preds = %else48
  %102 = load ptr, ptr %ty, align 8
  %memberidx50 = getelementptr inbounds %Type, ptr %102, i32 0, i32 0
  %103 = load i64, ptr %memberidx50, align 4
  %104 = icmp eq i64 %103, 9
  br i1 %104, label %if.entry51, label %else52

if.entry51:                                       ; preds = %ifend49
  %105 = call ptr @string_from_bytes(ptr @338, i64 3)
  ret ptr %105

else52:                                           ; preds = %ifend49
  br label %ifend53

ifend53:                                          ; preds = %else52
  %106 = load ptr, ptr %ty, align 8
  %memberidx54 = getelementptr inbounds %Type, ptr %106, i32 0, i32 0
  %107 = load i64, ptr %memberidx54, align 4
  %108 = icmp eq i64 %107, 10
  br i1 %108, label %if.entry55, label %else56

if.entry55:                                       ; preds = %ifend53
  %109 = call ptr @string_from_bytes(ptr @300, i64 4)
  ret ptr %109

else56:                                           ; preds = %ifend53
  br label %ifend57

ifend57:                                          ; preds = %else56
  %110 = load ptr, ptr %ty, align 8
  %memberidx58 = getelementptr inbounds %Type, ptr %110, i32 0, i32 0
  %111 = load i64, ptr %memberidx58, align 4
  %112 = icmp eq i64 %111, 17
  br i1 %112, label %if.entry59, label %else60

if.entry59:                                       ; preds = %ifend57
  %113 = call ptr @string_from_bytes(ptr @339, i64 6)
  ret ptr %113

else60:                                           ; preds = %ifend57
  br label %ifend61

ifend61:                                          ; preds = %else60
  %114 = call ptr @string_from_bytes(ptr @340, i64 7)
  ret ptr %114
}

define ptr @ClassVarId_to_classId(ptr %0) {
  %var_id = alloca ptr, align 8
  store ptr %0, ptr %var_id, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ClassId, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %var_id, align 8
  %memberidx = getelementptr inbounds %VarId, ptr %3, i32 0, i32 1
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %var_id, align 8
  %memberidx1 = getelementptr inbounds %VarId, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ClassId_constructor(ptr %2, i64 %4, i64 %6)
  ret ptr %2
}

define void @ClassVarId_constructor(ptr %0, ptr %1) {
  %class_id = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @VarId_constructor, ptr %super, align 8
  store ptr %1, ptr %class_id, align 8
  %3 = load ptr, ptr %super, align 8
  %4 = load ptr, ptr %class_id, align 8
  %memberidx = getelementptr inbounds %TypeId, ptr %4, i32 0, i32 0
  %5 = load i64, ptr %memberidx, align 4
  %6 = load ptr, ptr %class_id, align 8
  %memberidx1 = getelementptr inbounds %TypeId, ptr %6, i32 0, i32 2
  %7 = load i64, ptr %memberidx1, align 4
  call void %3(ptr %0, i64 3, i64 %5, i64 %7)
  ret void
}

define ptr @EnumVarId_to_enumId(ptr %0) {
  %var_id = alloca ptr, align 8
  store ptr %0, ptr %var_id, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%EnumId, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %var_id, align 8
  %memberidx = getelementptr inbounds %VarId, ptr %3, i32 0, i32 1
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %var_id, align 8
  %memberidx1 = getelementptr inbounds %VarId, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @EnumId_constructor(ptr %2, i64 %4, i64 %6)
  ret ptr %2
}

define void @EnumVarId_constructor(ptr %0, ptr %1) {
  %enum_id = alloca ptr, align 8
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @VarId_constructor, ptr %super, align 8
  store ptr %1, ptr %enum_id, align 8
  %3 = load ptr, ptr %super, align 8
  %4 = load ptr, ptr %enum_id, align 8
  %memberidx = getelementptr inbounds %TypeId, ptr %4, i32 0, i32 0
  %5 = load i64, ptr %memberidx, align 4
  %6 = load ptr, ptr %enum_id, align 8
  %memberidx1 = getelementptr inbounds %TypeId, ptr %6, i32 0, i32 2
  %7 = load i64, ptr %memberidx1, align 4
  call void %3(ptr %0, i64 4, i64 %5, i64 %7)
  ret void
}

define ptr @get_var(ptr %0, ptr %1) {
  %var_id = alloca ptr, align 8
  %program = alloca ptr, align 8
  store ptr %0, ptr %program, align 8
  store ptr %1, ptr %var_id, align 8
  %3 = load ptr, ptr %program, align 8
  %memberidx = getelementptr inbounds %Program, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %var_id, align 8
  %memberidx1 = getelementptr inbounds %VarId, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = call ptr @Array_Module____getitem__(ptr %4, i64 %6)
  %memberidx2 = getelementptr inbounds %Module, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %var_id, align 8
  %memberidx3 = getelementptr inbounds %VarId, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = call ptr @Array_Var____getitem__(ptr %8, i64 %10)
  ret ptr %11
}

define void @ModuleVarId_constructor(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  %scope_id = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @VarId_constructor, ptr %super, align 8
  store ptr %1, ptr %scope_id, align 8
  %3 = load ptr, ptr %super, align 8
  %4 = load ptr, ptr %scope_id, align 8
  %memberidx = getelementptr inbounds %ScopeId, ptr %4, i32 0, i32 0
  %5 = load i64, ptr %memberidx, align 4
  %6 = load ptr, ptr %scope_id, align 8
  %memberidx1 = getelementptr inbounds %ScopeId, ptr %6, i32 0, i32 1
  %7 = load i64, ptr %memberidx1, align 4
  call void %3(ptr %0, i64 5, i64 %5, i64 %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ModuleVarId, ptr %8, i32 0, i32 3
  %9 = load ptr, ptr %scope_id, align 8
  store ptr %9, ptr %memberidx2, align 8
  ret void
}

define i64 @evaluate_const_int_expression(ptr %0, ptr %1) {
  %program = alloca ptr, align 8
  %exp = alloca ptr, align 8
  %bin_exp = alloca ptr, align 8
  %unary_exp = alloca ptr, align 8
  %var_exp = alloca ptr, align 8
  store ptr %0, ptr %program, align 8
  store ptr %1, ptr %exp, align 8
  %3 = load ptr, ptr %exp, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %6 = load ptr, ptr %exp, align 8
  %memberidx1 = getelementptr inbounds %IntExpression, ptr %6, i32 0, i32 4
  %7 = load i64, ptr %memberidx1, align 4
  ret i64 %7

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %8 = load ptr, ptr %exp, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %memberidx2, align 4
  %10 = icmp eq i64 %9, 1
  br i1 %10, label %if.entry3, label %else4

if.entry3:                                        ; preds = %ifend
  %11 = load ptr, ptr %exp, align 8
  %memberidx6 = getelementptr inbounds %FloatExpression, ptr %11, i32 0, i32 4
  %12 = load double, ptr %memberidx6, align 8
  %13 = fptosi double %12 to i64
  ret i64 %13

else4:                                            ; preds = %ifend
  br label %ifend5

ifend5:                                           ; preds = %else4
  %14 = load ptr, ptr %exp, align 8
  %memberidx7 = getelementptr inbounds %Expression, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx7, align 4
  %16 = icmp eq i64 %15, 9
  br i1 %16, label %if.entry8, label %else9

if.entry8:                                        ; preds = %ifend5
  %17 = load ptr, ptr %exp, align 8
  store ptr %17, ptr %bin_exp, align 8
  %18 = load ptr, ptr %bin_exp, align 8
  %memberidx11 = getelementptr inbounds %BinaryExpression, ptr %18, i32 0, i32 5
  %19 = load i64, ptr %memberidx11, align 4
  %20 = icmp eq i64 %19, 1
  br i1 %20, label %if.entry12, label %else13

else9:                                            ; preds = %ifend5
  br label %ifend10

ifend10:                                          ; preds = %else9, %ifend68
  %21 = load ptr, ptr %exp, align 8
  %memberidx71 = getelementptr inbounds %Expression, ptr %21, i32 0, i32 2
  %22 = load i64, ptr %memberidx71, align 4
  %23 = icmp eq i64 %22, 10
  br i1 %23, label %if.entry72, label %else73

if.entry12:                                       ; preds = %if.entry8
  %24 = load ptr, ptr %program, align 8
  %25 = load ptr, ptr %bin_exp, align 8
  %memberidx15 = getelementptr inbounds %BinaryExpression, ptr %25, i32 0, i32 4
  %26 = load ptr, ptr %memberidx15, align 8
  %27 = call i64 @evaluate_const_int_expression(ptr %24, ptr %26)
  %28 = load ptr, ptr %program, align 8
  %29 = load ptr, ptr %bin_exp, align 8
  %memberidx16 = getelementptr inbounds %BinaryExpression, ptr %29, i32 0, i32 6
  %30 = load ptr, ptr %memberidx16, align 8
  %31 = call i64 @evaluate_const_int_expression(ptr %28, ptr %30)
  %32 = add nsw i64 %27, %31
  ret i64 %32

else13:                                           ; preds = %if.entry8
  br label %ifend14

ifend14:                                          ; preds = %else13
  %33 = load ptr, ptr %bin_exp, align 8
  %memberidx17 = getelementptr inbounds %BinaryExpression, ptr %33, i32 0, i32 5
  %34 = load i64, ptr %memberidx17, align 4
  %35 = icmp eq i64 %34, 2
  br i1 %35, label %if.entry18, label %else19

if.entry18:                                       ; preds = %ifend14
  %36 = load ptr, ptr %program, align 8
  %37 = load ptr, ptr %bin_exp, align 8
  %memberidx21 = getelementptr inbounds %BinaryExpression, ptr %37, i32 0, i32 4
  %38 = load ptr, ptr %memberidx21, align 8
  %39 = call i64 @evaluate_const_int_expression(ptr %36, ptr %38)
  %40 = load ptr, ptr %program, align 8
  %41 = load ptr, ptr %bin_exp, align 8
  %memberidx22 = getelementptr inbounds %BinaryExpression, ptr %41, i32 0, i32 6
  %42 = load ptr, ptr %memberidx22, align 8
  %43 = call i64 @evaluate_const_int_expression(ptr %40, ptr %42)
  %44 = sub nsw i64 %39, %43
  ret i64 %44

else19:                                           ; preds = %ifend14
  br label %ifend20

ifend20:                                          ; preds = %else19
  %45 = load ptr, ptr %bin_exp, align 8
  %memberidx23 = getelementptr inbounds %BinaryExpression, ptr %45, i32 0, i32 5
  %46 = load i64, ptr %memberidx23, align 4
  %47 = icmp eq i64 %46, 3
  br i1 %47, label %if.entry24, label %else25

if.entry24:                                       ; preds = %ifend20
  %48 = load ptr, ptr %program, align 8
  %49 = load ptr, ptr %bin_exp, align 8
  %memberidx27 = getelementptr inbounds %BinaryExpression, ptr %49, i32 0, i32 4
  %50 = load ptr, ptr %memberidx27, align 8
  %51 = call i64 @evaluate_const_int_expression(ptr %48, ptr %50)
  %52 = load ptr, ptr %program, align 8
  %53 = load ptr, ptr %bin_exp, align 8
  %memberidx28 = getelementptr inbounds %BinaryExpression, ptr %53, i32 0, i32 6
  %54 = load ptr, ptr %memberidx28, align 8
  %55 = call i64 @evaluate_const_int_expression(ptr %52, ptr %54)
  %56 = mul nsw i64 %51, %55
  ret i64 %56

else25:                                           ; preds = %ifend20
  br label %ifend26

ifend26:                                          ; preds = %else25
  %57 = load ptr, ptr %bin_exp, align 8
  %memberidx29 = getelementptr inbounds %BinaryExpression, ptr %57, i32 0, i32 5
  %58 = load i64, ptr %memberidx29, align 4
  %59 = icmp eq i64 %58, 4
  br i1 %59, label %if.entry30, label %else31

if.entry30:                                       ; preds = %ifend26
  %60 = load ptr, ptr %program, align 8
  %61 = load ptr, ptr %bin_exp, align 8
  %memberidx33 = getelementptr inbounds %BinaryExpression, ptr %61, i32 0, i32 4
  %62 = load ptr, ptr %memberidx33, align 8
  %63 = call i64 @evaluate_const_int_expression(ptr %60, ptr %62)
  %64 = load ptr, ptr %program, align 8
  %65 = load ptr, ptr %bin_exp, align 8
  %memberidx34 = getelementptr inbounds %BinaryExpression, ptr %65, i32 0, i32 6
  %66 = load ptr, ptr %memberidx34, align 8
  %67 = call i64 @evaluate_const_int_expression(ptr %64, ptr %66)
  %68 = sdiv i64 %63, %67
  ret i64 %68

else31:                                           ; preds = %ifend26
  br label %ifend32

ifend32:                                          ; preds = %else31
  %69 = load ptr, ptr %bin_exp, align 8
  %memberidx35 = getelementptr inbounds %BinaryExpression, ptr %69, i32 0, i32 5
  %70 = load i64, ptr %memberidx35, align 4
  %71 = icmp eq i64 %70, 5
  br i1 %71, label %if.entry36, label %else37

if.entry36:                                       ; preds = %ifend32
  %72 = load ptr, ptr %program, align 8
  %73 = load ptr, ptr %bin_exp, align 8
  %memberidx39 = getelementptr inbounds %BinaryExpression, ptr %73, i32 0, i32 4
  %74 = load ptr, ptr %memberidx39, align 8
  %75 = call i64 @evaluate_const_int_expression(ptr %72, ptr %74)
  %76 = load ptr, ptr %program, align 8
  %77 = load ptr, ptr %bin_exp, align 8
  %memberidx40 = getelementptr inbounds %BinaryExpression, ptr %77, i32 0, i32 6
  %78 = load ptr, ptr %memberidx40, align 8
  %79 = call i64 @evaluate_const_int_expression(ptr %76, ptr %78)
  %80 = srem i64 %75, %79
  ret i64 %80

else37:                                           ; preds = %ifend32
  br label %ifend38

ifend38:                                          ; preds = %else37
  %81 = load ptr, ptr %bin_exp, align 8
  %memberidx41 = getelementptr inbounds %BinaryExpression, ptr %81, i32 0, i32 5
  %82 = load i64, ptr %memberidx41, align 4
  %83 = icmp eq i64 %82, 13
  br i1 %83, label %if.entry42, label %else43

if.entry42:                                       ; preds = %ifend38
  %84 = load ptr, ptr %program, align 8
  %85 = load ptr, ptr %bin_exp, align 8
  %memberidx45 = getelementptr inbounds %BinaryExpression, ptr %85, i32 0, i32 4
  %86 = load ptr, ptr %memberidx45, align 8
  %87 = call i64 @evaluate_const_int_expression(ptr %84, ptr %86)
  %88 = load ptr, ptr %program, align 8
  %89 = load ptr, ptr %bin_exp, align 8
  %memberidx46 = getelementptr inbounds %BinaryExpression, ptr %89, i32 0, i32 6
  %90 = load ptr, ptr %memberidx46, align 8
  %91 = call i64 @evaluate_const_int_expression(ptr %88, ptr %90)
  %92 = shl i64 %87, %91
  ret i64 %92

else43:                                           ; preds = %ifend38
  br label %ifend44

ifend44:                                          ; preds = %else43
  %93 = load ptr, ptr %bin_exp, align 8
  %memberidx47 = getelementptr inbounds %BinaryExpression, ptr %93, i32 0, i32 5
  %94 = load i64, ptr %memberidx47, align 4
  %95 = icmp eq i64 %94, 14
  br i1 %95, label %if.entry48, label %else49

if.entry48:                                       ; preds = %ifend44
  %96 = load ptr, ptr %program, align 8
  %97 = load ptr, ptr %bin_exp, align 8
  %memberidx51 = getelementptr inbounds %BinaryExpression, ptr %97, i32 0, i32 4
  %98 = load ptr, ptr %memberidx51, align 8
  %99 = call i64 @evaluate_const_int_expression(ptr %96, ptr %98)
  %100 = load ptr, ptr %program, align 8
  %101 = load ptr, ptr %bin_exp, align 8
  %memberidx52 = getelementptr inbounds %BinaryExpression, ptr %101, i32 0, i32 6
  %102 = load ptr, ptr %memberidx52, align 8
  %103 = call i64 @evaluate_const_int_expression(ptr %100, ptr %102)
  %104 = lshr i64 %99, %103
  ret i64 %104

else49:                                           ; preds = %ifend44
  br label %ifend50

ifend50:                                          ; preds = %else49
  %105 = load ptr, ptr %bin_exp, align 8
  %memberidx53 = getelementptr inbounds %BinaryExpression, ptr %105, i32 0, i32 5
  %106 = load i64, ptr %memberidx53, align 4
  %107 = icmp eq i64 %106, 15
  br i1 %107, label %if.entry54, label %else55

if.entry54:                                       ; preds = %ifend50
  %108 = load ptr, ptr %program, align 8
  %109 = load ptr, ptr %bin_exp, align 8
  %memberidx57 = getelementptr inbounds %BinaryExpression, ptr %109, i32 0, i32 4
  %110 = load ptr, ptr %memberidx57, align 8
  %111 = call i64 @evaluate_const_int_expression(ptr %108, ptr %110)
  %112 = load ptr, ptr %program, align 8
  %113 = load ptr, ptr %bin_exp, align 8
  %memberidx58 = getelementptr inbounds %BinaryExpression, ptr %113, i32 0, i32 6
  %114 = load ptr, ptr %memberidx58, align 8
  %115 = call i64 @evaluate_const_int_expression(ptr %112, ptr %114)
  %116 = or i64 %111, %115
  ret i64 %116

else55:                                           ; preds = %ifend50
  br label %ifend56

ifend56:                                          ; preds = %else55
  %117 = load ptr, ptr %bin_exp, align 8
  %memberidx59 = getelementptr inbounds %BinaryExpression, ptr %117, i32 0, i32 5
  %118 = load i64, ptr %memberidx59, align 4
  %119 = icmp eq i64 %118, 16
  br i1 %119, label %if.entry60, label %else61

if.entry60:                                       ; preds = %ifend56
  %120 = load ptr, ptr %program, align 8
  %121 = load ptr, ptr %bin_exp, align 8
  %memberidx63 = getelementptr inbounds %BinaryExpression, ptr %121, i32 0, i32 4
  %122 = load ptr, ptr %memberidx63, align 8
  %123 = call i64 @evaluate_const_int_expression(ptr %120, ptr %122)
  %124 = load ptr, ptr %program, align 8
  %125 = load ptr, ptr %bin_exp, align 8
  %memberidx64 = getelementptr inbounds %BinaryExpression, ptr %125, i32 0, i32 6
  %126 = load ptr, ptr %memberidx64, align 8
  %127 = call i64 @evaluate_const_int_expression(ptr %124, ptr %126)
  %128 = and i64 %123, %127
  ret i64 %128

else61:                                           ; preds = %ifend56
  br label %ifend62

ifend62:                                          ; preds = %else61
  %129 = load ptr, ptr %bin_exp, align 8
  %memberidx65 = getelementptr inbounds %BinaryExpression, ptr %129, i32 0, i32 5
  %130 = load i64, ptr %memberidx65, align 4
  %131 = icmp eq i64 %130, 17
  br i1 %131, label %if.entry66, label %else67

if.entry66:                                       ; preds = %ifend62
  %132 = load ptr, ptr %program, align 8
  %133 = load ptr, ptr %bin_exp, align 8
  %memberidx69 = getelementptr inbounds %BinaryExpression, ptr %133, i32 0, i32 4
  %134 = load ptr, ptr %memberidx69, align 8
  %135 = call i64 @evaluate_const_int_expression(ptr %132, ptr %134)
  %136 = load ptr, ptr %program, align 8
  %137 = load ptr, ptr %bin_exp, align 8
  %memberidx70 = getelementptr inbounds %BinaryExpression, ptr %137, i32 0, i32 6
  %138 = load ptr, ptr %memberidx70, align 8
  %139 = call i64 @evaluate_const_int_expression(ptr %136, ptr %138)
  %140 = xor i64 %135, %139
  ret i64 %140

else67:                                           ; preds = %ifend62
  br label %ifend68

ifend68:                                          ; preds = %else67
  br label %ifend10

if.entry72:                                       ; preds = %ifend10
  %141 = load ptr, ptr %exp, align 8
  store ptr %141, ptr %unary_exp, align 8
  %142 = load ptr, ptr %unary_exp, align 8
  %memberidx75 = getelementptr inbounds %UnaryExpression, ptr %142, i32 0, i32 4
  %143 = load i64, ptr %memberidx75, align 4
  %144 = icmp eq i64 %143, 6
  br i1 %144, label %if.entry76, label %else77

else73:                                           ; preds = %ifend10
  br label %ifend74

ifend74:                                          ; preds = %else73, %ifend83
  %145 = load ptr, ptr %exp, align 8
  %memberidx85 = getelementptr inbounds %Expression, ptr %145, i32 0, i32 2
  %146 = load i64, ptr %memberidx85, align 4
  %147 = icmp eq i64 %146, 8
  br i1 %147, label %if.entry86, label %else87

if.entry76:                                       ; preds = %if.entry72
  %148 = load ptr, ptr %program, align 8
  %149 = load ptr, ptr %unary_exp, align 8
  %memberidx79 = getelementptr inbounds %UnaryExpression, ptr %149, i32 0, i32 5
  %150 = load ptr, ptr %memberidx79, align 8
  %151 = call i64 @evaluate_const_int_expression(ptr %148, ptr %150)
  %152 = sub nsw i64 0, %151
  ret i64 %152

else77:                                           ; preds = %if.entry72
  br label %ifend78

ifend78:                                          ; preds = %else77
  %153 = load ptr, ptr %unary_exp, align 8
  %memberidx80 = getelementptr inbounds %UnaryExpression, ptr %153, i32 0, i32 4
  %154 = load i64, ptr %memberidx80, align 4
  %155 = icmp eq i64 %154, 7
  br i1 %155, label %if.entry81, label %else82

if.entry81:                                       ; preds = %ifend78
  %156 = load ptr, ptr %program, align 8
  %157 = load ptr, ptr %unary_exp, align 8
  %memberidx84 = getelementptr inbounds %UnaryExpression, ptr %157, i32 0, i32 5
  %158 = load ptr, ptr %memberidx84, align 8
  %159 = call i64 @evaluate_const_int_expression(ptr %156, ptr %158)
  %160 = xor i64 %159, -1
  ret i64 %160

else82:                                           ; preds = %ifend78
  br label %ifend83

ifend83:                                          ; preds = %else82
  br label %ifend74

if.entry86:                                       ; preds = %ifend74
  %161 = load ptr, ptr %exp, align 8
  store ptr %161, ptr %var_exp, align 8
  %162 = load ptr, ptr %program, align 8
  %163 = load ptr, ptr %program, align 8
  %164 = load ptr, ptr %var_exp, align 8
  %memberidx89 = getelementptr inbounds %VarAccessExpression, ptr %164, i32 0, i32 4
  %165 = load ptr, ptr %memberidx89, align 8
  %166 = call ptr @get_const(ptr %163, ptr %165)
  %memberidx90 = getelementptr inbounds %Const, ptr %166, i32 0, i32 2
  %167 = load ptr, ptr %memberidx90, align 8
  %168 = call i64 @evaluate_const_int_expression(ptr %162, ptr %167)
  ret i64 %168

else87:                                           ; preds = %ifend74
  br label %ifend88

ifend88:                                          ; preds = %else87
  ret i64 -99999999
}

define void @VarAccessExpression_constructor(ptr %0, ptr %1, ptr %2) {
  %this = alloca ptr, align 8
  %value_type = alloca ptr, align 8
  %super = alloca ptr, align 8
  %value_id = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Expression_constructor, ptr %super, align 8
  store ptr %1, ptr %value_id, align 8
  store ptr %2, ptr %value_type, align 8
  %4 = load ptr, ptr %super, align 8
  call void %4(ptr %0, i64 8)
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %VarAccessExpression, ptr %5, i32 0, i32 4
  %6 = load ptr, ptr %value_id, align 8
  store ptr %6, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %7, i32 0, i32 3
  %8 = load ptr, ptr %value_type, align 8
  store ptr %8, ptr %memberidx1, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %9, i32 0, i32 1
  %10 = load ptr, ptr %value_id, align 8
  %memberidx3 = getelementptr inbounds %VarId, ptr %10, i32 0, i32 0
  %11 = load i64, ptr %memberidx3, align 4
  %12 = icmp eq i64 %11, 2
  store i1 %12, ptr %memberidx2, align 1
  ret void
}

define ptr @get_const(ptr %0, ptr %1) {
  %program = alloca ptr, align 8
  %const_id = alloca ptr, align 8
  store ptr %0, ptr %program, align 8
  store ptr %1, ptr %const_id, align 8
  %3 = load ptr, ptr %program, align 8
  %memberidx = getelementptr inbounds %Program, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %const_id, align 8
  %memberidx1 = getelementptr inbounds %VarId, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = call ptr @Array_Module____getitem__(ptr %4, i64 %6)
  %memberidx2 = getelementptr inbounds %Module, ptr %7, i32 0, i32 2
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %const_id, align 8
  %memberidx3 = getelementptr inbounds %VarId, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = call ptr @Array_Const____getitem__(ptr %8, i64 %10)
  ret ptr %11
}

define i1 @is_operator_overload_name(ptr %0) {
  %name = alloca ptr, align 8
  store ptr %0, ptr %name, align 8
  %2 = load ptr, ptr %name, align 8
  %3 = call ptr @string_from_bytes(ptr @358, i64 6)
  %4 = call i1 @string___eq__(ptr %2, ptr %3)
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %1
  ret i1 true

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %5 = load ptr, ptr %name, align 8
  %6 = call ptr @string_from_bytes(ptr @359, i64 7)
  %7 = call i1 @string___eq__(ptr %5, ptr %6)
  br i1 %7, label %if.entry1, label %else2

if.entry1:                                        ; preds = %ifend
  ret i1 true

else2:                                            ; preds = %ifend
  br label %ifend3

ifend3:                                           ; preds = %else2
  %8 = load ptr, ptr %name, align 8
  %9 = call ptr @string_from_bytes(ptr @360, i64 7)
  %10 = call i1 @string___eq__(ptr %8, ptr %9)
  br i1 %10, label %if.entry4, label %else5

if.entry4:                                        ; preds = %ifend3
  ret i1 true

else5:                                            ; preds = %ifend3
  br label %ifend6

ifend6:                                           ; preds = %else5
  %11 = load ptr, ptr %name, align 8
  %12 = call ptr @string_from_bytes(ptr @361, i64 7)
  %13 = call i1 @string___eq__(ptr %11, ptr %12)
  br i1 %13, label %if.entry7, label %else8

if.entry7:                                        ; preds = %ifend6
  ret i1 true

else8:                                            ; preds = %ifend6
  br label %ifend9

ifend9:                                           ; preds = %else8
  %14 = load ptr, ptr %name, align 8
  %15 = call ptr @string_from_bytes(ptr @362, i64 7)
  %16 = call i1 @string___eq__(ptr %14, ptr %15)
  br i1 %16, label %if.entry10, label %else11

if.entry10:                                       ; preds = %ifend9
  ret i1 true

else11:                                           ; preds = %ifend9
  br label %ifend12

ifend12:                                          ; preds = %else11
  %17 = load ptr, ptr %name, align 8
  %18 = call ptr @string_from_bytes(ptr @363, i64 6)
  %19 = call i1 @string___eq__(ptr %17, ptr %18)
  br i1 %19, label %if.entry13, label %else14

if.entry13:                                       ; preds = %ifend12
  ret i1 true

else14:                                           ; preds = %ifend12
  br label %ifend15

ifend15:                                          ; preds = %else14
  %20 = load ptr, ptr %name, align 8
  %21 = call ptr @string_from_bytes(ptr @364, i64 8)
  %22 = call i1 @string___eq__(ptr %20, ptr %21)
  br i1 %22, label %if.entry16, label %else17

if.entry16:                                       ; preds = %ifend15
  ret i1 true

else17:                                           ; preds = %ifend15
  br label %ifend18

ifend18:                                          ; preds = %else17
  %23 = load ptr, ptr %name, align 8
  %24 = call ptr @string_from_bytes(ptr @365, i64 8)
  %25 = call i1 @string___eq__(ptr %23, ptr %24)
  br i1 %25, label %if.entry19, label %else20

if.entry19:                                       ; preds = %ifend18
  ret i1 true

else20:                                           ; preds = %ifend18
  br label %ifend21

ifend21:                                          ; preds = %else20
  %26 = load ptr, ptr %name, align 8
  %27 = call ptr @string_from_bytes(ptr @366, i64 8)
  %28 = call i1 @string___eq__(ptr %26, ptr %27)
  br i1 %28, label %if.entry22, label %else23

if.entry22:                                       ; preds = %ifend21
  ret i1 true

else23:                                           ; preds = %ifend21
  br label %ifend24

ifend24:                                          ; preds = %else23
  %29 = load ptr, ptr %name, align 8
  %30 = call ptr @string_from_bytes(ptr @367, i64 8)
  %31 = call i1 @string___eq__(ptr %29, ptr %30)
  br i1 %31, label %if.entry25, label %else26

if.entry25:                                       ; preds = %ifend24
  ret i1 true

else26:                                           ; preds = %ifend24
  br label %ifend27

ifend27:                                          ; preds = %else26
  %32 = load ptr, ptr %name, align 8
  %33 = call ptr @string_from_bytes(ptr @368, i64 7)
  %34 = call i1 @string___eq__(ptr %32, ptr %33)
  br i1 %34, label %if.entry28, label %else29

if.entry28:                                       ; preds = %ifend27
  ret i1 true

else29:                                           ; preds = %ifend27
  br label %ifend30

ifend30:                                          ; preds = %else29
  %35 = load ptr, ptr %name, align 8
  %36 = call ptr @string_from_bytes(ptr @369, i64 8)
  %37 = call i1 @string___eq__(ptr %35, ptr %36)
  br i1 %37, label %if.entry31, label %else32

if.entry31:                                       ; preds = %ifend30
  ret i1 true

else32:                                           ; preds = %ifend30
  br label %ifend33

ifend33:                                          ; preds = %else32
  %38 = load ptr, ptr %name, align 8
  %39 = call ptr @string_from_bytes(ptr @370, i64 8)
  %40 = call i1 @string___eq__(ptr %38, ptr %39)
  br i1 %40, label %if.entry34, label %else35

if.entry34:                                       ; preds = %ifend33
  ret i1 true

else35:                                           ; preds = %ifend33
  br label %ifend36

ifend36:                                          ; preds = %else35
  %41 = load ptr, ptr %name, align 8
  %42 = call ptr @string_from_bytes(ptr @371, i64 11)
  %43 = call i1 @string___eq__(ptr %41, ptr %42)
  br i1 %43, label %if.entry37, label %else38

if.entry37:                                       ; preds = %ifend36
  ret i1 true

else38:                                           ; preds = %ifend36
  br label %ifend39

ifend39:                                          ; preds = %else38
  %44 = load ptr, ptr %name, align 8
  %45 = call ptr @string_from_bytes(ptr @372, i64 11)
  %46 = call i1 @string___eq__(ptr %44, ptr %45)
  br i1 %46, label %if.entry40, label %else41

if.entry40:                                       ; preds = %ifend39
  ret i1 true

else41:                                           ; preds = %ifend39
  br label %ifend42

ifend42:                                          ; preds = %else41
  %47 = load ptr, ptr %name, align 8
  %48 = call ptr @string_from_bytes(ptr @373, i64 6)
  %49 = call i1 @string___eq__(ptr %47, ptr %48)
  br i1 %49, label %if.entry43, label %else44

if.entry43:                                       ; preds = %ifend42
  ret i1 true

else44:                                           ; preds = %ifend42
  br label %ifend45

ifend45:                                          ; preds = %else44
  %50 = load ptr, ptr %name, align 8
  %51 = call ptr @string_from_bytes(ptr @374, i64 6)
  %52 = call i1 @string___eq__(ptr %50, ptr %51)
  br i1 %52, label %if.entry46, label %else47

if.entry46:                                       ; preds = %ifend45
  ret i1 true

else47:                                           ; preds = %ifend45
  br label %ifend48

ifend48:                                          ; preds = %else47
  %53 = load ptr, ptr %name, align 8
  %54 = call ptr @string_from_bytes(ptr @375, i64 7)
  %55 = call i1 @string___eq__(ptr %53, ptr %54)
  br i1 %55, label %if.entry49, label %else50

if.entry49:                                       ; preds = %ifend48
  ret i1 true

else50:                                           ; preds = %ifend48
  br label %ifend51

ifend51:                                          ; preds = %else50
  %56 = load ptr, ptr %name, align 8
  %57 = call ptr @string_from_bytes(ptr @376, i64 7)
  %58 = call i1 @string___eq__(ptr %56, ptr %57)
  br i1 %58, label %if.entry52, label %else53

if.entry52:                                       ; preds = %ifend51
  ret i1 true

else53:                                           ; preds = %ifend51
  br label %ifend54

ifend54:                                          ; preds = %else53
  %59 = load ptr, ptr %name, align 8
  %60 = call ptr @string_from_bytes(ptr @377, i64 6)
  %61 = call i1 @string___eq__(ptr %59, ptr %60)
  br i1 %61, label %if.entry55, label %else56

if.entry55:                                       ; preds = %ifend54
  ret i1 true

else56:                                           ; preds = %ifend54
  br label %ifend57

ifend57:                                          ; preds = %else56
  %62 = load ptr, ptr %name, align 8
  %63 = call ptr @string_from_bytes(ptr @378, i64 6)
  %64 = call i1 @string___eq__(ptr %62, ptr %63)
  br i1 %64, label %if.entry58, label %else59

if.entry58:                                       ; preds = %ifend57
  ret i1 true

else59:                                           ; preds = %ifend57
  br label %ifend60

ifend60:                                          ; preds = %else59
  %65 = load ptr, ptr %name, align 8
  %66 = call ptr @string_from_bytes(ptr @379, i64 6)
  %67 = call i1 @string___eq__(ptr %65, ptr %66)
  br i1 %67, label %if.entry61, label %else62

if.entry61:                                       ; preds = %ifend60
  ret i1 true

else62:                                           ; preds = %ifend60
  br label %ifend63

ifend63:                                          ; preds = %else62
  %68 = load ptr, ptr %name, align 8
  %69 = call ptr @string_from_bytes(ptr @380, i64 6)
  %70 = call i1 @string___eq__(ptr %68, ptr %69)
  br i1 %70, label %if.entry64, label %else65

if.entry64:                                       ; preds = %ifend63
  ret i1 true

else65:                                           ; preds = %ifend63
  br label %ifend66

ifend66:                                          ; preds = %else65
  %71 = load ptr, ptr %name, align 8
  %72 = call ptr @string_from_bytes(ptr @381, i64 6)
  %73 = call i1 @string___eq__(ptr %71, ptr %72)
  br i1 %73, label %if.entry67, label %else68

if.entry67:                                       ; preds = %ifend66
  ret i1 true

else68:                                           ; preds = %ifend66
  br label %ifend69

ifend69:                                          ; preds = %else68
  %74 = load ptr, ptr %name, align 8
  %75 = call ptr @string_from_bytes(ptr @382, i64 6)
  %76 = call i1 @string___eq__(ptr %74, ptr %75)
  br i1 %76, label %if.entry70, label %else71

if.entry70:                                       ; preds = %ifend69
  ret i1 true

else71:                                           ; preds = %ifend69
  br label %ifend72

ifend72:                                          ; preds = %else71
  %77 = load ptr, ptr %name, align 8
  %78 = call ptr @string_from_bytes(ptr @383, i64 7)
  %79 = call i1 @string___eq__(ptr %77, ptr %78)
  br i1 %79, label %if.entry73, label %else74

if.entry73:                                       ; preds = %ifend72
  ret i1 true

else74:                                           ; preds = %ifend72
  br label %ifend75

ifend75:                                          ; preds = %else74
  %80 = load ptr, ptr %name, align 8
  %81 = call ptr @string_from_bytes(ptr @384, i64 7)
  %82 = call i1 @string___eq__(ptr %80, ptr %81)
  br i1 %82, label %if.entry76, label %else77

if.entry76:                                       ; preds = %ifend75
  ret i1 true

else77:                                           ; preds = %ifend75
  br label %ifend78

ifend78:                                          ; preds = %else77
  %83 = load ptr, ptr %name, align 8
  %84 = call ptr @string_from_bytes(ptr @385, i64 8)
  %85 = call i1 @string___eq__(ptr %83, ptr %84)
  br i1 %85, label %if.entry79, label %else80

if.entry79:                                       ; preds = %ifend78
  ret i1 true

else80:                                           ; preds = %ifend78
  br label %ifend81

ifend81:                                          ; preds = %else80
  %86 = load ptr, ptr %name, align 8
  %87 = call ptr @string_from_bytes(ptr @386, i64 8)
  %88 = call i1 @string___eq__(ptr %86, ptr %87)
  br i1 %88, label %if.entry82, label %else83

if.entry82:                                       ; preds = %ifend81
  ret i1 true

else83:                                           ; preds = %ifend81
  br label %ifend84

ifend84:                                          ; preds = %else83
  %89 = load ptr, ptr %name, align 8
  %90 = call ptr @string_from_bytes(ptr @387, i64 8)
  %91 = call i1 @string___eq__(ptr %89, ptr %90)
  br i1 %91, label %if.entry85, label %else86

if.entry85:                                       ; preds = %ifend84
  ret i1 true

else86:                                           ; preds = %ifend84
  br label %ifend87

ifend87:                                          ; preds = %else86
  %92 = load ptr, ptr %name, align 8
  %93 = call ptr @string_from_bytes(ptr @388, i64 7)
  %94 = call i1 @string___eq__(ptr %92, ptr %93)
  br i1 %94, label %if.entry88, label %else89

if.entry88:                                       ; preds = %ifend87
  ret i1 true

else89:                                           ; preds = %ifend87
  br label %ifend90

ifend90:                                          ; preds = %else89
  ret i1 false
}

define i64 @get_class_prop_visibility(ptr %0, ptr %1) {
  %program = alloca ptr, align 8
  %prop_id = alloca ptr, align 8
  %owner = alloca ptr, align 8
  store ptr %0, ptr %program, align 8
  store ptr %1, ptr %prop_id, align 8
  %3 = load ptr, ptr %program, align 8
  %4 = load ptr, ptr %prop_id, align 8
  %5 = call ptr @get_class_from_prop_id(ptr %3, ptr %4)
  store ptr %5, ptr %owner, align 8
  %6 = load ptr, ptr %prop_id, align 8
  %memberidx = getelementptr inbounds %PropId, ptr %6, i32 0, i32 0
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %9 = load ptr, ptr %owner, align 8
  %memberidx1 = getelementptr inbounds %Class, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx1, align 8
  %11 = load ptr, ptr %prop_id, align 8
  %memberidx2 = getelementptr inbounds %PropId, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx2, align 4
  %13 = call ptr @Array_ClassMethod____getitem__(ptr %10, i64 %12)
  %memberidx3 = getelementptr inbounds %ClassMethod, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx3, align 4
  ret i64 %14

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %15 = load ptr, ptr %owner, align 8
  %memberidx4 = getelementptr inbounds %Class, ptr %15, i32 0, i32 4
  %16 = load ptr, ptr %memberidx4, align 8
  %17 = load ptr, ptr %prop_id, align 8
  %memberidx5 = getelementptr inbounds %PropId, ptr %17, i32 0, i32 2
  %18 = load i64, ptr %memberidx5, align 4
  %19 = call ptr @Array_ClassField____getitem__(ptr %16, i64 %18)
  %memberidx6 = getelementptr inbounds %ClassField, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  ret i64 %20
}

define ptr @dump_access(i64 %0) {
  %visibility = alloca i64, align 8
  store i64 %0, ptr %visibility, align 4
  %2 = load i64, ptr %visibility, align 4
  %3 = icmp eq i64 %2, 1
  br i1 %3, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %4 = call ptr @string_from_bytes(ptr @227, i64 7)
  ret ptr %4

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %5 = load i64, ptr %visibility, align 4
  %6 = icmp eq i64 %5, 2
  br i1 %6, label %if.entry1, label %else2

if.entry1:                                        ; preds = %ifend
  %7 = call ptr @string_from_bytes(ptr @228, i64 6)
  ret ptr %7

else2:                                            ; preds = %ifend
  br label %ifend3

ifend3:                                           ; preds = %else2
  %8 = call ptr @string_from_bytes(ptr @229, i64 9)
  ret ptr %8
}

define i1 @is_object(ptr %0) {
  %val_ty = alloca ptr, align 8
  store ptr %0, ptr %val_ty, align 8
  %2 = load ptr, ptr %val_ty, align 8
  %memberidx = getelementptr inbounds %Type, ptr %2, i32 0, i32 0
  %3 = load i64, ptr %memberidx, align 4
  %4 = icmp eq i64 %3, 20
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %5 = load ptr, ptr %val_ty, align 8
  %memberidx1 = getelementptr inbounds %GenericType, ptr %5, i32 0, i32 3
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = call i1 @is_object(ptr %6)
  ret i1 %7

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %8 = load ptr, ptr %val_ty, align 8
  %memberidx2 = getelementptr inbounds %Type, ptr %8, i32 0, i32 0
  %9 = load i64, ptr %memberidx2, align 4
  %10 = icmp eq i64 %9, 11
  ret i1 %10
}

define i64 @get_vtable_index(ptr %0, ptr %1) {
  %program = alloca ptr, align 8
  %prop_id = alloca ptr, align 8
  %owner = alloca ptr, align 8
  store ptr %0, ptr %program, align 8
  store ptr %1, ptr %prop_id, align 8
  %3 = load ptr, ptr %program, align 8
  %4 = load ptr, ptr %prop_id, align 8
  %5 = call ptr @get_class_from_prop_id(ptr %3, ptr %4)
  store ptr %5, ptr %owner, align 8
  %6 = load ptr, ptr %prop_id, align 8
  %memberidx = getelementptr inbounds %PropId, ptr %6, i32 0, i32 0
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %9 = load ptr, ptr %owner, align 8
  %memberidx1 = getelementptr inbounds %Class, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx1, align 8
  %11 = load ptr, ptr %prop_id, align 8
  %memberidx2 = getelementptr inbounds %PropId, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx2, align 4
  %13 = call ptr @Array_ClassMethod____getitem__(ptr %10, i64 %12)
  %memberidx3 = getelementptr inbounds %ClassMethod, ptr %13, i32 0, i32 9
  %14 = load i64, ptr %memberidx3, align 4
  ret i64 %14

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %15 = load ptr, ptr %owner, align 8
  %memberidx4 = getelementptr inbounds %Class, ptr %15, i32 0, i32 4
  %16 = load ptr, ptr %memberidx4, align 8
  %17 = load ptr, ptr %prop_id, align 8
  %memberidx5 = getelementptr inbounds %PropId, ptr %17, i32 0, i32 2
  %18 = load i64, ptr %memberidx5, align 4
  %19 = call ptr @Array_ClassField____getitem__(ptr %16, i64 %18)
  %memberidx6 = getelementptr inbounds %ClassField, ptr %19, i32 0, i32 6
  %20 = load i64, ptr %memberidx6, align 4
  ret i64 %20
}

define i1 @is_class_prop_static(ptr %0, ptr %1) {
  %program = alloca ptr, align 8
  %prop_id = alloca ptr, align 8
  %owner = alloca ptr, align 8
  store ptr %0, ptr %program, align 8
  store ptr %1, ptr %prop_id, align 8
  %3 = load ptr, ptr %program, align 8
  %4 = load ptr, ptr %prop_id, align 8
  %5 = call ptr @get_class_from_prop_id(ptr %3, ptr %4)
  store ptr %5, ptr %owner, align 8
  %6 = load ptr, ptr %prop_id, align 8
  %memberidx = getelementptr inbounds %PropId, ptr %6, i32 0, i32 0
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %9 = load ptr, ptr %owner, align 8
  %memberidx1 = getelementptr inbounds %Class, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx1, align 8
  %11 = load ptr, ptr %prop_id, align 8
  %memberidx2 = getelementptr inbounds %PropId, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx2, align 4
  %13 = call ptr @Array_ClassMethod____getitem__(ptr %10, i64 %12)
  %memberidx3 = getelementptr inbounds %ClassMethod, ptr %13, i32 0, i32 1
  %14 = load i1, ptr %memberidx3, align 1
  ret i1 %14

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %15 = load ptr, ptr %owner, align 8
  %memberidx4 = getelementptr inbounds %Class, ptr %15, i32 0, i32 4
  %16 = load ptr, ptr %memberidx4, align 8
  %17 = load ptr, ptr %prop_id, align 8
  %memberidx5 = getelementptr inbounds %PropId, ptr %17, i32 0, i32 2
  %18 = load i64, ptr %memberidx5, align 4
  %19 = call ptr @Array_ClassField____getitem__(ptr %16, i64 %18)
  %memberidx6 = getelementptr inbounds %ClassField, ptr %19, i32 0, i32 1
  %20 = load i1, ptr %memberidx6, align 1
  ret i1 %20
}

define ptr @get_method(ptr %0, ptr %1) {
  %program = alloca ptr, align 8
  %prop_id = alloca ptr, align 8
  store ptr %0, ptr %program, align 8
  store ptr %1, ptr %prop_id, align 8
  %3 = load ptr, ptr %program, align 8
  %4 = load ptr, ptr %prop_id, align 8
  %5 = call ptr @get_class_from_prop_id(ptr %3, ptr %4)
  %memberidx = getelementptr inbounds %Class, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %prop_id, align 8
  %memberidx1 = getelementptr inbounds %PropId, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = call ptr @Array_ClassMethod____getitem__(ptr %6, i64 %8)
  ret ptr %9
}

define void @BooleanType_constructor(ptr %0) {
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Type_constructor, ptr %super, align 8
  %2 = load ptr, ptr %super, align 8
  call void %2(ptr %0, i64 0)
  ret void
}

define void @BooleanExpression_constructor(ptr %0, i1 %1) {
  %value = alloca i1, align 1
  %this = alloca ptr, align 8
  %super = alloca ptr, align 8
  %bool_type = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Expression_constructor, ptr %super, align 8
  store i1 %1, ptr %value, align 1
  %3 = load ptr, ptr %super, align 8
  call void %3(ptr %0, i64 4)
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BooleanType, ptr null, i32 1) to i32))
  call void @BooleanType_constructor(ptr %4)
  store ptr %4, ptr %bool_type, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %5, i32 0, i32 3
  %6 = load ptr, ptr %bool_type, align 8
  store ptr %6, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %BooleanExpression, ptr %7, i32 0, i32 4
  %8 = load i1, ptr %value, align 1
  store i1 %8, ptr %memberidx1, align 1
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %9, i32 0, i32 1
  store i1 true, ptr %memberidx2, align 1
  ret void
}

define void @NullExpression_constructor(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %value_type = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Expression_constructor, ptr %super, align 8
  store ptr %1, ptr %value_type, align 8
  %3 = load ptr, ptr %super, align 8
  call void %3(ptr %0, i64 5)
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %4, i32 0, i32 3
  %5 = load ptr, ptr %value_type, align 8
  store ptr %5, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %6, i32 0, i32 1
  store i1 true, ptr %memberidx1, align 1
  ret void
}

define ptr @get_func(ptr %0, ptr %1) {
  %program = alloca ptr, align 8
  %func_id = alloca ptr, align 8
  store ptr %0, ptr %program, align 8
  store ptr %1, ptr %func_id, align 8
  %3 = load ptr, ptr %program, align 8
  %memberidx = getelementptr inbounds %Program, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %func_id, align 8
  %memberidx1 = getelementptr inbounds %VarId, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = call ptr @Array_Module____getitem__(ptr %4, i64 %6)
  %memberidx2 = getelementptr inbounds %Module, ptr %7, i32 0, i32 4
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %func_id, align 8
  %memberidx3 = getelementptr inbounds %VarId, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = call ptr @Array_Function____getitem__(ptr %8, i64 %10)
  ret ptr %11
}

define ptr @lower_bin_assign_node(ptr %0) {
  %binary_node = alloca ptr, align 8
  %op = alloca i64, align 8
  store ptr %0, ptr %binary_node, align 8
  %2 = load ptr, ptr %binary_node, align 8
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %2, i32 0, i32 4
  %3 = load i64, ptr %memberidx, align 4
  store i64 %3, ptr %op, align 4
  %4 = load i64, ptr %op, align 4
  %5 = icmp eq i64 %4, 20
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %1
  store i64 1, ptr %op, align 4
  br label %ifend

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %6 = load i64, ptr %op, align 4
  %7 = icmp eq i64 %6, 21
  br i1 %7, label %if.entry1, label %else2

if.entry1:                                        ; preds = %ifend
  store i64 2, ptr %op, align 4
  br label %ifend3

else2:                                            ; preds = %ifend
  br label %ifend3

ifend3:                                           ; preds = %else2, %if.entry1
  %8 = load i64, ptr %op, align 4
  %9 = icmp eq i64 %8, 22
  br i1 %9, label %if.entry4, label %else5

if.entry4:                                        ; preds = %ifend3
  store i64 3, ptr %op, align 4
  br label %ifend6

else5:                                            ; preds = %ifend3
  br label %ifend6

ifend6:                                           ; preds = %else5, %if.entry4
  %10 = load i64, ptr %op, align 4
  %11 = icmp eq i64 %10, 23
  br i1 %11, label %if.entry7, label %else8

if.entry7:                                        ; preds = %ifend6
  store i64 4, ptr %op, align 4
  br label %ifend9

else8:                                            ; preds = %ifend6
  br label %ifend9

ifend9:                                           ; preds = %else8, %if.entry7
  %12 = load i64, ptr %op, align 4
  %13 = icmp eq i64 %12, 24
  br i1 %13, label %if.entry10, label %else11

if.entry10:                                       ; preds = %ifend9
  store i64 5, ptr %op, align 4
  br label %ifend12

else11:                                           ; preds = %ifend9
  br label %ifend12

ifend12:                                          ; preds = %else11, %if.entry10
  %14 = load i64, ptr %op, align 4
  %15 = icmp eq i64 %14, 25
  br i1 %15, label %if.entry13, label %else14

if.entry13:                                       ; preds = %ifend12
  store i64 6, ptr %op, align 4
  br label %ifend15

else14:                                           ; preds = %ifend12
  br label %ifend15

ifend15:                                          ; preds = %else14, %if.entry13
  %16 = load i64, ptr %op, align 4
  %17 = icmp eq i64 %16, 26
  br i1 %17, label %if.entry16, label %else17

if.entry16:                                       ; preds = %ifend15
  store i64 16, ptr %op, align 4
  br label %ifend18

else17:                                           ; preds = %ifend15
  br label %ifend18

ifend18:                                          ; preds = %else17, %if.entry16
  %18 = load i64, ptr %op, align 4
  %19 = icmp eq i64 %18, 27
  br i1 %19, label %if.entry19, label %else20

if.entry19:                                       ; preds = %ifend18
  store i64 15, ptr %op, align 4
  br label %ifend21

else20:                                           ; preds = %ifend18
  br label %ifend21

ifend21:                                          ; preds = %else20, %if.entry19
  %20 = load i64, ptr %op, align 4
  %21 = icmp eq i64 %20, 29
  br i1 %21, label %if.entry22, label %else23

if.entry22:                                       ; preds = %ifend21
  store i64 13, ptr %op, align 4
  br label %ifend24

else23:                                           ; preds = %ifend21
  br label %ifend24

ifend24:                                          ; preds = %else23, %if.entry22
  %22 = load i64, ptr %op, align 4
  %23 = icmp eq i64 %22, 30
  br i1 %23, label %if.entry25, label %else26

if.entry25:                                       ; preds = %ifend24
  store i64 14, ptr %op, align 4
  br label %ifend27

else26:                                           ; preds = %ifend24
  br label %ifend27

ifend27:                                          ; preds = %else26, %if.entry25
  %24 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%BinaryExpressionNode, ptr null, i32 1) to i32))
  %25 = load ptr, ptr %binary_node, align 8
  %memberidx28 = getelementptr inbounds %BinaryExpressionNode, ptr %25, i32 0, i32 3
  %26 = load ptr, ptr %memberidx28, align 8
  %27 = load i64, ptr %op, align 4
  %28 = load ptr, ptr %binary_node, align 8
  %memberidx29 = getelementptr inbounds %BinaryExpressionNode, ptr %28, i32 0, i32 5
  %29 = load ptr, ptr %memberidx29, align 8
  call void @BinaryExpressionNode_constructor(ptr %24, ptr %26, i64 %27, ptr %29)
  ret ptr %24
}

define i1 @check_is_var(ptr %0) {
  %expr = alloca ptr, align 8
  %prop_id = alloca ptr, align 8
  store ptr %0, ptr %expr, align 8
  %2 = load ptr, ptr %expr, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = icmp eq i64 %3, 8
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %5 = load ptr, ptr %expr, align 8
  %memberidx1 = getelementptr inbounds %VarAccessExpression, ptr %5, i32 0, i32 4
  %6 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %VarId, ptr %6, i32 0, i32 0
  %7 = load i64, ptr %memberidx2, align 4
  %8 = icmp eq i64 %7, 1
  ret i1 %8

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %9 = load ptr, ptr %expr, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = icmp eq i64 %10, 13
  br i1 %11, label %if.entry4, label %else5

if.entry4:                                        ; preds = %ifend
  %12 = load ptr, ptr %expr, align 8
  %memberidx7 = getelementptr inbounds %MemberExpression, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx7, align 8
  store ptr %13, ptr %prop_id, align 8
  %14 = load ptr, ptr %prop_id, align 8
  %memberidx8 = getelementptr inbounds %PropId, ptr %14, i32 0, i32 0
  %15 = load i64, ptr %memberidx8, align 4
  %16 = icmp eq i64 %15, 1
  ret i1 %16

else5:                                            ; preds = %ifend
  br label %ifend6

ifend6:                                           ; preds = %else5
  %17 = load ptr, ptr %expr, align 8
  %memberidx9 = getelementptr inbounds %Expression, ptr %17, i32 0, i32 2
  %18 = load i64, ptr %memberidx9, align 4
  %19 = icmp eq i64 %18, 14
  br i1 %19, label %if.entry10, label %else11

if.entry10:                                       ; preds = %ifend6
  %20 = load ptr, ptr %expr, align 8
  %memberidx13 = getelementptr inbounds %IndexExpression, ptr %20, i32 0, i32 4
  %21 = load ptr, ptr %memberidx13, align 8
  %memberidx14 = getelementptr inbounds %Expression, ptr %21, i32 0, i32 3
  %22 = load ptr, ptr %memberidx14, align 8
  %memberidx15 = getelementptr inbounds %Type, ptr %22, i32 0, i32 0
  %23 = load i64, ptr %memberidx15, align 4
  %24 = icmp ne i64 %23, 15
  ret i1 %24

else11:                                           ; preds = %ifend6
  br label %ifend12

ifend12:                                          ; preds = %else11
  ret i1 false
}

define void @MemberExpression_constructor(ptr %0, ptr %1, ptr %2, ptr %3) {
  %this = alloca ptr, align 8
  %member_id = alloca ptr, align 8
  %value_type = alloca ptr, align 8
  %super = alloca ptr, align 8
  %expression = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Expression_constructor, ptr %super, align 8
  store ptr %1, ptr %expression, align 8
  store ptr %2, ptr %member_id, align 8
  store ptr %3, ptr %value_type, align 8
  %5 = load ptr, ptr %super, align 8
  call void %5(ptr %0, i64 13)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MemberExpression, ptr %6, i32 0, i32 4
  %7 = load ptr, ptr %expression, align 8
  store ptr %7, ptr %memberidx, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MemberExpression, ptr %8, i32 0, i32 5
  %9 = load ptr, ptr %member_id, align 8
  store ptr %9, ptr %memberidx1, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %10, i32 0, i32 3
  %11 = load ptr, ptr %value_type, align 8
  store ptr %11, ptr %memberidx2, align 8
  ret void
}

define void @IndexExpression_constructor(ptr %0, ptr %1, ptr %2, ptr %3) {
  %this = alloca ptr, align 8
  %value_type = alloca ptr, align 8
  %index = alloca ptr, align 8
  %super = alloca ptr, align 8
  %expression = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Expression_constructor, ptr %super, align 8
  store ptr %1, ptr %expression, align 8
  store ptr %2, ptr %index, align 8
  store ptr %3, ptr %value_type, align 8
  %5 = load ptr, ptr %super, align 8
  call void %5(ptr %0, i64 14)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %IndexExpression, ptr %6, i32 0, i32 4
  %7 = load ptr, ptr %expression, align 8
  store ptr %7, ptr %memberidx, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %IndexExpression, ptr %8, i32 0, i32 5
  %9 = load ptr, ptr %index, align 8
  store ptr %9, ptr %memberidx1, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %10, i32 0, i32 3
  %11 = load ptr, ptr %value_type, align 8
  store ptr %11, ptr %memberidx2, align 8
  ret void
}

define ptr @bin_op_to_op_overload_name(i64 %0) {
  %op = alloca i64, align 8
  store i64 %0, ptr %op, align 4
  %2 = load i64, ptr %op, align 4
  %3 = icmp eq i64 %2, 1
  br i1 %3, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %4 = call ptr @string_from_bytes(ptr @359, i64 7)
  ret ptr %4

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %5 = load i64, ptr %op, align 4
  %6 = icmp eq i64 %5, 2
  br i1 %6, label %if.entry1, label %else2

if.entry1:                                        ; preds = %ifend
  %7 = call ptr @string_from_bytes(ptr @360, i64 7)
  ret ptr %7

else2:                                            ; preds = %ifend
  br label %ifend3

ifend3:                                           ; preds = %else2
  %8 = load i64, ptr %op, align 4
  %9 = icmp eq i64 %8, 3
  br i1 %9, label %if.entry4, label %else5

if.entry4:                                        ; preds = %ifend3
  %10 = call ptr @string_from_bytes(ptr @361, i64 7)
  ret ptr %10

else5:                                            ; preds = %ifend3
  br label %ifend6

ifend6:                                           ; preds = %else5
  %11 = load i64, ptr %op, align 4
  %12 = icmp eq i64 %11, 4
  br i1 %12, label %if.entry7, label %else8

if.entry7:                                        ; preds = %ifend6
  %13 = call ptr @string_from_bytes(ptr @362, i64 7)
  ret ptr %13

else8:                                            ; preds = %ifend6
  br label %ifend9

ifend9:                                           ; preds = %else8
  %14 = load i64, ptr %op, align 4
  %15 = icmp eq i64 %14, 5
  br i1 %15, label %if.entry10, label %else11

if.entry10:                                       ; preds = %ifend9
  %16 = call ptr @string_from_bytes(ptr @384, i64 7)
  ret ptr %16

else11:                                           ; preds = %ifend9
  br label %ifend12

ifend12:                                          ; preds = %else11
  %17 = load i64, ptr %op, align 4
  %18 = icmp eq i64 %17, 6
  br i1 %18, label %if.entry13, label %else14

if.entry13:                                       ; preds = %ifend12
  %19 = call ptr @string_from_bytes(ptr @383, i64 7)
  ret ptr %19

else14:                                           ; preds = %ifend12
  br label %ifend15

ifend15:                                          ; preds = %else14
  %20 = load i64, ptr %op, align 4
  %21 = icmp eq i64 %20, 20
  br i1 %21, label %if.entry16, label %else17

if.entry16:                                       ; preds = %ifend15
  %22 = call ptr @string_from_bytes(ptr @364, i64 8)
  ret ptr %22

else17:                                           ; preds = %ifend15
  br label %ifend18

ifend18:                                          ; preds = %else17
  %23 = load i64, ptr %op, align 4
  %24 = icmp eq i64 %23, 21
  br i1 %24, label %if.entry19, label %else20

if.entry19:                                       ; preds = %ifend18
  %25 = call ptr @string_from_bytes(ptr @365, i64 8)
  ret ptr %25

else20:                                           ; preds = %ifend18
  br label %ifend21

ifend21:                                          ; preds = %else20
  %26 = load i64, ptr %op, align 4
  %27 = icmp eq i64 %26, 22
  br i1 %27, label %if.entry22, label %else23

if.entry22:                                       ; preds = %ifend21
  %28 = call ptr @string_from_bytes(ptr @366, i64 8)
  ret ptr %28

else23:                                           ; preds = %ifend21
  br label %ifend24

ifend24:                                          ; preds = %else23
  %29 = load i64, ptr %op, align 4
  %30 = icmp eq i64 %29, 23
  br i1 %30, label %if.entry25, label %else26

if.entry25:                                       ; preds = %ifend24
  %31 = call ptr @string_from_bytes(ptr @367, i64 8)
  ret ptr %31

else26:                                           ; preds = %ifend24
  br label %ifend27

ifend27:                                          ; preds = %else26
  %32 = load i64, ptr %op, align 4
  %33 = icmp eq i64 %32, 24
  br i1 %33, label %if.entry28, label %else29

if.entry28:                                       ; preds = %ifend27
  %34 = call ptr @string_from_bytes(ptr @386, i64 8)
  ret ptr %34

else29:                                           ; preds = %ifend27
  br label %ifend30

ifend30:                                          ; preds = %else29
  %35 = load i64, ptr %op, align 4
  %36 = icmp eq i64 %35, 25
  br i1 %36, label %if.entry31, label %else32

if.entry31:                                       ; preds = %ifend30
  %37 = call ptr @string_from_bytes(ptr @385, i64 8)
  ret ptr %37

else32:                                           ; preds = %ifend30
  br label %ifend33

ifend33:                                          ; preds = %else32
  %38 = load i64, ptr %op, align 4
  %39 = icmp eq i64 %38, 7
  br i1 %39, label %if.entry34, label %else35

if.entry34:                                       ; preds = %ifend33
  %40 = call ptr @string_from_bytes(ptr @435, i64 6)
  ret ptr %40

else35:                                           ; preds = %ifend33
  br label %ifend36

ifend36:                                          ; preds = %else35
  %41 = load i64, ptr %op, align 4
  %42 = icmp eq i64 %41, 8
  br i1 %42, label %if.entry37, label %else38

if.entry37:                                       ; preds = %ifend36
  %43 = call ptr @string_from_bytes(ptr @382, i64 6)
  ret ptr %43

else38:                                           ; preds = %ifend36
  br label %ifend39

ifend39:                                          ; preds = %else38
  %44 = load i64, ptr %op, align 4
  %45 = icmp eq i64 %44, 9
  br i1 %45, label %if.entry40, label %else41

if.entry40:                                       ; preds = %ifend39
  %46 = call ptr @string_from_bytes(ptr @378, i64 6)
  ret ptr %46

else41:                                           ; preds = %ifend39
  br label %ifend42

ifend42:                                          ; preds = %else41
  %47 = load i64, ptr %op, align 4
  %48 = icmp eq i64 %47, 10
  br i1 %48, label %if.entry43, label %else44

if.entry43:                                       ; preds = %ifend42
  %49 = call ptr @string_from_bytes(ptr @381, i64 6)
  ret ptr %49

else44:                                           ; preds = %ifend42
  br label %ifend45

ifend45:                                          ; preds = %else44
  %50 = load i64, ptr %op, align 4
  %51 = icmp eq i64 %50, 11
  br i1 %51, label %if.entry46, label %else47

if.entry46:                                       ; preds = %ifend45
  %52 = call ptr @string_from_bytes(ptr @358, i64 6)
  ret ptr %52

else47:                                           ; preds = %ifend45
  br label %ifend48

ifend48:                                          ; preds = %else47
  %53 = load i64, ptr %op, align 4
  %54 = icmp eq i64 %53, 12
  br i1 %54, label %if.entry49, label %else50

if.entry49:                                       ; preds = %ifend48
  %55 = call ptr @string_from_bytes(ptr @380, i64 6)
  ret ptr %55

else50:                                           ; preds = %ifend48
  br label %ifend51

ifend51:                                          ; preds = %else50
  %56 = load i64, ptr %op, align 4
  %57 = icmp eq i64 %56, 13
  br i1 %57, label %if.entry52, label %else53

if.entry52:                                       ; preds = %ifend51
  %58 = call ptr @string_from_bytes(ptr @373, i64 6)
  ret ptr %58

else53:                                           ; preds = %ifend51
  br label %ifend54

ifend54:                                          ; preds = %else53
  %59 = load i64, ptr %op, align 4
  %60 = icmp eq i64 %59, 14
  br i1 %60, label %if.entry55, label %else56

if.entry55:                                       ; preds = %ifend54
  %61 = call ptr @string_from_bytes(ptr @374, i64 6)
  ret ptr %61

else56:                                           ; preds = %ifend54
  br label %ifend57

ifend57:                                          ; preds = %else56
  %62 = load i64, ptr %op, align 4
  %63 = icmp eq i64 %62, 29
  br i1 %63, label %if.entry58, label %else59

if.entry58:                                       ; preds = %ifend57
  %64 = call ptr @string_from_bytes(ptr @375, i64 7)
  ret ptr %64

else59:                                           ; preds = %ifend57
  br label %ifend60

ifend60:                                          ; preds = %else59
  %65 = load i64, ptr %op, align 4
  %66 = icmp eq i64 %65, 30
  br i1 %66, label %if.entry61, label %else62

if.entry61:                                       ; preds = %ifend60
  %67 = call ptr @string_from_bytes(ptr @376, i64 7)
  ret ptr %67

else62:                                           ; preds = %ifend60
  br label %ifend63

ifend63:                                          ; preds = %else62
  %68 = load i64, ptr %op, align 4
  %69 = icmp eq i64 %68, 15
  br i1 %69, label %if.entry64, label %else65

if.entry64:                                       ; preds = %ifend63
  %70 = call ptr @string_from_bytes(ptr @363, i64 6)
  ret ptr %70

else65:                                           ; preds = %ifend63
  br label %ifend66

ifend66:                                          ; preds = %else65
  %71 = load i64, ptr %op, align 4
  %72 = icmp eq i64 %71, 16
  br i1 %72, label %if.entry67, label %else68

if.entry67:                                       ; preds = %ifend66
  %73 = call ptr @string_from_bytes(ptr @436, i64 7)
  ret ptr %73

else68:                                           ; preds = %ifend66
  br label %ifend69

ifend69:                                          ; preds = %else68
  %74 = load i64, ptr %op, align 4
  %75 = icmp eq i64 %74, 17
  br i1 %75, label %if.entry70, label %else71

if.entry70:                                       ; preds = %ifend69
  %76 = call ptr @string_from_bytes(ptr @437, i64 7)
  ret ptr %76

else71:                                           ; preds = %ifend69
  br label %ifend72

ifend72:                                          ; preds = %else71
  %77 = load i64, ptr %op, align 4
  %78 = icmp eq i64 %77, 26
  br i1 %78, label %if.entry73, label %else74

if.entry73:                                       ; preds = %ifend72
  %79 = call ptr @string_from_bytes(ptr @369, i64 8)
  ret ptr %79

else74:                                           ; preds = %ifend72
  br label %ifend75

ifend75:                                          ; preds = %else74
  %80 = load i64, ptr %op, align 4
  %81 = icmp eq i64 %80, 28
  br i1 %81, label %if.entry76, label %else77

if.entry76:                                       ; preds = %ifend75
  %82 = call ptr @string_from_bytes(ptr @370, i64 8)
  ret ptr %82

else77:                                           ; preds = %ifend75
  br label %ifend78

ifend78:                                          ; preds = %else77
  %83 = load i64, ptr %op, align 4
  %84 = icmp eq i64 %83, 18
  br i1 %84, label %if.entry79, label %else80

if.entry79:                                       ; preds = %ifend78
  %85 = call ptr @string_from_bytes(ptr @377, i64 6)
  ret ptr %85

else80:                                           ; preds = %ifend78
  br label %ifend81

ifend81:                                          ; preds = %else80
  ret ptr null
}

define ptr @dump_bin_op(i64 %0) {
  %op = alloca i64, align 8
  store i64 %0, ptr %op, align 4
  %2 = load i64, ptr %op, align 4
  %3 = icmp eq i64 %2, 1
  br i1 %3, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %4 = call ptr @string_from_bytes(ptr @439, i64 1)
  ret ptr %4

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %5 = load i64, ptr %op, align 4
  %6 = icmp eq i64 %5, 2
  br i1 %6, label %if.entry1, label %else2

if.entry1:                                        ; preds = %ifend
  %7 = call ptr @string_from_bytes(ptr @440, i64 1)
  ret ptr %7

else2:                                            ; preds = %ifend
  br label %ifend3

ifend3:                                           ; preds = %else2
  %8 = load i64, ptr %op, align 4
  %9 = icmp eq i64 %8, 3
  br i1 %9, label %if.entry4, label %else5

if.entry4:                                        ; preds = %ifend3
  %10 = call ptr @string_from_bytes(ptr @441, i64 1)
  ret ptr %10

else5:                                            ; preds = %ifend3
  br label %ifend6

ifend6:                                           ; preds = %else5
  %11 = load i64, ptr %op, align 4
  %12 = icmp eq i64 %11, 4
  br i1 %12, label %if.entry7, label %else8

if.entry7:                                        ; preds = %ifend6
  %13 = call ptr @string_from_bytes(ptr @442, i64 1)
  ret ptr %13

else8:                                            ; preds = %ifend6
  br label %ifend9

ifend9:                                           ; preds = %else8
  %14 = load i64, ptr %op, align 4
  %15 = icmp eq i64 %14, 5
  br i1 %15, label %if.entry10, label %else11

if.entry10:                                       ; preds = %ifend9
  %16 = call ptr @string_from_bytes(ptr @443, i64 2)
  ret ptr %16

else11:                                           ; preds = %ifend9
  br label %ifend12

ifend12:                                          ; preds = %else11
  %17 = load i64, ptr %op, align 4
  %18 = icmp eq i64 %17, 6
  br i1 %18, label %if.entry13, label %else14

if.entry13:                                       ; preds = %ifend12
  %19 = call ptr @string_from_bytes(ptr @66, i64 1)
  ret ptr %19

else14:                                           ; preds = %ifend12
  br label %ifend15

ifend15:                                          ; preds = %else14
  %20 = load i64, ptr %op, align 4
  %21 = icmp eq i64 %20, 7
  br i1 %21, label %if.entry16, label %else17

if.entry16:                                       ; preds = %ifend15
  %22 = call ptr @string_from_bytes(ptr @322, i64 1)
  ret ptr %22

else17:                                           ; preds = %ifend15
  br label %ifend18

ifend18:                                          ; preds = %else17
  %23 = load i64, ptr %op, align 4
  %24 = icmp eq i64 %23, 8
  br i1 %24, label %if.entry19, label %else20

if.entry19:                                       ; preds = %ifend18
  %25 = call ptr @string_from_bytes(ptr @444, i64 2)
  ret ptr %25

else20:                                           ; preds = %ifend18
  br label %ifend21

ifend21:                                          ; preds = %else20
  %26 = load i64, ptr %op, align 4
  %27 = icmp eq i64 %26, 9
  br i1 %27, label %if.entry22, label %else23

if.entry22:                                       ; preds = %ifend21
  %28 = call ptr @string_from_bytes(ptr @321, i64 1)
  ret ptr %28

else23:                                           ; preds = %ifend21
  br label %ifend24

ifend24:                                          ; preds = %else23
  %29 = load i64, ptr %op, align 4
  %30 = icmp eq i64 %29, 10
  br i1 %30, label %if.entry25, label %else26

if.entry25:                                       ; preds = %ifend24
  %31 = call ptr @string_from_bytes(ptr @445, i64 2)
  ret ptr %31

else26:                                           ; preds = %ifend24
  br label %ifend27

ifend27:                                          ; preds = %else26
  %32 = load i64, ptr %op, align 4
  %33 = icmp eq i64 %32, 11
  br i1 %33, label %if.entry28, label %else29

if.entry28:                                       ; preds = %ifend27
  %34 = call ptr @string_from_bytes(ptr @446, i64 2)
  ret ptr %34

else29:                                           ; preds = %ifend27
  br label %ifend30

ifend30:                                          ; preds = %else29
  %35 = load i64, ptr %op, align 4
  %36 = icmp eq i64 %35, 12
  br i1 %36, label %if.entry31, label %else32

if.entry31:                                       ; preds = %ifend30
  %37 = call ptr @string_from_bytes(ptr @447, i64 2)
  ret ptr %37

else32:                                           ; preds = %ifend30
  br label %ifend33

ifend33:                                          ; preds = %else32
  %38 = load i64, ptr %op, align 4
  %39 = icmp eq i64 %38, 13
  br i1 %39, label %if.entry34, label %else35

if.entry34:                                       ; preds = %ifend33
  %40 = call ptr @string_from_bytes(ptr @448, i64 2)
  ret ptr %40

else35:                                           ; preds = %ifend33
  br label %ifend36

ifend36:                                          ; preds = %else35
  %41 = load i64, ptr %op, align 4
  %42 = icmp eq i64 %41, 14
  br i1 %42, label %if.entry37, label %else38

if.entry37:                                       ; preds = %ifend36
  %43 = call ptr @string_from_bytes(ptr @449, i64 2)
  ret ptr %43

else38:                                           ; preds = %ifend36
  br label %ifend39

ifend39:                                          ; preds = %else38
  %44 = load i64, ptr %op, align 4
  %45 = icmp eq i64 %44, 15
  br i1 %45, label %if.entry40, label %else41

if.entry40:                                       ; preds = %ifend39
  %46 = call ptr @string_from_bytes(ptr @214, i64 2)
  ret ptr %46

else41:                                           ; preds = %ifend39
  br label %ifend42

ifend42:                                          ; preds = %else41
  %47 = load i64, ptr %op, align 4
  %48 = icmp eq i64 %47, 16
  br i1 %48, label %if.entry43, label %else44

if.entry43:                                       ; preds = %ifend42
  %49 = call ptr @string_from_bytes(ptr @213, i64 3)
  ret ptr %49

else44:                                           ; preds = %ifend42
  br label %ifend45

ifend45:                                          ; preds = %else44
  %50 = load i64, ptr %op, align 4
  %51 = icmp eq i64 %50, 17
  br i1 %51, label %if.entry46, label %else47

if.entry46:                                       ; preds = %ifend45
  %52 = call ptr @string_from_bytes(ptr @66, i64 1)
  ret ptr %52

else47:                                           ; preds = %ifend45
  br label %ifend48

ifend48:                                          ; preds = %else47
  %53 = load i64, ptr %op, align 4
  %54 = icmp eq i64 %53, 18
  br i1 %54, label %if.entry49, label %else50

if.entry49:                                       ; preds = %ifend48
  %55 = call ptr @string_from_bytes(ptr @230, i64 2)
  ret ptr %55

else50:                                           ; preds = %ifend48
  br label %ifend51

ifend51:                                          ; preds = %else50
  %56 = load i64, ptr %op, align 4
  %57 = icmp eq i64 %56, 19
  br i1 %57, label %if.entry52, label %else53

if.entry52:                                       ; preds = %ifend51
  %58 = call ptr @string_from_bytes(ptr @450, i64 1)
  ret ptr %58

else53:                                           ; preds = %ifend51
  br label %ifend54

ifend54:                                          ; preds = %else53
  %59 = call ptr @string_from_bytes(ptr @451, i64 2)
  ret ptr %59
}

define i1 @is_null_expression(ptr %0) {
  %exp = alloca ptr, align 8
  store ptr %0, ptr %exp, align 8
  %2 = load ptr, ptr %exp, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = icmp eq i64 %3, 5
  ret i1 %4
}

define ptr @cast_exp_to_type(ptr %0, ptr %1) {
  %val_ty = alloca ptr, align 8
  %exp = alloca ptr, align 8
  store ptr %0, ptr %exp, align 8
  store ptr %1, ptr %val_ty, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%TypeCastExpression, ptr null, i32 1) to i32))
  %4 = load ptr, ptr %exp, align 8
  %5 = load ptr, ptr %val_ty, align 8
  call void @TypeCastExpression_constructor(ptr %3, ptr %4, ptr %5)
  ret ptr %3
}

define void @TypeCastExpression_constructor(ptr %0, ptr %1, ptr %2) {
  %expr = alloca ptr, align 8
  %this = alloca ptr, align 8
  %value_type = alloca ptr, align 8
  %super = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr @Expression_constructor, ptr %super, align 8
  store ptr %1, ptr %expr, align 8
  store ptr %2, ptr %value_type, align 8
  %4 = load ptr, ptr %super, align 8
  call void %4(ptr %0, i64 11)
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %TypeCastExpression, ptr %5, i32 0, i32 4
  %6 = load ptr, ptr %expr, align 8
  store ptr %6, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %7, i32 0, i32 3
  %8 = load ptr, ptr %value_type, align 8
  store ptr %8, ptr %memberidx1, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %9, i32 0, i32 1
  %10 = load ptr, ptr %expr, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %10, i32 0, i32 1
  %11 = load i1, ptr %memberidx3, align 1
  store i1 %11, ptr %memberidx2, align 1
  ret void
}

define ptr @max_type(ptr %0, ptr %1) {
  %t1 = alloca ptr, align 8
  %t2 = alloca ptr, align 8
  store ptr %0, ptr %t1, align 8
  store ptr %1, ptr %t2, align 8
  %3 = load ptr, ptr %t1, align 8
  %memberidx = getelementptr inbounds %Type, ptr %3, i32 0, i32 0
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %t2, align 8
  %memberidx1 = getelementptr inbounds %Type, ptr %5, i32 0, i32 0
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sgt i64 %4, %6
  br i1 %7, label %true_block, label %false_block

true_block:                                       ; preds = %2
  %8 = load ptr, ptr %t1, align 8
  br label %end

false_block:                                      ; preds = %2
  %9 = load ptr, ptr %t2, align 8
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %8, %true_block ], [ %9, %false_block ]
  ret ptr %ternary
}

define i1 @is_numeric(ptr %0) {
  %val_ty = alloca ptr, align 8
  store ptr %0, ptr %val_ty, align 8
  %2 = load ptr, ptr %val_ty, align 8
  %memberidx = getelementptr inbounds %Type, ptr %2, i32 0, i32 0
  %3 = load i64, ptr %memberidx, align 4
  %4 = icmp sge i64 %3, 1
  %5 = load ptr, ptr %val_ty, align 8
  %memberidx1 = getelementptr inbounds %Type, ptr %5, i32 0, i32 0
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sle i64 %6, 9
  %8 = and i1 %4, %7
  ret i1 %8
}

define void @check_cast_lower_bits(ptr %0, ptr %1) {
  %p1 = alloca ptr, align 8
  %p2 = alloca ptr, align 8
  %ty1 = alloca ptr, align 8
  %ty2 = alloca ptr, align 8
  %inty1 = alloca ptr, align 8
  %inty2 = alloca ptr, align 8
  store ptr %0, ptr %p1, align 8
  store ptr %1, ptr %p2, align 8
  %3 = load ptr, ptr %p1, align 8
  %4 = getelementptr inbounds ptr, ptr %3, i64 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %5, i32 0, i32 3
  %6 = load ptr, ptr %memberidx, align 8
  store ptr %6, ptr %ty1, align 8
  %7 = load ptr, ptr %p2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 0
  %9 = load ptr, ptr %8, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %9, i32 0, i32 3
  %10 = load ptr, ptr %memberidx1, align 8
  store ptr %10, ptr %ty2, align 8
  %11 = load ptr, ptr %ty1, align 8
  %memberidx2 = getelementptr inbounds %Type, ptr %11, i32 0, i32 0
  %12 = load i64, ptr %memberidx2, align 4
  %13 = load ptr, ptr %ty2, align 8
  %memberidx3 = getelementptr inbounds %Type, ptr %13, i32 0, i32 0
  %14 = load i64, ptr %memberidx3, align 4
  %15 = icmp ne i64 %12, %14
  br i1 %15, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %16 = load ptr, ptr %ty1, align 8
  %17 = call i1 @is_float(ptr %16)
  %18 = load ptr, ptr %ty2, align 8
  %19 = call i1 @is_int(ptr %18)
  %20 = and i1 %17, %19
  br i1 %20, label %if.entry4, label %else5

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %ifend6
  ret void

if.entry4:                                        ; preds = %if.entry
  %21 = load ptr, ptr %p2, align 8
  %22 = getelementptr inbounds ptr, ptr %21, i64 0
  %23 = load ptr, ptr %p2, align 8
  %24 = getelementptr inbounds ptr, ptr %23, i64 0
  %25 = load ptr, ptr %24, align 8
  %26 = load ptr, ptr %ty1, align 8
  %27 = call ptr @cast_exp_to_type(ptr %25, ptr %26)
  store ptr %27, ptr %22, align 8
  br label %ifend6

else5:                                            ; preds = %if.entry
  %28 = load ptr, ptr %ty1, align 8
  %29 = call i1 @is_int(ptr %28)
  %30 = load ptr, ptr %ty2, align 8
  %31 = call i1 @is_float(ptr %30)
  %32 = and i1 %29, %31
  br i1 %32, label %if.entry7, label %else8

ifend6:                                           ; preds = %ifend9, %if.entry4
  br label %ifend

if.entry7:                                        ; preds = %else5
  %33 = load ptr, ptr %p1, align 8
  %34 = getelementptr inbounds ptr, ptr %33, i64 0
  %35 = load ptr, ptr %p1, align 8
  %36 = getelementptr inbounds ptr, ptr %35, i64 0
  %37 = load ptr, ptr %36, align 8
  %38 = load ptr, ptr %ty2, align 8
  %39 = call ptr @cast_exp_to_type(ptr %37, ptr %38)
  store ptr %39, ptr %34, align 8
  br label %ifend9

else8:                                            ; preds = %else5
  %40 = load ptr, ptr %ty1, align 8
  %41 = load ptr, ptr %ty2, align 8
  %42 = call ptr @max_type(ptr %40, ptr %41)
  store ptr %42, ptr %ty1, align 8
  %43 = load ptr, ptr %ty1, align 8
  %44 = call i1 @is_int(ptr %43)
  %45 = load ptr, ptr %ty2, align 8
  %46 = call i1 @is_int(ptr %45)
  %47 = and i1 %44, %46
  br i1 %47, label %if.entry10, label %else11

ifend9:                                           ; preds = %ifend12, %if.entry7
  br label %ifend6

if.entry10:                                       ; preds = %else8
  %48 = load ptr, ptr %ty1, align 8
  store ptr %48, ptr %inty1, align 8
  %49 = load ptr, ptr %ty2, align 8
  store ptr %49, ptr %inty2, align 8
  %50 = load ptr, ptr %inty1, align 8
  %memberidx13 = getelementptr inbounds %IntType, ptr %50, i32 0, i32 1
  %51 = load i1, ptr %memberidx13, align 1
  %52 = load ptr, ptr %inty2, align 8
  %memberidx14 = getelementptr inbounds %IntType, ptr %52, i32 0, i32 1
  %53 = load i1, ptr %memberidx14, align 1
  %54 = xor i1 %51, %53
  br i1 %54, label %if.entry15, label %else16

else11:                                           ; preds = %else8
  br label %ifend12

ifend12:                                          ; preds = %else11, %ifend17
  %55 = load ptr, ptr %p1, align 8
  %56 = getelementptr inbounds ptr, ptr %55, i64 0
  %57 = load ptr, ptr %p1, align 8
  %58 = getelementptr inbounds ptr, ptr %57, i64 0
  %59 = load ptr, ptr %58, align 8
  %60 = load ptr, ptr %ty1, align 8
  %61 = call ptr @cast_exp_to_type(ptr %59, ptr %60)
  store ptr %61, ptr %56, align 8
  %62 = load ptr, ptr %p2, align 8
  %63 = getelementptr inbounds ptr, ptr %62, i64 0
  %64 = load ptr, ptr %p2, align 8
  %65 = getelementptr inbounds ptr, ptr %64, i64 0
  %66 = load ptr, ptr %65, align 8
  %67 = load ptr, ptr %ty1, align 8
  %68 = call ptr @cast_exp_to_type(ptr %66, ptr %67)
  store ptr %68, ptr %63, align 8
  br label %ifend9

if.entry15:                                       ; preds = %if.entry10
  %69 = load ptr, ptr %inty1, align 8
  %memberidx18 = getelementptr inbounds %IntType, ptr %69, i32 0, i32 1
  %70 = load ptr, ptr %inty2, align 8
  %memberidx19 = getelementptr inbounds %IntType, ptr %70, i32 0, i32 1
  store i1 true, ptr %memberidx19, align 1
  store i1 true, ptr %memberidx18, align 1
  br label %ifend17

else16:                                           ; preds = %if.entry10
  br label %ifend17

ifend17:                                          ; preds = %else16, %if.entry15
  br label %ifend12
}

define i1 @is_float(ptr %0) {
  %val_ty = alloca ptr, align 8
  store ptr %0, ptr %val_ty, align 8
  %2 = load ptr, ptr %val_ty, align 8
  %memberidx = getelementptr inbounds %Type, ptr %2, i32 0, i32 0
  %3 = load i64, ptr %memberidx, align 4
  %4 = icmp sge i64 %3, 8
  %5 = load ptr, ptr %val_ty, align 8
  %memberidx1 = getelementptr inbounds %Type, ptr %5, i32 0, i32 0
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sle i64 %6, 9
  %8 = and i1 %4, %7
  ret i1 %8
}

define i1 @is_bool(ptr %0) {
  %val_ty = alloca ptr, align 8
  store ptr %0, ptr %val_ty, align 8
  %2 = load ptr, ptr %val_ty, align 8
  %memberidx = getelementptr inbounds %Type, ptr %2, i32 0, i32 0
  %3 = load i64, ptr %memberidx, align 4
  %4 = icmp eq i64 %3, 0
  ret i1 %4
}

define i1 @is_pointer(ptr %0) {
  %val_ty = alloca ptr, align 8
  store ptr %0, ptr %val_ty, align 8
  %2 = load ptr, ptr %val_ty, align 8
  %memberidx = getelementptr inbounds %Type, ptr %2, i32 0, i32 0
  %3 = load i64, ptr %memberidx, align 4
  %4 = icmp eq i64 %3, 13
  ret i1 %4
}

define ptr @dump_unary_op(i64 %0) {
  %op = alloca i64, align 8
  store i64 %0, ptr %op, align 4
  %2 = load i64, ptr %op, align 4
  %3 = icmp eq i64 %2, 2
  br i1 %3, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %4 = call ptr @string_from_bytes(ptr @457, i64 7)
  ret ptr %4

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %5 = load i64, ptr %op, align 4
  %6 = icmp eq i64 %5, 3
  br i1 %6, label %if.entry1, label %else2

if.entry1:                                        ; preds = %ifend
  %7 = call ptr @string_from_bytes(ptr @458, i64 7)
  ret ptr %7

else2:                                            ; preds = %ifend
  br label %ifend3

ifend3:                                           ; preds = %else2
  %8 = load i64, ptr %op, align 4
  %9 = icmp eq i64 %8, 4
  br i1 %9, label %if.entry4, label %else5

if.entry4:                                        ; preds = %ifend3
  %10 = call ptr @string_from_bytes(ptr @459, i64 8)
  ret ptr %10

else5:                                            ; preds = %ifend3
  br label %ifend6

ifend6:                                           ; preds = %else5
  %11 = load i64, ptr %op, align 4
  %12 = icmp eq i64 %11, 5
  br i1 %12, label %if.entry7, label %else8

if.entry7:                                        ; preds = %ifend6
  %13 = call ptr @string_from_bytes(ptr @460, i64 8)
  ret ptr %13

else8:                                            ; preds = %ifend6
  br label %ifend9

ifend9:                                           ; preds = %else8
  %14 = load i64, ptr %op, align 4
  %15 = icmp eq i64 %14, 6
  br i1 %15, label %if.entry10, label %else11

if.entry10:                                       ; preds = %ifend9
  %16 = call ptr @string_from_bytes(ptr @440, i64 1)
  ret ptr %16

else11:                                           ; preds = %ifend9
  br label %ifend12

ifend12:                                          ; preds = %else11
  %17 = load i64, ptr %op, align 4
  %18 = icmp eq i64 %17, 7
  br i1 %18, label %if.entry13, label %else14

if.entry13:                                       ; preds = %ifend12
  %19 = call ptr @string_from_bytes(ptr @461, i64 1)
  ret ptr %19

else14:                                           ; preds = %ifend12
  br label %ifend15

ifend15:                                          ; preds = %else14
  %20 = call ptr @string_from_bytes(ptr @462, i64 1)
  ret ptr %20
}

define i1 @is_buitin(ptr %0, ptr %1, ptr %2) {
  %name = alloca ptr, align 8
  %program = alloca ptr, align 8
  %ty = alloca ptr, align 8
  %class_obj = alloca ptr, align 8
  store ptr %0, ptr %program, align 8
  store ptr %1, ptr %ty, align 8
  store ptr %2, ptr %name, align 8
  %4 = load ptr, ptr %ty, align 8
  %5 = call i1 @is_object(ptr %4)
  %6 = xor i1 %5, true
  br i1 %6, label %if.entry, label %else

if.entry:                                         ; preds = %3
  ret i1 false

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %7 = load ptr, ptr %program, align 8
  %8 = load ptr, ptr %ty, align 8
  %9 = call ptr @get_class_from_type(ptr %7, ptr %8)
  store ptr %9, ptr %class_obj, align 8
  %10 = load ptr, ptr %class_obj, align 8
  %memberidx = getelementptr inbounds %Class, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx, align 8
  %12 = load ptr, ptr %name, align 8
  %13 = call i1 @string___eq__(ptr %11, ptr %12)
  %14 = load ptr, ptr %class_obj, align 8
  %memberidx1 = getelementptr inbounds %Class, ptr %14, i32 0, i32 0
  %15 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %TypeId, ptr %15, i32 0, i32 0
  %16 = load i64, ptr %memberidx2, align 4
  %17 = icmp eq i64 %16, 1
  %18 = and i1 %13, %17
  ret i1 %18
}

define i1 @is_u8_ptr(ptr %0) {
  %val_ty = alloca ptr, align 8
  %pointee_type = alloca ptr, align 8
  store ptr %0, ptr %val_ty, align 8
  %2 = load ptr, ptr %val_ty, align 8
  %memberidx = getelementptr inbounds %Type, ptr %2, i32 0, i32 0
  %3 = load i64, ptr %memberidx, align 4
  %4 = icmp eq i64 %3, 13
  br i1 %4, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %5 = load ptr, ptr %val_ty, align 8
  %memberidx1 = getelementptr inbounds %PointerType, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  store ptr %6, ptr %pointee_type, align 8
  %7 = load ptr, ptr %pointee_type, align 8
  %8 = call i1 @is_int(ptr %7)
  br i1 %8, label %if.entry2, label %else3

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else, %ifend4
  ret i1 false

if.entry2:                                        ; preds = %if.entry
  %9 = load ptr, ptr %pointee_type, align 8
  %memberidx5 = getelementptr inbounds %Type, ptr %9, i32 0, i32 0
  %10 = load i64, ptr %memberidx5, align 4
  %11 = icmp eq i64 %10, 2
  %12 = load ptr, ptr %pointee_type, align 8
  %memberidx6 = getelementptr inbounds %IntType, ptr %12, i32 0, i32 1
  %13 = load i1, ptr %memberidx6, align 1
  %14 = xor i1 %13, true
  %15 = and i1 %11, %14
  ret i1 %15

else3:                                            ; preds = %if.entry
  br label %ifend4

ifend4:                                           ; preds = %else3
  br label %ifend
}

define ptr @CodeGen_neg_int(ptr %0, ptr %1) {
  %val = alloca ptr, align 8
  %builder = alloca ptr, align 8
  store ptr %0, ptr %builder, align 8
  store ptr %1, ptr %val, align 8
  %3 = load ptr, ptr %val, align 8
  %4 = call i1 @LLVMIsConstant(ptr %3)
  br i1 %4, label %true_block, label %false_block

true_block:                                       ; preds = %2
  %5 = load ptr, ptr %val, align 8
  %6 = call ptr @LLVMConstNeg(ptr %5)
  br label %end

false_block:                                      ; preds = %2
  %7 = load ptr, ptr %builder, align 8
  %8 = load ptr, ptr %val, align 8
  %9 = call ptr @LLVMBuildNeg(ptr %7, ptr %8, ptr @315)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %6, %true_block ], [ %9, %false_block ]
  ret ptr %ternary
}

define ptr @CodeGen_codegen(ptr %0) {
  %program = alloca ptr, align 8
  %module = alloca ptr, align 8
  %codegen = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %enum_ = alloca ptr, align 8
  %class_ = alloca ptr, align 8
  %tmp_it1 = alloca ptr, align 8
  %tmp_it2 = alloca ptr, align 8
  %const_ = alloca ptr, align 8
  %var_ = alloca ptr, align 8
  %tmp_it3 = alloca ptr, align 8
  %class_4 = alloca ptr, align 8
  %tmp_it5 = alloca ptr, align 8
  %tmp_it6 = alloca ptr, align 8
  %func_ = alloca ptr, align 8
  store ptr %0, ptr %program, align 8
  %2 = load ptr, ptr %program, align 8
  %memberidx = getelementptr inbounds %Program, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr @Array_Module____getitem__(ptr %3, i64 2)
  store ptr %4, ptr %module, align 8
  %5 = alloca %CodeGen, align 8
  %6 = load ptr, ptr %program, align 8
  %7 = load ptr, ptr %module, align 8
  %memberidx7 = getelementptr inbounds %Module, ptr %7, i32 0, i32 0
  %8 = load ptr, ptr %memberidx7, align 8
  call void @CodeGen_constructor(ptr %5, ptr %6, ptr %8)
  store ptr %5, ptr %codegen, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  %9 = load ptr, ptr %module, align 8
  %memberidx8 = getelementptr inbounds %Module, ptr %9, i32 0, i32 6
  %10 = load ptr, ptr %memberidx8, align 8
  %11 = call ptr @Array_Enum____iter__(ptr %10)
  store ptr %11, ptr %tmp_it, align 8
  %12 = load ptr, ptr %tmp_it, align 8
  %13 = call ptr @ArrayIterator_Enum__next(ptr %12)
  store ptr %13, ptr %enum_, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %14 = load ptr, ptr %tmp_it, align 8
  %memberidx9 = getelementptr inbounds %ArrayIterator_Enum_, ptr %14, i32 0, i32 0
  %15 = load i1, ptr %memberidx9, align 1
  %16 = xor i1 %15, true
  br i1 %16, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load ptr, ptr %codegen, align 8
  %18 = load ptr, ptr %enum_, align 8
  call void @CodeGen_declare_enum(ptr %17, ptr %18)
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %19 = load ptr, ptr %tmp_it, align 8
  %20 = call ptr @ArrayIterator_Enum__next(ptr %19)
  store ptr %20, ptr %enum_, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %21 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %21)
  br label %for.entry10

for.entry10:                                      ; preds = %for.end
  %22 = load ptr, ptr %module, align 8
  %memberidx11 = getelementptr inbounds %Module, ptr %22, i32 0, i32 3
  %23 = load ptr, ptr %memberidx11, align 8
  %24 = call ptr @Array_Class____iter__(ptr %23)
  store ptr %24, ptr %tmp_it1, align 8
  %25 = load ptr, ptr %tmp_it1, align 8
  %26 = call ptr @ArrayIterator_Class__next(ptr %25)
  store ptr %26, ptr %class_, align 8
  br label %for.cond12

for.cond12:                                       ; preds = %for.incr14, %for.entry10
  %27 = load ptr, ptr %tmp_it1, align 8
  %memberidx16 = getelementptr inbounds %ArrayIterator_Class_, ptr %27, i32 0, i32 0
  %28 = load i1, ptr %memberidx16, align 1
  %29 = xor i1 %28, true
  br i1 %29, label %for.body13, label %for.end15

for.body13:                                       ; preds = %for.cond12
  %30 = load ptr, ptr %codegen, align 8
  %31 = load ptr, ptr %class_, align 8
  call void @CodeGen_declare_class(ptr %30, ptr %31)
  br label %for.incr14

for.incr14:                                       ; preds = %for.body13
  %32 = load ptr, ptr %tmp_it1, align 8
  %33 = call ptr @ArrayIterator_Class__next(ptr %32)
  store ptr %33, ptr %class_, align 8
  br label %for.cond12

for.end15:                                        ; preds = %for.cond12
  %34 = load ptr, ptr %tmp_it1, align 8
  tail call void @free(ptr %34)
  br label %for.entry17

for.entry17:                                      ; preds = %for.end15
  %35 = load ptr, ptr %module, align 8
  %memberidx18 = getelementptr inbounds %Module, ptr %35, i32 0, i32 8
  %36 = load ptr, ptr %memberidx18, align 8
  %37 = call ptr @Array_ConstDeclaration____iter__(ptr %36)
  store ptr %37, ptr %tmp_it2, align 8
  %38 = load ptr, ptr %tmp_it2, align 8
  %39 = call ptr @ArrayIterator_ConstDeclaration__next(ptr %38)
  store ptr %39, ptr %const_, align 8
  br label %for.cond19

for.cond19:                                       ; preds = %for.incr21, %for.entry17
  %40 = load ptr, ptr %tmp_it2, align 8
  %memberidx23 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %40, i32 0, i32 0
  %41 = load i1, ptr %memberidx23, align 1
  %42 = xor i1 %41, true
  br i1 %42, label %for.body20, label %for.end22

for.body20:                                       ; preds = %for.cond19
  %43 = load ptr, ptr %codegen, align 8
  %44 = load ptr, ptr %const_, align 8
  call void @CodeGen_codegen_const_declaration(ptr %43, ptr null, ptr %44)
  br label %for.incr21

for.incr21:                                       ; preds = %for.body20
  %45 = load ptr, ptr %tmp_it2, align 8
  %46 = call ptr @ArrayIterator_ConstDeclaration__next(ptr %45)
  store ptr %46, ptr %const_, align 8
  br label %for.cond19

for.end22:                                        ; preds = %for.cond19
  %47 = load ptr, ptr %tmp_it2, align 8
  tail call void @free(ptr %47)
  br label %for.entry24

for.entry24:                                      ; preds = %for.end22
  %48 = load ptr, ptr %module, align 8
  %memberidx25 = getelementptr inbounds %Module, ptr %48, i32 0, i32 9
  %49 = load ptr, ptr %memberidx25, align 8
  %50 = call ptr @Array_VarDeclaration____iter__(ptr %49)
  store ptr %50, ptr %tmp_it3, align 8
  %51 = load ptr, ptr %tmp_it3, align 8
  %52 = call ptr @ArrayIterator_VarDeclaration__next(ptr %51)
  store ptr %52, ptr %var_, align 8
  br label %for.cond26

for.cond26:                                       ; preds = %for.incr28, %for.entry24
  %53 = load ptr, ptr %tmp_it3, align 8
  %memberidx30 = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %53, i32 0, i32 0
  %54 = load i1, ptr %memberidx30, align 1
  %55 = xor i1 %54, true
  br i1 %55, label %for.body27, label %for.end29

for.body27:                                       ; preds = %for.cond26
  %56 = load ptr, ptr %codegen, align 8
  %57 = load ptr, ptr %var_, align 8
  call void @CodeGen_codegen_var_declaration(ptr %56, ptr null, ptr %57)
  br label %for.incr28

for.incr28:                                       ; preds = %for.body27
  %58 = load ptr, ptr %tmp_it3, align 8
  %59 = call ptr @ArrayIterator_VarDeclaration__next(ptr %58)
  store ptr %59, ptr %var_, align 8
  br label %for.cond26

for.end29:                                        ; preds = %for.cond26
  %60 = load ptr, ptr %tmp_it3, align 8
  tail call void @free(ptr %60)
  br label %for.entry31

for.entry31:                                      ; preds = %for.end29
  %61 = load ptr, ptr %module, align 8
  %memberidx32 = getelementptr inbounds %Module, ptr %61, i32 0, i32 3
  %62 = load ptr, ptr %memberidx32, align 8
  %63 = call ptr @Array_Class____iter__(ptr %62)
  store ptr %63, ptr %tmp_it5, align 8
  %64 = load ptr, ptr %tmp_it5, align 8
  %65 = call ptr @ArrayIterator_Class__next(ptr %64)
  store ptr %65, ptr %class_4, align 8
  br label %for.cond33

for.cond33:                                       ; preds = %for.incr35, %for.entry31
  %66 = load ptr, ptr %tmp_it5, align 8
  %memberidx37 = getelementptr inbounds %ArrayIterator_Class_, ptr %66, i32 0, i32 0
  %67 = load i1, ptr %memberidx37, align 1
  %68 = xor i1 %67, true
  br i1 %68, label %for.body34, label %for.end36

for.body34:                                       ; preds = %for.cond33
  %69 = load ptr, ptr %codegen, align 8
  %70 = load ptr, ptr %class_4, align 8
  call void @CodeGen_codegen_class(ptr %69, ptr %70)
  br label %for.incr35

for.incr35:                                       ; preds = %for.body34
  %71 = load ptr, ptr %tmp_it5, align 8
  %72 = call ptr @ArrayIterator_Class__next(ptr %71)
  store ptr %72, ptr %class_4, align 8
  br label %for.cond33

for.end36:                                        ; preds = %for.cond33
  %73 = load ptr, ptr %tmp_it5, align 8
  tail call void @free(ptr %73)
  br label %for.entry38

for.entry38:                                      ; preds = %for.end36
  %74 = load ptr, ptr %module, align 8
  %memberidx39 = getelementptr inbounds %Module, ptr %74, i32 0, i32 4
  %75 = load ptr, ptr %memberidx39, align 8
  %76 = call ptr @Array_Function____iter__(ptr %75)
  store ptr %76, ptr %tmp_it6, align 8
  %77 = load ptr, ptr %tmp_it6, align 8
  %78 = call ptr @ArrayIterator_Function__next(ptr %77)
  store ptr %78, ptr %func_, align 8
  br label %for.cond40

for.cond40:                                       ; preds = %for.incr42, %for.entry38
  %79 = load ptr, ptr %tmp_it6, align 8
  %memberidx44 = getelementptr inbounds %ArrayIterator_Function_, ptr %79, i32 0, i32 0
  %80 = load i1, ptr %memberidx44, align 1
  %81 = xor i1 %80, true
  br i1 %81, label %for.body41, label %for.end43

for.body41:                                       ; preds = %for.cond40
  %82 = load ptr, ptr %codegen, align 8
  %83 = load ptr, ptr %func_, align 8
  call void @CodeGen_codegen_function(ptr %82, ptr %83)
  br label %for.incr42

for.incr42:                                       ; preds = %for.body41
  %84 = load ptr, ptr %tmp_it6, align 8
  %85 = call ptr @ArrayIterator_Function__next(ptr %84)
  store ptr %85, ptr %func_, align 8
  br label %for.cond40

for.end43:                                        ; preds = %for.cond40
  %86 = load ptr, ptr %tmp_it6, align 8
  tail call void @free(ptr %86)
  %87 = load ptr, ptr %codegen, align 8
  call void @CodeGen_destroy(ptr %87)
  %88 = load ptr, ptr %program, align 8
  call void @Program___del__(ptr %88)
  tail call void @free(ptr %88)
  %89 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%GeneratedModule, ptr null, i32 1) to i32))
  %90 = load ptr, ptr %codegen, align 8
  %memberidx45 = getelementptr inbounds %CodeGen, ptr %90, i32 0, i32 0
  %91 = load ptr, ptr %memberidx45, align 8
  call void @GeneratedModule_constructor(ptr %89, ptr %91)
  ret ptr %89
}

define void @CodeGen_add_var(ptr %0, ptr %1, ptr %2) {
  %var_id = alloca ptr, align 8
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %var_id, align 8
  store ptr %2, ptr %value, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %4, i32 0, i32 6
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load ptr, ptr %var_id, align 8
  %7 = call ptr @create_var_key(ptr %6)
  %8 = load ptr, ptr %value, align 8
  call void @Map_string_LLVMValueRef____setitem__(ptr %5, ptr %7, ptr %8)
  ret void
}

define ptr @CodeGen_get_var_from_varid(ptr %0, ptr %1) {
  %var_id = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %var_id, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %3, i32 0, i32 6
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %var_id, align 8
  %6 = call ptr @create_var_key(ptr %5)
  %7 = call ptr @Map_string_LLVMValueRef____getitem__(ptr %4, ptr %6)
  ret ptr %7
}

define ptr @CodeGen_codegen_index_exp(ptr %0, ptr %1, ptr %2) {
  %index_exp = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %index_exp, align 8
  %4 = load ptr, ptr %this, align 8
  %5 = load ptr, ptr %builder, align 8
  %6 = load ptr, ptr %index_exp, align 8
  %7 = call ptr @CodeGen_get_expr_mem(ptr %4, ptr %5, ptr %6)
  store ptr %7, ptr %ptr, align 8
  %8 = load ptr, ptr %builder, align 8
  %9 = load ptr, ptr %this, align 8
  %10 = load ptr, ptr %index_exp, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %10, i32 0, i32 3
  %11 = load ptr, ptr %memberidx, align 8
  %12 = call ptr @CodeGen_codegen_type(ptr %9, ptr %11, i1 true)
  %13 = load ptr, ptr %ptr, align 8
  %14 = call ptr @LLVMBuildLoad2(ptr %8, ptr %12, ptr %13, ptr @315)
  ret ptr %14
}

define ptr @CodeGen_codegen_atol_call(ptr %0, ptr %1, ptr %2) {
  %this = alloca ptr, align 8
  %arg = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %args = alloca [1 x ptr], align 8
  %atol = alloca ptr, align 8
  %arg_types = alloca [1 x ptr], align 8
  %big_int_ty = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %arg, align 8
  %4 = getelementptr inbounds [1 x ptr], ptr %arg_types, i64 0, i64 0
  %5 = call ptr @LLVMInt8Type()
  %6 = call ptr @LLVMPointerType(ptr %5, i64 0)
  store ptr %6, ptr %4, align 8
  %7 = getelementptr inbounds ptr, ptr %4, i64 1
  %8 = getelementptr inbounds [1 x ptr], ptr %args, i64 0, i64 0
  %9 = load ptr, ptr %arg, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr inbounds ptr, ptr %8, i64 1
  %11 = call ptr @LLVMInt64Type()
  store ptr %11, ptr %big_int_ty, align 8
  %12 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %12, i32 0, i32 0
  %13 = load ptr, ptr %memberidx, align 8
  %14 = call ptr @string_from_bytes(ptr @526, i64 4)
  %15 = getelementptr inbounds [1 x ptr], ptr %arg_types, i64 0, i64 0
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds [1 x ptr], ptr %arg_types, i64 0, i64 0
  %18 = load ptr, ptr %big_int_ty, align 8
  %19 = call ptr @get_intrinsic(ptr %13, ptr %14, ptr %17, i64 1, ptr %18, i1 false)
  store ptr %19, ptr %atol, align 8
  %20 = load ptr, ptr %builder, align 8
  %21 = load ptr, ptr %atol, align 8
  %memberidx1 = getelementptr inbounds %IntrinsicResult, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx1, align 8
  %23 = load ptr, ptr %atol, align 8
  %memberidx2 = getelementptr inbounds %IntrinsicResult, ptr %23, i32 0, i32 0
  %24 = load ptr, ptr %memberidx2, align 8
  %25 = getelementptr inbounds [1 x ptr], ptr %args, i64 0, i64 0
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr inbounds [1 x ptr], ptr %args, i64 0, i64 0
  %28 = call ptr @LLVMBuildCall2(ptr %20, ptr %22, ptr %24, ptr %27, i64 1, ptr @315)
  ret ptr %28
}

define ptr @CodeGen_store_expr_to_mem(ptr %0, ptr %1, ptr %2, ptr %3) {
  %ptr = alloca ptr, align 8
  %expr = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %value = alloca ptr, align 8
  %value_ty = alloca ptr, align 8
  %arr_expr = alloca ptr, align 8
  %args = alloca [2 x ptr], align 8
  %array_type = alloca ptr, align 8
  %zero = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %ptr, align 8
  store ptr %3, ptr %expr, align 8
  store ptr null, ptr %value, align 8
  %5 = load ptr, ptr %expr, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx, align 4
  %7 = icmp eq i64 %6, 6
  %8 = load ptr, ptr %expr, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %8, i32 0, i32 1
  %9 = load i1, ptr %memberidx1, align 1
  %10 = xor i1 %9, true
  %11 = and i1 %7, %10
  br i1 %11, label %if.entry, label %else

if.entry:                                         ; preds = %4
  %12 = load ptr, ptr %expr, align 8
  store ptr %12, ptr %arr_expr, align 8
  %13 = load ptr, ptr %expr, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %13, i32 0, i32 3
  %14 = load ptr, ptr %memberidx2, align 8
  store ptr %14, ptr %value_ty, align 8
  %15 = load ptr, ptr %value_ty, align 8
  %memberidx3 = getelementptr inbounds %Type, ptr %15, i32 0, i32 0
  %16 = load i64, ptr %memberidx3, align 4
  %17 = icmp ne i64 %16, 20
  br i1 %17, label %if.entry4, label %else5

else:                                             ; preds = %4
  %18 = load ptr, ptr %expr, align 8
  %memberidx7 = getelementptr inbounds %Expression, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = icmp eq i64 %19, 7
  %21 = load ptr, ptr %expr, align 8
  %memberidx8 = getelementptr inbounds %Expression, ptr %21, i32 0, i32 1
  %22 = load i1, ptr %memberidx8, align 1
  %23 = xor i1 %22, true
  %24 = and i1 %20, %23
  br i1 %24, label %if.entry9, label %else10

ifend:                                            ; preds = %ifend11, %ifend6
  %25 = load ptr, ptr %builder, align 8
  %26 = load ptr, ptr %value, align 8
  %27 = load ptr, ptr %ptr, align 8
  %28 = call ptr @LLVMBuildStore(ptr %25, ptr %26, ptr %27)
  %29 = load ptr, ptr %value, align 8
  ret ptr %29

if.entry4:                                        ; preds = %if.entry
  %30 = load ptr, ptr %this, align 8
  %31 = call ptr @CodeGen_createLLVMInt(ptr %30, i64 0)
  store ptr %31, ptr %zero, align 8
  %32 = getelementptr inbounds [2 x ptr], ptr %args, i64 0, i64 0
  %33 = load ptr, ptr %zero, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr inbounds ptr, ptr %32, i64 1
  %35 = load ptr, ptr %zero, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr inbounds ptr, ptr %34, i64 1
  %37 = load ptr, ptr %this, align 8
  %38 = load ptr, ptr %value_ty, align 8
  %39 = call ptr @CodeGen_codegen_type(ptr %37, ptr %38, i1 true)
  store ptr %39, ptr %array_type, align 8
  %40 = load ptr, ptr %builder, align 8
  %41 = load ptr, ptr %array_type, align 8
  %42 = load ptr, ptr %ptr, align 8
  %43 = getelementptr inbounds [2 x ptr], ptr %args, i64 0, i64 0
  %44 = load ptr, ptr %43, align 8
  %45 = getelementptr inbounds [2 x ptr], ptr %args, i64 0, i64 0
  %46 = call ptr @LLVMBuildInBoundsGEP2(ptr %40, ptr %41, ptr %42, ptr %45, i64 2, ptr @315)
  store ptr %46, ptr %ptr, align 8
  %47 = load ptr, ptr %this, align 8
  %48 = load ptr, ptr %builder, align 8
  %49 = load ptr, ptr %ptr, align 8
  %50 = load ptr, ptr %arr_expr, align 8
  %51 = call ptr @CodeGen_store_array_elements(ptr %47, ptr %48, ptr %49, ptr %50)
  ret ptr %51

else5:                                            ; preds = %if.entry
  br label %ifend6

ifend6:                                           ; preds = %else5
  %52 = load ptr, ptr %this, align 8
  %53 = load ptr, ptr %builder, align 8
  %54 = load ptr, ptr %value_ty, align 8
  %55 = load ptr, ptr %arr_expr, align 8
  %56 = call ptr @CodeGen_codegen_builtin_array(ptr %52, ptr %53, ptr %54, ptr %55)
  store ptr %56, ptr %value, align 8
  br label %ifend

if.entry9:                                        ; preds = %else
  %57 = load ptr, ptr %this, align 8
  %58 = load ptr, ptr %builder, align 8
  %59 = load ptr, ptr %ptr, align 8
  %60 = load ptr, ptr %expr, align 8
  %61 = call ptr @CodeGen_store_tuple_elements(ptr %57, ptr %58, ptr %59, ptr %60)
  ret ptr %61

else10:                                           ; preds = %else
  %62 = load ptr, ptr %this, align 8
  %63 = load ptr, ptr %builder, align 8
  %64 = load ptr, ptr %expr, align 8
  %65 = call ptr @CodeGen_codegen_expression(ptr %62, ptr %63, ptr %64)
  store ptr %65, ptr %value, align 8
  br label %ifend11

ifend11:                                          ; preds = %else10
  br label %ifend
}

define ptr @CodeGen_codegen_array_exp(ptr %0, ptr %1, ptr %2) {
  %array_exp = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %elem_ty = alloca ptr, align 8
  %elems_buffer = alloca ptr, align 8
  %idx = alloca i64, align 8
  %value = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %array_exp, align 8
  %4 = load ptr, ptr %array_exp, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %4, i32 0, i32 3
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Type, ptr %5, i32 0, i32 0
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp eq i64 %6, 20
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %8 = load ptr, ptr %this, align 8
  %9 = load ptr, ptr %builder, align 8
  %10 = load ptr, ptr %array_exp, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %10, i32 0, i32 3
  %11 = load ptr, ptr %memberidx2, align 8
  %12 = load ptr, ptr %array_exp, align 8
  %13 = call ptr @CodeGen_codegen_builtin_array(ptr %8, ptr %9, ptr %11, ptr %12)
  ret ptr %13

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %14 = load ptr, ptr %array_exp, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %14, i32 0, i32 1
  %15 = load i1, ptr %memberidx3, align 1
  %16 = xor i1 %15, true
  br i1 %16, label %if.entry4, label %else5

if.entry4:                                        ; preds = %ifend
  %17 = call ptr @string_from_bytes(ptr @566, i64 54)
  call void @panic(ptr %17)
  br label %ifend6

else5:                                            ; preds = %ifend
  br label %ifend6

ifend6:                                           ; preds = %else5, %if.entry4
  %18 = load ptr, ptr %this, align 8
  %19 = load ptr, ptr %array_exp, align 8
  %memberidx7 = getelementptr inbounds %Expression, ptr %19, i32 0, i32 3
  %20 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %ArrayType, ptr %20, i32 0, i32 1
  %21 = load ptr, ptr %memberidx8, align 8
  %22 = call ptr @CodeGen_codegen_type(ptr %18, ptr %21, i1 true)
  store ptr %22, ptr %elem_ty, align 8
  %23 = load ptr, ptr %array_exp, align 8
  %memberidx9 = getelementptr inbounds %ArrayExpression, ptr %23, i32 0, i32 4
  %24 = load ptr, ptr %memberidx9, align 8
  %memberidx10 = getelementptr inbounds %Array_Expression_, ptr %24, i32 0, i32 2
  %25 = load i64, ptr %memberidx10, align 4
  %26 = alloca ptr, i64 %25, align 8
  store ptr %26, ptr %elems_buffer, align 8
  store i64 0, ptr %idx, align 4
  br label %for.entry

for.entry:                                        ; preds = %ifend6
  %27 = load ptr, ptr %array_exp, align 8
  %memberidx11 = getelementptr inbounds %ArrayExpression, ptr %27, i32 0, i32 4
  %28 = load ptr, ptr %memberidx11, align 8
  %29 = call ptr @Array_Expression____iter__(ptr %28)
  store ptr %29, ptr %tmp_it, align 8
  %30 = load ptr, ptr %tmp_it, align 8
  %31 = call ptr @ArrayIterator_Expression__next(ptr %30)
  store ptr %31, ptr %value, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %32 = load ptr, ptr %tmp_it, align 8
  %memberidx12 = getelementptr inbounds %ArrayIterator_Expression_, ptr %32, i32 0, i32 0
  %33 = load i1, ptr %memberidx12, align 1
  %34 = xor i1 %33, true
  br i1 %34, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %35 = load i64, ptr %idx, align 4
  %36 = add nsw i64 %35, 1
  store i64 %36, ptr %idx, align 4
  %37 = load ptr, ptr %elems_buffer, align 8
  %38 = getelementptr inbounds ptr, ptr %37, i64 %35
  %39 = load ptr, ptr %this, align 8
  %40 = load ptr, ptr %builder, align 8
  %41 = load ptr, ptr %value, align 8
  %42 = call ptr @CodeGen_codegen_expression(ptr %39, ptr %40, ptr %41)
  store ptr %42, ptr %38, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %43 = load ptr, ptr %tmp_it, align 8
  %44 = call ptr @ArrayIterator_Expression__next(ptr %43)
  store ptr %44, ptr %value, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %45 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %45)
  %46 = load ptr, ptr %elem_ty, align 8
  %47 = load ptr, ptr %elems_buffer, align 8
  %48 = load ptr, ptr %array_exp, align 8
  %memberidx13 = getelementptr inbounds %ArrayExpression, ptr %48, i32 0, i32 4
  %49 = load ptr, ptr %memberidx13, align 8
  %memberidx14 = getelementptr inbounds %Array_Expression_, ptr %49, i32 0, i32 2
  %50 = load i64, ptr %memberidx14, align 4
  %51 = call ptr @LLVMConstArray(ptr %46, ptr %47, i64 %50)
  ret ptr %51
}

define void @CodeGen_codegen_var_declaration(ptr %0, ptr %1, ptr %2) {
  %var_decl = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %var = alloca ptr, align 8
  %var_id = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %expression = alloca ptr, align 8
  %name = alloca ptr, align 8
  %ty = alloca ptr, align 8
  %expression_val_type = alloca ptr, align 8
  %value = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %var_decl, align 8
  %4 = load ptr, ptr %var_decl, align 8
  %memberidx = getelementptr inbounds %VarDeclaration, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx, align 8
  store ptr %5, ptr %var_id, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %6, i32 0, i32 4
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = load ptr, ptr %var_id, align 8
  %9 = call ptr @get_var(ptr %7, ptr %8)
  store ptr %9, ptr %var, align 8
  %10 = load ptr, ptr %var, align 8
  %memberidx2 = getelementptr inbounds %Var, ptr %10, i32 0, i32 2
  %11 = load ptr, ptr %memberidx2, align 8
  store ptr %11, ptr %expression, align 8
  store ptr null, ptr %ptr, align 8
  %12 = load ptr, ptr %var_decl, align 8
  %memberidx3 = getelementptr inbounds %VarDeclaration, ptr %12, i32 0, i32 3
  %13 = load i1, ptr %memberidx3, align 1
  br i1 %13, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %14 = load ptr, ptr %var_decl, align 8
  %memberidx4 = getelementptr inbounds %VarDeclaration, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  %16 = getelementptr inbounds %string, ptr %15, i32 0, i32 0
  %17 = load ptr, ptr %16, align 8
  %memberidx5 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %17, i32 0, i32 5
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = call ptr %18(ptr %15)
  store ptr %19, ptr %name, align 8
  %20 = load ptr, ptr %var, align 8
  %memberidx6 = getelementptr inbounds %Value, ptr %20, i32 0, i32 0
  %21 = load ptr, ptr %memberidx6, align 8
  store ptr %21, ptr %expression_val_type, align 8
  %22 = load ptr, ptr %this, align 8
  %23 = load ptr, ptr %expression_val_type, align 8
  %24 = call ptr @CodeGen_codegen_type(ptr %22, ptr %23, i1 true)
  store ptr %24, ptr %ty, align 8
  %25 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %CodeGen, ptr %25, i32 0, i32 0
  %26 = load ptr, ptr %memberidx7, align 8
  %27 = load ptr, ptr %ty, align 8
  %28 = load ptr, ptr %name, align 8
  %29 = call ptr @LLVMAddGlobal(ptr %26, ptr %27, ptr %28)
  store ptr %29, ptr %ptr, align 8
  %30 = load ptr, ptr %expression, align 8
  %31 = icmp ne ptr %30, null
  br i1 %31, label %if.entry8, label %else9

else:                                             ; preds = %3
  %32 = load ptr, ptr %this, align 8
  %33 = load ptr, ptr %var_id, align 8
  %34 = call ptr @CodeGen_get_var_from_varid(ptr %32, ptr %33)
  store ptr %34, ptr %ptr, align 8
  %35 = load ptr, ptr %expression, align 8
  %36 = icmp ne ptr %35, null
  br i1 %36, label %if.entry11, label %else12

ifend:                                            ; preds = %ifend13, %ifend10
  ret void

if.entry8:                                        ; preds = %if.entry
  %37 = load ptr, ptr %this, align 8
  %38 = load ptr, ptr %builder, align 8
  %39 = load ptr, ptr %expression, align 8
  %40 = call ptr @CodeGen_codegen_expression(ptr %37, ptr %38, ptr %39)
  store ptr %40, ptr %value, align 8
  %41 = load ptr, ptr %ptr, align 8
  %42 = load ptr, ptr %value, align 8
  call void @LLVMSetInitializer(ptr %41, ptr %42)
  br label %ifend10

else9:                                            ; preds = %if.entry
  br label %ifend10

ifend10:                                          ; preds = %else9, %if.entry8
  %43 = load ptr, ptr %this, align 8
  %44 = load ptr, ptr %var_id, align 8
  %45 = load ptr, ptr %ptr, align 8
  call void @CodeGen_add_var(ptr %43, ptr %44, ptr %45)
  br label %ifend

if.entry11:                                       ; preds = %else
  %46 = load ptr, ptr %this, align 8
  %47 = load ptr, ptr %builder, align 8
  %48 = load ptr, ptr %ptr, align 8
  %49 = load ptr, ptr %expression, align 8
  %50 = call ptr @CodeGen_store_expr_to_mem(ptr %46, ptr %47, ptr %48, ptr %49)
  br label %ifend13

else12:                                           ; preds = %else
  br label %ifend13

ifend13:                                          ; preds = %else12, %if.entry11
  br label %ifend
}

define void @CodeGen_codegen_const_declaration(ptr %0, ptr %1, ptr %2) {
  %const_decl = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %const_id = alloca ptr, align 8
  %expression = alloca ptr, align 8
  %name = alloca ptr, align 8
  %ty = alloca ptr, align 8
  %value = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %const_decl, align 8
  %4 = load ptr, ptr %const_decl, align 8
  %memberidx = getelementptr inbounds %ConstDeclaration, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx, align 8
  store ptr %5, ptr %const_id, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %6, i32 0, i32 4
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = load ptr, ptr %const_id, align 8
  %9 = call ptr @get_const(ptr %7, ptr %8)
  %memberidx2 = getelementptr inbounds %Const, ptr %9, i32 0, i32 2
  %10 = load ptr, ptr %memberidx2, align 8
  store ptr %10, ptr %expression, align 8
  store ptr null, ptr %ptr, align 8
  %11 = load ptr, ptr %const_decl, align 8
  %memberidx3 = getelementptr inbounds %ConstDeclaration, ptr %11, i32 0, i32 3
  %12 = load i1, ptr %memberidx3, align 1
  br i1 %12, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %13 = load ptr, ptr %this, align 8
  %14 = load ptr, ptr %expression, align 8
  %memberidx4 = getelementptr inbounds %Expression, ptr %14, i32 0, i32 3
  %15 = load ptr, ptr %memberidx4, align 8
  %16 = call ptr @CodeGen_codegen_type(ptr %13, ptr %15, i1 true)
  store ptr %16, ptr %ty, align 8
  %17 = load ptr, ptr %const_decl, align 8
  %memberidx5 = getelementptr inbounds %ConstDeclaration, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = getelementptr inbounds %string, ptr %18, i32 0, i32 0
  %20 = load ptr, ptr %19, align 8
  %memberidx6 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %20, i32 0, i32 5
  %21 = load ptr, ptr %memberidx6, align 8
  %22 = call ptr %21(ptr %18)
  store ptr %22, ptr %name, align 8
  %23 = load ptr, ptr %this, align 8
  %24 = load ptr, ptr %builder, align 8
  %25 = load ptr, ptr %expression, align 8
  %26 = call ptr @CodeGen_codegen_expression(ptr %23, ptr %24, ptr %25)
  store ptr %26, ptr %value, align 8
  %27 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %CodeGen, ptr %27, i32 0, i32 0
  %28 = load ptr, ptr %memberidx7, align 8
  %29 = load ptr, ptr %ty, align 8
  %30 = load ptr, ptr %name, align 8
  %31 = call ptr @LLVMAddGlobal(ptr %28, ptr %29, ptr %30)
  store ptr %31, ptr %ptr, align 8
  %32 = load ptr, ptr %ptr, align 8
  %33 = load ptr, ptr %value, align 8
  call void @LLVMSetInitializer(ptr %32, ptr %33)
  %34 = load ptr, ptr %ptr, align 8
  call void @LLVMSetGlobalConstant(ptr %34, i1 true)
  %35 = load ptr, ptr %this, align 8
  %36 = load ptr, ptr %const_id, align 8
  %37 = load ptr, ptr %ptr, align 8
  call void @CodeGen_add_var(ptr %35, ptr %36, ptr %37)
  br label %ifend

else:                                             ; preds = %3
  %38 = load ptr, ptr %this, align 8
  %39 = load ptr, ptr %const_id, align 8
  %40 = call ptr @CodeGen_get_var_from_varid(ptr %38, ptr %39)
  store ptr %40, ptr %ptr, align 8
  %41 = load ptr, ptr %this, align 8
  %42 = load ptr, ptr %builder, align 8
  %43 = load ptr, ptr %ptr, align 8
  %44 = load ptr, ptr %expression, align 8
  %45 = call ptr @CodeGen_store_expr_to_mem(ptr %41, ptr %42, ptr %43, ptr %44)
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  ret void
}

define void @CodeGen_codegen_if_stmt(ptr %0, ptr %1, ptr %2) {
  %this = alloca ptr, align 8
  %if_stmt = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %merge_bb = alloca ptr, align 8
  %if_terminated = alloca i1, align 1
  %else_terminated = alloca i1, align 1
  %if_bb = alloca ptr, align 8
  %condition = alloca ptr, align 8
  %else_bb = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %if_stmt, align 8
  %4 = load ptr, ptr %this, align 8
  %5 = load ptr, ptr %builder, align 8
  %6 = load ptr, ptr %if_stmt, align 8
  %memberidx = getelementptr inbounds %IfStatement, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx, align 8
  %8 = call ptr @CodeGen_codegen_expression(ptr %4, ptr %5, ptr %7)
  store ptr %8, ptr %condition, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %9, i32 0, i32 1
  %10 = load ptr, ptr %memberidx1, align 8
  %11 = call ptr @LLVMAppendBasicBlock(ptr %10, ptr @617)
  store ptr %11, ptr %if_bb, align 8
  %12 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %CodeGen, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx2, align 8
  %14 = call ptr @LLVMAppendBasicBlock(ptr %13, ptr @219)
  store ptr %14, ptr %else_bb, align 8
  %15 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %CodeGen, ptr %15, i32 0, i32 1
  %16 = load ptr, ptr %memberidx3, align 8
  %17 = call ptr @LLVMAppendBasicBlock(ptr %16, ptr @618)
  store ptr %17, ptr %merge_bb, align 8
  %18 = load ptr, ptr %builder, align 8
  %19 = load ptr, ptr %condition, align 8
  %20 = load ptr, ptr %if_bb, align 8
  %21 = load ptr, ptr %else_bb, align 8
  %22 = call ptr @LLVMBuildCondBr(ptr %18, ptr %19, ptr %20, ptr %21)
  %23 = load ptr, ptr %builder, align 8
  %24 = load ptr, ptr %if_bb, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %23, ptr %24)
  %25 = load ptr, ptr %this, align 8
  %26 = load ptr, ptr %builder, align 8
  %27 = load ptr, ptr %if_stmt, align 8
  %memberidx4 = getelementptr inbounds %IfStatement, ptr %27, i32 0, i32 2
  %28 = load ptr, ptr %memberidx4, align 8
  %29 = call ptr @CodeGen_codegen_block(ptr %25, ptr %26, ptr %28)
  %30 = load ptr, ptr %if_stmt, align 8
  %memberidx5 = getelementptr inbounds %IfStatement, ptr %30, i32 0, i32 2
  %31 = load ptr, ptr %memberidx5, align 8
  %32 = call i1 @is_terminated(ptr %31)
  store i1 %32, ptr %if_terminated, align 1
  %33 = load i1, ptr %if_terminated, align 1
  %34 = xor i1 %33, true
  br i1 %34, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %35 = load ptr, ptr %builder, align 8
  %36 = load ptr, ptr %merge_bb, align 8
  %37 = call ptr @LLVMBuildBr(ptr %35, ptr %36)
  br label %ifend

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %38 = load ptr, ptr %builder, align 8
  %39 = load ptr, ptr %else_bb, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %38, ptr %39)
  store i1 false, ptr %else_terminated, align 1
  %40 = load ptr, ptr %if_stmt, align 8
  %memberidx6 = getelementptr inbounds %IfStatement, ptr %40, i32 0, i32 3
  %41 = load ptr, ptr %memberidx6, align 8
  %42 = icmp ne ptr %41, null
  br i1 %42, label %if.entry7, label %else8

if.entry7:                                        ; preds = %ifend
  %43 = load ptr, ptr %this, align 8
  %44 = load ptr, ptr %builder, align 8
  %45 = load ptr, ptr %if_stmt, align 8
  %memberidx10 = getelementptr inbounds %IfStatement, ptr %45, i32 0, i32 3
  %46 = load ptr, ptr %memberidx10, align 8
  %47 = call ptr @CodeGen_codegen_block(ptr %43, ptr %44, ptr %46)
  %48 = load ptr, ptr %if_stmt, align 8
  %memberidx11 = getelementptr inbounds %IfStatement, ptr %48, i32 0, i32 3
  %49 = load ptr, ptr %memberidx11, align 8
  %50 = call i1 @is_terminated(ptr %49)
  store i1 %50, ptr %else_terminated, align 1
  br label %ifend9

else8:                                            ; preds = %ifend
  br label %ifend9

ifend9:                                           ; preds = %else8, %if.entry7
  %51 = load i1, ptr %else_terminated, align 1
  %52 = xor i1 %51, true
  br i1 %52, label %if.entry12, label %else13

if.entry12:                                       ; preds = %ifend9
  %53 = load ptr, ptr %builder, align 8
  %54 = load ptr, ptr %merge_bb, align 8
  %55 = call ptr @LLVMBuildBr(ptr %53, ptr %54)
  br label %ifend14

else13:                                           ; preds = %ifend9
  %56 = load i1, ptr %if_terminated, align 1
  br i1 %56, label %if.entry15, label %else16

ifend14:                                          ; preds = %ifend17, %if.entry12
  %57 = load ptr, ptr %builder, align 8
  %58 = load ptr, ptr %merge_bb, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %57, ptr %58)
  ret void

if.entry15:                                       ; preds = %else13
  %59 = load ptr, ptr %merge_bb, align 8
  call void @LLVMDeleteBasicBlock(ptr %59)
  br label %ifend17

else16:                                           ; preds = %else13
  br label %ifend17

ifend17:                                          ; preds = %else16, %if.entry15
  br label %ifend14
}

define void @Map_string_LLVMValueRef__resize(ptr %0) {
  %this = alloca ptr, align 8
  %old_entries = alloca ptr, align 8
  %old_size = alloca i64, align 8
  %i = alloca i64, align 8
  %i1 = alloca i64, align 8
  %entry = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = alloca ptr, i64 %3, align 8
  store ptr %4, ptr %old_entries, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx2, align 4
  store i64 %6, ptr %old_size, align 4
  %7 = load ptr, ptr %old_entries, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %8, i32 0, i32 0
  %9 = load ptr, ptr %memberidx3, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %10, i32 0, i32 1
  %11 = load i64, ptr %memberidx4, align 4
  %12 = mul i64 %11, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %9, i64 %12, i1 false)
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %14, i32 0, i32 1
  %15 = load i64, ptr %memberidx6, align 4
  %16 = mul nuw i64 %15, 2
  store i64 %16, ptr %memberidx5, align 4
  %17 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %17, i32 0, i32 2
  store i64 0, ptr %memberidx7, align 4
  %18 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %18, i32 0, i32 0
  %19 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx9, align 8
  %21 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %21, i32 0, i32 1
  %22 = load i64, ptr %memberidx10, align 4
  %23 = mul i64 %22, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %24 = call ptr @realloc(ptr %20, i64 %23)
  store ptr %24, ptr %memberidx8, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %25 = load i64, ptr %i, align 4
  %26 = load ptr, ptr %this, align 8
  %memberidx11 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %26, i32 0, i32 1
  %27 = load i64, ptr %memberidx11, align 4
  %28 = icmp slt i64 %25, %27
  br i1 %28, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load i64, ptr %i, align 4
  %30 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx12, align 8
  %32 = getelementptr inbounds ptr, ptr %31, i64 %29
  store ptr null, ptr %32, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %33 = load i64, ptr %i, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.entry13

for.entry13:                                      ; preds = %for.end
  store i64 0, ptr %i1, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.incr16, %for.entry13
  %35 = load i64, ptr %i1, align 4
  %36 = load i64, ptr %old_size, align 4
  %37 = icmp slt i64 %35, %36
  br i1 %37, label %for.body15, label %for.end17

for.body15:                                       ; preds = %for.cond14
  %38 = load i64, ptr %i1, align 4
  %39 = load ptr, ptr %old_entries, align 8
  %40 = getelementptr inbounds ptr, ptr %39, i64 %38
  %41 = load ptr, ptr %40, align 8
  store ptr %41, ptr %entry, align 8
  %42 = load ptr, ptr %entry, align 8
  %43 = icmp ne ptr %42, null
  br i1 %43, label %if.entry, label %else

for.incr16:                                       ; preds = %ifend
  %44 = load i64, ptr %i1, align 4
  %45 = add nsw i64 %44, 1
  store i64 %45, ptr %i1, align 4
  br label %for.cond14

for.end17:                                        ; preds = %for.cond14
  ret void

if.entry:                                         ; preds = %for.body15
  %46 = load ptr, ptr %this, align 8
  %47 = load ptr, ptr %entry, align 8
  %memberidx18 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %47, i32 0, i32 0
  %48 = load ptr, ptr %memberidx18, align 8
  %49 = load ptr, ptr %entry, align 8
  %memberidx19 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %49, i32 0, i32 1
  %50 = load ptr, ptr %memberidx19, align 8
  call void @Map_string_LLVMValueRef____setitem__(ptr %46, ptr %48, ptr %50)
  br label %ifend

else:                                             ; preds = %for.body15
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  br label %for.incr16
}

define void @MapEntry_string_LLVMValueRef__constructor(ptr %0, ptr %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  store ptr %2, ptr %value, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %4, i32 0, i32 0
  %5 = load ptr, ptr %key, align 8
  store ptr %5, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %value, align 8
  store ptr %7, ptr %memberidx1, align 8
  ret void
}

define ptr @MapIterator_string_LLVMValueRef__next(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = icmp sgt i64 %3, 0
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %1
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %9, i32 0, i32 1
  %incdec.ptr = getelementptr inbounds ptr, ptr %8, i32 1
  store ptr %incdec.ptr, ptr %memberidx3, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx4, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 -1
  %13 = load ptr, ptr %12, align 8
  %14 = icmp ne ptr %13, null
  br i1 %14, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %if.entry, %1
  %15 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %15, i32 0, i32 0
  %16 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %16, i32 0, i32 3
  %17 = load i64, ptr %memberidx8, align 4
  %18 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %18, i32 0, i32 3
  %19 = add nsw i64 %17, -1
  store i64 %19, ptr %memberidx9, align 4
  %20 = icmp sle i64 %17, 0
  store i1 %20, ptr %memberidx7, align 1
  %21 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx10, align 8
  %23 = getelementptr inbounds ptr, ptr %22, i64 -1
  %24 = load ptr, ptr %23, align 8
  ret ptr %24

if.entry:                                         ; preds = %while.entry
  br label %while.end

else:                                             ; preds = %while.entry
  br label %ifend

ifend:                                            ; preds = %else
  %25 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx5, align 4
  %27 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %27, i32 0, i32 2
  %28 = add nsw i64 %26, -1
  store i64 %28, ptr %memberidx6, align 4
  %29 = icmp sgt i64 %26, 0
  br i1 %29, label %while.entry, label %while.end
}

define void @MapIterator_string_LLVMValueRef__constructor(ptr %0, ptr %1, i64 %2, i64 %3) {
  %remaining_size = alloca i64, align 8
  %this = alloca ptr, align 8
  %entries = alloca ptr, align 8
  %items_remaining = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %entries, align 8
  store i64 %2, ptr %remaining_size, align 4
  store i64 %3, ptr %items_remaining, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %5, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %entries, align 8
  store ptr %7, ptr %memberidx1, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %remaining_size, align 4
  store i64 %9, ptr %memberidx2, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %10, i32 0, i32 3
  %11 = load i64, ptr %items_remaining, align 4
  store i64 %11, ptr %memberidx3, align 4
  ret void
}

define ptr @Map_string_LLVMValueRef____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MapIterator_string_LLVMValueRef_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx2, align 4
  call void @MapIterator_string_LLVMValueRef__constructor(ptr %2, ptr %4, i64 %6, i64 %8)
  ret ptr %2
}

define void @Map_string_LLVMValueRef____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Map_string_LLVMValueRef____setitem__(ptr %0, ptr %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  %should_add = alloca i1, align 1
  %ratio = alloca double, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  store ptr %2, ptr %value, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = sitofp i64 %5 to double
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %memberidx1, align 4
  %9 = sitofp i64 %8 to double
  %10 = fdiv double %6, %9
  store double %10, ptr %ratio, align 8
  %11 = load double, ptr %ratio, align 8
  %12 = fcmp ogt double %11, 7.500000e-01
  br i1 %12, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %13 = load ptr, ptr %this, align 8
  call void @Map_string_LLVMValueRef__resize(ptr %13)
  br label %ifend

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %14 = load ptr, ptr %this, align 8
  %15 = load ptr, ptr %key, align 8
  %16 = call i64 @Map_string_LLVMValueRef__hash_fnc(ptr %14, ptr %15)
  %17 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %17, i32 0, i32 1
  %18 = load i64, ptr %memberidx2, align 4
  %19 = urem i64 %16, %18
  store i64 %19, ptr %hash, align 4
  store i1 true, ptr %should_add, align 1
  %20 = load i64, ptr %hash, align 4
  %21 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %21, i32 0, i32 0
  %22 = load ptr, ptr %memberidx3, align 8
  %23 = getelementptr inbounds ptr, ptr %22, i64 %20
  %24 = load ptr, ptr %23, align 8
  %25 = icmp ne ptr %24, null
  br i1 %25, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend8, %ifend
  %26 = load i64, ptr %hash, align 4
  %27 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %27, i32 0, i32 0
  %28 = load ptr, ptr %memberidx4, align 8
  %29 = getelementptr inbounds ptr, ptr %28, i64 %26
  %30 = load ptr, ptr %29, align 8
  %memberidx5 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx5, align 8
  %32 = load ptr, ptr %key, align 8
  %33 = call i1 @string___eq__(ptr %31, ptr %32)
  br i1 %33, label %if.entry6, label %else7

while.end:                                        ; preds = %ifend8, %if.entry6, %ifend
  %34 = load i1, ptr %should_add, align 1
  br i1 %34, label %if.entry11, label %else12

if.entry6:                                        ; preds = %while.entry
  store i1 false, ptr %should_add, align 1
  br label %while.end

else7:                                            ; preds = %while.entry
  br label %ifend8

ifend8:                                           ; preds = %else7
  %35 = load i64, ptr %hash, align 4
  %36 = add nuw i64 %35, 1
  %37 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %37, i32 0, i32 1
  %38 = load i64, ptr %memberidx9, align 4
  %39 = urem i64 %36, %38
  store i64 %39, ptr %hash, align 4
  %40 = load i64, ptr %hash, align 4
  %41 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %41, i32 0, i32 0
  %42 = load ptr, ptr %memberidx10, align 8
  %43 = getelementptr inbounds ptr, ptr %42, i64 %40
  %44 = load ptr, ptr %43, align 8
  %45 = icmp ne ptr %44, null
  br i1 %45, label %while.entry, label %while.end

if.entry11:                                       ; preds = %while.end
  %46 = load ptr, ptr %this, align 8
  %memberidx14 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %46, i32 0, i32 2
  %47 = load i64, ptr %memberidx14, align 4
  %48 = load ptr, ptr %this, align 8
  %memberidx15 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %48, i32 0, i32 2
  %49 = add nsw i64 %47, 1
  store i64 %49, ptr %memberidx15, align 4
  br label %ifend13

else12:                                           ; preds = %while.end
  br label %ifend13

ifend13:                                          ; preds = %else12, %if.entry11
  %50 = load i64, ptr %hash, align 4
  %51 = load ptr, ptr %this, align 8
  %memberidx16 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %51, i32 0, i32 0
  %52 = load ptr, ptr %memberidx16, align 8
  %53 = getelementptr inbounds ptr, ptr %52, i64 %50
  %54 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MapEntry_string_LLVMValueRef_, ptr null, i32 1) to i32))
  %55 = load ptr, ptr %key, align 8
  %56 = load ptr, ptr %value, align 8
  call void @MapEntry_string_LLVMValueRef__constructor(ptr %54, ptr %55, ptr %56)
  store ptr %54, ptr %53, align 8
  ret void
}

define ptr @Map_string_LLVMValueRef____getitem__(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %key, align 8
  %5 = call i64 @Map_string_LLVMValueRef__hash_fnc(ptr %3, ptr %4)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %6, i32 0, i32 1
  %7 = load i64, ptr %memberidx, align 4
  %8 = urem i64 %5, %7
  store i64 %8, ptr %hash, align 4
  %9 = load i64, ptr %hash, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 %9
  %13 = load ptr, ptr %12, align 8
  %14 = icmp ne ptr %13, null
  br i1 %14, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %2
  %15 = load i64, ptr %hash, align 4
  %16 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %16, i32 0, i32 0
  %17 = load ptr, ptr %memberidx2, align 8
  %18 = getelementptr inbounds ptr, ptr %17, i64 %15
  %19 = load ptr, ptr %18, align 8
  %memberidx3 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx3, align 8
  %21 = load ptr, ptr %key, align 8
  %22 = call i1 @string___eq__(ptr %20, ptr %21)
  br i1 %22, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %if.entry, %2
  %23 = load i64, ptr %hash, align 4
  %24 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %24, i32 0, i32 0
  %25 = load ptr, ptr %memberidx6, align 8
  %26 = getelementptr inbounds ptr, ptr %25, i64 %23
  %27 = load ptr, ptr %26, align 8
  %28 = icmp ne ptr %27, null
  br i1 %28, label %if.entry7, label %else8

if.entry:                                         ; preds = %while.entry
  br label %while.end

else:                                             ; preds = %while.entry
  %29 = load i64, ptr %hash, align 4
  %30 = add nuw i64 %29, 1
  %31 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %31, i32 0, i32 1
  %32 = load i64, ptr %memberidx4, align 4
  %33 = urem i64 %30, %32
  store i64 %33, ptr %hash, align 4
  br label %ifend

ifend:                                            ; preds = %else
  %34 = load i64, ptr %hash, align 4
  %35 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %35, i32 0, i32 0
  %36 = load ptr, ptr %memberidx5, align 8
  %37 = getelementptr inbounds ptr, ptr %36, i64 %34
  %38 = load ptr, ptr %37, align 8
  %39 = icmp ne ptr %38, null
  br i1 %39, label %while.entry, label %while.end

if.entry7:                                        ; preds = %while.end
  %40 = load i64, ptr %hash, align 4
  %41 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %41, i32 0, i32 0
  %42 = load ptr, ptr %memberidx10, align 8
  %43 = getelementptr inbounds ptr, ptr %42, i64 %40
  %44 = load ptr, ptr %43, align 8
  %memberidx11 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %44, i32 0, i32 1
  %45 = load ptr, ptr %memberidx11, align 8
  ret ptr %45

else8:                                            ; preds = %while.end
  br label %ifend9

ifend9:                                           ; preds = %else8
  ret ptr null
}

define i64 @Map_string_LLVMValueRef__hash_fnc(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  %str = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  %3 = load ptr, ptr %key, align 8
  %4 = getelementptr inbounds %string, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr %6(ptr %3)
  %8 = alloca ptr, align 8
  %9 = call i64 (ptr, ptr, ...) @asprintf(ptr %8, ptr @58, ptr %7)
  %10 = load ptr, ptr %8, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %11, ptr %10, i64 %9)
  tail call void @free(ptr %7)
  store ptr %11, ptr %str, align 8
  store i64 0, ptr %hash, align 4
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %12 = load i64, ptr %i, align 4
  %13 = load ptr, ptr %str, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx1, align 4
  %15 = icmp slt i64 %12, %14
  br i1 %15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i64, ptr %hash, align 4
  %17 = shl i64 %16, 1
  %18 = load ptr, ptr %str, align 8
  %19 = getelementptr inbounds %string, ptr %18, i32 0, i32 0
  %20 = load ptr, ptr %19, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %20, i32 0, i32 2
  %21 = load ptr, ptr %memberidx2, align 8
  %22 = load i64, ptr %i, align 4
  %23 = call i8 %21(ptr %18, i64 %22)
  %24 = zext i8 %23 to i64
  %25 = add nuw i64 %17, %24
  store i64 %25, ptr %hash, align 4
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %26 = load i64, ptr %i, align 4
  %27 = add nsw i64 %26, 1
  store i64 %27, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load ptr, ptr %str, align 8
  call void @string___del__(ptr %28)
  tail call void @free(ptr %28)
  %29 = load i64, ptr %hash, align 4
  ret i64 %29
}

define void @Map_string_LLVMValueRef__constructor(ptr %0) {
  %this = alloca ptr, align 8
  %initial_capacity = alloca i64, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 256, ptr %initial_capacity, align 4
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %2, i32 0, i32 0
  %3 = load i64, ptr %initial_capacity, align 4
  %4 = trunc i64 %3 to i32
  %mallocsize = mul i32 %4, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %5 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %5, ptr %memberidx, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %initial_capacity, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i64, ptr %i, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 %9
  store ptr null, ptr %12, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %13 = load i64, ptr %i, align 4
  %14 = add nsw i64 %13, 1
  store i64 %14, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %15, i32 0, i32 1
  %16 = load i64, ptr %initial_capacity, align 4
  store i64 %16, ptr %memberidx2, align 4
  %17 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %17, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  ret void
}

define void @CGEnumType_constructor(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CGEnumType, ptr %2, i32 0, i32 1
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Map_string_LLVMValueRef__constructor(ptr %3)
  store ptr %3, ptr %memberidx, align 8
  ret void
}

define void @CodeGen_add_enum(ptr %0, ptr %1, ptr %2) {
  %this = alloca ptr, align 8
  %enum_type = alloca ptr, align 8
  %type_id = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %type_id, align 8
  store ptr %2, ptr %enum_type, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %4, i32 0, i32 9
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load ptr, ptr %type_id, align 8
  %7 = call ptr @create_type_id_key(ptr %6)
  %8 = load ptr, ptr %enum_type, align 8
  call void @Map_string_CGEnumType____setitem__(ptr %5, ptr %7, ptr %8)
  ret void
}

define ptr @CodeGen_store_array_elements(ptr %0, ptr %1, ptr %2, ptr %3) {
  %ptr = alloca ptr, align 8
  %array_exp = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %next_args = alloca [1 x ptr], align 8
  %ptr_ty = alloca ptr, align 8
  %addr = alloca ptr, align 8
  %value = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %ptr, align 8
  store ptr %3, ptr %array_exp, align 8
  %5 = getelementptr inbounds [1 x ptr], ptr %next_args, i64 0, i64 0
  %6 = load ptr, ptr %this, align 8
  %7 = call ptr @CodeGen_createLLVMInt(ptr %6, i64 1)
  store ptr %7, ptr %5, align 8
  %8 = getelementptr inbounds ptr, ptr %5, i64 1
  %9 = load ptr, ptr %ptr, align 8
  %10 = call ptr @LLVMTypeOf(ptr %9)
  store ptr %10, ptr %ptr_ty, align 8
  %11 = load ptr, ptr %ptr, align 8
  store ptr %11, ptr %addr, align 8
  br label %for.entry

for.entry:                                        ; preds = %4
  %12 = load ptr, ptr %array_exp, align 8
  %memberidx = getelementptr inbounds %ArrayExpression, ptr %12, i32 0, i32 4
  %13 = load ptr, ptr %memberidx, align 8
  %14 = call ptr @Array_Expression____iter__(ptr %13)
  store ptr %14, ptr %tmp_it, align 8
  %15 = load ptr, ptr %tmp_it, align 8
  %16 = call ptr @ArrayIterator_Expression__next(ptr %15)
  store ptr %16, ptr %value, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %17 = load ptr, ptr %tmp_it, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_Expression_, ptr %17, i32 0, i32 0
  %18 = load i1, ptr %memberidx1, align 1
  %19 = xor i1 %18, true
  br i1 %19, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %20 = load ptr, ptr %builder, align 8
  %21 = load ptr, ptr %this, align 8
  %22 = load ptr, ptr %builder, align 8
  %23 = load ptr, ptr %value, align 8
  %24 = call ptr @CodeGen_codegen_expression(ptr %21, ptr %22, ptr %23)
  %25 = load ptr, ptr %addr, align 8
  %26 = call ptr @LLVMBuildStore(ptr %20, ptr %24, ptr %25)
  %27 = load ptr, ptr %builder, align 8
  %28 = load ptr, ptr %ptr_ty, align 8
  %29 = load ptr, ptr %addr, align 8
  %30 = getelementptr inbounds [1 x ptr], ptr %next_args, i64 0, i64 0
  %31 = load ptr, ptr %30, align 8
  %32 = getelementptr inbounds [1 x ptr], ptr %next_args, i64 0, i64 0
  %33 = call ptr @LLVMBuildInBoundsGEP2(ptr %27, ptr %28, ptr %29, ptr %32, i64 1, ptr @315)
  store ptr %33, ptr %addr, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %34 = load ptr, ptr %tmp_it, align 8
  %35 = call ptr @ArrayIterator_Expression__next(ptr %34)
  store ptr %35, ptr %value, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %36 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %36)
  %37 = load ptr, ptr %addr, align 8
  ret ptr %37
}

define ptr @CodeGen_store_tuple_elements(ptr %0, ptr %1, ptr %2, ptr %3) {
  %ptr = alloca ptr, align 8
  %tuple_exp = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %int32ty = alloca ptr, align 8
  %next_args = alloca [2 x ptr], align 8
  %tuple_type = alloca ptr, align 8
  %idx = alloca i64, align 8
  %value = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %addr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %ptr, align 8
  store ptr %3, ptr %tuple_exp, align 8
  %5 = call ptr @LLVMInt32Type()
  store ptr %5, ptr %int32ty, align 8
  %6 = getelementptr inbounds [2 x ptr], ptr %next_args, i64 0, i64 0
  %7 = load ptr, ptr %int32ty, align 8
  %8 = call ptr @LLVMConstInt(ptr %7, i64 0, i1 false)
  store ptr %8, ptr %6, align 8
  %9 = getelementptr inbounds ptr, ptr %6, i64 1
  store ptr null, ptr %9, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 1
  store i64 0, ptr %idx, align 4
  %11 = load ptr, ptr %this, align 8
  %12 = load ptr, ptr %tuple_exp, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %12, i32 0, i32 3
  %13 = load ptr, ptr %memberidx, align 8
  %14 = call ptr @CodeGen_codegen_type(ptr %11, ptr %13, i1 true)
  store ptr %14, ptr %tuple_type, align 8
  br label %for.entry

for.entry:                                        ; preds = %4
  %15 = load ptr, ptr %tuple_exp, align 8
  %memberidx1 = getelementptr inbounds %TupleExpression, ptr %15, i32 0, i32 4
  %16 = load ptr, ptr %memberidx1, align 8
  %17 = call ptr @Array_Expression____iter__(ptr %16)
  store ptr %17, ptr %tmp_it, align 8
  %18 = load ptr, ptr %tmp_it, align 8
  %19 = call ptr @ArrayIterator_Expression__next(ptr %18)
  store ptr %19, ptr %value, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %20 = load ptr, ptr %tmp_it, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_Expression_, ptr %20, i32 0, i32 0
  %21 = load i1, ptr %memberidx2, align 1
  %22 = xor i1 %21, true
  br i1 %22, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %23 = getelementptr inbounds [2 x ptr], ptr %next_args, i64 0, i64 1
  %24 = load ptr, ptr %int32ty, align 8
  %25 = load i64, ptr %idx, align 4
  %26 = add nsw i64 %25, 1
  store i64 %26, ptr %idx, align 4
  %27 = call ptr @LLVMConstInt(ptr %24, i64 %25, i1 false)
  store ptr %27, ptr %23, align 8
  %28 = load ptr, ptr %builder, align 8
  %29 = load ptr, ptr %tuple_type, align 8
  %30 = load ptr, ptr %ptr, align 8
  %31 = getelementptr inbounds [2 x ptr], ptr %next_args, i64 0, i64 0
  %32 = load ptr, ptr %31, align 8
  %33 = getelementptr inbounds [2 x ptr], ptr %next_args, i64 0, i64 0
  %34 = call ptr @LLVMBuildInBoundsGEP2(ptr %28, ptr %29, ptr %30, ptr %33, i64 2, ptr @315)
  store ptr %34, ptr %addr, align 8
  %35 = load ptr, ptr %builder, align 8
  %36 = load ptr, ptr %this, align 8
  %37 = load ptr, ptr %builder, align 8
  %38 = load ptr, ptr %value, align 8
  %39 = call ptr @CodeGen_codegen_expression(ptr %36, ptr %37, ptr %38)
  %40 = load ptr, ptr %addr, align 8
  %41 = call ptr @LLVMBuildStore(ptr %35, ptr %39, ptr %40)
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %42 = load ptr, ptr %tmp_it, align 8
  %43 = call ptr @ArrayIterator_Expression__next(ptr %42)
  store ptr %43, ptr %value, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %44 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %44)
  %45 = load ptr, ptr %ptr, align 8
  ret ptr %45
}

define void @CodeGen_codegen_vars_alloc_funtion_scope(ptr %0, ptr %1, ptr %2) {
  %scope = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %current_scope = alloca ptr, align 8
  %var_id = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %var_value_type = alloca ptr, align 8
  %var_name = alloca ptr, align 8
  %var_entry = alloca ptr, align 8
  %child_scope = alloca ptr, align 8
  %tmp_it1 = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %scope, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %4, i32 0, i32 4
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load ptr, ptr %scope, align 8
  %7 = call ptr @get_scope(ptr %5, ptr %6)
  store ptr %7, ptr %current_scope, align 8
  br label %for.entry

for.entry:                                        ; preds = %3
  %8 = load ptr, ptr %current_scope, align 8
  %memberidx2 = getelementptr inbounds %Scope, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = call ptr @Map_string_VarId____iter__(ptr %9)
  store ptr %10, ptr %tmp_it, align 8
  %11 = load ptr, ptr %tmp_it, align 8
  %12 = call ptr @MapIterator_string_VarId__next(ptr %11)
  store ptr %12, ptr %var_entry, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %13 = load ptr, ptr %tmp_it, align 8
  %memberidx3 = getelementptr inbounds %MapIterator_string_VarId_, ptr %13, i32 0, i32 0
  %14 = load i1, ptr %memberidx3, align 1
  %15 = xor i1 %14, true
  br i1 %15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load ptr, ptr %var_entry, align 8
  %memberidx4 = getelementptr inbounds %MapEntry_string_VarId_, ptr %16, i32 0, i32 0
  %17 = load ptr, ptr %memberidx4, align 8
  store ptr %17, ptr %var_name, align 8
  %18 = load ptr, ptr %var_entry, align 8
  %memberidx5 = getelementptr inbounds %MapEntry_string_VarId_, ptr %18, i32 0, i32 1
  %19 = load ptr, ptr %memberidx5, align 8
  store ptr %19, ptr %var_id, align 8
  %20 = load ptr, ptr %var_id, align 8
  %memberidx6 = getelementptr inbounds %VarId, ptr %20, i32 0, i32 0
  %21 = load i64, ptr %memberidx6, align 4
  %22 = icmp eq i64 %21, 1
  br i1 %22, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %23 = load ptr, ptr %tmp_it, align 8
  %24 = call ptr @MapIterator_string_VarId__next(ptr %23)
  store ptr %24, ptr %var_entry, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %25 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %25)
  br label %for.entry22

if.entry:                                         ; preds = %for.body
  %26 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %CodeGen, ptr %26, i32 0, i32 4
  %27 = load ptr, ptr %memberidx7, align 8
  %28 = load ptr, ptr %var_id, align 8
  %29 = call ptr @get_var(ptr %27, ptr %28)
  %memberidx8 = getelementptr inbounds %Value, ptr %29, i32 0, i32 0
  %30 = load ptr, ptr %memberidx8, align 8
  store ptr %30, ptr %var_value_type, align 8
  br label %ifend

else:                                             ; preds = %for.body
  %31 = load ptr, ptr %var_id, align 8
  %memberidx9 = getelementptr inbounds %VarId, ptr %31, i32 0, i32 0
  %32 = load i64, ptr %memberidx9, align 4
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %if.entry10, label %else11

ifend:                                            ; preds = %ifend12, %if.entry
  %34 = load ptr, ptr %builder, align 8
  %35 = load ptr, ptr %this, align 8
  %36 = load ptr, ptr %var_value_type, align 8
  %37 = call ptr @CodeGen_codegen_type(ptr %35, ptr %36, i1 true)
  %38 = load ptr, ptr %var_name, align 8
  %39 = getelementptr inbounds %string, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %memberidx21 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %40, i32 0, i32 5
  %41 = load ptr, ptr %memberidx21, align 8
  %42 = call ptr %41(ptr %38)
  %43 = call ptr @LLVMBuildAlloca(ptr %34, ptr %37, ptr %42)
  store ptr %43, ptr %ptr, align 8
  %44 = load ptr, ptr %this, align 8
  %45 = load ptr, ptr %var_id, align 8
  %46 = load ptr, ptr %ptr, align 8
  call void @CodeGen_add_var(ptr %44, ptr %45, ptr %46)
  br label %for.incr

if.entry10:                                       ; preds = %else
  %47 = load ptr, ptr %this, align 8
  %memberidx13 = getelementptr inbounds %CodeGen, ptr %47, i32 0, i32 4
  %48 = load ptr, ptr %memberidx13, align 8
  %49 = load ptr, ptr %var_id, align 8
  %50 = call ptr @get_func(ptr %48, ptr %49)
  %memberidx14 = getelementptr inbounds %Function, ptr %50, i32 0, i32 4
  %51 = load ptr, ptr %memberidx14, align 8
  store ptr %51, ptr %var_value_type, align 8
  br label %ifend12

else11:                                           ; preds = %else
  %52 = load ptr, ptr %var_id, align 8
  %memberidx15 = getelementptr inbounds %VarId, ptr %52, i32 0, i32 0
  %53 = load i64, ptr %memberidx15, align 4
  %54 = icmp eq i64 %53, 2
  br i1 %54, label %if.entry16, label %else17

ifend12:                                          ; preds = %ifend18, %if.entry10
  br label %ifend

if.entry16:                                       ; preds = %else11
  %55 = load ptr, ptr %this, align 8
  %memberidx19 = getelementptr inbounds %CodeGen, ptr %55, i32 0, i32 4
  %56 = load ptr, ptr %memberidx19, align 8
  %57 = load ptr, ptr %var_id, align 8
  %58 = call ptr @get_const(ptr %56, ptr %57)
  %memberidx20 = getelementptr inbounds %Value, ptr %58, i32 0, i32 0
  %59 = load ptr, ptr %memberidx20, align 8
  store ptr %59, ptr %var_value_type, align 8
  br label %ifend18

else17:                                           ; preds = %else11
  br label %ifend18

ifend18:                                          ; preds = %else17, %if.entry16
  br label %ifend12

for.entry22:                                      ; preds = %for.end
  %60 = load ptr, ptr %current_scope, align 8
  %memberidx23 = getelementptr inbounds %Scope, ptr %60, i32 0, i32 7
  %61 = load ptr, ptr %memberidx23, align 8
  %62 = call ptr @Array_ScopeId____iter__(ptr %61)
  store ptr %62, ptr %tmp_it1, align 8
  %63 = load ptr, ptr %tmp_it1, align 8
  %64 = call ptr @ArrayIterator_ScopeId__next(ptr %63)
  store ptr %64, ptr %child_scope, align 8
  br label %for.cond24

for.cond24:                                       ; preds = %for.incr26, %for.entry22
  %65 = load ptr, ptr %tmp_it1, align 8
  %memberidx28 = getelementptr inbounds %ArrayIterator_ScopeId_, ptr %65, i32 0, i32 0
  %66 = load i1, ptr %memberidx28, align 1
  %67 = xor i1 %66, true
  br i1 %67, label %for.body25, label %for.end27

for.body25:                                       ; preds = %for.cond24
  %68 = load ptr, ptr %this, align 8
  %69 = load ptr, ptr %builder, align 8
  %70 = load ptr, ptr %child_scope, align 8
  call void @CodeGen_codegen_vars_alloc_funtion_scope(ptr %68, ptr %69, ptr %70)
  br label %for.incr26

for.incr26:                                       ; preds = %for.body25
  %71 = load ptr, ptr %tmp_it1, align 8
  %72 = call ptr @ArrayIterator_ScopeId__next(ptr %71)
  store ptr %72, ptr %child_scope, align 8
  br label %for.cond24

for.end27:                                        ; preds = %for.cond24
  %73 = load ptr, ptr %tmp_it1, align 8
  tail call void @free(ptr %73)
  ret void
}

define ptr @CodeGen_codegen_type(ptr %0, ptr %1, i1 %2) {
  %tt = alloca ptr, align 8
  %as_pointer = alloca i1, align 1
  %this = alloca ptr, align 8
  %element_type = alloca ptr, align 8
  %arr_ty = alloca ptr, align 8
  %llvm_fnty = alloca ptr, align 8
  %param_types = alloca ptr, align 8
  %idx = alloca i64, align 8
  %func_ty = alloca ptr, align 8
  %arg_ty = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %tup_ty = alloca ptr, align 8
  %idx1 = alloca i64, align 8
  %element_types = alloca ptr, align 8
  %element_type2 = alloca ptr, align 8
  %tmp_it3 = alloca ptr, align 8
  %obj_type = alloca ptr, align 8
  %enum_type = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %tt, align 8
  store i1 %2, ptr %as_pointer, align 1
  %4 = load ptr, ptr %tt, align 8
  %memberidx = getelementptr inbounds %Type, ptr %4, i32 0, i32 0
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp eq i64 %5, 10
  br i1 %6, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %7 = call ptr @LLVMVoidType()
  ret ptr %7

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %8 = load ptr, ptr %tt, align 8
  %memberidx4 = getelementptr inbounds %Type, ptr %8, i32 0, i32 0
  %9 = load i64, ptr %memberidx4, align 4
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %if.entry5, label %else6

if.entry5:                                        ; preds = %ifend
  %11 = call ptr @LLVMInt1Type()
  ret ptr %11

else6:                                            ; preds = %ifend
  br label %ifend7

ifend7:                                           ; preds = %else6
  %12 = load ptr, ptr %tt, align 8
  %memberidx8 = getelementptr inbounds %Type, ptr %12, i32 0, i32 0
  %13 = load i64, ptr %memberidx8, align 4
  %14 = icmp eq i64 %13, 1
  br i1 %14, label %if.entry9, label %else10

if.entry9:                                        ; preds = %ifend7
  %15 = call ptr @LLVMIntType(i64 4)
  ret ptr %15

else10:                                           ; preds = %ifend7
  br label %ifend11

ifend11:                                          ; preds = %else10
  %16 = load ptr, ptr %tt, align 8
  %memberidx12 = getelementptr inbounds %Type, ptr %16, i32 0, i32 0
  %17 = load i64, ptr %memberidx12, align 4
  %18 = icmp eq i64 %17, 2
  br i1 %18, label %if.entry13, label %else14

if.entry13:                                       ; preds = %ifend11
  %19 = call ptr @LLVMInt8Type()
  ret ptr %19

else14:                                           ; preds = %ifend11
  br label %ifend15

ifend15:                                          ; preds = %else14
  %20 = load ptr, ptr %tt, align 8
  %memberidx16 = getelementptr inbounds %Type, ptr %20, i32 0, i32 0
  %21 = load i64, ptr %memberidx16, align 4
  %22 = icmp eq i64 %21, 3
  br i1 %22, label %if.entry17, label %else18

if.entry17:                                       ; preds = %ifend15
  %23 = call ptr @LLVMInt16Type()
  ret ptr %23

else18:                                           ; preds = %ifend15
  br label %ifend19

ifend19:                                          ; preds = %else18
  %24 = load ptr, ptr %tt, align 8
  %memberidx20 = getelementptr inbounds %Type, ptr %24, i32 0, i32 0
  %25 = load i64, ptr %memberidx20, align 4
  %26 = icmp eq i64 %25, 4
  br i1 %26, label %if.entry21, label %else22

if.entry21:                                       ; preds = %ifend19
  %27 = call ptr @LLVMInt32Type()
  ret ptr %27

else22:                                           ; preds = %ifend19
  br label %ifend23

ifend23:                                          ; preds = %else22
  %28 = load ptr, ptr %tt, align 8
  %memberidx24 = getelementptr inbounds %Type, ptr %28, i32 0, i32 0
  %29 = load i64, ptr %memberidx24, align 4
  %30 = icmp eq i64 %29, 6
  br i1 %30, label %if.entry25, label %else26

if.entry25:                                       ; preds = %ifend23
  %31 = load i64, ptr @ARCH_WORD_SIZE, align 4
  %32 = call ptr @LLVMIntType(i64 %31)
  ret ptr %32

else26:                                           ; preds = %ifend23
  br label %ifend27

ifend27:                                          ; preds = %else26
  %33 = load ptr, ptr %tt, align 8
  %memberidx28 = getelementptr inbounds %Type, ptr %33, i32 0, i32 0
  %34 = load i64, ptr %memberidx28, align 4
  %35 = icmp eq i64 %34, 5
  br i1 %35, label %if.entry29, label %else30

if.entry29:                                       ; preds = %ifend27
  %36 = call ptr @LLVMInt64Type()
  ret ptr %36

else30:                                           ; preds = %ifend27
  br label %ifend31

ifend31:                                          ; preds = %else30
  %37 = load ptr, ptr %tt, align 8
  %memberidx32 = getelementptr inbounds %Type, ptr %37, i32 0, i32 0
  %38 = load i64, ptr %memberidx32, align 4
  %39 = icmp eq i64 %38, 7
  br i1 %39, label %if.entry33, label %else34

if.entry33:                                       ; preds = %ifend31
  %40 = call ptr @LLVMInt128Type()
  ret ptr %40

else34:                                           ; preds = %ifend31
  br label %ifend35

ifend35:                                          ; preds = %else34
  %41 = load ptr, ptr %tt, align 8
  %memberidx36 = getelementptr inbounds %Type, ptr %41, i32 0, i32 0
  %42 = load i64, ptr %memberidx36, align 4
  %43 = icmp eq i64 %42, 8
  br i1 %43, label %if.entry37, label %else38

if.entry37:                                       ; preds = %ifend35
  %44 = call ptr @LLVMFloatType()
  ret ptr %44

else38:                                           ; preds = %ifend35
  br label %ifend39

ifend39:                                          ; preds = %else38
  %45 = load ptr, ptr %tt, align 8
  %memberidx40 = getelementptr inbounds %Type, ptr %45, i32 0, i32 0
  %46 = load i64, ptr %memberidx40, align 4
  %47 = icmp eq i64 %46, 9
  br i1 %47, label %if.entry41, label %else42

if.entry41:                                       ; preds = %ifend39
  %48 = call ptr @LLVMDoubleType()
  ret ptr %48

else42:                                           ; preds = %ifend39
  br label %ifend43

ifend43:                                          ; preds = %else42
  %49 = load ptr, ptr %tt, align 8
  %memberidx44 = getelementptr inbounds %Type, ptr %49, i32 0, i32 0
  %50 = load i64, ptr %memberidx44, align 4
  %51 = icmp eq i64 %50, 13
  br i1 %51, label %if.entry45, label %else46

if.entry45:                                       ; preds = %ifend43
  %52 = load ptr, ptr %this, align 8
  %53 = load ptr, ptr %tt, align 8
  %memberidx48 = getelementptr inbounds %PointerType, ptr %53, i32 0, i32 1
  %54 = load ptr, ptr %memberidx48, align 8
  %55 = call ptr @CodeGen_codegen_type(ptr %52, ptr %54, i1 true)
  %56 = call ptr @LLVMPointerType(ptr %55, i64 0)
  ret ptr %56

else46:                                           ; preds = %ifend43
  br label %ifend47

ifend47:                                          ; preds = %else46
  %57 = load ptr, ptr %tt, align 8
  %memberidx49 = getelementptr inbounds %Type, ptr %57, i32 0, i32 0
  %58 = load i64, ptr %memberidx49, align 4
  %59 = icmp eq i64 %58, 14
  br i1 %59, label %if.entry50, label %else51

if.entry50:                                       ; preds = %ifend47
  %60 = load ptr, ptr %tt, align 8
  store ptr %60, ptr %arr_ty, align 8
  %61 = load ptr, ptr %this, align 8
  %62 = load ptr, ptr %arr_ty, align 8
  %memberidx53 = getelementptr inbounds %ArrayType, ptr %62, i32 0, i32 1
  %63 = load ptr, ptr %memberidx53, align 8
  %64 = call ptr @CodeGen_codegen_type(ptr %61, ptr %63, i1 true)
  store ptr %64, ptr %element_type, align 8
  %65 = load ptr, ptr %element_type, align 8
  %66 = load ptr, ptr %arr_ty, align 8
  %memberidx54 = getelementptr inbounds %ArrayType, ptr %66, i32 0, i32 2
  %67 = load i64, ptr %memberidx54, align 4
  %68 = call ptr @LLVMArrayType(ptr %65, i64 %67)
  ret ptr %68

else51:                                           ; preds = %ifend47
  br label %ifend52

ifend52:                                          ; preds = %else51
  %69 = load ptr, ptr %tt, align 8
  %memberidx55 = getelementptr inbounds %Type, ptr %69, i32 0, i32 0
  %70 = load i64, ptr %memberidx55, align 4
  %71 = icmp eq i64 %70, 20
  br i1 %71, label %if.entry56, label %else57

if.entry56:                                       ; preds = %ifend52
  %72 = load ptr, ptr %tt, align 8
  %memberidx59 = getelementptr inbounds %GenericType, ptr %72, i32 0, i32 3
  %73 = load ptr, ptr %memberidx59, align 8
  store ptr %73, ptr %tt, align 8
  br label %ifend58

else57:                                           ; preds = %ifend52
  br label %ifend58

ifend58:                                          ; preds = %else57, %if.entry56
  %74 = load ptr, ptr %tt, align 8
  %75 = call i1 @is_function(ptr %74)
  br i1 %75, label %if.entry60, label %else61

if.entry60:                                       ; preds = %ifend58
  %76 = load ptr, ptr %tt, align 8
  store ptr %76, ptr %func_ty, align 8
  %77 = load ptr, ptr %func_ty, align 8
  %memberidx63 = getelementptr inbounds %FunctionType, ptr %77, i32 0, i32 1
  %78 = load ptr, ptr %memberidx63, align 8
  %memberidx64 = getelementptr inbounds %Array_Type_, ptr %78, i32 0, i32 2
  %79 = load i64, ptr %memberidx64, align 4
  %80 = alloca ptr, i64 %79, align 8
  store ptr %80, ptr %param_types, align 8
  store i64 0, ptr %idx, align 4
  br label %for.entry

else61:                                           ; preds = %ifend58
  br label %ifend62

ifend62:                                          ; preds = %else61
  %81 = load ptr, ptr %tt, align 8
  %memberidx70 = getelementptr inbounds %Type, ptr %81, i32 0, i32 0
  %82 = load i64, ptr %memberidx70, align 4
  %83 = icmp eq i64 %82, 15
  br i1 %83, label %if.entry71, label %else72

for.entry:                                        ; preds = %if.entry60
  %84 = load ptr, ptr %func_ty, align 8
  %memberidx65 = getelementptr inbounds %FunctionType, ptr %84, i32 0, i32 1
  %85 = load ptr, ptr %memberidx65, align 8
  %86 = call ptr @Array_Type____iter__(ptr %85)
  store ptr %86, ptr %tmp_it, align 8
  %87 = load ptr, ptr %tmp_it, align 8
  %88 = call ptr @ArrayIterator_Type__next(ptr %87)
  store ptr %88, ptr %arg_ty, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %89 = load ptr, ptr %tmp_it, align 8
  %memberidx66 = getelementptr inbounds %ArrayIterator_Type_, ptr %89, i32 0, i32 0
  %90 = load i1, ptr %memberidx66, align 1
  %91 = xor i1 %90, true
  br i1 %91, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %92 = load i64, ptr %idx, align 4
  %93 = add nsw i64 %92, 1
  store i64 %93, ptr %idx, align 4
  %94 = load ptr, ptr %param_types, align 8
  %95 = getelementptr inbounds ptr, ptr %94, i64 %92
  %96 = load ptr, ptr %this, align 8
  %97 = load ptr, ptr %arg_ty, align 8
  %98 = call ptr @CodeGen_codegen_type(ptr %96, ptr %97, i1 true)
  store ptr %98, ptr %95, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %99 = load ptr, ptr %tmp_it, align 8
  %100 = call ptr @ArrayIterator_Type__next(ptr %99)
  store ptr %100, ptr %arg_ty, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %101 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %101)
  %102 = load ptr, ptr %this, align 8
  %103 = load ptr, ptr %func_ty, align 8
  %memberidx67 = getelementptr inbounds %FunctionType, ptr %103, i32 0, i32 2
  %104 = load ptr, ptr %memberidx67, align 8
  %105 = call ptr @CodeGen_codegen_type(ptr %102, ptr %104, i1 true)
  %106 = load ptr, ptr %param_types, align 8
  %107 = load ptr, ptr %func_ty, align 8
  %memberidx68 = getelementptr inbounds %FunctionType, ptr %107, i32 0, i32 1
  %108 = load ptr, ptr %memberidx68, align 8
  %memberidx69 = getelementptr inbounds %Array_Type_, ptr %108, i32 0, i32 2
  %109 = load i64, ptr %memberidx69, align 4
  %110 = call ptr @LLVMFunctionType(ptr %105, ptr %106, i64 %109, i1 false)
  store ptr %110, ptr %llvm_fnty, align 8
  %111 = load i1, ptr %as_pointer, align 1
  br i1 %111, label %true_block, label %false_block

true_block:                                       ; preds = %for.end
  %112 = load ptr, ptr %llvm_fnty, align 8
  %113 = call ptr @LLVMPointerType(ptr %112, i64 0)
  br label %end

false_block:                                      ; preds = %for.end
  %114 = load ptr, ptr %llvm_fnty, align 8
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %113, %true_block ], [ %114, %false_block ]
  ret ptr %ternary

if.entry71:                                       ; preds = %ifend62
  %115 = load ptr, ptr %tt, align 8
  store ptr %115, ptr %tup_ty, align 8
  %116 = load ptr, ptr %tup_ty, align 8
  %memberidx74 = getelementptr inbounds %TupleType, ptr %116, i32 0, i32 1
  %117 = load ptr, ptr %memberidx74, align 8
  %memberidx75 = getelementptr inbounds %Array_Type_, ptr %117, i32 0, i32 2
  %118 = load i64, ptr %memberidx75, align 4
  %119 = alloca ptr, i64 %118, align 8
  store ptr %119, ptr %element_types, align 8
  store i64 0, ptr %idx1, align 4
  br label %for.entry76

else72:                                           ; preds = %ifend62
  br label %ifend73

ifend73:                                          ; preds = %else72
  %120 = load ptr, ptr %tt, align 8
  %memberidx83 = getelementptr inbounds %Type, ptr %120, i32 0, i32 0
  %121 = load i64, ptr %memberidx83, align 4
  %122 = icmp eq i64 %121, 11
  br i1 %122, label %if.entry84, label %else85

for.entry76:                                      ; preds = %if.entry71
  %123 = load ptr, ptr %tup_ty, align 8
  %memberidx77 = getelementptr inbounds %TupleType, ptr %123, i32 0, i32 1
  %124 = load ptr, ptr %memberidx77, align 8
  %125 = call ptr @Array_Type____iter__(ptr %124)
  store ptr %125, ptr %tmp_it3, align 8
  %126 = load ptr, ptr %tmp_it3, align 8
  %127 = call ptr @ArrayIterator_Type__next(ptr %126)
  store ptr %127, ptr %element_type2, align 8
  br label %for.cond78

for.cond78:                                       ; preds = %for.incr80, %for.entry76
  %128 = load ptr, ptr %tmp_it3, align 8
  %memberidx82 = getelementptr inbounds %ArrayIterator_Type_, ptr %128, i32 0, i32 0
  %129 = load i1, ptr %memberidx82, align 1
  %130 = xor i1 %129, true
  br i1 %130, label %for.body79, label %for.end81

for.body79:                                       ; preds = %for.cond78
  %131 = load i64, ptr %idx1, align 4
  %132 = add nsw i64 %131, 1
  store i64 %132, ptr %idx1, align 4
  %133 = load ptr, ptr %element_types, align 8
  %134 = getelementptr inbounds ptr, ptr %133, i64 %131
  %135 = load ptr, ptr %this, align 8
  %136 = load ptr, ptr %element_type2, align 8
  %137 = call ptr @CodeGen_codegen_type(ptr %135, ptr %136, i1 true)
  store ptr %137, ptr %134, align 8
  br label %for.incr80

for.incr80:                                       ; preds = %for.body79
  %138 = load ptr, ptr %tmp_it3, align 8
  %139 = call ptr @ArrayIterator_Type__next(ptr %138)
  store ptr %139, ptr %element_type2, align 8
  br label %for.cond78

for.end81:                                        ; preds = %for.cond78
  %140 = load ptr, ptr %tmp_it3, align 8
  tail call void @free(ptr %140)
  %141 = load ptr, ptr %element_types, align 8
  %142 = load i64, ptr %idx1, align 4
  %143 = call ptr @LLVMStructType(ptr %141, i64 %142, i1 false)
  ret ptr %143

if.entry84:                                       ; preds = %ifend73
  %144 = load ptr, ptr %this, align 8
  %145 = load ptr, ptr %tt, align 8
  %memberidx87 = getelementptr inbounds %ObjectType, ptr %145, i32 0, i32 1
  %146 = load ptr, ptr %memberidx87, align 8
  %147 = call ptr @CodeGen_get_or_codegen_class_from_typeid(ptr %144, ptr %146)
  store ptr %147, ptr %obj_type, align 8
  %148 = load ptr, ptr %obj_type, align 8
  %149 = icmp ne ptr %148, null
  br i1 %149, label %if.entry88, label %else89

else85:                                           ; preds = %ifend73
  br label %ifend86

ifend86:                                          ; preds = %else85, %ifend90
  %150 = load ptr, ptr %tt, align 8
  %memberidx97 = getelementptr inbounds %Type, ptr %150, i32 0, i32 0
  %151 = load i64, ptr %memberidx97, align 4
  %152 = icmp eq i64 %151, 12
  br i1 %152, label %if.entry98, label %else99

if.entry88:                                       ; preds = %if.entry84
  %153 = load i1, ptr %as_pointer, align 1
  br i1 %153, label %true_block91, label %false_block92

else89:                                           ; preds = %if.entry84
  br label %ifend90

ifend90:                                          ; preds = %else89
  br label %ifend86

true_block91:                                     ; preds = %if.entry88
  %154 = load ptr, ptr %obj_type, align 8
  %memberidx94 = getelementptr inbounds %CGClassType, ptr %154, i32 0, i32 0
  %155 = load ptr, ptr %memberidx94, align 8
  %156 = call ptr @LLVMPointerType(ptr %155, i64 0)
  br label %end93

false_block92:                                    ; preds = %if.entry88
  %157 = load ptr, ptr %obj_type, align 8
  %memberidx95 = getelementptr inbounds %CGClassType, ptr %157, i32 0, i32 0
  %158 = load ptr, ptr %memberidx95, align 8
  br label %end93

end93:                                            ; preds = %false_block92, %true_block91
  %ternary96 = phi ptr [ %156, %true_block91 ], [ %158, %false_block92 ]
  ret ptr %ternary96

if.entry98:                                       ; preds = %ifend86
  %159 = load ptr, ptr %this, align 8
  %160 = load ptr, ptr %tt, align 8
  %memberidx101 = getelementptr inbounds %EnumType, ptr %160, i32 0, i32 1
  %161 = load ptr, ptr %memberidx101, align 8
  %162 = call ptr @CodeGen_get_or_codegen_enum_from_typeid(ptr %159, ptr %161)
  store ptr %162, ptr %enum_type, align 8
  %163 = load ptr, ptr %enum_type, align 8
  %164 = icmp ne ptr %163, null
  br i1 %164, label %if.entry102, label %else103

else99:                                           ; preds = %ifend86
  br label %ifend100

ifend100:                                         ; preds = %else99, %ifend104
  %165 = call ptr @string_from_bytes(ptr @523, i64 32)
  call void @panic(ptr %165)
  ret ptr null

if.entry102:                                      ; preds = %if.entry98
  %166 = load ptr, ptr %enum_type, align 8
  %memberidx105 = getelementptr inbounds %CGEnumType, ptr %166, i32 0, i32 0
  %167 = load ptr, ptr %memberidx105, align 8
  ret ptr %167

else103:                                          ; preds = %if.entry98
  br label %ifend104

ifend104:                                         ; preds = %else103
  br label %ifend100
}

define ptr @CodeGen_createLLVMInt(ptr %0, i64 %1) {
  %i = alloca i64, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %i, align 4
  %3 = load i64, ptr @ARCH_WORD_SIZE, align 4
  %4 = call ptr @LLVMIntType(i64 %3)
  %5 = load i64, ptr %i, align 4
  %6 = call ptr @LLVMConstInt(ptr %4, i64 %5, i1 false)
  ret ptr %6
}

define ptr @CodeGen_codegen_tuple_exp(ptr %0, ptr %1, ptr %2) {
  %tuple_exp = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %elems_buffer = alloca ptr, align 8
  %idx = alloca i64, align 8
  %value = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %tuple_exp, align 8
  %4 = load ptr, ptr %tuple_exp, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %4, i32 0, i32 1
  %5 = load i1, ptr %memberidx, align 1
  %6 = xor i1 %5, true
  br i1 %6, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %7 = call ptr @string_from_bytes(ptr @567, i64 54)
  call void @panic(ptr %7)
  br label %ifend

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %8 = load ptr, ptr %tuple_exp, align 8
  %memberidx1 = getelementptr inbounds %TupleExpression, ptr %8, i32 0, i32 4
  %9 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Expression_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = alloca ptr, i64 %10, align 8
  store ptr %11, ptr %elems_buffer, align 8
  store i64 0, ptr %idx, align 4
  br label %for.entry

for.entry:                                        ; preds = %ifend
  %12 = load ptr, ptr %tuple_exp, align 8
  %memberidx3 = getelementptr inbounds %TupleExpression, ptr %12, i32 0, i32 4
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = call ptr @Array_Expression____iter__(ptr %13)
  store ptr %14, ptr %tmp_it, align 8
  %15 = load ptr, ptr %tmp_it, align 8
  %16 = call ptr @ArrayIterator_Expression__next(ptr %15)
  store ptr %16, ptr %value, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %17 = load ptr, ptr %tmp_it, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_Expression_, ptr %17, i32 0, i32 0
  %18 = load i1, ptr %memberidx4, align 1
  %19 = xor i1 %18, true
  br i1 %19, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %20 = load i64, ptr %idx, align 4
  %21 = add nsw i64 %20, 1
  store i64 %21, ptr %idx, align 4
  %22 = load ptr, ptr %elems_buffer, align 8
  %23 = getelementptr inbounds ptr, ptr %22, i64 %20
  %24 = load ptr, ptr %this, align 8
  %25 = load ptr, ptr %builder, align 8
  %26 = load ptr, ptr %value, align 8
  %27 = call ptr @CodeGen_codegen_expression(ptr %24, ptr %25, ptr %26)
  store ptr %27, ptr %23, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %28 = load ptr, ptr %tmp_it, align 8
  %29 = call ptr @ArrayIterator_Expression__next(ptr %28)
  store ptr %29, ptr %value, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %30 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %30)
  %31 = load ptr, ptr %elems_buffer, align 8
  %32 = load i64, ptr %idx, align 4
  %33 = call ptr @LLVMConstStruct(ptr %31, i64 %32, i1 false)
  ret ptr %33
}

define ptr @CodeGen_codegen_var_access_exp(ptr %0, ptr %1, ptr %2) {
  %this = alloca ptr, align 8
  %var_exp = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %val = alloca ptr, align 8
  %ty = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %var_exp, align 8
  %4 = load ptr, ptr %this, align 8
  %5 = load ptr, ptr %var_exp, align 8
  %memberidx = getelementptr inbounds %VarAccessExpression, ptr %5, i32 0, i32 4
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr @CodeGen_get_or_codegen_var(ptr %4, ptr %6)
  store ptr %7, ptr %val, align 8
  %8 = load ptr, ptr %this, align 8
  %9 = load ptr, ptr %var_exp, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %9, i32 0, i32 3
  %10 = load ptr, ptr %memberidx1, align 8
  %11 = call ptr @CodeGen_codegen_type(ptr %8, ptr %10, i1 true)
  store ptr %11, ptr %ty, align 8
  %12 = load ptr, ptr %val, align 8
  %13 = icmp eq ptr %12, null
  br i1 %13, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %14 = call ptr @string_from_bytes(ptr @602, i64 50)
  call void @panic(ptr %14)
  br label %ifend

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %15 = load ptr, ptr %var_exp, align 8
  %memberidx2 = getelementptr inbounds %VarAccessExpression, ptr %15, i32 0, i32 4
  %16 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %VarId, ptr %16, i32 0, i32 0
  %17 = load i64, ptr %memberidx3, align 4
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %if.entry4, label %else5

if.entry4:                                        ; preds = %ifend
  %19 = load ptr, ptr %val, align 8
  ret ptr %19

else5:                                            ; preds = %ifend
  br label %ifend6

ifend6:                                           ; preds = %else5
  %20 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %CodeGen, ptr %20, i32 0, i32 5
  %21 = load i1, ptr %memberidx7, align 1
  br i1 %21, label %if.entry8, label %else9

if.entry8:                                        ; preds = %ifend6
  %22 = load ptr, ptr %val, align 8
  %23 = call ptr @LLVMGetInitializer(ptr %22)
  ret ptr %23

else9:                                            ; preds = %ifend6
  br label %ifend10

ifend10:                                          ; preds = %else9
  %24 = load ptr, ptr %builder, align 8
  %25 = load ptr, ptr %ty, align 8
  %26 = load ptr, ptr %val, align 8
  %27 = call ptr @LLVMBuildLoad2(ptr %24, ptr %25, ptr %26, ptr @315)
  ret ptr %27
}

define ptr @CodeGen_codegen_typecast_exp(ptr %0, ptr %1, ptr %2) {
  %type_exp = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %val = alloca ptr, align 8
  %ty = alloca ptr, align 8
  %value_type = alloca ptr, align 8
  %is_const = alloca i1, align 1
  %exp = alloca ptr, align 8
  %int_ty = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %type_exp, align 8
  %4 = load ptr, ptr %type_exp, align 8
  %memberidx = getelementptr inbounds %TypeCastExpression, ptr %4, i32 0, i32 4
  %5 = load ptr, ptr %memberidx, align 8
  store ptr %5, ptr %exp, align 8
  %6 = load ptr, ptr %type_exp, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx1, align 8
  store ptr %7, ptr %value_type, align 8
  %8 = load ptr, ptr %this, align 8
  %9 = load ptr, ptr %builder, align 8
  %10 = load ptr, ptr %exp, align 8
  %11 = call ptr @CodeGen_codegen_expression(ptr %8, ptr %9, ptr %10)
  store ptr %11, ptr %val, align 8
  %12 = load ptr, ptr %this, align 8
  %13 = load ptr, ptr %value_type, align 8
  %14 = call ptr @CodeGen_codegen_type(ptr %12, ptr %13, i1 true)
  store ptr %14, ptr %ty, align 8
  %15 = load ptr, ptr %val, align 8
  %16 = call i1 @LLVMIsConstant(ptr %15)
  store i1 %16, ptr %is_const, align 1
  %17 = load ptr, ptr %value_type, align 8
  %18 = call i1 @is_bool(ptr %17)
  br i1 %18, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %19 = load i1, ptr %is_const, align 1
  br i1 %19, label %true_block, label %false_block

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %20 = load ptr, ptr %exp, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %20, i32 0, i32 3
  %21 = load ptr, ptr %memberidx2, align 8
  %22 = call i1 @is_int(ptr %21)
  %23 = load ptr, ptr %value_type, align 8
  %24 = call i1 @is_float(ptr %23)
  %25 = and i1 %22, %24
  br i1 %25, label %if.entry3, label %else4

true_block:                                       ; preds = %if.entry
  %26 = load ptr, ptr %this, align 8
  %27 = load ptr, ptr %val, align 8
  %28 = call i1 @LLVMIsNull(ptr %27)
  %29 = xor i1 %28, true
  %30 = call ptr @CodeGen_createLLVMBool(ptr %26, i1 %29)
  br label %end

false_block:                                      ; preds = %if.entry
  %31 = load ptr, ptr %builder, align 8
  %32 = load ptr, ptr %val, align 8
  %33 = call ptr @LLVMBuildIsNotNull(ptr %31, ptr %32, ptr @315)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %30, %true_block ], [ %33, %false_block ]
  ret ptr %ternary

if.entry3:                                        ; preds = %ifend
  %34 = load i1, ptr %is_const, align 1
  br i1 %34, label %true_block6, label %false_block7

else4:                                            ; preds = %ifend
  %35 = load ptr, ptr %exp, align 8
  %memberidx10 = getelementptr inbounds %Expression, ptr %35, i32 0, i32 3
  %36 = load ptr, ptr %memberidx10, align 8
  %37 = call i1 @is_float(ptr %36)
  %38 = load ptr, ptr %value_type, align 8
  %39 = call i1 @is_int(ptr %38)
  %40 = and i1 %37, %39
  br i1 %40, label %if.entry11, label %else12

ifend5:                                           ; preds = %ifend13
  %41 = load i1, ptr %is_const, align 1
  br i1 %41, label %true_block36, label %false_block37

true_block6:                                      ; preds = %if.entry3
  %42 = load ptr, ptr %val, align 8
  %43 = load ptr, ptr %ty, align 8
  %44 = call ptr @LLVMConstSIToFP(ptr %42, ptr %43)
  br label %end8

false_block7:                                     ; preds = %if.entry3
  %45 = load ptr, ptr %builder, align 8
  %46 = load ptr, ptr %val, align 8
  %47 = load ptr, ptr %ty, align 8
  %48 = call ptr @LLVMBuildSIToFP(ptr %45, ptr %46, ptr %47, ptr @315)
  br label %end8

end8:                                             ; preds = %false_block7, %true_block6
  %ternary9 = phi ptr [ %44, %true_block6 ], [ %48, %false_block7 ]
  ret ptr %ternary9

if.entry11:                                       ; preds = %else4
  %49 = load i1, ptr %is_const, align 1
  br i1 %49, label %true_block14, label %false_block15

else12:                                           ; preds = %else4
  %50 = load ptr, ptr %exp, align 8
  %memberidx18 = getelementptr inbounds %Expression, ptr %50, i32 0, i32 3
  %51 = load ptr, ptr %memberidx18, align 8
  %52 = call i1 @is_int(ptr %51)
  %53 = load ptr, ptr %value_type, align 8
  %54 = call i1 @is_int(ptr %53)
  %55 = and i1 %52, %54
  br i1 %55, label %if.entry19, label %else20

ifend13:                                          ; preds = %ifend21
  br label %ifend5

true_block14:                                     ; preds = %if.entry11
  %56 = load ptr, ptr %val, align 8
  %57 = load ptr, ptr %ty, align 8
  %58 = call ptr @LLVMConstFPToSI(ptr %56, ptr %57)
  br label %end16

false_block15:                                    ; preds = %if.entry11
  %59 = load ptr, ptr %builder, align 8
  %60 = load ptr, ptr %val, align 8
  %61 = load ptr, ptr %ty, align 8
  %62 = call ptr @LLVMBuildFPToSI(ptr %59, ptr %60, ptr %61, ptr @315)
  br label %end16

end16:                                            ; preds = %false_block15, %true_block14
  %ternary17 = phi ptr [ %58, %true_block14 ], [ %62, %false_block15 ]
  ret ptr %ternary17

if.entry19:                                       ; preds = %else12
  %63 = load ptr, ptr %value_type, align 8
  store ptr %63, ptr %int_ty, align 8
  %64 = load i1, ptr %is_const, align 1
  br i1 %64, label %true_block22, label %false_block23

else20:                                           ; preds = %else12
  %65 = load ptr, ptr %exp, align 8
  %memberidx28 = getelementptr inbounds %Expression, ptr %65, i32 0, i32 3
  %66 = load ptr, ptr %memberidx28, align 8
  %67 = call i1 @is_float(ptr %66)
  %68 = load ptr, ptr %value_type, align 8
  %69 = call i1 @is_float(ptr %68)
  %70 = and i1 %67, %69
  br i1 %70, label %if.entry29, label %else30

ifend21:                                          ; preds = %ifend31
  br label %ifend13

true_block22:                                     ; preds = %if.entry19
  %71 = load ptr, ptr %val, align 8
  %72 = load ptr, ptr %ty, align 8
  %73 = load ptr, ptr %int_ty, align 8
  %memberidx25 = getelementptr inbounds %IntType, ptr %73, i32 0, i32 1
  %74 = load i1, ptr %memberidx25, align 1
  %75 = call ptr @LLVMConstIntCast(ptr %71, ptr %72, i1 %74)
  br label %end24

false_block23:                                    ; preds = %if.entry19
  %76 = load ptr, ptr %builder, align 8
  %77 = load ptr, ptr %val, align 8
  %78 = load ptr, ptr %ty, align 8
  %79 = load ptr, ptr %int_ty, align 8
  %memberidx26 = getelementptr inbounds %IntType, ptr %79, i32 0, i32 1
  %80 = load i1, ptr %memberidx26, align 1
  %81 = call ptr @LLVMBuildIntCast2(ptr %76, ptr %77, ptr %78, i1 %80, ptr @315)
  br label %end24

end24:                                            ; preds = %false_block23, %true_block22
  %ternary27 = phi ptr [ %75, %true_block22 ], [ %81, %false_block23 ]
  ret ptr %ternary27

if.entry29:                                       ; preds = %else20
  %82 = load i1, ptr %is_const, align 1
  br i1 %82, label %true_block32, label %false_block33

else30:                                           ; preds = %else20
  br label %ifend31

ifend31:                                          ; preds = %else30
  br label %ifend21

true_block32:                                     ; preds = %if.entry29
  %83 = load ptr, ptr %val, align 8
  %84 = load ptr, ptr %ty, align 8
  %85 = call ptr @LLVMConstFPCast(ptr %83, ptr %84)
  br label %end34

false_block33:                                    ; preds = %if.entry29
  %86 = load ptr, ptr %builder, align 8
  %87 = load ptr, ptr %val, align 8
  %88 = load ptr, ptr %ty, align 8
  %89 = call ptr @LLVMBuildFPCast(ptr %86, ptr %87, ptr %88, ptr @315)
  br label %end34

end34:                                            ; preds = %false_block33, %true_block32
  %ternary35 = phi ptr [ %85, %true_block32 ], [ %89, %false_block33 ]
  ret ptr %ternary35

true_block36:                                     ; preds = %ifend5
  %90 = load ptr, ptr %val, align 8
  %91 = load ptr, ptr %ty, align 8
  %92 = call ptr @LLVMConstBitCast(ptr %90, ptr %91)
  br label %end38

false_block37:                                    ; preds = %ifend5
  %93 = load ptr, ptr %builder, align 8
  %94 = load ptr, ptr %val, align 8
  %95 = load ptr, ptr %ty, align 8
  %96 = call ptr @LLVMBuildBitCast(ptr %93, ptr %94, ptr %95, ptr @315)
  br label %end38

end38:                                            ; preds = %false_block37, %true_block36
  %ternary39 = phi ptr [ %92, %true_block36 ], [ %96, %false_block37 ]
  ret ptr %ternary39
}

define void @Map_string_uint__resize(ptr %0) {
  %this = alloca ptr, align 8
  %old_entries = alloca ptr, align 8
  %old_size = alloca i64, align 8
  %i = alloca i64, align 8
  %i1 = alloca i64, align 8
  %entry = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_uint_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = alloca ptr, i64 %3, align 8
  store ptr %4, ptr %old_entries, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_uint_, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx2, align 4
  store i64 %6, ptr %old_size, align 4
  %7 = load ptr, ptr %old_entries, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_uint_, ptr %8, i32 0, i32 0
  %9 = load ptr, ptr %memberidx3, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_uint_, ptr %10, i32 0, i32 1
  %11 = load i64, ptr %memberidx4, align 4
  %12 = mul i64 %11, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %9, i64 %12, i1 false)
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Map_string_uint_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Map_string_uint_, ptr %14, i32 0, i32 1
  %15 = load i64, ptr %memberidx6, align 4
  %16 = mul nuw i64 %15, 2
  store i64 %16, ptr %memberidx5, align 4
  %17 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Map_string_uint_, ptr %17, i32 0, i32 2
  store i64 0, ptr %memberidx7, align 4
  %18 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Map_string_uint_, ptr %18, i32 0, i32 0
  %19 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Map_string_uint_, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx9, align 8
  %21 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_uint_, ptr %21, i32 0, i32 1
  %22 = load i64, ptr %memberidx10, align 4
  %23 = mul i64 %22, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %24 = call ptr @realloc(ptr %20, i64 %23)
  store ptr %24, ptr %memberidx8, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %25 = load i64, ptr %i, align 4
  %26 = load ptr, ptr %this, align 8
  %memberidx11 = getelementptr inbounds %Map_string_uint_, ptr %26, i32 0, i32 1
  %27 = load i64, ptr %memberidx11, align 4
  %28 = icmp slt i64 %25, %27
  br i1 %28, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load i64, ptr %i, align 4
  %30 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %Map_string_uint_, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx12, align 8
  %32 = getelementptr inbounds ptr, ptr %31, i64 %29
  store ptr null, ptr %32, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %33 = load i64, ptr %i, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.entry13

for.entry13:                                      ; preds = %for.end
  store i64 0, ptr %i1, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.incr16, %for.entry13
  %35 = load i64, ptr %i1, align 4
  %36 = load i64, ptr %old_size, align 4
  %37 = icmp slt i64 %35, %36
  br i1 %37, label %for.body15, label %for.end17

for.body15:                                       ; preds = %for.cond14
  %38 = load i64, ptr %i1, align 4
  %39 = load ptr, ptr %old_entries, align 8
  %40 = getelementptr inbounds ptr, ptr %39, i64 %38
  %41 = load ptr, ptr %40, align 8
  store ptr %41, ptr %entry, align 8
  %42 = load ptr, ptr %entry, align 8
  %43 = icmp ne ptr %42, null
  br i1 %43, label %if.entry, label %else

for.incr16:                                       ; preds = %ifend
  %44 = load i64, ptr %i1, align 4
  %45 = add nsw i64 %44, 1
  store i64 %45, ptr %i1, align 4
  br label %for.cond14

for.end17:                                        ; preds = %for.cond14
  ret void

if.entry:                                         ; preds = %for.body15
  %46 = load ptr, ptr %this, align 8
  %47 = load ptr, ptr %entry, align 8
  %memberidx18 = getelementptr inbounds %MapEntry_string_uint_, ptr %47, i32 0, i32 0
  %48 = load ptr, ptr %memberidx18, align 8
  %49 = load ptr, ptr %entry, align 8
  %memberidx19 = getelementptr inbounds %MapEntry_string_uint_, ptr %49, i32 0, i32 1
  %50 = load i64, ptr %memberidx19, align 4
  call void @Map_string_uint____setitem__(ptr %46, ptr %48, i64 %50)
  br label %ifend

else:                                             ; preds = %for.body15
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  br label %for.incr16
}

define void @MapEntry_string_uint__constructor(ptr %0, ptr %1, i64 %2) {
  %value = alloca i64, align 8
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  store i64 %2, ptr %value, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapEntry_string_uint_, ptr %4, i32 0, i32 0
  %5 = load ptr, ptr %key, align 8
  store ptr %5, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapEntry_string_uint_, ptr %6, i32 0, i32 1
  %7 = load i64, ptr %value, align 4
  store i64 %7, ptr %memberidx1, align 4
  ret void
}

define ptr @MapIterator_string_uint__next(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapIterator_string_uint_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapIterator_string_uint_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = icmp sgt i64 %3, 0
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %1
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %MapIterator_string_uint_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %MapIterator_string_uint_, ptr %9, i32 0, i32 1
  %incdec.ptr = getelementptr inbounds ptr, ptr %8, i32 1
  store ptr %incdec.ptr, ptr %memberidx3, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %MapIterator_string_uint_, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx4, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 -1
  %13 = load ptr, ptr %12, align 8
  %14 = icmp ne ptr %13, null
  br i1 %14, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %if.entry, %1
  %15 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %MapIterator_string_uint_, ptr %15, i32 0, i32 0
  %16 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %MapIterator_string_uint_, ptr %16, i32 0, i32 3
  %17 = load i64, ptr %memberidx8, align 4
  %18 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %MapIterator_string_uint_, ptr %18, i32 0, i32 3
  %19 = add nsw i64 %17, -1
  store i64 %19, ptr %memberidx9, align 4
  %20 = icmp sle i64 %17, 0
  store i1 %20, ptr %memberidx7, align 1
  %21 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %MapIterator_string_uint_, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx10, align 8
  %23 = getelementptr inbounds ptr, ptr %22, i64 -1
  %24 = load ptr, ptr %23, align 8
  ret ptr %24

if.entry:                                         ; preds = %while.entry
  br label %while.end

else:                                             ; preds = %while.entry
  br label %ifend

ifend:                                            ; preds = %else
  %25 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %MapIterator_string_uint_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx5, align 4
  %27 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %MapIterator_string_uint_, ptr %27, i32 0, i32 2
  %28 = add nsw i64 %26, -1
  store i64 %28, ptr %memberidx6, align 4
  %29 = icmp sgt i64 %26, 0
  br i1 %29, label %while.entry, label %while.end
}

define void @MapIterator_string_uint__constructor(ptr %0, ptr %1, i64 %2, i64 %3) {
  %remaining_size = alloca i64, align 8
  %this = alloca ptr, align 8
  %entries = alloca ptr, align 8
  %items_remaining = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %entries, align 8
  store i64 %2, ptr %remaining_size, align 4
  store i64 %3, ptr %items_remaining, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapIterator_string_uint_, ptr %5, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapIterator_string_uint_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %entries, align 8
  store ptr %7, ptr %memberidx1, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %MapIterator_string_uint_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %remaining_size, align 4
  store i64 %9, ptr %memberidx2, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %MapIterator_string_uint_, ptr %10, i32 0, i32 3
  %11 = load i64, ptr %items_remaining, align 4
  store i64 %11, ptr %memberidx3, align 4
  ret void
}

define ptr @Map_string_uint____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MapIterator_string_uint_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_uint_, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_uint_, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_uint_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx2, align 4
  call void @MapIterator_string_uint__constructor(ptr %2, ptr %4, i64 %6, i64 %8)
  ret ptr %2
}

define void @Map_string_uint____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_uint_, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Map_string_uint____setitem__(ptr %0, ptr %1, i64 %2) {
  %value = alloca i64, align 8
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  %should_add = alloca i1, align 1
  %ratio = alloca double, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  store i64 %2, ptr %value, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_uint_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = sitofp i64 %5 to double
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_uint_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %memberidx1, align 4
  %9 = sitofp i64 %8 to double
  %10 = fdiv double %6, %9
  store double %10, ptr %ratio, align 8
  %11 = load double, ptr %ratio, align 8
  %12 = fcmp ogt double %11, 7.500000e-01
  br i1 %12, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %13 = load ptr, ptr %this, align 8
  call void @Map_string_uint__resize(ptr %13)
  br label %ifend

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %14 = load ptr, ptr %this, align 8
  %15 = load ptr, ptr %key, align 8
  %16 = call i64 @Map_string_uint__hash_fnc(ptr %14, ptr %15)
  %17 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_uint_, ptr %17, i32 0, i32 1
  %18 = load i64, ptr %memberidx2, align 4
  %19 = urem i64 %16, %18
  store i64 %19, ptr %hash, align 4
  store i1 true, ptr %should_add, align 1
  %20 = load i64, ptr %hash, align 4
  %21 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_uint_, ptr %21, i32 0, i32 0
  %22 = load ptr, ptr %memberidx3, align 8
  %23 = getelementptr inbounds ptr, ptr %22, i64 %20
  %24 = load ptr, ptr %23, align 8
  %25 = icmp ne ptr %24, null
  br i1 %25, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend8, %ifend
  %26 = load i64, ptr %hash, align 4
  %27 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_uint_, ptr %27, i32 0, i32 0
  %28 = load ptr, ptr %memberidx4, align 8
  %29 = getelementptr inbounds ptr, ptr %28, i64 %26
  %30 = load ptr, ptr %29, align 8
  %memberidx5 = getelementptr inbounds %MapEntry_string_uint_, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx5, align 8
  %32 = load ptr, ptr %key, align 8
  %33 = call i1 @string___eq__(ptr %31, ptr %32)
  br i1 %33, label %if.entry6, label %else7

while.end:                                        ; preds = %ifend8, %if.entry6, %ifend
  %34 = load i1, ptr %should_add, align 1
  br i1 %34, label %if.entry11, label %else12

if.entry6:                                        ; preds = %while.entry
  store i1 false, ptr %should_add, align 1
  br label %while.end

else7:                                            ; preds = %while.entry
  br label %ifend8

ifend8:                                           ; preds = %else7
  %35 = load i64, ptr %hash, align 4
  %36 = add nuw i64 %35, 1
  %37 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Map_string_uint_, ptr %37, i32 0, i32 1
  %38 = load i64, ptr %memberidx9, align 4
  %39 = urem i64 %36, %38
  store i64 %39, ptr %hash, align 4
  %40 = load i64, ptr %hash, align 4
  %41 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_uint_, ptr %41, i32 0, i32 0
  %42 = load ptr, ptr %memberidx10, align 8
  %43 = getelementptr inbounds ptr, ptr %42, i64 %40
  %44 = load ptr, ptr %43, align 8
  %45 = icmp ne ptr %44, null
  br i1 %45, label %while.entry, label %while.end

if.entry11:                                       ; preds = %while.end
  %46 = load ptr, ptr %this, align 8
  %memberidx14 = getelementptr inbounds %Map_string_uint_, ptr %46, i32 0, i32 2
  %47 = load i64, ptr %memberidx14, align 4
  %48 = load ptr, ptr %this, align 8
  %memberidx15 = getelementptr inbounds %Map_string_uint_, ptr %48, i32 0, i32 2
  %49 = add nsw i64 %47, 1
  store i64 %49, ptr %memberidx15, align 4
  br label %ifend13

else12:                                           ; preds = %while.end
  br label %ifend13

ifend13:                                          ; preds = %else12, %if.entry11
  %50 = load i64, ptr %hash, align 4
  %51 = load ptr, ptr %this, align 8
  %memberidx16 = getelementptr inbounds %Map_string_uint_, ptr %51, i32 0, i32 0
  %52 = load ptr, ptr %memberidx16, align 8
  %53 = getelementptr inbounds ptr, ptr %52, i64 %50
  %54 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MapEntry_string_uint_, ptr null, i32 1) to i32))
  %55 = load ptr, ptr %key, align 8
  %56 = load i64, ptr %value, align 4
  call void @MapEntry_string_uint__constructor(ptr %54, ptr %55, i64 %56)
  store ptr %54, ptr %53, align 8
  ret void
}

define i64 @Map_string_uint____getitem__(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %key, align 8
  %5 = call i64 @Map_string_uint__hash_fnc(ptr %3, ptr %4)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_uint_, ptr %6, i32 0, i32 1
  %7 = load i64, ptr %memberidx, align 4
  %8 = urem i64 %5, %7
  store i64 %8, ptr %hash, align 4
  %9 = load i64, ptr %hash, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_uint_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 %9
  %13 = load ptr, ptr %12, align 8
  %14 = icmp ne ptr %13, null
  br i1 %14, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %2
  %15 = load i64, ptr %hash, align 4
  %16 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_uint_, ptr %16, i32 0, i32 0
  %17 = load ptr, ptr %memberidx2, align 8
  %18 = getelementptr inbounds ptr, ptr %17, i64 %15
  %19 = load ptr, ptr %18, align 8
  %memberidx3 = getelementptr inbounds %MapEntry_string_uint_, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx3, align 8
  %21 = load ptr, ptr %key, align 8
  %22 = call i1 @string___eq__(ptr %20, ptr %21)
  br i1 %22, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %if.entry, %2
  %23 = load i64, ptr %hash, align 4
  %24 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Map_string_uint_, ptr %24, i32 0, i32 0
  %25 = load ptr, ptr %memberidx6, align 8
  %26 = getelementptr inbounds ptr, ptr %25, i64 %23
  %27 = load ptr, ptr %26, align 8
  %28 = icmp ne ptr %27, null
  br i1 %28, label %if.entry7, label %else8

if.entry:                                         ; preds = %while.entry
  br label %while.end

else:                                             ; preds = %while.entry
  %29 = load i64, ptr %hash, align 4
  %30 = add nuw i64 %29, 1
  %31 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_uint_, ptr %31, i32 0, i32 1
  %32 = load i64, ptr %memberidx4, align 4
  %33 = urem i64 %30, %32
  store i64 %33, ptr %hash, align 4
  br label %ifend

ifend:                                            ; preds = %else
  %34 = load i64, ptr %hash, align 4
  %35 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Map_string_uint_, ptr %35, i32 0, i32 0
  %36 = load ptr, ptr %memberidx5, align 8
  %37 = getelementptr inbounds ptr, ptr %36, i64 %34
  %38 = load ptr, ptr %37, align 8
  %39 = icmp ne ptr %38, null
  br i1 %39, label %while.entry, label %while.end

if.entry7:                                        ; preds = %while.end
  %40 = load i64, ptr %hash, align 4
  %41 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_uint_, ptr %41, i32 0, i32 0
  %42 = load ptr, ptr %memberidx10, align 8
  %43 = getelementptr inbounds ptr, ptr %42, i64 %40
  %44 = load ptr, ptr %43, align 8
  %memberidx11 = getelementptr inbounds %MapEntry_string_uint_, ptr %44, i32 0, i32 1
  %45 = load i64, ptr %memberidx11, align 4
  ret i64 %45

else8:                                            ; preds = %while.end
  br label %ifend9

ifend9:                                           ; preds = %else8
  ret i64 0
}

define i64 @Map_string_uint__hash_fnc(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  %str = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  %3 = load ptr, ptr %key, align 8
  %4 = getelementptr inbounds %string, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr %6(ptr %3)
  %8 = alloca ptr, align 8
  %9 = call i64 (ptr, ptr, ...) @asprintf(ptr %8, ptr @58, ptr %7)
  %10 = load ptr, ptr %8, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %11, ptr %10, i64 %9)
  tail call void @free(ptr %7)
  store ptr %11, ptr %str, align 8
  store i64 0, ptr %hash, align 4
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %12 = load i64, ptr %i, align 4
  %13 = load ptr, ptr %str, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx1, align 4
  %15 = icmp slt i64 %12, %14
  br i1 %15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i64, ptr %hash, align 4
  %17 = shl i64 %16, 1
  %18 = load ptr, ptr %str, align 8
  %19 = getelementptr inbounds %string, ptr %18, i32 0, i32 0
  %20 = load ptr, ptr %19, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %20, i32 0, i32 2
  %21 = load ptr, ptr %memberidx2, align 8
  %22 = load i64, ptr %i, align 4
  %23 = call i8 %21(ptr %18, i64 %22)
  %24 = zext i8 %23 to i64
  %25 = add nuw i64 %17, %24
  store i64 %25, ptr %hash, align 4
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %26 = load i64, ptr %i, align 4
  %27 = add nsw i64 %26, 1
  store i64 %27, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load ptr, ptr %str, align 8
  call void @string___del__(ptr %28)
  tail call void @free(ptr %28)
  %29 = load i64, ptr %hash, align 4
  ret i64 %29
}

define void @Map_string_uint__constructor(ptr %0) {
  %this = alloca ptr, align 8
  %initial_capacity = alloca i64, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 256, ptr %initial_capacity, align 4
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_uint_, ptr %2, i32 0, i32 0
  %3 = load i64, ptr %initial_capacity, align 4
  %4 = trunc i64 %3 to i32
  %mallocsize = mul i32 %4, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %5 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %5, ptr %memberidx, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %initial_capacity, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i64, ptr %i, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_uint_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 %9
  store ptr null, ptr %12, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %13 = load i64, ptr %i, align 4
  %14 = add nsw i64 %13, 1
  store i64 %14, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_uint_, ptr %15, i32 0, i32 1
  %16 = load i64, ptr %initial_capacity, align 4
  store i64 %16, ptr %memberidx2, align 4
  %17 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_uint_, ptr %17, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  ret void
}

define void @CGClassType_constructor(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CGClassType, ptr %2, i32 0, i32 1
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_uint_, ptr null, i32 1) to i32))
  call void @Map_string_uint__constructor(ptr %3)
  store ptr %3, ptr %memberidx, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %CGClassType, ptr %4, i32 0, i32 2
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_uint_, ptr null, i32 1) to i32))
  call void @Map_string_uint__constructor(ptr %5)
  store ptr %5, ptr %memberidx1, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %CGClassType, ptr %6, i32 0, i32 3
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Map_string_LLVMValueRef__constructor(ptr %7)
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %CGClassType, ptr %8, i32 0, i32 4
  store ptr null, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %CGClassType, ptr %9, i32 0, i32 5
  store ptr null, ptr %memberidx4, align 8
  ret void
}

define void @CodeGen_add_class(ptr %0, ptr %1, ptr %2) {
  %this = alloca ptr, align 8
  %struct_class = alloca ptr, align 8
  %type_id = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %type_id, align 8
  store ptr %2, ptr %struct_class, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %4, i32 0, i32 8
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load ptr, ptr %type_id, align 8
  %7 = call ptr @create_type_id_key(ptr %6)
  %8 = load ptr, ptr %struct_class, align 8
  call void @Map_string_CGClassType____setitem__(ptr %5, ptr %7, ptr %8)
  ret void
}

define ptr @CodeGen_codegen_match_exp(ptr %0, ptr %1, ptr %2) {
  %match_exp = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %yield_values = alloca ptr, align 8
  %else_block = alloca ptr, align 8
  %switch = alloca ptr, align 8
  %end_block = alloca ptr, align 8
  %match_type = alloca ptr, align 8
  %cases_blocks = alloca ptr, align 8
  %subject = alloca ptr, align 8
  %cases_size = alloca i64, align 8
  %curr_block = alloca ptr, align 8
  %idx = alloca i64, align 8
  %case_block = alloca ptr, align 8
  %yield_value = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %case = alloca ptr, align 8
  %phi_node = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %match_exp, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @LLVMAppendBasicBlock(ptr %5, ptr @607)
  store ptr %6, ptr %else_block, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx1, align 8
  %9 = call ptr @LLVMAppendBasicBlock(ptr %8, ptr @608)
  store ptr %9, ptr %end_block, align 8
  %10 = load ptr, ptr %match_exp, align 8
  %memberidx2 = getelementptr inbounds %MatchExpression, ptr %10, i32 0, i32 5
  %11 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx3, align 4
  %13 = add nuw i64 %12, 1
  store i64 %13, ptr %cases_size, align 4
  %14 = load i64, ptr %cases_size, align 4
  %15 = alloca ptr, i64 %14, align 8
  store ptr %15, ptr %cases_blocks, align 8
  %16 = load i64, ptr %cases_size, align 4
  %17 = alloca ptr, i64 %16, align 8
  store ptr %17, ptr %yield_values, align 8
  store i64 0, ptr %idx, align 4
  store ptr null, ptr %curr_block, align 8
  %18 = load ptr, ptr %this, align 8
  %19 = load ptr, ptr %match_exp, align 8
  %memberidx4 = getelementptr inbounds %Expression, ptr %19, i32 0, i32 3
  %20 = load ptr, ptr %memberidx4, align 8
  %21 = call ptr @CodeGen_codegen_type(ptr %18, ptr %20, i1 true)
  store ptr %21, ptr %match_type, align 8
  %22 = load ptr, ptr %this, align 8
  %23 = load ptr, ptr %builder, align 8
  %24 = load ptr, ptr %match_exp, align 8
  %memberidx5 = getelementptr inbounds %MatchExpression, ptr %24, i32 0, i32 4
  %25 = load ptr, ptr %memberidx5, align 8
  %26 = call ptr @CodeGen_codegen_expression(ptr %22, ptr %23, ptr %25)
  store ptr %26, ptr %subject, align 8
  %27 = load ptr, ptr %match_exp, align 8
  %memberidx6 = getelementptr inbounds %MatchExpression, ptr %27, i32 0, i32 7
  %28 = load i1, ptr %memberidx6, align 1
  br i1 %28, label %true_block, label %false_block

true_block:                                       ; preds = %3
  br label %end

false_block:                                      ; preds = %3
  %29 = load ptr, ptr %builder, align 8
  %30 = load ptr, ptr %subject, align 8
  %31 = load ptr, ptr %else_block, align 8
  %32 = load i64, ptr %idx, align 4
  %33 = call ptr @LLVMBuildSwitch(ptr %29, ptr %30, ptr %31, i64 %32)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ null, %true_block ], [ %33, %false_block ]
  store ptr %ternary, ptr %switch, align 8
  br label %for.entry

for.entry:                                        ; preds = %end
  %34 = load ptr, ptr %match_exp, align 8
  %memberidx7 = getelementptr inbounds %MatchExpression, ptr %34, i32 0, i32 5
  %35 = load ptr, ptr %memberidx7, align 8
  %36 = call ptr @Array_MatchExpressionCase____iter__(ptr %35)
  store ptr %36, ptr %tmp_it, align 8
  %37 = load ptr, ptr %tmp_it, align 8
  %38 = call ptr @ArrayIterator_MatchExpressionCase__next(ptr %37)
  store ptr %38, ptr %case, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %39 = load ptr, ptr %tmp_it, align 8
  %memberidx8 = getelementptr inbounds %ArrayIterator_MatchExpressionCase_, ptr %39, i32 0, i32 0
  %40 = load i1, ptr %memberidx8, align 1
  %41 = xor i1 %40, true
  br i1 %41, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %42 = load ptr, ptr %curr_block, align 8
  %43 = icmp ne ptr %42, null
  br i1 %43, label %if.entry, label %else

for.incr:                                         ; preds = %ifend13
  %44 = load ptr, ptr %tmp_it, align 8
  %45 = call ptr @ArrayIterator_MatchExpressionCase__next(ptr %44)
  store ptr %45, ptr %case, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %46 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %46)
  %47 = load ptr, ptr %builder, align 8
  %48 = load ptr, ptr %else_block, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %47, ptr %48)
  %49 = load i64, ptr %idx, align 4
  %50 = load ptr, ptr %cases_blocks, align 8
  %51 = getelementptr inbounds ptr, ptr %50, i64 %49
  %52 = load ptr, ptr %else_block, align 8
  store ptr %52, ptr %51, align 8
  %53 = load i64, ptr %idx, align 4
  %54 = add nsw i64 %53, 1
  store i64 %54, ptr %idx, align 4
  %55 = load ptr, ptr %yield_values, align 8
  %56 = getelementptr inbounds ptr, ptr %55, i64 %53
  %57 = load ptr, ptr %this, align 8
  %58 = load ptr, ptr %builder, align 8
  %59 = load ptr, ptr %match_exp, align 8
  %memberidx24 = getelementptr inbounds %MatchExpression, ptr %59, i32 0, i32 6
  %60 = load ptr, ptr %memberidx24, align 8
  %61 = call ptr @CodeGen_codegen_block(ptr %57, ptr %58, ptr %60)
  store ptr %61, ptr %56, align 8
  %62 = load ptr, ptr %builder, align 8
  %63 = load ptr, ptr %end_block, align 8
  %64 = call ptr @LLVMBuildBr(ptr %62, ptr %63)
  %65 = load ptr, ptr %builder, align 8
  %66 = load ptr, ptr %end_block, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %65, ptr %66)
  %67 = load ptr, ptr %match_exp, align 8
  %memberidx25 = getelementptr inbounds %Expression, ptr %67, i32 0, i32 3
  %68 = load ptr, ptr %memberidx25, align 8
  %memberidx26 = getelementptr inbounds %Type, ptr %68, i32 0, i32 0
  %69 = load i64, ptr %memberidx26, align 4
  %70 = icmp ne i64 %69, 10
  br i1 %70, label %if.entry27, label %else28

if.entry:                                         ; preds = %for.body
  %71 = load ptr, ptr %builder, align 8
  %72 = load ptr, ptr %curr_block, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %71, ptr %72)
  br label %ifend

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %73 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %CodeGen, ptr %73, i32 0, i32 1
  %74 = load ptr, ptr %memberidx9, align 8
  %75 = call ptr @LLVMAppendBasicBlock(ptr %74, ptr @609)
  store ptr %75, ptr %case_block, align 8
  %76 = load ptr, ptr %case, align 8
  %memberidx10 = getelementptr inbounds %MatchExpressionCase, ptr %76, i32 0, i32 0
  %77 = load i64, ptr %memberidx10, align 4
  %78 = icmp eq i64 %77, 1
  %79 = load ptr, ptr %switch, align 8
  %80 = icmp ne ptr %79, null
  %81 = and i1 %78, %80
  br i1 %81, label %if.entry11, label %else12

if.entry11:                                       ; preds = %ifend
  %82 = load ptr, ptr %this, align 8
  %83 = load ptr, ptr %builder, align 8
  %84 = load ptr, ptr %switch, align 8
  %85 = load ptr, ptr %case, align 8
  %memberidx14 = getelementptr inbounds %MatchExpressionCase, ptr %85, i32 0, i32 1
  %86 = load ptr, ptr %memberidx14, align 8
  %87 = load ptr, ptr %case_block, align 8
  call void @CodeGen_codegen_match_case(ptr %82, ptr %83, ptr %84, ptr %86, ptr %87)
  br label %ifend13

else12:                                           ; preds = %ifend
  %88 = load i64, ptr %idx, align 4
  %89 = load ptr, ptr %match_exp, align 8
  %memberidx18 = getelementptr inbounds %MatchExpression, ptr %89, i32 0, i32 5
  %90 = load ptr, ptr %memberidx18, align 8
  %memberidx19 = getelementptr inbounds %Array_MatchExpressionCase_, ptr %90, i32 0, i32 2
  %91 = load i64, ptr %memberidx19, align 4
  %92 = sub nuw i64 %91, 1
  %93 = icmp eq i64 %88, %92
  br i1 %93, label %true_block15, label %false_block16

ifend13:                                          ; preds = %end17, %if.entry11
  %94 = load ptr, ptr %builder, align 8
  %95 = load ptr, ptr %case_block, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %94, ptr %95)
  %96 = load ptr, ptr %this, align 8
  %97 = load ptr, ptr %builder, align 8
  %98 = load ptr, ptr %case, align 8
  %memberidx23 = getelementptr inbounds %MatchExpressionCase, ptr %98, i32 0, i32 2
  %99 = load ptr, ptr %memberidx23, align 8
  %100 = call ptr @CodeGen_codegen_block(ptr %96, ptr %97, ptr %99)
  store ptr %100, ptr %yield_value, align 8
  %101 = load ptr, ptr %builder, align 8
  %102 = load ptr, ptr %end_block, align 8
  %103 = call ptr @LLVMBuildBr(ptr %101, ptr %102)
  %104 = load i64, ptr %idx, align 4
  %105 = load ptr, ptr %cases_blocks, align 8
  %106 = getelementptr inbounds ptr, ptr %105, i64 %104
  %107 = load ptr, ptr %case_block, align 8
  store ptr %107, ptr %106, align 8
  %108 = load i64, ptr %idx, align 4
  %109 = add nsw i64 %108, 1
  store i64 %109, ptr %idx, align 4
  %110 = load ptr, ptr %yield_values, align 8
  %111 = getelementptr inbounds ptr, ptr %110, i64 %108
  %112 = load ptr, ptr %yield_value, align 8
  store ptr %112, ptr %111, align 8
  br label %for.incr

true_block15:                                     ; preds = %else12
  %113 = load ptr, ptr %else_block, align 8
  br label %end17

false_block16:                                    ; preds = %else12
  %114 = load ptr, ptr %this, align 8
  %memberidx20 = getelementptr inbounds %CodeGen, ptr %114, i32 0, i32 1
  %115 = load ptr, ptr %memberidx20, align 8
  %116 = call ptr @LLVMAppendBasicBlock(ptr %115, ptr @610)
  br label %end17

end17:                                            ; preds = %false_block16, %true_block15
  %ternary21 = phi ptr [ %113, %true_block15 ], [ %116, %false_block16 ]
  store ptr %ternary21, ptr %curr_block, align 8
  %117 = load ptr, ptr %builder, align 8
  %118 = load ptr, ptr %this, align 8
  %119 = load ptr, ptr %builder, align 8
  %120 = load ptr, ptr %case, align 8
  %memberidx22 = getelementptr inbounds %MatchExpressionCase, ptr %120, i32 0, i32 1
  %121 = load ptr, ptr %memberidx22, align 8
  %122 = call ptr @CodeGen_codegen_expression(ptr %118, ptr %119, ptr %121)
  %123 = load ptr, ptr %case_block, align 8
  %124 = load ptr, ptr %curr_block, align 8
  %125 = call ptr @LLVMBuildCondBr(ptr %117, ptr %122, ptr %123, ptr %124)
  br label %ifend13

if.entry27:                                       ; preds = %for.end
  %126 = load ptr, ptr %builder, align 8
  %127 = load ptr, ptr %match_type, align 8
  %128 = call ptr @LLVMBuildPhi(ptr %126, ptr %127, ptr @611)
  store ptr %128, ptr %phi_node, align 8
  %129 = load ptr, ptr %phi_node, align 8
  %130 = load ptr, ptr %yield_values, align 8
  %131 = load ptr, ptr %cases_blocks, align 8
  %132 = load i64, ptr %idx, align 4
  call void @LLVMAddIncoming(ptr %129, ptr %130, ptr %131, i64 %132)
  %133 = load ptr, ptr %phi_node, align 8
  ret ptr %133

else28:                                           ; preds = %for.end
  br label %ifend29

ifend29:                                          ; preds = %else28
  ret ptr null
}

define void @CodeGen_evaluate_expression_list(ptr %0, ptr %1, ptr %2, i64 %3, ptr %4) {
  %evaluated_list = alloca ptr, align 8
  %list = alloca ptr, align 8
  %this = alloca ptr, align 8
  %start = alloca i64, align 8
  %builder = alloca ptr, align 8
  %item = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %evaluated_list, align 8
  store i64 %3, ptr %start, align 4
  store ptr %4, ptr %list, align 8
  br label %for.entry

for.entry:                                        ; preds = %5
  %6 = load ptr, ptr %list, align 8
  %7 = call ptr @Array_Expression____iter__(ptr %6)
  store ptr %7, ptr %tmp_it, align 8
  %8 = load ptr, ptr %tmp_it, align 8
  %9 = call ptr @ArrayIterator_Expression__next(ptr %8)
  store ptr %9, ptr %item, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %10 = load ptr, ptr %tmp_it, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_Expression_, ptr %10, i32 0, i32 0
  %11 = load i1, ptr %memberidx, align 1
  %12 = xor i1 %11, true
  br i1 %12, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i64, ptr %start, align 4
  %14 = add nsw i64 %13, 1
  store i64 %14, ptr %start, align 4
  %15 = load ptr, ptr %evaluated_list, align 8
  %16 = getelementptr inbounds ptr, ptr %15, i64 %13
  %17 = load ptr, ptr %this, align 8
  %18 = load ptr, ptr %builder, align 8
  %19 = load ptr, ptr %item, align 8
  %20 = call ptr @CodeGen_codegen_expression(ptr %17, ptr %18, ptr %19)
  store ptr %20, ptr %16, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %21 = load ptr, ptr %tmp_it, align 8
  %22 = call ptr @ArrayIterator_Expression__next(ptr %21)
  store ptr %22, ptr %item, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %23)
  ret void
}

define ptr @CodeGen_codegen_atof_call(ptr %0, ptr %1, ptr %2) {
  %this = alloca ptr, align 8
  %arg = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %args = alloca [1 x ptr], align 8
  %atof = alloca ptr, align 8
  %float_ty = alloca ptr, align 8
  %arg_types = alloca [1 x ptr], align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %arg, align 8
  %4 = getelementptr inbounds [1 x ptr], ptr %arg_types, i64 0, i64 0
  %5 = call ptr @LLVMInt8Type()
  %6 = call ptr @LLVMPointerType(ptr %5, i64 0)
  store ptr %6, ptr %4, align 8
  %7 = getelementptr inbounds ptr, ptr %4, i64 1
  %8 = getelementptr inbounds [1 x ptr], ptr %args, i64 0, i64 0
  %9 = load ptr, ptr %arg, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr inbounds ptr, ptr %8, i64 1
  %11 = call ptr @LLVMDoubleType()
  store ptr %11, ptr %float_ty, align 8
  %12 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %12, i32 0, i32 0
  %13 = load ptr, ptr %memberidx, align 8
  %14 = call ptr @string_from_bytes(ptr @524, i64 4)
  %15 = getelementptr inbounds [1 x ptr], ptr %arg_types, i64 0, i64 0
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds [1 x ptr], ptr %arg_types, i64 0, i64 0
  %18 = load ptr, ptr %float_ty, align 8
  %19 = call ptr @get_intrinsic(ptr %13, ptr %14, ptr %17, i64 1, ptr %18, i1 false)
  store ptr %19, ptr %atof, align 8
  %20 = load ptr, ptr %builder, align 8
  %21 = load ptr, ptr %atof, align 8
  %memberidx1 = getelementptr inbounds %IntrinsicResult, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx1, align 8
  %23 = load ptr, ptr %atof, align 8
  %memberidx2 = getelementptr inbounds %IntrinsicResult, ptr %23, i32 0, i32 0
  %24 = load ptr, ptr %memberidx2, align 8
  %25 = getelementptr inbounds [1 x ptr], ptr %args, i64 0, i64 0
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr inbounds [1 x ptr], ptr %args, i64 0, i64 0
  %28 = call ptr @LLVMBuildCall2(ptr %20, ptr %22, ptr %24, ptr %27, i64 1, ptr @315)
  ret ptr %28
}

define ptr @CodeGen_codegen_block(ptr %0, ptr %1, ptr %2) {
  %block = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %was_instatic_ctx = alloca i1, align 1
  %yields = alloca ptr, align 8
  %statement = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %block, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %4, i32 0, i32 5
  %5 = load i1, ptr %memberidx, align 1
  store i1 %5, ptr %was_instatic_ctx, align 1
  store ptr null, ptr %yields, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %6, i32 0, i32 5
  store i1 false, ptr %memberidx1, align 1
  br label %for.entry

for.entry:                                        ; preds = %3
  %7 = load ptr, ptr %block, align 8
  %memberidx2 = getelementptr inbounds %Block, ptr %7, i32 0, i32 0
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = call ptr @Array_Statement____iter__(ptr %8)
  store ptr %9, ptr %tmp_it, align 8
  %10 = load ptr, ptr %tmp_it, align 8
  %11 = call ptr @ArrayIterator_Statement__next(ptr %10)
  store ptr %11, ptr %statement, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %12 = load ptr, ptr %tmp_it, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_Statement_, ptr %12, i32 0, i32 0
  %13 = load i1, ptr %memberidx3, align 1
  %14 = xor i1 %13, true
  br i1 %14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load ptr, ptr %this, align 8
  %16 = load ptr, ptr %builder, align 8
  %17 = load ptr, ptr %statement, align 8
  call void @CodeGen_codegen_statement(ptr %15, ptr %16, ptr %17)
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %18 = load ptr, ptr %tmp_it, align 8
  %19 = call ptr @ArrayIterator_Statement__next(ptr %18)
  store ptr %19, ptr %statement, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %20)
  %21 = load ptr, ptr %block, align 8
  %memberidx4 = getelementptr inbounds %Block, ptr %21, i32 0, i32 4
  %22 = load ptr, ptr %memberidx4, align 8
  %23 = icmp ne ptr %22, null
  br i1 %23, label %if.entry, label %else

if.entry:                                         ; preds = %for.end
  %24 = load ptr, ptr %this, align 8
  %25 = load ptr, ptr %builder, align 8
  %26 = load ptr, ptr %block, align 8
  %memberidx5 = getelementptr inbounds %Block, ptr %26, i32 0, i32 4
  %27 = load ptr, ptr %memberidx5, align 8
  %28 = call ptr @CodeGen_codegen_expression(ptr %24, ptr %25, ptr %27)
  store ptr %28, ptr %yields, align 8
  br label %ifend

else:                                             ; preds = %for.end
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %29 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %CodeGen, ptr %29, i32 0, i32 5
  %30 = load i1, ptr %was_instatic_ctx, align 1
  store i1 %30, ptr %memberidx6, align 1
  %31 = load ptr, ptr %yields, align 8
  ret ptr %31
}

define void @CodeGen_codegen_class(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %checked_class = alloca ptr, align 8
  %struct_class = alloca ptr, align 8
  %prop_id_key = alloca ptr, align 8
  %prev_func = alloca ptr, align 8
  %is_constructor = alloca i1, align 1
  %func_builder = alloca ptr, align 8
  %llvm_fnc = alloca ptr, align 8
  %method = alloca ptr, align 8
  %offset = alloca i64, align 8
  %entry_block = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %this_param = alloca ptr, align 8
  %this_alloc = alloca ptr, align 8
  %this_id = alloca ptr, align 8
  %parent_ty = alloca ptr, align 8
  %vt_ptr = alloca ptr, align 8
  %indices = alloca [1 x ptr], align 8
  %object_type = alloca ptr, align 8
  %super_id = alloca ptr, align 8
  %super_alloc = alloca ptr, align 8
  %super_constructor = alloca ptr, align 8
  %param_alloc = alloca ptr, align 8
  %i = alloca i64, align 8
  %param = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %checked_class, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %checked_class, align 8
  %memberidx = getelementptr inbounds %Class, ptr %4, i32 0, i32 0
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @CodeGen_get_class_from_typeid(ptr %3, ptr %5)
  store ptr %6, ptr %struct_class, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  %7 = load ptr, ptr %checked_class, align 8
  %memberidx1 = getelementptr inbounds %Class, ptr %7, i32 0, i32 5
  %8 = load ptr, ptr %memberidx1, align 8
  %9 = call ptr @Array_ClassMethod____iter__(ptr %8)
  store ptr %9, ptr %tmp_it, align 8
  %10 = load ptr, ptr %tmp_it, align 8
  %11 = call ptr @ArrayIterator_ClassMethod__next(ptr %10)
  store ptr %11, ptr %method, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %12 = load ptr, ptr %tmp_it, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %12, i32 0, i32 0
  %13 = load i1, ptr %memberidx2, align 1
  %14 = xor i1 %13, true
  br i1 %14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load ptr, ptr %method, align 8
  %memberidx3 = getelementptr inbounds %ClassMethod, ptr %15, i32 0, i32 7
  %16 = load i1, ptr %memberidx3, align 1
  br i1 %16, label %if.entry, label %else

for.incr:                                         ; preds = %for.end47, %if.entry
  %17 = load ptr, ptr %tmp_it, align 8
  %18 = call ptr @ArrayIterator_ClassMethod__next(ptr %17)
  store ptr %18, ptr %method, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %19 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %19)
  ret void

if.entry:                                         ; preds = %for.body
  br label %for.incr

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  %20 = load ptr, ptr %method, align 8
  %memberidx4 = getelementptr inbounds %ClassMethod, ptr %20, i32 0, i32 0
  %21 = load ptr, ptr %memberidx4, align 8
  %22 = call ptr @create_prop_key(ptr %21)
  store ptr %22, ptr %prop_id_key, align 8
  %23 = load ptr, ptr %struct_class, align 8
  %memberidx5 = getelementptr inbounds %CGClassType, ptr %23, i32 0, i32 3
  %24 = load ptr, ptr %memberidx5, align 8
  %25 = load ptr, ptr %prop_id_key, align 8
  %26 = call ptr @Map_string_LLVMValueRef____getitem__(ptr %24, ptr %25)
  store ptr %26, ptr %llvm_fnc, align 8
  %27 = load ptr, ptr %method, align 8
  %memberidx6 = getelementptr inbounds %ClassMethod, ptr %27, i32 0, i32 3
  %28 = load ptr, ptr %memberidx6, align 8
  %29 = call ptr @string_from_bytes(ptr @404, i64 11)
  %30 = call i1 @string___eq__(ptr %28, ptr %29)
  store i1 %30, ptr %is_constructor, align 1
  %31 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %CodeGen, ptr %31, i32 0, i32 0
  %32 = load ptr, ptr %memberidx7, align 8
  %33 = load ptr, ptr %checked_class, align 8
  %memberidx8 = getelementptr inbounds %Class, ptr %33, i32 0, i32 1
  %34 = load ptr, ptr %memberidx8, align 8
  %35 = getelementptr inbounds %string, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  %memberidx9 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %36, i32 0, i32 5
  %37 = load ptr, ptr %memberidx9, align 8
  %38 = call ptr %37(ptr %34)
  %39 = load ptr, ptr %method, align 8
  %memberidx10 = getelementptr inbounds %ClassMethod, ptr %39, i32 0, i32 3
  %40 = load ptr, ptr %memberidx10, align 8
  %41 = getelementptr inbounds %string, ptr %40, i32 0, i32 0
  %42 = load ptr, ptr %41, align 8
  %memberidx11 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %42, i32 0, i32 5
  %43 = load ptr, ptr %memberidx11, align 8
  %44 = call ptr %43(ptr %40)
  %45 = alloca ptr, align 8
  %46 = call i64 (ptr, ptr, ...) @asprintf(ptr %45, ptr @348, ptr %38, ptr %44)
  %47 = load ptr, ptr %45, align 8
  %48 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %48, ptr %47, i64 %46)
  tail call void @free(ptr %38)
  tail call void @free(ptr %44)
  %49 = getelementptr inbounds %string, ptr %48, i32 0, i32 0
  %50 = load ptr, ptr %49, align 8
  %memberidx12 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %50, i32 0, i32 5
  %51 = load ptr, ptr %memberidx12, align 8
  %52 = call ptr %51(ptr %48)
  %53 = call ptr @LLVMGetNamedFunction(ptr %32, ptr %52)
  store ptr %53, ptr %llvm_fnc, align 8
  %54 = load ptr, ptr %llvm_fnc, align 8
  %55 = call ptr @LLVMAppendBasicBlock(ptr %54, ptr @315)
  store ptr %55, ptr %entry_block, align 8
  %56 = call ptr @LLVMCreateBuilder()
  store ptr %56, ptr %func_builder, align 8
  %57 = load ptr, ptr %func_builder, align 8
  %58 = load ptr, ptr %entry_block, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %57, ptr %58)
  %59 = load ptr, ptr %this, align 8
  %60 = load ptr, ptr %func_builder, align 8
  %61 = load ptr, ptr %method, align 8
  %memberidx13 = getelementptr inbounds %ClassMethod, ptr %61, i32 0, i32 8
  %62 = load ptr, ptr %memberidx13, align 8
  call void @CodeGen_codegen_vars_alloc_funtion_scope(ptr %59, ptr %60, ptr %62)
  store i64 0, ptr %offset, align 4
  %63 = load ptr, ptr %method, align 8
  %memberidx14 = getelementptr inbounds %ClassMethod, ptr %63, i32 0, i32 1
  %64 = load i1, ptr %memberidx14, align 1
  %65 = xor i1 %64, true
  br i1 %65, label %if.entry15, label %else16

if.entry15:                                       ; preds = %ifend
  %66 = load ptr, ptr %llvm_fnc, align 8
  %67 = call ptr @LLVMGetParam(ptr %66, i64 0)
  store ptr %67, ptr %this_param, align 8
  %68 = load ptr, ptr %this, align 8
  %memberidx18 = getelementptr inbounds %CodeGen, ptr %68, i32 0, i32 4
  %69 = load ptr, ptr %memberidx18, align 8
  %70 = load ptr, ptr %method, align 8
  %memberidx19 = getelementptr inbounds %ClassMethod, ptr %70, i32 0, i32 8
  %71 = load ptr, ptr %memberidx19, align 8
  %72 = call ptr @get_scope(ptr %69, ptr %71)
  %memberidx20 = getelementptr inbounds %Scope, ptr %72, i32 0, i32 1
  %73 = load ptr, ptr %memberidx20, align 8
  %74 = call ptr @string_from_bytes(ptr @301, i64 4)
  %75 = call ptr @Map_string_VarId____getitem__(ptr %73, ptr %74)
  store ptr %75, ptr %this_id, align 8
  %76 = load ptr, ptr %this, align 8
  %77 = load ptr, ptr %this_id, align 8
  %78 = call ptr @CodeGen_get_var_from_varid(ptr %76, ptr %77)
  store ptr %78, ptr %this_alloc, align 8
  %79 = load ptr, ptr %func_builder, align 8
  %80 = load ptr, ptr %this_param, align 8
  %81 = load ptr, ptr %this_alloc, align 8
  %82 = call ptr @LLVMBuildStore(ptr %79, ptr %80, ptr %81)
  %83 = load i1, ptr %is_constructor, align 1
  br i1 %83, label %if.entry21, label %else22

else16:                                           ; preds = %ifend
  br label %ifend17

ifend17:                                          ; preds = %else16, %ifend23
  br label %for.entry43

if.entry21:                                       ; preds = %if.entry15
  %84 = load ptr, ptr %struct_class, align 8
  %memberidx24 = getelementptr inbounds %CGClassType, ptr %84, i32 0, i32 4
  %85 = load ptr, ptr %memberidx24, align 8
  %86 = icmp ne ptr %85, null
  br i1 %86, label %if.entry25, label %else26

else22:                                           ; preds = %if.entry15
  br label %ifend23

ifend23:                                          ; preds = %else22, %ifend33
  store i64 1, ptr %offset, align 4
  br label %ifend17

if.entry25:                                       ; preds = %if.entry21
  %87 = load ptr, ptr %struct_class, align 8
  %memberidx28 = getelementptr inbounds %CGClassType, ptr %87, i32 0, i32 0
  %88 = load ptr, ptr %memberidx28, align 8
  %89 = call ptr @LLVMPointerType(ptr %88, i64 0)
  store ptr %89, ptr %object_type, align 8
  %90 = getelementptr inbounds [1 x ptr], ptr %indices, i64 0, i64 0
  %91 = load ptr, ptr %this, align 8
  %92 = call ptr @CodeGen_createLLVMInt(ptr %91, i64 0)
  store ptr %92, ptr %90, align 8
  %93 = getelementptr inbounds ptr, ptr %90, i64 1
  %94 = load ptr, ptr %func_builder, align 8
  %95 = load ptr, ptr %object_type, align 8
  %96 = load ptr, ptr %this_param, align 8
  %97 = getelementptr inbounds [1 x ptr], ptr %indices, i64 0, i64 0
  %98 = load ptr, ptr %97, align 8
  %99 = getelementptr inbounds [1 x ptr], ptr %indices, i64 0, i64 0
  %100 = call ptr @LLVMBuildInBoundsGEP2(ptr %94, ptr %95, ptr %96, ptr %99, i64 1, ptr @315)
  store ptr %100, ptr %vt_ptr, align 8
  %101 = load ptr, ptr %func_builder, align 8
  %102 = load ptr, ptr %struct_class, align 8
  %memberidx29 = getelementptr inbounds %CGClassType, ptr %102, i32 0, i32 4
  %103 = load ptr, ptr %memberidx29, align 8
  %104 = load ptr, ptr %vt_ptr, align 8
  %105 = call ptr @LLVMBuildStore(ptr %101, ptr %103, ptr %104)
  br label %ifend27

else26:                                           ; preds = %if.entry21
  br label %ifend27

ifend27:                                          ; preds = %else26, %if.entry25
  %106 = load ptr, ptr %checked_class, align 8
  %memberidx30 = getelementptr inbounds %Class, ptr %106, i32 0, i32 2
  %107 = load ptr, ptr %memberidx30, align 8
  store ptr %107, ptr %parent_ty, align 8
  %108 = load ptr, ptr %parent_ty, align 8
  %109 = icmp ne ptr %108, null
  br i1 %109, label %if.entry31, label %else32

if.entry31:                                       ; preds = %ifend27
  %110 = load ptr, ptr %this, align 8
  %memberidx34 = getelementptr inbounds %CodeGen, ptr %110, i32 0, i32 4
  %111 = load ptr, ptr %memberidx34, align 8
  %112 = load ptr, ptr %method, align 8
  %memberidx35 = getelementptr inbounds %ClassMethod, ptr %112, i32 0, i32 8
  %113 = load ptr, ptr %memberidx35, align 8
  %114 = call ptr @get_scope(ptr %111, ptr %113)
  %memberidx36 = getelementptr inbounds %Scope, ptr %114, i32 0, i32 1
  %115 = load ptr, ptr %memberidx36, align 8
  %116 = call ptr @string_from_bytes(ptr @408, i64 5)
  %117 = call ptr @Map_string_VarId____getitem__(ptr %115, ptr %116)
  store ptr %117, ptr %super_id, align 8
  %118 = load ptr, ptr %super_id, align 8
  %119 = icmp ne ptr %118, null
  br i1 %119, label %if.entry37, label %else38

else32:                                           ; preds = %ifend27
  br label %ifend33

ifend33:                                          ; preds = %else32, %ifend39
  br label %ifend23

if.entry37:                                       ; preds = %if.entry31
  %120 = load ptr, ptr %this, align 8
  %121 = load ptr, ptr %parent_ty, align 8
  %memberidx40 = getelementptr inbounds %ObjectType, ptr %121, i32 0, i32 1
  %122 = load ptr, ptr %memberidx40, align 8
  %123 = call ptr @CodeGen_get_or_codegen_class_from_typeid(ptr %120, ptr %122)
  %memberidx41 = getelementptr inbounds %CGClassType, ptr %123, i32 0, i32 6
  %124 = load ptr, ptr %memberidx41, align 8
  store ptr %124, ptr %super_constructor, align 8
  %125 = load ptr, ptr %this, align 8
  %126 = load ptr, ptr %super_id, align 8
  %127 = call ptr @CodeGen_get_var_from_varid(ptr %125, ptr %126)
  store ptr %127, ptr %super_alloc, align 8
  %128 = load ptr, ptr %func_builder, align 8
  %129 = load ptr, ptr %super_constructor, align 8
  %130 = load ptr, ptr %super_alloc, align 8
  %131 = call ptr @LLVMBuildStore(ptr %128, ptr %129, ptr %130)
  %132 = load ptr, ptr %this, align 8
  %memberidx42 = getelementptr inbounds %CodeGen, ptr %132, i32 0, i32 10
  %133 = load ptr, ptr %memberidx42, align 8
  %134 = load ptr, ptr %super_id, align 8
  %135 = call ptr @create_var_key(ptr %134)
  %136 = load ptr, ptr %this_param, align 8
  call void @Map_string_LLVMValueRef____setitem__(ptr %133, ptr %135, ptr %136)
  br label %ifend39

else38:                                           ; preds = %if.entry31
  br label %ifend39

ifend39:                                          ; preds = %else38, %if.entry37
  br label %ifend33

for.entry43:                                      ; preds = %ifend17
  store i64 0, ptr %i, align 4
  br label %for.cond44

for.cond44:                                       ; preds = %for.incr46, %for.entry43
  %137 = load i64, ptr %i, align 4
  %138 = load ptr, ptr %method, align 8
  %memberidx48 = getelementptr inbounds %ClassMethod, ptr %138, i32 0, i32 6
  %139 = load ptr, ptr %memberidx48, align 8
  %memberidx49 = getelementptr inbounds %Array_FunctionArg_, ptr %139, i32 0, i32 2
  %140 = load i64, ptr %memberidx49, align 4
  %141 = icmp slt i64 %137, %140
  br i1 %141, label %for.body45, label %for.end47

for.body45:                                       ; preds = %for.cond44
  %142 = load ptr, ptr %llvm_fnc, align 8
  %143 = load i64, ptr %i, align 4
  %144 = load i64, ptr %offset, align 4
  %145 = add nuw i64 %143, %144
  %146 = call ptr @LLVMGetParam(ptr %142, i64 %145)
  store ptr %146, ptr %param, align 8
  %147 = load ptr, ptr %this, align 8
  %148 = load ptr, ptr %method, align 8
  %memberidx50 = getelementptr inbounds %ClassMethod, ptr %148, i32 0, i32 6
  %149 = load ptr, ptr %memberidx50, align 8
  %150 = load i64, ptr %i, align 4
  %151 = call ptr @Array_FunctionArg____getitem__(ptr %149, i64 %150)
  %memberidx51 = getelementptr inbounds %FunctionArg, ptr %151, i32 0, i32 4
  %152 = load ptr, ptr %memberidx51, align 8
  %153 = call ptr @CodeGen_get_var_from_varid(ptr %147, ptr %152)
  store ptr %153, ptr %param_alloc, align 8
  %154 = load ptr, ptr %func_builder, align 8
  %155 = load ptr, ptr %param, align 8
  %156 = load ptr, ptr %param_alloc, align 8
  %157 = call ptr @LLVMBuildStore(ptr %154, ptr %155, ptr %156)
  br label %for.incr46

for.incr46:                                       ; preds = %for.body45
  %158 = load i64, ptr %i, align 4
  %159 = add nsw i64 %158, 1
  store i64 %159, ptr %i, align 4
  br label %for.cond44

for.end47:                                        ; preds = %for.cond44
  %160 = load ptr, ptr %this, align 8
  %memberidx52 = getelementptr inbounds %CodeGen, ptr %160, i32 0, i32 1
  %161 = load ptr, ptr %memberidx52, align 8
  store ptr %161, ptr %prev_func, align 8
  %162 = load ptr, ptr %this, align 8
  %memberidx53 = getelementptr inbounds %CodeGen, ptr %162, i32 0, i32 1
  %163 = load ptr, ptr %llvm_fnc, align 8
  store ptr %163, ptr %memberidx53, align 8
  %164 = load ptr, ptr %this, align 8
  %165 = load ptr, ptr %func_builder, align 8
  %166 = load ptr, ptr %method, align 8
  %memberidx54 = getelementptr inbounds %ClassMethod, ptr %166, i32 0, i32 5
  %167 = load ptr, ptr %memberidx54, align 8
  %168 = call ptr @CodeGen_codegen_block(ptr %164, ptr %165, ptr %167)
  %169 = load ptr, ptr %this, align 8
  %memberidx55 = getelementptr inbounds %CodeGen, ptr %169, i32 0, i32 1
  %170 = load ptr, ptr %prev_func, align 8
  store ptr %170, ptr %memberidx55, align 8
  %171 = load ptr, ptr %func_builder, align 8
  call void @LLVMDisposeBuilder(ptr %171)
  br label %for.incr
}

define ptr @CodeGen_createGlobalLLVMString(ptr %0, ptr %1, ptr %2) {
  %this = alloca ptr, align 8
  %str_value = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %str = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %str_value, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %4, i32 0, i32 7
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load ptr, ptr %str_value, align 8
  %7 = call ptr @Map_string_LLVMValueRef____getitem__(ptr %5, ptr %6)
  store ptr %7, ptr %str, align 8
  %8 = load ptr, ptr %str, align 8
  %9 = icmp eq ptr %8, null
  br i1 %9, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %10 = load ptr, ptr %builder, align 8
  %11 = load ptr, ptr %str_value, align 8
  %12 = getelementptr inbounds %string, ptr %11, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %memberidx1 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %13, i32 0, i32 5
  %14 = load ptr, ptr %memberidx1, align 8
  %15 = call ptr %14(ptr %11)
  %16 = call ptr @LLVMBuildGlobalString(ptr %10, ptr %15, ptr @315)
  store ptr %16, ptr %str, align 8
  %17 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %CodeGen, ptr %17, i32 0, i32 7
  %18 = load ptr, ptr %memberidx2, align 8
  %19 = load ptr, ptr %str_value, align 8
  %20 = load ptr, ptr %str, align 8
  call void @Map_string_LLVMValueRef____setitem__(ptr %18, ptr %19, ptr %20)
  br label %ifend

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %21 = load ptr, ptr %str, align 8
  ret ptr %21
}

define ptr @CodeGen_codegen_string_to_cstring(ptr %0, ptr %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %args = alloca [1 x ptr], align 8
  %string_class_id = alloca ptr, align 8
  %func = alloca ptr, align 8
  %string_obj_ty = alloca ptr, align 8
  %prop_ty = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %value, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %4, i32 0, i32 4
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %6, i32 0, i32 4
  %7 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Program, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = call ptr @Array_Module____getitem__(ptr %8, i64 0)
  %memberidx3 = getelementptr inbounds %Module, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = call ptr @get_scope(ptr %5, ptr %10)
  %memberidx4 = getelementptr inbounds %Scope, ptr %11, i32 0, i32 2
  %12 = load ptr, ptr %memberidx4, align 8
  %13 = call ptr @string_from_bytes(ptr @465, i64 6)
  %14 = call ptr @Map_string_ClassId____getitem__(ptr %12, ptr %13)
  store ptr %14, ptr %string_class_id, align 8
  %15 = alloca %ObjectType, align 8
  %16 = load ptr, ptr %string_class_id, align 8
  call void @ObjectType_constructor(ptr %15, ptr %16)
  store ptr %15, ptr %string_obj_ty, align 8
  %17 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %CodeGen, ptr %17, i32 0, i32 4
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %string_obj_ty, align 8
  %20 = call ptr @string_from_bytes(ptr @615, i64 10)
  %21 = call ptr @get_class_prop_type_with_name(ptr %18, ptr %19, ptr %20)
  store ptr %21, ptr %prop_ty, align 8
  %22 = load ptr, ptr %this, align 8
  %23 = load ptr, ptr %builder, align 8
  %24 = load ptr, ptr %value, align 8
  %25 = load ptr, ptr %string_obj_ty, align 8
  %26 = call ptr @string_from_bytes(ptr @615, i64 10)
  %27 = call ptr @CodeGen_get_member_with_name(ptr %22, ptr %23, ptr %24, ptr %25, ptr %26, ptr null)
  store ptr %27, ptr %func, align 8
  %28 = getelementptr inbounds [1 x ptr], ptr %args, i64 0, i64 0
  %29 = load ptr, ptr %value, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr inbounds ptr, ptr %28, i64 1
  %31 = load ptr, ptr %builder, align 8
  %32 = load ptr, ptr %this, align 8
  %33 = load ptr, ptr %prop_ty, align 8
  %34 = call ptr @CodeGen_codegen_type(ptr %32, ptr %33, i1 false)
  %35 = load ptr, ptr %func, align 8
  %36 = getelementptr inbounds [1 x ptr], ptr %args, i64 0, i64 0
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr inbounds [1 x ptr], ptr %args, i64 0, i64 0
  %39 = call ptr @LLVMBuildCall2(ptr %31, ptr %34, ptr %35, ptr %38, i64 1, ptr @315)
  ret ptr %39
}

define void @CodeGen_codegen_statement(ptr %0, ptr %1, ptr %2) {
  %statement = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %statement, align 8
  %4 = load ptr, ptr %statement, align 8
  %memberidx = getelementptr inbounds %Statement, ptr %4, i32 0, i32 0
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %7 = load ptr, ptr %this, align 8
  %8 = load ptr, ptr %builder, align 8
  %9 = load ptr, ptr %statement, align 8
  call void @CodeGen_codegen_if_stmt(ptr %7, ptr %8, ptr %9)
  br label %ifend

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %10 = load ptr, ptr %statement, align 8
  %memberidx1 = getelementptr inbounds %Statement, ptr %10, i32 0, i32 0
  %11 = load i64, ptr %memberidx1, align 4
  %12 = icmp eq i64 %11, 3
  br i1 %12, label %if.entry2, label %else3

if.entry2:                                        ; preds = %ifend
  %13 = load ptr, ptr %this, align 8
  %14 = load ptr, ptr %builder, align 8
  %15 = load ptr, ptr %statement, align 8
  call void @CodeGen_codegen_for_stmt(ptr %13, ptr %14, ptr %15)
  br label %ifend4

else3:                                            ; preds = %ifend
  br label %ifend4

ifend4:                                           ; preds = %else3, %if.entry2
  %16 = load ptr, ptr %statement, align 8
  %memberidx5 = getelementptr inbounds %Statement, ptr %16, i32 0, i32 0
  %17 = load i64, ptr %memberidx5, align 4
  %18 = icmp eq i64 %17, 4
  br i1 %18, label %if.entry6, label %else7

if.entry6:                                        ; preds = %ifend4
  %19 = load ptr, ptr %this, align 8
  %20 = load ptr, ptr %builder, align 8
  %21 = load ptr, ptr %statement, align 8
  call void @CodeGen_codegen_while_stmt(ptr %19, ptr %20, ptr %21)
  br label %ifend8

else7:                                            ; preds = %ifend4
  br label %ifend8

ifend8:                                           ; preds = %else7, %if.entry6
  %22 = load ptr, ptr %statement, align 8
  %memberidx9 = getelementptr inbounds %Statement, ptr %22, i32 0, i32 0
  %23 = load i64, ptr %memberidx9, align 4
  %24 = icmp eq i64 %23, 5
  br i1 %24, label %if.entry10, label %else11

if.entry10:                                       ; preds = %ifend8
  %25 = load ptr, ptr %builder, align 8
  %26 = load ptr, ptr %this, align 8
  %memberidx13 = getelementptr inbounds %CodeGen, ptr %26, i32 0, i32 3
  %27 = load ptr, ptr %memberidx13, align 8
  %28 = call ptr @LLVMBuildBr(ptr %25, ptr %27)
  br label %ifend12

else11:                                           ; preds = %ifend8
  br label %ifend12

ifend12:                                          ; preds = %else11, %if.entry10
  %29 = load ptr, ptr %statement, align 8
  %memberidx14 = getelementptr inbounds %Statement, ptr %29, i32 0, i32 0
  %30 = load i64, ptr %memberidx14, align 4
  %31 = icmp eq i64 %30, 6
  br i1 %31, label %if.entry15, label %else16

if.entry15:                                       ; preds = %ifend12
  %32 = load ptr, ptr %builder, align 8
  %33 = load ptr, ptr %this, align 8
  %memberidx18 = getelementptr inbounds %CodeGen, ptr %33, i32 0, i32 2
  %34 = load ptr, ptr %memberidx18, align 8
  %35 = call ptr @LLVMBuildBr(ptr %32, ptr %34)
  br label %ifend17

else16:                                           ; preds = %ifend12
  br label %ifend17

ifend17:                                          ; preds = %else16, %if.entry15
  %36 = load ptr, ptr %statement, align 8
  %memberidx19 = getelementptr inbounds %Statement, ptr %36, i32 0, i32 0
  %37 = load i64, ptr %memberidx19, align 4
  %38 = icmp eq i64 %37, 1
  br i1 %38, label %if.entry20, label %else21

if.entry20:                                       ; preds = %ifend17
  %39 = load ptr, ptr %this, align 8
  %40 = load ptr, ptr %builder, align 8
  %41 = load ptr, ptr %statement, align 8
  call void @CodeGen_codegen_var_declaration(ptr %39, ptr %40, ptr %41)
  br label %ifend22

else21:                                           ; preds = %ifend17
  br label %ifend22

ifend22:                                          ; preds = %else21, %if.entry20
  %42 = load ptr, ptr %statement, align 8
  %memberidx23 = getelementptr inbounds %Statement, ptr %42, i32 0, i32 0
  %43 = load i64, ptr %memberidx23, align 4
  %44 = icmp eq i64 %43, 2
  br i1 %44, label %if.entry24, label %else25

if.entry24:                                       ; preds = %ifend22
  %45 = load ptr, ptr %this, align 8
  %46 = load ptr, ptr %builder, align 8
  %47 = load ptr, ptr %statement, align 8
  call void @CodeGen_codegen_const_declaration(ptr %45, ptr %46, ptr %47)
  br label %ifend26

else25:                                           ; preds = %ifend22
  br label %ifend26

ifend26:                                          ; preds = %else25, %if.entry24
  %48 = load ptr, ptr %statement, align 8
  %memberidx27 = getelementptr inbounds %Statement, ptr %48, i32 0, i32 0
  %49 = load i64, ptr %memberidx27, align 4
  %50 = icmp eq i64 %49, 7
  br i1 %50, label %if.entry28, label %else29

if.entry28:                                       ; preds = %ifend26
  %51 = load ptr, ptr %this, align 8
  %52 = load ptr, ptr %builder, align 8
  %53 = load ptr, ptr %statement, align 8
  call void @CodeGen_codegen_return_stmt(ptr %51, ptr %52, ptr %53)
  br label %ifend30

else29:                                           ; preds = %ifend26
  br label %ifend30

ifend30:                                          ; preds = %else29, %if.entry28
  %54 = load ptr, ptr %statement, align 8
  %memberidx31 = getelementptr inbounds %Statement, ptr %54, i32 0, i32 0
  %55 = load i64, ptr %memberidx31, align 4
  %56 = icmp eq i64 %55, 8
  br i1 %56, label %if.entry32, label %else33

if.entry32:                                       ; preds = %ifend30
  %57 = load ptr, ptr %this, align 8
  %58 = load ptr, ptr %builder, align 8
  %59 = load ptr, ptr %statement, align 8
  %60 = call ptr @CodeGen_codegen_expression(ptr %57, ptr %58, ptr %59)
  br label %ifend34

else33:                                           ; preds = %ifend30
  br label %ifend34

ifend34:                                          ; preds = %else33, %if.entry32
  ret void
}

define void @CodeGen_codegen_return_stmt(ptr %0, ptr %1, ptr %2) {
  %return_stmt = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %expression = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %return_stmt, align 8
  %4 = load ptr, ptr %return_stmt, align 8
  %memberidx = getelementptr inbounds %ReturnStatement, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = icmp ne ptr %5, null
  br i1 %6, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %7 = load ptr, ptr %this, align 8
  %8 = load ptr, ptr %builder, align 8
  %9 = load ptr, ptr %return_stmt, align 8
  %memberidx1 = getelementptr inbounds %ReturnStatement, ptr %9, i32 0, i32 1
  %10 = load ptr, ptr %memberidx1, align 8
  %11 = call ptr @CodeGen_codegen_expression(ptr %7, ptr %8, ptr %10)
  store ptr %11, ptr %expression, align 8
  %12 = load ptr, ptr %return_stmt, align 8
  %memberidx2 = getelementptr inbounds %ReturnStatement, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %13, i32 0, i32 3
  %14 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Type, ptr %14, i32 0, i32 0
  %15 = load i64, ptr %memberidx4, align 4
  %16 = icmp ne i64 %15, 10
  br i1 %16, label %if.entry5, label %else6

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %ifend7
  %17 = load ptr, ptr %builder, align 8
  %18 = call ptr @LLVMBuildRetVoid(ptr %17)
  ret void

if.entry5:                                        ; preds = %if.entry
  %19 = load ptr, ptr %builder, align 8
  %20 = load ptr, ptr %expression, align 8
  %21 = call ptr @LLVMBuildRet(ptr %19, ptr %20)
  ret void

else6:                                            ; preds = %if.entry
  br label %ifend7

ifend7:                                           ; preds = %else6
  br label %ifend
}

define void @Map_string_CGClassType__resize(ptr %0) {
  %this = alloca ptr, align 8
  %old_entries = alloca ptr, align 8
  %old_size = alloca i64, align 8
  %i = alloca i64, align 8
  %i1 = alloca i64, align 8
  %entry = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_CGClassType_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = alloca ptr, i64 %3, align 8
  store ptr %4, ptr %old_entries, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_CGClassType_, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx2, align 4
  store i64 %6, ptr %old_size, align 4
  %7 = load ptr, ptr %old_entries, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_CGClassType_, ptr %8, i32 0, i32 0
  %9 = load ptr, ptr %memberidx3, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_CGClassType_, ptr %10, i32 0, i32 1
  %11 = load i64, ptr %memberidx4, align 4
  %12 = mul i64 %11, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %9, i64 %12, i1 false)
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Map_string_CGClassType_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Map_string_CGClassType_, ptr %14, i32 0, i32 1
  %15 = load i64, ptr %memberidx6, align 4
  %16 = mul nuw i64 %15, 2
  store i64 %16, ptr %memberidx5, align 4
  %17 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Map_string_CGClassType_, ptr %17, i32 0, i32 2
  store i64 0, ptr %memberidx7, align 4
  %18 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Map_string_CGClassType_, ptr %18, i32 0, i32 0
  %19 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Map_string_CGClassType_, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx9, align 8
  %21 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_CGClassType_, ptr %21, i32 0, i32 1
  %22 = load i64, ptr %memberidx10, align 4
  %23 = mul i64 %22, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %24 = call ptr @realloc(ptr %20, i64 %23)
  store ptr %24, ptr %memberidx8, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %25 = load i64, ptr %i, align 4
  %26 = load ptr, ptr %this, align 8
  %memberidx11 = getelementptr inbounds %Map_string_CGClassType_, ptr %26, i32 0, i32 1
  %27 = load i64, ptr %memberidx11, align 4
  %28 = icmp slt i64 %25, %27
  br i1 %28, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load i64, ptr %i, align 4
  %30 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %Map_string_CGClassType_, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx12, align 8
  %32 = getelementptr inbounds ptr, ptr %31, i64 %29
  store ptr null, ptr %32, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %33 = load i64, ptr %i, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.entry13

for.entry13:                                      ; preds = %for.end
  store i64 0, ptr %i1, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.incr16, %for.entry13
  %35 = load i64, ptr %i1, align 4
  %36 = load i64, ptr %old_size, align 4
  %37 = icmp slt i64 %35, %36
  br i1 %37, label %for.body15, label %for.end17

for.body15:                                       ; preds = %for.cond14
  %38 = load i64, ptr %i1, align 4
  %39 = load ptr, ptr %old_entries, align 8
  %40 = getelementptr inbounds ptr, ptr %39, i64 %38
  %41 = load ptr, ptr %40, align 8
  store ptr %41, ptr %entry, align 8
  %42 = load ptr, ptr %entry, align 8
  %43 = icmp ne ptr %42, null
  br i1 %43, label %if.entry, label %else

for.incr16:                                       ; preds = %ifend
  %44 = load i64, ptr %i1, align 4
  %45 = add nsw i64 %44, 1
  store i64 %45, ptr %i1, align 4
  br label %for.cond14

for.end17:                                        ; preds = %for.cond14
  ret void

if.entry:                                         ; preds = %for.body15
  %46 = load ptr, ptr %this, align 8
  %47 = load ptr, ptr %entry, align 8
  %memberidx18 = getelementptr inbounds %MapEntry_string_CGClassType_, ptr %47, i32 0, i32 0
  %48 = load ptr, ptr %memberidx18, align 8
  %49 = load ptr, ptr %entry, align 8
  %memberidx19 = getelementptr inbounds %MapEntry_string_CGClassType_, ptr %49, i32 0, i32 1
  %50 = load ptr, ptr %memberidx19, align 8
  call void @Map_string_CGClassType____setitem__(ptr %46, ptr %48, ptr %50)
  br label %ifend

else:                                             ; preds = %for.body15
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  br label %for.incr16
}

define void @MapEntry_string_CGClassType__constructor(ptr %0, ptr %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  store ptr %2, ptr %value, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapEntry_string_CGClassType_, ptr %4, i32 0, i32 0
  %5 = load ptr, ptr %key, align 8
  store ptr %5, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapEntry_string_CGClassType_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %value, align 8
  store ptr %7, ptr %memberidx1, align 8
  ret void
}

define ptr @MapIterator_string_CGClassType__next(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapIterator_string_CGClassType_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapIterator_string_CGClassType_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = icmp sgt i64 %3, 0
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %1
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %MapIterator_string_CGClassType_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %MapIterator_string_CGClassType_, ptr %9, i32 0, i32 1
  %incdec.ptr = getelementptr inbounds ptr, ptr %8, i32 1
  store ptr %incdec.ptr, ptr %memberidx3, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %MapIterator_string_CGClassType_, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx4, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 -1
  %13 = load ptr, ptr %12, align 8
  %14 = icmp ne ptr %13, null
  br i1 %14, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %if.entry, %1
  %15 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %MapIterator_string_CGClassType_, ptr %15, i32 0, i32 0
  %16 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %MapIterator_string_CGClassType_, ptr %16, i32 0, i32 3
  %17 = load i64, ptr %memberidx8, align 4
  %18 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %MapIterator_string_CGClassType_, ptr %18, i32 0, i32 3
  %19 = add nsw i64 %17, -1
  store i64 %19, ptr %memberidx9, align 4
  %20 = icmp sle i64 %17, 0
  store i1 %20, ptr %memberidx7, align 1
  %21 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %MapIterator_string_CGClassType_, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx10, align 8
  %23 = getelementptr inbounds ptr, ptr %22, i64 -1
  %24 = load ptr, ptr %23, align 8
  ret ptr %24

if.entry:                                         ; preds = %while.entry
  br label %while.end

else:                                             ; preds = %while.entry
  br label %ifend

ifend:                                            ; preds = %else
  %25 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %MapIterator_string_CGClassType_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx5, align 4
  %27 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %MapIterator_string_CGClassType_, ptr %27, i32 0, i32 2
  %28 = add nsw i64 %26, -1
  store i64 %28, ptr %memberidx6, align 4
  %29 = icmp sgt i64 %26, 0
  br i1 %29, label %while.entry, label %while.end
}

define void @MapIterator_string_CGClassType__constructor(ptr %0, ptr %1, i64 %2, i64 %3) {
  %remaining_size = alloca i64, align 8
  %this = alloca ptr, align 8
  %entries = alloca ptr, align 8
  %items_remaining = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %entries, align 8
  store i64 %2, ptr %remaining_size, align 4
  store i64 %3, ptr %items_remaining, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapIterator_string_CGClassType_, ptr %5, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapIterator_string_CGClassType_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %entries, align 8
  store ptr %7, ptr %memberidx1, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %MapIterator_string_CGClassType_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %remaining_size, align 4
  store i64 %9, ptr %memberidx2, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %MapIterator_string_CGClassType_, ptr %10, i32 0, i32 3
  %11 = load i64, ptr %items_remaining, align 4
  store i64 %11, ptr %memberidx3, align 4
  ret void
}

define ptr @Map_string_CGClassType____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MapIterator_string_CGClassType_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_CGClassType_, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_CGClassType_, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_CGClassType_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx2, align 4
  call void @MapIterator_string_CGClassType__constructor(ptr %2, ptr %4, i64 %6, i64 %8)
  ret ptr %2
}

define void @Map_string_CGClassType____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_CGClassType_, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Map_string_CGClassType____setitem__(ptr %0, ptr %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  %should_add = alloca i1, align 1
  %ratio = alloca double, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  store ptr %2, ptr %value, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_CGClassType_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = sitofp i64 %5 to double
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_CGClassType_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %memberidx1, align 4
  %9 = sitofp i64 %8 to double
  %10 = fdiv double %6, %9
  store double %10, ptr %ratio, align 8
  %11 = load double, ptr %ratio, align 8
  %12 = fcmp ogt double %11, 7.500000e-01
  br i1 %12, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %13 = load ptr, ptr %this, align 8
  call void @Map_string_CGClassType__resize(ptr %13)
  br label %ifend

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %14 = load ptr, ptr %this, align 8
  %15 = load ptr, ptr %key, align 8
  %16 = call i64 @Map_string_CGClassType__hash_fnc(ptr %14, ptr %15)
  %17 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_CGClassType_, ptr %17, i32 0, i32 1
  %18 = load i64, ptr %memberidx2, align 4
  %19 = urem i64 %16, %18
  store i64 %19, ptr %hash, align 4
  store i1 true, ptr %should_add, align 1
  %20 = load i64, ptr %hash, align 4
  %21 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_CGClassType_, ptr %21, i32 0, i32 0
  %22 = load ptr, ptr %memberidx3, align 8
  %23 = getelementptr inbounds ptr, ptr %22, i64 %20
  %24 = load ptr, ptr %23, align 8
  %25 = icmp ne ptr %24, null
  br i1 %25, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend8, %ifend
  %26 = load i64, ptr %hash, align 4
  %27 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_CGClassType_, ptr %27, i32 0, i32 0
  %28 = load ptr, ptr %memberidx4, align 8
  %29 = getelementptr inbounds ptr, ptr %28, i64 %26
  %30 = load ptr, ptr %29, align 8
  %memberidx5 = getelementptr inbounds %MapEntry_string_CGClassType_, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx5, align 8
  %32 = load ptr, ptr %key, align 8
  %33 = call i1 @string___eq__(ptr %31, ptr %32)
  br i1 %33, label %if.entry6, label %else7

while.end:                                        ; preds = %ifend8, %if.entry6, %ifend
  %34 = load i1, ptr %should_add, align 1
  br i1 %34, label %if.entry11, label %else12

if.entry6:                                        ; preds = %while.entry
  store i1 false, ptr %should_add, align 1
  br label %while.end

else7:                                            ; preds = %while.entry
  br label %ifend8

ifend8:                                           ; preds = %else7
  %35 = load i64, ptr %hash, align 4
  %36 = add nuw i64 %35, 1
  %37 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Map_string_CGClassType_, ptr %37, i32 0, i32 1
  %38 = load i64, ptr %memberidx9, align 4
  %39 = urem i64 %36, %38
  store i64 %39, ptr %hash, align 4
  %40 = load i64, ptr %hash, align 4
  %41 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_CGClassType_, ptr %41, i32 0, i32 0
  %42 = load ptr, ptr %memberidx10, align 8
  %43 = getelementptr inbounds ptr, ptr %42, i64 %40
  %44 = load ptr, ptr %43, align 8
  %45 = icmp ne ptr %44, null
  br i1 %45, label %while.entry, label %while.end

if.entry11:                                       ; preds = %while.end
  %46 = load ptr, ptr %this, align 8
  %memberidx14 = getelementptr inbounds %Map_string_CGClassType_, ptr %46, i32 0, i32 2
  %47 = load i64, ptr %memberidx14, align 4
  %48 = load ptr, ptr %this, align 8
  %memberidx15 = getelementptr inbounds %Map_string_CGClassType_, ptr %48, i32 0, i32 2
  %49 = add nsw i64 %47, 1
  store i64 %49, ptr %memberidx15, align 4
  br label %ifend13

else12:                                           ; preds = %while.end
  br label %ifend13

ifend13:                                          ; preds = %else12, %if.entry11
  %50 = load i64, ptr %hash, align 4
  %51 = load ptr, ptr %this, align 8
  %memberidx16 = getelementptr inbounds %Map_string_CGClassType_, ptr %51, i32 0, i32 0
  %52 = load ptr, ptr %memberidx16, align 8
  %53 = getelementptr inbounds ptr, ptr %52, i64 %50
  %54 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MapEntry_string_CGClassType_, ptr null, i32 1) to i32))
  %55 = load ptr, ptr %key, align 8
  %56 = load ptr, ptr %value, align 8
  call void @MapEntry_string_CGClassType__constructor(ptr %54, ptr %55, ptr %56)
  store ptr %54, ptr %53, align 8
  ret void
}

define ptr @Map_string_CGClassType____getitem__(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %key, align 8
  %5 = call i64 @Map_string_CGClassType__hash_fnc(ptr %3, ptr %4)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_CGClassType_, ptr %6, i32 0, i32 1
  %7 = load i64, ptr %memberidx, align 4
  %8 = urem i64 %5, %7
  store i64 %8, ptr %hash, align 4
  %9 = load i64, ptr %hash, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_CGClassType_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 %9
  %13 = load ptr, ptr %12, align 8
  %14 = icmp ne ptr %13, null
  br i1 %14, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %2
  %15 = load i64, ptr %hash, align 4
  %16 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_CGClassType_, ptr %16, i32 0, i32 0
  %17 = load ptr, ptr %memberidx2, align 8
  %18 = getelementptr inbounds ptr, ptr %17, i64 %15
  %19 = load ptr, ptr %18, align 8
  %memberidx3 = getelementptr inbounds %MapEntry_string_CGClassType_, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx3, align 8
  %21 = load ptr, ptr %key, align 8
  %22 = call i1 @string___eq__(ptr %20, ptr %21)
  br i1 %22, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %if.entry, %2
  %23 = load i64, ptr %hash, align 4
  %24 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Map_string_CGClassType_, ptr %24, i32 0, i32 0
  %25 = load ptr, ptr %memberidx6, align 8
  %26 = getelementptr inbounds ptr, ptr %25, i64 %23
  %27 = load ptr, ptr %26, align 8
  %28 = icmp ne ptr %27, null
  br i1 %28, label %if.entry7, label %else8

if.entry:                                         ; preds = %while.entry
  br label %while.end

else:                                             ; preds = %while.entry
  %29 = load i64, ptr %hash, align 4
  %30 = add nuw i64 %29, 1
  %31 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_CGClassType_, ptr %31, i32 0, i32 1
  %32 = load i64, ptr %memberidx4, align 4
  %33 = urem i64 %30, %32
  store i64 %33, ptr %hash, align 4
  br label %ifend

ifend:                                            ; preds = %else
  %34 = load i64, ptr %hash, align 4
  %35 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Map_string_CGClassType_, ptr %35, i32 0, i32 0
  %36 = load ptr, ptr %memberidx5, align 8
  %37 = getelementptr inbounds ptr, ptr %36, i64 %34
  %38 = load ptr, ptr %37, align 8
  %39 = icmp ne ptr %38, null
  br i1 %39, label %while.entry, label %while.end

if.entry7:                                        ; preds = %while.end
  %40 = load i64, ptr %hash, align 4
  %41 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_CGClassType_, ptr %41, i32 0, i32 0
  %42 = load ptr, ptr %memberidx10, align 8
  %43 = getelementptr inbounds ptr, ptr %42, i64 %40
  %44 = load ptr, ptr %43, align 8
  %memberidx11 = getelementptr inbounds %MapEntry_string_CGClassType_, ptr %44, i32 0, i32 1
  %45 = load ptr, ptr %memberidx11, align 8
  ret ptr %45

else8:                                            ; preds = %while.end
  br label %ifend9

ifend9:                                           ; preds = %else8
  ret ptr null
}

define i64 @Map_string_CGClassType__hash_fnc(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  %str = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  %3 = load ptr, ptr %key, align 8
  %4 = getelementptr inbounds %string, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr %6(ptr %3)
  %8 = alloca ptr, align 8
  %9 = call i64 (ptr, ptr, ...) @asprintf(ptr %8, ptr @58, ptr %7)
  %10 = load ptr, ptr %8, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %11, ptr %10, i64 %9)
  tail call void @free(ptr %7)
  store ptr %11, ptr %str, align 8
  store i64 0, ptr %hash, align 4
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %12 = load i64, ptr %i, align 4
  %13 = load ptr, ptr %str, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx1, align 4
  %15 = icmp slt i64 %12, %14
  br i1 %15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i64, ptr %hash, align 4
  %17 = shl i64 %16, 1
  %18 = load ptr, ptr %str, align 8
  %19 = getelementptr inbounds %string, ptr %18, i32 0, i32 0
  %20 = load ptr, ptr %19, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %20, i32 0, i32 2
  %21 = load ptr, ptr %memberidx2, align 8
  %22 = load i64, ptr %i, align 4
  %23 = call i8 %21(ptr %18, i64 %22)
  %24 = zext i8 %23 to i64
  %25 = add nuw i64 %17, %24
  store i64 %25, ptr %hash, align 4
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %26 = load i64, ptr %i, align 4
  %27 = add nsw i64 %26, 1
  store i64 %27, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load ptr, ptr %str, align 8
  call void @string___del__(ptr %28)
  tail call void @free(ptr %28)
  %29 = load i64, ptr %hash, align 4
  ret i64 %29
}

define void @Map_string_CGClassType__constructor(ptr %0) {
  %this = alloca ptr, align 8
  %initial_capacity = alloca i64, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 256, ptr %initial_capacity, align 4
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_CGClassType_, ptr %2, i32 0, i32 0
  %3 = load i64, ptr %initial_capacity, align 4
  %4 = trunc i64 %3 to i32
  %mallocsize = mul i32 %4, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %5 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %5, ptr %memberidx, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %initial_capacity, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i64, ptr %i, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_CGClassType_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 %9
  store ptr null, ptr %12, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %13 = load i64, ptr %i, align 4
  %14 = add nsw i64 %13, 1
  store i64 %14, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_CGClassType_, ptr %15, i32 0, i32 1
  %16 = load i64, ptr %initial_capacity, align 4
  store i64 %16, ptr %memberidx2, align 4
  %17 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_CGClassType_, ptr %17, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_LLVMValueRef__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_LLVMValueRef_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_LLVMValueRef__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_LLVMValueRef_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_LLVMValueRef__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_LLVMValueRef_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_LLVMValueRef_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_LLVMValueRef_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_LLVMValueRef_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_LLVMValueRef____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_LLVMValueRef_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_LLVMValueRef__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_LLVMValueRef_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_LLVMValueRef_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_LLVMValueRef_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_LLVMValueRef____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_LLVMValueRef_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_LLVMValueRef_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_LLVMValueRef_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_LLVMValueRef_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_LLVMValueRef_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_LLVMValueRef_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_LLVMValueRef_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_LLVMValueRef_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_LLVMValueRef_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_LLVMValueRef_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_LLVMValueRef____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMValueRef__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_LLVMValueRef_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_LLVMValueRef_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_LLVMValueRef_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_LLVMValueRef_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_LLVMValueRef_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_LLVMValueRef_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_LLVMValueRef_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_LLVMValueRef_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_LLVMValueRef_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_LLVMValueRef____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_LLVMValueRef____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_LLVMValueRef____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_LLVMValueRef__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_LLVMValueRef__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_LLVMValueRef____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_LLVMValueRef_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_LLVMValueRef_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_LLVMValueRef__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_LLVMValueRef____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_LLVMValueRef____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_LLVMValueRef____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_LLVMValueRef____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_LLVMValueRef_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_LLVMValueRef_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_LLVMValueRef____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_LLVMValueRef____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_LLVMValueRef____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_LLVMValueRef_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_LLVMValueRef__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_LLVMValueRef__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_LLVMValueRef_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_LLVMValueRef__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_LLVMValueRef_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_LLVMValueRef_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_LLVMValueRef_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define ptr @CodeGen_get_string_val(ptr %0, ptr %1, ptr %2, ptr %3, ptr %4, i64 %5) {
  %val_ty = alloca ptr, align 8
  %malloc_list = alloca ptr, align 8
  %depth = alloca i64, align 8
  %this = alloca ptr, align 8
  %llvm_val = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %false_str = alloca ptr, align 8
  %true_str = alloca ptr, align 8
  %result = alloca ptr, align 8
  %str_builder = alloca ptr, align 8
  %fmt_args_length = alloca i64, align 8
  %fmt_args = alloca ptr, align 8
  %obj_class = alloca ptr, align 8
  %idx = alloca i64, align 8
  %result1 = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %field_ty = alloca ptr, align 8
  %member_val = alloca ptr, align 8
  %field_entry = alloca ptr, align 8
  %arg = alloca ptr, align 8
  %enum_meta = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %indices = alloca [1 x ptr], align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %llvm_val, align 8
  store ptr %3, ptr %val_ty, align 8
  store ptr %4, ptr %malloc_list, align 8
  store i64 %5, ptr %depth, align 4
  %7 = load ptr, ptr %val_ty, align 8
  %8 = call i1 @is_bool(ptr %7)
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %6
  %9 = load ptr, ptr %this, align 8
  %10 = load ptr, ptr %builder, align 8
  %11 = call ptr @string_from_bytes(ptr @342, i64 4)
  %12 = call ptr @CodeGen_createGlobalLLVMString(ptr %9, ptr %10, ptr %11)
  store ptr %12, ptr %true_str, align 8
  %13 = load ptr, ptr %this, align 8
  %14 = load ptr, ptr %builder, align 8
  %15 = call ptr @string_from_bytes(ptr @343, i64 5)
  %16 = call ptr @CodeGen_createGlobalLLVMString(ptr %13, ptr %14, ptr %15)
  store ptr %16, ptr %false_str, align 8
  %17 = load ptr, ptr %builder, align 8
  %18 = load ptr, ptr %llvm_val, align 8
  %19 = load ptr, ptr %true_str, align 8
  %20 = load ptr, ptr %false_str, align 8
  %21 = call ptr @LLVMBuildSelect(ptr %17, ptr %18, ptr %19, ptr %20, ptr @315)
  ret ptr %21

else:                                             ; preds = %6
  br label %ifend

ifend:                                            ; preds = %else
  %22 = load ptr, ptr %val_ty, align 8
  %23 = call i1 @is_object(ptr %22)
  br i1 %23, label %if.entry2, label %else3

if.entry2:                                        ; preds = %ifend
  %24 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %24, i32 0, i32 4
  %25 = load ptr, ptr %memberidx, align 8
  %26 = load ptr, ptr %val_ty, align 8
  %27 = call ptr @string_from_bytes(ptr @465, i64 6)
  %28 = call i1 @is_buitin(ptr %25, ptr %26, ptr %27)
  br i1 %28, label %if.entry5, label %else6

else3:                                            ; preds = %ifend
  br label %ifend4

ifend4:                                           ; preds = %else3
  %29 = load ptr, ptr %val_ty, align 8
  %30 = call i1 @is_function(ptr %29)
  br i1 %30, label %if.entry35, label %else36

if.entry5:                                        ; preds = %if.entry2
  %31 = load ptr, ptr %this, align 8
  %32 = load ptr, ptr %builder, align 8
  %33 = load ptr, ptr %llvm_val, align 8
  %34 = call ptr @CodeGen_codegen_string_to_cstring(ptr %31, ptr %32, ptr %33)
  store ptr %34, ptr %result1, align 8
  %35 = load ptr, ptr %malloc_list, align 8
  %36 = load ptr, ptr %result1, align 8
  call void @Array_LLVMValueRef____sl__(ptr %35, ptr %36)
  %37 = load ptr, ptr %result1, align 8
  ret ptr %37

else6:                                            ; preds = %if.entry2
  br label %ifend7

ifend7:                                           ; preds = %else6
  %38 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %CodeGen, ptr %38, i32 0, i32 4
  %39 = load ptr, ptr %memberidx8, align 8
  %40 = load ptr, ptr %val_ty, align 8
  %41 = call ptr @get_class_from_type(ptr %39, ptr %40)
  store ptr %41, ptr %obj_class, align 8
  %42 = alloca %StringBuilder, align 8
  %43 = load ptr, ptr %obj_class, align 8
  %memberidx9 = getelementptr inbounds %Class, ptr %43, i32 0, i32 1
  %44 = load ptr, ptr %memberidx9, align 8
  %memberidx10 = getelementptr inbounds %string, ptr %44, i32 0, i32 2
  %45 = load i64, ptr %memberidx10, align 4
  %46 = add nuw i64 %45, 14
  call void @StringBuilder_constructor(ptr %42, i64 %46)
  store ptr %42, ptr %str_builder, align 8
  %47 = load ptr, ptr %str_builder, align 8
  %48 = getelementptr inbounds %StringBuilder, ptr %47, i32 0, i32 0
  %49 = load ptr, ptr %48, align 8
  %memberidx11 = getelementptr inbounds { ptr, ptr, ptr, ptr }, ptr %49, i32 0, i32 1
  %50 = load ptr, ptr %memberidx11, align 8
  %51 = load ptr, ptr %obj_class, align 8
  %memberidx12 = getelementptr inbounds %Class, ptr %51, i32 0, i32 1
  %52 = load ptr, ptr %memberidx12, align 8
  %53 = getelementptr inbounds %string, ptr %52, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %memberidx13 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %54, i32 0, i32 5
  %55 = load ptr, ptr %memberidx13, align 8
  %56 = call ptr %55(ptr %52)
  %57 = alloca ptr, align 8
  %58 = call i64 (ptr, ptr, ...) @asprintf(ptr %57, ptr @530, ptr %56)
  %59 = load ptr, ptr %57, align 8
  %60 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %60, ptr %59, i64 %58)
  tail call void @free(ptr %56)
  call void %50(ptr %47, ptr %60)
  %61 = load i64, ptr %depth, align 4
  %62 = icmp eq i64 %61, 3
  br i1 %62, label %if.entry14, label %else15

if.entry14:                                       ; preds = %ifend7
  %63 = load ptr, ptr %str_builder, align 8
  %64 = getelementptr inbounds %StringBuilder, ptr %63, i32 0, i32 0
  %65 = load ptr, ptr %64, align 8
  %memberidx17 = getelementptr inbounds { ptr, ptr, ptr, ptr }, ptr %65, i32 0, i32 1
  %66 = load ptr, ptr %memberidx17, align 8
  %67 = call ptr @string_from_bytes(ptr @531, i64 6)
  call void %66(ptr %63, ptr %67)
  %68 = load ptr, ptr %this, align 8
  %69 = load ptr, ptr %builder, align 8
  %70 = load ptr, ptr %str_builder, align 8
  %71 = getelementptr inbounds %StringBuilder, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %memberidx18 = getelementptr inbounds { ptr, ptr, ptr, ptr }, ptr %72, i32 0, i32 3
  %73 = load ptr, ptr %memberidx18, align 8
  %74 = call ptr %73(ptr %70)
  %75 = call ptr @CodeGen_createGlobalLLVMString(ptr %68, ptr %69, ptr %74)
  ret ptr %75

else15:                                           ; preds = %ifend7
  br label %ifend16

ifend16:                                          ; preds = %else15
  %76 = load ptr, ptr %obj_class, align 8
  %memberidx19 = getelementptr inbounds %Class, ptr %76, i32 0, i32 6
  %77 = load ptr, ptr %memberidx19, align 8
  %memberidx20 = getelementptr inbounds %Map_string_PropId_, ptr %77, i32 0, i32 2
  %78 = load i64, ptr %memberidx20, align 4
  store i64 %78, ptr %fmt_args_length, align 4
  %79 = load i64, ptr %fmt_args_length, align 4
  %80 = alloca ptr, i64 %79, align 8
  store ptr %80, ptr %fmt_args, align 8
  store i64 0, ptr %idx, align 4
  br label %for.entry

for.entry:                                        ; preds = %ifend16
  %81 = load ptr, ptr %obj_class, align 8
  %memberidx21 = getelementptr inbounds %Class, ptr %81, i32 0, i32 6
  %82 = load ptr, ptr %memberidx21, align 8
  %83 = call ptr @Map_string_PropId____iter__(ptr %82)
  store ptr %83, ptr %tmp_it, align 8
  %84 = load ptr, ptr %tmp_it, align 8
  %85 = call ptr @MapIterator_string_PropId__next(ptr %84)
  store ptr %85, ptr %field_entry, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %86 = load ptr, ptr %tmp_it, align 8
  %memberidx22 = getelementptr inbounds %MapIterator_string_PropId_, ptr %86, i32 0, i32 0
  %87 = load i1, ptr %memberidx22, align 1
  %88 = xor i1 %87, true
  br i1 %88, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %89 = load ptr, ptr %this, align 8
  %memberidx23 = getelementptr inbounds %CodeGen, ptr %89, i32 0, i32 4
  %90 = load ptr, ptr %memberidx23, align 8
  %91 = load ptr, ptr %field_entry, align 8
  %memberidx24 = getelementptr inbounds %MapEntry_string_PropId_, ptr %91, i32 0, i32 1
  %92 = load ptr, ptr %memberidx24, align 8
  %93 = call ptr @get_class_prop_type(ptr %90, ptr %92)
  store ptr %93, ptr %field_ty, align 8
  %94 = load ptr, ptr %this, align 8
  %95 = load ptr, ptr %builder, align 8
  %96 = load ptr, ptr %llvm_val, align 8
  %97 = load ptr, ptr %val_ty, align 8
  %98 = load ptr, ptr %field_entry, align 8
  %memberidx25 = getelementptr inbounds %MapEntry_string_PropId_, ptr %98, i32 0, i32 0
  %99 = load ptr, ptr %memberidx25, align 8
  %100 = call ptr @CodeGen_get_member_with_name(ptr %94, ptr %95, ptr %96, ptr %97, ptr %99, ptr null)
  store ptr %100, ptr %member_val, align 8
  %101 = load ptr, ptr %this, align 8
  %102 = load ptr, ptr %builder, align 8
  %103 = load ptr, ptr %member_val, align 8
  %104 = load ptr, ptr %field_ty, align 8
  %105 = load ptr, ptr %malloc_list, align 8
  %106 = load i64, ptr %depth, align 4
  %107 = add nuw i64 %106, 1
  %108 = call ptr @CodeGen_get_string_val(ptr %101, ptr %102, ptr %103, ptr %104, ptr %105, i64 %107)
  store ptr %108, ptr %arg, align 8
  %109 = load ptr, ptr %field_ty, align 8
  %110 = call i1 @is_object(ptr %109)
  %111 = xor i1 %110, true
  %112 = load ptr, ptr %arg, align 8
  %113 = call ptr @LLVMTypeOf(ptr %112)
  %114 = call i64 @LLVMGetTypeKind(ptr %113)
  %115 = icmp eq i64 %114, 12
  %116 = and i1 %111, %115
  %117 = load ptr, ptr %arg, align 8
  %118 = call i1 @LLVMIsGlobalConstant(ptr %117)
  %119 = xor i1 %118, true
  %120 = and i1 %116, %119
  br i1 %120, label %if.entry26, label %else27

for.incr:                                         ; preds = %ifend28
  %121 = load ptr, ptr %tmp_it, align 8
  %122 = call ptr @MapIterator_string_PropId__next(ptr %121)
  store ptr %122, ptr %field_entry, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %123 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %123)
  %124 = load ptr, ptr %str_builder, align 8
  %125 = getelementptr inbounds %StringBuilder, ptr %124, i32 0, i32 0
  %126 = load ptr, ptr %125, align 8
  %memberidx33 = getelementptr inbounds { ptr, ptr, ptr, ptr }, ptr %126, i32 0, i32 1
  %127 = load ptr, ptr %memberidx33, align 8
  %128 = call ptr @string_from_bytes(ptr @562, i64 1)
  call void %127(ptr %124, ptr %128)
  %129 = load ptr, ptr %this, align 8
  %130 = load ptr, ptr %builder, align 8
  %131 = load ptr, ptr %str_builder, align 8
  %132 = getelementptr inbounds %StringBuilder, ptr %131, i32 0, i32 0
  %133 = load ptr, ptr %132, align 8
  %memberidx34 = getelementptr inbounds { ptr, ptr, ptr, ptr }, ptr %133, i32 0, i32 3
  %134 = load ptr, ptr %memberidx34, align 8
  %135 = call ptr %134(ptr %131)
  %136 = load ptr, ptr %fmt_args, align 8
  %137 = load i64, ptr %fmt_args_length, align 4
  %138 = call ptr @CodeGen_codegen_safe_fmt_string(ptr %129, ptr %130, ptr %135, ptr %136, i64 %137, ptr null)
  store ptr %138, ptr %result, align 8
  %139 = load ptr, ptr %malloc_list, align 8
  %140 = load ptr, ptr %result, align 8
  call void @Array_LLVMValueRef____sl__(ptr %139, ptr %140)
  %141 = load ptr, ptr %result, align 8
  ret ptr %141

if.entry26:                                       ; preds = %for.body
  %142 = load ptr, ptr %malloc_list, align 8
  %143 = load ptr, ptr %arg, align 8
  call void @Array_LLVMValueRef____sl__(ptr %142, ptr %143)
  br label %ifend28

else27:                                           ; preds = %for.body
  br label %ifend28

ifend28:                                          ; preds = %else27, %if.entry26
  %144 = load i64, ptr %idx, align 4
  %145 = add nsw i64 %144, 1
  store i64 %145, ptr %idx, align 4
  %146 = load ptr, ptr %fmt_args, align 8
  %147 = getelementptr inbounds ptr, ptr %146, i64 %144
  %148 = load ptr, ptr %arg, align 8
  store ptr %148, ptr %147, align 8
  %149 = load ptr, ptr %str_builder, align 8
  %150 = getelementptr inbounds %StringBuilder, ptr %149, i32 0, i32 0
  %151 = load ptr, ptr %150, align 8
  %memberidx29 = getelementptr inbounds { ptr, ptr, ptr, ptr }, ptr %151, i32 0, i32 1
  %152 = load ptr, ptr %memberidx29, align 8
  %153 = load ptr, ptr %field_entry, align 8
  %memberidx30 = getelementptr inbounds %MapEntry_string_PropId_, ptr %153, i32 0, i32 0
  %154 = load ptr, ptr %memberidx30, align 8
  %155 = getelementptr inbounds %string, ptr %154, i32 0, i32 0
  %156 = load ptr, ptr %155, align 8
  %memberidx31 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %156, i32 0, i32 5
  %157 = load ptr, ptr %memberidx31, align 8
  %158 = call ptr %157(ptr %154)
  %159 = load ptr, ptr %field_ty, align 8
  %160 = call ptr @get_format_from_type(ptr %159)
  %161 = getelementptr inbounds %string, ptr %160, i32 0, i32 0
  %162 = load ptr, ptr %161, align 8
  %memberidx32 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %162, i32 0, i32 5
  %163 = load ptr, ptr %memberidx32, align 8
  %164 = call ptr %163(ptr %160)
  %165 = alloca ptr, align 8
  %166 = call i64 (ptr, ptr, ...) @asprintf(ptr %165, ptr @561, ptr %158, ptr %164)
  %167 = load ptr, ptr %165, align 8
  %168 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %168, ptr %167, i64 %166)
  tail call void @free(ptr %158)
  tail call void @free(ptr %164)
  call void %152(ptr %149, ptr %168)
  br label %for.incr

if.entry35:                                       ; preds = %ifend4
  %169 = load ptr, ptr %this, align 8
  %170 = load ptr, ptr %builder, align 8
  %171 = call ptr @string_from_bytes(ptr @563, i64 10)
  %172 = call ptr @CodeGen_createGlobalLLVMString(ptr %169, ptr %170, ptr %171)
  ret ptr %172

else36:                                           ; preds = %ifend4
  br label %ifend37

ifend37:                                          ; preds = %else36
  %173 = load ptr, ptr %val_ty, align 8
  %memberidx38 = getelementptr inbounds %Type, ptr %173, i32 0, i32 0
  %174 = load i64, ptr %memberidx38, align 4
  %175 = icmp eq i64 %174, 12
  br i1 %175, label %if.entry39, label %else40

if.entry39:                                       ; preds = %ifend37
  %176 = load ptr, ptr %this, align 8
  %177 = load ptr, ptr %val_ty, align 8
  %memberidx42 = getelementptr inbounds %EnumType, ptr %177, i32 0, i32 1
  %178 = load ptr, ptr %memberidx42, align 8
  %179 = call ptr @CodeGen_get_or_codegen_enum_from_typeid(ptr %176, ptr %178)
  %memberidx43 = getelementptr inbounds %CGEnumType, ptr %179, i32 0, i32 2
  %180 = load ptr, ptr %memberidx43, align 8
  store ptr %180, ptr %enum_meta, align 8
  %181 = getelementptr inbounds [1 x ptr], ptr %indices, i64 0, i64 0
  %182 = load ptr, ptr %llvm_val, align 8
  store ptr %182, ptr %181, align 8
  %183 = getelementptr inbounds ptr, ptr %181, i64 1
  %184 = load ptr, ptr %builder, align 8
  %185 = load ptr, ptr %enum_meta, align 8
  %186 = call ptr @LLVMTypeOf(ptr %185)
  %187 = load ptr, ptr %enum_meta, align 8
  %188 = getelementptr inbounds [1 x ptr], ptr %indices, i64 0, i64 0
  %189 = load ptr, ptr %188, align 8
  %190 = getelementptr inbounds [1 x ptr], ptr %indices, i64 0, i64 0
  %191 = call ptr @LLVMBuildInBoundsGEP2(ptr %184, ptr %186, ptr %187, ptr %190, i64 1, ptr @315)
  store ptr %191, ptr %ptr, align 8
  %192 = load ptr, ptr %builder, align 8
  %193 = load ptr, ptr %ptr, align 8
  %194 = call ptr @LLVMTypeOf(ptr %193)
  %195 = load ptr, ptr %ptr, align 8
  %196 = call ptr @LLVMBuildLoad2(ptr %192, ptr %194, ptr %195, ptr @315)
  ret ptr %196

else40:                                           ; preds = %ifend37
  br label %ifend41

ifend41:                                          ; preds = %else40
  %197 = load ptr, ptr %llvm_val, align 8
  ret ptr %197
}

define ptr @CodeGen_get_var_expr_mem(ptr %0, ptr %1, ptr %2) {
  %this = alloca ptr, align 8
  %var_exp = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %var_exp, align 8
  %4 = load ptr, ptr %this, align 8
  %5 = load ptr, ptr %var_exp, align 8
  %memberidx = getelementptr inbounds %VarAccessExpression, ptr %5, i32 0, i32 4
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr @CodeGen_get_or_codegen_var(ptr %4, ptr %6)
  store ptr %7, ptr %ptr, align 8
  %8 = load ptr, ptr %ptr, align 8
  %9 = icmp eq ptr %8, null
  br i1 %9, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %10 = call ptr @string_from_bytes(ptr @568, i64 45)
  call void @panic(ptr %10)
  br label %ifend

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %11 = load ptr, ptr %ptr, align 8
  ret ptr %11
}

define ptr @CodeGen_get_index_expr_mem(ptr %0, ptr %1, ptr %2) {
  %index_exp = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %indices_1 = alloca [1 x ptr], align 8
  %ind_ptr = alloca ptr, align 8
  %ty = alloca ptr, align 8
  %expr_val_ty = alloca ptr, align 8
  %index = alloca ptr, align 8
  %indices = alloca [2 x ptr], align 8
  %int32ty = alloca ptr, align 8
  %indices1 = alloca [2 x ptr], align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %index_exp, align 8
  %4 = load ptr, ptr %this, align 8
  %5 = load ptr, ptr %builder, align 8
  %6 = load ptr, ptr %index_exp, align 8
  %memberidx = getelementptr inbounds %IndexExpression, ptr %6, i32 0, i32 5
  %7 = load ptr, ptr %memberidx, align 8
  %8 = call ptr @CodeGen_codegen_expression(ptr %4, ptr %5, ptr %7)
  store ptr %8, ptr %index, align 8
  %9 = load ptr, ptr %index_exp, align 8
  %memberidx2 = getelementptr inbounds %IndexExpression, ptr %9, i32 0, i32 4
  %10 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %10, i32 0, i32 3
  %11 = load ptr, ptr %memberidx3, align 8
  store ptr %11, ptr %expr_val_ty, align 8
  %12 = load ptr, ptr %expr_val_ty, align 8
  %13 = call i1 @is_pointer(ptr %12)
  br i1 %13, label %true_block, label %false_block

true_block:                                       ; preds = %3
  %14 = load ptr, ptr %this, align 8
  %15 = load ptr, ptr %expr_val_ty, align 8
  %memberidx4 = getelementptr inbounds %PointerType, ptr %15, i32 0, i32 1
  %16 = load ptr, ptr %memberidx4, align 8
  %17 = call ptr @CodeGen_codegen_type(ptr %14, ptr %16, i1 true)
  br label %end

false_block:                                      ; preds = %3
  %18 = load ptr, ptr %this, align 8
  %19 = load ptr, ptr %expr_val_ty, align 8
  %20 = call ptr @CodeGen_codegen_type(ptr %18, ptr %19, i1 true)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %17, %true_block ], [ %20, %false_block ]
  store ptr %ternary, ptr %ty, align 8
  store ptr null, ptr %ind_ptr, align 8
  %21 = load ptr, ptr %expr_val_ty, align 8
  %memberidx5 = getelementptr inbounds %Type, ptr %21, i32 0, i32 0
  %22 = load i64, ptr %memberidx5, align 4
  %23 = icmp eq i64 %22, 14
  br i1 %23, label %if.entry, label %else

if.entry:                                         ; preds = %end
  %24 = getelementptr inbounds [2 x ptr], ptr %indices, i64 0, i64 0
  %25 = load ptr, ptr %this, align 8
  %26 = call ptr @CodeGen_createLLVMInt(ptr %25, i64 0)
  store ptr %26, ptr %24, align 8
  %27 = getelementptr inbounds ptr, ptr %24, i64 1
  %28 = load ptr, ptr %index, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr inbounds ptr, ptr %27, i64 1
  %30 = load ptr, ptr %this, align 8
  %31 = load ptr, ptr %builder, align 8
  %32 = load ptr, ptr %index_exp, align 8
  %memberidx6 = getelementptr inbounds %IndexExpression, ptr %32, i32 0, i32 4
  %33 = load ptr, ptr %memberidx6, align 8
  %34 = call ptr @CodeGen_get_expr_mem(ptr %30, ptr %31, ptr %33)
  store ptr %34, ptr %ind_ptr, align 8
  %35 = load ptr, ptr %builder, align 8
  %36 = load ptr, ptr %ty, align 8
  %37 = load ptr, ptr %ind_ptr, align 8
  %38 = getelementptr inbounds [2 x ptr], ptr %indices, i64 0, i64 0
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr inbounds [2 x ptr], ptr %indices, i64 0, i64 0
  %41 = call ptr @LLVMBuildInBoundsGEP2(ptr %35, ptr %36, ptr %37, ptr %40, i64 2, ptr @315)
  ret ptr %41

else:                                             ; preds = %end
  br label %ifend

ifend:                                            ; preds = %else
  %42 = load ptr, ptr %expr_val_ty, align 8
  %memberidx7 = getelementptr inbounds %Type, ptr %42, i32 0, i32 0
  %43 = load i64, ptr %memberidx7, align 4
  %44 = icmp eq i64 %43, 15
  br i1 %44, label %if.entry8, label %else9

if.entry8:                                        ; preds = %ifend
  %45 = call ptr @LLVMInt32Type()
  store ptr %45, ptr %int32ty, align 8
  %46 = getelementptr inbounds [2 x ptr], ptr %indices1, i64 0, i64 0
  %47 = load ptr, ptr %int32ty, align 8
  %48 = call ptr @LLVMConstInt(ptr %47, i64 0, i1 false)
  store ptr %48, ptr %46, align 8
  %49 = getelementptr inbounds ptr, ptr %46, i64 1
  %50 = load ptr, ptr %index, align 8
  %51 = load ptr, ptr %int32ty, align 8
  %52 = call ptr @LLVMConstIntCast(ptr %50, ptr %51, i1 false)
  store ptr %52, ptr %49, align 8
  %53 = getelementptr inbounds ptr, ptr %49, i64 1
  %54 = load ptr, ptr %this, align 8
  %55 = load ptr, ptr %builder, align 8
  %56 = load ptr, ptr %index_exp, align 8
  %memberidx11 = getelementptr inbounds %IndexExpression, ptr %56, i32 0, i32 4
  %57 = load ptr, ptr %memberidx11, align 8
  %58 = call ptr @CodeGen_get_expr_mem(ptr %54, ptr %55, ptr %57)
  store ptr %58, ptr %ind_ptr, align 8
  %59 = load ptr, ptr %builder, align 8
  %60 = load ptr, ptr %ty, align 8
  %61 = load ptr, ptr %ind_ptr, align 8
  %62 = getelementptr inbounds [2 x ptr], ptr %indices1, i64 0, i64 0
  %63 = load ptr, ptr %62, align 8
  %64 = getelementptr inbounds [2 x ptr], ptr %indices1, i64 0, i64 0
  %65 = call ptr @LLVMBuildInBoundsGEP2(ptr %59, ptr %60, ptr %61, ptr %64, i64 2, ptr @315)
  ret ptr %65

else9:                                            ; preds = %ifend
  br label %ifend10

ifend10:                                          ; preds = %else9
  %66 = getelementptr inbounds [1 x ptr], ptr %indices_1, i64 0, i64 0
  %67 = load ptr, ptr %index, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr inbounds ptr, ptr %66, i64 1
  %69 = load ptr, ptr %this, align 8
  %70 = load ptr, ptr %builder, align 8
  %71 = load ptr, ptr %index_exp, align 8
  %memberidx12 = getelementptr inbounds %IndexExpression, ptr %71, i32 0, i32 4
  %72 = load ptr, ptr %memberidx12, align 8
  %73 = call ptr @CodeGen_codegen_expression(ptr %69, ptr %70, ptr %72)
  store ptr %73, ptr %ind_ptr, align 8
  %74 = load ptr, ptr %builder, align 8
  %75 = load ptr, ptr %ty, align 8
  %76 = load ptr, ptr %ind_ptr, align 8
  %77 = getelementptr inbounds [1 x ptr], ptr %indices_1, i64 0, i64 0
  %78 = load ptr, ptr %77, align 8
  %79 = getelementptr inbounds [1 x ptr], ptr %indices_1, i64 0, i64 0
  %80 = call ptr @LLVMBuildInBoundsGEP2(ptr %74, ptr %75, ptr %76, ptr %79, i64 1, ptr @315)
  ret ptr %80
}

define ptr @CodeGen_get_member_expr_mem(ptr %0, ptr %1, ptr %2, ptr %3) {
  %ptr = alloca ptr, align 8
  %this = alloca ptr, align 8
  %member_expr = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %prop_id_key = alloca ptr, align 8
  %method = alloca ptr, align 8
  %struct_type = alloca ptr, align 8
  %struct_class = alloca ptr, align 8
  %indices_buffer = alloca [2 x ptr], align 8
  %vtoffset = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %member_expr, align 8
  store ptr %3, ptr %ptr, align 8
  %5 = load ptr, ptr %this, align 8
  %6 = load ptr, ptr %member_expr, align 8
  %memberidx = getelementptr inbounds %MemberExpression, ptr %6, i32 0, i32 5
  %7 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %PropId, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx1, align 8
  %9 = call ptr @CodeGen_get_or_codegen_class_from_typeid(ptr %5, ptr %8)
  store ptr %9, ptr %struct_class, align 8
  %10 = load ptr, ptr %member_expr, align 8
  %memberidx2 = getelementptr inbounds %MemberExpression, ptr %10, i32 0, i32 5
  %11 = load ptr, ptr %memberidx2, align 8
  %12 = call ptr @create_prop_key(ptr %11)
  store ptr %12, ptr %prop_id_key, align 8
  %13 = load ptr, ptr %struct_class, align 8
  %memberidx3 = getelementptr inbounds %CGClassType, ptr %13, i32 0, i32 0
  %14 = load ptr, ptr %memberidx3, align 8
  store ptr %14, ptr %struct_type, align 8
  %15 = load ptr, ptr %struct_class, align 8
  %memberidx4 = getelementptr inbounds %CGClassType, ptr %15, i32 0, i32 3
  %16 = load ptr, ptr %memberidx4, align 8
  %17 = load ptr, ptr %prop_id_key, align 8
  %18 = call ptr @Map_string_LLVMValueRef____getitem__(ptr %16, ptr %17)
  store ptr %18, ptr %method, align 8
  %19 = load ptr, ptr %method, align 8
  %20 = icmp ne ptr %19, null
  br i1 %20, label %if.entry, label %else

if.entry:                                         ; preds = %4
  %21 = load ptr, ptr %method, align 8
  ret ptr %21

else:                                             ; preds = %4
  br label %ifend

ifend:                                            ; preds = %else
  %22 = load ptr, ptr %ptr, align 8
  %23 = icmp eq ptr %22, null
  br i1 %23, label %if.entry5, label %else6

if.entry5:                                        ; preds = %ifend
  %24 = load ptr, ptr %this, align 8
  %25 = load ptr, ptr %builder, align 8
  %26 = load ptr, ptr %member_expr, align 8
  %memberidx8 = getelementptr inbounds %MemberExpression, ptr %26, i32 0, i32 4
  %27 = load ptr, ptr %memberidx8, align 8
  %28 = call ptr @CodeGen_codegen_expression(ptr %24, ptr %25, ptr %27)
  store ptr %28, ptr %ptr, align 8
  br label %ifend7

else6:                                            ; preds = %ifend
  br label %ifend7

ifend7:                                           ; preds = %else6, %if.entry5
  %29 = getelementptr inbounds [2 x ptr], ptr %indices_buffer, i64 0, i64 0
  %30 = call ptr @LLVMInt32Type()
  %31 = call ptr @LLVMConstInt(ptr %30, i64 0, i1 false)
  store ptr %31, ptr %29, align 8
  %32 = getelementptr inbounds ptr, ptr %29, i64 1
  store ptr null, ptr %32, align 8
  %33 = getelementptr inbounds ptr, ptr %32, i64 1
  %34 = load ptr, ptr %member_expr, align 8
  %memberidx9 = getelementptr inbounds %Expression, ptr %34, i32 0, i32 3
  %35 = load ptr, ptr %memberidx9, align 8
  %36 = call i1 @is_function(ptr %35)
  %37 = xor i1 %36, true
  br i1 %37, label %if.entry10, label %else11

if.entry10:                                       ; preds = %ifend7
  %38 = load ptr, ptr %struct_class, align 8
  %memberidx13 = getelementptr inbounds %CGClassType, ptr %38, i32 0, i32 5
  %39 = load ptr, ptr %memberidx13, align 8
  %40 = icmp eq ptr %39, null
  br i1 %40, label %true_block, label %false_block

else11:                                           ; preds = %ifend7
  %41 = getelementptr inbounds [2 x ptr], ptr %indices_buffer, i64 0, i64 1
  %42 = call ptr @LLVMInt32Type()
  %43 = call ptr @LLVMConstInt(ptr %42, i64 0, i1 false)
  store ptr %43, ptr %41, align 8
  %44 = load ptr, ptr %builder, align 8
  %45 = load ptr, ptr %struct_type, align 8
  %46 = load ptr, ptr %ptr, align 8
  %47 = getelementptr inbounds [2 x ptr], ptr %indices_buffer, i64 0, i64 0
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr inbounds [2 x ptr], ptr %indices_buffer, i64 0, i64 0
  %50 = call ptr @LLVMBuildInBoundsGEP2(ptr %44, ptr %45, ptr %46, ptr %49, i64 2, ptr @315)
  store ptr %50, ptr %ptr, align 8
  %51 = load ptr, ptr %builder, align 8
  %52 = load ptr, ptr %struct_class, align 8
  %memberidx15 = getelementptr inbounds %CGClassType, ptr %52, i32 0, i32 5
  %53 = load ptr, ptr %memberidx15, align 8
  %54 = call ptr @LLVMPointerType(ptr %53, i64 0)
  %55 = load ptr, ptr %ptr, align 8
  %56 = call ptr @LLVMBuildLoad2(ptr %51, ptr %54, ptr %55, ptr @315)
  store ptr %56, ptr %ptr, align 8
  %57 = getelementptr inbounds [2 x ptr], ptr %indices_buffer, i64 0, i64 1
  %58 = call ptr @LLVMInt32Type()
  %59 = load ptr, ptr %struct_class, align 8
  %memberidx16 = getelementptr inbounds %CGClassType, ptr %59, i32 0, i32 1
  %60 = load ptr, ptr %memberidx16, align 8
  %61 = load ptr, ptr %prop_id_key, align 8
  %62 = call i64 @Map_string_uint____getitem__(ptr %60, ptr %61)
  %63 = call ptr @LLVMConstInt(ptr %58, i64 %62, i1 false)
  store ptr %63, ptr %57, align 8
  %64 = load ptr, ptr %struct_class, align 8
  %memberidx17 = getelementptr inbounds %CGClassType, ptr %64, i32 0, i32 5
  %65 = load ptr, ptr %memberidx17, align 8
  store ptr %65, ptr %struct_type, align 8
  br label %ifend12

ifend12:                                          ; preds = %else11, %end
  %66 = load ptr, ptr %builder, align 8
  %67 = load ptr, ptr %struct_type, align 8
  %68 = load ptr, ptr %ptr, align 8
  %69 = getelementptr inbounds [2 x ptr], ptr %indices_buffer, i64 0, i64 0
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr inbounds [2 x ptr], ptr %indices_buffer, i64 0, i64 0
  %72 = call ptr @LLVMBuildInBoundsGEP2(ptr %66, ptr %67, ptr %68, ptr %71, i64 2, ptr @570)
  ret ptr %72

true_block:                                       ; preds = %if.entry10
  br label %end

false_block:                                      ; preds = %if.entry10
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi i64 [ 0, %true_block ], [ 1, %false_block ]
  store i64 %ternary, ptr %vtoffset, align 4
  %73 = getelementptr inbounds [2 x ptr], ptr %indices_buffer, i64 0, i64 1
  %74 = call ptr @LLVMInt32Type()
  %75 = load ptr, ptr %struct_class, align 8
  %memberidx14 = getelementptr inbounds %CGClassType, ptr %75, i32 0, i32 2
  %76 = load ptr, ptr %memberidx14, align 8
  %77 = load ptr, ptr %prop_id_key, align 8
  %78 = call i64 @Map_string_uint____getitem__(ptr %76, ptr %77)
  %79 = load i64, ptr %vtoffset, align 4
  %80 = add nuw i64 %78, %79
  %81 = call ptr @LLVMConstInt(ptr %74, i64 %80, i1 false)
  store ptr %81, ptr %73, align 8
  br label %ifend12
}

define ptr @CodeGen_codegen_bool(ptr %0, ptr %1) {
  %bool_exp = alloca ptr, align 8
  %this = alloca ptr, align 8
  %val = alloca i1, align 1
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bool_exp, align 8
  %3 = load ptr, ptr %bool_exp, align 8
  %memberidx = getelementptr inbounds %BooleanExpression, ptr %3, i32 0, i32 4
  %4 = load i1, ptr %memberidx, align 1
  store i1 %4, ptr %val, align 1
  %5 = load ptr, ptr %this, align 8
  %6 = load i1, ptr %val, align 1
  %7 = call ptr @CodeGen_createLLVMBool(ptr %5, i1 %6)
  ret ptr %7
}

define ptr @CodeGen_get_expr_mem(ptr %0, ptr %1, ptr %2) {
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %exp = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %exp, align 8
  %4 = load ptr, ptr %exp, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp eq i64 %5, 8
  br i1 %6, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %7 = load ptr, ptr %this, align 8
  %8 = load ptr, ptr %builder, align 8
  %9 = load ptr, ptr %exp, align 8
  %10 = call ptr @CodeGen_get_var_expr_mem(ptr %7, ptr %8, ptr %9)
  ret ptr %10

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %11 = load ptr, ptr %exp, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx1, align 4
  %13 = icmp eq i64 %12, 14
  br i1 %13, label %if.entry2, label %else3

if.entry2:                                        ; preds = %ifend
  %14 = load ptr, ptr %this, align 8
  %15 = load ptr, ptr %builder, align 8
  %16 = load ptr, ptr %exp, align 8
  %17 = call ptr @CodeGen_get_index_expr_mem(ptr %14, ptr %15, ptr %16)
  ret ptr %17

else3:                                            ; preds = %ifend
  br label %ifend4

ifend4:                                           ; preds = %else3
  %18 = load ptr, ptr %exp, align 8
  %memberidx5 = getelementptr inbounds %Expression, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx5, align 4
  %20 = icmp eq i64 %19, 13
  br i1 %20, label %if.entry6, label %else7

if.entry6:                                        ; preds = %ifend4
  %21 = load ptr, ptr %this, align 8
  %22 = load ptr, ptr %builder, align 8
  %23 = load ptr, ptr %exp, align 8
  %24 = call ptr @CodeGen_get_member_expr_mem(ptr %21, ptr %22, ptr %23, ptr null)
  ret ptr %24

else7:                                            ; preds = %ifend4
  br label %ifend8

ifend8:                                           ; preds = %else7
  %25 = load ptr, ptr %this, align 8
  %26 = load ptr, ptr %builder, align 8
  %27 = load ptr, ptr %exp, align 8
  %28 = call ptr @CodeGen_codegen_expression(ptr %25, ptr %26, ptr %27)
  ret ptr %28
}

define ptr @CodeGen_codegen_builtin_array(ptr %0, ptr %1, ptr %2, ptr %3) {
  %this = alloca ptr, align 8
  %arr_expr = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %arrgen_ty = alloca ptr, align 8
  %arg_ptr = alloca ptr, align 8
  %args = alloca [2 x ptr], align 8
  %objllvm_ty = alloca ptr, align 8
  %obj_ty = alloca ptr, align 8
  %len_value = alloca ptr, align 8
  %self = alloca ptr, align 8
  %buff_ptr = alloca ptr, align 8
  %len_val = alloca i64, align 8
  %size_value = alloca ptr, align 8
  %len_ptr = alloca ptr, align 8
  %elmllvm_ty = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %arrgen_ty, align 8
  store ptr %3, ptr %arr_expr, align 8
  %5 = load ptr, ptr %arrgen_ty, align 8
  %memberidx = getelementptr inbounds %GenericType, ptr %5, i32 0, i32 3
  %6 = load ptr, ptr %memberidx, align 8
  store ptr %6, ptr %obj_ty, align 8
  %7 = load ptr, ptr %this, align 8
  %8 = load ptr, ptr %obj_ty, align 8
  %9 = call ptr @CodeGen_codegen_type(ptr %7, ptr %8, i1 false)
  store ptr %9, ptr %objllvm_ty, align 8
  %10 = load ptr, ptr %this, align 8
  %11 = load ptr, ptr %arrgen_ty, align 8
  %memberidx1 = getelementptr inbounds %GenericType, ptr %11, i32 0, i32 2
  %12 = load ptr, ptr %memberidx1, align 8
  %13 = call ptr @Array_Type____getitem__(ptr %12, i64 0)
  %14 = call ptr @CodeGen_codegen_type(ptr %10, ptr %13, i1 true)
  store ptr %14, ptr %elmllvm_ty, align 8
  %15 = load ptr, ptr %builder, align 8
  %16 = load ptr, ptr %objllvm_ty, align 8
  %17 = call ptr @LLVMBuildMalloc(ptr %15, ptr %16, ptr @315)
  store ptr %17, ptr %self, align 8
  %18 = load ptr, ptr %arr_expr, align 8
  %memberidx2 = getelementptr inbounds %ArrayExpression, ptr %18, i32 0, i32 4
  %19 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_Expression_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx3, align 4
  store i64 %20, ptr %len_val, align 4
  %21 = load ptr, ptr %this, align 8
  %22 = load i64, ptr %len_val, align 4
  %23 = icmp sgt i64 %22, 0
  br i1 %23, label %true_block, label %false_block

true_block:                                       ; preds = %4
  %24 = load i64, ptr %len_val, align 4
  br label %end

false_block:                                      ; preds = %4
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi i64 [ %24, %true_block ], [ 1, %false_block ]
  %25 = call ptr @CodeGen_createLLVMInt(ptr %21, i64 %ternary)
  store ptr %25, ptr %size_value, align 8
  %26 = load ptr, ptr %this, align 8
  %27 = load i64, ptr %len_val, align 4
  %28 = call ptr @CodeGen_createLLVMInt(ptr %26, i64 %27)
  store ptr %28, ptr %len_value, align 8
  %29 = getelementptr inbounds [2 x ptr], ptr %args, i64 0, i64 0
  %30 = load ptr, ptr %self, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr inbounds ptr, ptr %29, i64 1
  %32 = load ptr, ptr %size_value, align 8
  %33 = load ptr, ptr %elmllvm_ty, align 8
  %34 = call ptr @LLVMSizeOf(ptr %33)
  %35 = call ptr @LLVMConstMul(ptr %32, ptr %34)
  store ptr %35, ptr %31, align 8
  %36 = getelementptr inbounds ptr, ptr %31, i64 1
  %37 = load ptr, ptr %this, align 8
  %38 = load ptr, ptr %builder, align 8
  %39 = load ptr, ptr %obj_ty, align 8
  %40 = getelementptr inbounds [2 x ptr], ptr %args, i64 0, i64 0
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr inbounds [2 x ptr], ptr %args, i64 0, i64 0
  call void @CodeGen_build_constructor_call(ptr %37, ptr %38, ptr %39, ptr %42, i64 2)
  %43 = load ptr, ptr %this, align 8
  %44 = load ptr, ptr %builder, align 8
  %45 = load ptr, ptr %self, align 8
  %46 = load ptr, ptr %obj_ty, align 8
  %47 = call ptr @string_from_bytes(ptr @571, i64 6)
  %48 = call ptr @CodeGen_get_member_mem_with_name(ptr %43, ptr %44, ptr %45, ptr %46, ptr %47, ptr null)
  store ptr %48, ptr %buff_ptr, align 8
  %49 = load ptr, ptr %builder, align 8
  %50 = load ptr, ptr %elmllvm_ty, align 8
  %51 = call ptr @LLVMPointerType(ptr %50, i64 0)
  %52 = load ptr, ptr %buff_ptr, align 8
  %53 = call ptr @LLVMBuildLoad2(ptr %49, ptr %51, ptr %52, ptr @315)
  store ptr %53, ptr %arg_ptr, align 8
  %54 = load ptr, ptr %this, align 8
  %55 = load ptr, ptr %builder, align 8
  %56 = load ptr, ptr %arg_ptr, align 8
  %57 = load ptr, ptr %arr_expr, align 8
  %58 = call ptr @CodeGen_store_array_elements(ptr %54, ptr %55, ptr %56, ptr %57)
  %59 = load ptr, ptr %this, align 8
  %60 = load ptr, ptr %builder, align 8
  %61 = load ptr, ptr %self, align 8
  %62 = load ptr, ptr %obj_ty, align 8
  %63 = call ptr @string_from_bytes(ptr @572, i64 6)
  %64 = call ptr @CodeGen_get_member_mem_with_name(ptr %59, ptr %60, ptr %61, ptr %62, ptr %63, ptr null)
  store ptr %64, ptr %len_ptr, align 8
  %65 = load ptr, ptr %builder, align 8
  %66 = load ptr, ptr %len_value, align 8
  %67 = load ptr, ptr %len_ptr, align 8
  %68 = call ptr @LLVMBuildStore(ptr %65, ptr %66, ptr %67)
  %69 = load ptr, ptr %self, align 8
  ret ptr %69
}

define void @CodeGen_declare_class(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %checked_class = alloca ptr, align 8
  %prop_types = alloca ptr, align 8
  %struct_class = alloca ptr, align 8
  %arg_types = alloca ptr, align 8
  %constructor_type = alloca ptr, align 8
  %constructor_llvm_method_type = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %checked_class, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%CGClassType, ptr null, i32 1) to i32))
  call void @CGClassType_constructor(ptr %3)
  store ptr %3, ptr %struct_class, align 8
  %4 = load ptr, ptr %struct_class, align 8
  %memberidx = getelementptr inbounds %CGClassType, ptr %4, i32 0, i32 0
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %5, i32 0, i32 0
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = call ptr @LLVMGetModuleContext(ptr %6)
  %8 = load ptr, ptr %checked_class, align 8
  %memberidx2 = getelementptr inbounds %Class, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = getelementptr inbounds %string, ptr %9, i32 0, i32 0
  %11 = load ptr, ptr %10, align 8
  %memberidx3 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %11, i32 0, i32 5
  %12 = load ptr, ptr %memberidx3, align 8
  %13 = call ptr %12(ptr %9)
  %14 = call ptr @LLVMStructCreateNamed(ptr %7, ptr %13)
  store ptr %14, ptr %memberidx, align 8
  %15 = load ptr, ptr %this, align 8
  %16 = load ptr, ptr %checked_class, align 8
  %memberidx4 = getelementptr inbounds %Class, ptr %16, i32 0, i32 0
  %17 = load ptr, ptr %memberidx4, align 8
  %18 = load ptr, ptr %struct_class, align 8
  call void @CodeGen_add_class(ptr %15, ptr %17, ptr %18)
  %19 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMTypeRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMTypeRef__constructor(ptr %19, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx5 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %19, i32 0, i32 1
  %20 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %19, i32 0, i32 2
  store i64 0, ptr %memberidx6, align 4
  store ptr %19, ptr %prop_types, align 8
  %21 = load ptr, ptr %this, align 8
  %22 = load ptr, ptr %struct_class, align 8
  %23 = load ptr, ptr %checked_class, align 8
  call void @CodeGen_declare_static_props(ptr %21, ptr %22, ptr %23)
  %24 = load ptr, ptr %this, align 8
  %25 = load ptr, ptr %struct_class, align 8
  %26 = load ptr, ptr %checked_class, align 8
  %27 = load ptr, ptr %prop_types, align 8
  call void @CodeGen_declare_class_props(ptr %24, ptr %25, ptr %26, ptr %27)
  %28 = load ptr, ptr %struct_class, align 8
  %memberidx7 = getelementptr inbounds %CGClassType, ptr %28, i32 0, i32 0
  %29 = load ptr, ptr %memberidx7, align 8
  %30 = load ptr, ptr %prop_types, align 8
  %memberidx8 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %30, i32 0, i32 1
  %31 = load ptr, ptr %memberidx8, align 8
  %32 = load ptr, ptr %prop_types, align 8
  %memberidx9 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %32, i32 0, i32 2
  %33 = load i64, ptr %memberidx9, align 4
  call void @LLVMStructSetBody(ptr %29, ptr %31, i64 %33, i1 true)
  %34 = load ptr, ptr %prop_types, align 8
  call void @Array_LLVMTypeRef____del__(ptr %34)
  tail call void @free(ptr %34)
  %35 = load ptr, ptr %checked_class, align 8
  %memberidx10 = getelementptr inbounds %Class, ptr %35, i32 0, i32 3
  %36 = load ptr, ptr %memberidx10, align 8
  %37 = icmp ne ptr %36, null
  br i1 %37, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %38 = load ptr, ptr %this, align 8
  %memberidx11 = getelementptr inbounds %CodeGen, ptr %38, i32 0, i32 4
  %39 = load ptr, ptr %memberidx11, align 8
  %40 = load ptr, ptr %checked_class, align 8
  %memberidx12 = getelementptr inbounds %Class, ptr %40, i32 0, i32 3
  %41 = load ptr, ptr %memberidx12, align 8
  %42 = call ptr @get_class_prop_type(ptr %39, ptr %41)
  store ptr %42, ptr %constructor_type, align 8
  %43 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Type_, ptr null, i32 1) to i32))
  call void @Array_Type__constructor(ptr %43, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx13 = getelementptr inbounds %Array_Type_, ptr %43, i32 0, i32 1
  %44 = load ptr, ptr %memberidx13, align 8
  %45 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ObjectType, ptr null, i32 1) to i32))
  %46 = load ptr, ptr %checked_class, align 8
  %memberidx14 = getelementptr inbounds %Class, ptr %46, i32 0, i32 0
  %47 = load ptr, ptr %memberidx14, align 8
  call void @ObjectType_constructor(ptr %45, ptr %47)
  store ptr %45, ptr %44, align 8
  %48 = getelementptr inbounds ptr, ptr %44, i64 1
  %memberidx15 = getelementptr inbounds %Array_Type_, ptr %43, i32 0, i32 2
  store i64 1, ptr %memberidx15, align 4
  store ptr %43, ptr %arg_types, align 8
  %49 = load ptr, ptr %arg_types, align 8
  %50 = load ptr, ptr %constructor_type, align 8
  %memberidx16 = getelementptr inbounds %FunctionType, ptr %50, i32 0, i32 1
  %51 = load ptr, ptr %memberidx16, align 8
  %52 = call ptr @Array_Type____adda__(ptr %49, ptr %51)
  %53 = load ptr, ptr %constructor_type, align 8
  %memberidx17 = getelementptr inbounds %FunctionType, ptr %53, i32 0, i32 1
  %54 = load ptr, ptr %memberidx17, align 8
  call void @Array_Type____del__(ptr %54)
  tail call void @free(ptr %54)
  %55 = load ptr, ptr %constructor_type, align 8
  %memberidx18 = getelementptr inbounds %FunctionType, ptr %55, i32 0, i32 1
  %56 = load ptr, ptr %arg_types, align 8
  store ptr %56, ptr %memberidx18, align 8
  %57 = load ptr, ptr %this, align 8
  %58 = load ptr, ptr %constructor_type, align 8
  %59 = call ptr @CodeGen_codegen_type(ptr %57, ptr %58, i1 false)
  store ptr %59, ptr %constructor_llvm_method_type, align 8
  %60 = load ptr, ptr %struct_class, align 8
  %memberidx19 = getelementptr inbounds %CGClassType, ptr %60, i32 0, i32 6
  %61 = load ptr, ptr %this, align 8
  %62 = load ptr, ptr %checked_class, align 8
  %memberidx20 = getelementptr inbounds %Class, ptr %62, i32 0, i32 1
  %63 = load ptr, ptr %memberidx20, align 8
  %64 = getelementptr inbounds %string, ptr %63, i32 0, i32 0
  %65 = load ptr, ptr %64, align 8
  %memberidx21 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %65, i32 0, i32 5
  %66 = load ptr, ptr %memberidx21, align 8
  %67 = call ptr %66(ptr %63)
  %68 = alloca ptr, align 8
  %69 = call i64 (ptr, ptr, ...) @asprintf(ptr %68, ptr @646, ptr %67)
  %70 = load ptr, ptr %68, align 8
  %71 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %71, ptr %70, i64 %69)
  tail call void @free(ptr %67)
  %72 = load ptr, ptr %constructor_llvm_method_type, align 8
  %73 = call ptr @CodeGen_declare_method(ptr %61, ptr %71, ptr %72)
  store ptr %73, ptr %memberidx19, align 8
  br label %ifend

else:                                             ; preds = %2
  %74 = load ptr, ptr %struct_class, align 8
  %memberidx22 = getelementptr inbounds %CGClassType, ptr %74, i32 0, i32 6
  store ptr null, ptr %memberidx22, align 8
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  ret void
}

define void @CodeGen_destroy(ptr %0) {
  %this = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %var_entry = alloca ptr, align 8
  %string_entry = alloca ptr, align 8
  %tmp_it1 = alloca ptr, align 8
  %func_entry = alloca ptr, align 8
  %tmp_it2 = alloca ptr, align 8
  %class_entry = alloca ptr, align 8
  %tmp_it3 = alloca ptr, align 8
  %enum_entry = alloca ptr, align 8
  %tmp_it4 = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %2, i32 0, i32 6
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr @Map_string_LLVMValueRef____iter__(ptr %3)
  store ptr %4, ptr %tmp_it, align 8
  %5 = load ptr, ptr %tmp_it, align 8
  %6 = call ptr @MapIterator_string_LLVMValueRef__next(ptr %5)
  store ptr %6, ptr %var_entry, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %7 = load ptr, ptr %tmp_it, align 8
  %memberidx5 = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %7, i32 0, i32 0
  %8 = load i1, ptr %memberidx5, align 1
  %9 = xor i1 %8, true
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load ptr, ptr %var_entry, align 8
  %memberidx6 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %memberidx6, align 8
  call void @string___del__(ptr %11)
  tail call void @free(ptr %11)
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %12 = load ptr, ptr %tmp_it, align 8
  %13 = call ptr @MapIterator_string_LLVMValueRef__next(ptr %12)
  store ptr %13, ptr %var_entry, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %14 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %14)
  %15 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %CodeGen, ptr %15, i32 0, i32 6
  %16 = load ptr, ptr %memberidx7, align 8
  call void @Map_string_LLVMValueRef____del__(ptr %16)
  tail call void @free(ptr %16)
  br label %for.entry8

for.entry8:                                       ; preds = %for.end
  %17 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %CodeGen, ptr %17, i32 0, i32 7
  %18 = load ptr, ptr %memberidx9, align 8
  %19 = call ptr @Map_string_LLVMValueRef____iter__(ptr %18)
  store ptr %19, ptr %tmp_it1, align 8
  %20 = load ptr, ptr %tmp_it1, align 8
  %21 = call ptr @MapIterator_string_LLVMValueRef__next(ptr %20)
  store ptr %21, ptr %string_entry, align 8
  br label %for.cond10

for.cond10:                                       ; preds = %for.incr12, %for.entry8
  %22 = load ptr, ptr %tmp_it1, align 8
  %memberidx14 = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %22, i32 0, i32 0
  %23 = load i1, ptr %memberidx14, align 1
  %24 = xor i1 %23, true
  br i1 %24, label %for.body11, label %for.end13

for.body11:                                       ; preds = %for.cond10
  %25 = load ptr, ptr %string_entry, align 8
  %memberidx15 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %25, i32 0, i32 0
  %26 = load ptr, ptr %memberidx15, align 8
  call void @string___del__(ptr %26)
  tail call void @free(ptr %26)
  br label %for.incr12

for.incr12:                                       ; preds = %for.body11
  %27 = load ptr, ptr %tmp_it1, align 8
  %28 = call ptr @MapIterator_string_LLVMValueRef__next(ptr %27)
  store ptr %28, ptr %string_entry, align 8
  br label %for.cond10

for.end13:                                        ; preds = %for.cond10
  %29 = load ptr, ptr %tmp_it1, align 8
  tail call void @free(ptr %29)
  %30 = load ptr, ptr %this, align 8
  %memberidx16 = getelementptr inbounds %CodeGen, ptr %30, i32 0, i32 7
  %31 = load ptr, ptr %memberidx16, align 8
  call void @Map_string_LLVMValueRef____del__(ptr %31)
  tail call void @free(ptr %31)
  br label %for.entry17

for.entry17:                                      ; preds = %for.end13
  %32 = load ptr, ptr %this, align 8
  %memberidx18 = getelementptr inbounds %CodeGen, ptr %32, i32 0, i32 10
  %33 = load ptr, ptr %memberidx18, align 8
  %34 = call ptr @Map_string_LLVMValueRef____iter__(ptr %33)
  store ptr %34, ptr %tmp_it2, align 8
  %35 = load ptr, ptr %tmp_it2, align 8
  %36 = call ptr @MapIterator_string_LLVMValueRef__next(ptr %35)
  store ptr %36, ptr %func_entry, align 8
  br label %for.cond19

for.cond19:                                       ; preds = %for.incr21, %for.entry17
  %37 = load ptr, ptr %tmp_it2, align 8
  %memberidx23 = getelementptr inbounds %MapIterator_string_LLVMValueRef_, ptr %37, i32 0, i32 0
  %38 = load i1, ptr %memberidx23, align 1
  %39 = xor i1 %38, true
  br i1 %39, label %for.body20, label %for.end22

for.body20:                                       ; preds = %for.cond19
  %40 = load ptr, ptr %func_entry, align 8
  %memberidx24 = getelementptr inbounds %MapEntry_string_LLVMValueRef_, ptr %40, i32 0, i32 0
  %41 = load ptr, ptr %memberidx24, align 8
  call void @string___del__(ptr %41)
  tail call void @free(ptr %41)
  br label %for.incr21

for.incr21:                                       ; preds = %for.body20
  %42 = load ptr, ptr %tmp_it2, align 8
  %43 = call ptr @MapIterator_string_LLVMValueRef__next(ptr %42)
  store ptr %43, ptr %func_entry, align 8
  br label %for.cond19

for.end22:                                        ; preds = %for.cond19
  %44 = load ptr, ptr %tmp_it2, align 8
  tail call void @free(ptr %44)
  %45 = load ptr, ptr %this, align 8
  %memberidx25 = getelementptr inbounds %CodeGen, ptr %45, i32 0, i32 10
  %46 = load ptr, ptr %memberidx25, align 8
  call void @Map_string_LLVMValueRef____del__(ptr %46)
  tail call void @free(ptr %46)
  br label %for.entry26

for.entry26:                                      ; preds = %for.end22
  %47 = load ptr, ptr %this, align 8
  %memberidx27 = getelementptr inbounds %CodeGen, ptr %47, i32 0, i32 8
  %48 = load ptr, ptr %memberidx27, align 8
  %49 = call ptr @Map_string_CGClassType____iter__(ptr %48)
  store ptr %49, ptr %tmp_it3, align 8
  %50 = load ptr, ptr %tmp_it3, align 8
  %51 = call ptr @MapIterator_string_CGClassType__next(ptr %50)
  store ptr %51, ptr %class_entry, align 8
  br label %for.cond28

for.cond28:                                       ; preds = %for.incr30, %for.entry26
  %52 = load ptr, ptr %tmp_it3, align 8
  %memberidx32 = getelementptr inbounds %MapIterator_string_CGClassType_, ptr %52, i32 0, i32 0
  %53 = load i1, ptr %memberidx32, align 1
  %54 = xor i1 %53, true
  br i1 %54, label %for.body29, label %for.end31

for.body29:                                       ; preds = %for.cond28
  %55 = load ptr, ptr %class_entry, align 8
  %memberidx33 = getelementptr inbounds %MapEntry_string_CGClassType_, ptr %55, i32 0, i32 0
  %56 = load ptr, ptr %memberidx33, align 8
  call void @string___del__(ptr %56)
  tail call void @free(ptr %56)
  %57 = load ptr, ptr %class_entry, align 8
  %memberidx34 = getelementptr inbounds %MapEntry_string_CGClassType_, ptr %57, i32 0, i32 1
  %58 = load ptr, ptr %memberidx34, align 8
  tail call void @free(ptr %58)
  br label %for.incr30

for.incr30:                                       ; preds = %for.body29
  %59 = load ptr, ptr %tmp_it3, align 8
  %60 = call ptr @MapIterator_string_CGClassType__next(ptr %59)
  store ptr %60, ptr %class_entry, align 8
  br label %for.cond28

for.end31:                                        ; preds = %for.cond28
  %61 = load ptr, ptr %tmp_it3, align 8
  tail call void @free(ptr %61)
  %62 = load ptr, ptr %this, align 8
  %memberidx35 = getelementptr inbounds %CodeGen, ptr %62, i32 0, i32 8
  %63 = load ptr, ptr %memberidx35, align 8
  call void @Map_string_CGClassType____del__(ptr %63)
  tail call void @free(ptr %63)
  br label %for.entry36

for.entry36:                                      ; preds = %for.end31
  %64 = load ptr, ptr %this, align 8
  %memberidx37 = getelementptr inbounds %CodeGen, ptr %64, i32 0, i32 9
  %65 = load ptr, ptr %memberidx37, align 8
  %66 = call ptr @Map_string_CGEnumType____iter__(ptr %65)
  store ptr %66, ptr %tmp_it4, align 8
  %67 = load ptr, ptr %tmp_it4, align 8
  %68 = call ptr @MapIterator_string_CGEnumType__next(ptr %67)
  store ptr %68, ptr %enum_entry, align 8
  br label %for.cond38

for.cond38:                                       ; preds = %for.incr40, %for.entry36
  %69 = load ptr, ptr %tmp_it4, align 8
  %memberidx42 = getelementptr inbounds %MapIterator_string_CGEnumType_, ptr %69, i32 0, i32 0
  %70 = load i1, ptr %memberidx42, align 1
  %71 = xor i1 %70, true
  br i1 %71, label %for.body39, label %for.end41

for.body39:                                       ; preds = %for.cond38
  %72 = load ptr, ptr %enum_entry, align 8
  %memberidx43 = getelementptr inbounds %MapEntry_string_CGEnumType_, ptr %72, i32 0, i32 0
  %73 = load ptr, ptr %memberidx43, align 8
  call void @string___del__(ptr %73)
  tail call void @free(ptr %73)
  %74 = load ptr, ptr %enum_entry, align 8
  %memberidx44 = getelementptr inbounds %MapEntry_string_CGEnumType_, ptr %74, i32 0, i32 1
  %75 = load ptr, ptr %memberidx44, align 8
  tail call void @free(ptr %75)
  br label %for.incr40

for.incr40:                                       ; preds = %for.body39
  %76 = load ptr, ptr %tmp_it4, align 8
  %77 = call ptr @MapIterator_string_CGEnumType__next(ptr %76)
  store ptr %77, ptr %enum_entry, align 8
  br label %for.cond38

for.end41:                                        ; preds = %for.cond38
  %78 = load ptr, ptr %tmp_it4, align 8
  tail call void @free(ptr %78)
  %79 = load ptr, ptr %this, align 8
  %memberidx45 = getelementptr inbounds %CodeGen, ptr %79, i32 0, i32 9
  %80 = load ptr, ptr %memberidx45, align 8
  call void @Map_string_CGEnumType____del__(ptr %80)
  tail call void @free(ptr %80)
  ret void
}

define ptr @CodeGen_codegen_memcmp_call(ptr %0, ptr %1, ptr %2) {
  %args = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %memcmp = alloca ptr, align 8
  %i8_ptr_ty = alloca ptr, align 8
  %int_ty = alloca ptr, align 8
  %arg_types = alloca [3 x ptr], align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %args, align 8
  %4 = call ptr @LLVMInt8Type()
  %5 = call ptr @LLVMPointerType(ptr %4, i64 0)
  store ptr %5, ptr %i8_ptr_ty, align 8
  %6 = load i64, ptr @ARCH_WORD_SIZE, align 4
  %7 = call ptr @LLVMIntType(i64 %6)
  store ptr %7, ptr %int_ty, align 8
  %8 = getelementptr inbounds [3 x ptr], ptr %arg_types, i64 0, i64 0
  %9 = load ptr, ptr %i8_ptr_ty, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr inbounds ptr, ptr %8, i64 1
  %11 = load ptr, ptr %i8_ptr_ty, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr inbounds ptr, ptr %10, i64 1
  %13 = load ptr, ptr %int_ty, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr inbounds ptr, ptr %12, i64 1
  %15 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %15, i32 0, i32 0
  %16 = load ptr, ptr %memberidx, align 8
  %17 = call ptr @string_from_bytes(ptr @528, i64 6)
  %18 = getelementptr inbounds [3 x ptr], ptr %arg_types, i64 0, i64 0
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr inbounds [3 x ptr], ptr %arg_types, i64 0, i64 0
  %21 = load ptr, ptr %int_ty, align 8
  %22 = call ptr @get_intrinsic(ptr %16, ptr %17, ptr %20, i64 3, ptr %21, i1 false)
  store ptr %22, ptr %memcmp, align 8
  %23 = load ptr, ptr %builder, align 8
  %24 = load ptr, ptr %memcmp, align 8
  %memberidx1 = getelementptr inbounds %IntrinsicResult, ptr %24, i32 0, i32 1
  %25 = load ptr, ptr %memberidx1, align 8
  %26 = load ptr, ptr %memcmp, align 8
  %memberidx2 = getelementptr inbounds %IntrinsicResult, ptr %26, i32 0, i32 0
  %27 = load ptr, ptr %memberidx2, align 8
  %28 = load ptr, ptr %args, align 8
  %29 = call ptr @LLVMBuildCall2(ptr %23, ptr %25, ptr %27, ptr %28, i64 3, ptr @315)
  ret ptr %29
}

define ptr @CodeGen_codegen_del_call(ptr %0, ptr %1, ptr %2, ptr %3) {
  %obj_ty = alloca ptr, align 8
  %self = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %args = alloca [1 x ptr], align 8
  %func = alloca ptr, align 8
  %func_ty = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %self, align 8
  store ptr %3, ptr %obj_ty, align 8
  %5 = load ptr, ptr %this, align 8
  %6 = load ptr, ptr %builder, align 8
  %7 = load ptr, ptr %self, align 8
  %8 = load ptr, ptr %obj_ty, align 8
  %9 = call ptr @string_from_bytes(ptr @388, i64 7)
  %10 = load ptr, ptr %func_ty, align 8
  %11 = call ptr @CodeGen_get_member_with_name(ptr %5, ptr %6, ptr %7, ptr %8, ptr %9, ptr %func_ty)
  store ptr %11, ptr %func, align 8
  %12 = load ptr, ptr %func, align 8
  %13 = icmp eq ptr %12, null
  br i1 %13, label %if.entry, label %else

if.entry:                                         ; preds = %4
  ret ptr null

else:                                             ; preds = %4
  br label %ifend

ifend:                                            ; preds = %else
  %14 = getelementptr inbounds [1 x ptr], ptr %args, i64 0, i64 0
  %15 = load ptr, ptr %self, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds ptr, ptr %14, i64 1
  %17 = load ptr, ptr %builder, align 8
  %18 = load ptr, ptr %this, align 8
  %19 = load ptr, ptr %func_ty, align 8
  %20 = call ptr @CodeGen_codegen_type(ptr %18, ptr %19, i1 false)
  %21 = load ptr, ptr %func, align 8
  %22 = getelementptr inbounds [1 x ptr], ptr %args, i64 0, i64 0
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr inbounds [1 x ptr], ptr %args, i64 0, i64 0
  %25 = call ptr @LLVMBuildCall2(ptr %17, ptr %20, ptr %21, ptr %24, i64 1, ptr @315)
  ret ptr %25
}

define ptr @CodeGen_codegen_float(ptr %0, ptr %1) {
  %float_exp = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %float_exp, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %float_exp, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %4, i32 0, i32 3
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @CodeGen_codegen_type(ptr %3, ptr %5, i1 true)
  %7 = load ptr, ptr %float_exp, align 8
  %memberidx1 = getelementptr inbounds %FloatExpression, ptr %7, i32 0, i32 4
  %8 = load double, ptr %memberidx1, align 8
  %9 = call ptr @LLVMConstReal(ptr %6, double %8)
  ret ptr %9
}

define void @CodeGen_codegen_match_case(ptr %0, ptr %1, ptr %2, ptr %3, ptr %4) {
  %switch = alloca ptr, align 8
  %block = alloca ptr, align 8
  %this = alloca ptr, align 8
  %expression = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %bin_expression = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %switch, align 8
  store ptr %3, ptr %expression, align 8
  store ptr %4, ptr %block, align 8
  %6 = load ptr, ptr %expression, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %6, i32 0, i32 2
  %7 = load i64, ptr %memberidx, align 4
  %8 = icmp eq i64 %7, 9
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %5
  %9 = load ptr, ptr %expression, align 8
  store ptr %9, ptr %bin_expression, align 8
  %10 = load ptr, ptr %bin_expression, align 8
  %memberidx1 = getelementptr inbounds %BinaryExpression, ptr %10, i32 0, i32 5
  %11 = load i64, ptr %memberidx1, align 4
  %12 = icmp eq i64 %11, 15
  br i1 %12, label %if.entry2, label %else3

else:                                             ; preds = %5
  br label %ifend

ifend:                                            ; preds = %else, %ifend4
  %13 = load ptr, ptr %switch, align 8
  %14 = load ptr, ptr %this, align 8
  %15 = load ptr, ptr %builder, align 8
  %16 = load ptr, ptr %expression, align 8
  %17 = call ptr @CodeGen_codegen_expression(ptr %14, ptr %15, ptr %16)
  %18 = load ptr, ptr %block, align 8
  call void @LLVMAddCase(ptr %13, ptr %17, ptr %18)
  ret void

if.entry2:                                        ; preds = %if.entry
  %19 = load ptr, ptr %this, align 8
  %20 = load ptr, ptr %builder, align 8
  %21 = load ptr, ptr %switch, align 8
  %22 = load ptr, ptr %bin_expression, align 8
  %memberidx5 = getelementptr inbounds %BinaryExpression, ptr %22, i32 0, i32 4
  %23 = load ptr, ptr %memberidx5, align 8
  %24 = load ptr, ptr %block, align 8
  call void @CodeGen_codegen_match_case(ptr %19, ptr %20, ptr %21, ptr %23, ptr %24)
  %25 = load ptr, ptr %this, align 8
  %26 = load ptr, ptr %builder, align 8
  %27 = load ptr, ptr %switch, align 8
  %28 = load ptr, ptr %bin_expression, align 8
  %memberidx6 = getelementptr inbounds %BinaryExpression, ptr %28, i32 0, i32 6
  %29 = load ptr, ptr %memberidx6, align 8
  %30 = load ptr, ptr %block, align 8
  call void @CodeGen_codegen_match_case(ptr %25, ptr %26, ptr %27, ptr %29, ptr %30)
  ret void

else3:                                            ; preds = %if.entry
  br label %ifend4

ifend4:                                           ; preds = %else3
  br label %ifend
}

define ptr @CodeGen_get_class_from_typeid(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %type_id = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %type_id, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %3, i32 0, i32 8
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %type_id, align 8
  %6 = call ptr @create_type_id_key(ptr %5)
  %7 = call ptr @Map_string_CGClassType____getitem__(ptr %4, ptr %6)
  ret ptr %7
}

define ptr @CodeGen_get_enum_from_typeid(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %type_id = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %type_id, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %3, i32 0, i32 9
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %type_id, align 8
  %6 = call ptr @create_type_id_key(ptr %5)
  %7 = call ptr @Map_string_CGEnumType____getitem__(ptr %4, ptr %6)
  ret ptr %7
}

define ptr @CodeGen_get_or_codegen_class_from_typeid(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %ty_id = alloca ptr, align 8
  %class_ = alloca ptr, align 8
  %cg_class = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %ty_id, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %ty_id, align 8
  %5 = call ptr @CodeGen_get_class_from_typeid(ptr %3, ptr %4)
  store ptr %5, ptr %cg_class, align 8
  %6 = load ptr, ptr %cg_class, align 8
  %7 = icmp ne ptr %6, null
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %cg_class, align 8
  ret ptr %8

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %9 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %9, i32 0, i32 4
  %10 = load ptr, ptr %memberidx, align 8
  %11 = load ptr, ptr %ty_id, align 8
  %12 = call ptr @get_class(ptr %10, ptr %11)
  store ptr %12, ptr %class_, align 8
  %13 = load ptr, ptr %this, align 8
  %14 = load ptr, ptr %class_, align 8
  %15 = call ptr @CodeGen_construct_class(ptr %13, ptr %14)
  ret ptr %15
}

define ptr @CodeGen_get_or_codegen_enum_from_typeid(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %ty_id = alloca ptr, align 8
  %cg_enum = alloca ptr, align 8
  %enum_ = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %ty_id, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %ty_id, align 8
  %5 = call ptr @CodeGen_get_enum_from_typeid(ptr %3, ptr %4)
  store ptr %5, ptr %cg_enum, align 8
  %6 = load ptr, ptr %cg_enum, align 8
  %7 = icmp ne ptr %6, null
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %cg_enum, align 8
  ret ptr %8

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %9 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %9, i32 0, i32 4
  %10 = load ptr, ptr %memberidx, align 8
  %11 = load ptr, ptr %ty_id, align 8
  %12 = call ptr @get_enum(ptr %10, ptr %11)
  store ptr %12, ptr %enum_, align 8
  %13 = load ptr, ptr %this, align 8
  %14 = load ptr, ptr %enum_, align 8
  %15 = call ptr @CodeGen_construct_enum(ptr %13, ptr %14)
  ret ptr %15
}

define ptr @CodeGen_get_member_mem_with_name(ptr %0, ptr %1, ptr %2, ptr %3, ptr %4, ptr %5) {
  %name = alloca ptr, align 8
  %save_type = alloca ptr, align 8
  %self = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %obj_type = alloca ptr, align 8
  %prop_id = alloca ptr, align 8
  %prop_ty = alloca ptr, align 8
  %member_expr = alloca ptr, align 8
  %obj_class = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %self, align 8
  store ptr %3, ptr %obj_type, align 8
  store ptr %4, ptr %name, align 8
  store ptr %5, ptr %save_type, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %7, i32 0, i32 4
  %8 = load ptr, ptr %memberidx, align 8
  %9 = load ptr, ptr %obj_type, align 8
  %10 = call ptr @get_class_from_type(ptr %8, ptr %9)
  store ptr %10, ptr %obj_class, align 8
  %11 = load ptr, ptr %obj_class, align 8
  %memberidx1 = getelementptr inbounds %Class, ptr %11, i32 0, i32 6
  %12 = load ptr, ptr %memberidx1, align 8
  %13 = load ptr, ptr %name, align 8
  %14 = call ptr @Map_string_PropId____getitem__(ptr %12, ptr %13)
  store ptr %14, ptr %prop_id, align 8
  %15 = load ptr, ptr %prop_id, align 8
  %16 = icmp eq ptr %15, null
  br i1 %16, label %if.entry, label %else

if.entry:                                         ; preds = %6
  ret ptr null

else:                                             ; preds = %6
  br label %ifend

ifend:                                            ; preds = %else
  %17 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %CodeGen, ptr %17, i32 0, i32 4
  %18 = load ptr, ptr %memberidx2, align 8
  %19 = load ptr, ptr %prop_id, align 8
  %20 = call ptr @get_class_prop_type(ptr %18, ptr %19)
  store ptr %20, ptr %prop_ty, align 8
  %21 = load ptr, ptr %save_type, align 8
  %22 = icmp ne ptr %21, null
  br i1 %22, label %if.entry3, label %else4

if.entry3:                                        ; preds = %ifend
  %23 = load ptr, ptr %save_type, align 8
  %24 = getelementptr inbounds ptr, ptr %23, i64 0
  %25 = load ptr, ptr %prop_ty, align 8
  store ptr %25, ptr %24, align 8
  br label %ifend5

else4:                                            ; preds = %ifend
  br label %ifend5

ifend5:                                           ; preds = %else4, %if.entry3
  %26 = alloca %MemberExpression, align 8
  %27 = load ptr, ptr %prop_id, align 8
  %28 = load ptr, ptr %prop_ty, align 8
  call void @MemberExpression_constructor(ptr %26, ptr null, ptr %27, ptr %28)
  store ptr %26, ptr %member_expr, align 8
  %29 = load ptr, ptr %this, align 8
  %30 = load ptr, ptr %builder, align 8
  %31 = load ptr, ptr %member_expr, align 8
  %32 = load ptr, ptr %self, align 8
  %33 = call ptr @CodeGen_get_member_expr_mem(ptr %29, ptr %30, ptr %31, ptr %32)
  ret ptr %33
}

define ptr @CodeGen_get_member_with_name(ptr %0, ptr %1, ptr %2, ptr %3, ptr %4, ptr %5) {
  %name = alloca ptr, align 8
  %save_type = alloca ptr, align 8
  %self = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %obj_type = alloca ptr, align 8
  %expr = alloca ptr, align 8
  %prop_id = alloca ptr, align 8
  %prop_ty = alloca ptr, align 8
  %member_expr = alloca ptr, align 8
  %obj_class = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %self, align 8
  store ptr %3, ptr %obj_type, align 8
  store ptr %4, ptr %name, align 8
  store ptr %5, ptr %save_type, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %7, i32 0, i32 4
  %8 = load ptr, ptr %memberidx, align 8
  %9 = load ptr, ptr %obj_type, align 8
  %10 = call ptr @get_class_from_type(ptr %8, ptr %9)
  store ptr %10, ptr %obj_class, align 8
  %11 = load ptr, ptr %obj_class, align 8
  %memberidx1 = getelementptr inbounds %Class, ptr %11, i32 0, i32 6
  %12 = load ptr, ptr %memberidx1, align 8
  %13 = load ptr, ptr %name, align 8
  %14 = call ptr @Map_string_PropId____getitem__(ptr %12, ptr %13)
  store ptr %14, ptr %prop_id, align 8
  %15 = load ptr, ptr %prop_id, align 8
  %16 = icmp eq ptr %15, null
  br i1 %16, label %if.entry, label %else

if.entry:                                         ; preds = %6
  ret ptr null

else:                                             ; preds = %6
  br label %ifend

ifend:                                            ; preds = %else
  %17 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %CodeGen, ptr %17, i32 0, i32 4
  %18 = load ptr, ptr %memberidx2, align 8
  %19 = load ptr, ptr %prop_id, align 8
  %20 = call ptr @get_class_prop_type(ptr %18, ptr %19)
  store ptr %20, ptr %prop_ty, align 8
  %21 = load ptr, ptr %save_type, align 8
  %22 = icmp ne ptr %21, null
  br i1 %22, label %if.entry3, label %else4

if.entry3:                                        ; preds = %ifend
  %23 = load ptr, ptr %save_type, align 8
  %24 = getelementptr inbounds ptr, ptr %23, i64 0
  %25 = load ptr, ptr %prop_ty, align 8
  store ptr %25, ptr %24, align 8
  br label %ifend5

else4:                                            ; preds = %ifend
  br label %ifend5

ifend5:                                           ; preds = %else4, %if.entry3
  %26 = alloca %Expression, align 8
  call void @Expression_constructor(ptr %26, i64 8)
  store ptr %26, ptr %expr, align 8
  %27 = load ptr, ptr %expr, align 8
  %memberidx6 = getelementptr inbounds %Expression, ptr %27, i32 0, i32 3
  %28 = load ptr, ptr %obj_type, align 8
  store ptr %28, ptr %memberidx6, align 8
  %29 = alloca %MemberExpression, align 8
  %30 = load ptr, ptr %expr, align 8
  %31 = load ptr, ptr %prop_id, align 8
  %32 = load ptr, ptr %prop_ty, align 8
  call void @MemberExpression_constructor(ptr %29, ptr %30, ptr %31, ptr %32)
  store ptr %29, ptr %member_expr, align 8
  %33 = load ptr, ptr %this, align 8
  %34 = load ptr, ptr %builder, align 8
  %35 = load ptr, ptr %member_expr, align 8
  %36 = load ptr, ptr %self, align 8
  %37 = call ptr @CodeGen_codegen_member_exp(ptr %33, ptr %34, ptr %35, ptr %36)
  ret ptr %37
}

define ptr @CodeGen_createLLVMBool(ptr %0, i1 %1) {
  %val = alloca i1, align 1
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store i1 %1, ptr %val, align 1
  %3 = call ptr @LLVMInt1Type()
  %4 = load i1, ptr %val, align 1
  br i1 %4, label %true_block, label %false_block

true_block:                                       ; preds = %2
  br label %end

false_block:                                      ; preds = %2
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi i64 [ 1, %true_block ], [ 0, %false_block ]
  %5 = call ptr @LLVMConstInt(ptr %3, i64 %ternary, i1 false)
  ret ptr %5
}

define void @CodeGen_codegen_for_stmt(ptr %0, ptr %1, ptr %2) {
  %this = alloca ptr, align 8
  %for_stmt = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %prev_continue_bb = alloca ptr, align 8
  %prev_break_bb = alloca ptr, align 8
  %for_cond_block = alloca ptr, align 8
  %for_incr_block = alloca ptr, align 8
  %for_end_block = alloca ptr, align 8
  %for_entry_block = alloca ptr, align 8
  %for_body_block = alloca ptr, align 8
  %condition = alloca ptr, align 8
  %it_load_exp = alloca ptr, align 8
  %var_id = alloca ptr, align 8
  %mem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %for_stmt, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @LLVMAppendBasicBlock(ptr %5, ptr @619)
  store ptr %6, ptr %for_entry_block, align 8
  %7 = load ptr, ptr %builder, align 8
  %8 = load ptr, ptr %for_entry_block, align 8
  %9 = call ptr @LLVMBuildBr(ptr %7, ptr %8)
  %10 = load ptr, ptr %builder, align 8
  %11 = load ptr, ptr %for_entry_block, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %10, ptr %11)
  %12 = load ptr, ptr %for_stmt, align 8
  %memberidx1 = getelementptr inbounds %ForStatement, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx1, align 8
  %14 = icmp ne ptr %13, null
  br i1 %14, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %15 = load ptr, ptr %this, align 8
  %16 = load ptr, ptr %builder, align 8
  %17 = load ptr, ptr %for_stmt, align 8
  %memberidx2 = getelementptr inbounds %ForStatement, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx2, align 8
  call void @CodeGen_codegen_statement(ptr %15, ptr %16, ptr %18)
  br label %ifend

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %19 = load ptr, ptr %for_stmt, align 8
  %memberidx3 = getelementptr inbounds %ForStatement, ptr %19, i32 0, i32 2
  %20 = load ptr, ptr %memberidx3, align 8
  %21 = icmp ne ptr %20, null
  br i1 %21, label %if.entry4, label %else5

if.entry4:                                        ; preds = %ifend
  %22 = load ptr, ptr %this, align 8
  %23 = load ptr, ptr %builder, align 8
  %24 = load ptr, ptr %for_stmt, align 8
  %memberidx7 = getelementptr inbounds %ForStatement, ptr %24, i32 0, i32 2
  %25 = load ptr, ptr %memberidx7, align 8
  call void @CodeGen_codegen_statement(ptr %22, ptr %23, ptr %25)
  br label %ifend6

else5:                                            ; preds = %ifend
  br label %ifend6

ifend6:                                           ; preds = %else5, %if.entry4
  %26 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %CodeGen, ptr %26, i32 0, i32 1
  %27 = load ptr, ptr %memberidx8, align 8
  %28 = call ptr @LLVMAppendBasicBlock(ptr %27, ptr @620)
  store ptr %28, ptr %for_cond_block, align 8
  %29 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %CodeGen, ptr %29, i32 0, i32 1
  %30 = load ptr, ptr %memberidx9, align 8
  %31 = call ptr @LLVMAppendBasicBlock(ptr %30, ptr @621)
  store ptr %31, ptr %for_body_block, align 8
  %32 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %CodeGen, ptr %32, i32 0, i32 1
  %33 = load ptr, ptr %memberidx10, align 8
  %34 = call ptr @LLVMAppendBasicBlock(ptr %33, ptr @622)
  store ptr %34, ptr %for_incr_block, align 8
  %35 = load ptr, ptr %this, align 8
  %memberidx11 = getelementptr inbounds %CodeGen, ptr %35, i32 0, i32 1
  %36 = load ptr, ptr %memberidx11, align 8
  %37 = call ptr @LLVMAppendBasicBlock(ptr %36, ptr @623)
  store ptr %37, ptr %for_end_block, align 8
  %38 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %CodeGen, ptr %38, i32 0, i32 2
  %39 = load ptr, ptr %memberidx12, align 8
  store ptr %39, ptr %prev_break_bb, align 8
  %40 = load ptr, ptr %this, align 8
  %memberidx13 = getelementptr inbounds %CodeGen, ptr %40, i32 0, i32 3
  %41 = load ptr, ptr %memberidx13, align 8
  store ptr %41, ptr %prev_continue_bb, align 8
  %42 = load ptr, ptr %this, align 8
  %memberidx14 = getelementptr inbounds %CodeGen, ptr %42, i32 0, i32 2
  %43 = load ptr, ptr %for_end_block, align 8
  store ptr %43, ptr %memberidx14, align 8
  %44 = load ptr, ptr %this, align 8
  %memberidx15 = getelementptr inbounds %CodeGen, ptr %44, i32 0, i32 3
  %45 = load ptr, ptr %for_incr_block, align 8
  store ptr %45, ptr %memberidx15, align 8
  %46 = load ptr, ptr %builder, align 8
  %47 = load ptr, ptr %for_cond_block, align 8
  %48 = call ptr @LLVMBuildBr(ptr %46, ptr %47)
  %49 = load ptr, ptr %builder, align 8
  %50 = load ptr, ptr %for_cond_block, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %49, ptr %50)
  %51 = load ptr, ptr %this, align 8
  %52 = call ptr @CodeGen_createLLVMBool(ptr %51, i1 true)
  store ptr %52, ptr %condition, align 8
  %53 = load ptr, ptr %for_stmt, align 8
  %memberidx16 = getelementptr inbounds %ForStatement, ptr %53, i32 0, i32 3
  %54 = load ptr, ptr %memberidx16, align 8
  %55 = icmp ne ptr %54, null
  br i1 %55, label %if.entry17, label %else18

if.entry17:                                       ; preds = %ifend6
  %56 = load ptr, ptr %this, align 8
  %57 = load ptr, ptr %builder, align 8
  %58 = load ptr, ptr %for_stmt, align 8
  %memberidx20 = getelementptr inbounds %ForStatement, ptr %58, i32 0, i32 3
  %59 = load ptr, ptr %memberidx20, align 8
  %60 = call ptr @CodeGen_codegen_expression(ptr %56, ptr %57, ptr %59)
  store ptr %60, ptr %condition, align 8
  br label %ifend19

else18:                                           ; preds = %ifend6
  br label %ifend19

ifend19:                                          ; preds = %else18, %if.entry17
  %61 = load ptr, ptr %builder, align 8
  %62 = load ptr, ptr %condition, align 8
  %63 = load ptr, ptr %for_body_block, align 8
  %64 = load ptr, ptr %for_end_block, align 8
  %65 = call ptr @LLVMBuildCondBr(ptr %61, ptr %62, ptr %63, ptr %64)
  %66 = load ptr, ptr %builder, align 8
  %67 = load ptr, ptr %for_body_block, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %66, ptr %67)
  %68 = load ptr, ptr %this, align 8
  %69 = load ptr, ptr %builder, align 8
  %70 = load ptr, ptr %for_stmt, align 8
  %memberidx21 = getelementptr inbounds %ForStatement, ptr %70, i32 0, i32 5
  %71 = load ptr, ptr %memberidx21, align 8
  %72 = call ptr @CodeGen_codegen_block(ptr %68, ptr %69, ptr %71)
  %73 = load ptr, ptr %for_stmt, align 8
  %memberidx22 = getelementptr inbounds %ForStatement, ptr %73, i32 0, i32 5
  %74 = load ptr, ptr %memberidx22, align 8
  %75 = call i1 @is_terminated(ptr %74)
  %76 = xor i1 %75, true
  br i1 %76, label %if.entry23, label %else24

if.entry23:                                       ; preds = %ifend19
  %77 = load ptr, ptr %builder, align 8
  %78 = load ptr, ptr %for_incr_block, align 8
  %79 = call ptr @LLVMBuildBr(ptr %77, ptr %78)
  br label %ifend25

else24:                                           ; preds = %ifend19
  br label %ifend25

ifend25:                                          ; preds = %else24, %if.entry23
  %80 = load ptr, ptr %builder, align 8
  %81 = load ptr, ptr %for_incr_block, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %80, ptr %81)
  %82 = load ptr, ptr %for_stmt, align 8
  %memberidx26 = getelementptr inbounds %ForStatement, ptr %82, i32 0, i32 4
  %83 = load ptr, ptr %memberidx26, align 8
  %84 = icmp ne ptr %83, null
  br i1 %84, label %if.entry27, label %else28

if.entry27:                                       ; preds = %ifend25
  %85 = load ptr, ptr %this, align 8
  %86 = load ptr, ptr %builder, align 8
  %87 = load ptr, ptr %for_stmt, align 8
  %memberidx30 = getelementptr inbounds %ForStatement, ptr %87, i32 0, i32 4
  %88 = load ptr, ptr %memberidx30, align 8
  call void @CodeGen_codegen_statement(ptr %85, ptr %86, ptr %88)
  br label %ifend29

else28:                                           ; preds = %ifend25
  br label %ifend29

ifend29:                                          ; preds = %else28, %if.entry27
  %89 = load ptr, ptr %builder, align 8
  %90 = load ptr, ptr %for_cond_block, align 8
  %91 = call ptr @LLVMBuildBr(ptr %89, ptr %90)
  %92 = load ptr, ptr %this, align 8
  %memberidx31 = getelementptr inbounds %CodeGen, ptr %92, i32 0, i32 2
  %93 = load ptr, ptr %prev_break_bb, align 8
  store ptr %93, ptr %memberidx31, align 8
  %94 = load ptr, ptr %this, align 8
  %memberidx32 = getelementptr inbounds %CodeGen, ptr %94, i32 0, i32 3
  %95 = load ptr, ptr %prev_continue_bb, align 8
  store ptr %95, ptr %memberidx32, align 8
  %96 = load ptr, ptr %builder, align 8
  %97 = load ptr, ptr %for_end_block, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %96, ptr %97)
  %98 = load ptr, ptr %for_stmt, align 8
  %memberidx33 = getelementptr inbounds %ForStatement, ptr %98, i32 0, i32 1
  %99 = load ptr, ptr %memberidx33, align 8
  %100 = icmp ne ptr %99, null
  br i1 %100, label %if.entry34, label %else35

if.entry34:                                       ; preds = %ifend29
  %101 = load ptr, ptr %for_stmt, align 8
  %memberidx37 = getelementptr inbounds %ForStatement, ptr %101, i32 0, i32 1
  %102 = load ptr, ptr %memberidx37, align 8
  %memberidx38 = getelementptr inbounds %VarDeclaration, ptr %102, i32 0, i32 2
  %103 = load ptr, ptr %memberidx38, align 8
  store ptr %103, ptr %var_id, align 8
  %104 = alloca %VarAccessExpression, align 8
  %105 = load ptr, ptr %var_id, align 8
  %106 = load ptr, ptr %this, align 8
  %memberidx39 = getelementptr inbounds %CodeGen, ptr %106, i32 0, i32 4
  %107 = load ptr, ptr %memberidx39, align 8
  %108 = load ptr, ptr %var_id, align 8
  %109 = call ptr @get_var(ptr %107, ptr %108)
  %memberidx40 = getelementptr inbounds %Value, ptr %109, i32 0, i32 0
  %110 = load ptr, ptr %memberidx40, align 8
  call void @VarAccessExpression_constructor(ptr %104, ptr %105, ptr %110)
  store ptr %104, ptr %it_load_exp, align 8
  %111 = load ptr, ptr %this, align 8
  %112 = load ptr, ptr %builder, align 8
  %113 = load ptr, ptr %it_load_exp, align 8
  %114 = call ptr @CodeGen_codegen_var_access_exp(ptr %111, ptr %112, ptr %113)
  store ptr %114, ptr %mem, align 8
  %115 = load ptr, ptr %builder, align 8
  %116 = load ptr, ptr %mem, align 8
  %117 = call ptr @LLVMBuildFree(ptr %115, ptr %116)
  br label %ifend36

else35:                                           ; preds = %ifend29
  br label %ifend36

ifend36:                                          ; preds = %else35, %if.entry34
  ret void
}

define ptr @CodeGen_codegen_int(ptr %0, ptr %1) {
  %int_exp = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %int_exp, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %int_exp, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %4, i32 0, i32 3
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @CodeGen_codegen_type(ptr %3, ptr %5, i1 true)
  %7 = load ptr, ptr %int_exp, align 8
  %memberidx1 = getelementptr inbounds %IntExpression, ptr %7, i32 0, i32 4
  %8 = load i64, ptr %memberidx1, align 4
  %9 = call ptr @LLVMConstInt(ptr %6, i64 %8, i1 true)
  ret ptr %9
}

define ptr @CodeGen_codegen_member_exp(ptr %0, ptr %1, ptr %2, ptr %3) {
  %self = alloca ptr, align 8
  %this = alloca ptr, align 8
  %member_exp = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %prop_id_key = alloca ptr, align 8
  %var_id = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %prop = alloca ptr, align 8
  %struct_class = alloca ptr, align 8
  %enum_type = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %member_exp, align 8
  store ptr %3, ptr %self, align 8
  %5 = load ptr, ptr %member_exp, align 8
  %memberidx = getelementptr inbounds %MemberExpression, ptr %5, i32 0, i32 4
  %6 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = call i1 @is_object(ptr %7)
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %4
  %9 = load ptr, ptr %this, align 8
  %10 = load ptr, ptr %builder, align 8
  %11 = load ptr, ptr %member_exp, align 8
  %12 = load ptr, ptr %self, align 8
  %13 = call ptr @CodeGen_get_member_expr_mem(ptr %9, ptr %10, ptr %11, ptr %12)
  store ptr %13, ptr %ptr, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %CodeGen, ptr %14, i32 0, i32 4
  %15 = load ptr, ptr %memberidx2, align 8
  %16 = load ptr, ptr %member_exp, align 8
  %memberidx3 = getelementptr inbounds %MemberExpression, ptr %16, i32 0, i32 5
  %17 = load ptr, ptr %memberidx3, align 8
  %18 = call i64 @get_class_prop_visibility(ptr %15, ptr %17)
  %19 = icmp eq i64 %18, 1
  %20 = load ptr, ptr %member_exp, align 8
  %memberidx4 = getelementptr inbounds %Expression, ptr %20, i32 0, i32 3
  %21 = load ptr, ptr %memberidx4, align 8
  %22 = call i1 @is_function(ptr %21)
  %23 = and i1 %19, %22
  br i1 %23, label %if.entry5, label %else6

else:                                             ; preds = %4
  br label %ifend

ifend:                                            ; preds = %else
  %24 = load ptr, ptr %member_exp, align 8
  %memberidx9 = getelementptr inbounds %MemberExpression, ptr %24, i32 0, i32 4
  %25 = load ptr, ptr %memberidx9, align 8
  %memberidx10 = getelementptr inbounds %VarAccessExpression, ptr %25, i32 0, i32 4
  %26 = load ptr, ptr %memberidx10, align 8
  store ptr %26, ptr %var_id, align 8
  %27 = load ptr, ptr %member_exp, align 8
  %memberidx11 = getelementptr inbounds %MemberExpression, ptr %27, i32 0, i32 5
  %28 = load ptr, ptr %memberidx11, align 8
  %29 = call ptr @create_prop_key(ptr %28)
  store ptr %29, ptr %prop_id_key, align 8
  %30 = load ptr, ptr %var_id, align 8
  %memberidx12 = getelementptr inbounds %VarId, ptr %30, i32 0, i32 0
  %31 = load i64, ptr %memberidx12, align 4
  %32 = icmp eq i64 %31, 3
  br i1 %32, label %if.entry13, label %else14

if.entry5:                                        ; preds = %if.entry
  %33 = load ptr, ptr %ptr, align 8
  ret ptr %33

else6:                                            ; preds = %if.entry
  br label %ifend7

ifend7:                                           ; preds = %else6
  %34 = load ptr, ptr %builder, align 8
  %35 = load ptr, ptr %this, align 8
  %36 = load ptr, ptr %member_exp, align 8
  %memberidx8 = getelementptr inbounds %Expression, ptr %36, i32 0, i32 3
  %37 = load ptr, ptr %memberidx8, align 8
  %38 = call ptr @CodeGen_codegen_type(ptr %35, ptr %37, i1 true)
  %39 = load ptr, ptr %ptr, align 8
  %40 = call ptr @LLVMBuildLoad2(ptr %34, ptr %38, ptr %39, ptr @315)
  ret ptr %40

if.entry13:                                       ; preds = %ifend
  %41 = load ptr, ptr %this, align 8
  %42 = load ptr, ptr %var_id, align 8
  %43 = call ptr @ClassVarId_to_classId(ptr %42)
  %44 = call ptr @CodeGen_get_or_codegen_class_from_typeid(ptr %41, ptr %43)
  store ptr %44, ptr %struct_class, align 8
  %45 = load ptr, ptr %struct_class, align 8
  %46 = icmp eq ptr %45, null
  br i1 %46, label %if.entry16, label %else17

else14:                                           ; preds = %ifend
  br label %ifend15

ifend15:                                          ; preds = %else14
  %47 = load ptr, ptr %var_id, align 8
  %memberidx28 = getelementptr inbounds %VarId, ptr %47, i32 0, i32 0
  %48 = load i64, ptr %memberidx28, align 4
  %49 = icmp eq i64 %48, 4
  br i1 %49, label %if.entry29, label %else30

if.entry16:                                       ; preds = %if.entry13
  %50 = call ptr @string_from_bytes(ptr @612, i64 51)
  call void @panic(ptr %50)
  br label %ifend18

else17:                                           ; preds = %if.entry13
  br label %ifend18

ifend18:                                          ; preds = %else17, %if.entry16
  %51 = load ptr, ptr %struct_class, align 8
  %memberidx19 = getelementptr inbounds %CGClassType, ptr %51, i32 0, i32 3
  %52 = load ptr, ptr %memberidx19, align 8
  %53 = load ptr, ptr %prop_id_key, align 8
  %54 = call ptr @Map_string_LLVMValueRef____getitem__(ptr %52, ptr %53)
  store ptr %54, ptr %prop, align 8
  %55 = load ptr, ptr %prop, align 8
  %56 = icmp eq ptr %55, null
  br i1 %56, label %if.entry20, label %else21

if.entry20:                                       ; preds = %ifend18
  %57 = call ptr @string_from_bytes(ptr @613, i64 59)
  call void @panic(ptr %57)
  br label %ifend22

else21:                                           ; preds = %ifend18
  br label %ifend22

ifend22:                                          ; preds = %else21, %if.entry20
  %58 = load ptr, ptr %member_exp, align 8
  %memberidx23 = getelementptr inbounds %Expression, ptr %58, i32 0, i32 3
  %59 = load ptr, ptr %memberidx23, align 8
  %60 = call i1 @is_function(ptr %59)
  br i1 %60, label %if.entry24, label %else25

if.entry24:                                       ; preds = %ifend22
  %61 = load ptr, ptr %prop, align 8
  ret ptr %61

else25:                                           ; preds = %ifend22
  br label %ifend26

ifend26:                                          ; preds = %else25
  %62 = load ptr, ptr %builder, align 8
  %63 = load ptr, ptr %this, align 8
  %64 = load ptr, ptr %member_exp, align 8
  %memberidx27 = getelementptr inbounds %Expression, ptr %64, i32 0, i32 3
  %65 = load ptr, ptr %memberidx27, align 8
  %66 = call ptr @CodeGen_codegen_type(ptr %63, ptr %65, i1 true)
  %67 = load ptr, ptr %prop, align 8
  %68 = call ptr @LLVMBuildLoad2(ptr %62, ptr %66, ptr %67, ptr @315)
  ret ptr %68

if.entry29:                                       ; preds = %ifend15
  %69 = load ptr, ptr %this, align 8
  %70 = load ptr, ptr %var_id, align 8
  %71 = call ptr @EnumVarId_to_enumId(ptr %70)
  %72 = call ptr @CodeGen_get_or_codegen_enum_from_typeid(ptr %69, ptr %71)
  store ptr %72, ptr %enum_type, align 8
  %73 = load ptr, ptr %enum_type, align 8
  %74 = icmp eq ptr %73, null
  br i1 %74, label %if.entry32, label %else33

else30:                                           ; preds = %ifend15
  br label %ifend31

ifend31:                                          ; preds = %else30
  ret ptr null

if.entry32:                                       ; preds = %if.entry29
  %75 = call ptr @string_from_bytes(ptr @614, i64 50)
  call void @panic(ptr %75)
  br label %ifend34

else33:                                           ; preds = %if.entry29
  br label %ifend34

ifend34:                                          ; preds = %else33, %if.entry32
  %76 = load ptr, ptr %enum_type, align 8
  %memberidx35 = getelementptr inbounds %CGEnumType, ptr %76, i32 0, i32 1
  %77 = load ptr, ptr %memberidx35, align 8
  %78 = load ptr, ptr %prop_id_key, align 8
  %79 = call ptr @Map_string_LLVMValueRef____getitem__(ptr %77, ptr %78)
  ret ptr %79
}

define ptr @CodeGen_codegen_atoi_call(ptr %0, ptr %1, ptr %2) {
  %this = alloca ptr, align 8
  %arg = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %args = alloca [1 x ptr], align 8
  %atoi = alloca ptr, align 8
  %int_ty = alloca ptr, align 8
  %arg_types = alloca [1 x ptr], align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %arg, align 8
  %4 = getelementptr inbounds [1 x ptr], ptr %arg_types, i64 0, i64 0
  %5 = call ptr @LLVMInt8Type()
  %6 = call ptr @LLVMPointerType(ptr %5, i64 0)
  store ptr %6, ptr %4, align 8
  %7 = getelementptr inbounds ptr, ptr %4, i64 1
  %8 = getelementptr inbounds [1 x ptr], ptr %args, i64 0, i64 0
  %9 = load ptr, ptr %arg, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr inbounds ptr, ptr %8, i64 1
  %11 = call ptr @LLVMInt32Type()
  store ptr %11, ptr %int_ty, align 8
  %12 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %12, i32 0, i32 0
  %13 = load ptr, ptr %memberidx, align 8
  %14 = call ptr @string_from_bytes(ptr @525, i64 4)
  %15 = getelementptr inbounds [1 x ptr], ptr %arg_types, i64 0, i64 0
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds [1 x ptr], ptr %arg_types, i64 0, i64 0
  %18 = load ptr, ptr %int_ty, align 8
  %19 = call ptr @get_intrinsic(ptr %13, ptr %14, ptr %17, i64 1, ptr %18, i1 false)
  store ptr %19, ptr %atoi, align 8
  %20 = load ptr, ptr %builder, align 8
  %21 = load ptr, ptr %atoi, align 8
  %memberidx1 = getelementptr inbounds %IntrinsicResult, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx1, align 8
  %23 = load ptr, ptr %atoi, align 8
  %memberidx2 = getelementptr inbounds %IntrinsicResult, ptr %23, i32 0, i32 0
  %24 = load ptr, ptr %memberidx2, align 8
  %25 = getelementptr inbounds [1 x ptr], ptr %args, i64 0, i64 0
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr inbounds [1 x ptr], ptr %args, i64 0, i64 0
  %28 = call ptr @LLVMBuildCall2(ptr %20, ptr %22, ptr %24, ptr %27, i64 1, ptr @315)
  ret ptr %28
}

define ptr @CodeGen_declare_method(ptr %0, ptr %1, ptr %2) {
  %method_name = alloca ptr, align 8
  %this = alloca ptr, align 8
  %method_type = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %method_name, align 8
  store ptr %2, ptr %method_type, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %4, i32 0, i32 0
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load ptr, ptr %method_name, align 8
  %7 = getelementptr inbounds %string, ptr %6, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %memberidx1 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %8, i32 0, i32 5
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = call ptr %9(ptr %6)
  %11 = load ptr, ptr %method_type, align 8
  %12 = call ptr @LLVMAddFunction(ptr %5, ptr %10, ptr %11)
  ret ptr %12
}

define void @CodeGen_declare_static_props(ptr %0, ptr %1, ptr %2) {
  %this = alloca ptr, align 8
  %struct_class = alloca ptr, align 8
  %checked_class = alloca ptr, align 8
  %prop_id_key = alloca ptr, align 8
  %prop_id = alloca ptr, align 8
  %prop_type = alloca ptr, align 8
  %static_prop_type = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %static_prop_name_concat = alloca ptr, align 8
  %static_prop_value = alloca ptr, align 8
  %static_prop_name = alloca ptr, align 8
  %entry = alloca ptr, align 8
  %global_prop_initializer = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %struct_class, align 8
  store ptr %2, ptr %checked_class, align 8
  br label %for.entry

for.entry:                                        ; preds = %3
  %4 = load ptr, ptr %checked_class, align 8
  %memberidx = getelementptr inbounds %Class, ptr %4, i32 0, i32 7
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @Map_string_PropId____iter__(ptr %5)
  store ptr %6, ptr %tmp_it, align 8
  %7 = load ptr, ptr %tmp_it, align 8
  %8 = call ptr @MapIterator_string_PropId__next(ptr %7)
  store ptr %8, ptr %entry, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %9 = load ptr, ptr %tmp_it, align 8
  %memberidx1 = getelementptr inbounds %MapIterator_string_PropId_, ptr %9, i32 0, i32 0
  %10 = load i1, ptr %memberidx1, align 1
  %11 = xor i1 %10, true
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %entry, align 8
  %memberidx2 = getelementptr inbounds %MapEntry_string_PropId_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx2, align 8
  store ptr %13, ptr %prop_id, align 8
  %14 = load ptr, ptr %entry, align 8
  %memberidx3 = getelementptr inbounds %MapEntry_string_PropId_, ptr %14, i32 0, i32 0
  %15 = load ptr, ptr %memberidx3, align 8
  store ptr %15, ptr %static_prop_name, align 8
  %16 = load ptr, ptr %prop_id, align 8
  %17 = call ptr @create_prop_key(ptr %16)
  store ptr %17, ptr %prop_id_key, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %CodeGen, ptr %18, i32 0, i32 4
  %19 = load ptr, ptr %memberidx4, align 8
  %20 = load ptr, ptr %prop_id, align 8
  %21 = call ptr @get_class_prop_type(ptr %19, ptr %20)
  store ptr %21, ptr %prop_type, align 8
  %22 = load ptr, ptr %this, align 8
  %23 = load ptr, ptr %prop_type, align 8
  %24 = load ptr, ptr %prop_type, align 8
  %25 = call i1 @is_object(ptr %24)
  %26 = call ptr @CodeGen_codegen_type(ptr %22, ptr %23, i1 %25)
  store ptr %26, ptr %static_prop_type, align 8
  %27 = load ptr, ptr %checked_class, align 8
  %memberidx5 = getelementptr inbounds %Class, ptr %27, i32 0, i32 1
  %28 = load ptr, ptr %memberidx5, align 8
  %29 = getelementptr inbounds %string, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %memberidx6 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %30, i32 0, i32 5
  %31 = load ptr, ptr %memberidx6, align 8
  %32 = call ptr %31(ptr %28)
  %33 = load ptr, ptr %static_prop_name, align 8
  %34 = getelementptr inbounds %string, ptr %33, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  %memberidx7 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %35, i32 0, i32 5
  %36 = load ptr, ptr %memberidx7, align 8
  %37 = call ptr %36(ptr %33)
  %38 = alloca ptr, align 8
  %39 = call i64 (ptr, ptr, ...) @asprintf(ptr %38, ptr @348, ptr %32, ptr %37)
  %40 = load ptr, ptr %38, align 8
  %41 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %41, ptr %40, i64 %39)
  tail call void @free(ptr %32)
  tail call void @free(ptr %37)
  store ptr %41, ptr %static_prop_name_concat, align 8
  store ptr null, ptr %static_prop_value, align 8
  %42 = load ptr, ptr %prop_id, align 8
  %memberidx8 = getelementptr inbounds %PropId, ptr %42, i32 0, i32 0
  %43 = load i64, ptr %memberidx8, align 4
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %45 = load ptr, ptr %tmp_it, align 8
  %46 = call ptr @MapIterator_string_PropId__next(ptr %45)
  store ptr %46, ptr %entry, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %47 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %47)
  ret void

if.entry:                                         ; preds = %for.body
  %48 = load ptr, ptr %this, align 8
  %49 = load ptr, ptr %static_prop_name_concat, align 8
  %50 = load ptr, ptr %static_prop_type, align 8
  %51 = call ptr @CodeGen_declare_method(ptr %48, ptr %49, ptr %50)
  store ptr %51, ptr %static_prop_value, align 8
  br label %ifend

else:                                             ; preds = %for.body
  %52 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %CodeGen, ptr %52, i32 0, i32 0
  %53 = load ptr, ptr %memberidx9, align 8
  %54 = load ptr, ptr %static_prop_type, align 8
  %55 = load ptr, ptr %static_prop_name_concat, align 8
  %56 = getelementptr inbounds %string, ptr %55, i32 0, i32 0
  %57 = load ptr, ptr %56, align 8
  %memberidx10 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %57, i32 0, i32 5
  %58 = load ptr, ptr %memberidx10, align 8
  %59 = call ptr %58(ptr %55)
  %60 = call ptr @LLVMAddGlobal(ptr %53, ptr %54, ptr %59)
  store ptr %60, ptr %static_prop_value, align 8
  %61 = load ptr, ptr %this, align 8
  %62 = load ptr, ptr %checked_class, align 8
  %memberidx11 = getelementptr inbounds %Class, ptr %62, i32 0, i32 4
  %63 = load ptr, ptr %memberidx11, align 8
  %64 = load ptr, ptr %prop_id, align 8
  %memberidx12 = getelementptr inbounds %PropId, ptr %64, i32 0, i32 2
  %65 = load i64, ptr %memberidx12, align 4
  %66 = call ptr @Array_ClassField____getitem__(ptr %63, i64 %65)
  %memberidx13 = getelementptr inbounds %ClassField, ptr %66, i32 0, i32 5
  %67 = load ptr, ptr %memberidx13, align 8
  %68 = call ptr @CodeGen_codegen_expression(ptr %61, ptr null, ptr %67)
  store ptr %68, ptr %global_prop_initializer, align 8
  %69 = load ptr, ptr %static_prop_value, align 8
  %70 = load ptr, ptr %global_prop_initializer, align 8
  call void @LLVMSetInitializer(ptr %69, ptr %70)
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %71 = load ptr, ptr %struct_class, align 8
  %memberidx14 = getelementptr inbounds %CGClassType, ptr %71, i32 0, i32 3
  %72 = load ptr, ptr %memberidx14, align 8
  %73 = load ptr, ptr %prop_id_key, align 8
  %74 = load ptr, ptr %static_prop_value, align 8
  call void @Map_string_LLVMValueRef____setitem__(ptr %72, ptr %73, ptr %74)
  br label %for.incr
}

define void @CodeGen_codegen_function(ptr %0, ptr %1) {
  %func = alloca ptr, align 8
  %this = alloca ptr, align 8
  %prev_func = alloca ptr, align 8
  %func_builder = alloca ptr, align 8
  %llvm_fnc = alloca ptr, align 8
  %fn_name = alloca ptr, align 8
  %alloc = alloca ptr, align 8
  %i = alloca i64, align 8
  %param = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %func, align 8
  %3 = load ptr, ptr %func, align 8
  %memberidx = getelementptr inbounds %Function, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = getelementptr inbounds %string, ptr %4, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %memberidx1 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %6, i32 0, i32 5
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = call ptr %7(ptr %4)
  store ptr %8, ptr %fn_name, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %CodeGen, ptr %9, i32 0, i32 0
  %10 = load ptr, ptr %memberidx2, align 8
  %11 = load ptr, ptr %fn_name, align 8
  %12 = load ptr, ptr %this, align 8
  %13 = load ptr, ptr %func, align 8
  %memberidx3 = getelementptr inbounds %Function, ptr %13, i32 0, i32 4
  %14 = load ptr, ptr %memberidx3, align 8
  %15 = call ptr @CodeGen_codegen_type(ptr %12, ptr %14, i1 false)
  %16 = call ptr @LLVMAddFunction(ptr %10, ptr %11, ptr %15)
  store ptr %16, ptr %llvm_fnc, align 8
  %17 = load ptr, ptr %this, align 8
  %18 = load ptr, ptr %func, align 8
  %memberidx4 = getelementptr inbounds %Function, ptr %18, i32 0, i32 0
  %19 = load ptr, ptr %memberidx4, align 8
  %20 = load ptr, ptr %llvm_fnc, align 8
  call void @CodeGen_add_var(ptr %17, ptr %19, ptr %20)
  %21 = load ptr, ptr %func, align 8
  %memberidx5 = getelementptr inbounds %Function, ptr %21, i32 0, i32 6
  %22 = load i1, ptr %memberidx5, align 1
  br i1 %22, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %23 = load ptr, ptr %llvm_fnc, align 8
  call void @LLVMSetLinkage(ptr %23, i64 0)
  ret void

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %24 = call ptr @LLVMCreateBuilder()
  store ptr %24, ptr %func_builder, align 8
  %25 = load ptr, ptr %func_builder, align 8
  %26 = load ptr, ptr %llvm_fnc, align 8
  %27 = call ptr @LLVMAppendBasicBlock(ptr %26, ptr @315)
  call void @LLVMPositionBuilderAtEnd(ptr %25, ptr %27)
  %28 = load ptr, ptr %this, align 8
  %29 = load ptr, ptr %func_builder, align 8
  %30 = load ptr, ptr %func, align 8
  %memberidx6 = getelementptr inbounds %Function, ptr %30, i32 0, i32 5
  %31 = load ptr, ptr %memberidx6, align 8
  call void @CodeGen_codegen_vars_alloc_funtion_scope(ptr %28, ptr %29, ptr %31)
  br label %for.entry

for.entry:                                        ; preds = %ifend
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %32 = load i64, ptr %i, align 4
  %33 = load ptr, ptr %func, align 8
  %memberidx7 = getelementptr inbounds %Function, ptr %33, i32 0, i32 2
  %34 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Array_FunctionArg_, ptr %34, i32 0, i32 2
  %35 = load i64, ptr %memberidx8, align 4
  %36 = icmp slt i64 %32, %35
  br i1 %36, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %37 = load ptr, ptr %this, align 8
  %38 = load ptr, ptr %func, align 8
  %memberidx9 = getelementptr inbounds %Function, ptr %38, i32 0, i32 2
  %39 = load ptr, ptr %memberidx9, align 8
  %40 = load i64, ptr %i, align 4
  %41 = call ptr @Array_FunctionArg____getitem__(ptr %39, i64 %40)
  %memberidx10 = getelementptr inbounds %FunctionArg, ptr %41, i32 0, i32 4
  %42 = load ptr, ptr %memberidx10, align 8
  %43 = call ptr @CodeGen_get_var_from_varid(ptr %37, ptr %42)
  store ptr %43, ptr %alloc, align 8
  %44 = load ptr, ptr %llvm_fnc, align 8
  %45 = load i64, ptr %i, align 4
  %46 = call ptr @LLVMGetParam(ptr %44, i64 %45)
  store ptr %46, ptr %param, align 8
  %47 = load ptr, ptr %func_builder, align 8
  %48 = load ptr, ptr %param, align 8
  %49 = load ptr, ptr %alloc, align 8
  %50 = call ptr @LLVMBuildStore(ptr %47, ptr %48, ptr %49)
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %51 = load i64, ptr %i, align 4
  %52 = add nsw i64 %51, 1
  store i64 %52, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %53 = load ptr, ptr %this, align 8
  %memberidx11 = getelementptr inbounds %CodeGen, ptr %53, i32 0, i32 1
  %54 = load ptr, ptr %memberidx11, align 8
  store ptr %54, ptr %prev_func, align 8
  %55 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %CodeGen, ptr %55, i32 0, i32 1
  %56 = load ptr, ptr %llvm_fnc, align 8
  store ptr %56, ptr %memberidx12, align 8
  %57 = load ptr, ptr %this, align 8
  %58 = load ptr, ptr %func_builder, align 8
  %59 = load ptr, ptr %func, align 8
  %memberidx13 = getelementptr inbounds %Function, ptr %59, i32 0, i32 3
  %60 = load ptr, ptr %memberidx13, align 8
  %61 = call ptr @CodeGen_codegen_block(ptr %57, ptr %58, ptr %60)
  %62 = load ptr, ptr %func_builder, align 8
  call void @LLVMDisposeBuilder(ptr %62)
  %63 = load ptr, ptr %this, align 8
  %memberidx14 = getelementptr inbounds %CodeGen, ptr %63, i32 0, i32 1
  %64 = load ptr, ptr %prev_func, align 8
  store ptr %64, ptr %memberidx14, align 8
  ret void
}

define ptr @Array_LLVMTypeRef__pop(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  ret ptr %9
}

define i64 @Array_LLVMTypeRef__find(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %search = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %search, align 8
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %3 = load i64, ptr %i, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp slt i64 %3, %5
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, ptr %i, align 4
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %memberidx1, align 8
  %10 = getelementptr inbounds ptr, ptr %9, i64 %7
  %11 = load ptr, ptr %10, align 8
  %12 = load ptr, ptr %search, align 8
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %if.entry, label %else

for.incr:                                         ; preds = %ifend
  %14 = load i64, ptr %i, align 4
  %15 = add nsw i64 %14, 1
  store i64 %15, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i64 -1

if.entry:                                         ; preds = %for.body
  %16 = load i64, ptr %i, align 4
  ret i64 %16

else:                                             ; preds = %for.body
  br label %ifend

ifend:                                            ; preds = %else
  br label %for.incr
}

define void @Array_LLVMTypeRef__resize(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx1, align 4
  %5 = mul nuw i64 %4, 2
  store i64 %5, ptr %memberidx, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %9, i32 0, i32 3
  %10 = load i64, ptr %memberidx4, align 4
  %11 = mul i64 %10, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %12 = call ptr @realloc(ptr %8, i64 %11)
  store ptr %12, ptr %memberidx2, align 8
  ret void
}

define void @Array_LLVMTypeRef____sl__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sge i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %this, align 8
  call void @Array_LLVMTypeRef__resize(ptr %8)
  br label %ifend

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %11, i32 0, i32 2
  %12 = add nsw i64 %10, 1
  store i64 %12, ptr %memberidx3, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = getelementptr inbounds ptr, ptr %14, i64 %10
  %16 = load ptr, ptr %element, align 8
  store ptr %16, ptr %15, align 8
  ret void
}

define ptr @Array_LLVMTypeRef____adda__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %9 = load ptr, ptr %other, align 8
  %memberidx2 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = add nuw i64 %8, %10
  call void %6(ptr %3, i64 %11)
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %memberidx3, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %14, i32 0, i32 2
  %15 = load i64, ptr %memberidx4, align 4
  %16 = getelementptr inbounds ptr, ptr %13, i64 %15
  %17 = load ptr, ptr %other, align 8
  %memberidx5 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %17, i32 0, i32 1
  %18 = load ptr, ptr %memberidx5, align 8
  %19 = load ptr, ptr %other, align 8
  %memberidx6 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %19, i32 0, i32 2
  %20 = load i64, ptr %memberidx6, align 4
  %21 = mul i64 %20, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %16, ptr align 8 %18, i64 %21, i1 false)
  %22 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %22, i32 0, i32 2
  %23 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %23, i32 0, i32 2
  %24 = load i64, ptr %memberidx8, align 4
  %25 = load ptr, ptr %other, align 8
  %memberidx9 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx9, align 4
  %27 = add nuw i64 %24, %26
  store i64 %27, ptr %memberidx7, align 4
  %28 = load ptr, ptr %this, align 8
  ret ptr %28
}

define ptr @Array_LLVMTypeRef____add__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %arr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMTypeRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMTypeRef__constructor(ptr %3, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %3, ptr %arr, align 8
  %5 = load ptr, ptr %arr, align 8
  %6 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr }, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx3, align 4
  %11 = load ptr, ptr %other, align 8
  %memberidx4 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = add nuw i64 %10, %12
  call void %8(ptr %5, i64 %13)
  %14 = load ptr, ptr %arr, align 8
  %memberidx5 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %14, i32 0, i32 1
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %16, i32 0, i32 1
  %17 = load ptr, ptr %memberidx6, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %18, i32 0, i32 2
  %19 = load i64, ptr %memberidx7, align 4
  %20 = mul i64 %19, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %17, i64 %20, i1 false)
  %21 = load ptr, ptr %arr, align 8
  %memberidx8 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %21, i32 0, i32 2
  %22 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %memberidx8, align 4
  %24 = load ptr, ptr %arr, align 8
  %25 = load ptr, ptr %other, align 8
  %26 = call ptr @Array_LLVMTypeRef____adda__(ptr %24, ptr %25)
  %27 = load ptr, ptr %arr, align 8
  ret ptr %27
}

define i1 @Array_LLVMTypeRef____neq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %other, align 8
  %5 = call i1 @Array_LLVMTypeRef____eq__(ptr %3, ptr %4)
  %6 = xor i1 %5, true
  ret i1 %6
}

define ptr @ArrayIterator_LLVMTypeRef__next(ptr %0) {
  %this = alloca ptr, align 8
  %next_elem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_LLVMTypeRef_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_LLVMTypeRef_, ptr %4, i32 0, i32 1
  %5 = add nsw i64 %3, 1
  store i64 %5, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_LLVMTypeRef_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = getelementptr inbounds ptr, ptr %7, i64 %3
  %9 = load ptr, ptr %8, align 8
  store ptr %9, ptr %next_elem, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_LLVMTypeRef_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %ArrayIterator_LLVMTypeRef_, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %memberidx4, align 4
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %ArrayIterator_LLVMTypeRef_, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp sgt i64 %12, %14
  store i1 %15, ptr %memberidx3, align 1
  %16 = load ptr, ptr %next_elem, align 8
  ret ptr %16
}

define void @ArrayIterator_LLVMTypeRef__constructor(ptr %0, ptr %1, i64 %2) {
  %this = alloca ptr, align 8
  %end = alloca i64, align 8
  %bytes = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %bytes, align 8
  store i64 %2, ptr %end, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %ArrayIterator_LLVMTypeRef_, ptr %4, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %ArrayIterator_LLVMTypeRef_, ptr %5, i32 0, i32 1
  store i64 0, ptr %memberidx1, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %ArrayIterator_LLVMTypeRef_, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %bytes, align 8
  store ptr %7, ptr %memberidx2, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %ArrayIterator_LLVMTypeRef_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %end, align 4
  store i64 %9, ptr %memberidx3, align 4
  ret void
}

define ptr @Array_LLVMTypeRef____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ArrayIterator_LLVMTypeRef_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  call void @ArrayIterator_LLVMTypeRef__constructor(ptr %2, ptr %4, i64 %6)
  ret ptr %2
}

define void @Array_LLVMTypeRef____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Array_LLVMTypeRef____setitem__(ptr %0, i64 %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  store ptr %2, ptr %value, align 8
  %4 = load i64, ptr %index, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %7 = getelementptr inbounds ptr, ptr %6, i64 %4
  %8 = load ptr, ptr %value, align 8
  store ptr %8, ptr %7, align 8
  ret void
}

define ptr @Array_LLVMTypeRef____getitem__(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %index = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %index, align 4
  %3 = load i64, ptr %index, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds ptr, ptr %5, i64 %3
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i1 @Array_LLVMTypeRef____eq__(ptr %0, ptr %1) {
  %other = alloca ptr, align 8
  %this = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %other, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %5 = load ptr, ptr %other, align 8
  %memberidx1 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp ne i64 %4, %6
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  ret i1 false

else:                                             ; preds = %2
  br label %for.entry

ifend:                                            ; preds = %for.end
  ret i1 true

for.entry:                                        ; preds = %else
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %8 = load i64, ptr %i, align 4
  %9 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %9, i32 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load ptr, ptr %this, align 8
  %13 = load i64, ptr %i, align 4
  %14 = call ptr @Array_LLVMTypeRef____getitem__(ptr %12, i64 %13)
  %15 = load ptr, ptr %other, align 8
  %16 = load i64, ptr %i, align 4
  %17 = call ptr @Array_LLVMTypeRef____getitem__(ptr %15, i64 %16)
  %18 = icmp ne ptr %14, %17
  br i1 %18, label %if.entry3, label %else4

for.incr:                                         ; preds = %ifend5
  %19 = load i64, ptr %i, align 4
  %20 = add nsw i64 %19, 1
  store i64 %20, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ifend

if.entry3:                                        ; preds = %for.body
  ret i1 false

else4:                                            ; preds = %for.body
  br label %ifend5

ifend5:                                           ; preds = %else4
  br label %for.incr
}

define i1 @Array_LLVMTypeRef____in__(ptr %0, ptr %1) {
  %element = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %element, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr }, ptr %5, i32 0, i32 2
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load ptr, ptr %element, align 8
  %8 = call i64 %6(ptr %3, ptr %7)
  %9 = icmp ne i64 %8, -1
  ret i1 %9
}

define void @Array_LLVMTypeRef__ensure_capacity(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 %1, ptr %size, align 4
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i32 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %5 = load i64, ptr %size, align 4
  %6 = icmp slt i64 %4, %5
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %while.entry, %2
  %7 = load ptr, ptr %this, align 8
  call void @Array_LLVMTypeRef__resize(ptr %7)
  %8 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %8, i32 0, i32 3
  %9 = load i64, ptr %memberidx1, align 4
  %10 = load i64, ptr %size, align 4
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %2
  ret void
}

define void @Array_LLVMTypeRef__constructor(ptr %0, i64 %1) {
  %this = alloca ptr, align 8
  %size = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  %3 = getelementptr inbounds ptr, ptr %0, i64 0
  store ptr @VTableArray_LLVMTypeRef_, ptr %3, align 8
  store i64 %1, ptr %size, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %5, i32 0, i32 3
  %6 = load i64, ptr %size, align 4
  store i64 %6, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %size, align 4
  %9 = trunc i64 %8 to i32
  %mallocsize = mul i32 %9, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %10 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %10, ptr %memberidx2, align 8
  ret void
}

define void @CodeGen_declare_class_props(ptr %0, ptr %1, ptr %2, ptr %3) {
  %prop_types = alloca ptr, align 8
  %this = alloca ptr, align 8
  %struct_class = alloca ptr, align 8
  %checked_class = alloca ptr, align 8
  %vtable_types = alloca ptr, align 8
  %vtable_values = alloca ptr, align 8
  %field_types = alloca ptr, align 8
  %prop_id_key = alloca ptr, align 8
  %prop_index = alloca i64, align 8
  %prop_id = alloca ptr, align 8
  %prop_type = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %prop_name = alloca ptr, align 8
  %entry = alloca ptr, align 8
  %prop_owner = alloca ptr, align 8
  %field_type = alloca ptr, align 8
  %llvm_method_val = alloca ptr, align 8
  %method_type = alloca ptr, align 8
  %llvm_method_type = alloca ptr, align 8
  %arg_types = alloca ptr, align 8
  %vtable_struct_ty = alloca ptr, align 8
  %vtable_intializer = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %struct_class, align 8
  store ptr %2, ptr %checked_class, align 8
  store ptr %3, ptr %prop_types, align 8
  %5 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMValueRef__constructor(ptr %5, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %5, i32 0, i32 1
  %6 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_LLVMValueRef_, ptr %5, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %5, ptr %vtable_values, align 8
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMTypeRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMTypeRef__constructor(ptr %7, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx2 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %7, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  store ptr %7, ptr %vtable_types, align 8
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMTypeRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMTypeRef__constructor(ptr %9, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx4 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %9, i32 0, i32 1
  %10 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %9, i32 0, i32 2
  store i64 0, ptr %memberidx5, align 4
  store ptr %9, ptr %field_types, align 8
  br label %for.entry

for.entry:                                        ; preds = %4
  %11 = load ptr, ptr %checked_class, align 8
  %memberidx6 = getelementptr inbounds %Class, ptr %11, i32 0, i32 6
  %12 = load ptr, ptr %memberidx6, align 8
  %13 = call ptr @Map_string_PropId____iter__(ptr %12)
  store ptr %13, ptr %tmp_it, align 8
  %14 = load ptr, ptr %tmp_it, align 8
  %15 = call ptr @MapIterator_string_PropId__next(ptr %14)
  store ptr %15, ptr %entry, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %16 = load ptr, ptr %tmp_it, align 8
  %memberidx7 = getelementptr inbounds %MapIterator_string_PropId_, ptr %16, i32 0, i32 0
  %17 = load i1, ptr %memberidx7, align 1
  %18 = xor i1 %17, true
  br i1 %18, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load ptr, ptr %entry, align 8
  %memberidx8 = getelementptr inbounds %MapEntry_string_PropId_, ptr %19, i32 0, i32 1
  %20 = load ptr, ptr %memberidx8, align 8
  store ptr %20, ptr %prop_id, align 8
  %21 = load ptr, ptr %entry, align 8
  %memberidx9 = getelementptr inbounds %MapEntry_string_PropId_, ptr %21, i32 0, i32 0
  %22 = load ptr, ptr %memberidx9, align 8
  store ptr %22, ptr %prop_name, align 8
  %23 = load ptr, ptr %checked_class, align 8
  store ptr %23, ptr %prop_owner, align 8
  %24 = load ptr, ptr %prop_id, align 8
  %25 = call ptr @create_prop_key(ptr %24)
  store ptr %25, ptr %prop_id_key, align 8
  %26 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %CodeGen, ptr %26, i32 0, i32 4
  %27 = load ptr, ptr %memberidx10, align 8
  %28 = load ptr, ptr %prop_id, align 8
  %29 = call ptr @get_class_prop_type(ptr %27, ptr %28)
  store ptr %29, ptr %prop_type, align 8
  %30 = load ptr, ptr %this, align 8
  %memberidx11 = getelementptr inbounds %CodeGen, ptr %30, i32 0, i32 4
  %31 = load ptr, ptr %memberidx11, align 8
  %32 = load ptr, ptr %prop_id, align 8
  %33 = call i64 @get_vtable_index(ptr %31, ptr %32)
  store i64 %33, ptr %prop_index, align 4
  %34 = load ptr, ptr %prop_id, align 8
  %memberidx12 = getelementptr inbounds %PropId, ptr %34, i32 0, i32 0
  %35 = load i64, ptr %memberidx12, align 4
  %36 = icmp eq i64 %35, 1
  br i1 %36, label %if.entry, label %else

for.incr:                                         ; preds = %ifend, %if.entry35
  %37 = load ptr, ptr %tmp_it, align 8
  %38 = call ptr @MapIterator_string_PropId__next(ptr %37)
  store ptr %38, ptr %entry, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %39 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %39)
  %40 = load ptr, ptr %vtable_types, align 8
  %memberidx58 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %40, i32 0, i32 2
  %41 = load i64, ptr %memberidx58, align 4
  %42 = icmp sgt i64 %41, 0
  br i1 %42, label %if.entry59, label %else60

if.entry:                                         ; preds = %for.body
  %43 = load ptr, ptr %this, align 8
  %44 = load ptr, ptr %prop_type, align 8
  %45 = call ptr @CodeGen_codegen_type(ptr %43, ptr %44, i1 true)
  store ptr %45, ptr %field_type, align 8
  %46 = load ptr, ptr %struct_class, align 8
  %memberidx13 = getelementptr inbounds %CGClassType, ptr %46, i32 0, i32 2
  %47 = load ptr, ptr %memberidx13, align 8
  %48 = load ptr, ptr %prop_id_key, align 8
  %49 = load i64, ptr %prop_index, align 4
  call void @Map_string_uint____setitem__(ptr %47, ptr %48, i64 %49)
  %50 = load ptr, ptr %field_types, align 8
  %51 = load i64, ptr %prop_index, align 4
  call void @resize_type_array(ptr %50, i64 %51)
  %52 = load ptr, ptr %field_types, align 8
  %53 = load i64, ptr %prop_index, align 4
  %54 = load ptr, ptr %field_type, align 8
  call void @Array_LLVMTypeRef____setitem__(ptr %52, i64 %53, ptr %54)
  br label %ifend

else:                                             ; preds = %for.body
  %55 = load ptr, ptr %prop_type, align 8
  store ptr %55, ptr %method_type, align 8
  store ptr null, ptr %llvm_method_val, align 8
  store ptr null, ptr %llvm_method_type, align 8
  %56 = load ptr, ptr %prop_id, align 8
  %memberidx14 = getelementptr inbounds %PropId, ptr %56, i32 0, i32 1
  %57 = load ptr, ptr %memberidx14, align 8
  %58 = load ptr, ptr %checked_class, align 8
  %memberidx15 = getelementptr inbounds %Class, ptr %58, i32 0, i32 0
  %59 = load ptr, ptr %memberidx15, align 8
  %60 = icmp eq ptr %57, %59
  br i1 %60, label %if.entry16, label %else17

ifend:                                            ; preds = %ifend57, %if.entry
  br label %for.incr

if.entry16:                                       ; preds = %else
  %61 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_Type_, ptr null, i32 1) to i32))
  call void @Array_Type__constructor(ptr %61, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx19 = getelementptr inbounds %Array_Type_, ptr %61, i32 0, i32 1
  %62 = load ptr, ptr %memberidx19, align 8
  %63 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%ObjectType, ptr null, i32 1) to i32))
  %64 = load ptr, ptr %checked_class, align 8
  %memberidx20 = getelementptr inbounds %Class, ptr %64, i32 0, i32 0
  %65 = load ptr, ptr %memberidx20, align 8
  call void @ObjectType_constructor(ptr %63, ptr %65)
  store ptr %63, ptr %62, align 8
  %66 = getelementptr inbounds ptr, ptr %62, i64 1
  %memberidx21 = getelementptr inbounds %Array_Type_, ptr %61, i32 0, i32 2
  store i64 1, ptr %memberidx21, align 4
  store ptr %61, ptr %arg_types, align 8
  %67 = load ptr, ptr %arg_types, align 8
  %68 = load ptr, ptr %method_type, align 8
  %memberidx22 = getelementptr inbounds %FunctionType, ptr %68, i32 0, i32 1
  %69 = load ptr, ptr %memberidx22, align 8
  %70 = call ptr @Array_Type____adda__(ptr %67, ptr %69)
  %71 = load ptr, ptr %method_type, align 8
  %memberidx23 = getelementptr inbounds %FunctionType, ptr %71, i32 0, i32 1
  %72 = load ptr, ptr %memberidx23, align 8
  call void @Array_Type____del__(ptr %72)
  tail call void @free(ptr %72)
  %73 = load ptr, ptr %method_type, align 8
  %memberidx24 = getelementptr inbounds %FunctionType, ptr %73, i32 0, i32 1
  %74 = load ptr, ptr %arg_types, align 8
  store ptr %74, ptr %memberidx24, align 8
  %75 = load ptr, ptr %this, align 8
  %76 = load ptr, ptr %method_type, align 8
  %77 = call ptr @CodeGen_codegen_type(ptr %75, ptr %76, i1 false)
  store ptr %77, ptr %llvm_method_type, align 8
  %78 = load ptr, ptr %checked_class, align 8
  %memberidx25 = getelementptr inbounds %Class, ptr %78, i32 0, i32 5
  %79 = load ptr, ptr %memberidx25, align 8
  %80 = load ptr, ptr %prop_id, align 8
  %memberidx26 = getelementptr inbounds %PropId, ptr %80, i32 0, i32 2
  %81 = load i64, ptr %memberidx26, align 4
  %82 = call ptr @Array_ClassMethod____getitem__(ptr %79, i64 %81)
  %memberidx27 = getelementptr inbounds %ClassMethod, ptr %82, i32 0, i32 7
  %83 = load i1, ptr %memberidx27, align 1
  %84 = xor i1 %83, true
  br i1 %84, label %if.entry28, label %else29

else17:                                           ; preds = %else
  %85 = load ptr, ptr %this, align 8
  %86 = load ptr, ptr %method_type, align 8
  %87 = call ptr @CodeGen_codegen_type(ptr %85, ptr %86, i1 false)
  store ptr %87, ptr %llvm_method_type, align 8
  %88 = load ptr, ptr %this, align 8
  %memberidx39 = getelementptr inbounds %CodeGen, ptr %88, i32 0, i32 4
  %89 = load ptr, ptr %memberidx39, align 8
  %90 = load ptr, ptr %prop_id, align 8
  %91 = call ptr @get_class_from_prop_id(ptr %89, ptr %90)
  store ptr %91, ptr %prop_owner, align 8
  %92 = load ptr, ptr %this, align 8
  %memberidx40 = getelementptr inbounds %CodeGen, ptr %92, i32 0, i32 0
  %93 = load ptr, ptr %memberidx40, align 8
  %94 = load ptr, ptr %prop_owner, align 8
  %memberidx41 = getelementptr inbounds %Class, ptr %94, i32 0, i32 1
  %95 = load ptr, ptr %memberidx41, align 8
  %96 = getelementptr inbounds %string, ptr %95, i32 0, i32 0
  %97 = load ptr, ptr %96, align 8
  %memberidx42 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %97, i32 0, i32 5
  %98 = load ptr, ptr %memberidx42, align 8
  %99 = call ptr %98(ptr %95)
  %100 = load ptr, ptr %prop_name, align 8
  %101 = getelementptr inbounds %string, ptr %100, i32 0, i32 0
  %102 = load ptr, ptr %101, align 8
  %memberidx43 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %102, i32 0, i32 5
  %103 = load ptr, ptr %memberidx43, align 8
  %104 = call ptr %103(ptr %100)
  %105 = alloca ptr, align 8
  %106 = call i64 (ptr, ptr, ...) @asprintf(ptr %105, ptr @348, ptr %99, ptr %104)
  %107 = load ptr, ptr %105, align 8
  %108 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %108, ptr %107, i64 %106)
  tail call void @free(ptr %99)
  tail call void @free(ptr %104)
  %109 = getelementptr inbounds %string, ptr %108, i32 0, i32 0
  %110 = load ptr, ptr %109, align 8
  %memberidx44 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %110, i32 0, i32 5
  %111 = load ptr, ptr %memberidx44, align 8
  %112 = call ptr %111(ptr %108)
  %113 = call ptr @LLVMGetNamedFunction(ptr %93, ptr %112)
  store ptr %113, ptr %llvm_method_val, align 8
  %114 = load ptr, ptr %llvm_method_val, align 8
  %115 = icmp eq ptr %114, null
  br i1 %115, label %if.entry45, label %else46

ifend18:                                          ; preds = %ifend47, %ifend37
  %116 = load ptr, ptr %struct_class, align 8
  %memberidx51 = getelementptr inbounds %CGClassType, ptr %116, i32 0, i32 1
  %117 = load ptr, ptr %memberidx51, align 8
  %118 = load ptr, ptr %prop_id_key, align 8
  %119 = load i64, ptr %prop_index, align 4
  call void @Map_string_uint____setitem__(ptr %117, ptr %118, i64 %119)
  %120 = load ptr, ptr %prop_owner, align 8
  %memberidx52 = getelementptr inbounds %Class, ptr %120, i32 0, i32 5
  %121 = load ptr, ptr %memberidx52, align 8
  %122 = load ptr, ptr %prop_id, align 8
  %memberidx53 = getelementptr inbounds %PropId, ptr %122, i32 0, i32 2
  %123 = load i64, ptr %memberidx53, align 4
  %124 = call ptr @Array_ClassMethod____getitem__(ptr %121, i64 %123)
  %memberidx54 = getelementptr inbounds %ClassMethod, ptr %124, i32 0, i32 7
  %125 = load i1, ptr %memberidx54, align 1
  %126 = xor i1 %125, true
  br i1 %126, label %if.entry55, label %else56

if.entry28:                                       ; preds = %if.entry16
  %127 = load ptr, ptr %this, align 8
  %128 = load ptr, ptr %checked_class, align 8
  %memberidx31 = getelementptr inbounds %Class, ptr %128, i32 0, i32 1
  %129 = load ptr, ptr %memberidx31, align 8
  %130 = getelementptr inbounds %string, ptr %129, i32 0, i32 0
  %131 = load ptr, ptr %130, align 8
  %memberidx32 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %131, i32 0, i32 5
  %132 = load ptr, ptr %memberidx32, align 8
  %133 = call ptr %132(ptr %129)
  %134 = load ptr, ptr %prop_name, align 8
  %135 = getelementptr inbounds %string, ptr %134, i32 0, i32 0
  %136 = load ptr, ptr %135, align 8
  %memberidx33 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %136, i32 0, i32 5
  %137 = load ptr, ptr %memberidx33, align 8
  %138 = call ptr %137(ptr %134)
  %139 = alloca ptr, align 8
  %140 = call i64 (ptr, ptr, ...) @asprintf(ptr %139, ptr @348, ptr %133, ptr %138)
  %141 = load ptr, ptr %139, align 8
  %142 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %142, ptr %141, i64 %140)
  tail call void @free(ptr %133)
  tail call void @free(ptr %138)
  %143 = load ptr, ptr %llvm_method_type, align 8
  %144 = call ptr @CodeGen_declare_method(ptr %127, ptr %142, ptr %143)
  store ptr %144, ptr %llvm_method_val, align 8
  br label %ifend30

else29:                                           ; preds = %if.entry16
  br label %ifend30

ifend30:                                          ; preds = %else29, %if.entry28
  %145 = load ptr, ptr %this, align 8
  %memberidx34 = getelementptr inbounds %CodeGen, ptr %145, i32 0, i32 4
  %146 = load ptr, ptr %memberidx34, align 8
  %147 = load ptr, ptr %prop_id, align 8
  %148 = call i64 @get_class_prop_visibility(ptr %146, ptr %147)
  %149 = icmp eq i64 %148, 1
  br i1 %149, label %if.entry35, label %else36

if.entry35:                                       ; preds = %ifend30
  %150 = load ptr, ptr %struct_class, align 8
  %memberidx38 = getelementptr inbounds %CGClassType, ptr %150, i32 0, i32 3
  %151 = load ptr, ptr %memberidx38, align 8
  %152 = load ptr, ptr %prop_id_key, align 8
  %153 = load ptr, ptr %llvm_method_val, align 8
  call void @Map_string_LLVMValueRef____setitem__(ptr %151, ptr %152, ptr %153)
  br label %for.incr

else36:                                           ; preds = %ifend30
  br label %ifend37

ifend37:                                          ; preds = %else36
  br label %ifend18

if.entry45:                                       ; preds = %else17
  %154 = load ptr, ptr %prop_owner, align 8
  %memberidx48 = getelementptr inbounds %Class, ptr %154, i32 0, i32 1
  %155 = load ptr, ptr %memberidx48, align 8
  %156 = getelementptr inbounds %string, ptr %155, i32 0, i32 0
  %157 = load ptr, ptr %156, align 8
  %memberidx49 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %157, i32 0, i32 5
  %158 = load ptr, ptr %memberidx49, align 8
  %159 = call ptr %158(ptr %155)
  %160 = load ptr, ptr %prop_name, align 8
  %161 = getelementptr inbounds %string, ptr %160, i32 0, i32 0
  %162 = load ptr, ptr %161, align 8
  %memberidx50 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %162, i32 0, i32 5
  %163 = load ptr, ptr %memberidx50, align 8
  %164 = call ptr %163(ptr %160)
  %165 = alloca ptr, align 8
  %166 = call i64 (ptr, ptr, ...) @asprintf(ptr %165, ptr @644, ptr %159, ptr %164)
  %167 = load ptr, ptr %165, align 8
  %168 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %168, ptr %167, i64 %166)
  tail call void @free(ptr %159)
  tail call void @free(ptr %164)
  call void @panic(ptr %168)
  br label %ifend47

else46:                                           ; preds = %else17
  br label %ifend47

ifend47:                                          ; preds = %else46, %if.entry45
  br label %ifend18

if.entry55:                                       ; preds = %ifend18
  %169 = load ptr, ptr %vtable_values, align 8
  %170 = load i64, ptr %prop_index, align 4
  call void @resize_value_array(ptr %169, i64 %170)
  %171 = load ptr, ptr %vtable_values, align 8
  %172 = load i64, ptr %prop_index, align 4
  %173 = load ptr, ptr %llvm_method_val, align 8
  call void @Array_LLVMValueRef____setitem__(ptr %171, i64 %172, ptr %173)
  br label %ifend57

else56:                                           ; preds = %ifend18
  br label %ifend57

ifend57:                                          ; preds = %else56, %if.entry55
  %174 = load ptr, ptr %vtable_types, align 8
  %175 = load i64, ptr %prop_index, align 4
  call void @resize_type_array(ptr %174, i64 %175)
  %176 = load ptr, ptr %vtable_types, align 8
  %177 = load i64, ptr %prop_index, align 4
  %178 = load ptr, ptr %llvm_method_type, align 8
  %179 = call ptr @LLVMPointerType(ptr %178, i64 0)
  call void @Array_LLVMTypeRef____setitem__(ptr %176, i64 %177, ptr %179)
  br label %ifend

if.entry59:                                       ; preds = %for.end
  %180 = load ptr, ptr %vtable_types, align 8
  %memberidx62 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %180, i32 0, i32 1
  %181 = load ptr, ptr %memberidx62, align 8
  %182 = load ptr, ptr %vtable_types, align 8
  %memberidx63 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %182, i32 0, i32 2
  %183 = load i64, ptr %memberidx63, align 4
  %184 = call ptr @LLVMStructType(ptr %181, i64 %183, i1 false)
  store ptr %184, ptr %vtable_struct_ty, align 8
  %185 = load ptr, ptr %checked_class, align 8
  %memberidx64 = getelementptr inbounds %Class, ptr %185, i32 0, i32 10
  %186 = load i1, ptr %memberidx64, align 1
  %187 = xor i1 %186, true
  br i1 %187, label %if.entry65, label %else66

else60:                                           ; preds = %for.end
  br label %ifend61

ifend61:                                          ; preds = %else60, %ifend67
  %188 = load ptr, ptr %prop_types, align 8
  %189 = load ptr, ptr %field_types, align 8
  %190 = call ptr @Array_LLVMTypeRef____adda__(ptr %188, ptr %189)
  %191 = load ptr, ptr %field_types, align 8
  call void @Array_LLVMTypeRef____del__(ptr %191)
  tail call void @free(ptr %191)
  %192 = load ptr, ptr %vtable_types, align 8
  call void @Array_LLVMTypeRef____del__(ptr %192)
  tail call void @free(ptr %192)
  %193 = load ptr, ptr %vtable_values, align 8
  call void @Array_LLVMValueRef____del__(ptr %193)
  tail call void @free(ptr %193)
  ret void

if.entry65:                                       ; preds = %if.entry59
  %194 = load ptr, ptr %struct_class, align 8
  %memberidx68 = getelementptr inbounds %CGClassType, ptr %194, i32 0, i32 4
  %195 = load ptr, ptr %this, align 8
  %memberidx69 = getelementptr inbounds %CodeGen, ptr %195, i32 0, i32 0
  %196 = load ptr, ptr %memberidx69, align 8
  %197 = load ptr, ptr %vtable_struct_ty, align 8
  %198 = load ptr, ptr %checked_class, align 8
  %memberidx70 = getelementptr inbounds %Class, ptr %198, i32 0, i32 1
  %199 = load ptr, ptr %memberidx70, align 8
  %200 = getelementptr inbounds %string, ptr %199, i32 0, i32 0
  %201 = load ptr, ptr %200, align 8
  %memberidx71 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %201, i32 0, i32 5
  %202 = load ptr, ptr %memberidx71, align 8
  %203 = call ptr %202(ptr %199)
  %204 = alloca ptr, align 8
  %205 = call i64 (ptr, ptr, ...) @asprintf(ptr %204, ptr @645, ptr %203)
  %206 = load ptr, ptr %204, align 8
  %207 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %207, ptr %206, i64 %205)
  tail call void @free(ptr %203)
  %208 = getelementptr inbounds %string, ptr %207, i32 0, i32 0
  %209 = load ptr, ptr %208, align 8
  %memberidx72 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %209, i32 0, i32 5
  %210 = load ptr, ptr %memberidx72, align 8
  %211 = call ptr %210(ptr %207)
  %212 = call ptr @LLVMAddGlobal(ptr %196, ptr %197, ptr %211)
  store ptr %212, ptr %memberidx68, align 8
  %213 = load ptr, ptr %vtable_values, align 8
  %memberidx73 = getelementptr inbounds %Array_LLVMValueRef_, ptr %213, i32 0, i32 1
  %214 = load ptr, ptr %memberidx73, align 8
  %215 = load ptr, ptr %vtable_values, align 8
  %memberidx74 = getelementptr inbounds %Array_LLVMValueRef_, ptr %215, i32 0, i32 2
  %216 = load i64, ptr %memberidx74, align 4
  %217 = call ptr @LLVMConstStruct(ptr %214, i64 %216, i1 false)
  store ptr %217, ptr %vtable_intializer, align 8
  %218 = load ptr, ptr %struct_class, align 8
  %memberidx75 = getelementptr inbounds %CGClassType, ptr %218, i32 0, i32 4
  %219 = load ptr, ptr %memberidx75, align 8
  %220 = load ptr, ptr %vtable_intializer, align 8
  call void @LLVMSetInitializer(ptr %219, ptr %220)
  br label %ifend67

else66:                                           ; preds = %if.entry59
  br label %ifend67

ifend67:                                          ; preds = %else66, %if.entry65
  %221 = load ptr, ptr %struct_class, align 8
  %memberidx76 = getelementptr inbounds %CGClassType, ptr %221, i32 0, i32 5
  %222 = load ptr, ptr %vtable_struct_ty, align 8
  store ptr %222, ptr %memberidx76, align 8
  %223 = load ptr, ptr %prop_types, align 8
  %224 = load ptr, ptr %vtable_struct_ty, align 8
  %225 = call ptr @LLVMPointerType(ptr %224, i64 0)
  call void @Array_LLVMTypeRef____sl__(ptr %223, ptr %225)
  br label %ifend61
}

define ptr @CodeGen_get_or_codegen_var(ptr %0, ptr %1) {
  %target_id = alloca ptr, align 8
  %this = alloca ptr, align 8
  %var = alloca ptr, align 8
  %module = alloca ptr, align 8
  %global_const = alloca ptr, align 8
  %const_id = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %var_id = alloca ptr, align 8
  %tmp_it1 = alloca ptr, align 8
  %global_var = alloca ptr, align 8
  %fnc_id = alloca ptr, align 8
  %tmp_it2 = alloca ptr, align 8
  %function = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %target_id, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %target_id, align 8
  %5 = call ptr @CodeGen_get_var_from_varid(ptr %3, ptr %4)
  store ptr %5, ptr %var, align 8
  %6 = load ptr, ptr %var, align 8
  %7 = icmp ne ptr %6, null
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %var, align 8
  ret ptr %8

else:                                             ; preds = %2
  br label %ifend

ifend:                                            ; preds = %else
  %9 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %9, i32 0, i32 4
  %10 = load ptr, ptr %memberidx, align 8
  %memberidx3 = getelementptr inbounds %Program, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx3, align 8
  %12 = load ptr, ptr %target_id, align 8
  %memberidx4 = getelementptr inbounds %VarId, ptr %12, i32 0, i32 1
  %13 = load i64, ptr %memberidx4, align 4
  %14 = call ptr @Array_Module____getitem__(ptr %11, i64 %13)
  store ptr %14, ptr %module, align 8
  %15 = load ptr, ptr %target_id, align 8
  %memberidx5 = getelementptr inbounds %VarId, ptr %15, i32 0, i32 0
  %16 = load i64, ptr %memberidx5, align 4
  %17 = icmp eq i64 %16, 2
  br i1 %17, label %if.entry6, label %else7

if.entry6:                                        ; preds = %ifend
  br label %for.entry

else7:                                            ; preds = %ifend
  br label %ifend8

ifend8:                                           ; preds = %else7, %for.end
  %18 = load ptr, ptr %target_id, align 8
  %memberidx17 = getelementptr inbounds %VarId, ptr %18, i32 0, i32 0
  %19 = load i64, ptr %memberidx17, align 4
  %20 = icmp eq i64 %19, 1
  br i1 %20, label %if.entry18, label %else19

for.entry:                                        ; preds = %if.entry6
  %21 = load ptr, ptr %module, align 8
  %memberidx9 = getelementptr inbounds %Module, ptr %21, i32 0, i32 8
  %22 = load ptr, ptr %memberidx9, align 8
  %23 = call ptr @Array_ConstDeclaration____iter__(ptr %22)
  store ptr %23, ptr %tmp_it, align 8
  %24 = load ptr, ptr %tmp_it, align 8
  %25 = call ptr @ArrayIterator_ConstDeclaration__next(ptr %24)
  store ptr %25, ptr %global_const, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %26 = load ptr, ptr %tmp_it, align 8
  %memberidx10 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %26, i32 0, i32 0
  %27 = load i1, ptr %memberidx10, align 1
  %28 = xor i1 %27, true
  br i1 %28, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load ptr, ptr %global_const, align 8
  %memberidx11 = getelementptr inbounds %ConstDeclaration, ptr %29, i32 0, i32 2
  %30 = load ptr, ptr %memberidx11, align 8
  store ptr %30, ptr %const_id, align 8
  %31 = load ptr, ptr %const_id, align 8
  %memberidx12 = getelementptr inbounds %VarId, ptr %31, i32 0, i32 2
  %32 = load i64, ptr %memberidx12, align 4
  %33 = load ptr, ptr %target_id, align 8
  %memberidx13 = getelementptr inbounds %VarId, ptr %33, i32 0, i32 2
  %34 = load i64, ptr %memberidx13, align 4
  %35 = icmp eq i64 %32, %34
  br i1 %35, label %if.entry14, label %else15

for.incr:                                         ; preds = %ifend16
  %36 = load ptr, ptr %tmp_it, align 8
  %37 = call ptr @ArrayIterator_ConstDeclaration__next(ptr %36)
  store ptr %37, ptr %global_const, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %38 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %38)
  br label %ifend8

if.entry14:                                       ; preds = %for.body
  %39 = load ptr, ptr %this, align 8
  %40 = load ptr, ptr %global_const, align 8
  call void @CodeGen_codegen_const_declaration(ptr %39, ptr null, ptr %40)
  %41 = load ptr, ptr %this, align 8
  %42 = load ptr, ptr %target_id, align 8
  %43 = call ptr @CodeGen_get_var_from_varid(ptr %41, ptr %42)
  ret ptr %43

else15:                                           ; preds = %for.body
  br label %ifend16

ifend16:                                          ; preds = %else15
  br label %for.incr

if.entry18:                                       ; preds = %ifend8
  br label %for.entry21

else19:                                           ; preds = %ifend8
  br label %ifend20

ifend20:                                          ; preds = %else19, %for.end26
  %44 = load ptr, ptr %target_id, align 8
  %memberidx34 = getelementptr inbounds %VarId, ptr %44, i32 0, i32 0
  %45 = load i64, ptr %memberidx34, align 4
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %if.entry35, label %else36

for.entry21:                                      ; preds = %if.entry18
  %47 = load ptr, ptr %module, align 8
  %memberidx22 = getelementptr inbounds %Module, ptr %47, i32 0, i32 9
  %48 = load ptr, ptr %memberidx22, align 8
  %49 = call ptr @Array_VarDeclaration____iter__(ptr %48)
  store ptr %49, ptr %tmp_it1, align 8
  %50 = load ptr, ptr %tmp_it1, align 8
  %51 = call ptr @ArrayIterator_VarDeclaration__next(ptr %50)
  store ptr %51, ptr %global_var, align 8
  br label %for.cond23

for.cond23:                                       ; preds = %for.incr25, %for.entry21
  %52 = load ptr, ptr %tmp_it1, align 8
  %memberidx27 = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %52, i32 0, i32 0
  %53 = load i1, ptr %memberidx27, align 1
  %54 = xor i1 %53, true
  br i1 %54, label %for.body24, label %for.end26

for.body24:                                       ; preds = %for.cond23
  %55 = load ptr, ptr %global_var, align 8
  %memberidx28 = getelementptr inbounds %VarDeclaration, ptr %55, i32 0, i32 2
  %56 = load ptr, ptr %memberidx28, align 8
  store ptr %56, ptr %var_id, align 8
  %57 = load ptr, ptr %var_id, align 8
  %memberidx29 = getelementptr inbounds %VarId, ptr %57, i32 0, i32 2
  %58 = load i64, ptr %memberidx29, align 4
  %59 = load ptr, ptr %target_id, align 8
  %memberidx30 = getelementptr inbounds %VarId, ptr %59, i32 0, i32 2
  %60 = load i64, ptr %memberidx30, align 4
  %61 = icmp eq i64 %58, %60
  br i1 %61, label %if.entry31, label %else32

for.incr25:                                       ; preds = %ifend33
  %62 = load ptr, ptr %tmp_it1, align 8
  %63 = call ptr @ArrayIterator_VarDeclaration__next(ptr %62)
  store ptr %63, ptr %global_var, align 8
  br label %for.cond23

for.end26:                                        ; preds = %for.cond23
  %64 = load ptr, ptr %tmp_it1, align 8
  tail call void @free(ptr %64)
  br label %ifend20

if.entry31:                                       ; preds = %for.body24
  %65 = load ptr, ptr %this, align 8
  %66 = load ptr, ptr %global_var, align 8
  call void @CodeGen_codegen_var_declaration(ptr %65, ptr null, ptr %66)
  %67 = load ptr, ptr %this, align 8
  %68 = load ptr, ptr %target_id, align 8
  %69 = call ptr @CodeGen_get_var_from_varid(ptr %67, ptr %68)
  ret ptr %69

else32:                                           ; preds = %for.body24
  br label %ifend33

ifend33:                                          ; preds = %else32
  br label %for.incr25

if.entry35:                                       ; preds = %ifend20
  br label %for.entry38

else36:                                           ; preds = %ifend20
  br label %ifend37

ifend37:                                          ; preds = %else36, %for.end43
  ret ptr null

for.entry38:                                      ; preds = %if.entry35
  %70 = load ptr, ptr %module, align 8
  %memberidx39 = getelementptr inbounds %Module, ptr %70, i32 0, i32 4
  %71 = load ptr, ptr %memberidx39, align 8
  %72 = call ptr @Array_Function____iter__(ptr %71)
  store ptr %72, ptr %tmp_it2, align 8
  %73 = load ptr, ptr %tmp_it2, align 8
  %74 = call ptr @ArrayIterator_Function__next(ptr %73)
  store ptr %74, ptr %function, align 8
  br label %for.cond40

for.cond40:                                       ; preds = %for.incr42, %for.entry38
  %75 = load ptr, ptr %tmp_it2, align 8
  %memberidx44 = getelementptr inbounds %ArrayIterator_Function_, ptr %75, i32 0, i32 0
  %76 = load i1, ptr %memberidx44, align 1
  %77 = xor i1 %76, true
  br i1 %77, label %for.body41, label %for.end43

for.body41:                                       ; preds = %for.cond40
  %78 = load ptr, ptr %function, align 8
  %memberidx45 = getelementptr inbounds %Function, ptr %78, i32 0, i32 0
  %79 = load ptr, ptr %memberidx45, align 8
  store ptr %79, ptr %fnc_id, align 8
  %80 = load ptr, ptr %fnc_id, align 8
  %memberidx46 = getelementptr inbounds %VarId, ptr %80, i32 0, i32 2
  %81 = load i64, ptr %memberidx46, align 4
  %82 = load ptr, ptr %target_id, align 8
  %memberidx47 = getelementptr inbounds %VarId, ptr %82, i32 0, i32 2
  %83 = load i64, ptr %memberidx47, align 4
  %84 = icmp eq i64 %81, %83
  br i1 %84, label %if.entry48, label %else49

for.incr42:                                       ; preds = %ifend50
  %85 = load ptr, ptr %tmp_it2, align 8
  %86 = call ptr @ArrayIterator_Function__next(ptr %85)
  store ptr %86, ptr %function, align 8
  br label %for.cond40

for.end43:                                        ; preds = %for.cond40
  %87 = load ptr, ptr %tmp_it2, align 8
  tail call void @free(ptr %87)
  br label %ifend37

if.entry48:                                       ; preds = %for.body41
  %88 = load ptr, ptr %this, align 8
  %89 = load ptr, ptr %function, align 8
  call void @CodeGen_codegen_function(ptr %88, ptr %89)
  %90 = load ptr, ptr %this, align 8
  %91 = load ptr, ptr %target_id, align 8
  %92 = call ptr @CodeGen_get_var_from_varid(ptr %90, ptr %91)
  ret ptr %92

else49:                                           ; preds = %for.body41
  br label %ifend50

ifend50:                                          ; preds = %else49
  br label %for.incr42
}

define void @CodeGen_codegen_while_stmt(ptr %0, ptr %1, ptr %2) {
  %this = alloca ptr, align 8
  %while_stmt = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %prev_continue_bb = alloca ptr, align 8
  %while_bb = alloca ptr, align 8
  %prev_break_bb = alloca ptr, align 8
  %while_end_bb = alloca ptr, align 8
  %condition = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %while_stmt, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @LLVMAppendBasicBlock(ptr %5, ptr @624)
  store ptr %6, ptr %while_bb, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx1, align 8
  %9 = call ptr @LLVMAppendBasicBlock(ptr %8, ptr @625)
  store ptr %9, ptr %while_end_bb, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %CodeGen, ptr %10, i32 0, i32 2
  %11 = load ptr, ptr %memberidx2, align 8
  store ptr %11, ptr %prev_break_bb, align 8
  %12 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %CodeGen, ptr %12, i32 0, i32 3
  %13 = load ptr, ptr %memberidx3, align 8
  store ptr %13, ptr %prev_continue_bb, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %CodeGen, ptr %14, i32 0, i32 2
  %15 = load ptr, ptr %while_end_bb, align 8
  store ptr %15, ptr %memberidx4, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %CodeGen, ptr %16, i32 0, i32 3
  %17 = load ptr, ptr %while_bb, align 8
  store ptr %17, ptr %memberidx5, align 8
  %18 = load ptr, ptr %this, align 8
  %19 = load ptr, ptr %builder, align 8
  %20 = load ptr, ptr %while_stmt, align 8
  %memberidx6 = getelementptr inbounds %WhileStatement, ptr %20, i32 0, i32 1
  %21 = load ptr, ptr %memberidx6, align 8
  %22 = call ptr @CodeGen_codegen_expression(ptr %18, ptr %19, ptr %21)
  store ptr %22, ptr %condition, align 8
  %23 = load ptr, ptr %builder, align 8
  %24 = load ptr, ptr %condition, align 8
  %25 = load ptr, ptr %while_bb, align 8
  %26 = load ptr, ptr %while_end_bb, align 8
  %27 = call ptr @LLVMBuildCondBr(ptr %23, ptr %24, ptr %25, ptr %26)
  %28 = load ptr, ptr %builder, align 8
  %29 = load ptr, ptr %while_bb, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %28, ptr %29)
  %30 = load ptr, ptr %this, align 8
  %31 = load ptr, ptr %builder, align 8
  %32 = load ptr, ptr %while_stmt, align 8
  %memberidx7 = getelementptr inbounds %WhileStatement, ptr %32, i32 0, i32 2
  %33 = load ptr, ptr %memberidx7, align 8
  %34 = call ptr @CodeGen_codegen_block(ptr %30, ptr %31, ptr %33)
  %35 = load ptr, ptr %while_stmt, align 8
  %memberidx8 = getelementptr inbounds %WhileStatement, ptr %35, i32 0, i32 2
  %36 = load ptr, ptr %memberidx8, align 8
  %37 = call i1 @is_terminated(ptr %36)
  %38 = xor i1 %37, true
  br i1 %38, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %39 = load ptr, ptr %this, align 8
  %40 = load ptr, ptr %builder, align 8
  %41 = load ptr, ptr %while_stmt, align 8
  %memberidx9 = getelementptr inbounds %WhileStatement, ptr %41, i32 0, i32 1
  %42 = load ptr, ptr %memberidx9, align 8
  %43 = call ptr @CodeGen_codegen_expression(ptr %39, ptr %40, ptr %42)
  store ptr %43, ptr %condition, align 8
  %44 = load ptr, ptr %builder, align 8
  %45 = load ptr, ptr %condition, align 8
  %46 = load ptr, ptr %while_bb, align 8
  %47 = load ptr, ptr %while_end_bb, align 8
  %48 = call ptr @LLVMBuildCondBr(ptr %44, ptr %45, ptr %46, ptr %47)
  br label %ifend

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %49 = load ptr, ptr %builder, align 8
  %50 = load ptr, ptr %while_end_bb, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %49, ptr %50)
  %51 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %CodeGen, ptr %51, i32 0, i32 2
  %52 = load ptr, ptr %prev_break_bb, align 8
  store ptr %52, ptr %memberidx10, align 8
  %53 = load ptr, ptr %this, align 8
  %memberidx11 = getelementptr inbounds %CodeGen, ptr %53, i32 0, i32 3
  %54 = load ptr, ptr %prev_continue_bb, align 8
  store ptr %54, ptr %memberidx11, align 8
  ret void
}

define void @CodeGen_declare_enum(ptr %0, ptr %1) {
  %checked_enum = alloca ptr, align 8
  %this = alloca ptr, align 8
  %elements = alloca ptr, align 8
  %metanames = alloca ptr, align 8
  %metanames_initializer = alloca ptr, align 8
  %enum_type = alloca ptr, align 8
  %idx = alloca i64, align 8
  %enum_field = alloca ptr, align 8
  %str_const = alloca ptr, align 8
  %str = alloca ptr, align 8
  %prop_id = alloca ptr, align 8
  %str_global = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %checked_enum, align 8
  %3 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%CGEnumType, ptr null, i32 1) to i32))
  call void @CGEnumType_constructor(ptr %3)
  store ptr %3, ptr %enum_type, align 8
  %4 = load ptr, ptr %checked_enum, align 8
  %memberidx = getelementptr inbounds %Enum, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumField_, ptr %5, i32 0, i32 2
  %6 = load i64, ptr %memberidx1, align 4
  %7 = icmp sgt i64 %6, 0
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %8 = load ptr, ptr %enum_type, align 8
  %memberidx2 = getelementptr inbounds %CGEnumType, ptr %8, i32 0, i32 0
  %9 = load ptr, ptr %this, align 8
  %10 = load ptr, ptr %checked_enum, align 8
  %memberidx3 = getelementptr inbounds %Enum, ptr %10, i32 0, i32 2
  %11 = load ptr, ptr %memberidx3, align 8
  %12 = call ptr @Array_EnumField____getitem__(ptr %11, i64 0)
  %memberidx4 = getelementptr inbounds %EnumField, ptr %12, i32 0, i32 2
  %13 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Expression, ptr %13, i32 0, i32 3
  %14 = load ptr, ptr %memberidx5, align 8
  %15 = call ptr @CodeGen_codegen_type(ptr %9, ptr %14, i1 true)
  store ptr %15, ptr %memberidx2, align 8
  br label %ifend

else:                                             ; preds = %2
  %16 = load ptr, ptr %enum_type, align 8
  %memberidx6 = getelementptr inbounds %CGEnumType, ptr %16, i32 0, i32 0
  %17 = load i64, ptr @ARCH_WORD_SIZE, align 4
  %18 = call ptr @LLVMIntType(i64 %17)
  store ptr %18, ptr %memberidx6, align 8
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %19 = load ptr, ptr %checked_enum, align 8
  %memberidx7 = getelementptr inbounds %Enum, ptr %19, i32 0, i32 2
  %20 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %Array_EnumField_, ptr %20, i32 0, i32 2
  %21 = load i64, ptr %memberidx8, align 4
  %22 = alloca ptr, i64 %21, align 8
  store ptr %22, ptr %elements, align 8
  store i64 0, ptr %idx, align 4
  br label %for.entry

for.entry:                                        ; preds = %ifend
  %23 = load ptr, ptr %checked_enum, align 8
  %memberidx9 = getelementptr inbounds %Enum, ptr %23, i32 0, i32 2
  %24 = load ptr, ptr %memberidx9, align 8
  %25 = call ptr @Array_EnumField____iter__(ptr %24)
  store ptr %25, ptr %tmp_it, align 8
  %26 = load ptr, ptr %tmp_it, align 8
  %27 = call ptr @ArrayIterator_EnumField__next(ptr %26)
  store ptr %27, ptr %enum_field, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %28 = load ptr, ptr %tmp_it, align 8
  %memberidx10 = getelementptr inbounds %ArrayIterator_EnumField_, ptr %28, i32 0, i32 0
  %29 = load i1, ptr %memberidx10, align 1
  %30 = xor i1 %29, true
  br i1 %30, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %31 = load ptr, ptr %enum_field, align 8
  %memberidx11 = getelementptr inbounds %EnumField, ptr %31, i32 0, i32 0
  %32 = load ptr, ptr %memberidx11, align 8
  store ptr %32, ptr %prop_id, align 8
  %33 = load ptr, ptr %enum_type, align 8
  %memberidx12 = getelementptr inbounds %CGEnumType, ptr %33, i32 0, i32 1
  %34 = load ptr, ptr %memberidx12, align 8
  %35 = load ptr, ptr %prop_id, align 8
  %36 = call ptr @create_prop_key(ptr %35)
  %37 = load ptr, ptr %this, align 8
  %38 = load ptr, ptr %enum_field, align 8
  %memberidx13 = getelementptr inbounds %EnumField, ptr %38, i32 0, i32 2
  %39 = load ptr, ptr %memberidx13, align 8
  %40 = call ptr @CodeGen_codegen_expression(ptr %37, ptr null, ptr %39)
  call void @Map_string_LLVMValueRef____setitem__(ptr %34, ptr %36, ptr %40)
  %41 = load ptr, ptr %checked_enum, align 8
  %memberidx14 = getelementptr inbounds %Enum, ptr %41, i32 0, i32 1
  %42 = load ptr, ptr %memberidx14, align 8
  %43 = getelementptr inbounds %string, ptr %42, i32 0, i32 0
  %44 = load ptr, ptr %43, align 8
  %memberidx15 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %44, i32 0, i32 5
  %45 = load ptr, ptr %memberidx15, align 8
  %46 = call ptr %45(ptr %42)
  %47 = load ptr, ptr %enum_field, align 8
  %memberidx16 = getelementptr inbounds %EnumField, ptr %47, i32 0, i32 1
  %48 = load ptr, ptr %memberidx16, align 8
  %49 = getelementptr inbounds %string, ptr %48, i32 0, i32 0
  %50 = load ptr, ptr %49, align 8
  %memberidx17 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %50, i32 0, i32 5
  %51 = load ptr, ptr %memberidx17, align 8
  %52 = call ptr %51(ptr %48)
  %53 = alloca ptr, align 8
  %54 = call i64 (ptr, ptr, ...) @asprintf(ptr %53, ptr @647, ptr %46, ptr %52)
  %55 = load ptr, ptr %53, align 8
  %56 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %56, ptr %55, i64 %54)
  tail call void @free(ptr %46)
  tail call void @free(ptr %52)
  store ptr %56, ptr %str, align 8
  %57 = load ptr, ptr %str, align 8
  %58 = getelementptr inbounds %string, ptr %57, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %memberidx18 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %59, i32 0, i32 5
  %60 = load ptr, ptr %memberidx18, align 8
  %61 = call ptr %60(ptr %57)
  %62 = load ptr, ptr %str, align 8
  %memberidx19 = getelementptr inbounds %string, ptr %62, i32 0, i32 2
  %63 = load i64, ptr %memberidx19, align 4
  %64 = call ptr @LLVMConstString(ptr %61, i64 %63, i1 false)
  store ptr %64, ptr %str_const, align 8
  %65 = load ptr, ptr %this, align 8
  %memberidx20 = getelementptr inbounds %CodeGen, ptr %65, i32 0, i32 0
  %66 = load ptr, ptr %memberidx20, align 8
  %67 = load ptr, ptr %str_const, align 8
  %68 = call ptr @LLVMTypeOf(ptr %67)
  %69 = call ptr @LLVMAddGlobal(ptr %66, ptr %68, ptr @315)
  store ptr %69, ptr %str_global, align 8
  %70 = load ptr, ptr %str_global, align 8
  %71 = load ptr, ptr %str_const, align 8
  call void @LLVMSetInitializer(ptr %70, ptr %71)
  %72 = load i64, ptr %idx, align 4
  %73 = add nsw i64 %72, 1
  store i64 %73, ptr %idx, align 4
  %74 = load ptr, ptr %elements, align 8
  %75 = getelementptr inbounds ptr, ptr %74, i64 %72
  %76 = load ptr, ptr %str_global, align 8
  store ptr %76, ptr %75, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %77 = load ptr, ptr %tmp_it, align 8
  %78 = call ptr @ArrayIterator_EnumField__next(ptr %77)
  store ptr %78, ptr %enum_field, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %79 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %79)
  %80 = call ptr @LLVMInt8Type()
  %81 = call ptr @LLVMPointerType(ptr %80, i64 0)
  %82 = load ptr, ptr %elements, align 8
  %83 = load i64, ptr %idx, align 4
  %84 = call ptr @LLVMConstArray(ptr %81, ptr %82, i64 %83)
  store ptr %84, ptr %metanames_initializer, align 8
  %85 = load ptr, ptr %this, align 8
  %memberidx21 = getelementptr inbounds %CodeGen, ptr %85, i32 0, i32 0
  %86 = load ptr, ptr %memberidx21, align 8
  %87 = load ptr, ptr %metanames_initializer, align 8
  %88 = call ptr @LLVMTypeOf(ptr %87)
  %89 = load ptr, ptr %checked_enum, align 8
  %memberidx22 = getelementptr inbounds %Enum, ptr %89, i32 0, i32 1
  %90 = load ptr, ptr %memberidx22, align 8
  %91 = getelementptr inbounds %string, ptr %90, i32 0, i32 0
  %92 = load ptr, ptr %91, align 8
  %memberidx23 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %92, i32 0, i32 5
  %93 = load ptr, ptr %memberidx23, align 8
  %94 = call ptr %93(ptr %90)
  %95 = alloca ptr, align 8
  %96 = call i64 (ptr, ptr, ...) @asprintf(ptr %95, ptr @648, ptr %94)
  %97 = load ptr, ptr %95, align 8
  %98 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %98, ptr %97, i64 %96)
  tail call void @free(ptr %94)
  %99 = getelementptr inbounds %string, ptr %98, i32 0, i32 0
  %100 = load ptr, ptr %99, align 8
  %memberidx24 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %100, i32 0, i32 5
  %101 = load ptr, ptr %memberidx24, align 8
  %102 = call ptr %101(ptr %98)
  %103 = call ptr @LLVMAddGlobal(ptr %86, ptr %88, ptr %102)
  store ptr %103, ptr %metanames, align 8
  %104 = load ptr, ptr %metanames, align 8
  %105 = load ptr, ptr %metanames_initializer, align 8
  call void @LLVMSetInitializer(ptr %104, ptr %105)
  %106 = load ptr, ptr %enum_type, align 8
  %memberidx25 = getelementptr inbounds %CGEnumType, ptr %106, i32 0, i32 2
  %107 = load ptr, ptr %metanames, align 8
  store ptr %107, ptr %memberidx25, align 8
  %108 = load ptr, ptr %this, align 8
  %109 = load ptr, ptr %checked_enum, align 8
  %memberidx26 = getelementptr inbounds %Enum, ptr %109, i32 0, i32 0
  %110 = load ptr, ptr %memberidx26, align 8
  %111 = load ptr, ptr %enum_type, align 8
  call void @CodeGen_add_enum(ptr %108, ptr %110, ptr %111)
  ret void
}

define ptr @CodeGen_codegen_assignment(ptr %0, ptr %1, ptr %2) {
  %assign_exp = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %assign_exp, align 8
  %4 = load ptr, ptr %this, align 8
  %5 = load ptr, ptr %builder, align 8
  %6 = load ptr, ptr %assign_exp, align 8
  %memberidx = getelementptr inbounds %BinaryExpression, ptr %6, i32 0, i32 4
  %7 = load ptr, ptr %memberidx, align 8
  %8 = call ptr @CodeGen_get_expr_mem(ptr %4, ptr %5, ptr %7)
  store ptr %8, ptr %ptr, align 8
  %9 = load ptr, ptr %this, align 8
  %10 = load ptr, ptr %builder, align 8
  %11 = load ptr, ptr %ptr, align 8
  %12 = load ptr, ptr %assign_exp, align 8
  %memberidx1 = getelementptr inbounds %BinaryExpression, ptr %12, i32 0, i32 6
  %13 = load ptr, ptr %memberidx1, align 8
  %14 = call ptr @CodeGen_store_expr_to_mem(ptr %9, ptr %10, ptr %11, ptr %13)
  ret ptr %14
}

define ptr @CodeGen_construct_class(ptr %0, ptr %1) {
  %class_ = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %class_, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %class_, align 8
  call void @CodeGen_declare_class(ptr %3, ptr %4)
  %5 = load ptr, ptr %this, align 8
  %6 = load ptr, ptr %class_, align 8
  call void @CodeGen_codegen_class(ptr %5, ptr %6)
  %7 = load ptr, ptr %this, align 8
  %8 = load ptr, ptr %class_, align 8
  %memberidx = getelementptr inbounds %Class, ptr %8, i32 0, i32 0
  %9 = load ptr, ptr %memberidx, align 8
  %10 = call ptr @CodeGen_get_class_from_typeid(ptr %7, ptr %9)
  ret ptr %10
}

define void @CodeGen_build_constructor_call(ptr %0, ptr %1, ptr %2, ptr %3, i64 %4) {
  %params_length = alloca i64, align 8
  %params = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %obj_type = alloca ptr, align 8
  %constructor = alloca ptr, align 8
  %checked_class = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %obj_type, align 8
  store ptr %3, ptr %params, align 8
  store i64 %4, ptr %params_length, align 4
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %6, i32 0, i32 4
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load ptr, ptr %obj_type, align 8
  %9 = call ptr @get_class_from_type(ptr %7, ptr %8)
  store ptr %9, ptr %checked_class, align 8
  %10 = load ptr, ptr %this, align 8
  %11 = load ptr, ptr %obj_type, align 8
  %memberidx1 = getelementptr inbounds %ObjectType, ptr %11, i32 0, i32 1
  %12 = load ptr, ptr %memberidx1, align 8
  %13 = call ptr @CodeGen_get_or_codegen_class_from_typeid(ptr %10, ptr %12)
  %memberidx2 = getelementptr inbounds %CGClassType, ptr %13, i32 0, i32 6
  %14 = load ptr, ptr %memberidx2, align 8
  store ptr %14, ptr %constructor, align 8
  %15 = load ptr, ptr %constructor, align 8
  %16 = icmp ne ptr %15, null
  br i1 %16, label %if.entry, label %else

if.entry:                                         ; preds = %5
  %17 = load ptr, ptr %builder, align 8
  %18 = load ptr, ptr %constructor, align 8
  %19 = call ptr @LLVM_GetFunctionType(ptr %18)
  %20 = load ptr, ptr %constructor, align 8
  %21 = load ptr, ptr %params, align 8
  %22 = load i64, ptr %params_length, align 4
  %23 = call ptr @LLVMBuildCall2(ptr %17, ptr %19, ptr %20, ptr %21, i64 %22, ptr @315)
  br label %ifend

else:                                             ; preds = %5
  %24 = call ptr @string_from_bytes(ptr @626, i64 47)
  call void @panic(ptr %24)
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  ret void
}

define ptr @CodeGen_codegen_safe_fmt_string(ptr %0, ptr %1, ptr %2, ptr %3, i64 %4, ptr %5) {
  %args = alloca ptr, align 8
  %args_length = alloca i64, align 8
  %this = alloca ptr, align 8
  %len_ptr = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %fmt = alloca ptr, align 8
  %alloc_buff = alloca ptr, align 8
  %i8_ty = alloca ptr, align 8
  %str_len = alloca ptr, align 8
  %num_passed_args = alloca i64, align 8
  %i8_ptr_ty = alloca ptr, align 8
  %llvm_fmt = alloca ptr, align 8
  %int_ty = alloca ptr, align 8
  %arg_types = alloca [2 x ptr], align 8
  %asprintf = alloca ptr, align 8
  %call_args_buffer = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %fmt, align 8
  store ptr %3, ptr %args, align 8
  store i64 %4, ptr %args_length, align 4
  store ptr %5, ptr %len_ptr, align 8
  %7 = call ptr @LLVMInt8Type()
  store ptr %7, ptr %i8_ty, align 8
  %8 = load ptr, ptr %i8_ty, align 8
  %9 = call ptr @LLVMPointerType(ptr %8, i64 0)
  store ptr %9, ptr %i8_ptr_ty, align 8
  %10 = load i64, ptr @ARCH_WORD_SIZE, align 4
  %11 = call ptr @LLVMIntType(i64 %10)
  store ptr %11, ptr %int_ty, align 8
  %12 = load ptr, ptr %builder, align 8
  %13 = load ptr, ptr %i8_ptr_ty, align 8
  %14 = call ptr @LLVMBuildAlloca(ptr %12, ptr %13, ptr @315)
  store ptr %14, ptr %alloc_buff, align 8
  %15 = load ptr, ptr %this, align 8
  %16 = load ptr, ptr %builder, align 8
  %17 = load ptr, ptr %fmt, align 8
  %18 = call ptr @CodeGen_createGlobalLLVMString(ptr %15, ptr %16, ptr %17)
  store ptr %18, ptr %llvm_fmt, align 8
  %19 = load i64, ptr %args_length, align 4
  %20 = add nuw i64 %19, 2
  store i64 %20, ptr %num_passed_args, align 4
  %21 = load i64, ptr %num_passed_args, align 4
  %22 = alloca ptr, i64 %21, align 8
  store ptr %22, ptr %call_args_buffer, align 8
  %23 = load ptr, ptr %call_args_buffer, align 8
  %24 = getelementptr inbounds ptr, ptr %23, i64 0
  %25 = load ptr, ptr %alloc_buff, align 8
  store ptr %25, ptr %24, align 8
  %26 = load ptr, ptr %call_args_buffer, align 8
  %27 = getelementptr inbounds ptr, ptr %26, i64 1
  %28 = load ptr, ptr %llvm_fmt, align 8
  store ptr %28, ptr %27, align 8
  %29 = load ptr, ptr %call_args_buffer, align 8
  %30 = getelementptr inbounds ptr, ptr %29, i64 2
  %31 = load ptr, ptr %args, align 8
  %32 = load i64, ptr %args_length, align 4
  %33 = mul i64 %32, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %30, ptr align 8 %31, i64 %33, i1 false)
  %34 = getelementptr inbounds [2 x ptr], ptr %arg_types, i64 0, i64 0
  %35 = load ptr, ptr %i8_ptr_ty, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr inbounds ptr, ptr %34, i64 1
  %37 = load ptr, ptr %i8_ptr_ty, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr inbounds ptr, ptr %36, i64 1
  %39 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %39, i32 0, i32 0
  %40 = load ptr, ptr %memberidx, align 8
  %41 = call ptr @string_from_bytes(ptr @529, i64 8)
  %42 = getelementptr inbounds [2 x ptr], ptr %arg_types, i64 0, i64 0
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr inbounds [2 x ptr], ptr %arg_types, i64 0, i64 0
  %45 = load ptr, ptr %int_ty, align 8
  %46 = call ptr @get_intrinsic(ptr %40, ptr %41, ptr %44, i64 2, ptr %45, i1 true)
  store ptr %46, ptr %asprintf, align 8
  %47 = load ptr, ptr %builder, align 8
  %48 = load ptr, ptr %asprintf, align 8
  %memberidx1 = getelementptr inbounds %IntrinsicResult, ptr %48, i32 0, i32 1
  %49 = load ptr, ptr %memberidx1, align 8
  %50 = load ptr, ptr %asprintf, align 8
  %memberidx2 = getelementptr inbounds %IntrinsicResult, ptr %50, i32 0, i32 0
  %51 = load ptr, ptr %memberidx2, align 8
  %52 = load ptr, ptr %call_args_buffer, align 8
  %53 = load i64, ptr %num_passed_args, align 4
  %54 = call ptr @LLVMBuildCall2(ptr %47, ptr %49, ptr %51, ptr %52, i64 %53, ptr @315)
  store ptr %54, ptr %str_len, align 8
  %55 = load ptr, ptr %len_ptr, align 8
  %56 = icmp ne ptr %55, null
  br i1 %56, label %if.entry, label %else

if.entry:                                         ; preds = %6
  %57 = load ptr, ptr %len_ptr, align 8
  %58 = getelementptr inbounds ptr, ptr %57, i64 0
  %59 = load ptr, ptr %str_len, align 8
  store ptr %59, ptr %58, align 8
  br label %ifend

else:                                             ; preds = %6
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %60 = load ptr, ptr %builder, align 8
  %61 = load ptr, ptr %i8_ptr_ty, align 8
  %62 = load ptr, ptr %alloc_buff, align 8
  %63 = call ptr @LLVMBuildLoad2(ptr %60, ptr %61, ptr %62, ptr @315)
  ret ptr %63
}

define ptr @CodeGen_codegen_string(ptr %0, ptr %1, ptr %2) {
  %string_exp = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %call_args = alloca ptr, align 8
  %str = alloca ptr, align 8
  %str_len = alloca ptr, align 8
  %chars = alloca ptr, align 8
  %fmt_str_builder = alloca ptr, align 8
  %prev_ind = alloca i64, align 8
  %call_args_length = alloca i64, align 8
  %malloc_list = alloca ptr, align 8
  %str_value = alloca ptr, align 8
  %curr_ind = alloca i64, align 8
  %templ_arg_ty = alloca ptr, align 8
  %incr = alloca i64, align 8
  %templ_arg = alloca ptr, align 8
  %templ_arg_exp = alloca ptr, align 8
  %i = alloca i64, align 8
  %fmt = alloca ptr, align 8
  %str_ty = alloca ptr, align 8
  %args = alloca [2 x ptr], align 8
  %func = alloca ptr, align 8
  %args1 = alloca [3 x ptr], align 8
  %self = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %mem = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %string_exp, align 8
  %4 = load ptr, ptr %string_exp, align 8
  %memberidx = getelementptr inbounds %StringExpression, ptr %4, i32 0, i32 4
  %5 = load ptr, ptr %memberidx, align 8
  store ptr %5, ptr %str_value, align 8
  %6 = alloca %StringBuilder, align 8
  %7 = load ptr, ptr %str_value, align 8
  %memberidx2 = getelementptr inbounds %string, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx2, align 4
  %9 = load ptr, ptr %string_exp, align 8
  %memberidx3 = getelementptr inbounds %StringExpression, ptr %9, i32 0, i32 5
  %10 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Array_uint_, ptr %10, i32 0, i32 2
  %11 = load i64, ptr %memberidx4, align 4
  %12 = mul nuw i64 %11, 2
  %13 = add nuw i64 %8, %12
  call void @StringBuilder_constructor(ptr %6, i64 %13)
  store ptr %6, ptr %fmt_str_builder, align 8
  %14 = load ptr, ptr %str_value, align 8
  %15 = getelementptr inbounds %string, ptr %14, i32 0, i32 0
  %16 = load ptr, ptr %15, align 8
  %memberidx5 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %16, i32 0, i32 3
  %17 = load ptr, ptr %memberidx5, align 8
  %18 = call ptr %17(ptr %14)
  store ptr %18, ptr %chars, align 8
  store i64 0, ptr %curr_ind, align 4
  store i64 0, ptr %prev_ind, align 4
  %19 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMValueRef__constructor(ptr %19, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx6 = getelementptr inbounds %Array_LLVMValueRef_, ptr %19, i32 0, i32 1
  %20 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %Array_LLVMValueRef_, ptr %19, i32 0, i32 2
  store i64 0, ptr %memberidx7, align 4
  store ptr %19, ptr %malloc_list, align 8
  %21 = load ptr, ptr %string_exp, align 8
  %memberidx8 = getelementptr inbounds %StringExpression, ptr %21, i32 0, i32 6
  %22 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Array_Expression_, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  store i64 %23, ptr %call_args_length, align 4
  %24 = load i64, ptr %call_args_length, align 4
  %25 = alloca ptr, i64 %24, align 8
  store ptr %25, ptr %call_args, align 8
  br label %for.entry

for.entry:                                        ; preds = %3
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %26 = load i64, ptr %i, align 4
  %27 = load i64, ptr %call_args_length, align 4
  %28 = icmp slt i64 %26, %27
  br i1 %28, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load ptr, ptr %string_exp, align 8
  %memberidx10 = getelementptr inbounds %StringExpression, ptr %29, i32 0, i32 6
  %30 = load ptr, ptr %memberidx10, align 8
  %31 = load i64, ptr %i, align 4
  %32 = call ptr @Array_Expression____getitem__(ptr %30, i64 %31)
  store ptr %32, ptr %templ_arg, align 8
  %33 = load ptr, ptr %templ_arg, align 8
  %memberidx11 = getelementptr inbounds %Expression, ptr %33, i32 0, i32 3
  %34 = load ptr, ptr %memberidx11, align 8
  store ptr %34, ptr %templ_arg_ty, align 8
  %35 = load ptr, ptr %templ_arg_ty, align 8
  %36 = call ptr @get_format_from_type(ptr %35)
  store ptr %36, ptr %fmt, align 8
  %37 = load i64, ptr %curr_ind, align 4
  store i64 %37, ptr %prev_ind, align 4
  %38 = load ptr, ptr %string_exp, align 8
  %memberidx12 = getelementptr inbounds %StringExpression, ptr %38, i32 0, i32 5
  %39 = load ptr, ptr %memberidx12, align 8
  %40 = load i64, ptr %i, align 4
  %41 = call i64 @Array_uint____getitem__(ptr %39, i64 %40)
  store i64 %41, ptr %curr_ind, align 4
  %42 = load i64, ptr %curr_ind, align 4
  %43 = load i64, ptr %prev_ind, align 4
  %44 = sub nuw i64 %42, %43
  store i64 %44, ptr %incr, align 4
  %45 = load ptr, ptr %fmt_str_builder, align 8
  %46 = getelementptr inbounds %StringBuilder, ptr %45, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  %memberidx13 = getelementptr inbounds { ptr, ptr, ptr, ptr }, ptr %47, i32 0, i32 0
  %48 = load ptr, ptr %memberidx13, align 8
  %49 = load ptr, ptr %chars, align 8
  %50 = load i64, ptr %incr, align 4
  call void %48(ptr %45, ptr %49, i64 %50)
  %51 = load ptr, ptr %fmt_str_builder, align 8
  %52 = getelementptr inbounds %StringBuilder, ptr %51, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %memberidx14 = getelementptr inbounds { ptr, ptr, ptr, ptr }, ptr %53, i32 0, i32 1
  %54 = load ptr, ptr %memberidx14, align 8
  %55 = load ptr, ptr %fmt, align 8
  call void %54(ptr %51, ptr %55)
  %56 = load ptr, ptr %chars, align 8
  %57 = load i64, ptr %incr, align 4
  %58 = getelementptr inbounds i8, ptr %56, i64 %57
  store ptr %58, ptr %chars, align 8
  %59 = load ptr, ptr %this, align 8
  %60 = load ptr, ptr %builder, align 8
  %61 = load ptr, ptr %templ_arg, align 8
  %62 = call ptr @CodeGen_codegen_expression(ptr %59, ptr %60, ptr %61)
  store ptr %62, ptr %templ_arg_exp, align 8
  %63 = load i64, ptr %i, align 4
  %64 = load ptr, ptr %call_args, align 8
  %65 = getelementptr inbounds ptr, ptr %64, i64 %63
  %66 = load ptr, ptr %this, align 8
  %67 = load ptr, ptr %builder, align 8
  %68 = load ptr, ptr %templ_arg_exp, align 8
  %69 = load ptr, ptr %templ_arg_ty, align 8
  %70 = load ptr, ptr %malloc_list, align 8
  %71 = call ptr @CodeGen_get_string_val(ptr %66, ptr %67, ptr %68, ptr %69, ptr %70, i64 0)
  store ptr %71, ptr %65, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %72 = load i64, ptr %i, align 4
  %73 = add nsw i64 %72, 1
  store i64 %73, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %74 = load ptr, ptr %fmt_str_builder, align 8
  %75 = getelementptr inbounds %StringBuilder, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %memberidx15 = getelementptr inbounds { ptr, ptr, ptr, ptr }, ptr %76, i32 0, i32 0
  %77 = load ptr, ptr %memberidx15, align 8
  %78 = load ptr, ptr %chars, align 8
  %79 = load ptr, ptr %str_value, align 8
  %memberidx16 = getelementptr inbounds %string, ptr %79, i32 0, i32 2
  %80 = load i64, ptr %memberidx16, align 4
  %81 = load i64, ptr %curr_ind, align 4
  %82 = sub nuw i64 %80, %81
  call void %77(ptr %74, ptr %78, i64 %82)
  %83 = load ptr, ptr %fmt_str_builder, align 8
  %84 = getelementptr inbounds %StringBuilder, ptr %83, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8
  %memberidx17 = getelementptr inbounds { ptr, ptr, ptr, ptr }, ptr %85, i32 0, i32 3
  %86 = load ptr, ptr %memberidx17, align 8
  %87 = call ptr %86(ptr %83)
  store ptr %87, ptr %str_value, align 8
  %88 = load ptr, ptr %this, align 8
  %89 = load ptr, ptr %str_value, align 8
  %memberidx18 = getelementptr inbounds %string, ptr %89, i32 0, i32 2
  %90 = load i64, ptr %memberidx18, align 4
  %91 = call ptr @CodeGen_createLLVMInt(ptr %88, i64 %90)
  store ptr %91, ptr %str_len, align 8
  %92 = load i64, ptr %call_args_length, align 4
  %93 = icmp sgt i64 %92, 0
  br i1 %93, label %true_block, label %false_block

true_block:                                       ; preds = %for.end
  %94 = load ptr, ptr %this, align 8
  %95 = load ptr, ptr %builder, align 8
  %96 = load ptr, ptr %str_value, align 8
  %97 = load ptr, ptr %call_args, align 8
  %98 = load i64, ptr %call_args_length, align 4
  %99 = load ptr, ptr %str_len, align 8
  %100 = call ptr @CodeGen_codegen_safe_fmt_string(ptr %94, ptr %95, ptr %96, ptr %97, i64 %98, ptr %str_len)
  br label %end

false_block:                                      ; preds = %for.end
  %101 = load ptr, ptr %this, align 8
  %102 = load ptr, ptr %builder, align 8
  %103 = load ptr, ptr %str_value, align 8
  %104 = call ptr @CodeGen_createGlobalLLVMString(ptr %101, ptr %102, ptr %103)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %100, %true_block ], [ %104, %false_block ]
  store ptr %ternary, ptr %str, align 8
  %105 = load ptr, ptr %string_exp, align 8
  %memberidx19 = getelementptr inbounds %Expression, ptr %105, i32 0, i32 3
  %106 = load ptr, ptr %memberidx19, align 8
  %107 = call i1 @is_object(ptr %106)
  br i1 %107, label %if.entry, label %else

if.entry:                                         ; preds = %end
  %108 = load ptr, ptr %this, align 8
  %109 = load ptr, ptr %string_exp, align 8
  %memberidx20 = getelementptr inbounds %Expression, ptr %109, i32 0, i32 3
  %110 = load ptr, ptr %memberidx20, align 8
  %111 = call ptr @CodeGen_codegen_type(ptr %108, ptr %110, i1 false)
  store ptr %111, ptr %str_ty, align 8
  %112 = load ptr, ptr %str, align 8
  %113 = call i1 @LLVMIsConstant(ptr %112)
  %114 = load ptr, ptr %str, align 8
  %115 = call i1 @LLVMIsGlobalConstant(ptr %114)
  %116 = and i1 %113, %115
  br i1 %116, label %if.entry21, label %else22

else:                                             ; preds = %end
  br label %ifend

ifend:                                            ; preds = %else, %ifend23
  br label %for.entry29

if.entry21:                                       ; preds = %if.entry
  %117 = load ptr, ptr %this, align 8
  %memberidx24 = getelementptr inbounds %CodeGen, ptr %117, i32 0, i32 0
  %118 = load ptr, ptr %memberidx24, align 8
  %119 = call ptr @LLVMGetNamedFunction(ptr %118, ptr @564)
  store ptr %119, ptr %func, align 8
  %120 = load ptr, ptr %func, align 8
  %121 = icmp eq ptr %120, null
  br i1 %121, label %if.entry25, label %else26

else22:                                           ; preds = %if.entry
  %122 = load ptr, ptr %builder, align 8
  %123 = load ptr, ptr %str_ty, align 8
  %124 = call ptr @LLVMBuildMalloc(ptr %122, ptr %123, ptr @315)
  store ptr %124, ptr %self, align 8
  %125 = getelementptr inbounds [3 x ptr], ptr %args1, i64 0, i64 0
  %126 = load ptr, ptr %self, align 8
  store ptr %126, ptr %125, align 8
  %127 = getelementptr inbounds ptr, ptr %125, i64 1
  %128 = load ptr, ptr %str, align 8
  store ptr %128, ptr %127, align 8
  %129 = getelementptr inbounds ptr, ptr %127, i64 1
  %130 = load ptr, ptr %str_len, align 8
  store ptr %130, ptr %129, align 8
  %131 = getelementptr inbounds ptr, ptr %129, i64 1
  %132 = load ptr, ptr %this, align 8
  %133 = load ptr, ptr %builder, align 8
  %134 = load ptr, ptr %string_exp, align 8
  %memberidx28 = getelementptr inbounds %Expression, ptr %134, i32 0, i32 3
  %135 = load ptr, ptr %memberidx28, align 8
  %136 = getelementptr inbounds [3 x ptr], ptr %args1, i64 0, i64 0
  %137 = load ptr, ptr %136, align 8
  %138 = getelementptr inbounds [3 x ptr], ptr %args1, i64 0, i64 0
  call void @CodeGen_build_constructor_call(ptr %132, ptr %133, ptr %135, ptr %138, i64 3)
  %139 = load ptr, ptr %self, align 8
  store ptr %139, ptr %str, align 8
  br label %ifend23

ifend23:                                          ; preds = %else22, %ifend27
  br label %ifend

if.entry25:                                       ; preds = %if.entry21
  %140 = call ptr @string_from_bytes(ptr @565, i64 54)
  call void @panic(ptr %140)
  br label %ifend27

else26:                                           ; preds = %if.entry21
  br label %ifend27

ifend27:                                          ; preds = %else26, %if.entry25
  %141 = getelementptr inbounds [2 x ptr], ptr %args, i64 0, i64 0
  %142 = load ptr, ptr %str, align 8
  store ptr %142, ptr %141, align 8
  %143 = getelementptr inbounds ptr, ptr %141, i64 1
  %144 = load ptr, ptr %str_len, align 8
  store ptr %144, ptr %143, align 8
  %145 = getelementptr inbounds ptr, ptr %143, i64 1
  %146 = load ptr, ptr %builder, align 8
  %147 = load ptr, ptr %func, align 8
  %148 = call ptr @LLVM_GetFunctionType(ptr %147)
  %149 = load ptr, ptr %func, align 8
  %150 = getelementptr inbounds [2 x ptr], ptr %args, i64 0, i64 0
  %151 = load ptr, ptr %150, align 8
  %152 = getelementptr inbounds [2 x ptr], ptr %args, i64 0, i64 0
  %153 = call ptr @LLVMBuildCall2(ptr %146, ptr %148, ptr %149, ptr %152, i64 2, ptr @315)
  store ptr %153, ptr %str, align 8
  br label %ifend23

for.entry29:                                      ; preds = %ifend
  %154 = load ptr, ptr %malloc_list, align 8
  %155 = call ptr @Array_LLVMValueRef____iter__(ptr %154)
  store ptr %155, ptr %tmp_it, align 8
  %156 = load ptr, ptr %tmp_it, align 8
  %157 = call ptr @ArrayIterator_LLVMValueRef__next(ptr %156)
  store ptr %157, ptr %mem, align 8
  br label %for.cond30

for.cond30:                                       ; preds = %for.incr32, %for.entry29
  %158 = load ptr, ptr %tmp_it, align 8
  %memberidx34 = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %158, i32 0, i32 0
  %159 = load i1, ptr %memberidx34, align 1
  %160 = xor i1 %159, true
  br i1 %160, label %for.body31, label %for.end33

for.body31:                                       ; preds = %for.cond30
  %161 = load ptr, ptr %builder, align 8
  %162 = load ptr, ptr %mem, align 8
  %163 = call ptr @LLVMBuildFree(ptr %161, ptr %162)
  br label %for.incr32

for.incr32:                                       ; preds = %for.body31
  %164 = load ptr, ptr %tmp_it, align 8
  %165 = call ptr @ArrayIterator_LLVMValueRef__next(ptr %164)
  store ptr %165, ptr %mem, align 8
  br label %for.cond30

for.end33:                                        ; preds = %for.cond30
  %166 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %166)
  %167 = load ptr, ptr %malloc_list, align 8
  call void @Array_LLVMValueRef____del__(ptr %167)
  tail call void @free(ptr %167)
  %168 = load ptr, ptr %str, align 8
  ret ptr %168
}

define ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %2) {
  %this = alloca ptr, align 8
  %expression = alloca ptr, align 8
  %builder = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %expression, align 8
  %4 = load ptr, ptr %expression, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp eq i64 %5, 4
  br i1 %6, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %7 = load ptr, ptr %this, align 8
  %8 = load ptr, ptr %expression, align 8
  %9 = call ptr @CodeGen_codegen_bool(ptr %7, ptr %8)
  ret ptr %9

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %10 = load ptr, ptr %expression, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %10, i32 0, i32 2
  %11 = load i64, ptr %memberidx1, align 4
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %if.entry2, label %else3

if.entry2:                                        ; preds = %ifend
  %13 = load ptr, ptr %this, align 8
  %14 = load ptr, ptr %expression, align 8
  %15 = call ptr @CodeGen_codegen_int(ptr %13, ptr %14)
  ret ptr %15

else3:                                            ; preds = %ifend
  br label %ifend4

ifend4:                                           ; preds = %else3
  %16 = load ptr, ptr %expression, align 8
  %memberidx5 = getelementptr inbounds %Expression, ptr %16, i32 0, i32 2
  %17 = load i64, ptr %memberidx5, align 4
  %18 = icmp eq i64 %17, 1
  br i1 %18, label %if.entry6, label %else7

if.entry6:                                        ; preds = %ifend4
  %19 = load ptr, ptr %this, align 8
  %20 = load ptr, ptr %expression, align 8
  %21 = call ptr @CodeGen_codegen_float(ptr %19, ptr %20)
  ret ptr %21

else7:                                            ; preds = %ifend4
  br label %ifend8

ifend8:                                           ; preds = %else7
  %22 = load ptr, ptr %expression, align 8
  %memberidx9 = getelementptr inbounds %Expression, ptr %22, i32 0, i32 2
  %23 = load i64, ptr %memberidx9, align 4
  %24 = icmp eq i64 %23, 5
  br i1 %24, label %if.entry10, label %else11

if.entry10:                                       ; preds = %ifend8
  %25 = load ptr, ptr %this, align 8
  %26 = load ptr, ptr %expression, align 8
  %27 = call ptr @CodeGen_codegen_null(ptr %25, ptr %26)
  ret ptr %27

else11:                                           ; preds = %ifend8
  br label %ifend12

ifend12:                                          ; preds = %else11
  %28 = load ptr, ptr %expression, align 8
  %memberidx13 = getelementptr inbounds %Expression, ptr %28, i32 0, i32 2
  %29 = load i64, ptr %memberidx13, align 4
  %30 = icmp eq i64 %29, 2
  br i1 %30, label %if.entry14, label %else15

if.entry14:                                       ; preds = %ifend12
  %31 = load ptr, ptr %this, align 8
  %32 = load ptr, ptr %builder, align 8
  %33 = load ptr, ptr %expression, align 8
  %34 = call ptr @CodeGen_codegen_string(ptr %31, ptr %32, ptr %33)
  ret ptr %34

else15:                                           ; preds = %ifend12
  br label %ifend16

ifend16:                                          ; preds = %else15
  %35 = load ptr, ptr %expression, align 8
  %memberidx17 = getelementptr inbounds %Expression, ptr %35, i32 0, i32 2
  %36 = load i64, ptr %memberidx17, align 4
  %37 = icmp eq i64 %36, 8
  br i1 %37, label %if.entry18, label %else19

if.entry18:                                       ; preds = %ifend16
  %38 = load ptr, ptr %this, align 8
  %39 = load ptr, ptr %builder, align 8
  %40 = load ptr, ptr %expression, align 8
  %41 = call ptr @CodeGen_codegen_var_access_exp(ptr %38, ptr %39, ptr %40)
  ret ptr %41

else19:                                           ; preds = %ifend16
  br label %ifend20

ifend20:                                          ; preds = %else19
  %42 = load ptr, ptr %expression, align 8
  %memberidx21 = getelementptr inbounds %Expression, ptr %42, i32 0, i32 2
  %43 = load i64, ptr %memberidx21, align 4
  %44 = icmp eq i64 %43, 9
  br i1 %44, label %if.entry22, label %else23

if.entry22:                                       ; preds = %ifend20
  %45 = load ptr, ptr %this, align 8
  %46 = load ptr, ptr %builder, align 8
  %47 = load ptr, ptr %expression, align 8
  %48 = call ptr @CodeGen_codegen_bin_exp(ptr %45, ptr %46, ptr %47)
  ret ptr %48

else23:                                           ; preds = %ifend20
  br label %ifend24

ifend24:                                          ; preds = %else23
  %49 = load ptr, ptr %expression, align 8
  %memberidx25 = getelementptr inbounds %Expression, ptr %49, i32 0, i32 2
  %50 = load i64, ptr %memberidx25, align 4
  %51 = icmp eq i64 %50, 10
  br i1 %51, label %if.entry26, label %else27

if.entry26:                                       ; preds = %ifend24
  %52 = load ptr, ptr %this, align 8
  %53 = load ptr, ptr %builder, align 8
  %54 = load ptr, ptr %expression, align 8
  %55 = call ptr @CodeGen_codegen_unary_exp(ptr %52, ptr %53, ptr %54)
  ret ptr %55

else27:                                           ; preds = %ifend24
  br label %ifend28

ifend28:                                          ; preds = %else27
  %56 = load ptr, ptr %expression, align 8
  %memberidx29 = getelementptr inbounds %Expression, ptr %56, i32 0, i32 2
  %57 = load i64, ptr %memberidx29, align 4
  %58 = icmp eq i64 %57, 15
  br i1 %58, label %if.entry30, label %else31

if.entry30:                                       ; preds = %ifend28
  %59 = load ptr, ptr %this, align 8
  %60 = load ptr, ptr %builder, align 8
  %61 = load ptr, ptr %expression, align 8
  %62 = call ptr @CodeGen_codegen_call_exp(ptr %59, ptr %60, ptr %61)
  ret ptr %62

else31:                                           ; preds = %ifend28
  br label %ifend32

ifend32:                                          ; preds = %else31
  %63 = load ptr, ptr %expression, align 8
  %memberidx33 = getelementptr inbounds %Expression, ptr %63, i32 0, i32 2
  %64 = load i64, ptr %memberidx33, align 4
  %65 = icmp eq i64 %64, 14
  br i1 %65, label %if.entry34, label %else35

if.entry34:                                       ; preds = %ifend32
  %66 = load ptr, ptr %this, align 8
  %67 = load ptr, ptr %builder, align 8
  %68 = load ptr, ptr %expression, align 8
  %69 = call ptr @CodeGen_codegen_index_exp(ptr %66, ptr %67, ptr %68)
  ret ptr %69

else35:                                           ; preds = %ifend32
  br label %ifend36

ifend36:                                          ; preds = %else35
  %70 = load ptr, ptr %expression, align 8
  %memberidx37 = getelementptr inbounds %Expression, ptr %70, i32 0, i32 2
  %71 = load i64, ptr %memberidx37, align 4
  %72 = icmp eq i64 %71, 13
  br i1 %72, label %if.entry38, label %else39

if.entry38:                                       ; preds = %ifend36
  %73 = load ptr, ptr %this, align 8
  %74 = load ptr, ptr %builder, align 8
  %75 = load ptr, ptr %expression, align 8
  %76 = call ptr @CodeGen_codegen_member_exp(ptr %73, ptr %74, ptr %75, ptr null)
  ret ptr %76

else39:                                           ; preds = %ifend36
  br label %ifend40

ifend40:                                          ; preds = %else39
  %77 = load ptr, ptr %expression, align 8
  %memberidx41 = getelementptr inbounds %Expression, ptr %77, i32 0, i32 2
  %78 = load i64, ptr %memberidx41, align 4
  %79 = icmp eq i64 %78, 12
  br i1 %79, label %if.entry42, label %else43

if.entry42:                                       ; preds = %ifend40
  %80 = load ptr, ptr %this, align 8
  %81 = load ptr, ptr %builder, align 8
  %82 = load ptr, ptr %expression, align 8
  %83 = call ptr @CodeGen_codegen_new_exp(ptr %80, ptr %81, ptr %82)
  ret ptr %83

else43:                                           ; preds = %ifend40
  br label %ifend44

ifend44:                                          ; preds = %else43
  %84 = load ptr, ptr %expression, align 8
  %memberidx45 = getelementptr inbounds %Expression, ptr %84, i32 0, i32 2
  %85 = load i64, ptr %memberidx45, align 4
  %86 = icmp eq i64 %85, 16
  br i1 %86, label %if.entry46, label %else47

if.entry46:                                       ; preds = %ifend44
  %87 = load ptr, ptr %this, align 8
  %88 = load ptr, ptr %builder, align 8
  %89 = load ptr, ptr %expression, align 8
  %90 = call ptr @CodeGen_codegen_ternary_exp(ptr %87, ptr %88, ptr %89)
  ret ptr %90

else47:                                           ; preds = %ifend44
  br label %ifend48

ifend48:                                          ; preds = %else47
  %91 = load ptr, ptr %expression, align 8
  %memberidx49 = getelementptr inbounds %Expression, ptr %91, i32 0, i32 2
  %92 = load i64, ptr %memberidx49, align 4
  %93 = icmp eq i64 %92, 11
  br i1 %93, label %if.entry50, label %else51

if.entry50:                                       ; preds = %ifend48
  %94 = load ptr, ptr %this, align 8
  %95 = load ptr, ptr %builder, align 8
  %96 = load ptr, ptr %expression, align 8
  %97 = call ptr @CodeGen_codegen_typecast_exp(ptr %94, ptr %95, ptr %96)
  ret ptr %97

else51:                                           ; preds = %ifend48
  br label %ifend52

ifend52:                                          ; preds = %else51
  %98 = load ptr, ptr %expression, align 8
  %memberidx53 = getelementptr inbounds %Expression, ptr %98, i32 0, i32 2
  %99 = load i64, ptr %memberidx53, align 4
  %100 = icmp eq i64 %99, 6
  br i1 %100, label %if.entry54, label %else55

if.entry54:                                       ; preds = %ifend52
  %101 = load ptr, ptr %this, align 8
  %102 = load ptr, ptr %builder, align 8
  %103 = load ptr, ptr %expression, align 8
  %104 = call ptr @CodeGen_codegen_array_exp(ptr %101, ptr %102, ptr %103)
  ret ptr %104

else55:                                           ; preds = %ifend52
  br label %ifend56

ifend56:                                          ; preds = %else55
  %105 = load ptr, ptr %expression, align 8
  %memberidx57 = getelementptr inbounds %Expression, ptr %105, i32 0, i32 2
  %106 = load i64, ptr %memberidx57, align 4
  %107 = icmp eq i64 %106, 7
  br i1 %107, label %if.entry58, label %else59

if.entry58:                                       ; preds = %ifend56
  %108 = load ptr, ptr %this, align 8
  %109 = load ptr, ptr %builder, align 8
  %110 = load ptr, ptr %expression, align 8
  %111 = call ptr @CodeGen_codegen_tuple_exp(ptr %108, ptr %109, ptr %110)
  ret ptr %111

else59:                                           ; preds = %ifend56
  br label %ifend60

ifend60:                                          ; preds = %else59
  %112 = load ptr, ptr %expression, align 8
  %memberidx61 = getelementptr inbounds %Expression, ptr %112, i32 0, i32 2
  %113 = load i64, ptr %memberidx61, align 4
  %114 = icmp eq i64 %113, 17
  br i1 %114, label %if.entry62, label %else63

if.entry62:                                       ; preds = %ifend60
  %115 = load ptr, ptr %this, align 8
  %116 = load ptr, ptr %builder, align 8
  %117 = load ptr, ptr %expression, align 8
  %118 = call ptr @CodeGen_codegen_match_exp(ptr %115, ptr %116, ptr %117)
  ret ptr %118

else63:                                           ; preds = %ifend60
  br label %ifend64

ifend64:                                          ; preds = %else63
  %119 = load ptr, ptr %expression, align 8
  %memberidx65 = getelementptr inbounds %Expression, ptr %119, i32 0, i32 2
  %120 = load i64, ptr %memberidx65, align 4
  %121 = icmp eq i64 %120, 18
  br i1 %121, label %if.entry66, label %else67

if.entry66:                                       ; preds = %ifend64
  %122 = load ptr, ptr %this, align 8
  %123 = load ptr, ptr %builder, align 8
  %124 = load ptr, ptr %expression, align 8
  %125 = call ptr @CodeGen_codegen_intrinsic_exp(ptr %122, ptr %123, ptr %124)
  ret ptr %125

else67:                                           ; preds = %ifend64
  br label %ifend68

ifend68:                                          ; preds = %else67
  ret ptr null
}

define ptr @CodeGen_construct_enum(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %enum_ = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %enum_, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %enum_, align 8
  call void @CodeGen_declare_enum(ptr %3, ptr %4)
  %5 = load ptr, ptr %this, align 8
  %6 = load ptr, ptr %enum_, align 8
  %memberidx = getelementptr inbounds %Enum, ptr %6, i32 0, i32 0
  %7 = load ptr, ptr %memberidx, align 8
  %8 = call ptr @CodeGen_get_enum_from_typeid(ptr %5, ptr %7)
  ret ptr %8
}

define void @Map_string_CGEnumType__resize(ptr %0) {
  %this = alloca ptr, align 8
  %old_entries = alloca ptr, align 8
  %old_size = alloca i64, align 8
  %i = alloca i64, align 8
  %i1 = alloca i64, align 8
  %entry = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_CGEnumType_, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = alloca ptr, i64 %3, align 8
  store ptr %4, ptr %old_entries, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_CGEnumType_, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx2, align 4
  store i64 %6, ptr %old_size, align 4
  %7 = load ptr, ptr %old_entries, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_CGEnumType_, ptr %8, i32 0, i32 0
  %9 = load ptr, ptr %memberidx3, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_CGEnumType_, ptr %10, i32 0, i32 1
  %11 = load i64, ptr %memberidx4, align 4
  %12 = mul i64 %11, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %9, i64 %12, i1 false)
  %13 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Map_string_CGEnumType_, ptr %13, i32 0, i32 1
  %14 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Map_string_CGEnumType_, ptr %14, i32 0, i32 1
  %15 = load i64, ptr %memberidx6, align 4
  %16 = mul nuw i64 %15, 2
  store i64 %16, ptr %memberidx5, align 4
  %17 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %Map_string_CGEnumType_, ptr %17, i32 0, i32 2
  store i64 0, ptr %memberidx7, align 4
  %18 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %Map_string_CGEnumType_, ptr %18, i32 0, i32 0
  %19 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Map_string_CGEnumType_, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx9, align 8
  %21 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_CGEnumType_, ptr %21, i32 0, i32 1
  %22 = load i64, ptr %memberidx10, align 4
  %23 = mul i64 %22, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64)
  %24 = call ptr @realloc(ptr %20, i64 %23)
  store ptr %24, ptr %memberidx8, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %25 = load i64, ptr %i, align 4
  %26 = load ptr, ptr %this, align 8
  %memberidx11 = getelementptr inbounds %Map_string_CGEnumType_, ptr %26, i32 0, i32 1
  %27 = load i64, ptr %memberidx11, align 4
  %28 = icmp slt i64 %25, %27
  br i1 %28, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load i64, ptr %i, align 4
  %30 = load ptr, ptr %this, align 8
  %memberidx12 = getelementptr inbounds %Map_string_CGEnumType_, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx12, align 8
  %32 = getelementptr inbounds ptr, ptr %31, i64 %29
  store ptr null, ptr %32, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %33 = load i64, ptr %i, align 4
  %34 = add nsw i64 %33, 1
  store i64 %34, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.entry13

for.entry13:                                      ; preds = %for.end
  store i64 0, ptr %i1, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.incr16, %for.entry13
  %35 = load i64, ptr %i1, align 4
  %36 = load i64, ptr %old_size, align 4
  %37 = icmp slt i64 %35, %36
  br i1 %37, label %for.body15, label %for.end17

for.body15:                                       ; preds = %for.cond14
  %38 = load i64, ptr %i1, align 4
  %39 = load ptr, ptr %old_entries, align 8
  %40 = getelementptr inbounds ptr, ptr %39, i64 %38
  %41 = load ptr, ptr %40, align 8
  store ptr %41, ptr %entry, align 8
  %42 = load ptr, ptr %entry, align 8
  %43 = icmp ne ptr %42, null
  br i1 %43, label %if.entry, label %else

for.incr16:                                       ; preds = %ifend
  %44 = load i64, ptr %i1, align 4
  %45 = add nsw i64 %44, 1
  store i64 %45, ptr %i1, align 4
  br label %for.cond14

for.end17:                                        ; preds = %for.cond14
  ret void

if.entry:                                         ; preds = %for.body15
  %46 = load ptr, ptr %this, align 8
  %47 = load ptr, ptr %entry, align 8
  %memberidx18 = getelementptr inbounds %MapEntry_string_CGEnumType_, ptr %47, i32 0, i32 0
  %48 = load ptr, ptr %memberidx18, align 8
  %49 = load ptr, ptr %entry, align 8
  %memberidx19 = getelementptr inbounds %MapEntry_string_CGEnumType_, ptr %49, i32 0, i32 1
  %50 = load ptr, ptr %memberidx19, align 8
  call void @Map_string_CGEnumType____setitem__(ptr %46, ptr %48, ptr %50)
  br label %ifend

else:                                             ; preds = %for.body15
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  br label %for.incr16
}

define void @MapEntry_string_CGEnumType__constructor(ptr %0, ptr %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  store ptr %2, ptr %value, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapEntry_string_CGEnumType_, ptr %4, i32 0, i32 0
  %5 = load ptr, ptr %key, align 8
  store ptr %5, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapEntry_string_CGEnumType_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %value, align 8
  store ptr %7, ptr %memberidx1, align 8
  ret void
}

define ptr @MapIterator_string_CGEnumType__next(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapIterator_string_CGEnumType_, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapIterator_string_CGEnumType_, ptr %4, i32 0, i32 2
  %5 = add nsw i64 %3, -1
  store i64 %5, ptr %memberidx1, align 4
  %6 = icmp sgt i64 %3, 0
  br i1 %6, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %1
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %MapIterator_string_CGEnumType_, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %MapIterator_string_CGEnumType_, ptr %9, i32 0, i32 1
  %incdec.ptr = getelementptr inbounds ptr, ptr %8, i32 1
  store ptr %incdec.ptr, ptr %memberidx3, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %MapIterator_string_CGEnumType_, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx4, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 -1
  %13 = load ptr, ptr %12, align 8
  %14 = icmp ne ptr %13, null
  br i1 %14, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %if.entry, %1
  %15 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %MapIterator_string_CGEnumType_, ptr %15, i32 0, i32 0
  %16 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %MapIterator_string_CGEnumType_, ptr %16, i32 0, i32 3
  %17 = load i64, ptr %memberidx8, align 4
  %18 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %MapIterator_string_CGEnumType_, ptr %18, i32 0, i32 3
  %19 = add nsw i64 %17, -1
  store i64 %19, ptr %memberidx9, align 4
  %20 = icmp sle i64 %17, 0
  store i1 %20, ptr %memberidx7, align 1
  %21 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %MapIterator_string_CGEnumType_, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx10, align 8
  %23 = getelementptr inbounds ptr, ptr %22, i64 -1
  %24 = load ptr, ptr %23, align 8
  ret ptr %24

if.entry:                                         ; preds = %while.entry
  br label %while.end

else:                                             ; preds = %while.entry
  br label %ifend

ifend:                                            ; preds = %else
  %25 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %MapIterator_string_CGEnumType_, ptr %25, i32 0, i32 2
  %26 = load i64, ptr %memberidx5, align 4
  %27 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %MapIterator_string_CGEnumType_, ptr %27, i32 0, i32 2
  %28 = add nsw i64 %26, -1
  store i64 %28, ptr %memberidx6, align 4
  %29 = icmp sgt i64 %26, 0
  br i1 %29, label %while.entry, label %while.end
}

define void @MapIterator_string_CGEnumType__constructor(ptr %0, ptr %1, i64 %2, i64 %3) {
  %remaining_size = alloca i64, align 8
  %this = alloca ptr, align 8
  %entries = alloca ptr, align 8
  %items_remaining = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %entries, align 8
  store i64 %2, ptr %remaining_size, align 4
  store i64 %3, ptr %items_remaining, align 4
  %5 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %MapIterator_string_CGEnumType_, ptr %5, i32 0, i32 0
  store i1 false, ptr %memberidx, align 1
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %MapIterator_string_CGEnumType_, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %entries, align 8
  store ptr %7, ptr %memberidx1, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %MapIterator_string_CGEnumType_, ptr %8, i32 0, i32 2
  %9 = load i64, ptr %remaining_size, align 4
  store i64 %9, ptr %memberidx2, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %MapIterator_string_CGEnumType_, ptr %10, i32 0, i32 3
  %11 = load i64, ptr %items_remaining, align 4
  store i64 %11, ptr %memberidx3, align 4
  ret void
}

define ptr @Map_string_CGEnumType____iter__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MapIterator_string_CGEnumType_, ptr null, i32 1) to i32))
  %3 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_CGEnumType_, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_CGEnumType_, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %memberidx1, align 4
  %7 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_CGEnumType_, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx2, align 4
  call void @MapIterator_string_CGEnumType__constructor(ptr %2, ptr %4, i64 %6, i64 %8)
  ret ptr %2
}

define void @Map_string_CGEnumType____del__(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_CGEnumType_, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %memberidx, align 8
  tail call void @free(ptr %3)
  ret void
}

define void @Map_string_CGEnumType____setitem__(ptr %0, ptr %1, ptr %2) {
  %value = alloca ptr, align 8
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  %should_add = alloca i1, align 1
  %ratio = alloca double, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  store ptr %2, ptr %value, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_CGEnumType_, ptr %4, i32 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = sitofp i64 %5 to double
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_CGEnumType_, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %memberidx1, align 4
  %9 = sitofp i64 %8 to double
  %10 = fdiv double %6, %9
  store double %10, ptr %ratio, align 8
  %11 = load double, ptr %ratio, align 8
  %12 = fcmp ogt double %11, 7.500000e-01
  br i1 %12, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %13 = load ptr, ptr %this, align 8
  call void @Map_string_CGEnumType__resize(ptr %13)
  br label %ifend

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %14 = load ptr, ptr %this, align 8
  %15 = load ptr, ptr %key, align 8
  %16 = call i64 @Map_string_CGEnumType__hash_fnc(ptr %14, ptr %15)
  %17 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_CGEnumType_, ptr %17, i32 0, i32 1
  %18 = load i64, ptr %memberidx2, align 4
  %19 = urem i64 %16, %18
  store i64 %19, ptr %hash, align 4
  store i1 true, ptr %should_add, align 1
  %20 = load i64, ptr %hash, align 4
  %21 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_CGEnumType_, ptr %21, i32 0, i32 0
  %22 = load ptr, ptr %memberidx3, align 8
  %23 = getelementptr inbounds ptr, ptr %22, i64 %20
  %24 = load ptr, ptr %23, align 8
  %25 = icmp ne ptr %24, null
  br i1 %25, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend8, %ifend
  %26 = load i64, ptr %hash, align 4
  %27 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_CGEnumType_, ptr %27, i32 0, i32 0
  %28 = load ptr, ptr %memberidx4, align 8
  %29 = getelementptr inbounds ptr, ptr %28, i64 %26
  %30 = load ptr, ptr %29, align 8
  %memberidx5 = getelementptr inbounds %MapEntry_string_CGEnumType_, ptr %30, i32 0, i32 0
  %31 = load ptr, ptr %memberidx5, align 8
  %32 = load ptr, ptr %key, align 8
  %33 = call i1 @string___eq__(ptr %31, ptr %32)
  br i1 %33, label %if.entry6, label %else7

while.end:                                        ; preds = %ifend8, %if.entry6, %ifend
  %34 = load i1, ptr %should_add, align 1
  br i1 %34, label %if.entry11, label %else12

if.entry6:                                        ; preds = %while.entry
  store i1 false, ptr %should_add, align 1
  br label %while.end

else7:                                            ; preds = %while.entry
  br label %ifend8

ifend8:                                           ; preds = %else7
  %35 = load i64, ptr %hash, align 4
  %36 = add nuw i64 %35, 1
  %37 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %Map_string_CGEnumType_, ptr %37, i32 0, i32 1
  %38 = load i64, ptr %memberidx9, align 4
  %39 = urem i64 %36, %38
  store i64 %39, ptr %hash, align 4
  %40 = load i64, ptr %hash, align 4
  %41 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_CGEnumType_, ptr %41, i32 0, i32 0
  %42 = load ptr, ptr %memberidx10, align 8
  %43 = getelementptr inbounds ptr, ptr %42, i64 %40
  %44 = load ptr, ptr %43, align 8
  %45 = icmp ne ptr %44, null
  br i1 %45, label %while.entry, label %while.end

if.entry11:                                       ; preds = %while.end
  %46 = load ptr, ptr %this, align 8
  %memberidx14 = getelementptr inbounds %Map_string_CGEnumType_, ptr %46, i32 0, i32 2
  %47 = load i64, ptr %memberidx14, align 4
  %48 = load ptr, ptr %this, align 8
  %memberidx15 = getelementptr inbounds %Map_string_CGEnumType_, ptr %48, i32 0, i32 2
  %49 = add nsw i64 %47, 1
  store i64 %49, ptr %memberidx15, align 4
  br label %ifend13

else12:                                           ; preds = %while.end
  br label %ifend13

ifend13:                                          ; preds = %else12, %if.entry11
  %50 = load i64, ptr %hash, align 4
  %51 = load ptr, ptr %this, align 8
  %memberidx16 = getelementptr inbounds %Map_string_CGEnumType_, ptr %51, i32 0, i32 0
  %52 = load ptr, ptr %memberidx16, align 8
  %53 = getelementptr inbounds ptr, ptr %52, i64 %50
  %54 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%MapEntry_string_CGEnumType_, ptr null, i32 1) to i32))
  %55 = load ptr, ptr %key, align 8
  %56 = load ptr, ptr %value, align 8
  call void @MapEntry_string_CGEnumType__constructor(ptr %54, ptr %55, ptr %56)
  store ptr %54, ptr %53, align 8
  ret void
}

define ptr @Map_string_CGEnumType____getitem__(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %key, align 8
  %5 = call i64 @Map_string_CGEnumType__hash_fnc(ptr %3, ptr %4)
  %6 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_CGEnumType_, ptr %6, i32 0, i32 1
  %7 = load i64, ptr %memberidx, align 4
  %8 = urem i64 %5, %7
  store i64 %8, ptr %hash, align 4
  %9 = load i64, ptr %hash, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_CGEnumType_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 %9
  %13 = load ptr, ptr %12, align 8
  %14 = icmp ne ptr %13, null
  br i1 %14, label %while.entry, label %while.end

while.entry:                                      ; preds = %ifend, %2
  %15 = load i64, ptr %hash, align 4
  %16 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_CGEnumType_, ptr %16, i32 0, i32 0
  %17 = load ptr, ptr %memberidx2, align 8
  %18 = getelementptr inbounds ptr, ptr %17, i64 %15
  %19 = load ptr, ptr %18, align 8
  %memberidx3 = getelementptr inbounds %MapEntry_string_CGEnumType_, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %memberidx3, align 8
  %21 = load ptr, ptr %key, align 8
  %22 = call i1 @string___eq__(ptr %20, ptr %21)
  br i1 %22, label %if.entry, label %else

while.end:                                        ; preds = %ifend, %if.entry, %2
  %23 = load i64, ptr %hash, align 4
  %24 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %Map_string_CGEnumType_, ptr %24, i32 0, i32 0
  %25 = load ptr, ptr %memberidx6, align 8
  %26 = getelementptr inbounds ptr, ptr %25, i64 %23
  %27 = load ptr, ptr %26, align 8
  %28 = icmp ne ptr %27, null
  br i1 %28, label %if.entry7, label %else8

if.entry:                                         ; preds = %while.entry
  br label %while.end

else:                                             ; preds = %while.entry
  %29 = load i64, ptr %hash, align 4
  %30 = add nuw i64 %29, 1
  %31 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %Map_string_CGEnumType_, ptr %31, i32 0, i32 1
  %32 = load i64, ptr %memberidx4, align 4
  %33 = urem i64 %30, %32
  store i64 %33, ptr %hash, align 4
  br label %ifend

ifend:                                            ; preds = %else
  %34 = load i64, ptr %hash, align 4
  %35 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %Map_string_CGEnumType_, ptr %35, i32 0, i32 0
  %36 = load ptr, ptr %memberidx5, align 8
  %37 = getelementptr inbounds ptr, ptr %36, i64 %34
  %38 = load ptr, ptr %37, align 8
  %39 = icmp ne ptr %38, null
  br i1 %39, label %while.entry, label %while.end

if.entry7:                                        ; preds = %while.end
  %40 = load i64, ptr %hash, align 4
  %41 = load ptr, ptr %this, align 8
  %memberidx10 = getelementptr inbounds %Map_string_CGEnumType_, ptr %41, i32 0, i32 0
  %42 = load ptr, ptr %memberidx10, align 8
  %43 = getelementptr inbounds ptr, ptr %42, i64 %40
  %44 = load ptr, ptr %43, align 8
  %memberidx11 = getelementptr inbounds %MapEntry_string_CGEnumType_, ptr %44, i32 0, i32 1
  %45 = load ptr, ptr %memberidx11, align 8
  ret ptr %45

else8:                                            ; preds = %while.end
  br label %ifend9

ifend9:                                           ; preds = %else8
  ret ptr null
}

define i64 @Map_string_CGEnumType__hash_fnc(ptr %0, ptr %1) {
  %this = alloca ptr, align 8
  %key = alloca ptr, align 8
  %hash = alloca i64, align 8
  %str = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %key, align 8
  %3 = load ptr, ptr %key, align 8
  %4 = getelementptr inbounds %string, ptr %3, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %5, i32 0, i32 5
  %6 = load ptr, ptr %memberidx, align 8
  %7 = call ptr %6(ptr %3)
  %8 = alloca ptr, align 8
  %9 = call i64 (ptr, ptr, ...) @asprintf(ptr %8, ptr @58, ptr %7)
  %10 = load ptr, ptr %8, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %11, ptr %10, i64 %9)
  tail call void @free(ptr %7)
  store ptr %11, ptr %str, align 8
  store i64 0, ptr %hash, align 4
  br label %for.entry

for.entry:                                        ; preds = %2
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %12 = load i64, ptr %i, align 4
  %13 = load ptr, ptr %str, align 8
  %memberidx1 = getelementptr inbounds %string, ptr %13, i32 0, i32 2
  %14 = load i64, ptr %memberidx1, align 4
  %15 = icmp slt i64 %12, %14
  br i1 %15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i64, ptr %hash, align 4
  %17 = shl i64 %16, 1
  %18 = load ptr, ptr %str, align 8
  %19 = getelementptr inbounds %string, ptr %18, i32 0, i32 0
  %20 = load ptr, ptr %19, align 8
  %memberidx2 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %20, i32 0, i32 2
  %21 = load ptr, ptr %memberidx2, align 8
  %22 = load i64, ptr %i, align 4
  %23 = call i8 %21(ptr %18, i64 %22)
  %24 = zext i8 %23 to i64
  %25 = add nuw i64 %17, %24
  store i64 %25, ptr %hash, align 4
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %26 = load i64, ptr %i, align 4
  %27 = add nsw i64 %26, 1
  store i64 %27, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load ptr, ptr %str, align 8
  call void @string___del__(ptr %28)
  tail call void @free(ptr %28)
  %29 = load i64, ptr %hash, align 4
  ret i64 %29
}

define void @Map_string_CGEnumType__constructor(ptr %0) {
  %this = alloca ptr, align 8
  %initial_capacity = alloca i64, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store i64 256, ptr %initial_capacity, align 4
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %Map_string_CGEnumType_, ptr %2, i32 0, i32 0
  %3 = load i64, ptr %initial_capacity, align 4
  %4 = trunc i64 %3 to i32
  %mallocsize = mul i32 %4, ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i32)
  %5 = tail call ptr @malloc(i32 %mallocsize)
  store ptr %5, ptr %memberidx, align 8
  br label %for.entry

for.entry:                                        ; preds = %1
  store i64 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %6 = load i64, ptr %i, align 4
  %7 = load i64, ptr %initial_capacity, align 4
  %8 = icmp slt i64 %6, %7
  br i1 %8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i64, ptr %i, align 4
  %10 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %Map_string_CGEnumType_, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %memberidx1, align 8
  %12 = getelementptr inbounds ptr, ptr %11, i64 %9
  store ptr null, ptr %12, align 8
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %13 = load i64, ptr %i, align 4
  %14 = add nsw i64 %13, 1
  store i64 %14, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %Map_string_CGEnumType_, ptr %15, i32 0, i32 1
  %16 = load i64, ptr %initial_capacity, align 4
  store i64 %16, ptr %memberidx2, align 4
  %17 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %Map_string_CGEnumType_, ptr %17, i32 0, i32 2
  store i64 0, ptr %memberidx3, align 4
  ret void
}

define ptr @CodeGen_codegen_pow_expr(ptr %0, ptr %1, ptr %2, ptr %3, ptr %4) {
  %rhs = alloca ptr, align 8
  %ty = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %lhs = alloca ptr, align 8
  %llvmty = alloca ptr, align 8
  %res = alloca ptr, align 8
  %args = alloca [2 x ptr], align 8
  %name = alloca ptr, align 8
  %arg_types = alloca [2 x ptr], align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %ty, align 8
  store ptr %3, ptr %lhs, align 8
  store ptr %4, ptr %rhs, align 8
  %6 = getelementptr inbounds [2 x ptr], ptr %args, i64 0, i64 0
  %7 = load ptr, ptr %lhs, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr inbounds ptr, ptr %6, i64 1
  %9 = load ptr, ptr %rhs, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr inbounds ptr, ptr %8, i64 1
  %11 = load ptr, ptr %ty, align 8
  %12 = call ptr @dump_type(ptr %11, i1 true)
  %13 = getelementptr inbounds %string, ptr %12, i32 0, i32 0
  %14 = load ptr, ptr %13, align 8
  %memberidx = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %14, i32 0, i32 5
  %15 = load ptr, ptr %memberidx, align 8
  %16 = call ptr %15(ptr %12)
  %17 = alloca ptr, align 8
  %18 = call i64 (ptr, ptr, ...) @asprintf(ptr %17, ptr @573, ptr %16)
  %19 = load ptr, ptr %17, align 8
  %20 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %20, ptr %19, i64 %18)
  tail call void @free(ptr %16)
  store ptr %20, ptr %name, align 8
  %21 = load ptr, ptr %this, align 8
  %22 = load ptr, ptr %ty, align 8
  %23 = call ptr @CodeGen_codegen_type(ptr %21, ptr %22, i1 true)
  store ptr %23, ptr %llvmty, align 8
  %24 = getelementptr inbounds [2 x ptr], ptr %arg_types, i64 0, i64 0
  %25 = load ptr, ptr %llvmty, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr inbounds ptr, ptr %24, i64 1
  %27 = load ptr, ptr %llvmty, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr inbounds ptr, ptr %26, i64 1
  %29 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %29, i32 0, i32 0
  %30 = load ptr, ptr %memberidx1, align 8
  %31 = load ptr, ptr %name, align 8
  %32 = getelementptr inbounds [2 x ptr], ptr %arg_types, i64 0, i64 0
  %33 = load ptr, ptr %32, align 8
  %34 = getelementptr inbounds [2 x ptr], ptr %arg_types, i64 0, i64 0
  %35 = load ptr, ptr %llvmty, align 8
  %36 = call ptr @get_intrinsic(ptr %30, ptr %31, ptr %34, i64 2, ptr %35, i1 false)
  store ptr %36, ptr %res, align 8
  %37 = load ptr, ptr %builder, align 8
  %38 = load ptr, ptr %res, align 8
  %memberidx2 = getelementptr inbounds %IntrinsicResult, ptr %38, i32 0, i32 1
  %39 = load ptr, ptr %memberidx2, align 8
  %40 = load ptr, ptr %res, align 8
  %memberidx3 = getelementptr inbounds %IntrinsicResult, ptr %40, i32 0, i32 0
  %41 = load ptr, ptr %memberidx3, align 8
  %42 = getelementptr inbounds [2 x ptr], ptr %args, i64 0, i64 0
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr inbounds [2 x ptr], ptr %args, i64 0, i64 0
  %45 = call ptr @LLVMBuildCall2(ptr %37, ptr %39, ptr %41, ptr %44, i64 2, ptr @315)
  ret ptr %45
}

define ptr @CodeGen_codegen_bin_exp(ptr %0, ptr %1, ptr %2) {
  %bin_exp = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %ipred = alloca i64, align 8
  %rhs = alloca ptr, align 8
  %lty = alloca ptr, align 8
  %rty = alloca ptr, align 8
  %op = alloca i64, align 8
  %is_const_expr = alloca i1, align 1
  %rpred = alloca i64, align 8
  %lhs = alloca ptr, align 8
  %indices = alloca [1 x ptr], align 8
  %pointee_type = alloca ptr, align 8
  %offset = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %bin_exp, align 8
  %4 = load ptr, ptr %bin_exp, align 8
  %memberidx = getelementptr inbounds %BinaryExpression, ptr %4, i32 0, i32 5
  %5 = load i64, ptr %memberidx, align 4
  store i64 %5, ptr %op, align 4
  %6 = load ptr, ptr %bin_exp, align 8
  %memberidx1 = getelementptr inbounds %BinaryExpression, ptr %6, i32 0, i32 4
  %7 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %7, i32 0, i32 3
  %8 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Type, ptr %8, i32 0, i32 0
  %9 = load i64, ptr %memberidx3, align 4
  %10 = load ptr, ptr %bin_exp, align 8
  %memberidx4 = getelementptr inbounds %BinaryExpression, ptr %10, i32 0, i32 6
  %11 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Expression, ptr %11, i32 0, i32 3
  %12 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %Type, ptr %12, i32 0, i32 0
  %13 = load i64, ptr %memberidx6, align 4
  %14 = icmp ne i64 %9, %13
  br i1 %14, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %15 = load i64, ptr %op, align 4
  %16 = icmp eq i64 %15, 11
  br i1 %16, label %if.entry7, label %else8

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %ifend9
  %17 = load i64, ptr %op, align 4
  %18 = icmp eq i64 %17, 19
  br i1 %18, label %if.entry13, label %else14

if.entry7:                                        ; preds = %if.entry
  %19 = load ptr, ptr %this, align 8
  %20 = call ptr @CodeGen_createLLVMBool(ptr %19, i1 false)
  ret ptr %20

else8:                                            ; preds = %if.entry
  %21 = load i64, ptr %op, align 4
  %22 = icmp eq i64 %21, 12
  br i1 %22, label %if.entry10, label %else11

ifend9:                                           ; preds = %ifend12
  br label %ifend

if.entry10:                                       ; preds = %else8
  %23 = load ptr, ptr %this, align 8
  %24 = call ptr @CodeGen_createLLVMBool(ptr %23, i1 true)
  ret ptr %24

else11:                                           ; preds = %else8
  br label %ifend12

ifend12:                                          ; preds = %else11
  br label %ifend9

if.entry13:                                       ; preds = %ifend
  %25 = load ptr, ptr %this, align 8
  %26 = load ptr, ptr %builder, align 8
  %27 = load ptr, ptr %bin_exp, align 8
  %28 = call ptr @CodeGen_codegen_assignment(ptr %25, ptr %26, ptr %27)
  ret ptr %28

else14:                                           ; preds = %ifend
  br label %ifend15

ifend15:                                          ; preds = %else14
  %29 = load ptr, ptr %this, align 8
  %30 = load ptr, ptr %builder, align 8
  %31 = load ptr, ptr %bin_exp, align 8
  %memberidx16 = getelementptr inbounds %BinaryExpression, ptr %31, i32 0, i32 4
  %32 = load ptr, ptr %memberidx16, align 8
  %33 = call ptr @CodeGen_codegen_expression(ptr %29, ptr %30, ptr %32)
  store ptr %33, ptr %lhs, align 8
  %34 = load ptr, ptr %this, align 8
  %35 = load ptr, ptr %builder, align 8
  %36 = load ptr, ptr %bin_exp, align 8
  %memberidx17 = getelementptr inbounds %BinaryExpression, ptr %36, i32 0, i32 6
  %37 = load ptr, ptr %memberidx17, align 8
  %38 = call ptr @CodeGen_codegen_expression(ptr %34, ptr %35, ptr %37)
  store ptr %38, ptr %rhs, align 8
  %39 = load ptr, ptr %bin_exp, align 8
  %memberidx18 = getelementptr inbounds %BinaryExpression, ptr %39, i32 0, i32 6
  %40 = load ptr, ptr %memberidx18, align 8
  %41 = call i1 @is_null_expression(ptr %40)
  %42 = load i64, ptr %op, align 4
  %43 = icmp eq i64 %42, 11
  %44 = load i64, ptr %op, align 4
  %45 = icmp eq i64 %44, 12
  %46 = or i1 %43, %45
  %47 = and i1 %41, %46
  br i1 %47, label %if.entry19, label %else20

if.entry19:                                       ; preds = %ifend15
  %48 = load ptr, ptr %lhs, align 8
  %49 = call i1 @LLVMIsConstant(ptr %48)
  br i1 %49, label %if.entry22, label %else23

else20:                                           ; preds = %ifend15
  br label %ifend21

ifend21:                                          ; preds = %else20
  %50 = load ptr, ptr %bin_exp, align 8
  %memberidx29 = getelementptr inbounds %BinaryExpression, ptr %50, i32 0, i32 4
  %51 = load ptr, ptr %memberidx29, align 8
  %memberidx30 = getelementptr inbounds %Expression, ptr %51, i32 0, i32 3
  %52 = load ptr, ptr %memberidx30, align 8
  store ptr %52, ptr %lty, align 8
  %53 = load ptr, ptr %bin_exp, align 8
  %memberidx31 = getelementptr inbounds %BinaryExpression, ptr %53, i32 0, i32 6
  %54 = load ptr, ptr %memberidx31, align 8
  %memberidx32 = getelementptr inbounds %Expression, ptr %54, i32 0, i32 3
  %55 = load ptr, ptr %memberidx32, align 8
  store ptr %55, ptr %rty, align 8
  %56 = load ptr, ptr %rty, align 8
  %57 = call i1 @is_numeric(ptr %56)
  %58 = load i64, ptr %op, align 4
  %59 = icmp eq i64 %58, 6
  %60 = and i1 %57, %59
  br i1 %60, label %if.entry33, label %else34

if.entry22:                                       ; preds = %if.entry19
  %61 = load ptr, ptr %this, align 8
  %62 = load i64, ptr %op, align 4
  %63 = icmp eq i64 %62, 11
  br i1 %63, label %true_block, label %false_block

else23:                                           ; preds = %if.entry19
  br label %ifend24

ifend24:                                          ; preds = %else23
  %64 = load i64, ptr %op, align 4
  %65 = icmp eq i64 %64, 11
  br i1 %65, label %true_block25, label %false_block26

true_block:                                       ; preds = %if.entry22
  %66 = load ptr, ptr %lhs, align 8
  %67 = call i1 @LLVMIsNull(ptr %66)
  br label %end

false_block:                                      ; preds = %if.entry22
  %68 = load ptr, ptr %lhs, align 8
  %69 = call i1 @LLVMIsNull(ptr %68)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi i1 [ %67, %true_block ], [ %69, %false_block ]
  %70 = call ptr @CodeGen_createLLVMBool(ptr %61, i1 %ternary)
  ret ptr %70

true_block25:                                     ; preds = %ifend24
  %71 = load ptr, ptr %builder, align 8
  %72 = load ptr, ptr %lhs, align 8
  %73 = call ptr @LLVMBuildIsNull(ptr %71, ptr %72, ptr @315)
  br label %end27

false_block26:                                    ; preds = %ifend24
  %74 = load ptr, ptr %builder, align 8
  %75 = load ptr, ptr %lhs, align 8
  %76 = call ptr @LLVMBuildIsNotNull(ptr %74, ptr %75, ptr @315)
  br label %end27

end27:                                            ; preds = %false_block26, %true_block25
  %ternary28 = phi ptr [ %73, %true_block25 ], [ %76, %false_block26 ]
  ret ptr %ternary28

if.entry33:                                       ; preds = %ifend21
  %77 = load ptr, ptr %this, align 8
  %78 = load ptr, ptr %builder, align 8
  %79 = load ptr, ptr %rty, align 8
  %80 = load ptr, ptr %lhs, align 8
  %81 = load ptr, ptr %rhs, align 8
  %82 = call ptr @CodeGen_codegen_pow_expr(ptr %77, ptr %78, ptr %79, ptr %80, ptr %81)
  ret ptr %82

else34:                                           ; preds = %ifend21
  br label %ifend35

ifend35:                                          ; preds = %else34
  %83 = load ptr, ptr %lty, align 8
  %84 = call i1 @is_pointer(ptr %83)
  br i1 %84, label %if.entry36, label %else37

if.entry36:                                       ; preds = %ifend35
  %85 = getelementptr inbounds [1 x ptr], ptr %indices, i64 0, i64 0
  %86 = load i64, ptr %op, align 4
  %87 = icmp eq i64 %86, 1
  br i1 %87, label %true_block39, label %false_block40

else37:                                           ; preds = %ifend35
  br label %ifend38

ifend38:                                          ; preds = %else37
  store i64 0, ptr %ipred, align 4
  store i64 0, ptr %rpred, align 4
  %88 = load ptr, ptr %lhs, align 8
  %89 = call i1 @LLVMIsConstant(ptr %88)
  %90 = load ptr, ptr %rhs, align 8
  %91 = call i1 @LLVMIsConstant(ptr %90)
  %92 = and i1 %89, %91
  store i1 %92, ptr %is_const_expr, align 1
  %93 = load ptr, ptr %rty, align 8
  %94 = call i1 @is_int(ptr %93)
  %95 = load ptr, ptr %lty, align 8
  %96 = call i1 @is_object(ptr %95)
  %97 = load ptr, ptr %rty, align 8
  %98 = call i1 @is_object(ptr %97)
  %99 = and i1 %96, %98
  %100 = load i64, ptr %op, align 4
  %101 = icmp eq i64 %100, 11
  %102 = load i64, ptr %op, align 4
  %103 = icmp eq i64 %102, 12
  %104 = or i1 %101, %103
  %105 = and i1 %99, %104
  %106 = or i1 %94, %105
  %107 = load ptr, ptr %rty, align 8
  %memberidx44 = getelementptr inbounds %Type, ptr %107, i32 0, i32 0
  %108 = load i64, ptr %memberidx44, align 4
  %109 = icmp eq i64 %108, 12
  %110 = or i1 %106, %109
  br i1 %110, label %if.entry45, label %else46

true_block39:                                     ; preds = %if.entry36
  %111 = load ptr, ptr %rhs, align 8
  br label %end41

false_block40:                                    ; preds = %if.entry36
  %112 = load ptr, ptr %builder, align 8
  %113 = load ptr, ptr %rhs, align 8
  %114 = call ptr @CodeGen_neg_int(ptr %112, ptr %113)
  br label %end41

end41:                                            ; preds = %false_block40, %true_block39
  %ternary42 = phi ptr [ %111, %true_block39 ], [ %114, %false_block40 ]
  store ptr %ternary42, ptr %85, align 8
  %115 = getelementptr inbounds ptr, ptr %85, i64 1
  %116 = load ptr, ptr %this, align 8
  %117 = load ptr, ptr %lty, align 8
  %memberidx43 = getelementptr inbounds %PointerType, ptr %117, i32 0, i32 1
  %118 = load ptr, ptr %memberidx43, align 8
  %119 = call ptr @CodeGen_codegen_type(ptr %116, ptr %118, i1 true)
  store ptr %119, ptr %pointee_type, align 8
  %120 = load ptr, ptr %builder, align 8
  %121 = load ptr, ptr %pointee_type, align 8
  %122 = load ptr, ptr %lhs, align 8
  %123 = getelementptr inbounds [1 x ptr], ptr %indices, i64 0, i64 0
  %124 = load ptr, ptr %123, align 8
  %125 = getelementptr inbounds [1 x ptr], ptr %indices, i64 0, i64 0
  %126 = call ptr @LLVMBuildInBoundsGEP2(ptr %120, ptr %121, ptr %122, ptr %125, i64 1, ptr @315)
  ret ptr %126

if.entry45:                                       ; preds = %ifend38
  %127 = load i64, ptr %op, align 4
  %128 = icmp eq i64 %127, 1
  br i1 %128, label %if.entry48, label %else49

else46:                                           ; preds = %ifend38
  %129 = load ptr, ptr %rty, align 8
  %130 = call i1 @is_float(ptr %129)
  br i1 %130, label %if.entry166, label %else167

ifend47:                                          ; preds = %ifend168, %ifend50
  %131 = call ptr @string_from_bytes(ptr @600, i64 33)
  call void @panic(ptr %131)
  ret ptr null

if.entry48:                                       ; preds = %if.entry45
  %132 = load ptr, ptr %bin_exp, align 8
  %memberidx51 = getelementptr inbounds %Expression, ptr %132, i32 0, i32 3
  %133 = load ptr, ptr %memberidx51, align 8
  %memberidx52 = getelementptr inbounds %IntType, ptr %133, i32 0, i32 1
  %134 = load i1, ptr %memberidx52, align 1
  br i1 %134, label %if.entry53, label %else54

else49:                                           ; preds = %if.entry45
  %135 = load i64, ptr %op, align 4
  %136 = icmp eq i64 %135, 2
  br i1 %136, label %if.entry64, label %else65

ifend50:                                          ; preds = %ifend66
  br label %ifend47

if.entry53:                                       ; preds = %if.entry48
  %137 = load i1, ptr %is_const_expr, align 1
  br i1 %137, label %true_block56, label %false_block57

else54:                                           ; preds = %if.entry48
  br label %ifend55

ifend55:                                          ; preds = %else54
  %138 = load i1, ptr %is_const_expr, align 1
  br i1 %138, label %true_block60, label %false_block61

true_block56:                                     ; preds = %if.entry53
  %139 = load ptr, ptr %lhs, align 8
  %140 = load ptr, ptr %rhs, align 8
  %141 = call ptr @LLVMConstNSWAdd(ptr %139, ptr %140)
  br label %end58

false_block57:                                    ; preds = %if.entry53
  %142 = load ptr, ptr %builder, align 8
  %143 = load ptr, ptr %lhs, align 8
  %144 = load ptr, ptr %rhs, align 8
  %145 = call ptr @LLVMBuildNSWAdd(ptr %142, ptr %143, ptr %144, ptr @315)
  br label %end58

end58:                                            ; preds = %false_block57, %true_block56
  %ternary59 = phi ptr [ %141, %true_block56 ], [ %145, %false_block57 ]
  ret ptr %ternary59

true_block60:                                     ; preds = %ifend55
  %146 = load ptr, ptr %lhs, align 8
  %147 = load ptr, ptr %rhs, align 8
  %148 = call ptr @LLVMConstNUWAdd(ptr %146, ptr %147)
  br label %end62

false_block61:                                    ; preds = %ifend55
  %149 = load ptr, ptr %builder, align 8
  %150 = load ptr, ptr %lhs, align 8
  %151 = load ptr, ptr %rhs, align 8
  %152 = call ptr @LLVMBuildNUWAdd(ptr %149, ptr %150, ptr %151, ptr @315)
  br label %end62

end62:                                            ; preds = %false_block61, %true_block60
  %ternary63 = phi ptr [ %148, %true_block60 ], [ %152, %false_block61 ]
  ret ptr %ternary63

if.entry64:                                       ; preds = %else49
  %153 = load ptr, ptr %bin_exp, align 8
  %memberidx67 = getelementptr inbounds %Expression, ptr %153, i32 0, i32 3
  %154 = load ptr, ptr %memberidx67, align 8
  %memberidx68 = getelementptr inbounds %IntType, ptr %154, i32 0, i32 1
  %155 = load i1, ptr %memberidx68, align 1
  br i1 %155, label %if.entry69, label %else70

else65:                                           ; preds = %else49
  %156 = load i64, ptr %op, align 4
  %157 = icmp eq i64 %156, 3
  br i1 %157, label %if.entry80, label %else81

ifend66:                                          ; preds = %ifend82
  br label %ifend50

if.entry69:                                       ; preds = %if.entry64
  %158 = load i1, ptr %is_const_expr, align 1
  br i1 %158, label %true_block72, label %false_block73

else70:                                           ; preds = %if.entry64
  br label %ifend71

ifend71:                                          ; preds = %else70
  %159 = load i1, ptr %is_const_expr, align 1
  br i1 %159, label %true_block76, label %false_block77

true_block72:                                     ; preds = %if.entry69
  %160 = load ptr, ptr %lhs, align 8
  %161 = load ptr, ptr %rhs, align 8
  %162 = call ptr @LLVMConstNSWSub(ptr %160, ptr %161)
  br label %end74

false_block73:                                    ; preds = %if.entry69
  %163 = load ptr, ptr %builder, align 8
  %164 = load ptr, ptr %lhs, align 8
  %165 = load ptr, ptr %rhs, align 8
  %166 = call ptr @LLVMBuildNSWSub(ptr %163, ptr %164, ptr %165, ptr @315)
  br label %end74

end74:                                            ; preds = %false_block73, %true_block72
  %ternary75 = phi ptr [ %162, %true_block72 ], [ %166, %false_block73 ]
  ret ptr %ternary75

true_block76:                                     ; preds = %ifend71
  %167 = load ptr, ptr %lhs, align 8
  %168 = load ptr, ptr %rhs, align 8
  %169 = call ptr @LLVMConstNUWSub(ptr %167, ptr %168)
  br label %end78

false_block77:                                    ; preds = %ifend71
  %170 = load ptr, ptr %builder, align 8
  %171 = load ptr, ptr %lhs, align 8
  %172 = load ptr, ptr %rhs, align 8
  %173 = call ptr @LLVMBuildNUWSub(ptr %170, ptr %171, ptr %172, ptr @315)
  br label %end78

end78:                                            ; preds = %false_block77, %true_block76
  %ternary79 = phi ptr [ %169, %true_block76 ], [ %173, %false_block77 ]
  ret ptr %ternary79

if.entry80:                                       ; preds = %else65
  %174 = load ptr, ptr %bin_exp, align 8
  %memberidx83 = getelementptr inbounds %Expression, ptr %174, i32 0, i32 3
  %175 = load ptr, ptr %memberidx83, align 8
  %memberidx84 = getelementptr inbounds %IntType, ptr %175, i32 0, i32 1
  %176 = load i1, ptr %memberidx84, align 1
  br i1 %176, label %if.entry85, label %else86

else81:                                           ; preds = %else65
  %177 = load i64, ptr %op, align 4
  %178 = icmp eq i64 %177, 4
  br i1 %178, label %if.entry96, label %else97

ifend82:                                          ; preds = %ifend98
  br label %ifend66

if.entry85:                                       ; preds = %if.entry80
  %179 = load i1, ptr %is_const_expr, align 1
  br i1 %179, label %true_block88, label %false_block89

else86:                                           ; preds = %if.entry80
  br label %ifend87

ifend87:                                          ; preds = %else86
  %180 = load i1, ptr %is_const_expr, align 1
  br i1 %180, label %true_block92, label %false_block93

true_block88:                                     ; preds = %if.entry85
  %181 = load ptr, ptr %lhs, align 8
  %182 = load ptr, ptr %rhs, align 8
  %183 = call ptr @LLVMConstNSWMul(ptr %181, ptr %182)
  br label %end90

false_block89:                                    ; preds = %if.entry85
  %184 = load ptr, ptr %builder, align 8
  %185 = load ptr, ptr %lhs, align 8
  %186 = load ptr, ptr %rhs, align 8
  %187 = call ptr @LLVMBuildNSWMul(ptr %184, ptr %185, ptr %186, ptr @315)
  br label %end90

end90:                                            ; preds = %false_block89, %true_block88
  %ternary91 = phi ptr [ %183, %true_block88 ], [ %187, %false_block89 ]
  ret ptr %ternary91

true_block92:                                     ; preds = %ifend87
  %188 = load ptr, ptr %lhs, align 8
  %189 = load ptr, ptr %rhs, align 8
  %190 = call ptr @LLVMConstNUWMul(ptr %188, ptr %189)
  br label %end94

false_block93:                                    ; preds = %ifend87
  %191 = load ptr, ptr %builder, align 8
  %192 = load ptr, ptr %lhs, align 8
  %193 = load ptr, ptr %rhs, align 8
  %194 = call ptr @LLVMBuildNUWMul(ptr %191, ptr %192, ptr %193, ptr @315)
  br label %end94

end94:                                            ; preds = %false_block93, %true_block92
  %ternary95 = phi ptr [ %190, %true_block92 ], [ %194, %false_block93 ]
  ret ptr %ternary95

if.entry96:                                       ; preds = %else81
  %195 = load ptr, ptr %bin_exp, align 8
  %memberidx99 = getelementptr inbounds %Expression, ptr %195, i32 0, i32 3
  %196 = load ptr, ptr %memberidx99, align 8
  %memberidx100 = getelementptr inbounds %IntType, ptr %196, i32 0, i32 1
  %197 = load i1, ptr %memberidx100, align 1
  br i1 %197, label %if.entry101, label %else102

else97:                                           ; preds = %else81
  %198 = load i64, ptr %op, align 4
  %199 = icmp eq i64 %198, 5
  br i1 %199, label %if.entry104, label %else105

ifend98:                                          ; preds = %ifend106
  br label %ifend82

if.entry101:                                      ; preds = %if.entry96
  %200 = load ptr, ptr %builder, align 8
  %201 = load ptr, ptr %lhs, align 8
  %202 = load ptr, ptr %rhs, align 8
  %203 = call ptr @LLVMBuildSDiv(ptr %200, ptr %201, ptr %202, ptr @315)
  ret ptr %203

else102:                                          ; preds = %if.entry96
  br label %ifend103

ifend103:                                         ; preds = %else102
  %204 = load ptr, ptr %builder, align 8
  %205 = load ptr, ptr %lhs, align 8
  %206 = load ptr, ptr %rhs, align 8
  %207 = call ptr @LLVMBuildUDiv(ptr %204, ptr %205, ptr %206, ptr @315)
  ret ptr %207

if.entry104:                                      ; preds = %else97
  %208 = load ptr, ptr %bin_exp, align 8
  %memberidx107 = getelementptr inbounds %Expression, ptr %208, i32 0, i32 3
  %209 = load ptr, ptr %memberidx107, align 8
  %memberidx108 = getelementptr inbounds %IntType, ptr %209, i32 0, i32 1
  %210 = load i1, ptr %memberidx108, align 1
  br i1 %210, label %if.entry109, label %else110

else105:                                          ; preds = %else97
  %211 = load i64, ptr %op, align 4
  %212 = icmp sge i64 %211, 7
  %213 = load i64, ptr %op, align 4
  %214 = icmp sle i64 %213, 10
  %215 = and i1 %212, %214
  br i1 %215, label %if.entry112, label %else113

ifend106:                                         ; preds = %ifend114
  br label %ifend98

if.entry109:                                      ; preds = %if.entry104
  %216 = load ptr, ptr %builder, align 8
  %217 = load ptr, ptr %lhs, align 8
  %218 = load ptr, ptr %rhs, align 8
  %219 = call ptr @LLVMBuildSRem(ptr %216, ptr %217, ptr %218, ptr @315)
  ret ptr %219

else110:                                          ; preds = %if.entry104
  br label %ifend111

ifend111:                                         ; preds = %else110
  %220 = load ptr, ptr %builder, align 8
  %221 = load ptr, ptr %lhs, align 8
  %222 = load ptr, ptr %rhs, align 8
  %223 = call ptr @LLVMBuildURem(ptr %220, ptr %221, ptr %222, ptr @315)
  ret ptr %223

if.entry112:                                      ; preds = %else105
  %224 = load ptr, ptr %rty, align 8
  %memberidx118 = getelementptr inbounds %IntType, ptr %224, i32 0, i32 1
  %225 = load i1, ptr %memberidx118, align 1
  br i1 %225, label %true_block115, label %false_block116

else113:                                          ; preds = %else105
  %226 = load i64, ptr %op, align 4
  %227 = icmp sge i64 %226, 11
  %228 = load i64, ptr %op, align 4
  %229 = icmp sle i64 %228, 12
  %230 = and i1 %227, %229
  br i1 %230, label %if.entry124, label %else125

ifend114:                                         ; preds = %ifend126
  br label %ifend106

true_block115:                                    ; preds = %if.entry112
  br label %end117

false_block116:                                   ; preds = %if.entry112
  br label %end117

end117:                                           ; preds = %false_block116, %true_block115
  %ternary119 = phi i64 [ 38, %true_block115 ], [ 34, %false_block116 ]
  store i64 %ternary119, ptr %offset, align 4
  %231 = load i64, ptr %op, align 4
  %232 = sub nsw i64 %231, 7
  %233 = add nsw i64 %232, 38
  store i64 %233, ptr %ipred, align 4
  %234 = load i1, ptr %is_const_expr, align 1
  br i1 %234, label %true_block120, label %false_block121

true_block120:                                    ; preds = %end117
  %235 = load i64, ptr %ipred, align 4
  %236 = load ptr, ptr %lhs, align 8
  %237 = load ptr, ptr %rhs, align 8
  %238 = call ptr @LLVMConstICmp(i64 %235, ptr %236, ptr %237)
  br label %end122

false_block121:                                   ; preds = %end117
  %239 = load ptr, ptr %builder, align 8
  %240 = load i64, ptr %ipred, align 4
  %241 = load ptr, ptr %lhs, align 8
  %242 = load ptr, ptr %rhs, align 8
  %243 = call ptr @LLVMBuildICmp(ptr %239, i64 %240, ptr %241, ptr %242, ptr @315)
  br label %end122

end122:                                           ; preds = %false_block121, %true_block120
  %ternary123 = phi ptr [ %238, %true_block120 ], [ %243, %false_block121 ]
  ret ptr %ternary123

if.entry124:                                      ; preds = %else113
  %244 = load i64, ptr %op, align 4
  %245 = sub nsw i64 %244, 11
  %246 = add nsw i64 %245, 32
  store i64 %246, ptr %ipred, align 4
  %247 = load i1, ptr %is_const_expr, align 1
  br i1 %247, label %true_block127, label %false_block128

else125:                                          ; preds = %else113
  %248 = load i64, ptr %op, align 4
  %249 = icmp eq i64 %248, 13
  br i1 %249, label %if.entry131, label %else132

ifend126:                                         ; preds = %ifend133
  br label %ifend114

true_block127:                                    ; preds = %if.entry124
  %250 = load i64, ptr %ipred, align 4
  %251 = load ptr, ptr %lhs, align 8
  %252 = load ptr, ptr %rhs, align 8
  %253 = call ptr @LLVMConstICmp(i64 %250, ptr %251, ptr %252)
  br label %end129

false_block128:                                   ; preds = %if.entry124
  %254 = load ptr, ptr %builder, align 8
  %255 = load i64, ptr %ipred, align 4
  %256 = load ptr, ptr %lhs, align 8
  %257 = load ptr, ptr %rhs, align 8
  %258 = call ptr @LLVMBuildICmp(ptr %254, i64 %255, ptr %256, ptr %257, ptr @315)
  br label %end129

end129:                                           ; preds = %false_block128, %true_block127
  %ternary130 = phi ptr [ %253, %true_block127 ], [ %258, %false_block128 ]
  ret ptr %ternary130

if.entry131:                                      ; preds = %else125
  %259 = load i1, ptr %is_const_expr, align 1
  br i1 %259, label %true_block134, label %false_block135

else132:                                          ; preds = %else125
  %260 = load i64, ptr %op, align 4
  %261 = icmp eq i64 %260, 14
  br i1 %261, label %if.entry138, label %else139

ifend133:                                         ; preds = %ifend140
  br label %ifend126

true_block134:                                    ; preds = %if.entry131
  %262 = load ptr, ptr %lhs, align 8
  %263 = load ptr, ptr %rhs, align 8
  %264 = call ptr @LLVMConstShl(ptr %262, ptr %263)
  br label %end136

false_block135:                                   ; preds = %if.entry131
  %265 = load ptr, ptr %builder, align 8
  %266 = load ptr, ptr %lhs, align 8
  %267 = load ptr, ptr %rhs, align 8
  %268 = call ptr @LLVMBuildShl(ptr %265, ptr %266, ptr %267, ptr @315)
  br label %end136

end136:                                           ; preds = %false_block135, %true_block134
  %ternary137 = phi ptr [ %264, %true_block134 ], [ %268, %false_block135 ]
  ret ptr %ternary137

if.entry138:                                      ; preds = %else132
  %269 = load i1, ptr %is_const_expr, align 1
  br i1 %269, label %true_block141, label %false_block142

else139:                                          ; preds = %else132
  %270 = load i64, ptr %op, align 4
  %271 = icmp eq i64 %270, 15
  br i1 %271, label %if.entry145, label %else146

ifend140:                                         ; preds = %ifend147
  br label %ifend133

true_block141:                                    ; preds = %if.entry138
  %272 = load ptr, ptr %lhs, align 8
  %273 = load ptr, ptr %rhs, align 8
  %274 = call ptr @LLVMConstLShr(ptr %272, ptr %273)
  br label %end143

false_block142:                                   ; preds = %if.entry138
  %275 = load ptr, ptr %builder, align 8
  %276 = load ptr, ptr %lhs, align 8
  %277 = load ptr, ptr %rhs, align 8
  %278 = call ptr @LLVMBuildLShr(ptr %275, ptr %276, ptr %277, ptr @315)
  br label %end143

end143:                                           ; preds = %false_block142, %true_block141
  %ternary144 = phi ptr [ %274, %true_block141 ], [ %278, %false_block142 ]
  ret ptr %ternary144

if.entry145:                                      ; preds = %else139
  %279 = load i1, ptr %is_const_expr, align 1
  br i1 %279, label %true_block148, label %false_block149

else146:                                          ; preds = %else139
  %280 = load i64, ptr %op, align 4
  %281 = icmp eq i64 %280, 16
  br i1 %281, label %if.entry152, label %else153

ifend147:                                         ; preds = %ifend154
  br label %ifend140

true_block148:                                    ; preds = %if.entry145
  %282 = load ptr, ptr %lhs, align 8
  %283 = load ptr, ptr %rhs, align 8
  %284 = call ptr @LLVMConstOr(ptr %282, ptr %283)
  br label %end150

false_block149:                                   ; preds = %if.entry145
  %285 = load ptr, ptr %builder, align 8
  %286 = load ptr, ptr %lhs, align 8
  %287 = load ptr, ptr %rhs, align 8
  %288 = call ptr @LLVMBuildOr(ptr %285, ptr %286, ptr %287, ptr @315)
  br label %end150

end150:                                           ; preds = %false_block149, %true_block148
  %ternary151 = phi ptr [ %284, %true_block148 ], [ %288, %false_block149 ]
  ret ptr %ternary151

if.entry152:                                      ; preds = %else146
  %289 = load i1, ptr %is_const_expr, align 1
  br i1 %289, label %true_block155, label %false_block156

else153:                                          ; preds = %else146
  %290 = load i64, ptr %op, align 4
  %291 = icmp eq i64 %290, 17
  br i1 %291, label %if.entry159, label %else160

ifend154:                                         ; preds = %ifend161
  br label %ifend147

true_block155:                                    ; preds = %if.entry152
  %292 = load ptr, ptr %lhs, align 8
  %293 = load ptr, ptr %rhs, align 8
  %294 = call ptr @LLVMConstAnd(ptr %292, ptr %293)
  br label %end157

false_block156:                                   ; preds = %if.entry152
  %295 = load ptr, ptr %builder, align 8
  %296 = load ptr, ptr %lhs, align 8
  %297 = load ptr, ptr %rhs, align 8
  %298 = call ptr @LLVMBuildAnd(ptr %295, ptr %296, ptr %297, ptr @315)
  br label %end157

end157:                                           ; preds = %false_block156, %true_block155
  %ternary158 = phi ptr [ %294, %true_block155 ], [ %298, %false_block156 ]
  ret ptr %ternary158

if.entry159:                                      ; preds = %else153
  %299 = load i1, ptr %is_const_expr, align 1
  br i1 %299, label %true_block162, label %false_block163

else160:                                          ; preds = %else153
  br label %ifend161

ifend161:                                         ; preds = %else160
  br label %ifend154

true_block162:                                    ; preds = %if.entry159
  %300 = load ptr, ptr %lhs, align 8
  %301 = load ptr, ptr %rhs, align 8
  %302 = call ptr @LLVMConstXor(ptr %300, ptr %301)
  br label %end164

false_block163:                                   ; preds = %if.entry159
  %303 = load ptr, ptr %builder, align 8
  %304 = load ptr, ptr %lhs, align 8
  %305 = load ptr, ptr %rhs, align 8
  %306 = call ptr @LLVMBuildXor(ptr %303, ptr %304, ptr %305, ptr @315)
  br label %end164

end164:                                           ; preds = %false_block163, %true_block162
  %ternary165 = phi ptr [ %302, %true_block162 ], [ %306, %false_block163 ]
  ret ptr %ternary165

if.entry166:                                      ; preds = %else46
  %307 = load i64, ptr %op, align 4
  %308 = icmp eq i64 %307, 1
  br i1 %308, label %if.entry169, label %else170

else167:                                          ; preds = %else46
  %309 = load ptr, ptr %rty, align 8
  %310 = call i1 @is_bool(ptr %309)
  br i1 %310, label %if.entry202, label %else203

ifend168:                                         ; preds = %ifend204, %ifend171
  br label %ifend47

if.entry169:                                      ; preds = %if.entry166
  %311 = load ptr, ptr %builder, align 8
  %312 = load ptr, ptr %lhs, align 8
  %313 = load ptr, ptr %rhs, align 8
  %314 = call ptr @LLVMBuildFAdd(ptr %311, ptr %312, ptr %313, ptr @315)
  ret ptr %314

else170:                                          ; preds = %if.entry166
  %315 = load i64, ptr %op, align 4
  %316 = icmp eq i64 %315, 2
  br i1 %316, label %if.entry172, label %else173

ifend171:                                         ; preds = %ifend174
  br label %ifend168

if.entry172:                                      ; preds = %else170
  %317 = load ptr, ptr %builder, align 8
  %318 = load ptr, ptr %lhs, align 8
  %319 = load ptr, ptr %rhs, align 8
  %320 = call ptr @LLVMBuildFSub(ptr %317, ptr %318, ptr %319, ptr @315)
  ret ptr %320

else173:                                          ; preds = %else170
  %321 = load i64, ptr %op, align 4
  %322 = icmp eq i64 %321, 3
  br i1 %322, label %if.entry175, label %else176

ifend174:                                         ; preds = %ifend177
  br label %ifend171

if.entry175:                                      ; preds = %else173
  %323 = load ptr, ptr %builder, align 8
  %324 = load ptr, ptr %lhs, align 8
  %325 = load ptr, ptr %rhs, align 8
  %326 = call ptr @LLVMBuildFMul(ptr %323, ptr %324, ptr %325, ptr @315)
  ret ptr %326

else176:                                          ; preds = %else173
  %327 = load i64, ptr %op, align 4
  %328 = icmp eq i64 %327, 4
  br i1 %328, label %if.entry178, label %else179

ifend177:                                         ; preds = %ifend180
  br label %ifend174

if.entry178:                                      ; preds = %else176
  %329 = load ptr, ptr %builder, align 8
  %330 = load ptr, ptr %lhs, align 8
  %331 = load ptr, ptr %rhs, align 8
  %332 = call ptr @LLVMBuildFDiv(ptr %329, ptr %330, ptr %331, ptr @315)
  ret ptr %332

else179:                                          ; preds = %else176
  %333 = load i64, ptr %op, align 4
  %334 = icmp eq i64 %333, 5
  br i1 %334, label %if.entry181, label %else182

ifend180:                                         ; preds = %ifend183
  br label %ifend177

if.entry181:                                      ; preds = %else179
  %335 = load ptr, ptr %builder, align 8
  %336 = load ptr, ptr %lhs, align 8
  %337 = load ptr, ptr %rhs, align 8
  %338 = call ptr @LLVMBuildFRem(ptr %335, ptr %336, ptr %337, ptr @315)
  ret ptr %338

else182:                                          ; preds = %else179
  %339 = load i64, ptr %op, align 4
  %340 = icmp sge i64 %339, 7
  %341 = load i64, ptr %op, align 4
  %342 = icmp sle i64 %341, 10
  %343 = and i1 %340, %342
  br i1 %343, label %if.entry184, label %else185

ifend183:                                         ; preds = %ifend186
  br label %ifend180

if.entry184:                                      ; preds = %else182
  %344 = load i64, ptr %op, align 4
  %345 = sub nsw i64 %344, 7
  %346 = add nsw i64 %345, 2
  store i64 %346, ptr %rpred, align 4
  %347 = load i1, ptr %is_const_expr, align 1
  br i1 %347, label %true_block187, label %false_block188

else185:                                          ; preds = %else182
  %348 = load i64, ptr %op, align 4
  %349 = icmp sge i64 %348, 11
  %350 = load i64, ptr %op, align 4
  %351 = icmp sle i64 %350, 12
  %352 = and i1 %349, %351
  br i1 %352, label %if.entry191, label %else192

ifend186:                                         ; preds = %ifend193
  br label %ifend183

true_block187:                                    ; preds = %if.entry184
  %353 = load i64, ptr %rpred, align 4
  %354 = load ptr, ptr %lhs, align 8
  %355 = load ptr, ptr %rhs, align 8
  %356 = call ptr @LLVMConstFCmp(i64 %353, ptr %354, ptr %355)
  br label %end189

false_block188:                                   ; preds = %if.entry184
  %357 = load ptr, ptr %builder, align 8
  %358 = load i64, ptr %rpred, align 4
  %359 = load ptr, ptr %lhs, align 8
  %360 = load ptr, ptr %rhs, align 8
  %361 = call ptr @LLVMBuildFCmp(ptr %357, i64 %358, ptr %359, ptr %360, ptr @315)
  br label %end189

end189:                                           ; preds = %false_block188, %true_block187
  %ternary190 = phi ptr [ %356, %true_block187 ], [ %361, %false_block188 ]
  ret ptr %ternary190

if.entry191:                                      ; preds = %else185
  %362 = load i64, ptr %op, align 4
  %363 = icmp eq i64 %362, 12
  br i1 %363, label %true_block194, label %false_block195

else192:                                          ; preds = %else185
  br label %ifend193

ifend193:                                         ; preds = %else192
  br label %ifend186

true_block194:                                    ; preds = %if.entry191
  br label %end196

false_block195:                                   ; preds = %if.entry191
  br label %end196

end196:                                           ; preds = %false_block195, %true_block194
  %ternary197 = phi i64 [ 6, %true_block194 ], [ 1, %false_block195 ]
  store i64 %ternary197, ptr %rpred, align 4
  %364 = load i1, ptr %is_const_expr, align 1
  br i1 %364, label %true_block198, label %false_block199

true_block198:                                    ; preds = %end196
  %365 = load i64, ptr %rpred, align 4
  %366 = load ptr, ptr %lhs, align 8
  %367 = load ptr, ptr %rhs, align 8
  %368 = call ptr @LLVMConstFCmp(i64 %365, ptr %366, ptr %367)
  br label %end200

false_block199:                                   ; preds = %end196
  %369 = load ptr, ptr %builder, align 8
  %370 = load i64, ptr %rpred, align 4
  %371 = load ptr, ptr %lhs, align 8
  %372 = load ptr, ptr %rhs, align 8
  %373 = call ptr @LLVMBuildFCmp(ptr %369, i64 %370, ptr %371, ptr %372, ptr @315)
  br label %end200

end200:                                           ; preds = %false_block199, %true_block198
  %ternary201 = phi ptr [ %368, %true_block198 ], [ %373, %false_block199 ]
  ret ptr %ternary201

if.entry202:                                      ; preds = %else167
  %374 = load i64, ptr %op, align 4
  %375 = icmp eq i64 %374, 16
  %376 = load i64, ptr %op, align 4
  %377 = icmp eq i64 %376, 11
  %378 = or i1 %375, %377
  br i1 %378, label %if.entry205, label %else206

else203:                                          ; preds = %else167
  br label %ifend204

ifend204:                                         ; preds = %else203, %ifend207
  br label %ifend168

if.entry205:                                      ; preds = %if.entry202
  %379 = load i1, ptr %is_const_expr, align 1
  br i1 %379, label %true_block208, label %false_block209

else206:                                          ; preds = %if.entry202
  %380 = load i64, ptr %op, align 4
  %381 = icmp eq i64 %380, 15
  br i1 %381, label %if.entry212, label %else213

ifend207:                                         ; preds = %ifend214
  br label %ifend204

true_block208:                                    ; preds = %if.entry205
  %382 = load ptr, ptr %lhs, align 8
  %383 = load ptr, ptr %rhs, align 8
  %384 = call ptr @LLVMConstAnd(ptr %382, ptr %383)
  br label %end210

false_block209:                                   ; preds = %if.entry205
  %385 = load ptr, ptr %builder, align 8
  %386 = load ptr, ptr %lhs, align 8
  %387 = load ptr, ptr %rhs, align 8
  %388 = call ptr @LLVMBuildAnd(ptr %385, ptr %386, ptr %387, ptr @315)
  br label %end210

end210:                                           ; preds = %false_block209, %true_block208
  %ternary211 = phi ptr [ %384, %true_block208 ], [ %388, %false_block209 ]
  ret ptr %ternary211

if.entry212:                                      ; preds = %else206
  %389 = load i1, ptr %is_const_expr, align 1
  br i1 %389, label %true_block215, label %false_block216

else213:                                          ; preds = %else206
  %390 = load i64, ptr %op, align 4
  %391 = icmp eq i64 %390, 12
  br i1 %391, label %if.entry219, label %else220

ifend214:                                         ; preds = %ifend221
  br label %ifend207

true_block215:                                    ; preds = %if.entry212
  %392 = load ptr, ptr %lhs, align 8
  %393 = load ptr, ptr %rhs, align 8
  %394 = call ptr @LLVMConstOr(ptr %392, ptr %393)
  br label %end217

false_block216:                                   ; preds = %if.entry212
  %395 = load ptr, ptr %builder, align 8
  %396 = load ptr, ptr %lhs, align 8
  %397 = load ptr, ptr %rhs, align 8
  %398 = call ptr @LLVMBuildOr(ptr %395, ptr %396, ptr %397, ptr @315)
  br label %end217

end217:                                           ; preds = %false_block216, %true_block215
  %ternary218 = phi ptr [ %394, %true_block215 ], [ %398, %false_block216 ]
  ret ptr %ternary218

if.entry219:                                      ; preds = %else213
  %399 = load i1, ptr %is_const_expr, align 1
  br i1 %399, label %true_block222, label %false_block223

else220:                                          ; preds = %else213
  br label %ifend221

ifend221:                                         ; preds = %else220
  br label %ifend214

true_block222:                                    ; preds = %if.entry219
  %400 = load ptr, ptr %lhs, align 8
  %401 = load ptr, ptr %rhs, align 8
  %402 = call ptr @LLVMConstXor(ptr %400, ptr %401)
  br label %end224

false_block223:                                   ; preds = %if.entry219
  %403 = load ptr, ptr %builder, align 8
  %404 = load ptr, ptr %lhs, align 8
  %405 = load ptr, ptr %rhs, align 8
  %406 = call ptr @LLVMBuildXor(ptr %403, ptr %404, ptr %405, ptr @315)
  br label %end224

end224:                                           ; preds = %false_block223, %true_block222
  %ternary225 = phi ptr [ %402, %true_block222 ], [ %406, %false_block223 ]
  ret ptr %ternary225
}

define ptr @CodeGen_codegen_call_exp(ptr %0, ptr %1, ptr %2) {
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %call_exp = alloca ptr, align 8
  %func = alloca ptr, align 8
  %args_value = alloca ptr, align 8
  %member_exp = alloca ptr, align 8
  %self = alloca ptr, align 8
  %struct_class = alloca ptr, align 8
  %this_param = alloca ptr, align 8
  %super_id = alloca ptr, align 8
  %tmp_it = alloca ptr, align 8
  %call_arg = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %call_exp, align 8
  store ptr null, ptr %func, align 8
  %4 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Array_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Array_LLVMValueRef__constructor(ptr %4, i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64))
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i32 0, i32 2
  store i64 0, ptr %memberidx1, align 4
  store ptr %4, ptr %args_value, align 8
  %6 = load ptr, ptr %call_exp, align 8
  %memberidx2 = getelementptr inbounds %CallExpression, ptr %6, i32 0, i32 4
  %7 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %7, i32 0, i32 2
  %8 = load i64, ptr %memberidx3, align 4
  %9 = icmp eq i64 %8, 13
  br i1 %9, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %10 = load ptr, ptr %call_exp, align 8
  %memberidx4 = getelementptr inbounds %CallExpression, ptr %10, i32 0, i32 4
  %11 = load ptr, ptr %memberidx4, align 8
  store ptr %11, ptr %member_exp, align 8
  %12 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %CodeGen, ptr %12, i32 0, i32 4
  %13 = load ptr, ptr %memberidx5, align 8
  %14 = load ptr, ptr %member_exp, align 8
  %memberidx6 = getelementptr inbounds %MemberExpression, ptr %14, i32 0, i32 5
  %15 = load ptr, ptr %memberidx6, align 8
  %16 = call ptr @get_method(ptr %13, ptr %15)
  %memberidx7 = getelementptr inbounds %ClassMethod, ptr %16, i32 0, i32 1
  %17 = load i1, ptr %memberidx7, align 1
  %18 = xor i1 %17, true
  br i1 %18, label %if.entry8, label %else9

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else, %ifend10
  %19 = load ptr, ptr %func, align 8
  %20 = icmp eq ptr %19, null
  br i1 %20, label %if.entry14, label %else15

if.entry8:                                        ; preds = %if.entry
  %21 = load ptr, ptr %this, align 8
  %22 = load ptr, ptr %member_exp, align 8
  %memberidx11 = getelementptr inbounds %MemberExpression, ptr %22, i32 0, i32 5
  %23 = load ptr, ptr %memberidx11, align 8
  %memberidx12 = getelementptr inbounds %PropId, ptr %23, i32 0, i32 1
  %24 = load ptr, ptr %memberidx12, align 8
  %25 = call ptr @CodeGen_get_or_codegen_class_from_typeid(ptr %21, ptr %24)
  store ptr %25, ptr %struct_class, align 8
  %26 = load ptr, ptr %this, align 8
  %27 = load ptr, ptr %builder, align 8
  %28 = load ptr, ptr %member_exp, align 8
  %memberidx13 = getelementptr inbounds %MemberExpression, ptr %28, i32 0, i32 4
  %29 = load ptr, ptr %memberidx13, align 8
  %30 = call ptr @CodeGen_codegen_expression(ptr %26, ptr %27, ptr %29)
  store ptr %30, ptr %self, align 8
  %31 = load ptr, ptr %this, align 8
  %32 = load ptr, ptr %builder, align 8
  %33 = load ptr, ptr %member_exp, align 8
  %34 = load ptr, ptr %self, align 8
  %35 = call ptr @CodeGen_codegen_member_exp(ptr %31, ptr %32, ptr %33, ptr %34)
  store ptr %35, ptr %func, align 8
  %36 = load ptr, ptr %args_value, align 8
  %37 = load ptr, ptr %self, align 8
  call void @Array_LLVMValueRef____sl__(ptr %36, ptr %37)
  br label %ifend10

else9:                                            ; preds = %if.entry
  br label %ifend10

ifend10:                                          ; preds = %else9, %if.entry8
  br label %ifend

if.entry14:                                       ; preds = %ifend
  %38 = load ptr, ptr %call_exp, align 8
  %memberidx17 = getelementptr inbounds %CallExpression, ptr %38, i32 0, i32 4
  %39 = load ptr, ptr %memberidx17, align 8
  %memberidx18 = getelementptr inbounds %Expression, ptr %39, i32 0, i32 2
  %40 = load i64, ptr %memberidx18, align 4
  %41 = icmp eq i64 %40, 8
  br i1 %41, label %if.entry19, label %else20

else15:                                           ; preds = %ifend
  br label %ifend16

ifend16:                                          ; preds = %else15, %ifend21
  br label %for.entry

if.entry19:                                       ; preds = %if.entry14
  %42 = load ptr, ptr %call_exp, align 8
  %memberidx22 = getelementptr inbounds %CallExpression, ptr %42, i32 0, i32 4
  %43 = load ptr, ptr %memberidx22, align 8
  %memberidx23 = getelementptr inbounds %VarAccessExpression, ptr %43, i32 0, i32 4
  %44 = load ptr, ptr %memberidx23, align 8
  store ptr %44, ptr %super_id, align 8
  %45 = load ptr, ptr %this, align 8
  %memberidx24 = getelementptr inbounds %CodeGen, ptr %45, i32 0, i32 10
  %46 = load ptr, ptr %memberidx24, align 8
  %47 = load ptr, ptr %super_id, align 8
  %48 = call ptr @create_var_key(ptr %47)
  %49 = call ptr @Map_string_LLVMValueRef____getitem__(ptr %46, ptr %48)
  store ptr %49, ptr %this_param, align 8
  %50 = load ptr, ptr %this_param, align 8
  %51 = icmp ne ptr %50, null
  br i1 %51, label %if.entry25, label %else26

else20:                                           ; preds = %if.entry14
  br label %ifend21

ifend21:                                          ; preds = %else20, %ifend27
  %52 = load ptr, ptr %this, align 8
  %53 = load ptr, ptr %builder, align 8
  %54 = load ptr, ptr %call_exp, align 8
  %memberidx28 = getelementptr inbounds %CallExpression, ptr %54, i32 0, i32 4
  %55 = load ptr, ptr %memberidx28, align 8
  %56 = call ptr @CodeGen_codegen_expression(ptr %52, ptr %53, ptr %55)
  store ptr %56, ptr %func, align 8
  br label %ifend16

if.entry25:                                       ; preds = %if.entry19
  %57 = load ptr, ptr %args_value, align 8
  %58 = load ptr, ptr %this_param, align 8
  call void @Array_LLVMValueRef____sl__(ptr %57, ptr %58)
  br label %ifend27

else26:                                           ; preds = %if.entry19
  br label %ifend27

ifend27:                                          ; preds = %else26, %if.entry25
  br label %ifend21

for.entry:                                        ; preds = %ifend16
  %59 = load ptr, ptr %call_exp, align 8
  %memberidx29 = getelementptr inbounds %CallExpression, ptr %59, i32 0, i32 5
  %60 = load ptr, ptr %memberidx29, align 8
  %61 = call ptr @Array_Expression____iter__(ptr %60)
  store ptr %61, ptr %tmp_it, align 8
  %62 = load ptr, ptr %tmp_it, align 8
  %63 = call ptr @ArrayIterator_Expression__next(ptr %62)
  store ptr %63, ptr %call_arg, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %64 = load ptr, ptr %tmp_it, align 8
  %memberidx30 = getelementptr inbounds %ArrayIterator_Expression_, ptr %64, i32 0, i32 0
  %65 = load i1, ptr %memberidx30, align 1
  %66 = xor i1 %65, true
  br i1 %66, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %67 = load ptr, ptr %args_value, align 8
  %68 = load ptr, ptr %this, align 8
  %69 = load ptr, ptr %builder, align 8
  %70 = load ptr, ptr %call_arg, align 8
  %71 = call ptr @CodeGen_codegen_expression(ptr %68, ptr %69, ptr %70)
  call void @Array_LLVMValueRef____sl__(ptr %67, ptr %71)
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %72 = load ptr, ptr %tmp_it, align 8
  %73 = call ptr @ArrayIterator_Expression__next(ptr %72)
  store ptr %73, ptr %call_arg, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %74 = load ptr, ptr %tmp_it, align 8
  tail call void @free(ptr %74)
  %75 = load ptr, ptr %builder, align 8
  %76 = load ptr, ptr %this, align 8
  %77 = load ptr, ptr %call_exp, align 8
  %memberidx31 = getelementptr inbounds %CallExpression, ptr %77, i32 0, i32 4
  %78 = load ptr, ptr %memberidx31, align 8
  %memberidx32 = getelementptr inbounds %Expression, ptr %78, i32 0, i32 3
  %79 = load ptr, ptr %memberidx32, align 8
  %80 = call ptr @CodeGen_codegen_type(ptr %76, ptr %79, i1 false)
  %81 = load ptr, ptr %func, align 8
  %82 = load ptr, ptr %args_value, align 8
  %memberidx33 = getelementptr inbounds %Array_LLVMValueRef_, ptr %82, i32 0, i32 1
  %83 = load ptr, ptr %memberidx33, align 8
  %84 = load ptr, ptr %args_value, align 8
  %memberidx34 = getelementptr inbounds %Array_LLVMValueRef_, ptr %84, i32 0, i32 2
  %85 = load i64, ptr %memberidx34, align 4
  %86 = call ptr @LLVMBuildCall2(ptr %75, ptr %80, ptr %81, ptr %83, i64 %85, ptr @315)
  ret ptr %86
}

define ptr @CodeGen_codegen_realloc_call(ptr %0, ptr %1, ptr %2) {
  %args = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %i8_ptr_ty = alloca ptr, align 8
  %realloc = alloca ptr, align 8
  %arg_types = alloca [2 x ptr], align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %args, align 8
  %4 = call ptr @LLVMInt8Type()
  %5 = call ptr @LLVMPointerType(ptr %4, i64 0)
  store ptr %5, ptr %i8_ptr_ty, align 8
  %6 = getelementptr inbounds [2 x ptr], ptr %arg_types, i64 0, i64 0
  %7 = load ptr, ptr %i8_ptr_ty, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr inbounds ptr, ptr %6, i64 1
  %9 = load i64, ptr @ARCH_WORD_SIZE, align 4
  %10 = call ptr @LLVMIntType(i64 %9)
  store ptr %10, ptr %8, align 8
  %11 = getelementptr inbounds ptr, ptr %8, i64 1
  %12 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %12, i32 0, i32 0
  %13 = load ptr, ptr %memberidx, align 8
  %14 = call ptr @string_from_bytes(ptr @527, i64 7)
  %15 = getelementptr inbounds [2 x ptr], ptr %arg_types, i64 0, i64 0
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr inbounds [2 x ptr], ptr %arg_types, i64 0, i64 0
  %18 = load ptr, ptr %i8_ptr_ty, align 8
  %19 = call ptr @get_intrinsic(ptr %13, ptr %14, ptr %17, i64 2, ptr %18, i1 false)
  store ptr %19, ptr %realloc, align 8
  %20 = load ptr, ptr %builder, align 8
  %21 = load ptr, ptr %realloc, align 8
  %memberidx1 = getelementptr inbounds %IntrinsicResult, ptr %21, i32 0, i32 1
  %22 = load ptr, ptr %memberidx1, align 8
  %23 = load ptr, ptr %realloc, align 8
  %memberidx2 = getelementptr inbounds %IntrinsicResult, ptr %23, i32 0, i32 0
  %24 = load ptr, ptr %memberidx2, align 8
  %25 = load ptr, ptr %args, align 8
  %26 = call ptr @LLVMBuildCall2(ptr %20, ptr %22, ptr %24, ptr %25, i64 2, ptr @315)
  ret ptr %26
}

define ptr @CodeGen_codegen_null(ptr %0, ptr %1) {
  %null_exp = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %null_exp, align 8
  %3 = load ptr, ptr %this, align 8
  %4 = load ptr, ptr %null_exp, align 8
  %memberidx = getelementptr inbounds %Expression, ptr %4, i32 0, i32 3
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @CodeGen_codegen_type(ptr %3, ptr %5, i1 true)
  %7 = call ptr @LLVMConstNull(ptr %6)
  ret ptr %7
}

define ptr @CodeGen_codegen_unary_exp(ptr %0, ptr %1, ptr %2) {
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %unary_exp = alloca ptr, align 8
  %val = alloca ptr, align 8
  %op = alloca i64, align 8
  %exp = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %incr_value = alloca i64, align 8
  %new_value = alloca ptr, align 8
  %alloc_ty = alloca ptr, align 8
  %indices = alloca [1 x ptr], align 8
  %incr_amt = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %unary_exp, align 8
  %4 = load ptr, ptr %unary_exp, align 8
  %memberidx = getelementptr inbounds %UnaryExpression, ptr %4, i32 0, i32 4
  %5 = load i64, ptr %memberidx, align 4
  store i64 %5, ptr %op, align 4
  %6 = load ptr, ptr %unary_exp, align 8
  %memberidx1 = getelementptr inbounds %UnaryExpression, ptr %6, i32 0, i32 5
  %7 = load ptr, ptr %memberidx1, align 8
  store ptr %7, ptr %exp, align 8
  %8 = load ptr, ptr %this, align 8
  %9 = load ptr, ptr %builder, align 8
  %10 = load ptr, ptr %exp, align 8
  %11 = call ptr @CodeGen_codegen_expression(ptr %8, ptr %9, ptr %10)
  store ptr %11, ptr %val, align 8
  %12 = load i64, ptr %op, align 4
  %13 = icmp eq i64 %12, 1
  br i1 %13, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %14 = load ptr, ptr %exp, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %14, i32 0, i32 3
  %15 = load ptr, ptr %memberidx2, align 8
  %16 = call i1 @is_object(ptr %15)
  br i1 %16, label %if.entry3, label %else4

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %17 = load i64, ptr %op, align 4
  %18 = icmp eq i64 %17, 6
  br i1 %18, label %if.entry7, label %else8

if.entry3:                                        ; preds = %if.entry
  %19 = load ptr, ptr %this, align 8
  %20 = load ptr, ptr %builder, align 8
  %21 = load ptr, ptr %val, align 8
  %22 = load ptr, ptr %exp, align 8
  %memberidx6 = getelementptr inbounds %Expression, ptr %22, i32 0, i32 3
  %23 = load ptr, ptr %memberidx6, align 8
  %24 = call ptr @CodeGen_codegen_del_call(ptr %19, ptr %20, ptr %21, ptr %23)
  br label %ifend5

else4:                                            ; preds = %if.entry
  br label %ifend5

ifend5:                                           ; preds = %else4, %if.entry3
  %25 = load ptr, ptr %builder, align 8
  %26 = load ptr, ptr %val, align 8
  %27 = call ptr @LLVMBuildFree(ptr %25, ptr %26)
  ret ptr null

if.entry7:                                        ; preds = %ifend
  %28 = load ptr, ptr %exp, align 8
  %memberidx10 = getelementptr inbounds %Expression, ptr %28, i32 0, i32 3
  %29 = load ptr, ptr %memberidx10, align 8
  %30 = call i1 @is_int(ptr %29)
  br i1 %30, label %if.entry11, label %else12

else8:                                            ; preds = %ifend
  br label %ifend9

ifend9:                                           ; preds = %else8, %ifend13
  %31 = load i64, ptr %op, align 4
  %32 = icmp eq i64 %31, 7
  br i1 %32, label %if.entry27, label %else28

if.entry11:                                       ; preds = %if.entry7
  %33 = load ptr, ptr %exp, align 8
  %memberidx14 = getelementptr inbounds %Expression, ptr %33, i32 0, i32 3
  %34 = load ptr, ptr %memberidx14, align 8
  %memberidx15 = getelementptr inbounds %IntType, ptr %34, i32 0, i32 1
  %35 = load i1, ptr %memberidx15, align 1
  br i1 %35, label %if.entry16, label %else17

else12:                                           ; preds = %if.entry7
  %36 = load ptr, ptr %exp, align 8
  %memberidx23 = getelementptr inbounds %Expression, ptr %36, i32 0, i32 3
  %37 = load ptr, ptr %memberidx23, align 8
  %38 = call i1 @is_float(ptr %37)
  br i1 %38, label %if.entry24, label %else25

ifend13:                                          ; preds = %ifend26
  br label %ifend9

if.entry16:                                       ; preds = %if.entry11
  %39 = load ptr, ptr %val, align 8
  %40 = call i1 @LLVMIsConstant(ptr %39)
  br i1 %40, label %true_block, label %false_block

else17:                                           ; preds = %if.entry11
  br label %ifend18

ifend18:                                          ; preds = %else17
  %41 = load ptr, ptr %val, align 8
  %42 = call i1 @LLVMIsConstant(ptr %41)
  br i1 %42, label %true_block19, label %false_block20

true_block:                                       ; preds = %if.entry16
  %43 = load ptr, ptr %val, align 8
  %44 = call ptr @LLVMConstNSWNeg(ptr %43)
  br label %end

false_block:                                      ; preds = %if.entry16
  %45 = load ptr, ptr %builder, align 8
  %46 = load ptr, ptr %val, align 8
  %47 = call ptr @LLVMBuildNSWNeg(ptr %45, ptr %46, ptr @315)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %44, %true_block ], [ %47, %false_block ]
  ret ptr %ternary

true_block19:                                     ; preds = %ifend18
  %48 = load ptr, ptr %val, align 8
  %49 = call ptr @LLVMConstNUWNeg(ptr %48)
  br label %end21

false_block20:                                    ; preds = %ifend18
  %50 = load ptr, ptr %builder, align 8
  %51 = load ptr, ptr %val, align 8
  %52 = call ptr @LLVMBuildNUWNeg(ptr %50, ptr %51, ptr @315)
  br label %end21

end21:                                            ; preds = %false_block20, %true_block19
  %ternary22 = phi ptr [ %49, %true_block19 ], [ %52, %false_block20 ]
  ret ptr %ternary22

if.entry24:                                       ; preds = %else12
  %53 = load ptr, ptr %builder, align 8
  %54 = load ptr, ptr %val, align 8
  %55 = call ptr @LLVMBuildFNeg(ptr %53, ptr %54, ptr @315)
  ret ptr %55

else25:                                           ; preds = %else12
  br label %ifend26

ifend26:                                          ; preds = %else25
  br label %ifend13

if.entry27:                                       ; preds = %ifend9
  %56 = load ptr, ptr %val, align 8
  %57 = call i1 @LLVMIsConstant(ptr %56)
  br i1 %57, label %true_block30, label %false_block31

else28:                                           ; preds = %ifend9
  br label %ifend29

ifend29:                                          ; preds = %else28
  %58 = load i64, ptr %op, align 4
  %59 = icmp sge i64 %58, 2
  %60 = load i64, ptr %op, align 4
  %61 = icmp sle i64 %60, 5
  %62 = and i1 %59, %61
  %63 = load i64, ptr %op, align 4
  %64 = icmp eq i64 %63, 8
  %65 = or i1 %62, %64
  br i1 %65, label %if.entry34, label %else35

true_block30:                                     ; preds = %if.entry27
  %66 = load ptr, ptr %val, align 8
  %67 = call ptr @LLVMConstNot(ptr %66)
  br label %end32

false_block31:                                    ; preds = %if.entry27
  %68 = load ptr, ptr %builder, align 8
  %69 = load ptr, ptr %val, align 8
  %70 = call ptr @LLVMBuildNot(ptr %68, ptr %69, ptr @315)
  br label %end32

end32:                                            ; preds = %false_block31, %true_block30
  %ternary33 = phi ptr [ %67, %true_block30 ], [ %70, %false_block31 ]
  ret ptr %ternary33

if.entry34:                                       ; preds = %ifend29
  %71 = load ptr, ptr %this, align 8
  %72 = load ptr, ptr %builder, align 8
  %73 = load ptr, ptr %exp, align 8
  %74 = call ptr @CodeGen_get_expr_mem(ptr %71, ptr %72, ptr %73)
  store ptr %74, ptr %ptr, align 8
  %75 = load i64, ptr %op, align 4
  %76 = icmp eq i64 %75, 8
  br i1 %76, label %if.entry37, label %else38

else35:                                           ; preds = %ifend29
  br label %ifend36

ifend36:                                          ; preds = %else35
  %77 = load ptr, ptr %val, align 8
  ret ptr %77

if.entry37:                                       ; preds = %if.entry34
  %78 = load ptr, ptr %ptr, align 8
  ret ptr %78

else38:                                           ; preds = %if.entry34
  br label %ifend39

ifend39:                                          ; preds = %else38
  %79 = load ptr, ptr %this, align 8
  %80 = load ptr, ptr %exp, align 8
  %memberidx40 = getelementptr inbounds %Expression, ptr %80, i32 0, i32 3
  %81 = load ptr, ptr %memberidx40, align 8
  %82 = call ptr @CodeGen_codegen_type(ptr %79, ptr %81, i1 true)
  store ptr %82, ptr %alloc_ty, align 8
  %83 = load i64, ptr %op, align 4
  %84 = icmp eq i64 %83, 2
  %85 = load i64, ptr %op, align 4
  %86 = icmp eq i64 %85, 4
  %87 = or i1 %84, %86
  br i1 %87, label %true_block41, label %false_block42

true_block41:                                     ; preds = %ifend39
  br label %end43

false_block42:                                    ; preds = %ifend39
  br label %end43

end43:                                            ; preds = %false_block42, %true_block41
  %ternary44 = phi i64 [ 1, %true_block41 ], [ -1, %false_block42 ]
  store i64 %ternary44, ptr %incr_value, align 4
  store ptr null, ptr %new_value, align 8
  %88 = load ptr, ptr %exp, align 8
  %memberidx45 = getelementptr inbounds %Expression, ptr %88, i32 0, i32 3
  %89 = load ptr, ptr %memberidx45, align 8
  %90 = call i1 @is_pointer(ptr %89)
  br i1 %90, label %if.entry46, label %else47

if.entry46:                                       ; preds = %end43
  %91 = load ptr, ptr %this, align 8
  %92 = load ptr, ptr %exp, align 8
  %memberidx49 = getelementptr inbounds %Expression, ptr %92, i32 0, i32 3
  %93 = load ptr, ptr %memberidx49, align 8
  %memberidx50 = getelementptr inbounds %PointerType, ptr %93, i32 0, i32 1
  %94 = load ptr, ptr %memberidx50, align 8
  %95 = call ptr @CodeGen_codegen_type(ptr %91, ptr %94, i1 true)
  store ptr %95, ptr %alloc_ty, align 8
  %96 = getelementptr inbounds [1 x ptr], ptr %indices, i64 0, i64 0
  %97 = call ptr @LLVMInt32Type()
  %98 = load i64, ptr %incr_value, align 4
  %99 = call ptr @LLVMConstInt(ptr %97, i64 %98, i1 true)
  store ptr %99, ptr %96, align 8
  %100 = getelementptr inbounds ptr, ptr %96, i64 1
  %101 = load ptr, ptr %builder, align 8
  %102 = load ptr, ptr %alloc_ty, align 8
  %103 = load ptr, ptr %val, align 8
  %104 = getelementptr inbounds [1 x ptr], ptr %indices, i64 0, i64 0
  %105 = load ptr, ptr %104, align 8
  %106 = getelementptr inbounds [1 x ptr], ptr %indices, i64 0, i64 0
  %107 = call ptr @LLVMBuildInBoundsGEP2(ptr %101, ptr %102, ptr %103, ptr %106, i64 1, ptr @601)
  store ptr %107, ptr %new_value, align 8
  br label %ifend48

else47:                                           ; preds = %end43
  %108 = load ptr, ptr %exp, align 8
  %memberidx51 = getelementptr inbounds %Expression, ptr %108, i32 0, i32 3
  %109 = load ptr, ptr %memberidx51, align 8
  %110 = call i1 @is_numeric(ptr %109)
  br i1 %110, label %if.entry52, label %else53

ifend48:                                          ; preds = %ifend54, %if.entry46
  %111 = load ptr, ptr %builder, align 8
  %112 = load ptr, ptr %new_value, align 8
  %113 = load ptr, ptr %ptr, align 8
  %114 = call ptr @LLVMBuildStore(ptr %111, ptr %112, ptr %113)
  %115 = load i64, ptr %op, align 4
  %116 = icmp sge i64 %115, 3
  br i1 %116, label %true_block60, label %false_block61

if.entry52:                                       ; preds = %else47
  %117 = load ptr, ptr %exp, align 8
  %memberidx58 = getelementptr inbounds %Expression, ptr %117, i32 0, i32 3
  %118 = load ptr, ptr %memberidx58, align 8
  %119 = call i1 @is_int(ptr %118)
  br i1 %119, label %true_block55, label %false_block56

else53:                                           ; preds = %else47
  br label %ifend54

ifend54:                                          ; preds = %else53, %end57
  br label %ifend48

true_block55:                                     ; preds = %if.entry52
  %120 = load ptr, ptr %alloc_ty, align 8
  %121 = load i64, ptr %incr_value, align 4
  %122 = call ptr @LLVMConstInt(ptr %120, i64 %121, i1 false)
  br label %end57

false_block56:                                    ; preds = %if.entry52
  %123 = load ptr, ptr %alloc_ty, align 8
  %124 = load i64, ptr %incr_value, align 4
  %125 = sitofp i64 %124 to double
  %126 = fmul double %125, 1.000000e+00
  %127 = call ptr @LLVMConstReal(ptr %123, double %126)
  br label %end57

end57:                                            ; preds = %false_block56, %true_block55
  %ternary59 = phi ptr [ %122, %true_block55 ], [ %127, %false_block56 ]
  store ptr %ternary59, ptr %incr_amt, align 8
  %128 = load ptr, ptr %builder, align 8
  %129 = load ptr, ptr %val, align 8
  %130 = load ptr, ptr %incr_amt, align 8
  %131 = call ptr @LLVMBuildNSWAdd(ptr %128, ptr %129, ptr %130, ptr @315)
  store ptr %131, ptr %new_value, align 8
  br label %ifend54

true_block60:                                     ; preds = %ifend48
  %132 = load ptr, ptr %val, align 8
  br label %end62

false_block61:                                    ; preds = %ifend48
  %133 = load ptr, ptr %new_value, align 8
  br label %end62

end62:                                            ; preds = %false_block61, %true_block60
  %ternary63 = phi ptr [ %132, %true_block60 ], [ %133, %false_block61 ]
  ret ptr %ternary63
}

define ptr @CodeGen_codegen_ternary_exp(ptr %0, ptr %1, ptr %2) {
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %ternary_exp = alloca ptr, align 8
  %true_block = alloca ptr, align 8
  %false_block = alloca ptr, align 8
  %cond = alloca ptr, align 8
  %is_true = alloca ptr, align 8
  %blocks = alloca [2 x ptr], align 8
  %incomming_vals = alloca [2 x ptr], align 8
  %phi_node = alloca ptr, align 8
  %is_false = alloca ptr, align 8
  %end = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %ternary_exp, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = call ptr @LLVMAppendBasicBlock(ptr %5, ptr @603)
  store ptr %6, ptr %true_block, align 8
  %7 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %memberidx1, align 8
  %9 = call ptr @LLVMAppendBasicBlock(ptr %8, ptr @604)
  store ptr %9, ptr %false_block, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %CodeGen, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %memberidx2, align 8
  %12 = call ptr @LLVMAppendBasicBlock(ptr %11, ptr @605)
  store ptr %12, ptr %end, align 8
  %13 = load ptr, ptr %this, align 8
  %14 = load ptr, ptr %builder, align 8
  %15 = load ptr, ptr %ternary_exp, align 8
  %memberidx3 = getelementptr inbounds %TernaryExpression, ptr %15, i32 0, i32 4
  %16 = load ptr, ptr %memberidx3, align 8
  %17 = call ptr @CodeGen_codegen_expression(ptr %13, ptr %14, ptr %16)
  store ptr %17, ptr %cond, align 8
  %18 = load ptr, ptr %builder, align 8
  %19 = load ptr, ptr %cond, align 8
  %20 = load ptr, ptr %true_block, align 8
  %21 = load ptr, ptr %false_block, align 8
  %22 = call ptr @LLVMBuildCondBr(ptr %18, ptr %19, ptr %20, ptr %21)
  %23 = load ptr, ptr %builder, align 8
  %24 = load ptr, ptr %true_block, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %23, ptr %24)
  %25 = load ptr, ptr %this, align 8
  %26 = load ptr, ptr %builder, align 8
  %27 = load ptr, ptr %ternary_exp, align 8
  %memberidx4 = getelementptr inbounds %TernaryExpression, ptr %27, i32 0, i32 5
  %28 = load ptr, ptr %memberidx4, align 8
  %29 = call ptr @CodeGen_codegen_expression(ptr %25, ptr %26, ptr %28)
  store ptr %29, ptr %is_true, align 8
  %30 = load ptr, ptr %builder, align 8
  %31 = load ptr, ptr %end, align 8
  %32 = call ptr @LLVMBuildBr(ptr %30, ptr %31)
  %33 = load ptr, ptr %builder, align 8
  %34 = load ptr, ptr %false_block, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %33, ptr %34)
  %35 = load ptr, ptr %this, align 8
  %36 = load ptr, ptr %builder, align 8
  %37 = load ptr, ptr %ternary_exp, align 8
  %memberidx5 = getelementptr inbounds %TernaryExpression, ptr %37, i32 0, i32 6
  %38 = load ptr, ptr %memberidx5, align 8
  %39 = call ptr @CodeGen_codegen_expression(ptr %35, ptr %36, ptr %38)
  store ptr %39, ptr %is_false, align 8
  %40 = load ptr, ptr %builder, align 8
  %41 = load ptr, ptr %end, align 8
  %42 = call ptr @LLVMBuildBr(ptr %40, ptr %41)
  %43 = load ptr, ptr %builder, align 8
  %44 = load ptr, ptr %end, align 8
  call void @LLVMPositionBuilderAtEnd(ptr %43, ptr %44)
  %45 = load ptr, ptr %builder, align 8
  %46 = load ptr, ptr %this, align 8
  %47 = load ptr, ptr %ternary_exp, align 8
  %memberidx6 = getelementptr inbounds %TernaryExpression, ptr %47, i32 0, i32 5
  %48 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %Expression, ptr %48, i32 0, i32 3
  %49 = load ptr, ptr %memberidx7, align 8
  %50 = call ptr @CodeGen_codegen_type(ptr %46, ptr %49, i1 true)
  %51 = call ptr @LLVMBuildPhi(ptr %45, ptr %50, ptr @606)
  store ptr %51, ptr %phi_node, align 8
  %52 = getelementptr inbounds [2 x ptr], ptr %incomming_vals, i64 0, i64 0
  %53 = load ptr, ptr %is_true, align 8
  store ptr %53, ptr %52, align 8
  %54 = getelementptr inbounds ptr, ptr %52, i64 1
  %55 = load ptr, ptr %is_false, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr inbounds ptr, ptr %54, i64 1
  %57 = getelementptr inbounds [2 x ptr], ptr %blocks, i64 0, i64 0
  %58 = load ptr, ptr %true_block, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr inbounds ptr, ptr %57, i64 1
  %60 = load ptr, ptr %false_block, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr inbounds ptr, ptr %59, i64 1
  %62 = load ptr, ptr %phi_node, align 8
  %63 = getelementptr inbounds [2 x ptr], ptr %incomming_vals, i64 0, i64 0
  %64 = load ptr, ptr %63, align 8
  %65 = getelementptr inbounds [2 x ptr], ptr %incomming_vals, i64 0, i64 0
  %66 = getelementptr inbounds [2 x ptr], ptr %blocks, i64 0, i64 0
  %67 = load ptr, ptr %66, align 8
  %68 = getelementptr inbounds [2 x ptr], ptr %blocks, i64 0, i64 0
  call void @LLVMAddIncoming(ptr %62, ptr %65, ptr %68, i64 2)
  %69 = load ptr, ptr %phi_node, align 8
  ret ptr %69
}

define ptr @CodeGen_codegen_new_exp(ptr %0, ptr %1, ptr %2) {
  %new_expr = alloca ptr, align 8
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %llvm_type = alloca ptr, align 8
  %alloc_ty = alloca ptr, align 8
  %size = alloca ptr, align 8
  %args = alloca ptr, align 8
  %args_length = alloca i64, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %new_expr, align 8
  store ptr null, ptr %ptr, align 8
  %4 = load ptr, ptr %new_expr, align 8
  %memberidx = getelementptr inbounds %NewExpression, ptr %4, i32 0, i32 6
  %5 = load ptr, ptr %memberidx, align 8
  store ptr %5, ptr %alloc_ty, align 8
  store ptr null, ptr %llvm_type, align 8
  %6 = load ptr, ptr %new_expr, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %6, i32 0, i32 3
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = call i1 @is_pointer(ptr %7)
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %9 = load ptr, ptr %this, align 8
  %10 = load ptr, ptr %alloc_ty, align 8
  %11 = call ptr @CodeGen_codegen_type(ptr %9, ptr %10, i1 true)
  store ptr %11, ptr %llvm_type, align 8
  %12 = load ptr, ptr %this, align 8
  %13 = load ptr, ptr %builder, align 8
  %14 = load ptr, ptr %new_expr, align 8
  %memberidx2 = getelementptr inbounds %NewExpression, ptr %14, i32 0, i32 4
  %15 = load ptr, ptr %memberidx2, align 8
  %16 = call ptr @Array_Expression____getitem__(ptr %15, i64 0)
  %17 = call ptr @CodeGen_codegen_expression(ptr %12, ptr %13, ptr %16)
  store ptr %17, ptr %size, align 8
  %18 = load ptr, ptr %new_expr, align 8
  %memberidx3 = getelementptr inbounds %NewExpression, ptr %18, i32 0, i32 5
  %19 = load i1, ptr %memberidx3, align 1
  br i1 %19, label %if.entry4, label %else5

else:                                             ; preds = %3
  %20 = load ptr, ptr %alloc_ty, align 8
  %21 = call i1 @is_object(ptr %20)
  br i1 %21, label %if.entry7, label %else8

ifend:                                            ; preds = %ifend9, %ifend6
  %22 = load ptr, ptr %ptr, align 8
  ret ptr %22

if.entry4:                                        ; preds = %if.entry
  %23 = load ptr, ptr %builder, align 8
  %24 = load ptr, ptr %llvm_type, align 8
  %25 = load ptr, ptr %size, align 8
  %26 = call ptr @LLVMBuildArrayMalloc(ptr %23, ptr %24, ptr %25, ptr @315)
  store ptr %26, ptr %ptr, align 8
  br label %ifend6

else5:                                            ; preds = %if.entry
  %27 = load ptr, ptr %builder, align 8
  %28 = load ptr, ptr %llvm_type, align 8
  %29 = load ptr, ptr %size, align 8
  %30 = call ptr @LLVMBuildArrayAlloca(ptr %27, ptr %28, ptr %29, ptr @315)
  store ptr %30, ptr %ptr, align 8
  br label %ifend6

ifend6:                                           ; preds = %else5, %if.entry4
  br label %ifend

if.entry7:                                        ; preds = %else
  %31 = load ptr, ptr %new_expr, align 8
  %memberidx10 = getelementptr inbounds %NewExpression, ptr %31, i32 0, i32 4
  %32 = load ptr, ptr %memberidx10, align 8
  %memberidx11 = getelementptr inbounds %Array_Expression_, ptr %32, i32 0, i32 2
  %33 = load i64, ptr %memberidx11, align 4
  %34 = add nuw i64 %33, 1
  store i64 %34, ptr %args_length, align 4
  %35 = load i64, ptr %args_length, align 4
  %36 = alloca ptr, i64 %35, align 8
  store ptr %36, ptr %args, align 8
  %37 = load ptr, ptr %this, align 8
  %38 = load ptr, ptr %alloc_ty, align 8
  %39 = call ptr @CodeGen_codegen_type(ptr %37, ptr %38, i1 false)
  store ptr %39, ptr %llvm_type, align 8
  %40 = load ptr, ptr %new_expr, align 8
  %memberidx12 = getelementptr inbounds %NewExpression, ptr %40, i32 0, i32 5
  %41 = load i1, ptr %memberidx12, align 1
  br i1 %41, label %if.entry13, label %else14

else8:                                            ; preds = %else
  br label %ifend9

ifend9:                                           ; preds = %else8, %ifend15
  br label %ifend

if.entry13:                                       ; preds = %if.entry7
  %42 = load ptr, ptr %builder, align 8
  %43 = load ptr, ptr %llvm_type, align 8
  %44 = call ptr @LLVMBuildMalloc(ptr %42, ptr %43, ptr @315)
  store ptr %44, ptr %ptr, align 8
  br label %ifend15

else14:                                           ; preds = %if.entry7
  %45 = load ptr, ptr %builder, align 8
  %46 = load ptr, ptr %llvm_type, align 8
  %47 = call ptr @LLVMBuildAlloca(ptr %45, ptr %46, ptr @315)
  store ptr %47, ptr %ptr, align 8
  br label %ifend15

ifend15:                                          ; preds = %else14, %if.entry13
  %48 = load ptr, ptr %args, align 8
  %49 = getelementptr inbounds ptr, ptr %48, i64 0
  %50 = load ptr, ptr %ptr, align 8
  store ptr %50, ptr %49, align 8
  %51 = load ptr, ptr %this, align 8
  %52 = load ptr, ptr %builder, align 8
  %53 = load ptr, ptr %args, align 8
  %54 = load ptr, ptr %new_expr, align 8
  %memberidx16 = getelementptr inbounds %NewExpression, ptr %54, i32 0, i32 4
  %55 = load ptr, ptr %memberidx16, align 8
  call void @CodeGen_evaluate_expression_list(ptr %51, ptr %52, ptr %53, i64 1, ptr %55)
  %56 = load ptr, ptr %this, align 8
  %57 = load ptr, ptr %builder, align 8
  %58 = load ptr, ptr %alloc_ty, align 8
  %59 = load ptr, ptr %args, align 8
  %60 = load i64, ptr %args_length, align 4
  call void @CodeGen_build_constructor_call(ptr %56, ptr %57, ptr %58, ptr %59, i64 %60)
  br label %ifend9
}

define ptr @CodeGen_codegen_intrinsic_exp(ptr %0, ptr %1, ptr %2) {
  %this = alloca ptr, align 8
  %builder = alloca ptr, align 8
  %intrinsic_call_exp = alloca ptr, align 8
  %args = alloca ptr, align 8
  %arg0_pointee_size = alloca ptr, align 8
  %arg0_align = alloca i64, align 8
  %arg0_pointee_ty = alloca ptr, align 8
  %intrinsic_type = alloca i64, align 8
  %arg1_align = alloca i64, align 8
  %cbuff = alloca ptr, align 8
  %value = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %builder, align 8
  store ptr %2, ptr %intrinsic_call_exp, align 8
  %4 = load ptr, ptr %intrinsic_call_exp, align 8
  %memberidx = getelementptr inbounds %IntrinsicCall, ptr %4, i32 0, i32 4
  %5 = load i64, ptr %memberidx, align 4
  store i64 %5, ptr %intrinsic_type, align 4
  %6 = load i64, ptr %intrinsic_type, align 4
  %7 = icmp slt i64 %6, 3
  br i1 %7, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %8 = load ptr, ptr %this, align 8
  %9 = load ptr, ptr %builder, align 8
  %10 = load ptr, ptr %this, align 8
  %11 = load ptr, ptr %builder, align 8
  %12 = load ptr, ptr %intrinsic_call_exp, align 8
  %memberidx1 = getelementptr inbounds %IntrinsicCall, ptr %12, i32 0, i32 5
  %13 = load ptr, ptr %memberidx1, align 8
  %14 = call ptr @Array_Expression____getitem__(ptr %13, i64 0)
  %15 = call ptr @CodeGen_codegen_expression(ptr %10, ptr %11, ptr %14)
  %16 = call ptr @CodeGen_codegen_string_to_cstring(ptr %8, ptr %9, ptr %15)
  store ptr %16, ptr %cbuff, align 8
  store ptr null, ptr %value, align 8
  %17 = load i64, ptr %intrinsic_type, align 4
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %if.entry2, label %else3

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %19 = load ptr, ptr %intrinsic_call_exp, align 8
  %memberidx11 = getelementptr inbounds %IntrinsicCall, ptr %19, i32 0, i32 5
  %20 = load ptr, ptr %memberidx11, align 8
  %memberidx12 = getelementptr inbounds %Array_Expression_, ptr %20, i32 0, i32 2
  %21 = load i64, ptr %memberidx12, align 4
  %22 = alloca ptr, i64 %21, align 8
  store ptr %22, ptr %args, align 8
  %23 = load ptr, ptr %this, align 8
  %24 = load ptr, ptr %builder, align 8
  %25 = load ptr, ptr %args, align 8
  %26 = load ptr, ptr %intrinsic_call_exp, align 8
  %memberidx13 = getelementptr inbounds %IntrinsicCall, ptr %26, i32 0, i32 5
  %27 = load ptr, ptr %memberidx13, align 8
  call void @CodeGen_evaluate_expression_list(ptr %23, ptr %24, ptr %25, i64 0, ptr %27)
  %28 = load ptr, ptr %intrinsic_call_exp, align 8
  %memberidx14 = getelementptr inbounds %IntrinsicCall, ptr %28, i32 0, i32 5
  %29 = load ptr, ptr %memberidx14, align 8
  %30 = call ptr @Array_Expression____getitem__(ptr %29, i64 0)
  %memberidx15 = getelementptr inbounds %Expression, ptr %30, i32 0, i32 3
  %31 = load ptr, ptr %memberidx15, align 8
  %memberidx16 = getelementptr inbounds %PointerType, ptr %31, i32 0, i32 1
  %32 = load ptr, ptr %memberidx16, align 8
  store ptr %32, ptr %arg0_pointee_ty, align 8
  %33 = load ptr, ptr %this, align 8
  %34 = load ptr, ptr %arg0_pointee_ty, align 8
  %35 = call ptr @CodeGen_codegen_type(ptr %33, ptr %34, i1 true)
  %36 = call ptr @LLVMSizeOf(ptr %35)
  store ptr %36, ptr %arg0_pointee_size, align 8
  %37 = load i64, ptr %intrinsic_type, align 4
  %38 = icmp eq i64 %37, 6
  br i1 %38, label %if.entry17, label %else18

if.entry2:                                        ; preds = %if.entry
  %39 = load ptr, ptr %this, align 8
  %40 = load ptr, ptr %builder, align 8
  %41 = load ptr, ptr %cbuff, align 8
  %42 = call ptr @CodeGen_codegen_atof_call(ptr %39, ptr %40, ptr %41)
  store ptr %42, ptr %value, align 8
  br label %ifend4

else3:                                            ; preds = %if.entry
  br label %ifend4

ifend4:                                           ; preds = %else3, %if.entry2
  %43 = load i64, ptr %intrinsic_type, align 4
  %44 = icmp eq i64 %43, 1
  br i1 %44, label %if.entry5, label %else6

if.entry5:                                        ; preds = %ifend4
  %45 = load ptr, ptr %this, align 8
  %46 = load ptr, ptr %builder, align 8
  %47 = load ptr, ptr %cbuff, align 8
  %48 = call ptr @CodeGen_codegen_atoi_call(ptr %45, ptr %46, ptr %47)
  store ptr %48, ptr %value, align 8
  br label %ifend7

else6:                                            ; preds = %ifend4
  br label %ifend7

ifend7:                                           ; preds = %else6, %if.entry5
  %49 = load i64, ptr %intrinsic_type, align 4
  %50 = icmp eq i64 %49, 2
  br i1 %50, label %if.entry8, label %else9

if.entry8:                                        ; preds = %ifend7
  %51 = load ptr, ptr %this, align 8
  %52 = load ptr, ptr %builder, align 8
  %53 = load ptr, ptr %cbuff, align 8
  %54 = call ptr @CodeGen_codegen_atol_call(ptr %51, ptr %52, ptr %53)
  store ptr %54, ptr %value, align 8
  br label %ifend10

else9:                                            ; preds = %ifend7
  br label %ifend10

ifend10:                                          ; preds = %else9, %if.entry8
  %55 = load ptr, ptr %builder, align 8
  %56 = load ptr, ptr %cbuff, align 8
  %57 = call ptr @LLVMBuildFree(ptr %55, ptr %56)
  %58 = load ptr, ptr %value, align 8
  ret ptr %58

if.entry17:                                       ; preds = %ifend
  %59 = load ptr, ptr %args, align 8
  %60 = getelementptr inbounds ptr, ptr %59, i64 1
  %61 = load ptr, ptr %builder, align 8
  %62 = load ptr, ptr %args, align 8
  %63 = getelementptr inbounds ptr, ptr %62, i64 1
  %64 = load ptr, ptr %63, align 8
  %65 = load ptr, ptr %arg0_pointee_size, align 8
  %66 = call ptr @LLVMBuildMul(ptr %61, ptr %64, ptr %65, ptr @315)
  store ptr %66, ptr %60, align 8
  %67 = load ptr, ptr %this, align 8
  %68 = load ptr, ptr %builder, align 8
  %69 = load ptr, ptr %args, align 8
  %70 = call ptr @CodeGen_codegen_realloc_call(ptr %67, ptr %68, ptr %69)
  ret ptr %70

else18:                                           ; preds = %ifend
  br label %ifend19

ifend19:                                          ; preds = %else18
  %71 = load ptr, ptr %args, align 8
  %72 = getelementptr inbounds ptr, ptr %71, i64 2
  %73 = load ptr, ptr %builder, align 8
  %74 = load ptr, ptr %args, align 8
  %75 = getelementptr inbounds ptr, ptr %74, i64 2
  %76 = load ptr, ptr %75, align 8
  %77 = load ptr, ptr %arg0_pointee_size, align 8
  %78 = call ptr @LLVMBuildMul(ptr %73, ptr %76, ptr %77, ptr @315)
  store ptr %78, ptr %72, align 8
  %79 = load i64, ptr %intrinsic_type, align 4
  %80 = icmp eq i64 %79, 7
  br i1 %80, label %if.entry20, label %else21

if.entry20:                                       ; preds = %ifend19
  %81 = load ptr, ptr %this, align 8
  %82 = load ptr, ptr %builder, align 8
  %83 = load ptr, ptr %args, align 8
  %84 = call ptr @CodeGen_codegen_memcmp_call(ptr %81, ptr %82, ptr %83)
  ret ptr %84

else21:                                           ; preds = %ifend19
  br label %ifend22

ifend22:                                          ; preds = %else21
  %85 = load ptr, ptr %args, align 8
  %86 = getelementptr inbounds ptr, ptr %85, i64 0
  %87 = load ptr, ptr %86, align 8
  %88 = call i64 @LLVMGetAlignment(ptr %87)
  store i64 %88, ptr %arg0_align, align 4
  %89 = load i64, ptr %intrinsic_type, align 4
  %90 = icmp eq i64 %89, 5
  br i1 %90, label %if.entry23, label %else24

if.entry23:                                       ; preds = %ifend22
  %91 = load ptr, ptr %builder, align 8
  %92 = load ptr, ptr %args, align 8
  %93 = getelementptr inbounds ptr, ptr %92, i64 0
  %94 = load ptr, ptr %93, align 8
  %95 = load ptr, ptr %builder, align 8
  %96 = load ptr, ptr %args, align 8
  %97 = getelementptr inbounds ptr, ptr %96, i64 1
  %98 = load ptr, ptr %97, align 8
  %99 = call ptr @LLVMInt8Type()
  %100 = call ptr @LLVMBuildIntCast2(ptr %95, ptr %98, ptr %99, i1 false, ptr @315)
  %101 = load ptr, ptr %args, align 8
  %102 = getelementptr inbounds ptr, ptr %101, i64 2
  %103 = load ptr, ptr %102, align 8
  %104 = load i64, ptr %arg0_align, align 4
  %105 = call ptr @LLVMBuildMemSet(ptr %91, ptr %94, ptr %100, ptr %103, i64 %104)
  ret ptr %105

else24:                                           ; preds = %ifend22
  br label %ifend25

ifend25:                                          ; preds = %else24
  %106 = load ptr, ptr %args, align 8
  %107 = getelementptr inbounds ptr, ptr %106, i64 1
  %108 = load ptr, ptr %107, align 8
  %109 = call i64 @LLVMGetAlignment(ptr %108)
  store i64 %109, ptr %arg1_align, align 4
  %110 = load i64, ptr %intrinsic_type, align 4
  %111 = icmp eq i64 %110, 3
  br i1 %111, label %if.entry26, label %else27

if.entry26:                                       ; preds = %ifend25
  %112 = load ptr, ptr %builder, align 8
  %113 = load ptr, ptr %args, align 8
  %114 = getelementptr inbounds ptr, ptr %113, i64 0
  %115 = load ptr, ptr %114, align 8
  %116 = load i64, ptr %arg0_align, align 4
  %117 = load ptr, ptr %args, align 8
  %118 = getelementptr inbounds ptr, ptr %117, i64 1
  %119 = load ptr, ptr %118, align 8
  %120 = load i64, ptr %arg1_align, align 4
  %121 = load ptr, ptr %args, align 8
  %122 = getelementptr inbounds ptr, ptr %121, i64 2
  %123 = load ptr, ptr %122, align 8
  %124 = call ptr @LLVMBuildMemCpy(ptr %112, ptr %115, i64 %116, ptr %119, i64 %120, ptr %123)
  ret ptr %124

else27:                                           ; preds = %ifend25
  br label %ifend28

ifend28:                                          ; preds = %else27
  %125 = load i64, ptr %intrinsic_type, align 4
  %126 = icmp eq i64 %125, 4
  br i1 %126, label %if.entry29, label %else30

if.entry29:                                       ; preds = %ifend28
  %127 = load ptr, ptr %builder, align 8
  %128 = load ptr, ptr %args, align 8
  %129 = getelementptr inbounds ptr, ptr %128, i64 0
  %130 = load ptr, ptr %129, align 8
  %131 = load i64, ptr %arg0_align, align 4
  %132 = load ptr, ptr %args, align 8
  %133 = getelementptr inbounds ptr, ptr %132, i64 1
  %134 = load ptr, ptr %133, align 8
  %135 = load i64, ptr %arg1_align, align 4
  %136 = load ptr, ptr %args, align 8
  %137 = getelementptr inbounds ptr, ptr %136, i64 2
  %138 = load ptr, ptr %137, align 8
  %139 = call ptr @LLVMBuildMemMove(ptr %127, ptr %130, i64 %131, ptr %134, i64 %135, ptr %138)
  ret ptr %139

else30:                                           ; preds = %ifend28
  br label %ifend31

ifend31:                                          ; preds = %else30
  %140 = call ptr @string_from_bytes(ptr @616, i64 21)
  call void @panic(ptr %140)
  ret ptr null
}

define void @CodeGen_constructor(ptr %0, ptr %1, ptr %2) {
  %module_name = alloca ptr, align 8
  %program = alloca ptr, align 8
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  store ptr %1, ptr %program, align 8
  store ptr %2, ptr %module_name, align 8
  %4 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %4, i32 0, i32 4
  %5 = load ptr, ptr %program, align 8
  store ptr %5, ptr %memberidx, align 8
  %6 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %6, i32 0, i32 6
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Map_string_LLVMValueRef__constructor(ptr %7)
  store ptr %7, ptr %memberidx1, align 8
  %8 = load ptr, ptr %this, align 8
  %memberidx2 = getelementptr inbounds %CodeGen, ptr %8, i32 0, i32 7
  %9 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Map_string_LLVMValueRef__constructor(ptr %9)
  store ptr %9, ptr %memberidx2, align 8
  %10 = load ptr, ptr %this, align 8
  %memberidx3 = getelementptr inbounds %CodeGen, ptr %10, i32 0, i32 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_CGClassType_, ptr null, i32 1) to i32))
  call void @Map_string_CGClassType__constructor(ptr %11)
  store ptr %11, ptr %memberidx3, align 8
  %12 = load ptr, ptr %this, align 8
  %memberidx4 = getelementptr inbounds %CodeGen, ptr %12, i32 0, i32 9
  %13 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_CGEnumType_, ptr null, i32 1) to i32))
  call void @Map_string_CGEnumType__constructor(ptr %13)
  store ptr %13, ptr %memberidx4, align 8
  %14 = load ptr, ptr %this, align 8
  %memberidx5 = getelementptr inbounds %CodeGen, ptr %14, i32 0, i32 10
  %15 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%Map_string_LLVMValueRef_, ptr null, i32 1) to i32))
  call void @Map_string_LLVMValueRef__constructor(ptr %15)
  store ptr %15, ptr %memberidx5, align 8
  %16 = load ptr, ptr %this, align 8
  %memberidx6 = getelementptr inbounds %CodeGen, ptr %16, i32 0, i32 5
  store i1 true, ptr %memberidx6, align 1
  %17 = load ptr, ptr %this, align 8
  %memberidx7 = getelementptr inbounds %CodeGen, ptr %17, i32 0, i32 3
  store ptr null, ptr %memberidx7, align 8
  %18 = load ptr, ptr %this, align 8
  %memberidx8 = getelementptr inbounds %CodeGen, ptr %18, i32 0, i32 2
  store ptr null, ptr %memberidx8, align 8
  %19 = load ptr, ptr %this, align 8
  %memberidx9 = getelementptr inbounds %CodeGen, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %module_name, align 8
  %21 = getelementptr inbounds %string, ptr %20, i32 0, i32 0
  %22 = load ptr, ptr %21, align 8
  %memberidx10 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %22, i32 0, i32 5
  %23 = load ptr, ptr %memberidx10, align 8
  %24 = call ptr %23(ptr %20)
  %25 = call ptr @LLVMModuleCreateWithName(ptr %24)
  store ptr %25, ptr %memberidx9, align 8
  ret void
}

declare ptr @LLVMModuleCreateWithName(ptr)

define ptr @create_var_key(ptr %0) {
  %var_id = alloca ptr, align 8
  store ptr %0, ptr %var_id, align 8
  %2 = load ptr, ptr %var_id, align 8
  %memberidx = getelementptr inbounds %VarId, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %var_id, align 8
  %memberidx1 = getelementptr inbounds %VarId, ptr %4, i32 0, i32 0
  %5 = load i64, ptr %memberidx1, align 4
  %6 = load ptr, ptr %var_id, align 8
  %memberidx2 = getelementptr inbounds %VarId, ptr %6, i32 0, i32 2
  %7 = load i64, ptr %memberidx2, align 4
  %8 = alloca ptr, align 8
  %9 = call i64 (ptr, ptr, ...) @asprintf(ptr %8, ptr @522, i64 %3, i64 %5, i64 %7)
  %10 = load ptr, ptr %8, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %11, ptr %10, i64 %9)
  ret ptr %11
}

define ptr @create_type_id_key(ptr %0) {
  %type_id = alloca ptr, align 8
  store ptr %0, ptr %type_id, align 8
  %2 = load ptr, ptr %type_id, align 8
  %memberidx = getelementptr inbounds %TypeId, ptr %2, i32 0, i32 0
  %3 = load i64, ptr %memberidx, align 4
  %4 = load ptr, ptr %type_id, align 8
  %memberidx1 = getelementptr inbounds %TypeId, ptr %4, i32 0, i32 1
  %5 = load i64, ptr %memberidx1, align 4
  %6 = load ptr, ptr %type_id, align 8
  %memberidx2 = getelementptr inbounds %TypeId, ptr %6, i32 0, i32 2
  %7 = load i64, ptr %memberidx2, align 4
  %8 = alloca ptr, align 8
  %9 = call i64 (ptr, ptr, ...) @asprintf(ptr %8, ptr @522, i64 %3, i64 %5, i64 %7)
  %10 = load ptr, ptr %8, align 8
  %11 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %11, ptr %10, i64 %9)
  ret ptr %11
}

declare i1 @LLVMIsConstant(ptr)

declare ptr @LLVMConstNeg(ptr)

declare ptr @LLVMBuildNeg(ptr, ptr, ptr)

declare ptr @LLVMConstInt(ptr, i64, i1)

declare ptr @LLVMInt1Type()

declare ptr @LLVMIntType(i64)

declare ptr @LLVMVoidType()

declare ptr @LLVMInt8Type()

declare ptr @LLVMInt16Type()

declare ptr @LLVMInt32Type()

declare ptr @LLVMInt64Type()

declare ptr @LLVMInt128Type()

declare ptr @LLVMFloatType()

declare ptr @LLVMDoubleType()

declare ptr @LLVMPointerType(ptr, i64)

declare ptr @LLVMArrayType(ptr, i64)

declare ptr @LLVMFunctionType(ptr, ptr, i64, i1)

declare ptr @LLVMStructType(ptr, i64, i1)

declare ptr @LLVMBuildRet(ptr, ptr)

declare ptr @LLVMBuildRetVoid(ptr)

declare ptr @LLVMConstReal(ptr, double)

define void @IntrinsicResult_constructor(ptr %0) {
  %this = alloca ptr, align 8
  store ptr %0, ptr %this, align 8
  %2 = load ptr, ptr %this, align 8
  %memberidx = getelementptr inbounds %IntrinsicResult, ptr %2, i32 0, i32 0
  store ptr null, ptr %memberidx, align 8
  %3 = load ptr, ptr %this, align 8
  %memberidx1 = getelementptr inbounds %IntrinsicResult, ptr %3, i32 0, i32 1
  store ptr null, ptr %memberidx1, align 8
  ret void
}

define ptr @get_intrinsic(ptr %0, ptr %1, ptr %2, i64 %3, ptr %4, i1 %5) {
  %params_types = alloca ptr, align 8
  %name = alloca ptr, align 8
  %params_length = alloca i64, align 8
  %return_type = alloca ptr, align 8
  %var_args = alloca i1, align 1
  %mod = alloca ptr, align 8
  %fnc_in_mod = alloca ptr, align 8
  %result = alloca ptr, align 8
  %fn_name = alloca ptr, align 8
  store ptr %0, ptr %mod, align 8
  store ptr %1, ptr %name, align 8
  store ptr %2, ptr %params_types, align 8
  store i64 %3, ptr %params_length, align 4
  store ptr %4, ptr %return_type, align 8
  store i1 %5, ptr %var_args, align 1
  %7 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%IntrinsicResult, ptr null, i32 1) to i32))
  call void @IntrinsicResult_constructor(ptr %7)
  store ptr %7, ptr %result, align 8
  %8 = load ptr, ptr %result, align 8
  %memberidx = getelementptr inbounds %IntrinsicResult, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %return_type, align 8
  %10 = load ptr, ptr %params_types, align 8
  %11 = load i64, ptr %params_length, align 4
  %12 = load i1, ptr %var_args, align 1
  %13 = call ptr @LLVMFunctionType(ptr %9, ptr %10, i64 %11, i1 %12)
  store ptr %13, ptr %memberidx, align 8
  %14 = load ptr, ptr %name, align 8
  %15 = getelementptr inbounds %string, ptr %14, i32 0, i32 0
  %16 = load ptr, ptr %15, align 8
  %memberidx1 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %16, i32 0, i32 5
  %17 = load ptr, ptr %memberidx1, align 8
  %18 = call ptr %17(ptr %14)
  store ptr %18, ptr %fn_name, align 8
  %19 = load ptr, ptr %mod, align 8
  %20 = load ptr, ptr %fn_name, align 8
  %21 = call ptr @LLVMGetNamedFunction(ptr %19, ptr %20)
  store ptr %21, ptr %fnc_in_mod, align 8
  %22 = load ptr, ptr %fnc_in_mod, align 8
  %23 = icmp ne ptr %22, null
  br i1 %23, label %if.entry, label %else

if.entry:                                         ; preds = %6
  %24 = load ptr, ptr %result, align 8
  %memberidx2 = getelementptr inbounds %IntrinsicResult, ptr %24, i32 0, i32 0
  %25 = load ptr, ptr %fnc_in_mod, align 8
  store ptr %25, ptr %memberidx2, align 8
  br label %ifend

else:                                             ; preds = %6
  %26 = load ptr, ptr %result, align 8
  %memberidx3 = getelementptr inbounds %IntrinsicResult, ptr %26, i32 0, i32 0
  %27 = load ptr, ptr %mod, align 8
  %28 = load ptr, ptr %fn_name, align 8
  %29 = load ptr, ptr %result, align 8
  %memberidx4 = getelementptr inbounds %IntrinsicResult, ptr %29, i32 0, i32 1
  %30 = load ptr, ptr %memberidx4, align 8
  %31 = call ptr @LLVMAddFunction(ptr %27, ptr %28, ptr %30)
  store ptr %31, ptr %memberidx3, align 8
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %32 = load ptr, ptr %result, align 8
  ret ptr %32
}

declare ptr @LLVMAddFunction(ptr, ptr, ptr)

declare ptr @LLVMBuildCall2(ptr, ptr, ptr, ptr, i64, ptr)

declare ptr @LLVMBuildGlobalString(ptr, ptr, ptr)

declare ptr @LLVMBuildAlloca(ptr, ptr, ptr)

declare ptr @LLVMBuildLoad2(ptr, ptr, ptr, ptr)

declare ptr @LLVMBuildSelect(ptr, ptr, ptr, ptr, ptr)

declare i64 @LLVMGetTypeKind(ptr)

declare ptr @LLVMTypeOf(ptr)

declare i1 @LLVMIsGlobalConstant(ptr)

define ptr @get_format_from_type(ptr %0) {
  %ty = alloca ptr, align 8
  %is_signed_int = alloca i1, align 1
  store ptr %0, ptr %ty, align 8
  %2 = load ptr, ptr %ty, align 8
  %3 = call i1 @is_int(ptr %2)
  br i1 %3, label %if.entry, label %else

if.entry:                                         ; preds = %1
  %4 = load ptr, ptr %ty, align 8
  %memberidx = getelementptr inbounds %IntType, ptr %4, i32 0, i32 1
  %5 = load i1, ptr %memberidx, align 1
  store i1 %5, ptr %is_signed_int, align 1
  %6 = load ptr, ptr %ty, align 8
  %memberidx1 = getelementptr inbounds %Type, ptr %6, i32 0, i32 0
  %7 = load i64, ptr %memberidx1, align 4
  %8 = icmp eq i64 %7, 7
  br i1 %8, label %if.entry2, label %else3

else:                                             ; preds = %1
  br label %ifend

ifend:                                            ; preds = %else
  %9 = load ptr, ptr %ty, align 8
  %memberidx17 = getelementptr inbounds %Type, ptr %9, i32 0, i32 0
  %10 = load i64, ptr %memberidx17, align 4
  %11 = icmp eq i64 %10, 8
  br i1 %11, label %if.entry18, label %else19

if.entry2:                                        ; preds = %if.entry
  %12 = load i1, ptr %is_signed_int, align 1
  br i1 %12, label %true_block, label %false_block

else3:                                            ; preds = %if.entry
  br label %ifend4

ifend4:                                           ; preds = %else3
  %13 = load ptr, ptr %ty, align 8
  %memberidx5 = getelementptr inbounds %Type, ptr %13, i32 0, i32 0
  %14 = load i64, ptr %memberidx5, align 4
  %15 = icmp eq i64 %14, 5
  br i1 %15, label %if.entry6, label %else7

true_block:                                       ; preds = %if.entry2
  %16 = call ptr @string_from_bytes(ptr @553, i64 4)
  br label %end

false_block:                                      ; preds = %if.entry2
  %17 = call ptr @string_from_bytes(ptr @554, i64 4)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %16, %true_block ], [ %17, %false_block ]
  ret ptr %ternary

if.entry6:                                        ; preds = %ifend4
  %18 = load i1, ptr %is_signed_int, align 1
  br i1 %18, label %true_block9, label %false_block10

else7:                                            ; preds = %ifend4
  br label %ifend8

ifend8:                                           ; preds = %else7
  %19 = load i1, ptr %is_signed_int, align 1
  br i1 %19, label %true_block13, label %false_block14

true_block9:                                      ; preds = %if.entry6
  %20 = call ptr @string_from_bytes(ptr @555, i64 3)
  br label %end11

false_block10:                                    ; preds = %if.entry6
  %21 = call ptr @string_from_bytes(ptr @556, i64 3)
  br label %end11

end11:                                            ; preds = %false_block10, %true_block9
  %ternary12 = phi ptr [ %20, %true_block9 ], [ %21, %false_block10 ]
  ret ptr %ternary12

true_block13:                                     ; preds = %ifend8
  %22 = call ptr @string_from_bytes(ptr @240, i64 2)
  br label %end15

false_block14:                                    ; preds = %ifend8
  %23 = call ptr @string_from_bytes(ptr @557, i64 2)
  br label %end15

end15:                                            ; preds = %false_block14, %true_block13
  %ternary16 = phi ptr [ %22, %true_block13 ], [ %23, %false_block14 ]
  ret ptr %ternary16

if.entry18:                                       ; preds = %ifend
  %24 = call ptr @string_from_bytes(ptr @558, i64 2)
  ret ptr %24

else19:                                           ; preds = %ifend
  br label %ifend20

ifend20:                                          ; preds = %else19
  %25 = load ptr, ptr %ty, align 8
  %memberidx21 = getelementptr inbounds %Type, ptr %25, i32 0, i32 0
  %26 = load i64, ptr %memberidx21, align 4
  %27 = icmp eq i64 %26, 9
  br i1 %27, label %if.entry22, label %else23

if.entry22:                                       ; preds = %ifend20
  %28 = call ptr @string_from_bytes(ptr @559, i64 3)
  ret ptr %28

else23:                                           ; preds = %ifend20
  br label %ifend24

ifend24:                                          ; preds = %else23
  %29 = load ptr, ptr %ty, align 8
  %30 = call i1 @is_pointer(ptr %29)
  br i1 %30, label %if.entry25, label %else26

if.entry25:                                       ; preds = %ifend24
  %31 = call ptr @string_from_bytes(ptr @560, i64 4)
  ret ptr %31

else26:                                           ; preds = %ifend24
  br label %ifend27

ifend27:                                          ; preds = %else26
  %32 = call ptr @string_from_bytes(ptr @58, i64 2)
  ret ptr %32
}

declare ptr @LLVMBuildInBoundsGEP2(ptr, ptr, ptr, ptr, i64, ptr)

declare ptr @LLVM_GetFunctionType(ptr)

declare ptr @LLVMBuildMalloc(ptr, ptr, ptr)

declare ptr @LLVMBuildFree(ptr, ptr)

declare ptr @LLVMBuildStore(ptr, ptr, ptr)

declare ptr @LLVMConstArray(ptr, ptr, i64)

declare ptr @LLVMConstStruct(ptr, i64, i1)

declare ptr @LLVMConstIntCast(ptr, ptr, i1)

define ptr @create_prop_key(ptr %0) {
  %prop_id = alloca ptr, align 8
  store ptr %0, ptr %prop_id, align 8
  %2 = load ptr, ptr %prop_id, align 8
  %memberidx = getelementptr inbounds %PropId, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %4 = call ptr @create_type_id_key(ptr %3)
  %5 = getelementptr inbounds %string, ptr %4, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %memberidx1 = getelementptr inbounds { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }, ptr %6, i32 0, i32 5
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = call ptr %7(ptr %4)
  %9 = load ptr, ptr %prop_id, align 8
  %memberidx2 = getelementptr inbounds %PropId, ptr %9, i32 0, i32 0
  %10 = load i64, ptr %memberidx2, align 4
  %11 = load ptr, ptr %prop_id, align 8
  %memberidx3 = getelementptr inbounds %PropId, ptr %11, i32 0, i32 2
  %12 = load i64, ptr %memberidx3, align 4
  %13 = alloca ptr, align 8
  %14 = call i64 (ptr, ptr, ...) @asprintf(ptr %13, ptr @569, ptr %8, i64 %10, i64 %12)
  %15 = load ptr, ptr %13, align 8
  %16 = tail call ptr @malloc(i32 ptrtoint (ptr getelementptr (%string, ptr null, i32 1) to i32))
  call void @string_constructor(ptr %16, ptr %15, i64 %14)
  tail call void @free(ptr %8)
  ret ptr %16
}

declare ptr @LLVMConstMul(ptr, ptr)

declare ptr @LLVMSizeOf(ptr)

declare i1 @LLVMIsNull(ptr)

declare ptr @LLVMBuildIsNull(ptr, ptr, ptr)

declare ptr @LLVMBuildIsNotNull(ptr, ptr, ptr)

declare ptr @LLVMConstNSWAdd(ptr, ptr)

declare ptr @LLVMBuildNSWAdd(ptr, ptr, ptr, ptr)

declare ptr @LLVMConstNUWAdd(ptr, ptr)

declare ptr @LLVMBuildNUWAdd(ptr, ptr, ptr, ptr)

declare ptr @LLVMConstNSWSub(ptr, ptr)

declare ptr @LLVMBuildNSWSub(ptr, ptr, ptr, ptr)

declare ptr @LLVMConstNUWSub(ptr, ptr)

declare ptr @LLVMBuildNUWSub(ptr, ptr, ptr, ptr)

declare ptr @LLVMConstNSWMul(ptr, ptr)

declare ptr @LLVMBuildNSWMul(ptr, ptr, ptr, ptr)

declare ptr @LLVMConstNUWMul(ptr, ptr)

declare ptr @LLVMBuildNUWMul(ptr, ptr, ptr, ptr)

declare ptr @LLVMBuildSDiv(ptr, ptr, ptr, ptr)

declare ptr @LLVMBuildUDiv(ptr, ptr, ptr, ptr)

declare ptr @LLVMBuildSRem(ptr, ptr, ptr, ptr)

declare ptr @LLVMBuildURem(ptr, ptr, ptr, ptr)

declare ptr @LLVMConstICmp(i64, ptr, ptr)

declare ptr @LLVMBuildICmp(ptr, i64, ptr, ptr, ptr)

declare ptr @LLVMConstShl(ptr, ptr)

declare ptr @LLVMBuildShl(ptr, ptr, ptr, ptr)

declare ptr @LLVMConstLShr(ptr, ptr)

declare ptr @LLVMBuildLShr(ptr, ptr, ptr, ptr)

declare ptr @LLVMConstOr(ptr, ptr)

declare ptr @LLVMBuildOr(ptr, ptr, ptr, ptr)

declare ptr @LLVMConstAnd(ptr, ptr)

declare ptr @LLVMBuildAnd(ptr, ptr, ptr, ptr)

declare ptr @LLVMConstXor(ptr, ptr)

declare ptr @LLVMBuildXor(ptr, ptr, ptr, ptr)

declare ptr @LLVMBuildFAdd(ptr, ptr, ptr, ptr)

declare ptr @LLVMBuildFSub(ptr, ptr, ptr, ptr)

declare ptr @LLVMBuildFMul(ptr, ptr, ptr, ptr)

declare ptr @LLVMBuildFDiv(ptr, ptr, ptr, ptr)

declare ptr @LLVMBuildFRem(ptr, ptr, ptr, ptr)

declare ptr @LLVMConstFCmp(i64, ptr, ptr)

declare ptr @LLVMBuildFCmp(ptr, i64, ptr, ptr, ptr)

declare ptr @LLVMConstSIToFP(ptr, ptr)

declare ptr @LLVMBuildSIToFP(ptr, ptr, ptr, ptr)

declare ptr @LLVMConstFPToSI(ptr, ptr)

declare ptr @LLVMBuildFPToSI(ptr, ptr, ptr, ptr)

declare ptr @LLVMBuildIntCast2(ptr, ptr, ptr, i1, ptr)

declare ptr @LLVMConstFPCast(ptr, ptr)

declare ptr @LLVMBuildFPCast(ptr, ptr, ptr, ptr)

declare ptr @LLVMConstBitCast(ptr, ptr)

declare ptr @LLVMBuildBitCast(ptr, ptr, ptr, ptr)

declare ptr @LLVMConstNSWNeg(ptr)

declare ptr @LLVMBuildNSWNeg(ptr, ptr, ptr)

declare ptr @LLVMConstNUWNeg(ptr)

declare ptr @LLVMBuildNUWNeg(ptr, ptr, ptr)

declare ptr @LLVMBuildFNeg(ptr, ptr, ptr)

declare ptr @LLVMConstNot(ptr)

declare ptr @LLVMBuildNot(ptr, ptr, ptr)

declare ptr @LLVMGetInitializer(ptr)

declare ptr @LLVMConstNull(ptr)

declare ptr @LLVMAppendBasicBlock(ptr, ptr)

declare ptr @LLVMBuildCondBr(ptr, ptr, ptr, ptr)

declare void @LLVMPositionBuilderAtEnd(ptr, ptr)

declare ptr @LLVMBuildBr(ptr, ptr)

declare ptr @LLVMBuildPhi(ptr, ptr, ptr)

declare void @LLVMAddIncoming(ptr, ptr, ptr, i64)

declare void @LLVMAddCase(ptr, ptr, ptr)

declare ptr @LLVMBuildSwitch(ptr, ptr, ptr, i64)

declare ptr @LLVMBuildArrayMalloc(ptr, ptr, ptr, ptr)

declare ptr @LLVMBuildArrayAlloca(ptr, ptr, ptr, ptr)

define ptr @get_class_prop_type_with_name(ptr %0, ptr %1, ptr %2) {
  %obj_ty = alloca ptr, align 8
  %name = alloca ptr, align 8
  %program = alloca ptr, align 8
  %prop_id = alloca ptr, align 8
  %obj_class = alloca ptr, align 8
  store ptr %0, ptr %program, align 8
  store ptr %1, ptr %obj_ty, align 8
  store ptr %2, ptr %name, align 8
  %4 = load ptr, ptr %program, align 8
  %5 = load ptr, ptr %obj_ty, align 8
  %6 = call ptr @get_class_from_type(ptr %4, ptr %5)
  store ptr %6, ptr %obj_class, align 8
  %7 = load ptr, ptr %obj_class, align 8
  %8 = icmp eq ptr %7, null
  br i1 %8, label %if.entry, label %else

if.entry:                                         ; preds = %3
  ret ptr null

else:                                             ; preds = %3
  br label %ifend

ifend:                                            ; preds = %else
  %9 = load ptr, ptr %obj_class, align 8
  %memberidx = getelementptr inbounds %Class, ptr %9, i32 0, i32 6
  %10 = load ptr, ptr %memberidx, align 8
  %11 = load ptr, ptr %name, align 8
  %12 = call ptr @Map_string_PropId____getitem__(ptr %10, ptr %11)
  store ptr %12, ptr %prop_id, align 8
  %13 = load ptr, ptr %prop_id, align 8
  %14 = icmp eq ptr %13, null
  br i1 %14, label %if.entry1, label %else2

if.entry1:                                        ; preds = %ifend
  ret ptr null

else2:                                            ; preds = %ifend
  br label %ifend3

ifend3:                                           ; preds = %else2
  %15 = load ptr, ptr %program, align 8
  %16 = load ptr, ptr %prop_id, align 8
  %17 = call ptr @get_class_prop_type(ptr %15, ptr %16)
  ret ptr %17
}

declare ptr @LLVMBuildMul(ptr, ptr, ptr, ptr)

declare i64 @LLVMGetAlignment(ptr)

declare ptr @LLVMBuildMemSet(ptr, ptr, ptr, ptr, i64)

declare ptr @LLVMBuildMemCpy(ptr, ptr, i64, ptr, i64, ptr)

declare ptr @LLVMBuildMemMove(ptr, ptr, i64, ptr, i64, ptr)

define i1 @is_terminated(ptr %0) {
  %block = alloca ptr, align 8
  store ptr %0, ptr %block, align 8
  %2 = load ptr, ptr %block, align 8
  %memberidx = getelementptr inbounds %Block, ptr %2, i32 0, i32 1
  %3 = load i1, ptr %memberidx, align 1
  %4 = load ptr, ptr %block, align 8
  %memberidx1 = getelementptr inbounds %Block, ptr %4, i32 0, i32 2
  %5 = load i1, ptr %memberidx1, align 1
  %6 = or i1 %3, %5
  %7 = load ptr, ptr %block, align 8
  %memberidx2 = getelementptr inbounds %Block, ptr %7, i32 0, i32 3
  %8 = load i1, ptr %memberidx2, align 1
  %9 = or i1 %6, %8
  ret i1 %9
}

declare void @LLVMDeleteBasicBlock(ptr)

declare ptr @LLVMAddGlobal(ptr, ptr, ptr)

declare void @LLVMSetInitializer(ptr, ptr)

declare void @LLVMSetGlobalConstant(ptr, i1)

declare void @LLVMSetLinkage(ptr, i64)

declare ptr @LLVMCreateBuilder()

declare ptr @LLVMGetParam(ptr, i64)

declare void @LLVMDisposeBuilder(ptr)

define void @resize_type_array(ptr %0, i64 %1) {
  %array = alloca ptr, align 8
  %amt = alloca i64, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %array, align 8
  store i64 %1, ptr %amt, align 4
  br label %for.entry

for.entry:                                        ; preds = %2
  %3 = load ptr, ptr %array, align 8
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  store i64 %4, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %5 = load i64, ptr %i, align 4
  %6 = load i64, ptr %amt, align 4
  %7 = icmp sle i64 %5, %6
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load ptr, ptr %array, align 8
  call void @Array_LLVMTypeRef____sl__(ptr %8, ptr null)
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %9 = load i64, ptr %i, align 4
  %10 = add nsw i64 %9, 1
  store i64 %10, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

define void @resize_value_array(ptr %0, i64 %1) {
  %array = alloca ptr, align 8
  %amt = alloca i64, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %array, align 8
  store i64 %1, ptr %amt, align 4
  br label %for.entry

for.entry:                                        ; preds = %2
  %3 = load ptr, ptr %array, align 8
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %3, i32 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  store i64 %4, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.incr, %for.entry
  %5 = load i64, ptr %i, align 4
  %6 = load i64, ptr %amt, align 4
  %7 = icmp sle i64 %5, %6
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load ptr, ptr %array, align 8
  call void @Array_LLVMValueRef____sl__(ptr %8, ptr null)
  br label %for.incr

for.incr:                                         ; preds = %for.body
  %9 = load i64, ptr %i, align 4
  %10 = add nsw i64 %9, 1
  store i64 %10, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare ptr @LLVMStructCreateNamed(ptr, ptr)

declare ptr @LLVMGetModuleContext(ptr)

declare void @LLVMStructSetBody(ptr, ptr, i64, i1)

declare ptr @LLVMConstString(ptr, i64, i1)

attributes #0 = { argmemonly nocallback nofree nounwind willreturn }
