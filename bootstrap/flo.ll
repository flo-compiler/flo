; ModuleID = 'src/main.flo'
source_filename = "src/main.flo"

%string = type <{ ptr, ptr, i64, i64 }>
%Array_string_ = type <{ ptr, ptr, i64, i64 }>
%CodeGen = type <{ ptr, ptr, ptr, ptr, ptr, i1, ptr, ptr, ptr, ptr, ptr }>
%TypeChecker = type <{ ptr, i64, ptr, ptr, ptr, ptr, ptr, i1, i1, ptr }>
%Compiler = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%Array_FloFile_ = type <{ ptr, ptr, i64, i64 }>
%Array_FloError_ = type <{ ptr, ptr, i64, i64 }>
%Map_string_FileId_ = type <{ ptr, ptr, i64, i64 }>
%Bucket_string_FileId_ = type <{ ptr, ptr, ptr, i1 }>
%Program = type <{ i1, ptr }>
%Array_Module_ = type <{ ptr, ptr, i64, i64 }>
%Map_string_Generic_ = type <{ ptr, ptr, i64, i64 }>
%Bucket_string_Generic_ = type <{ ptr, ptr, ptr, i1 }>
%Module = type <{ i64, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%Array_Scope_ = type <{ ptr, ptr, i64, i64 }>
%Map_string_LLVMValueRef_ = type <{ ptr, ptr, i64, i64 }>
%Bucket_string_LLVMValueRef_ = type <{ ptr, ptr, ptr, i1 }>
%Map_string_CGClassType_ = type <{ ptr, ptr, i64, i64 }>
%Bucket_string_CGClassType_ = type <{ ptr, ptr, ptr, i1 }>
%Map_string_CGEnumType_ = type <{ ptr, ptr, i64, i64 }>
%Bucket_string_CGEnumType_ = type <{ ptr, ptr, ptr, i1 }>
%Array_Enum_ = type <{ ptr, ptr, i64, i64 }>
%Iterator_Enum_ = type <{ ptr, i1 }>
%ArrayIterator_Enum_ = type <{ ptr, i1, i64, i64, ptr }>
%Array_Class_ = type <{ ptr, ptr, i64, i64 }>
%Iterator_Class_ = type <{ ptr, i1 }>
%ArrayIterator_Class_ = type <{ ptr, i1, i64, i64, ptr }>
%Array_ConstDeclaration_ = type <{ ptr, ptr, i64, i64 }>
%Iterator_ConstDeclaration_ = type <{ ptr, i1 }>
%ArrayIterator_ConstDeclaration_ = type <{ ptr, i1, i64, i64, ptr }>
%Array_VarDeclaration_ = type <{ ptr, ptr, i64, i64 }>
%Iterator_VarDeclaration_ = type <{ ptr, i1 }>
%ArrayIterator_VarDeclaration_ = type <{ ptr, i1, i64, i64, ptr }>
%Array_Function_ = type <{ ptr, ptr, i64, i64 }>
%Iterator_Function_ = type <{ ptr, i1 }>
%ArrayIterator_Function_ = type <{ ptr, i1, i64, i64, ptr }>
%GeneratedModule = type <{ ptr, ptr, ptr }>
%FloFile = type <{ ptr, ptr }>
%FloError = type <{ i64, ptr, ptr }>
%FloRange = type <{ i64, i64, i64, i64 }>
%Range = type <{ i64, i64 }>
%RangeIterator_int_ = type <{ ptr, i1, i64, i64 }>
%Iterator_int_ = type <{ ptr, i1 }>
%File = type <{ ptr, i64 }>
%Array_Bucket_string_FileId__ = type <{ ptr, ptr, i64, i64 }>
%Array_Token_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_Token_ = type <{ ptr, i1, i64, i64, ptr }>
%Iterator_Token_ = type <{ ptr, i1 }>
%Lexer = type <{ i8, ptr, ptr, i64, i64, i64 }>
%Token = type <{ i64, ptr }>
%Array_Array_Token__ = type <{ ptr, ptr, i64, i64 }>
%Array_int_ = type <{ ptr, ptr, i64, i64 }>
%StringBuilder = type <{ ptr, ptr, i64, ptr, i64 }>
%StrToken = type <{ i64, ptr, ptr, ptr, ptr }>
%IntToken = type <{ i64, ptr, i64 }>
%IdentifierToken = type <{ i64, ptr, ptr }>
%FloatToken = type <{ i64, ptr, double }>
%CharToken = type <{ i64, ptr, i8 }>
%Array_IdentifierToken_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_IdentifierToken_ = type <{ ptr, i1, i64, i64, ptr }>
%Iterator_IdentifierToken_ = type <{ ptr, i1 }>
%Array_ImportNode_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_ImportNode_ = type <{ ptr, i1, i64, i64, ptr }>
%Iterator_ImportNode_ = type <{ ptr, i1 }>
%Array_VarDeclarationStatement_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_VarDeclarationStatement_ = type <{ ptr, i1, i64, i64, ptr }>
%Iterator_VarDeclarationStatement_ = type <{ ptr, i1 }>
%Array_EnumNodeField_ = type <{ ptr, ptr, i64, i64 }>
%Array_EnumNode_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_EnumNode_ = type <{ ptr, i1, i64, i64, ptr }>
%Iterator_EnumNode_ = type <{ ptr, i1 }>
%Array_TypeAliasNode_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_TypeAliasNode_ = type <{ ptr, i1, i64, i64, ptr }>
%Iterator_TypeAliasNode_ = type <{ ptr, i1 }>
%Array_ConstDeclarationStatement_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_ConstDeclarationStatement_ = type <{ ptr, i1, i64, i64, ptr }>
%Iterator_ConstDeclarationStatement_ = type <{ ptr, i1 }>
%Array_ArgNode_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_ArgNode_ = type <{ ptr, i1, i64, i64, ptr }>
%Iterator_ArgNode_ = type <{ ptr, i1 }>
%Array_StatementNode_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_StatementNode_ = type <{ ptr, i1, i64, i64, ptr }>
%Iterator_StatementNode_ = type <{ ptr, i1 }>
%Array_MethodNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_FieldNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_TypeNode_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_TypeNode_ = type <{ ptr, i1, i64, i64, ptr }>
%Iterator_TypeNode_ = type <{ ptr, i1 }>
%Array_GenericParameterNode_ = type <{ ptr, ptr, i64, i64 }>
%Array_ClassDeclarationNode_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_ClassDeclarationNode_ = type <{ ptr, i1, i64, i64, ptr }>
%Iterator_ClassDeclarationNode_ = type <{ ptr, i1 }>
%Array_FunctionDeclarationNode_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_FunctionDeclarationNode_ = type <{ ptr, i1, i64, i64, ptr }>
%Iterator_FunctionDeclarationNode_ = type <{ ptr, i1 }>
%ModuleAST = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%Parser = type <{ ptr, ptr, ptr, i64 }>
%FunctionDeclarationNode = type <{ ptr, ptr, ptr, ptr, i1 }>
%TypeNode = type <{ ptr, i64 }>
%ClassDeclarationNode = type <{ ptr, ptr, ptr, ptr, ptr }>
%FieldNode = type <{ ptr, i64, ptr, ptr }>
%MethodNode = type <{ ptr, ptr, ptr, i64, ptr, i1, i1 }>
%EnumNode = type <{ ptr, ptr, ptr }>
%EnumNodeField = type <{ ptr, ptr }>
%ImportNode = type <{ ptr, ptr }>
%TypeAliasNode = type <{ ptr, ptr }>
%BlockNode = type <{ ptr, ptr }>
%FunctionTypeNode = type <{ ptr, i64, ptr, ptr }>
%PointerTypeNode = type <{ ptr, i64, ptr }>
%RecordTypeNode = type <{ ptr, i64, ptr, ptr }>
%ArrayTypeNode = type <{ ptr, i64, ptr, ptr }>
%Array_ExpressionNode_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_ExpressionNode_ = type <{ ptr, i1, i64, i64, ptr }>
%Iterator_ExpressionNode_ = type <{ ptr, i1 }>
%StatementNode = type <{ ptr, i64 }>
%ExpressionNode = type <{ ptr, i64, i64 }>
%StringExpressionNode = type <{ ptr, i64, i64, ptr, ptr }>
%VarDeclarationStatement = type <{ ptr, i64, ptr, ptr, ptr }>
%NewExpressionNode = type <{ ptr, i64, i64, ptr, i1, ptr }>
%IfStatementNode = type <{ ptr, i64, ptr, ptr, ptr }>
%WhileStatementNode = type <{ ptr, i64, ptr, ptr }>
%ForStatementNode = type <{ ptr, i64, ptr, ptr, ptr, ptr, i64, ptr, ptr }>
%ReturnStatementNode = type <{ ptr, i64, ptr }>
%ConstDeclarationStatement = type <{ ptr, i64, ptr, ptr, ptr }>
%ArgNode = type <{ ptr, ptr, ptr }>
%IntExpressionNode = type <{ ptr, i64, i64, ptr }>
%FloatExpressionNode = type <{ ptr, i64, i64, ptr }>
%CharExpressionNode = type <{ ptr, i64, i64, ptr }>
%VarAccessExpressionNode = type <{ ptr, i64, i64, ptr }>
%ArrayExpressionNode = type <{ ptr, i64, i64, ptr }>
%CallExpressionNode = type <{ ptr, i64, i64, ptr, ptr }>
%ExpressionIndexNode = type <{ ptr, i64, i64, ptr, ptr }>
%MemberExpressionNode = type <{ ptr, i64, i64, ptr, ptr }>
%UnaryExpressionNode = type <{ ptr, i64, i64, i64, ptr }>
%BinaryExpressionNode = type <{ ptr, i64, i64, ptr, i64, ptr }>
%TypeCastExpressionNode = type <{ ptr, i64, i64, ptr, ptr }>
%TernaryExpressionNode = type <{ ptr, i64, i64, ptr, ptr, ptr }>
%Map_string_VarId_ = type <{ ptr, ptr, i64, i64 }>
%Array_Bucket_string_VarId__ = type <{ ptr, ptr, i64, i64 }>
%Bucket_string_VarId_ = type <{ ptr, ptr, ptr, i1 }>
%Map_string_EnumId_ = type <{ ptr, ptr, i64, i64 }>
%Array_Bucket_string_EnumId__ = type <{ ptr, ptr, i64, i64 }>
%Bucket_string_EnumId_ = type <{ ptr, ptr, ptr, i1 }>
%Map_string_Type_ = type <{ ptr, ptr, i64, i64 }>
%Array_Bucket_string_Type__ = type <{ ptr, ptr, i64, i64 }>
%Bucket_string_Type_ = type <{ ptr, ptr, ptr, i1 }>
%ArrayIterator_Bucket_string_Type__ = type <{ ptr, i1, i64, i64, ptr }>
%Iterator_Bucket_string_Type__ = type <{ ptr, i1 }>
%Map_string_ClassId_ = type <{ ptr, ptr, i64, i64 }>
%Array_Bucket_string_ClassId__ = type <{ ptr, ptr, i64, i64 }>
%Bucket_string_ClassId_ = type <{ ptr, ptr, ptr, i1 }>
%Array_Var_ = type <{ ptr, ptr, i64, i64 }>
%Map_string_PropId_ = type <{ ptr, ptr, i64, i64 }>
%Array_Bucket_string_PropId__ = type <{ ptr, ptr, i64, i64 }>
%Bucket_string_PropId_ = type <{ ptr, ptr, ptr, i1 }>
%ArrayIterator_Bucket_string_PropId__ = type <{ ptr, i1, i64, i64, ptr }>
%Iterator_Bucket_string_PropId__ = type <{ ptr, i1 }>
%Array_EnumField_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_EnumField_ = type <{ ptr, i1, i64, i64, ptr }>
%Iterator_EnumField_ = type <{ ptr, i1 }>
%Array_Const_ = type <{ ptr, ptr, i64, i64 }>
%Array_FunctionArg_ = type <{ ptr, ptr, i64, i64 }>
%Array_Statement_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_Statement_ = type <{ ptr, i1, i64, i64, ptr }>
%Iterator_Statement_ = type <{ ptr, i1 }>
%Array_Type_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_Type_ = type <{ ptr, i1, i64, i64, ptr }>
%Iterator_Type_ = type <{ ptr, i1 }>
%Array_ClassMethod_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_ClassMethod_ = type <{ ptr, i1, i64, i64, ptr }>
%Iterator_ClassMethod_ = type <{ ptr, i1 }>
%Array_ClassField_ = type <{ ptr, ptr, i64, i64 }>
%Scope = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%ConstDeclaration = type <{ i64, ptr, ptr, i1 }>
%VarDeclaration = type <{ i64, ptr, ptr, i1 }>
%VarId = type <{ i64, i64, i64 }>
%Var = type <{ ptr, ptr, ptr }>
%Expression = type <{ i64, i1, i64, ptr }>
%Function = type <{ ptr, ptr, ptr, ptr, ptr, ptr, i1 }>
%Block = type <{ ptr, i1, i1, i1 }>
%FunctionType = type <{ i64, ptr, ptr, i1 }>
%ScopeId = type <{ i64, i64 }>
%ReturnStatement = type <{ i64, ptr }>
%Class = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64, i64, i1 }>
%TypeId = type <{ i64, i64, i64 }>
%Enum = type <{ ptr, ptr, ptr, ptr }>
%GenericType = type <{ i64, ptr, ptr, ptr }>
%ObjectType = type <{ i64, ptr }>
%Array_Expression_ = type <{ ptr, ptr, i64, i64 }>
%StringExpression = type <{ i64, i1, i64, ptr, ptr, ptr, ptr }>
%IntrinsicCall = type <{ i64, i1, i64, ptr, i64, ptr }>
%TypeCastExpression = type <{ i64, i1, i64, ptr, ptr }>
%ArrayIterator_Expression_ = type <{ ptr, i1, i64, i64, ptr }>
%Iterator_Expression_ = type <{ ptr, i1 }>
%FunctionArg = type <{ i64, i1, i64, ptr, ptr, ptr, ptr }>
%PropId = type <{ i64, ptr, i64 }>
%ClassMethod = type <{ ptr, i1, i64, ptr, ptr, ptr, ptr, i1, ptr, i64 }>
%ClassField = type <{ ptr, i1, i64, ptr, ptr, ptr, i64 }>
%Const = type <{ ptr, ptr, ptr }>
%EnumType = type <{ i64, ptr }>
%MemberExpression = type <{ i64, i1, i64, ptr, ptr, ptr }>
%CallExpression = type <{ i64, i1, i64, ptr, ptr, ptr }>
%BinaryExpression = type <{ i64, i1, i64, ptr, ptr, i64, ptr }>
%NewExpression = type <{ i64, i1, i64, ptr, ptr, i1, ptr }>
%VarAccessExpression = type <{ i64, i1, i64, ptr, ptr }>
%PointerType = type <{ i64, ptr }>
%ArrayType = type <{ i64, ptr, i64 }>
%ForStatement = type <{ i64, ptr, ptr, ptr, ptr, ptr }>
%UnaryExpression = type <{ i64, i1, i64, ptr, i64, ptr }>
%IfStatement = type <{ i64, ptr, ptr, ptr }>
%WhileStatement = type <{ i64, ptr, ptr }>
%TernaryExpression = type <{ i64, i1, i64, ptr, ptr, ptr, ptr }>
%Generic = type <{ i64, ptr }>
%IndexExpression = type <{ i64, i1, i64, ptr, ptr, ptr }>
%Array_Bucket_string_Generic__ = type <{ ptr, ptr, i64, i64 }>
%ArrayExpression = type <{ i64, i1, i64, ptr, ptr }>
%EnumField = type <{ ptr, ptr, ptr }>
%IntExpression = type <{ i64, i1, i64, ptr, i64 }>
%FloatExpression = type <{ i64, i1, i64, ptr, double }>
%BooleanExpression = type <{ i64, i1, i64, ptr, i1 }>
%Array_LLVMValueRef_ = type <{ ptr, ptr, i64, i64 }>
%ArrayIterator_LLVMValueRef_ = type <{ ptr, i1, i64, i64, ptr }>
%Iterator_LLVMValueRef_ = type <{ ptr, i1 }>
%Array_Bucket_string_LLVMValueRef__ = type <{ ptr, ptr, i64, i64 }>
%Array_LLVMTypeRef_ = type <{ ptr, ptr, i64, i64 }>
%Map_string_int_ = type <{ ptr, ptr, i64, i64 }>
%Array_Bucket_string_int__ = type <{ ptr, ptr, i64, i64 }>
%Bucket_string_int_ = type <{ ptr, ptr, i64, i1 }>
%CGClassType = type <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr }>
%Array_Bucket_string_CGClassType__ = type <{ ptr, ptr, i64, i64 }>
%CGEnumType = type <{ ptr, ptr }>
%ArrayIterator_LLVMTypeRef_ = type <{ ptr, i1, i64, i64, ptr }>
%Iterator_LLVMTypeRef_ = type <{ ptr, i1 }>
%IntrinsicResult = type <{ ptr, ptr }>
%Array_Bucket_string_CGEnumType__ = type <{ ptr, ptr, i64, i64 }>

@VTablestring = internal global <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }> <{ ptr @string_find, ptr @string_substring, ptr @string_get_byte, ptr @string_get_bytes, ptr @string_replace, ptr @string_to_cstring, ptr @string_ends_with, ptr @string_starts_with }>
@VTableArray_string_ = internal global <{ ptr }> <{ ptr @Array_string__find }>
@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@1 = private unnamed_addr constant [28 x i8] c"Usage: %s <path> [OPTIONS]\0A\00", align 1
@2 = private unnamed_addr constant [38 x i8] c" -h, --help\09\09\09Show this help message.\00", align 1
@3 = private unnamed_addr constant [41 x i8] c" --print-tokens\09\09\09Print generated Tokens\00", align 1
@4 = private unnamed_addr constant [36 x i8] c" --print-ast\09\09\09Print generated AST.\00", align 1
@5 = private unnamed_addr constant [40 x i8] c" --emit-llvm\09\09\09Print generated LLVM-IR.\00", align 1
@6 = private unnamed_addr constant [43 x i8] c" -o <file>\09\09\09Place the output into <file>.\00", align 1
@7 = private unnamed_addr constant [47 x i8] c" --target\09\09\09Compile to specific target triple.\00", align 1
@8 = private unnamed_addr constant [33 x i8] c" -I\09\09\09Specify runtime directory.\00", align 1
@9 = private unnamed_addr constant [93 x i8] c" -O OPT_LEVEL\0A \09\09\09\09Specify the compiler's optimization level which is a\0A \09\09\09\09value from 0-3.\00", align 1
@10 = private unnamed_addr constant [31 x i8] c" -v, --version\09\09\09Show version.\00", align 1
@11 = private unnamed_addr constant [8 x i8] c"\1B[1;31m\00", align 1
@12 = private unnamed_addr constant [22 x i8] c"[Illegal Character]: \00", align 1
@13 = private unnamed_addr constant [17 x i8] c"[Syntax Error]: \00", align 1
@14 = private unnamed_addr constant [13 x i8] c"[IO Error]: \00", align 1
@15 = private unnamed_addr constant [15 x i8] c"[Type Error]: \00", align 1
@16 = private unnamed_addr constant [15 x i8] c"[Name Error]: \00", align 1
@17 = private unnamed_addr constant [10 x i8] c"[Error]: \00", align 1
@18 = private unnamed_addr constant [35 x i8] c"Missing value after '%s' argument.\00", align 1
@19 = private unnamed_addr constant [10 x i8] c"--version\00", align 1
@20 = private unnamed_addr constant [20 x i8] c"v0.01@test.selfhost\00", align 1
@21 = private unnamed_addr constant [7 x i8] c"--help\00", align 1
@VTableArray_FloError_ = internal global <{ ptr }> <{ ptr @Array_FloError__find }>
@VTableArray_FloFile_ = internal global <{ ptr }> <{ ptr @Array_FloFile__find }>
@VTableBucket_string_FileId_ = internal global <{ ptr }> <{ ptr @Bucket_string_FileId__set }>
@VTableArray_Bucket_string_FileId__ = internal global <{ ptr }> <{ ptr @Array_Bucket_string_FileId___find }>
@VTableMap_string_FileId_ = internal global <{ ptr, ptr, ptr }> <{ ptr @Map_string_FileId__set, ptr @Map_string_FileId__get, ptr @Map_string_FileId__get_buckets }>
@22 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@VTableCompiler = internal global <{ ptr, ptr, ptr, ptr, ptr }> <{ ptr @Compiler_set_std_path, ptr @Compiler_register_file, ptr @Compiler_set_current_file, ptr @Compiler_print_errors, ptr @Compiler_add_builtins }>
@23 = private unnamed_addr constant [6 x i8] c"%s/%s\00", align 1
@24 = private unnamed_addr constant [23 x i8] c"/builtins/builtins.flo\00", align 1
@VTableFile = internal global <{ ptr, ptr }> <{ ptr @File_read_all, ptr @File_close }>
@25 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@26 = private unnamed_addr constant [19 x i8] c"File '%s', line %d\00", align 1
@VTableRangeIterator_int_ = internal global <{ ptr }> <{ ptr @RangeIterator_int____next__ }>
@27 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@28 = private unnamed_addr constant [32 x i8] c"No such file or directory: '%s'\00", align 1
@VTableArrayIterator_Token_ = internal global <{ ptr }> <{ ptr @ArrayIterator_Token____next__ }>
@VTableArray_Token_ = internal global <{ ptr }> <{ ptr @Array_Token__find }>
@VTableArray_Array_Token__ = internal global <{ ptr }> <{ ptr @Array_Array_Token___find }>
@VTableArray_int_ = internal global <{ ptr }> <{ ptr @Array_int__find }>
@29 = private unnamed_addr constant [4 x i8] c"and\00", align 1
@30 = private unnamed_addr constant [4 x i8] c"xor\00", align 1
@31 = private unnamed_addr constant [6 x i8] c"const\00", align 1
@32 = private unnamed_addr constant [4 x i8] c"let\00", align 1
@33 = private unnamed_addr constant [5 x i8] c"else\00", align 1
@34 = private unnamed_addr constant [4 x i8] c"i16\00", align 1
@35 = private unnamed_addr constant [4 x i8] c"i32\00", align 1
@36 = private unnamed_addr constant [4 x i8] c"i64\00", align 1
@37 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@38 = private unnamed_addr constant [4 x i8] c"f16\00", align 1
@39 = private unnamed_addr constant [4 x i8] c"f32\00", align 1
@40 = private unnamed_addr constant [4 x i8] c"f64\00", align 1
@41 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@42 = private unnamed_addr constant [4 x i8] c"for\00", align 1
@43 = private unnamed_addr constant [6 x i8] c"while\00", align 1
@44 = private unnamed_addr constant [4 x i8] c"fnc\00", align 1
@45 = private unnamed_addr constant [6 x i8] c"break\00", align 1
@46 = private unnamed_addr constant [7 x i8] c"return\00", align 1
@47 = private unnamed_addr constant [7 x i8] c"import\00", align 1
@48 = private unnamed_addr constant [8 x i8] c"private\00", align 1
@49 = private unnamed_addr constant [7 x i8] c"public\00", align 1
@50 = private unnamed_addr constant [10 x i8] c"protected\00", align 1
@51 = private unnamed_addr constant [6 x i8] c"class\00", align 1
@52 = private unnamed_addr constant [4 x i8] c"new\00", align 1
@VTableStringBuilder = internal global <{ ptr, ptr, ptr, ptr }> <{ ptr @StringBuilder_add_bytes_length, ptr @StringBuilder_append_string, ptr @StringBuilder_add_byte, ptr @StringBuilder_get_string }>
@53 = private unnamed_addr constant [4 x i8] c"033\00", align 1
@54 = private unnamed_addr constant [4 x i8] c"x1b\00", align 1
@55 = private unnamed_addr constant [6 x i8] c"u001b\00", align 1
@56 = private unnamed_addr constant [24 x i8] c"Illegal character: '%s'\00", align 1
@57 = private unnamed_addr constant [15 x i8] c"--print-tokens\00", align 1
@58 = private unnamed_addr constant [4 x i8] c"COL\00", align 1
@59 = private unnamed_addr constant [8 x i8] c"SEMICOL\00", align 1
@60 = private unnamed_addr constant [6 x i8] c"COMMA\00", align 1
@61 = private unnamed_addr constant [10 x i8] c"PLUS_PLUS\00", align 1
@62 = private unnamed_addr constant [6 x i8] c"MINUS\00", align 1
@63 = private unnamed_addr constant [12 x i8] c"MINUS_MINUS\00", align 1
@64 = private unnamed_addr constant [4 x i8] c"DIV\00", align 1
@65 = private unnamed_addr constant [4 x i8] c"MOD\00", align 1
@66 = private unnamed_addr constant [7 x i8] c"LBRACE\00", align 1
@67 = private unnamed_addr constant [7 x i8] c"RBRACE\00", align 1
@68 = private unnamed_addr constant [4 x i8] c"INT\00", align 1
@69 = private unnamed_addr constant [6 x i8] c"FLOAT\00", align 1
@70 = private unnamed_addr constant [4 x i8] c"STR\00", align 1
@71 = private unnamed_addr constant [4 x i8] c"POW\00", align 1
@72 = private unnamed_addr constant [4 x i8] c"AMP\00", align 1
@73 = private unnamed_addr constant [4 x i8] c"EEQ\00", align 1
@74 = private unnamed_addr constant [4 x i8] c"NEQ\00", align 1
@75 = private unnamed_addr constant [4 x i8] c"LTE\00", align 1
@76 = private unnamed_addr constant [4 x i8] c"GTE\00", align 1
@77 = private unnamed_addr constant [6 x i8] c"ARROW\00", align 1
@78 = private unnamed_addr constant [4 x i8] c"EOF\00", align 1
@79 = private unnamed_addr constant [4 x i8] c"NOT\00", align 1
@80 = private unnamed_addr constant [4 x i8] c"DOT\00", align 1
@81 = private unnamed_addr constant [8 x i8] c"DOT_DOT\00", align 1
@82 = private unnamed_addr constant [12 x i8] c"DOT_DOT_DOT\00", align 1
@83 = private unnamed_addr constant [10 x i8] c"IDENTIFER\00", align 1
@84 = private unnamed_addr constant [7 x i8] c"AND_KW\00", align 1
@85 = private unnamed_addr constant [6 x i8] c"OR_KW\00", align 1
@86 = private unnamed_addr constant [7 x i8] c"XOR_KW\00", align 1
@87 = private unnamed_addr constant [6 x i8] c"IF_KW\00", align 1
@88 = private unnamed_addr constant [8 x i8] c"ELSE_KW\00", align 1
@89 = private unnamed_addr constant [8 x i8] c"BOOL_KW\00", align 1
@90 = private unnamed_addr constant [6 x i8] c"I4_KW\00", align 1
@91 = private unnamed_addr constant [6 x i8] c"I8_KW\00", align 1
@92 = private unnamed_addr constant [7 x i8] c"I16_KW\00", align 1
@93 = private unnamed_addr constant [7 x i8] c"I32_KW\00", align 1
@94 = private unnamed_addr constant [7 x i8] c"I64_KW\00", align 1
@95 = private unnamed_addr constant [8 x i8] c"I128_KW\00", align 1
@96 = private unnamed_addr constant [7 x i8] c"INT_KW\00", align 1
@97 = private unnamed_addr constant [7 x i8] c"F16_KW\00", align 1
@98 = private unnamed_addr constant [7 x i8] c"F32_KW\00", align 1
@99 = private unnamed_addr constant [7 x i8] c"F64_KW\00", align 1
@100 = private unnamed_addr constant [8 x i8] c"VOID_KW\00", align 1
@101 = private unnamed_addr constant [7 x i8] c"FOR_KW\00", align 1
@102 = private unnamed_addr constant [7 x i8] c"FNC_KW\00", align 1
@103 = private unnamed_addr constant [12 x i8] c"CONTINUE_KW\00", align 1
@104 = private unnamed_addr constant [10 x i8] c"RETURN_KW\00", align 1
@105 = private unnamed_addr constant [10 x i8] c"IMPORT_KW\00", align 1
@106 = private unnamed_addr constant [11 x i8] c"PRIVATE_KW\00", align 1
@107 = private unnamed_addr constant [10 x i8] c"PUBLIC_KW\00", align 1
@108 = private unnamed_addr constant [13 x i8] c"PROTECTED_KW\00", align 1
@109 = private unnamed_addr constant [6 x i8] c"IN_KW\00", align 1
@110 = private unnamed_addr constant [8 x i8] c"ENUM_KW\00", align 1
@111 = private unnamed_addr constant [7 x i8] c"NEW_KW\00", align 1
@112 = private unnamed_addr constant [6 x i8] c"AS_KW\00", align 1
@113 = private unnamed_addr constant [7 x i8] c"LET_KW\00", align 1
@114 = private unnamed_addr constant [12 x i8] c"  type: %s,\00", align 1
@115 = private unnamed_addr constant [15 x i8] c"  range: %d-%d\00", align 1
@116 = private unnamed_addr constant [12 x i8] c"  value: %s\00", align 1
@117 = private unnamed_addr constant [12 x i8] c"  value: \\n\00", align 1
@118 = private unnamed_addr constant [4 x i8] c" },\00", align 1
@VTableArrayIterator_IdentifierToken_ = internal global <{ ptr }> <{ ptr @ArrayIterator_IdentifierToken____next__ }>
@VTableArray_IdentifierToken_ = internal global <{ ptr }> <{ ptr @Array_IdentifierToken__find }>
@VTableArrayIterator_ImportNode_ = internal global <{ ptr }> <{ ptr @ArrayIterator_ImportNode____next__ }>
@VTableArray_ImportNode_ = internal global <{ ptr }> <{ ptr @Array_ImportNode__find }>
@VTableArrayIterator_VarDeclarationStatement_ = internal global <{ ptr }> <{ ptr @ArrayIterator_VarDeclarationStatement____next__ }>
@VTableArray_VarDeclarationStatement_ = internal global <{ ptr }> <{ ptr @Array_VarDeclarationStatement__find }>
@VTableArray_EnumNodeField_ = internal global <{ ptr }> <{ ptr @Array_EnumNodeField__find }>
@VTableArrayIterator_EnumNode_ = internal global <{ ptr }> <{ ptr @ArrayIterator_EnumNode____next__ }>
@VTableArray_EnumNode_ = internal global <{ ptr }> <{ ptr @Array_EnumNode__find }>
@VTableArrayIterator_TypeAliasNode_ = internal global <{ ptr }> <{ ptr @ArrayIterator_TypeAliasNode____next__ }>
@VTableArray_TypeAliasNode_ = internal global <{ ptr }> <{ ptr @Array_TypeAliasNode__find }>
@VTableArrayIterator_ConstDeclarationStatement_ = internal global <{ ptr }> <{ ptr @ArrayIterator_ConstDeclarationStatement____next__ }>
@VTableArray_ConstDeclarationStatement_ = internal global <{ ptr }> <{ ptr @Array_ConstDeclarationStatement__find }>
@VTableArrayIterator_ArgNode_ = internal global <{ ptr }> <{ ptr @ArrayIterator_ArgNode____next__ }>
@VTableArray_ArgNode_ = internal global <{ ptr }> <{ ptr @Array_ArgNode__find }>
@VTableArrayIterator_StatementNode_ = internal global <{ ptr }> <{ ptr @ArrayIterator_StatementNode____next__ }>
@VTableArray_StatementNode_ = internal global <{ ptr }> <{ ptr @Array_StatementNode__find }>
@VTableArray_MethodNode_ = internal global <{ ptr }> <{ ptr @Array_MethodNode__find }>
@VTableArray_FieldNode_ = internal global <{ ptr }> <{ ptr @Array_FieldNode__find }>
@VTableArrayIterator_TypeNode_ = internal global <{ ptr }> <{ ptr @ArrayIterator_TypeNode____next__ }>
@VTableArray_TypeNode_ = internal global <{ ptr }> <{ ptr @Array_TypeNode__find }>
@VTableArray_GenericParameterNode_ = internal global <{ ptr }> <{ ptr @Array_GenericParameterNode__find }>
@VTableArrayIterator_ClassDeclarationNode_ = internal global <{ ptr }> <{ ptr @ArrayIterator_ClassDeclarationNode____next__ }>
@VTableArray_ClassDeclarationNode_ = internal global <{ ptr }> <{ ptr @Array_ClassDeclarationNode__find }>
@VTableArrayIterator_FunctionDeclarationNode_ = internal global <{ ptr }> <{ ptr @ArrayIterator_FunctionDeclarationNode____next__ }>
@VTableArray_FunctionDeclarationNode_ = internal global <{ ptr }> <{ ptr @Array_FunctionDeclarationNode__find }>
@VTableArrayIterator_ExpressionNode_ = internal global <{ ptr }> <{ ptr @ArrayIterator_ExpressionNode____next__ }>
@VTableArray_ExpressionNode_ = internal global <{ ptr }> <{ ptr @Array_ExpressionNode__find }>
@119 = private unnamed_addr constant [23 x i8] c"Expected an Identifier\00", align 1
@120 = private unnamed_addr constant [13 x i8] c"Expected '='\00", align 1
@121 = private unnamed_addr constant [13 x i8] c"Expected ':'\00", align 1
@122 = private unnamed_addr constant [13 x i8] c"Expected '('\00", align 1
@123 = private unnamed_addr constant [13 x i8] c"Expected ')'\00", align 1
@124 = private unnamed_addr constant [13 x i8] c"Expected '{'\00", align 1
@125 = private unnamed_addr constant [13 x i8] c"Expected '}'\00", align 1
@126 = private unnamed_addr constant [13 x i8] c"Expected ','\00", align 1
@127 = private unnamed_addr constant [13 x i8] c"Expected '<'\00", align 1
@128 = private unnamed_addr constant [13 x i8] c"Expected '>'\00", align 1
@129 = private unnamed_addr constant [14 x i8] c"Expected '=>'\00", align 1
@130 = private unnamed_addr constant [27 x i8] c"Expected a type definition\00", align 1
@131 = private unnamed_addr constant [6 x i8] c"Array\00", align 1
@132 = private unnamed_addr constant [29 x i8] c"Expected an Expression value\00", align 1
@133 = private unnamed_addr constant [29 x i8] c"'%s' has no type information\00", align 1
@134 = private unnamed_addr constant [5 x i8] c"this\00", align 1
@135 = private unnamed_addr constant [20 x i8] c"Expected ':' or '('\00", align 1
@136 = private unnamed_addr constant [80 x i8] c"Illegal expression expected: 'fnc', 'class', 'enum', 'import', 'const' or 'let'\00", align 1
@VTableBucket_string_VarId_ = internal global <{ ptr }> <{ ptr @Bucket_string_VarId__set }>
@VTableArray_Bucket_string_VarId__ = internal global <{ ptr }> <{ ptr @Array_Bucket_string_VarId___find }>
@VTableMap_string_VarId_ = internal global <{ ptr, ptr, ptr }> <{ ptr @Map_string_VarId__set, ptr @Map_string_VarId__get, ptr @Map_string_VarId__get_buckets }>
@VTableBucket_string_EnumId_ = internal global <{ ptr }> <{ ptr @Bucket_string_EnumId__set }>
@VTableArray_Bucket_string_EnumId__ = internal global <{ ptr }> <{ ptr @Array_Bucket_string_EnumId___find }>
@VTableMap_string_EnumId_ = internal global <{ ptr, ptr, ptr }> <{ ptr @Map_string_EnumId__set, ptr @Map_string_EnumId__get, ptr @Map_string_EnumId__get_buckets }>
@VTableBucket_string_Type_ = internal global <{ ptr }> <{ ptr @Bucket_string_Type__set }>
@VTableArrayIterator_Bucket_string_Type__ = internal global <{ ptr }> <{ ptr @ArrayIterator_Bucket_string_Type_____next__ }>
@VTableArray_Bucket_string_Type__ = internal global <{ ptr }> <{ ptr @Array_Bucket_string_Type___find }>
@VTableMap_string_Type_ = internal global <{ ptr, ptr, ptr }> <{ ptr @Map_string_Type__set, ptr @Map_string_Type__get, ptr @Map_string_Type__get_buckets }>
@VTableBucket_string_ClassId_ = internal global <{ ptr }> <{ ptr @Bucket_string_ClassId__set }>
@VTableArray_Bucket_string_ClassId__ = internal global <{ ptr }> <{ ptr @Array_Bucket_string_ClassId___find }>
@VTableMap_string_ClassId_ = internal global <{ ptr, ptr, ptr }> <{ ptr @Map_string_ClassId__set, ptr @Map_string_ClassId__get, ptr @Map_string_ClassId__get_buckets }>
@VTableArray_Scope_ = internal global <{ ptr }> <{ ptr @Array_Scope__find }>
@VTableArrayIterator_VarDeclaration_ = internal global <{ ptr }> <{ ptr @ArrayIterator_VarDeclaration____next__ }>
@VTableArray_VarDeclaration_ = internal global <{ ptr }> <{ ptr @Array_VarDeclaration__find }>
@VTableArray_Var_ = internal global <{ ptr }> <{ ptr @Array_Var__find }>
@VTableArrayIterator_ConstDeclaration_ = internal global <{ ptr }> <{ ptr @ArrayIterator_ConstDeclaration____next__ }>
@VTableArray_ConstDeclaration_ = internal global <{ ptr }> <{ ptr @Array_ConstDeclaration__find }>
@VTableBucket_string_PropId_ = internal global <{ ptr }> <{ ptr @Bucket_string_PropId__set }>
@VTableArrayIterator_Bucket_string_PropId__ = internal global <{ ptr }> <{ ptr @ArrayIterator_Bucket_string_PropId_____next__ }>
@VTableArray_Bucket_string_PropId__ = internal global <{ ptr }> <{ ptr @Array_Bucket_string_PropId___find }>
@VTableMap_string_PropId_ = internal global <{ ptr, ptr, ptr }> <{ ptr @Map_string_PropId__set, ptr @Map_string_PropId__get, ptr @Map_string_PropId__get_buckets }>
@VTableArrayIterator_EnumField_ = internal global <{ ptr }> <{ ptr @ArrayIterator_EnumField____next__ }>
@VTableArray_EnumField_ = internal global <{ ptr }> <{ ptr @Array_EnumField__find }>
@VTableArrayIterator_Enum_ = internal global <{ ptr }> <{ ptr @ArrayIterator_Enum____next__ }>
@VTableArray_Enum_ = internal global <{ ptr }> <{ ptr @Array_Enum__find }>
@VTableArray_Const_ = internal global <{ ptr }> <{ ptr @Array_Const__find }>
@VTableArray_FunctionArg_ = internal global <{ ptr }> <{ ptr @Array_FunctionArg__find }>
@VTableArrayIterator_Statement_ = internal global <{ ptr }> <{ ptr @ArrayIterator_Statement____next__ }>
@VTableArray_Statement_ = internal global <{ ptr }> <{ ptr @Array_Statement__find }>
@VTableArrayIterator_Type_ = internal global <{ ptr }> <{ ptr @ArrayIterator_Type____next__ }>
@VTableArray_Type_ = internal global <{ ptr }> <{ ptr @Array_Type__find }>
@VTableArrayIterator_ClassMethod_ = internal global <{ ptr }> <{ ptr @ArrayIterator_ClassMethod____next__ }>
@VTableArray_ClassMethod_ = internal global <{ ptr }> <{ ptr @Array_ClassMethod__find }>
@VTableArray_ClassField_ = internal global <{ ptr }> <{ ptr @Array_ClassField__find }>
@VTableArrayIterator_Class_ = internal global <{ ptr }> <{ ptr @ArrayIterator_Class____next__ }>
@VTableArray_Class_ = internal global <{ ptr }> <{ ptr @Array_Class__find }>
@VTableArrayIterator_Function_ = internal global <{ ptr }> <{ ptr @ArrayIterator_Function____next__ }>
@VTableArray_Function_ = internal global <{ ptr }> <{ ptr @Array_Function__find }>
@VTableArray_Module_ = internal global <{ ptr }> <{ ptr @Array_Module__find }>
@VTableArrayIterator_Expression_ = internal global <{ ptr }> <{ ptr @ArrayIterator_Expression____next__ }>
@VTableArray_Expression_ = internal global <{ ptr }> <{ ptr @Array_Expression__find }>
@VTableBucket_string_Generic_ = internal global <{ ptr }> <{ ptr @Bucket_string_Generic__set }>
@VTableArray_Bucket_string_Generic__ = internal global <{ ptr }> <{ ptr @Array_Bucket_string_Generic___find }>
@VTableMap_string_Generic_ = internal global <{ ptr, ptr, ptr }> <{ ptr @Map_string_Generic__set, ptr @Map_string_Generic__get, ptr @Map_string_Generic__get_buckets }>
@137 = private unnamed_addr constant [11 x i8] c"(%s) => %s\00", align 1
@138 = private unnamed_addr constant [4 x i8] c"%s*\00", align 1
@139 = private unnamed_addr constant [7 x i8] c"%s[%d]\00", align 1
@140 = private unnamed_addr constant [4 x i8] c"i%d\00", align 1
@141 = private unnamed_addr constant [4 x i8] c"f%d\00", align 1
@142 = private unnamed_addr constant [7 x i8] c"record\00", align 1
@143 = private unnamed_addr constant [8 x i8] c"unknown\00", align 1
@144 = private unnamed_addr constant [13 x i8] c"__generics__\00", align 1
@145 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@146 = private unnamed_addr constant [68 x i8] c"Name '%s' has already been used for another type. consider renaming\00", align 1
@147 = private unnamed_addr constant [41 x i8] c"Generic expects %d parameters but got %d\00", align 1
@148 = private unnamed_addr constant [4 x i8] c"%s_\00", align 1
@149 = private unnamed_addr constant [6 x i8] c"%s_%s\00", align 1
@150 = private unnamed_addr constant [55 x i8] c"Initilializer for global variable has to be a constant\00", align 1
@151 = private unnamed_addr constant [56 x i8] c"Expected type of '%s' but got type of '%s' on signature\00", align 1
@152 = private unnamed_addr constant [52 x i8] c"Import statement path can't be a a formatted string\00", align 1
@153 = private unnamed_addr constant [28 x i8] c"%s not found in module \22\22%s\00", align 1
@154 = private unnamed_addr constant [37 x i8] c"Illegal re-declaration of const '%s'\00", align 1
@155 = private unnamed_addr constant [48 x i8] c"Illegal re-declaration of type '%s' as function\00", align 1
@156 = private unnamed_addr constant [53 x i8] c"Expected an int type for enum type but got type '%s'\00", align 1
@157 = private unnamed_addr constant [38 x i8] c"Enum initializer has to be a constant\00", align 1
@158 = private unnamed_addr constant [36 x i8] c"Expected type '%s' but got type '%s\00", align 1
@159 = private unnamed_addr constant [7 x i8] c"__eq__\00", align 1
@160 = private unnamed_addr constant [8 x i8] c"__add__\00", align 1
@161 = private unnamed_addr constant [8 x i8] c"__sub__\00", align 1
@162 = private unnamed_addr constant [8 x i8] c"__mul__\00", align 1
@163 = private unnamed_addr constant [8 x i8] c"__div__\00", align 1
@164 = private unnamed_addr constant [7 x i8] c"__or__\00", align 1
@165 = private unnamed_addr constant [8 x i8] c"__ora__\00", align 1
@166 = private unnamed_addr constant [12 x i8] c"__getitem__\00", align 1
@167 = private unnamed_addr constant [12 x i8] c"__setitem__\00", align 1
@168 = private unnamed_addr constant [7 x i8] c"__sl__\00", align 1
@169 = private unnamed_addr constant [7 x i8] c"__sr__\00", align 1
@170 = private unnamed_addr constant [8 x i8] c"__sla__\00", align 1
@171 = private unnamed_addr constant [8 x i8] c"__sra__\00", align 1
@172 = private unnamed_addr constant [7 x i8] c"__in__\00", align 1
@173 = private unnamed_addr constant [7 x i8] c"__lt__\00", align 1
@174 = private unnamed_addr constant [7 x i8] c"__lg__\00", align 1
@175 = private unnamed_addr constant [7 x i8] c"__ne__\00", align 1
@176 = private unnamed_addr constant [7 x i8] c"__le__\00", align 1
@177 = private unnamed_addr constant [7 x i8] c"__ge__\00", align 1
@178 = private unnamed_addr constant [8 x i8] c"__pow__\00", align 1
@179 = private unnamed_addr constant [8 x i8] c"__mod__\00", align 1
@180 = private unnamed_addr constant [76 x i8] c" is reserved only for operator overloads and cannot be used as a field name\00", align 1
@181 = private unnamed_addr constant [36 x i8] c"Field %s in class %s already exists\00", align 1
@182 = private unnamed_addr constant [89 x i8] c"Signature of inherited field %s in class %s does not match expected parent signature '%s\00", align 1
@183 = private unnamed_addr constant [49 x i8] c"Expected inherited field %s in class %s to be %s\00", align 1
@184 = private unnamed_addr constant [68 x i8] c"Expected type '%s' but got type '%s' on static field initialization\00", align 1
@185 = private unnamed_addr constant [46 x i8] c"Static field initializer has to be a constant\00", align 1
@186 = private unnamed_addr constant [65 x i8] c"Expected %d arguments for binary operator overload %s but got %d\00", align 1
@187 = private unnamed_addr constant [45 x i8] c"Binary operator overload %s cannot be static\00", align 1
@188 = private unnamed_addr constant [37 x i8] c"Method %s in class %s already exists\00", align 1
@189 = private unnamed_addr constant [91 x i8] c"Signature of inherited method %s in class %s does not match expected parent signature '%s'\00", align 1
@190 = private unnamed_addr constant [50 x i8] c"Expected inherited method %s in class %s to be %s\00", align 1
@191 = private unnamed_addr constant [32 x i8] c"Static method can't be abstract\00", align 1
@192 = private unnamed_addr constant [12 x i8] c"constructor\00", align 1
@193 = private unnamed_addr constant [34 x i8] c"Class constructor can't be static\00", align 1
@194 = private unnamed_addr constant [36 x i8] c"Class constructor can't be abstract\00", align 1
@195 = private unnamed_addr constant [59 x i8] c"Can't have a abstract private method use protected instead\00", align 1
@196 = private unnamed_addr constant [6 x i8] c"super\00", align 1
@197 = private unnamed_addr constant [42 x i8] c"Can only inherit from class not type '%s'\00", align 1
@198 = private unnamed_addr constant [81 x i8] c"Class with constructor must implement all it's methods missing %s implementation\00", align 1
@199 = private unnamed_addr constant [39 x i8] c"Method missing ending return statement\00", align 1
@200 = private unnamed_addr constant [41 x i8] c"Function missing ending return statement\00", align 1
@201 = private unnamed_addr constant [17 x i8] c"length is an int\00", align 1
@202 = private unnamed_addr constant [31 x i8] c"length is a non-constant value\00", align 1
@203 = private unnamed_addr constant [32 x i8] c"length should be greater than 0\00", align 1
@204 = private unnamed_addr constant [20 x i8] c"Undefined type '%s'\00", align 1
@205 = private unnamed_addr constant [48 x i8] c"Expected element type of '%s' but got type '%s'\00", align 1
@206 = private unnamed_addr constant [38 x i8] c"Cannot create array without type hint\00", align 1
@207 = private unnamed_addr constant [24 x i8] c"Undefined variable '%s'\00", align 1
@208 = private unnamed_addr constant [34 x i8] c"Cannot assign a value to a record\00", align 1
@209 = private unnamed_addr constant [36 x i8] c"Cannot assign a value to a constant\00", align 1
@210 = private unnamed_addr constant [52 x i8] c"Illegal assignment of variable of type '%s' to '%s'\00", align 1
@211 = private unnamed_addr constant [7 x i8] c"__gt__\00", align 1
@212 = private unnamed_addr constant [8 x i8] c"__and__\00", align 1
@213 = private unnamed_addr constant [8 x i8] c"__xor__\00", align 1
@214 = private unnamed_addr constant [37 x i8] c"Expected type '%s' but got type '%s'\00", align 1
@215 = private unnamed_addr constant [55 x i8] c"Unsupported binary operator overload for operator '%s'\00", align 1
@216 = private unnamed_addr constant [108 x i8] c"No binary operator overload for '%s' in object of class '%s' please implement the method %s to support this\00", align 1
@217 = private unnamed_addr constant [114 x i8] c"No operator overload for index set operator on %s object please implement method __setitem__ to use in this class\00", align 1
@218 = private unnamed_addr constant [6 x i8] c"Range\00", align 1
@219 = private unnamed_addr constant [58 x i8] c"Illegal binary operation '%s' between types '%s' and '%s'\00", align 1
@220 = private unnamed_addr constant [8 x i8] c"++(pre)\00", align 1
@221 = private unnamed_addr constant [8 x i8] c"--(pre)\00", align 1
@222 = private unnamed_addr constant [39 x i8] c"Illegal unary operation %s on constant\00", align 1
@223 = private unnamed_addr constant [40 x i8] c"Illegal unary operation %s on type '%s'\00", align 1
@224 = private unnamed_addr constant [7 x i8] c"string\00", align 1
@225 = private unnamed_addr constant [30 x i8] c"Cannot cast type '%s' to '%s'\00", align 1
@226 = private unnamed_addr constant [45 x i8] c"Cannot construct an object of abstract class\00", align 1
@227 = private unnamed_addr constant [55 x i8] c"Expected %d argument(s) on constructor call but got %d\00", align 1
@228 = private unnamed_addr constant [71 x i8] c"Expected type '%s' but got type '%s' as constructor call argument (%d)\00", align 1
@229 = private unnamed_addr constant [68 x i8] c"New operator expects 1 argument for pointers but got %d argument(s)\00", align 1
@230 = private unnamed_addr constant [23 x i8] c"Type {\0A 'kind': %s, \0A}\00", align 1
@231 = private unnamed_addr constant [74 x i8] c"New operator for pointers expects argument of type '%s' but got type '%s'\00", align 1
@232 = private unnamed_addr constant [65 x i8] c"New operator expects either an a pointer or an object not a '%s'\00", align 1
@233 = private unnamed_addr constant [76 x i8] c"Property '%s' is defined as private and only accessible within the class %s\00", align 1
@234 = private unnamed_addr constant [71 x i8] c"Property '%s' is defined as %s and only accessible within the class %s\00", align 1
@235 = private unnamed_addr constant [52 x i8] c"Property '%s' doesn't exist in object of class '%s'\00", align 1
@236 = private unnamed_addr constant [50 x i8] c"Property '%s' is not a static member in class '%s\00", align 1
@237 = private unnamed_addr constant [40 x i8] c"'%s' is not an element of enum the '%s'\00", align 1
@238 = private unnamed_addr constant [10 x i8] c"copy_from\00", align 1
@239 = private unnamed_addr constant [10 x i8] c"move_from\00", align 1
@240 = private unnamed_addr constant [10 x i8] c"fill_with\00", align 1
@241 = private unnamed_addr constant [7 x i8] c"resize\00", align 1
@242 = private unnamed_addr constant [8 x i8] c"compare\00", align 1
@243 = private unnamed_addr constant [28 x i8] c"intrinsic %s is not defined\00", align 1
@244 = private unnamed_addr constant [38 x i8] c"Cannot get property '%s' of type '%s'\00", align 1
@245 = private unnamed_addr constant [53 x i8] c"Expected type '%s' from first case but got type '%s'\00", align 1
@246 = private unnamed_addr constant [122 x i8] c"No operator overload for indexing operator on %s object please implement method __getitem__ to use indexing in this class\00", align 1
@247 = private unnamed_addr constant [35 x i8] c"Expected an integer type for index\00", align 1
@248 = private unnamed_addr constant [39 x i8] c"Cannot index into a value of type '%s'\00", align 1
@249 = private unnamed_addr constant [47 x i8] c"Expected a function type for call but got '%s'\00", align 1
@250 = private unnamed_addr constant [52 x i8] c"Expected %d argument(s) on function call but got %d\00", align 1
@251 = private unnamed_addr constant [63 x i8] c"Expected type '%s' but got type '%s' as function call argument\00", align 1
@252 = private unnamed_addr constant [66 x i8] c"Expected argument 1 to be of type to be of a pointer but got '%s'\00", align 1
@253 = private unnamed_addr constant [49 x i8] c"Expected 2 arguments on function call but got %d\00", align 1
@254 = private unnamed_addr constant [63 x i8] c"Expected an int of but got type '%s' as function call argument\00", align 1
@255 = private unnamed_addr constant [49 x i8] c"Expected 3 arguments on function call but got %d\00", align 1
@256 = private unnamed_addr constant [66 x i8] c"Expected type '%s' of but got type '%s' as function call argument\00", align 1
@257 = private unnamed_addr constant [26 x i8] c"Variable '%s' has no type\00", align 1
@258 = private unnamed_addr constant [70 x i8] c"Cannot declare a value as null without any type hint for future usage\00", align 1
@259 = private unnamed_addr constant [61 x i8] c"Expected type '%s' but got type '%s' on variable declaration\00", align 1
@260 = private unnamed_addr constant [57 x i8] c"Illegal re-declaration of already declared variable '%s'\00", align 1
@261 = private unnamed_addr constant [49 x i8] c"Cannot assign a non-constant value to a constant\00", align 1
@262 = private unnamed_addr constant [29 x i8] c"Iterator has to be an object\00", align 1
@263 = private unnamed_addr constant [47 x i8] c"Iterator type has to have __iter__ as property\00", align 1
@264 = private unnamed_addr constant [7 x i8] c"tmp_it\00", align 1
@265 = private unnamed_addr constant [30 x i8] c"Illegal break outside of loop\00", align 1
@266 = private unnamed_addr constant [33 x i8] c"Illegal continue outside of loop\00", align 1
@267 = private unnamed_addr constant [55 x i8] c"Function with void return type cannot return any value\00", align 1
@268 = private unnamed_addr constant [57 x i8] c"Expected return type of '%s' but got return type of '%s'\00", align 1
@269 = private unnamed_addr constant [33 x i8] c"Function return type is not void\00", align 1
@VTableGeneratedModule = internal global <{ ptr, ptr, ptr, ptr, ptr }> <{ ptr @GeneratedModule_run_passes, ptr @GeneratedModule_exec, ptr @GeneratedModule_write_object, ptr @GeneratedModule_print, ptr @GeneratedModule_llvm_shutdown }>
@270 = private unnamed_addr constant [10 x i8] c"Panic: %s\00", align 1
@271 = private unnamed_addr constant [10 x i8] c"error: %s\00", align 1
@272 = private unnamed_addr constant [5 x i8] c"main\00", align 1
@273 = private unnamed_addr constant [49 x i8] c"Main function not found in module; can't execute\00", align 1
@274 = private unnamed_addr constant [8 x i8] c"generic\00", align 1
@275 = private unnamed_addr constant [10 x i8] c"output.ll\00", align 1
@VTableArrayIterator_LLVMValueRef_ = internal global <{ ptr }> <{ ptr @ArrayIterator_LLVMValueRef____next__ }>
@VTableArray_LLVMValueRef_ = internal global <{ ptr }> <{ ptr @Array_LLVMValueRef__find }>
@VTableBucket_string_LLVMValueRef_ = internal global <{ ptr }> <{ ptr @Bucket_string_LLVMValueRef__set }>
@VTableArray_Bucket_string_LLVMValueRef__ = internal global <{ ptr }> <{ ptr @Array_Bucket_string_LLVMValueRef___find }>
@VTableMap_string_LLVMValueRef_ = internal global <{ ptr, ptr, ptr }> <{ ptr @Map_string_LLVMValueRef__set, ptr @Map_string_LLVMValueRef__get, ptr @Map_string_LLVMValueRef__get_buckets }>
@VTableBucket_string_int_ = internal global <{ ptr }> <{ ptr @Bucket_string_int__set }>
@VTableArray_Bucket_string_int__ = internal global <{ ptr }> <{ ptr @Array_Bucket_string_int___find }>
@VTableMap_string_int_ = internal global <{ ptr, ptr, ptr }> <{ ptr @Map_string_int__set, ptr @Map_string_int__get, ptr @Map_string_int__get_buckets }>
@VTableBucket_string_CGClassType_ = internal global <{ ptr }> <{ ptr @Bucket_string_CGClassType__set }>
@VTableArray_Bucket_string_CGClassType__ = internal global <{ ptr }> <{ ptr @Array_Bucket_string_CGClassType___find }>
@VTableMap_string_CGClassType_ = internal global <{ ptr, ptr, ptr }> <{ ptr @Map_string_CGClassType__set, ptr @Map_string_CGClassType__get, ptr @Map_string_CGClassType__get_buckets }>
@VTableArrayIterator_LLVMTypeRef_ = internal global <{ ptr }> <{ ptr @ArrayIterator_LLVMTypeRef____next__ }>
@VTableArray_LLVMTypeRef_ = internal global <{ ptr }> <{ ptr @Array_LLVMTypeRef__find }>
@VTableBucket_string_CGEnumType_ = internal global <{ ptr }> <{ ptr @Bucket_string_CGEnumType__set }>
@VTableArray_Bucket_string_CGEnumType__ = internal global <{ ptr }> <{ ptr @Array_Bucket_string_CGEnumType___find }>
@VTableMap_string_CGEnumType_ = internal global <{ ptr, ptr, ptr }> <{ ptr @Map_string_CGEnumType__set, ptr @Map_string_CGEnumType__get, ptr @Map_string_CGEnumType__get_buckets }>
@276 = private unnamed_addr constant [9 x i8] c"%d;%d;%d\00", align 1
@277 = private unnamed_addr constant [33 x i8] c"Type could not be code generated\00", align 1
@278 = private unnamed_addr constant [8 x i8] c"realloc\00", align 1
@279 = private unnamed_addr constant [7 x i8] c"memcmp\00", align 1
@280 = private unnamed_addr constant [6 x i8] c"%s {\0A\00", align 1
@281 = private unnamed_addr constant [7 x i8] c" ... }\00", align 1
@282 = private unnamed_addr constant [4 x i8] c"lld\00", align 1
@283 = private unnamed_addr constant [4 x i8] c"%lf\00", align 1
@284 = private unnamed_addr constant [13 x i8] c" '%s': %s, \0A\00", align 1
@285 = private unnamed_addr constant [11 x i8] c"<function>\00", align 1
@286 = private unnamed_addr constant [18 x i8] c"string_from_bytes\00", align 1
@287 = private unnamed_addr constant [55 x i8] c"Could not find function 'string.from_bytes' in program\00", align 1
@288 = private unnamed_addr constant [46 x i8] c"This should never happen! (get_expr_mem: var)\00", align 1
@289 = private unnamed_addr constant [9 x i8] c"arrayidx\00", align 1
@290 = private unnamed_addr constant [7 x i8] c"ptridx\00", align 1
@291 = private unnamed_addr constant [9 x i8] c"%s;%d;%d\00", align 1
@292 = private unnamed_addr constant [10 x i8] c"memberidx\00", align 1
@293 = private unnamed_addr constant [7 x i8] c"buffer\00", align 1
@294 = private unnamed_addr constant [7 x i8] c"length\00", align 1
@295 = private unnamed_addr constant [12 x i8] c"llvm.pow.%s\00", align 1
@296 = private unnamed_addr constant [23 x i8] c"Unknown case! %s %s %s\00", align 1
@297 = private unnamed_addr constant [11 x i8] c"incdec.ptr\00", align 1
@298 = private unnamed_addr constant [51 x i8] c"This should never happen; (codegen_var_access_exp)\00", align 1
@299 = private unnamed_addr constant [11 x i8] c"true_block\00", align 1
@300 = private unnamed_addr constant [12 x i8] c"false_block\00", align 1
@301 = private unnamed_addr constant [4 x i8] c"end\00", align 1
@302 = private unnamed_addr constant [8 x i8] c"ternary\00", align 1
@303 = private unnamed_addr constant [52 x i8] c"this should not happen; (codegen_member_exp); class\00", align 1
@304 = private unnamed_addr constant [60 x i8] c"This should never happen; (codegen_member_expr; class prop)\00", align 1
@305 = private unnamed_addr constant [51 x i8] c"this should not happen; (codegen_member_exp); enum\00", align 1
@306 = private unnamed_addr constant [11 x i8] c"to_cstring\00", align 1
@307 = private unnamed_addr constant [22 x i8] c"instrinsic not found!\00", align 1
@308 = private unnamed_addr constant [9 x i8] c"if.entry\00", align 1
@309 = private unnamed_addr constant [6 x i8] c"ifend\00", align 1
@310 = private unnamed_addr constant [10 x i8] c"for.entry\00", align 1
@311 = private unnamed_addr constant [9 x i8] c"for.cond\00", align 1
@312 = private unnamed_addr constant [9 x i8] c"for.body\00", align 1
@313 = private unnamed_addr constant [9 x i8] c"for.incr\00", align 1
@314 = private unnamed_addr constant [8 x i8] c"for.end\00", align 1
@315 = private unnamed_addr constant [12 x i8] c"while.entry\00", align 1
@316 = private unnamed_addr constant [10 x i8] c"while.end\00", align 1
@317 = private unnamed_addr constant [48 x i8] c"Could not find constructor for constructor call\00", align 1
@318 = private unnamed_addr constant [76 x i8] c"This should not happen: could not find function %s_%s (declare_class_props)\00", align 1
@319 = private unnamed_addr constant [9 x i8] c"VTable%s\00", align 1
@320 = private unnamed_addr constant [15 x i8] c"%s_constructor\00", align 1
@321 = private unnamed_addr constant [12 x i8] c"--emit-llvm\00", align 1
@322 = private unnamed_addr constant [4 x i8] c"a.o\00", align 1
@323 = private unnamed_addr constant [25 x i8] c"No input file specified.\00", align 1

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @string_find(ptr nocapture readonly %0, ptr nocapture readonly %1, i64 %2) #0 {
for.entry:
  %memberidx = getelementptr inbounds %string, ptr %0, i64 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %4 = icmp sgt i64 %3, %2
  br i1 %4, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = load i8, ptr %5, align 1
  %memberidx2 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %memberidx2, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.026 = phi i64 [ %2, %for.body.lr.ph ], [ %13, %ifend ]
  %ptridx3 = getelementptr inbounds i8, ptr %7, i64 %i.026
  %8 = load i8, ptr %ptridx3, align 1
  %9 = icmp eq i8 %6, %8
  br i1 %9, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %ifend11, %while.entry, %for.entry, %if.entry
  %common.ret.op = phi i64 [ %i.026, %if.entry ], [ -1, %for.entry ], [ -1, %while.entry ], [ %i.026, %ifend11 ], [ -1, %ifend ]
  ret i64 %common.ret.op

if.entry:                                         ; preds = %for.body
  %memberidx4 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %10 = load i64, ptr %memberidx4, align 4
  %11 = add i64 %10, -1
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %while.entry, label %common.ret

ifend:                                            ; preds = %for.body
  %13 = add nsw i64 %i.026, 1
  %14 = icmp slt i64 %13, %3
  br i1 %14, label %for.body, label %common.ret

while.entry:                                      ; preds = %if.entry, %ifend11
  %15 = phi i64 [ %19, %ifend11 ], [ %11, %if.entry ]
  %ptridx6 = getelementptr inbounds i8, ptr %5, i64 %15
  %16 = load i8, ptr %ptridx6, align 1
  %17 = add i64 %15, %i.026
  %ptridx8 = getelementptr inbounds i8, ptr %7, i64 %17
  %18 = load i8, ptr %ptridx8, align 1
  %.not = icmp eq i8 %16, %18
  br i1 %.not, label %ifend11, label %common.ret

ifend11:                                          ; preds = %while.entry
  %19 = add i64 %15, -1
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %while.entry, label %common.ret
}

define internal noalias ptr @string_substring(ptr nocapture readonly %0, i64 %1, i64 %2) {
  %4 = tail call ptr @malloc(i32 32)
  %memberidx = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 %1
  store ptr @VTablestring, ptr %4, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %4, i64 0, i32 1
  store ptr %6, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  store i64 %2, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %4, i64 0, i32 3
  store i64 %2, ptr %memberidx2.i, align 4
  ret ptr %4
}

define internal ptr @string_replace(ptr %0, ptr %1, ptr nocapture readonly %2) {
  %4 = load ptr, ptr %0, align 8
  %5 = load ptr, ptr %4, align 8
  %6 = tail call i64 %5(ptr nonnull %0, ptr %1, i64 0)
  %7 = icmp sgt i64 %6, -1
  br i1 %7, label %if.entry, label %common.ret

common.ret:                                       ; preds = %3, %if.entry
  %common.ret.op = phi ptr [ %23, %if.entry ], [ %0, %3 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %3
  %memberidx1 = getelementptr inbounds %string, ptr %0, i64 0, i32 2
  %8 = load i64, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %9 = load i64, ptr %memberidx2, align 4
  %10 = sub i64 %8, %9
  %memberidx3 = getelementptr inbounds %string, ptr %2, i64 0, i32 2
  %11 = load i64, ptr %memberidx3, align 4
  %12 = add i64 %10, %11
  %13 = trunc i64 %12 to i32
  %mallocsize = shl i32 %13, 3
  %14 = tail call ptr @malloc(i32 %mallocsize)
  %memberidx4 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %15 = load ptr, ptr %memberidx4, align 8
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 8 %14, ptr align 8 %15, i64 %6, i1 false)
  %ptridx = getelementptr inbounds i8, ptr %14, i64 %6
  %memberidx6 = getelementptr inbounds %string, ptr %2, i64 0, i32 1
  %16 = load ptr, ptr %memberidx6, align 8
  %17 = load i64, ptr %memberidx3, align 4
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %ptridx, ptr align 8 %16, i64 %17, i1 false)
  %18 = add i64 %17, %6
  %ptridx9 = getelementptr inbounds i8, ptr %14, i64 %18
  %19 = load i64, ptr %memberidx2, align 4
  %20 = add i64 %19, %6
  %ptridx14 = getelementptr inbounds i8, ptr %15, i64 %20
  %21 = load i64, ptr %memberidx1, align 4
  %22 = sub i64 %21, %20
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %ptridx9, ptr align 2147483648 %ptridx14, i64 %22, i1 false)
  %23 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %23, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %23, i64 0, i32 1
  store ptr %14, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %23, i64 0, i32 2
  store i64 %12, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %23, i64 0, i32 3
  store i64 %12, ptr %memberidx2.i, align 4
  br label %common.ret
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind readonly willreturn
define internal ptr @string_get_bytes(ptr nocapture readonly %0) #1 {
  %memberidx = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %2 = load ptr, ptr %memberidx, align 8
  ret ptr %2
}

define internal noalias ptr @string_to_cstring(ptr nocapture readonly %0) {
  %memberidx = getelementptr inbounds %string, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = trunc i64 %2 to i32
  %4 = shl i32 %3, 3
  %mallocsize = add i32 %4, 8
  %5 = tail call ptr @malloc(i32 %mallocsize)
  %memberidx1 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = load i64, ptr %memberidx, align 4
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 8 %5, ptr align 8 %6, i64 %7, i1 false)
  %ptridx = getelementptr inbounds i8, ptr %5, i64 %7
  store i8 0, ptr %ptridx, align 1
  ret ptr %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly willreturn
define internal i8 @string_get_byte(ptr nocapture readonly %0, i64 %1) #2 {
  %memberidx = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %ptridx = getelementptr inbounds i8, ptr %3, i64 %1
  %4 = load i8, ptr %ptridx, align 1
  ret i8 %4
}

define internal i1 @string_ends_with(ptr nocapture readonly %0, ptr nocapture readonly %1) {
  %memberidx = getelementptr inbounds %string, ptr %0, i64 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp slt i64 %3, %4
  br i1 %5, label %common.ret, label %ifend

common.ret:                                       ; preds = %2, %ifend
  %common.ret.op = phi i1 [ %12, %ifend ], [ false, %2 ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %2
  %memberidx2 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %memberidx2, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 %3
  %8 = sub i64 0, %4
  %9 = getelementptr inbounds i8, ptr %7, i64 %8
  %memberidx5 = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  %10 = load ptr, ptr %memberidx5, align 8
  %11 = tail call i64 @memcmp(ptr %9, ptr %10, i64 %4)
  %12 = icmp eq i64 %11, 0
  br label %common.ret
}

define internal i1 @string_starts_with(ptr nocapture readonly %0, ptr nocapture readonly %1) {
  %memberidx = getelementptr inbounds %string, ptr %0, i64 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp slt i64 %3, %4
  br i1 %5, label %common.ret, label %ifend

common.ret:                                       ; preds = %2, %ifend
  %common.ret.op = phi i1 [ %9, %ifend ], [ false, %2 ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %2
  %memberidx2 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  %7 = load ptr, ptr %memberidx3, align 8
  %8 = tail call i64 @memcmp(ptr %6, ptr %7, i64 %4)
  %9 = icmp eq i64 %8, 0
  br label %common.ret
}

declare noalias ptr @malloc(i32) local_unnamed_addr

; Function Attrs: argmemonly mustprogress nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inaccessiblemem_or_argmemonly mustprogress nounwind willreturn allockind("realloc") allocsize(1)
declare noalias noundef ptr @realloc(ptr allocptr nocapture, i64 noundef) local_unnamed_addr #4

declare i64 @memcmp(ptr, ptr, i64) local_unnamed_addr

; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn
declare i64 @strlen(ptr nocapture) local_unnamed_addr #5

define internal i64 @Array_string__find(ptr nocapture readonly %0, ptr nocapture readonly %1) {
for.entry:
  %memberidx = getelementptr inbounds %Array_string_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_string_, ptr %0, i64 0, i32 1
  %memberidx1.i = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %4 = phi i64 [ %2, %for.body.lr.ph ], [ %13, %ifend ]
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %14, %ifend ]
  %5 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %5, i64 %i.06
  %6 = load ptr, ptr %ptridx, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %6, i64 0, i32 2
  %7 = load i64, ptr %memberidx.i, align 4
  %8 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp eq i64 %7, %8
  br i1 %.not.i, label %ifend.i, label %ifend

ifend.i:                                          ; preds = %for.body
  %memberidx2.i = getelementptr inbounds %string, ptr %6, i64 0, i32 1
  %9 = load ptr, ptr %memberidx2.i, align 8
  %10 = load ptr, ptr %memberidx3.i, align 8
  %11 = tail call i64 @memcmp(ptr %9, ptr %10, i64 %7)
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %common.ret, label %ifend.i.ifend_crit_edge

ifend.i.ifend_crit_edge:                          ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx, align 4
  br label %ifend

common.ret:                                       ; preds = %ifend, %ifend.i, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %ifend.i ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %ifend.i.ifend_crit_edge, %for.body
  %13 = phi i64 [ %.pre, %ifend.i.ifend_crit_edge ], [ %4, %for.body ]
  %14 = add nuw nsw i64 %i.06, 1
  %15 = icmp slt i64 %14, %13
  br i1 %15, label %for.body, label %common.ret
}

; Function Attrs: nofree
declare void @write(i64 noundef, ptr nocapture noundef readonly, i64 noundef) local_unnamed_addr #6

declare i64 @asprintf(ptr, ptr, ...) local_unnamed_addr

; Function Attrs: inaccessiblemem_or_argmemonly mustprogress nounwind willreturn allockind("free")
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #7

define internal fastcc ptr @flag_value_or(ptr %0, ptr %1, ptr readnone %2) unnamed_addr {
  %4 = load ptr, ptr %0, align 8
  %5 = load ptr, ptr %4, align 8
  %6 = tail call i64 %5(ptr nonnull %0, ptr %1)
  %.not = icmp eq i64 %6, -1
  br i1 %.not, label %common.ret, label %if.entry

if.entry:                                         ; preds = %3
  %memberidx1 = getelementptr inbounds %Array_string_, ptr %0, i64 0, i32 2
  %7 = load i64, ptr %memberidx1, align 4
  %8 = add nuw i64 %6, 1
  %9 = icmp sgt i64 %7, %8
  br i1 %9, label %if.entry2, label %else3

common.ret:                                       ; preds = %else3, %3, %if.entry2
  %common.ret.op = phi ptr [ %11, %if.entry2 ], [ %2, %3 ], [ %2, %else3 ]
  ret ptr %common.ret.op

if.entry2:                                        ; preds = %if.entry
  %memberidx.i = getelementptr inbounds %Array_string_, ptr %0, i64 0, i32 1
  %10 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %10, i64 %8
  %11 = load ptr, ptr %ptridx.i, align 8
  br label %common.ret

else3:                                            ; preds = %if.entry
  %12 = load ptr, ptr %1, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i64 0, i32 5
  %13 = load ptr, ptr %memberidx5, align 8
  %14 = tail call ptr %13(ptr nonnull %1)
  %15 = alloca ptr, align 8
  %16 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %15, ptr nonnull @18, ptr %14)
  %17 = load ptr, ptr %15, align 8
  %18 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %18, align 8
  %memberidx.i11 = getelementptr inbounds %string, ptr %18, i64 0, i32 1
  store ptr %17, ptr %memberidx.i11, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %18, i64 0, i32 2
  store i64 %16, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %18, i64 0, i32 3
  store i64 %16, ptr %memberidx2.i, align 4
  tail call void @free(ptr %14)
  call fastcc void @print_message_error(i64 4, ptr nonnull %18)
  br label %common.ret
}

define internal fastcc void @print_message_error(i64 %0, ptr %1) unnamed_addr {
  %3 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %3, ptr noundef nonnull align 8 dereferenceable(7) @11, i64 7, i1 false)
  %4 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %4, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 1
  store ptr %3, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i.i, align 4
  %5 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %6 = tail call ptr %5(ptr nonnull %4)
  %7 = load i64, ptr %memberidx1.i.i.i, align 4
  tail call void @write(i64 1, ptr %6, i64 %7)
  switch i64 %0, label %else11 [
    i64 0, label %if.entry
    i64 2, label %if.entry1
    i64 3, label %if.entry4
    i64 5, label %if.entry7
    i64 1, label %if.entry10
  ]

if.entry:                                         ; preds = %2
  %8 = tail call ptr @malloc(i32 168)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(21) %8, ptr noundef nonnull align 8 dereferenceable(21) @12, i64 21, i1 false)
  %9 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %9, align 8
  %memberidx.i.i17 = getelementptr inbounds %string, ptr %9, i64 0, i32 1
  store ptr %8, ptr %memberidx.i.i17, align 8
  %memberidx1.i.i18 = getelementptr inbounds %string, ptr %9, i64 0, i32 2
  store i64 21, ptr %memberidx1.i.i18, align 4
  br label %ifend

ifend:                                            ; preds = %if.entry10, %else11, %if.entry7, %if.entry4, %if.entry1, %if.entry
  %.sink51 = phi ptr [ %29, %if.entry10 ], [ %31, %else11 ], [ %27, %if.entry7 ], [ %25, %if.entry4 ], [ %23, %if.entry1 ], [ %9, %if.entry ]
  %.sink = phi i64 [ 14, %if.entry10 ], [ 9, %else11 ], [ 14, %if.entry7 ], [ 12, %if.entry4 ], [ 16, %if.entry1 ], [ 21, %if.entry ]
  %memberidx1.i.i39.sink = phi ptr [ %memberidx1.i.i39, %if.entry10 ], [ %memberidx1.i.i44, %else11 ], [ %memberidx1.i.i34, %if.entry7 ], [ %memberidx1.i.i29, %if.entry4 ], [ %memberidx1.i.i24, %if.entry1 ], [ %memberidx1.i.i18, %if.entry ]
  %memberidx2.i.i40 = getelementptr inbounds %string, ptr %.sink51, i64 0, i32 3
  store i64 %.sink, ptr %memberidx2.i.i40, align 4
  %10 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %11 = tail call ptr %10(ptr nonnull %.sink51)
  %12 = load i64, ptr %memberidx1.i.i39.sink, align 4
  tail call void @write(i64 1, ptr %11, i64 %12)
  %13 = tail call ptr @malloc(i32 32)
  store i32 1831885595, ptr %13, align 8
  %14 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %14, align 8
  %memberidx.i.i1.i = getelementptr inbounds %string, ptr %14, i64 0, i32 1
  store ptr %13, ptr %memberidx.i.i1.i, align 8
  %memberidx1.i.i2.i = getelementptr inbounds %string, ptr %14, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i2.i, align 4
  %memberidx2.i.i3.i = getelementptr inbounds %string, ptr %14, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i3.i, align 4
  %15 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %16 = tail call ptr %15(ptr nonnull %14)
  %17 = load i64, ptr %memberidx1.i.i2.i, align 4
  tail call void @write(i64 1, ptr %16, i64 %17)
  %18 = load ptr, ptr %1, align 8
  %memberidx.i.i21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %18, i64 0, i32 3
  %19 = load ptr, ptr %memberidx.i.i21, align 8
  %20 = tail call ptr %19(ptr nonnull %1)
  %memberidx1.i.i22 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %21 = load i64, ptr %memberidx1.i.i22, align 4
  tail call void @write(i64 1, ptr %20, i64 %21)
  tail call void @write(i64 1, ptr nonnull @0, i64 1)
  ret void

if.entry1:                                        ; preds = %2
  %22 = tail call ptr @malloc(i32 128)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %22, ptr noundef nonnull align 8 dereferenceable(16) @13, i64 16, i1 false)
  %23 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %23, align 8
  %memberidx.i.i23 = getelementptr inbounds %string, ptr %23, i64 0, i32 1
  store ptr %22, ptr %memberidx.i.i23, align 8
  %memberidx1.i.i24 = getelementptr inbounds %string, ptr %23, i64 0, i32 2
  store i64 16, ptr %memberidx1.i.i24, align 4
  br label %ifend

if.entry4:                                        ; preds = %2
  %24 = tail call ptr @malloc(i32 96)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %24, ptr noundef nonnull align 8 dereferenceable(12) @14, i64 12, i1 false)
  %25 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %25, align 8
  %memberidx.i.i28 = getelementptr inbounds %string, ptr %25, i64 0, i32 1
  store ptr %24, ptr %memberidx.i.i28, align 8
  %memberidx1.i.i29 = getelementptr inbounds %string, ptr %25, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i29, align 4
  br label %ifend

if.entry7:                                        ; preds = %2
  %26 = tail call ptr @malloc(i32 112)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(14) %26, ptr noundef nonnull align 8 dereferenceable(14) @15, i64 14, i1 false)
  %27 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %27, align 8
  %memberidx.i.i33 = getelementptr inbounds %string, ptr %27, i64 0, i32 1
  store ptr %26, ptr %memberidx.i.i33, align 8
  %memberidx1.i.i34 = getelementptr inbounds %string, ptr %27, i64 0, i32 2
  store i64 14, ptr %memberidx1.i.i34, align 4
  br label %ifend

if.entry10:                                       ; preds = %2
  %28 = tail call ptr @malloc(i32 112)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(14) %28, ptr noundef nonnull align 8 dereferenceable(14) @16, i64 14, i1 false)
  %29 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %29, align 8
  %memberidx.i.i38 = getelementptr inbounds %string, ptr %29, i64 0, i32 1
  store ptr %28, ptr %memberidx.i.i38, align 8
  %memberidx1.i.i39 = getelementptr inbounds %string, ptr %29, i64 0, i32 2
  store i64 14, ptr %memberidx1.i.i39, align 4
  br label %ifend

else11:                                           ; preds = %2
  %30 = tail call ptr @malloc(i32 72)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %30, ptr noundef nonnull align 8 dereferenceable(9) @17, i64 9, i1 false)
  %31 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %31, align 8
  %memberidx.i.i43 = getelementptr inbounds %string, ptr %31, i64 0, i32 1
  store ptr %30, ptr %memberidx.i.i43, align 8
  %memberidx1.i.i44 = getelementptr inbounds %string, ptr %31, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i44, align 4
  br label %ifend
}

define i64 @main(i64 %0, ptr nocapture readonly %1) local_unnamed_addr {
  %3 = alloca %CodeGen, align 8
  %4 = alloca %TypeChecker, align 8
  %5 = alloca ptr, align 8
  %6 = icmp sgt i64 %0, 1
  br i1 %6, label %for.body.i.preheader, label %else

for.body.i.preheader:                             ; preds = %2
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_string_, ptr %7, align 8
  %memberidx.i.i = getelementptr inbounds %Array_string_, ptr %7, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Array_string_, ptr %7, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_string_, ptr %7, i64 0, i32 1
  %8 = tail call ptr @malloc(i32 64)
  store ptr %8, ptr %memberidx2.i.i, align 8
  store i64 0, ptr %memberidx.i.i, align 4
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i.preheader, %Array_string____sl__.exit.i
  %i.0.i177 = phi i64 [ %23, %Array_string____sl__.exit.i ], [ 0, %for.body.i.preheader ]
  %ptridx.i = getelementptr inbounds ptr, ptr %1, i64 %i.0.i177
  %9 = load ptr, ptr %ptridx.i, align 8
  %10 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %9)
  %11 = trunc i64 %10 to i32
  %mallocsize.i.i = shl i32 %11, 3
  %12 = tail call ptr @malloc(i32 %mallocsize.i.i)
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 8 %12, ptr align 8 %9, i64 %10, i1 false)
  %13 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %13, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %13, i64 0, i32 1
  store ptr %12, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %13, i64 0, i32 2
  store i64 %10, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %13, i64 0, i32 3
  store i64 %10, ptr %memberidx2.i.i.i, align 4
  %14 = load i64, ptr %memberidx.i.i, align 4
  %15 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp slt i64 %14, %15
  br i1 %.not.i.i, label %for.body.i.Array_string____sl__.exit.i_crit_edge, label %if.entry.i.i

for.body.i.Array_string____sl__.exit.i_crit_edge: ; preds = %for.body.i
  %.pre178 = load ptr, ptr %memberidx2.i.i, align 8
  br label %Array_string____sl__.exit.i

if.entry.i.i:                                     ; preds = %for.body.i
  %16 = shl i64 %15, 1
  store i64 %16, ptr %memberidx1.i.i, align 4
  %17 = load ptr, ptr %memberidx2.i.i, align 8
  %18 = shl i64 %15, 4
  %19 = tail call ptr @realloc(ptr %17, i64 %18)
  store ptr %19, ptr %memberidx2.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i, align 4
  br label %Array_string____sl__.exit.i

Array_string____sl__.exit.i:                      ; preds = %for.body.i.Array_string____sl__.exit.i_crit_edge, %if.entry.i.i
  %20 = phi ptr [ %19, %if.entry.i.i ], [ %.pre178, %for.body.i.Array_string____sl__.exit.i_crit_edge ]
  %21 = phi i64 [ %.pre, %if.entry.i.i ], [ %14, %for.body.i.Array_string____sl__.exit.i_crit_edge ]
  %22 = add i64 %21, 1
  store i64 %22, ptr %memberidx.i.i, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %20, i64 %21
  store ptr %13, ptr %ptridx.i.i, align 8
  %23 = add nuw nsw i64 %i.0.i177, 1
  %24 = icmp slt i64 %23, %0
  br i1 %24, label %for.body.i, label %parse_args.exit

parse_args.exit:                                  ; preds = %Array_string____sl__.exit.i
  %25 = tail call ptr @malloc(i32 16)
  store i16 30253, ptr %25, align 8
  %26 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %26, align 8
  %memberidx.i.i51 = getelementptr inbounds %string, ptr %26, i64 0, i32 1
  store ptr %25, ptr %memberidx.i.i51, align 8
  %memberidx1.i.i52 = getelementptr inbounds %string, ptr %26, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i52, align 4
  %memberidx2.i.i53 = getelementptr inbounds %string, ptr %26, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i53, align 4
  %27 = load ptr, ptr %7, align 8
  %28 = load ptr, ptr %27, align 8
  %29 = tail call i64 %28(ptr nonnull %7, ptr nonnull %26)
  %30 = tail call ptr @malloc(i32 72)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %30, ptr noundef nonnull align 8 dereferenceable(9) @19, i64 9, i1 false)
  %31 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %31, align 8
  %memberidx.i.i54 = getelementptr inbounds %string, ptr %31, i64 0, i32 1
  store ptr %30, ptr %memberidx.i.i54, align 8
  %memberidx1.i.i55 = getelementptr inbounds %string, ptr %31, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i55, align 4
  %memberidx2.i.i56 = getelementptr inbounds %string, ptr %31, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i56, align 4
  %32 = load ptr, ptr %7, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = tail call i64 %33(ptr nonnull %7, ptr nonnull %31)
  %35 = and i64 %34, %29
  %.not = icmp eq i64 %35, -1
  br i1 %.not, label %ifend3, label %if.entry1

common.ret:                                       ; preds = %TypeChecker_check.exit, %ifend27, %ifend17, %if.entry15, %if.entry4, %if.entry1, %ifend42, %else
  %common.ret.op = phi i64 [ 1, %else ], [ %code.0, %ifend42 ], [ 0, %if.entry1 ], [ 0, %if.entry4 ], [ 1, %if.entry15 ], [ 1, %ifend17 ], [ 1, %ifend27 ], [ 1, %TypeChecker_check.exit ]
  ret i64 %common.ret.op

else:                                             ; preds = %2
  %36 = tail call ptr @malloc(i32 192)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %36, ptr noundef nonnull align 8 dereferenceable(24) @323, i64 24, i1 false)
  %37 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %37, align 8
  %memberidx.i.i57 = getelementptr inbounds %string, ptr %37, i64 0, i32 1
  store ptr %36, ptr %memberidx.i.i57, align 8
  %memberidx1.i.i58 = getelementptr inbounds %string, ptr %37, i64 0, i32 2
  store i64 24, ptr %memberidx1.i.i58, align 4
  %memberidx2.i.i59 = getelementptr inbounds %string, ptr %37, i64 0, i32 3
  store i64 24, ptr %memberidx2.i.i59, align 4
  tail call fastcc void @print_message_error(i64 4, ptr nonnull %37)
  br label %common.ret

if.entry1:                                        ; preds = %parse_args.exit
  %38 = tail call ptr @malloc(i32 152)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(19) %38, ptr noundef nonnull align 8 dereferenceable(19) @20, i64 19, i1 false)
  %39 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %39, align 8
  %memberidx.i.i60 = getelementptr inbounds %string, ptr %39, i64 0, i32 1
  store ptr %38, ptr %memberidx.i.i60, align 8
  %memberidx1.i.i61 = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  store i64 19, ptr %memberidx1.i.i61, align 4
  %memberidx2.i.i62 = getelementptr inbounds %string, ptr %39, i64 0, i32 3
  store i64 19, ptr %memberidx2.i.i62, align 4
  %40 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %41 = tail call ptr %40(ptr nonnull %39)
  %42 = load i64, ptr %memberidx1.i.i61, align 4
  tail call void @write(i64 1, ptr %41, i64 %42)
  tail call void @write(i64 1, ptr nonnull @0, i64 1)
  br label %common.ret

ifend3:                                           ; preds = %parse_args.exit
  %43 = tail call ptr @malloc(i32 16)
  store i16 26669, ptr %43, align 8
  %44 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %44, align 8
  %memberidx.i.i65 = getelementptr inbounds %string, ptr %44, i64 0, i32 1
  store ptr %43, ptr %memberidx.i.i65, align 8
  %memberidx1.i.i66 = getelementptr inbounds %string, ptr %44, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i66, align 4
  %memberidx2.i.i67 = getelementptr inbounds %string, ptr %44, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i67, align 4
  %45 = load ptr, ptr %7, align 8
  %46 = load ptr, ptr %45, align 8
  %47 = tail call i64 %46(ptr nonnull %7, ptr nonnull %44)
  %48 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %48, ptr noundef nonnull align 8 dereferenceable(6) @21, i64 6, i1 false)
  %49 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %49, align 8
  %memberidx.i.i68 = getelementptr inbounds %string, ptr %49, i64 0, i32 1
  store ptr %48, ptr %memberidx.i.i68, align 8
  %memberidx1.i.i69 = getelementptr inbounds %string, ptr %49, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i69, align 4
  %memberidx2.i.i70 = getelementptr inbounds %string, ptr %49, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i70, align 4
  %50 = load ptr, ptr %7, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = tail call i64 %51(ptr nonnull %7, ptr nonnull %49)
  %53 = and i64 %52, %47
  %.not150 = icmp eq i64 %53, -1
  %54 = load ptr, ptr %memberidx2.i.i, align 8
  br i1 %.not150, label %ifend6, label %if.entry4

if.entry4:                                        ; preds = %ifend3
  %55 = load ptr, ptr %54, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %56 = load ptr, ptr %55, align 8
  %memberidx.i71 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %56, i64 0, i32 5
  %57 = load ptr, ptr %memberidx.i71, align 8
  %58 = tail call ptr %57(ptr nonnull %55)
  %59 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @1, ptr %58)
  %60 = load ptr, ptr %5, align 8
  %61 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %61, align 8
  %memberidx.i.i72 = getelementptr inbounds %string, ptr %61, i64 0, i32 1
  store ptr %60, ptr %memberidx.i.i72, align 8
  %memberidx1.i.i73 = getelementptr inbounds %string, ptr %61, i64 0, i32 2
  store i64 %59, ptr %memberidx1.i.i73, align 4
  %memberidx2.i.i74 = getelementptr inbounds %string, ptr %61, i64 0, i32 3
  store i64 %59, ptr %memberidx2.i.i74, align 4
  call void @free(ptr %58)
  %62 = load ptr, ptr %61, align 8
  %memberidx.i.i1.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %62, i64 0, i32 3
  %63 = load ptr, ptr %memberidx.i.i1.i, align 8
  %64 = call ptr %63(ptr nonnull %61)
  %65 = load i64, ptr %memberidx1.i.i73, align 4
  call void @write(i64 1, ptr %64, i64 %65)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %66 = call ptr @malloc(i32 64)
  store i64 4202788979706449999, ptr %66, align 8
  %67 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %67, align 8
  %memberidx.i.i3.i = getelementptr inbounds %string, ptr %67, i64 0, i32 1
  store ptr %66, ptr %memberidx.i.i3.i, align 8
  %memberidx1.i.i4.i = getelementptr inbounds %string, ptr %67, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i4.i, align 4
  %memberidx2.i.i.i75 = getelementptr inbounds %string, ptr %67, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i.i75, align 4
  %68 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %69 = call ptr %68(ptr nonnull %67)
  %70 = load i64, ptr %memberidx1.i.i4.i, align 4
  call void @write(i64 1, ptr %69, i64 %70)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %71 = call ptr @malloc(i32 296)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(37) %71, ptr noundef nonnull align 8 dereferenceable(37) @2, i64 37, i1 false)
  %72 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %72, align 8
  %memberidx.i.i7.i76 = getelementptr inbounds %string, ptr %72, i64 0, i32 1
  store ptr %71, ptr %memberidx.i.i7.i76, align 8
  %memberidx1.i.i8.i = getelementptr inbounds %string, ptr %72, i64 0, i32 2
  store i64 37, ptr %memberidx1.i.i8.i, align 4
  %memberidx2.i.i9.i = getelementptr inbounds %string, ptr %72, i64 0, i32 3
  store i64 37, ptr %memberidx2.i.i9.i, align 4
  %73 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %74 = call ptr %73(ptr nonnull %72)
  %75 = load i64, ptr %memberidx1.i.i8.i, align 4
  call void @write(i64 1, ptr %74, i64 %75)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %76 = call ptr @malloc(i32 320)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %76, ptr noundef nonnull align 8 dereferenceable(40) @3, i64 40, i1 false)
  %77 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %77, align 8
  %memberidx.i.i12.i = getelementptr inbounds %string, ptr %77, i64 0, i32 1
  store ptr %76, ptr %memberidx.i.i12.i, align 8
  %memberidx1.i.i13.i = getelementptr inbounds %string, ptr %77, i64 0, i32 2
  store i64 40, ptr %memberidx1.i.i13.i, align 4
  %memberidx2.i.i14.i = getelementptr inbounds %string, ptr %77, i64 0, i32 3
  store i64 40, ptr %memberidx2.i.i14.i, align 4
  %78 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %79 = call ptr %78(ptr nonnull %77)
  %80 = load i64, ptr %memberidx1.i.i13.i, align 4
  call void @write(i64 1, ptr %79, i64 %80)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %81 = call ptr @malloc(i32 280)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(35) %81, ptr noundef nonnull align 8 dereferenceable(35) @4, i64 35, i1 false)
  %82 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %82, align 8
  %memberidx.i.i17.i = getelementptr inbounds %string, ptr %82, i64 0, i32 1
  store ptr %81, ptr %memberidx.i.i17.i, align 8
  %memberidx1.i.i18.i = getelementptr inbounds %string, ptr %82, i64 0, i32 2
  store i64 35, ptr %memberidx1.i.i18.i, align 4
  %memberidx2.i.i19.i = getelementptr inbounds %string, ptr %82, i64 0, i32 3
  store i64 35, ptr %memberidx2.i.i19.i, align 4
  %83 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %84 = call ptr %83(ptr nonnull %82)
  %85 = load i64, ptr %memberidx1.i.i18.i, align 4
  call void @write(i64 1, ptr %84, i64 %85)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %86 = call ptr @malloc(i32 312)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(39) %86, ptr noundef nonnull align 8 dereferenceable(39) @5, i64 39, i1 false)
  %87 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %87, align 8
  %memberidx.i.i22.i = getelementptr inbounds %string, ptr %87, i64 0, i32 1
  store ptr %86, ptr %memberidx.i.i22.i, align 8
  %memberidx1.i.i23.i = getelementptr inbounds %string, ptr %87, i64 0, i32 2
  store i64 39, ptr %memberidx1.i.i23.i, align 4
  %memberidx2.i.i24.i = getelementptr inbounds %string, ptr %87, i64 0, i32 3
  store i64 39, ptr %memberidx2.i.i24.i, align 4
  %88 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %89 = call ptr %88(ptr nonnull %87)
  %90 = load i64, ptr %memberidx1.i.i23.i, align 4
  call void @write(i64 1, ptr %89, i64 %90)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %91 = call ptr @malloc(i32 336)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(42) %91, ptr noundef nonnull align 8 dereferenceable(42) @6, i64 42, i1 false)
  %92 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %92, align 8
  %memberidx.i.i27.i = getelementptr inbounds %string, ptr %92, i64 0, i32 1
  store ptr %91, ptr %memberidx.i.i27.i, align 8
  %memberidx1.i.i28.i = getelementptr inbounds %string, ptr %92, i64 0, i32 2
  store i64 42, ptr %memberidx1.i.i28.i, align 4
  %memberidx2.i.i29.i = getelementptr inbounds %string, ptr %92, i64 0, i32 3
  store i64 42, ptr %memberidx2.i.i29.i, align 4
  %93 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %94 = call ptr %93(ptr nonnull %92)
  %95 = load i64, ptr %memberidx1.i.i28.i, align 4
  call void @write(i64 1, ptr %94, i64 %95)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %96 = call ptr @malloc(i32 368)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(46) %96, ptr noundef nonnull align 8 dereferenceable(46) @7, i64 46, i1 false)
  %97 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %97, align 8
  %memberidx.i.i32.i = getelementptr inbounds %string, ptr %97, i64 0, i32 1
  store ptr %96, ptr %memberidx.i.i32.i, align 8
  %memberidx1.i.i33.i = getelementptr inbounds %string, ptr %97, i64 0, i32 2
  store i64 46, ptr %memberidx1.i.i33.i, align 4
  %memberidx2.i.i34.i = getelementptr inbounds %string, ptr %97, i64 0, i32 3
  store i64 46, ptr %memberidx2.i.i34.i, align 4
  %98 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %99 = call ptr %98(ptr nonnull %97)
  %100 = load i64, ptr %memberidx1.i.i33.i, align 4
  call void @write(i64 1, ptr %99, i64 %100)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %101 = call ptr @malloc(i32 256)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %101, ptr noundef nonnull align 8 dereferenceable(32) @8, i64 32, i1 false)
  %102 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %102, align 8
  %memberidx.i.i37.i = getelementptr inbounds %string, ptr %102, i64 0, i32 1
  store ptr %101, ptr %memberidx.i.i37.i, align 8
  %memberidx1.i.i38.i = getelementptr inbounds %string, ptr %102, i64 0, i32 2
  store i64 32, ptr %memberidx1.i.i38.i, align 4
  %memberidx2.i.i39.i = getelementptr inbounds %string, ptr %102, i64 0, i32 3
  store i64 32, ptr %memberidx2.i.i39.i, align 4
  %103 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %104 = call ptr %103(ptr nonnull %102)
  %105 = load i64, ptr %memberidx1.i.i38.i, align 4
  call void @write(i64 1, ptr %104, i64 %105)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %106 = call ptr @malloc(i32 736)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(92) %106, ptr noundef nonnull align 8 dereferenceable(92) @9, i64 92, i1 false)
  %107 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %107, align 8
  %memberidx.i.i42.i = getelementptr inbounds %string, ptr %107, i64 0, i32 1
  store ptr %106, ptr %memberidx.i.i42.i, align 8
  %memberidx1.i.i43.i = getelementptr inbounds %string, ptr %107, i64 0, i32 2
  store i64 92, ptr %memberidx1.i.i43.i, align 4
  %memberidx2.i.i44.i = getelementptr inbounds %string, ptr %107, i64 0, i32 3
  store i64 92, ptr %memberidx2.i.i44.i, align 4
  %108 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %109 = call ptr %108(ptr nonnull %107)
  %110 = load i64, ptr %memberidx1.i.i43.i, align 4
  call void @write(i64 1, ptr %109, i64 %110)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %111 = call ptr @malloc(i32 240)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(30) %111, ptr noundef nonnull align 8 dereferenceable(30) @10, i64 30, i1 false)
  %112 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %112, align 8
  %memberidx.i.i47.i = getelementptr inbounds %string, ptr %112, i64 0, i32 1
  store ptr %111, ptr %memberidx.i.i47.i, align 8
  %memberidx1.i.i48.i = getelementptr inbounds %string, ptr %112, i64 0, i32 2
  store i64 30, ptr %memberidx1.i.i48.i, align 4
  %memberidx2.i.i49.i = getelementptr inbounds %string, ptr %112, i64 0, i32 3
  store i64 30, ptr %memberidx2.i.i49.i, align 4
  %113 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %114 = call ptr %113(ptr nonnull %112)
  %115 = load i64, ptr %memberidx1.i.i48.i, align 4
  call void @write(i64 1, ptr %114, i64 %115)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  br label %common.ret

ifend6:                                           ; preds = %ifend3
  %ptridx.i80 = getelementptr inbounds ptr, ptr %54, i64 1
  %116 = load ptr, ptr %ptridx.i80, align 8
  %117 = alloca %Compiler, align 8
  store ptr @VTableCompiler, ptr %117, align 8
  %memberidx.i81 = getelementptr inbounds %Compiler, ptr %117, i64 0, i32 5
  %118 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_FloFile_, ptr %118, align 8
  %memberidx.i.i82 = getelementptr inbounds %Array_FloFile_, ptr %118, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i82, align 4
  %memberidx1.i.i83 = getelementptr inbounds %Array_FloFile_, ptr %118, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i83, align 4
  %memberidx2.i.i84 = getelementptr inbounds %Array_FloFile_, ptr %118, i64 0, i32 1
  %119 = tail call ptr @malloc(i32 64)
  store ptr %119, ptr %memberidx2.i.i84, align 8
  store i64 0, ptr %memberidx.i.i82, align 4
  store ptr %118, ptr %memberidx.i81, align 8
  %memberidx3.i = getelementptr inbounds %Compiler, ptr %117, i64 0, i32 1
  store ptr null, ptr %memberidx3.i, align 8
  %memberidx4.i = getelementptr inbounds %Compiler, ptr %117, i64 0, i32 3
  store ptr null, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %Compiler, ptr %117, i64 0, i32 6
  %120 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_FloError_, ptr %120, align 8
  %memberidx.i15.i = getelementptr inbounds %Array_FloError_, ptr %120, i64 0, i32 2
  store i64 0, ptr %memberidx.i15.i, align 4
  %memberidx1.i16.i = getelementptr inbounds %Array_FloError_, ptr %120, i64 0, i32 3
  store i64 8, ptr %memberidx1.i16.i, align 4
  %memberidx2.i17.i = getelementptr inbounds %Array_FloError_, ptr %120, i64 0, i32 1
  %121 = tail call ptr @malloc(i32 64)
  store ptr %121, ptr %memberidx2.i17.i, align 8
  store i64 0, ptr %memberidx.i15.i, align 4
  store ptr %120, ptr %memberidx5.i, align 8
  %122 = tail call ptr @malloc(i32 32)
  store ptr @VTableMap_string_FileId_, ptr %122, align 8
  %memberidx.i18.i = getelementptr inbounds %Map_string_FileId_, ptr %122, i64 0, i32 1
  %123 = tail call ptr @malloc(i32 2048)
  store ptr %123, ptr %memberidx.i18.i, align 8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %ifend6, %for.body.i.i
  %i.0.i.i176 = phi i64 [ 0, %ifend6 ], [ %126, %for.body.i.i ]
  %124 = load ptr, ptr %memberidx.i18.i, align 8
  %ptridx.i.i85 = getelementptr inbounds ptr, ptr %124, i64 %i.0.i.i176
  %125 = tail call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_FileId_, ptr %125, align 8
  %memberidx.i.i.i86 = getelementptr inbounds %Bucket_string_FileId_, ptr %125, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i.i86, align 1
  store ptr %125, ptr %ptridx.i.i85, align 8
  %126 = add nuw nsw i64 %i.0.i.i176, 1
  %127 = icmp ult i64 %i.0.i.i176, 255
  br i1 %127, label %for.body.i.i, label %Compiler_constructor.exit

Compiler_constructor.exit:                        ; preds = %for.body.i.i
  %memberidx8.i = getelementptr inbounds %Compiler, ptr %117, i64 0, i32 7
  %memberidx2.i19.i = getelementptr inbounds %Map_string_FileId_, ptr %122, i64 0, i32 3
  store i64 256, ptr %memberidx2.i19.i, align 4
  %memberidx3.i.i = getelementptr inbounds %Map_string_FileId_, ptr %122, i64 0, i32 2
  store i64 0, ptr %memberidx3.i.i, align 4
  store ptr %122, ptr %memberidx8.i, align 8
  %128 = load ptr, ptr %117, align 8
  %129 = load ptr, ptr %128, align 8
  %130 = tail call ptr @malloc(i32 64)
  store i64 7091318314087362350, ptr %130, align 8
  %131 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %131, align 8
  %memberidx.i.i20.i87 = getelementptr inbounds %string, ptr %131, i64 0, i32 1
  store ptr %130, ptr %memberidx.i.i20.i87, align 8
  %memberidx1.i.i.i88 = getelementptr inbounds %string, ptr %131, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i.i88, align 4
  %memberidx2.i.i.i89 = getelementptr inbounds %string, ptr %131, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i.i89, align 4
  call void %129(ptr nonnull %117, ptr nonnull %131)
  %132 = call ptr @malloc(i32 16)
  store i16 18733, ptr %132, align 8
  %133 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %133, align 8
  %memberidx.i.i90 = getelementptr inbounds %string, ptr %133, i64 0, i32 1
  store ptr %132, ptr %memberidx.i.i90, align 8
  %memberidx1.i.i91 = getelementptr inbounds %string, ptr %133, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i91, align 4
  %memberidx2.i.i92 = getelementptr inbounds %string, ptr %133, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i92, align 4
  %134 = load ptr, ptr %7, align 8
  %135 = load ptr, ptr %134, align 8
  %136 = call i64 %135(ptr nonnull %7, ptr nonnull %133)
  %.not151 = icmp eq i64 %136, -1
  br i1 %.not151, label %ifend9, label %if.entry7

if.entry7:                                        ; preds = %Compiler_constructor.exit
  %137 = call ptr @malloc(i32 16)
  store i16 18733, ptr %137, align 8
  %138 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %138, align 8
  %memberidx.i.i93 = getelementptr inbounds %string, ptr %138, i64 0, i32 1
  store ptr %137, ptr %memberidx.i.i93, align 8
  %memberidx1.i.i94 = getelementptr inbounds %string, ptr %138, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i94, align 4
  %memberidx2.i.i95 = getelementptr inbounds %string, ptr %138, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i95, align 4
  %139 = call ptr @malloc(i32 0)
  %140 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %140, align 8
  %memberidx.i.i96 = getelementptr inbounds %string, ptr %140, i64 0, i32 1
  store ptr %139, ptr %memberidx.i.i96, align 8
  %memberidx1.i.i97 = getelementptr inbounds %string, ptr %140, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i97, i8 0, i64 16, i1 false)
  %141 = call fastcc ptr @flag_value_or(ptr nonnull %7, ptr nonnull %138, ptr nonnull %140)
  %142 = call ptr @malloc(i32 0)
  %143 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %143, align 8
  %memberidx.i.i99 = getelementptr inbounds %string, ptr %143, i64 0, i32 1
  store ptr %142, ptr %memberidx.i.i99, align 8
  %memberidx1.i.i100 = getelementptr inbounds %string, ptr %143, i64 0, i32 2
  %memberidx.i.i102 = getelementptr inbounds %string, ptr %141, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i100, i8 0, i64 16, i1 false)
  %144 = load i64, ptr %memberidx.i.i102, align 4
  %.not.i.i104 = icmp eq i64 %144, 0
  br i1 %.not.i.i104, label %ifend.i.i, label %if.entry10

ifend.i.i:                                        ; preds = %if.entry7
  %memberidx2.i.i105 = getelementptr inbounds %string, ptr %141, i64 0, i32 1
  %145 = load ptr, ptr %memberidx2.i.i105, align 8
  %146 = call i64 @memcmp(ptr %145, ptr %142, i64 0)
  %.not174 = icmp eq i64 %146, 0
  br i1 %.not174, label %ifend9, label %if.entry10

ifend9:                                           ; preds = %if.entry10, %ifend.i.i, %Compiler_constructor.exit
  %147 = load ptr, ptr %117, align 8
  %memberidx13 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %147, i64 0, i32 1
  %148 = load ptr, ptr %memberidx13, align 8
  %149 = call ptr %148(ptr nonnull %117, ptr %116)
  %150 = load ptr, ptr %117, align 8
  %memberidx14 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %150, i64 0, i32 2
  %151 = load ptr, ptr %memberidx14, align 8
  %152 = call i1 %151(ptr nonnull %117, ptr %149)
  br i1 %152, label %ifend17, label %if.entry15

if.entry10:                                       ; preds = %if.entry7, %ifend.i.i
  %153 = load ptr, ptr %117, align 8
  %154 = load ptr, ptr %153, align 8
  call void %154(ptr nonnull %117, ptr nonnull %141)
  br label %ifend9

if.entry15:                                       ; preds = %ifend9
  %155 = load ptr, ptr %116, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %155, i64 0, i32 5
  %156 = load ptr, ptr %memberidx18, align 8
  %157 = call ptr %156(ptr nonnull %116)
  %158 = alloca ptr, align 8
  %159 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %158, ptr nonnull @28, ptr %157)
  %160 = load ptr, ptr %158, align 8
  %161 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %161, align 8
  %memberidx.i107 = getelementptr inbounds %string, ptr %161, i64 0, i32 1
  store ptr %160, ptr %memberidx.i107, align 8
  %memberidx1.i108 = getelementptr inbounds %string, ptr %161, i64 0, i32 2
  store i64 %159, ptr %memberidx1.i108, align 4
  %memberidx2.i109 = getelementptr inbounds %string, ptr %161, i64 0, i32 3
  store i64 %159, ptr %memberidx2.i109, align 4
  tail call void @free(ptr %157)
  call fastcc void @print_message_error(i64 3, ptr nonnull %161)
  br label %common.ret

ifend17:                                          ; preds = %ifend9
  %162 = load ptr, ptr %memberidx4.i, align 8
  %163 = load ptr, ptr %memberidx5.i, align 8
  %164 = call fastcc ptr @Lexer_tokenize(ptr %162, ptr %163)
  %165 = load ptr, ptr %117, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %165, i64 0, i32 3
  %166 = load ptr, ptr %memberidx21, align 8
  %167 = call i1 %166(ptr nonnull %117)
  br i1 %167, label %common.ret, label %ifend24

ifend24:                                          ; preds = %ifend17
  %168 = call ptr @malloc(i32 112)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(14) %168, ptr noundef nonnull align 8 dereferenceable(14) @57, i64 14, i1 false)
  %169 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %169, align 8
  %memberidx.i.i110 = getelementptr inbounds %string, ptr %169, i64 0, i32 1
  store ptr %168, ptr %memberidx.i.i110, align 8
  %memberidx1.i.i111 = getelementptr inbounds %string, ptr %169, i64 0, i32 2
  store i64 14, ptr %memberidx1.i.i111, align 4
  %memberidx2.i.i112 = getelementptr inbounds %string, ptr %169, i64 0, i32 3
  store i64 14, ptr %memberidx2.i.i112, align 4
  %170 = load ptr, ptr %7, align 8
  %171 = load ptr, ptr %170, align 8
  %172 = call i64 %171(ptr nonnull %7, ptr nonnull %169)
  %.not152 = icmp eq i64 %172, -1
  br i1 %.not152, label %ifend27, label %if.entry25

if.entry25:                                       ; preds = %ifend24
  %173 = load ptr, ptr %memberidx4.i, align 8
  call fastcc void @print_tokens(ptr %164, ptr %173)
  br label %ifend27

ifend27:                                          ; preds = %ifend24, %if.entry25
  %174 = load ptr, ptr %memberidx5.i, align 8
  %175 = call fastcc ptr @Parser_parse(ptr %164, ptr %174)
  %176 = load ptr, ptr %117, align 8
  %memberidx30 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %176, i64 0, i32 3
  %177 = load ptr, ptr %memberidx30, align 8
  %178 = call i1 %177(ptr nonnull %117)
  br i1 %178, label %common.ret, label %ifend33

ifend33:                                          ; preds = %ifend27
  call void @llvm.lifetime.start.p0(i64 66, ptr nonnull %4)
  %memberidx.i.i113 = getelementptr inbounds %TypeChecker, ptr %4, i64 0, i32 6
  store ptr %117, ptr %memberidx.i.i113, align 8
  %memberidx1.i.i114 = getelementptr inbounds %TypeChecker, ptr %4, i64 0, i32 1
  store i64 -1, ptr %memberidx1.i.i114, align 8
  %memberidx2.i.i115 = getelementptr inbounds %TypeChecker, ptr %4, i64 0, i32 7
  store i1 false, ptr %memberidx2.i.i115, align 8
  %179 = call ptr @malloc(i32 9)
  store i1 false, ptr %179, align 1
  %memberidx1.i.i.i116 = getelementptr inbounds %Program, ptr %179, i64 0, i32 1
  %180 = call ptr @malloc(i32 32)
  store ptr @VTableArray_Module_, ptr %180, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %180, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i.i.i, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %180, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %180, i64 0, i32 1
  %181 = call ptr @malloc(i32 64)
  store ptr %181, ptr %memberidx2.i.i.i.i, align 8
  store i64 0, ptr %memberidx.i.i.i.i, align 4
  store ptr %180, ptr %memberidx1.i.i.i116, align 8
  store ptr %179, ptr %4, align 8
  %182 = call ptr @malloc(i32 32)
  store ptr @VTableMap_string_Generic_, ptr %182, align 8
  %memberidx.i.i.i118 = getelementptr inbounds %Map_string_Generic_, ptr %182, i64 0, i32 1
  %183 = call ptr @malloc(i32 2048)
  store ptr %183, ptr %memberidx.i.i.i118, align 8
  br label %for.body.i.i.i

for.body.i.i.i:                                   ; preds = %ifend33, %for.body.i.i.i
  %i.0.i.i.i175 = phi i64 [ 0, %ifend33 ], [ %186, %for.body.i.i.i ]
  %184 = load ptr, ptr %memberidx.i.i.i118, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %184, i64 %i.0.i.i.i175
  %185 = call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_Generic_, ptr %185, align 8
  %memberidx.i.i9.i.i = getelementptr inbounds %Bucket_string_Generic_, ptr %185, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i9.i.i, align 1
  store ptr %185, ptr %ptridx.i.i.i, align 8
  %186 = add nuw nsw i64 %i.0.i.i.i175, 1
  %187 = icmp ult i64 %i.0.i.i.i175, 255
  br i1 %187, label %for.body.i.i.i, label %TypeChecker_constructor.exit.i

TypeChecker_constructor.exit.i:                   ; preds = %for.body.i.i.i
  %memberidx4.i.i117 = getelementptr inbounds %TypeChecker, ptr %4, i64 0, i32 9
  %memberidx2.i.i.i119 = getelementptr inbounds %Map_string_Generic_, ptr %182, i64 0, i32 3
  store i64 256, ptr %memberidx2.i.i.i119, align 4
  %memberidx3.i10.i.i = getelementptr inbounds %Map_string_Generic_, ptr %182, i64 0, i32 2
  store i64 0, ptr %memberidx3.i10.i.i, align 4
  store ptr %182, ptr %memberidx4.i.i117, align 8
  %188 = load ptr, ptr %memberidx.i.i113, align 8
  %189 = load ptr, ptr %188, align 8
  %memberidx1.i9.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %189, i64 0, i32 1
  %190 = load ptr, ptr %memberidx1.i9.i, align 8
  %191 = call ptr @malloc(i32 96)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %191, ptr noundef nonnull align 8 dereferenceable(12) @144, i64 12, i1 false)
  %192 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %192, align 8
  %memberidx.i.i.i10.i = getelementptr inbounds %string, ptr %192, i64 0, i32 1
  store ptr %191, ptr %memberidx.i.i.i10.i, align 8
  %memberidx1.i.i.i11.i = getelementptr inbounds %string, ptr %192, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i.i11.i, align 4
  %memberidx2.i.i.i12.i = getelementptr inbounds %string, ptr %192, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i.i12.i, align 4
  %193 = call ptr %190(ptr nonnull %188, ptr nonnull %192)
  %194 = call ptr @malloc(i32 56)
  call fastcc void @ModuleAST_constructor(ptr %194)
  %195 = call ptr @malloc(i32 96)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %195, ptr noundef nonnull align 8 dereferenceable(12) @144, i64 12, i1 false)
  %196 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %196, align 8
  %memberidx.i.i3.i.i = getelementptr inbounds %string, ptr %196, i64 0, i32 1
  store ptr %195, ptr %memberidx.i.i3.i.i, align 8
  %memberidx1.i.i4.i.i = getelementptr inbounds %string, ptr %196, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i4.i.i, align 4
  %memberidx2.i.i5.i.i = getelementptr inbounds %string, ptr %196, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i5.i.i, align 4
  %197 = call fastcc ptr @TypeChecker_check_module(ptr nonnull %4, ptr %194, ptr nonnull %196)
  %198 = load ptr, ptr %memberidx.i.i113, align 8
  %memberidx1.i14.i = getelementptr inbounds %Compiler, ptr %198, i64 0, i32 4
  %199 = load ptr, ptr %memberidx1.i14.i, align 8
  %200 = call fastcc ptr @TypeChecker_lex_and_parse_typecheck_file(ptr nonnull %4, ptr %199, ptr null)
  store i64 0, ptr %memberidx1.i.i114, align 8
  %memberidx1.i16.i121 = getelementptr inbounds %TypeChecker, ptr %4, i64 0, i32 5
  %201 = load ptr, ptr %4, align 8
  %memberidx1.i.i17.i = getelementptr inbounds %Program, ptr %201, i64 0, i32 1
  %202 = load ptr, ptr %memberidx1.i.i17.i, align 8
  %memberidx.i.i.i18.i = getelementptr inbounds %Array_Module_, ptr %202, i64 0, i32 1
  %203 = load ptr, ptr %memberidx.i.i.i18.i, align 8
  %204 = load ptr, ptr %203, align 8
  %memberidx2.i19.i122 = getelementptr inbounds %Module, ptr %204, i64 0, i32 7
  %205 = load ptr, ptr %memberidx2.i19.i122, align 8
  %memberidx.i.i20.i123 = getelementptr inbounds %Array_Scope_, ptr %205, i64 0, i32 1
  %206 = load ptr, ptr %memberidx.i.i20.i123, align 8
  %207 = load ptr, ptr %206, align 8
  %208 = load ptr, ptr %207, align 8
  store ptr %208, ptr %memberidx1.i16.i121, align 8
  %209 = load ptr, ptr %memberidx1.i.i17.i, align 8
  %memberidx.i.i22.i124 = getelementptr inbounds %Array_Module_, ptr %209, i64 0, i32 1
  %210 = load ptr, ptr %memberidx.i.i22.i124, align 8
  %ptridx.i.i23.i = getelementptr inbounds ptr, ptr %210, i64 1
  %211 = load ptr, ptr %ptridx.i.i23.i, align 8
  call fastcc void @TypeChecker_import_all_from_module(ptr nonnull %4, ptr %211)
  %212 = load ptr, ptr %memberidx.i.i113, align 8
  %memberidx1.i25.i = getelementptr inbounds %Compiler, ptr %212, i64 0, i32 6
  %213 = load ptr, ptr %memberidx1.i25.i, align 8
  %memberidx2.i26.i = getelementptr inbounds %Array_FloError_, ptr %213, i64 0, i32 2
  %214 = load i64, ptr %memberidx2.i26.i, align 4
  %215 = icmp sgt i64 %214, 0
  br i1 %215, label %TypeChecker_check.exit, label %ifend.i

ifend.i:                                          ; preds = %TypeChecker_constructor.exit.i
  %216 = call fastcc ptr @TypeChecker_check_module(ptr nonnull %4, ptr %175, ptr %116)
  %217 = load ptr, ptr %4, align 8
  br label %TypeChecker_check.exit

TypeChecker_check.exit:                           ; preds = %TypeChecker_constructor.exit.i, %ifend.i
  %common.ret.op.i = phi ptr [ %217, %ifend.i ], [ null, %TypeChecker_constructor.exit.i ]
  call void @llvm.lifetime.end.p0(i64 66, ptr nonnull %4)
  %218 = load ptr, ptr %117, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %218, i64 0, i32 3
  %219 = load ptr, ptr %memberidx34, align 8
  %220 = call i1 %219(ptr nonnull %117)
  br i1 %220, label %common.ret, label %ifend37

ifend37:                                          ; preds = %TypeChecker_check.exit
  call void @llvm.lifetime.start.p0(i64 81, ptr nonnull %3)
  %memberidx.i155 = getelementptr inbounds %Program, ptr %common.ret.op.i, i64 0, i32 1
  %221 = load ptr, ptr %memberidx.i155, align 8
  %memberidx.i.i156 = getelementptr inbounds %Array_Module_, ptr %221, i64 0, i32 1
  %222 = load ptr, ptr %memberidx.i.i156, align 8
  %ptridx.i.i157 = getelementptr inbounds ptr, ptr %222, i64 2
  %223 = load ptr, ptr %ptridx.i.i157, align 8
  %memberidx1.i158 = getelementptr inbounds %Module, ptr %223, i64 0, i32 1
  %224 = load ptr, ptr %memberidx1.i158, align 8
  %memberidx.i79.i = getelementptr inbounds %CodeGen, ptr %3, i64 0, i32 4
  store ptr %common.ret.op.i, ptr %memberidx.i79.i, align 8
  %225 = call ptr @malloc(i32 32)
  store ptr @VTableMap_string_LLVMValueRef_, ptr %225, align 8
  %memberidx.i.i.i159 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %225, i64 0, i32 1
  %226 = call ptr @malloc(i32 2048)
  store ptr %226, ptr %memberidx.i.i.i159, align 8
  br label %for.body.i.i.i162

for.body.i.i.i162:                                ; preds = %for.body.i.i.i162, %ifend37
  %i.0.i.i127.i = phi i64 [ 0, %ifend37 ], [ %229, %for.body.i.i.i162 ]
  %227 = load ptr, ptr %memberidx.i.i.i159, align 8
  %ptridx.i.i.i160 = getelementptr inbounds ptr, ptr %227, i64 %i.0.i.i127.i
  %228 = call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_LLVMValueRef_, ptr %228, align 8
  %memberidx.i.i.i.i161 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %228, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i.i.i161, align 1
  store ptr %228, ptr %ptridx.i.i.i160, align 8
  %229 = add nuw nsw i64 %i.0.i.i127.i, 1
  %230 = icmp ult i64 %i.0.i.i127.i, 255
  br i1 %230, label %for.body.i.i.i162, label %Map_string_LLVMValueRef__constructor.exit.i.i

Map_string_LLVMValueRef__constructor.exit.i.i:    ; preds = %for.body.i.i.i162
  %memberidx1.i80.i = getelementptr inbounds %CodeGen, ptr %3, i64 0, i32 6
  %memberidx2.i.i.i163 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %225, i64 0, i32 3
  store i64 256, ptr %memberidx2.i.i.i163, align 4
  %memberidx3.i.i.i164 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %225, i64 0, i32 2
  store i64 0, ptr %memberidx3.i.i.i164, align 4
  store ptr %225, ptr %memberidx1.i80.i, align 8
  %231 = call ptr @malloc(i32 32)
  store ptr @VTableMap_string_LLVMValueRef_, ptr %231, align 8
  %memberidx.i20.i.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %231, i64 0, i32 1
  %232 = call ptr @malloc(i32 2048)
  store ptr %232, ptr %memberidx.i20.i.i, align 8
  br label %for.body.i25.i.i

for.body.i25.i.i:                                 ; preds = %for.body.i25.i.i, %Map_string_LLVMValueRef__constructor.exit.i.i
  %i.0.i21.i126.i = phi i64 [ 0, %Map_string_LLVMValueRef__constructor.exit.i.i ], [ %235, %for.body.i25.i.i ]
  %233 = load ptr, ptr %memberidx.i20.i.i, align 8
  %ptridx.i23.i.i = getelementptr inbounds ptr, ptr %233, i64 %i.0.i21.i126.i
  %234 = call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_LLVMValueRef_, ptr %234, align 8
  %memberidx.i.i24.i.i = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %234, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i24.i.i, align 1
  store ptr %234, ptr %ptridx.i23.i.i, align 8
  %235 = add nuw nsw i64 %i.0.i21.i126.i, 1
  %236 = icmp ult i64 %i.0.i21.i126.i, 255
  br i1 %236, label %for.body.i25.i.i, label %Map_string_LLVMValueRef__constructor.exit28.i.i

Map_string_LLVMValueRef__constructor.exit28.i.i:  ; preds = %for.body.i25.i.i
  %memberidx2.i.i165 = getelementptr inbounds %CodeGen, ptr %3, i64 0, i32 7
  %memberidx2.i26.i.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %231, i64 0, i32 3
  store i64 256, ptr %memberidx2.i26.i.i, align 4
  %memberidx3.i27.i.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %231, i64 0, i32 2
  store i64 0, ptr %memberidx3.i27.i.i, align 4
  store ptr %231, ptr %memberidx2.i.i165, align 8
  %237 = call ptr @malloc(i32 32)
  store ptr @VTableMap_string_CGClassType_, ptr %237, align 8
  %memberidx.i29.i.i = getelementptr inbounds %Map_string_CGClassType_, ptr %237, i64 0, i32 1
  %238 = call ptr @malloc(i32 2048)
  store ptr %238, ptr %memberidx.i29.i.i, align 8
  br label %for.body.i34.i.i

for.body.i34.i.i:                                 ; preds = %for.body.i34.i.i, %Map_string_LLVMValueRef__constructor.exit28.i.i
  %i.0.i30.i125.i = phi i64 [ 0, %Map_string_LLVMValueRef__constructor.exit28.i.i ], [ %241, %for.body.i34.i.i ]
  %239 = load ptr, ptr %memberidx.i29.i.i, align 8
  %ptridx.i32.i.i = getelementptr inbounds ptr, ptr %239, i64 %i.0.i30.i125.i
  %240 = call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_CGClassType_, ptr %240, align 8
  %memberidx.i.i33.i.i = getelementptr inbounds %Bucket_string_CGClassType_, ptr %240, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i33.i.i, align 1
  store ptr %240, ptr %ptridx.i32.i.i, align 8
  %241 = add nuw nsw i64 %i.0.i30.i125.i, 1
  %242 = icmp ult i64 %i.0.i30.i125.i, 255
  br i1 %242, label %for.body.i34.i.i, label %Map_string_CGClassType__constructor.exit.i.i

Map_string_CGClassType__constructor.exit.i.i:     ; preds = %for.body.i34.i.i
  %memberidx3.i.i166 = getelementptr inbounds %CodeGen, ptr %3, i64 0, i32 8
  %memberidx2.i35.i.i = getelementptr inbounds %Map_string_CGClassType_, ptr %237, i64 0, i32 3
  store i64 256, ptr %memberidx2.i35.i.i, align 4
  %memberidx3.i36.i.i = getelementptr inbounds %Map_string_CGClassType_, ptr %237, i64 0, i32 2
  store i64 0, ptr %memberidx3.i36.i.i, align 4
  store ptr %237, ptr %memberidx3.i.i166, align 8
  %243 = call ptr @malloc(i32 32)
  store ptr @VTableMap_string_CGEnumType_, ptr %243, align 8
  %memberidx.i37.i.i = getelementptr inbounds %Map_string_CGEnumType_, ptr %243, i64 0, i32 1
  %244 = call ptr @malloc(i32 2048)
  store ptr %244, ptr %memberidx.i37.i.i, align 8
  br label %for.body.i42.i.i

for.body.i42.i.i:                                 ; preds = %for.body.i42.i.i, %Map_string_CGClassType__constructor.exit.i.i
  %i.0.i38.i124.i = phi i64 [ 0, %Map_string_CGClassType__constructor.exit.i.i ], [ %247, %for.body.i42.i.i ]
  %245 = load ptr, ptr %memberidx.i37.i.i, align 8
  %ptridx.i40.i.i = getelementptr inbounds ptr, ptr %245, i64 %i.0.i38.i124.i
  %246 = call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_CGEnumType_, ptr %246, align 8
  %memberidx.i.i41.i.i = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %246, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i41.i.i, align 1
  store ptr %246, ptr %ptridx.i40.i.i, align 8
  %247 = add nuw nsw i64 %i.0.i38.i124.i, 1
  %248 = icmp ult i64 %i.0.i38.i124.i, 255
  br i1 %248, label %for.body.i42.i.i, label %Map_string_CGEnumType__constructor.exit.i.i

Map_string_CGEnumType__constructor.exit.i.i:      ; preds = %for.body.i42.i.i
  %memberidx4.i.i167 = getelementptr inbounds %CodeGen, ptr %3, i64 0, i32 9
  %memberidx2.i43.i.i = getelementptr inbounds %Map_string_CGEnumType_, ptr %243, i64 0, i32 3
  store i64 256, ptr %memberidx2.i43.i.i, align 4
  %memberidx3.i44.i.i = getelementptr inbounds %Map_string_CGEnumType_, ptr %243, i64 0, i32 2
  store i64 0, ptr %memberidx3.i44.i.i, align 4
  store ptr %243, ptr %memberidx4.i.i167, align 8
  %249 = call ptr @malloc(i32 32)
  store ptr @VTableMap_string_LLVMValueRef_, ptr %249, align 8
  %memberidx.i45.i.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %249, i64 0, i32 1
  %250 = call ptr @malloc(i32 2048)
  store ptr %250, ptr %memberidx.i45.i.i, align 8
  br label %for.body.i50.i.i

for.body.i50.i.i:                                 ; preds = %for.body.i50.i.i, %Map_string_CGEnumType__constructor.exit.i.i
  %i.0.i46.i123.i = phi i64 [ 0, %Map_string_CGEnumType__constructor.exit.i.i ], [ %253, %for.body.i50.i.i ]
  %251 = load ptr, ptr %memberidx.i45.i.i, align 8
  %ptridx.i48.i.i = getelementptr inbounds ptr, ptr %251, i64 %i.0.i46.i123.i
  %252 = call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_LLVMValueRef_, ptr %252, align 8
  %memberidx.i.i49.i.i = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %252, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i49.i.i, align 1
  store ptr %252, ptr %ptridx.i48.i.i, align 8
  %253 = add nuw nsw i64 %i.0.i46.i123.i, 1
  %254 = icmp ult i64 %i.0.i46.i123.i, 255
  br i1 %254, label %for.body.i50.i.i, label %CodeGen_constructor.exit.i

CodeGen_constructor.exit.i:                       ; preds = %for.body.i50.i.i
  %memberidx5.i81.i = getelementptr inbounds %CodeGen, ptr %3, i64 0, i32 10
  %memberidx2.i51.i.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %249, i64 0, i32 3
  store i64 256, ptr %memberidx2.i51.i.i, align 4
  %memberidx3.i52.i.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %249, i64 0, i32 2
  store i64 0, ptr %memberidx3.i52.i.i, align 4
  store ptr %249, ptr %memberidx5.i81.i, align 8
  %memberidx6.i.i = getelementptr inbounds %CodeGen, ptr %3, i64 0, i32 5
  store i1 true, ptr %memberidx6.i.i, align 8
  %memberidx8.i.i = getelementptr inbounds %CodeGen, ptr %3, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %memberidx8.i.i, i8 0, i64 16, i1 false)
  %255 = load ptr, ptr %224, align 8
  %memberidx10.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %255, i64 0, i32 5
  %256 = load ptr, ptr %memberidx10.i.i, align 8
  %257 = call ptr %256(ptr nonnull %224)
  %258 = call ptr @LLVMModuleCreateWithName(ptr %257)
  store ptr %258, ptr %3, align 8
  %memberidx2.i168 = getelementptr inbounds %Module, ptr %223, i64 0, i32 6
  %259 = load ptr, ptr %memberidx2.i168, align 8
  %260 = call ptr @malloc(i32 33)
  %memberidx.i82.i = getelementptr inbounds %Array_Enum_, ptr %259, i64 0, i32 1
  %261 = load ptr, ptr %memberidx.i82.i, align 8
  %memberidx1.i83.i = getelementptr inbounds %Array_Enum_, ptr %259, i64 0, i32 2
  %262 = load i64, ptr %memberidx1.i83.i, align 4
  store ptr @VTableArrayIterator_Enum_, ptr %260, align 8
  %memberidx.i.i84.i = getelementptr inbounds %Iterator_Enum_, ptr %260, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i84.i, align 1
  %memberidx1.i.i.i169 = getelementptr inbounds %ArrayIterator_Enum_, ptr %260, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i.i169, align 4
  %memberidx2.i.i85.i = getelementptr inbounds %ArrayIterator_Enum_, ptr %260, i64 0, i32 4
  store ptr %261, ptr %memberidx2.i.i85.i, align 8
  %memberidx3.i.i86.i = getelementptr inbounds %ArrayIterator_Enum_, ptr %260, i64 0, i32 3
  store i64 %262, ptr %memberidx3.i.i86.i, align 4
  %263 = load ptr, ptr @VTableArrayIterator_Enum_, align 8
  %264 = call ptr %263(ptr nonnull %260)
  %265 = load i1, ptr %memberidx.i.i84.i, align 1
  br i1 %265, label %for.end.i, label %for.body.i170

for.body.i170:                                    ; preds = %CodeGen_constructor.exit.i, %for.body.i170
  %enum_.0122.i = phi ptr [ %268, %for.body.i170 ], [ %264, %CodeGen_constructor.exit.i ]
  call fastcc void @CodeGen_declare_enum(ptr nonnull %3, ptr %enum_.0122.i)
  %266 = load ptr, ptr %260, align 8
  %267 = load ptr, ptr %266, align 8
  %268 = call ptr %267(ptr nonnull %260)
  %269 = load i1, ptr %memberidx.i.i84.i, align 1
  br i1 %269, label %for.end.i, label %for.body.i170

for.end.i:                                        ; preds = %for.body.i170, %CodeGen_constructor.exit.i
  call void @free(ptr nonnull %260)
  %memberidx8.i171 = getelementptr inbounds %Module, ptr %223, i64 0, i32 4
  %270 = load ptr, ptr %memberidx8.i171, align 8
  %271 = call ptr @malloc(i32 33)
  %memberidx.i87.i = getelementptr inbounds %Array_Class_, ptr %270, i64 0, i32 1
  %272 = load ptr, ptr %memberidx.i87.i, align 8
  %memberidx1.i88.i = getelementptr inbounds %Array_Class_, ptr %270, i64 0, i32 2
  %273 = load i64, ptr %memberidx1.i88.i, align 4
  store ptr @VTableArrayIterator_Class_, ptr %271, align 8
  %memberidx.i.i89.i = getelementptr inbounds %Iterator_Class_, ptr %271, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i89.i, align 1
  %memberidx1.i.i90.i = getelementptr inbounds %ArrayIterator_Class_, ptr %271, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i90.i, align 4
  %memberidx2.i.i91.i = getelementptr inbounds %ArrayIterator_Class_, ptr %271, i64 0, i32 4
  store ptr %272, ptr %memberidx2.i.i91.i, align 8
  %memberidx3.i.i92.i = getelementptr inbounds %ArrayIterator_Class_, ptr %271, i64 0, i32 3
  store i64 %273, ptr %memberidx3.i.i92.i, align 4
  %274 = load ptr, ptr @VTableArrayIterator_Class_, align 8
  %275 = call ptr %274(ptr nonnull %271)
  %276 = load i1, ptr %memberidx.i.i89.i, align 1
  br i1 %276, label %for.end13.i, label %for.body11.i

for.body11.i:                                     ; preds = %for.end.i, %for.body11.i
  %storemerge121.i = phi ptr [ %279, %for.body11.i ], [ %275, %for.end.i ]
  call fastcc void @CodeGen_declare_class(ptr nonnull %3, ptr %storemerge121.i)
  %277 = load ptr, ptr %271, align 8
  %278 = load ptr, ptr %277, align 8
  %279 = call ptr %278(ptr nonnull %271)
  %280 = load i1, ptr %memberidx.i.i89.i, align 1
  br i1 %280, label %for.end13.i, label %for.body11.i

for.end13.i:                                      ; preds = %for.body11.i, %for.end.i
  call void @free(ptr nonnull %271)
  %memberidx18.i = getelementptr inbounds %Module, ptr %223, i64 0, i32 8
  %281 = load ptr, ptr %memberidx18.i, align 8
  %282 = call ptr @malloc(i32 33)
  %memberidx.i93.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %281, i64 0, i32 1
  %283 = load ptr, ptr %memberidx.i93.i, align 8
  %memberidx1.i94.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %281, i64 0, i32 2
  %284 = load i64, ptr %memberidx1.i94.i, align 4
  store ptr @VTableArrayIterator_ConstDeclaration_, ptr %282, align 8
  %memberidx.i.i95.i = getelementptr inbounds %Iterator_ConstDeclaration_, ptr %282, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i95.i, align 1
  %memberidx1.i.i96.i = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %282, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i96.i, align 4
  %memberidx2.i.i97.i = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %282, i64 0, i32 4
  store ptr %283, ptr %memberidx2.i.i97.i, align 8
  %memberidx3.i.i98.i = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %282, i64 0, i32 3
  store i64 %284, ptr %memberidx3.i.i98.i, align 4
  %285 = load ptr, ptr @VTableArrayIterator_ConstDeclaration_, align 8
  %286 = call ptr %285(ptr nonnull %282)
  %287 = load i1, ptr %memberidx.i.i95.i, align 1
  br i1 %287, label %for.end23.i, label %for.body21.i

for.body21.i:                                     ; preds = %for.end13.i, %for.body21.i
  %storemerge74120.i = phi ptr [ %290, %for.body21.i ], [ %286, %for.end13.i ]
  call fastcc void @CodeGen_codegen_const_declaration(ptr nonnull %3, ptr null, ptr %storemerge74120.i)
  %288 = load ptr, ptr %282, align 8
  %289 = load ptr, ptr %288, align 8
  %290 = call ptr %289(ptr nonnull %282)
  %291 = load i1, ptr %memberidx.i.i95.i, align 1
  br i1 %291, label %for.end23.i, label %for.body21.i

for.end23.i:                                      ; preds = %for.body21.i, %for.end13.i
  call void @free(ptr nonnull %282)
  %memberidx28.i = getelementptr inbounds %Module, ptr %223, i64 0, i32 9
  %292 = load ptr, ptr %memberidx28.i, align 8
  %293 = call ptr @malloc(i32 33)
  %memberidx.i99.i = getelementptr inbounds %Array_VarDeclaration_, ptr %292, i64 0, i32 1
  %294 = load ptr, ptr %memberidx.i99.i, align 8
  %memberidx1.i100.i = getelementptr inbounds %Array_VarDeclaration_, ptr %292, i64 0, i32 2
  %295 = load i64, ptr %memberidx1.i100.i, align 4
  store ptr @VTableArrayIterator_VarDeclaration_, ptr %293, align 8
  %memberidx.i.i101.i = getelementptr inbounds %Iterator_VarDeclaration_, ptr %293, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i101.i, align 1
  %memberidx1.i.i102.i = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %293, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i102.i, align 4
  %memberidx2.i.i103.i = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %293, i64 0, i32 4
  store ptr %294, ptr %memberidx2.i.i103.i, align 8
  %memberidx3.i.i104.i = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %293, i64 0, i32 3
  store i64 %295, ptr %memberidx3.i.i104.i, align 4
  %296 = load ptr, ptr @VTableArrayIterator_VarDeclaration_, align 8
  %297 = call ptr %296(ptr nonnull %293)
  %298 = load i1, ptr %memberidx.i.i101.i, align 1
  br i1 %298, label %for.end33.i, label %for.body31.i

for.body31.i:                                     ; preds = %for.end23.i, %for.body31.i
  %storemerge75119.i = phi ptr [ %301, %for.body31.i ], [ %297, %for.end23.i ]
  call fastcc void @CodeGen_codegen_var_declaration(ptr nonnull %3, ptr null, ptr %storemerge75119.i)
  %299 = load ptr, ptr %293, align 8
  %300 = load ptr, ptr %299, align 8
  %301 = call ptr %300(ptr nonnull %293)
  %302 = load i1, ptr %memberidx.i.i101.i, align 1
  br i1 %302, label %for.end33.i, label %for.body31.i

for.end33.i:                                      ; preds = %for.body31.i, %for.end23.i
  call void @free(ptr nonnull %293)
  %303 = load ptr, ptr %memberidx8.i171, align 8
  %304 = call ptr @malloc(i32 33)
  %memberidx.i105.i = getelementptr inbounds %Array_Class_, ptr %303, i64 0, i32 1
  %305 = load ptr, ptr %memberidx.i105.i, align 8
  %memberidx1.i106.i = getelementptr inbounds %Array_Class_, ptr %303, i64 0, i32 2
  %306 = load i64, ptr %memberidx1.i106.i, align 4
  store ptr @VTableArrayIterator_Class_, ptr %304, align 8
  %memberidx.i.i107.i = getelementptr inbounds %Iterator_Class_, ptr %304, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i107.i, align 1
  %memberidx1.i.i108.i = getelementptr inbounds %ArrayIterator_Class_, ptr %304, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i108.i, align 4
  %memberidx2.i.i109.i = getelementptr inbounds %ArrayIterator_Class_, ptr %304, i64 0, i32 4
  store ptr %305, ptr %memberidx2.i.i109.i, align 8
  %memberidx3.i.i110.i = getelementptr inbounds %ArrayIterator_Class_, ptr %304, i64 0, i32 3
  store i64 %306, ptr %memberidx3.i.i110.i, align 4
  %307 = load ptr, ptr @VTableArrayIterator_Class_, align 8
  %308 = call ptr %307(ptr nonnull %304)
  %309 = load i1, ptr %memberidx.i.i107.i, align 1
  br i1 %309, label %for.end44.i, label %for.body42.i

for.body42.i:                                     ; preds = %for.end33.i, %for.body42.i
  %storemerge76118.i = phi ptr [ %312, %for.body42.i ], [ %308, %for.end33.i ]
  call fastcc void @CodeGen_codegen_class(ptr nonnull %3, ptr %storemerge76118.i)
  %310 = load ptr, ptr %304, align 8
  %311 = load ptr, ptr %310, align 8
  %312 = call ptr %311(ptr nonnull %304)
  %313 = load i1, ptr %memberidx.i.i107.i, align 1
  br i1 %313, label %for.end44.i, label %for.body42.i

for.end44.i:                                      ; preds = %for.body42.i, %for.end33.i
  call void @free(ptr nonnull %304)
  %memberidx49.i = getelementptr inbounds %Module, ptr %223, i64 0, i32 5
  %314 = load ptr, ptr %memberidx49.i, align 8
  %315 = call ptr @malloc(i32 33)
  %memberidx.i111.i = getelementptr inbounds %Array_Function_, ptr %314, i64 0, i32 1
  %316 = load ptr, ptr %memberidx.i111.i, align 8
  %memberidx1.i112.i = getelementptr inbounds %Array_Function_, ptr %314, i64 0, i32 2
  %317 = load i64, ptr %memberidx1.i112.i, align 4
  store ptr @VTableArrayIterator_Function_, ptr %315, align 8
  %memberidx.i.i113.i = getelementptr inbounds %Iterator_Function_, ptr %315, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i113.i, align 1
  %memberidx1.i.i114.i = getelementptr inbounds %ArrayIterator_Function_, ptr %315, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i114.i, align 4
  %memberidx2.i.i115.i = getelementptr inbounds %ArrayIterator_Function_, ptr %315, i64 0, i32 4
  store ptr %316, ptr %memberidx2.i.i115.i, align 8
  %memberidx3.i.i116.i = getelementptr inbounds %ArrayIterator_Function_, ptr %315, i64 0, i32 3
  store i64 %317, ptr %memberidx3.i.i116.i, align 4
  %318 = load ptr, ptr @VTableArrayIterator_Function_, align 8
  %319 = call ptr %318(ptr nonnull %315)
  %320 = load i1, ptr %memberidx.i.i113.i, align 1
  br i1 %320, label %for.end54.i, label %for.body52.i

for.body52.i:                                     ; preds = %for.end44.i, %for.body52.i
  %storemerge77117.i = phi ptr [ %323, %for.body52.i ], [ %319, %for.end44.i ]
  call fastcc void @CodeGen_codegen_function(ptr nonnull %3, ptr %storemerge77117.i)
  %321 = load ptr, ptr %315, align 8
  %322 = load ptr, ptr %321, align 8
  %323 = call ptr %322(ptr nonnull %315)
  %324 = load i1, ptr %memberidx.i.i113.i, align 1
  br i1 %324, label %for.end54.i, label %for.body52.i

for.end54.i:                                      ; preds = %for.body52.i, %for.end44.i
  call void @free(ptr nonnull %315)
  %325 = call ptr @malloc(i32 24)
  %326 = load ptr, ptr %3, align 8
  store ptr @VTableGeneratedModule, ptr %325, align 8
  %memberidx.i78.i = getelementptr inbounds %GeneratedModule, ptr %325, i64 0, i32 1
  store ptr %326, ptr %memberidx.i78.i, align 8
  %memberidx1.i.i172 = getelementptr inbounds %GeneratedModule, ptr %325, i64 0, i32 2
  store ptr null, ptr %memberidx1.i.i172, align 8
  %327 = call i1 @LLVMVerifyModule(ptr %326, i64 1, ptr nonnull %memberidx1.i.i172)
  br i1 %327, label %if.entry.i.i173, label %CodeGen_codegen.exit

if.entry.i.i173:                                  ; preds = %for.end54.i
  %328 = load ptr, ptr %325, align 8
  %memberidx5.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %328, i64 0, i32 3
  %329 = load ptr, ptr %memberidx5.i.i, align 8
  call void %329(ptr nonnull %325)
  call fastcc void @GeneratedModule_print_errors(ptr nonnull %325)
  br label %CodeGen_codegen.exit

CodeGen_codegen.exit:                             ; preds = %for.end54.i, %if.entry.i.i173
  call void @LLVM_InitializeAllTargetInfos()
  call void @LLVM_InitializeAllTargets()
  call void @LLVM_InitializeAllTargetMCs()
  call void @LLVM_InitializeAllAsmParsers()
  call void @LLVM_InitializeAllAsmPrinters()
  call void @llvm.lifetime.end.p0(i64 81, ptr nonnull %3)
  %330 = load ptr, ptr %325, align 8
  %331 = load ptr, ptr %330, align 8
  %332 = call ptr @malloc(i32 16)
  store i16 20269, ptr %332, align 8
  %333 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %333, align 8
  %memberidx.i.i125 = getelementptr inbounds %string, ptr %333, i64 0, i32 1
  store ptr %332, ptr %memberidx.i.i125, align 8
  %memberidx1.i.i126 = getelementptr inbounds %string, ptr %333, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i126, align 4
  %memberidx2.i.i127 = getelementptr inbounds %string, ptr %333, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i127, align 4
  %334 = call ptr @malloc(i32 8)
  store i8 49, ptr %334, align 8
  %335 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %335, align 8
  %memberidx.i.i128 = getelementptr inbounds %string, ptr %335, i64 0, i32 1
  store ptr %334, ptr %memberidx.i.i128, align 8
  %memberidx1.i.i129 = getelementptr inbounds %string, ptr %335, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i129, align 4
  %memberidx2.i.i130 = getelementptr inbounds %string, ptr %335, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i130, align 4
  %336 = call fastcc ptr @flag_value_or(ptr nonnull %7, ptr nonnull %333, ptr nonnull %335)
  %337 = load ptr, ptr %336, align 8
  %memberidx39 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %337, i64 0, i32 5
  %338 = load ptr, ptr %memberidx39, align 8
  %339 = call ptr %338(ptr nonnull %336)
  %340 = call i64 @atol(ptr nocapture %339)
  tail call void @free(ptr %339)
  call void %331(ptr nonnull %325, i64 %340)
  %341 = call ptr @malloc(i32 88)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %341, ptr noundef nonnull align 8 dereferenceable(11) @321, i64 11, i1 false)
  %342 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %342, align 8
  %memberidx.i.i131 = getelementptr inbounds %string, ptr %342, i64 0, i32 1
  store ptr %341, ptr %memberidx.i.i131, align 8
  %memberidx1.i.i132 = getelementptr inbounds %string, ptr %342, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i132, align 4
  %memberidx2.i.i133 = getelementptr inbounds %string, ptr %342, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i133, align 4
  %343 = load ptr, ptr %7, align 8
  %344 = load ptr, ptr %343, align 8
  %345 = call i64 %344(ptr nonnull %7, ptr nonnull %342)
  %.not153 = icmp eq i64 %345, -1
  br i1 %.not153, label %else41, label %if.entry40

if.entry40:                                       ; preds = %CodeGen_codegen.exit
  %346 = load ptr, ptr %325, align 8
  %memberidx43 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %346, i64 0, i32 3
  %347 = load ptr, ptr %memberidx43, align 8
  call void %347(ptr nonnull %325)
  br label %ifend42

else41:                                           ; preds = %CodeGen_codegen.exit
  %348 = call ptr @malloc(i32 16)
  store i16 28461, ptr %348, align 8
  %349 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %349, align 8
  %memberidx.i.i134 = getelementptr inbounds %string, ptr %349, i64 0, i32 1
  store ptr %348, ptr %memberidx.i.i134, align 8
  %memberidx1.i.i135 = getelementptr inbounds %string, ptr %349, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i135, align 4
  %memberidx2.i.i136 = getelementptr inbounds %string, ptr %349, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i136, align 4
  %350 = load ptr, ptr %7, align 8
  %351 = load ptr, ptr %350, align 8
  %352 = call i64 %351(ptr nonnull %7, ptr nonnull %349)
  %.not154 = icmp eq i64 %352, -1
  %353 = load ptr, ptr %325, align 8
  br i1 %.not154, label %else45, label %if.entry44

ifend42:                                          ; preds = %if.entry44, %else45, %if.entry40
  %code.0 = phi i64 [ 0, %if.entry40 ], [ 0, %if.entry44 ], [ %368, %else45 ]
  %354 = load ptr, ptr %325, align 8
  %memberidx49 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %354, i64 0, i32 4
  %355 = load ptr, ptr %memberidx49, align 8
  call void %355(ptr nonnull %325)
  br label %common.ret

if.entry44:                                       ; preds = %else41
  %memberidx47 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %353, i64 0, i32 2
  %356 = load ptr, ptr %memberidx47, align 8
  %357 = call ptr @malloc(i32 16)
  store i16 28461, ptr %357, align 8
  %358 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %358, align 8
  %memberidx.i.i137 = getelementptr inbounds %string, ptr %358, i64 0, i32 1
  store ptr %357, ptr %memberidx.i.i137, align 8
  %memberidx1.i.i138 = getelementptr inbounds %string, ptr %358, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i138, align 4
  %memberidx2.i.i139 = getelementptr inbounds %string, ptr %358, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i139, align 4
  %359 = call ptr @malloc(i32 24)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %359, ptr noundef nonnull align 8 dereferenceable(3) @322, i64 3, i1 false)
  %360 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %360, align 8
  %memberidx.i.i140 = getelementptr inbounds %string, ptr %360, i64 0, i32 1
  store ptr %359, ptr %memberidx.i.i140, align 8
  %memberidx1.i.i141 = getelementptr inbounds %string, ptr %360, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i141, align 4
  %memberidx2.i.i142 = getelementptr inbounds %string, ptr %360, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i142, align 4
  %361 = call fastcc ptr @flag_value_or(ptr nonnull %7, ptr nonnull %358, ptr nonnull %360)
  %362 = call ptr @malloc(i32 64)
  store i64 8387223622006353197, ptr %362, align 8
  %363 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %363, align 8
  %memberidx.i.i143 = getelementptr inbounds %string, ptr %363, i64 0, i32 1
  store ptr %362, ptr %memberidx.i.i143, align 8
  %memberidx1.i.i144 = getelementptr inbounds %string, ptr %363, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i144, align 4
  %memberidx2.i.i145 = getelementptr inbounds %string, ptr %363, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i145, align 4
  %364 = call ptr @malloc(i32 0)
  %365 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %365, align 8
  %memberidx.i.i146 = getelementptr inbounds %string, ptr %365, i64 0, i32 1
  store ptr %364, ptr %memberidx.i.i146, align 8
  %memberidx1.i.i147 = getelementptr inbounds %string, ptr %365, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i147, i8 0, i64 16, i1 false)
  %366 = call fastcc ptr @flag_value_or(ptr nonnull %7, ptr nonnull %363, ptr nonnull %365)
  call void %356(ptr nonnull %325, ptr %361, ptr %366)
  br label %ifend42

else45:                                           ; preds = %else41
  %memberidx48 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %353, i64 0, i32 1
  %367 = load ptr, ptr %memberidx48, align 8
  %368 = call i64 %367(ptr nonnull %325)
  br label %ifend42
}

define internal i1 @Compiler_print_errors(ptr nocapture readonly %0) {
  %2 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 6
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_FloError_, ptr %3, i64 0, i32 2
  %4 = load i64, ptr %memberidx1, align 4
  %5 = icmp sgt i64 %4, 0
  br i1 %5, label %if.entry, label %common.ret

common.ret:                                       ; preds = %1, %print_error_line.exit
  ret i1 %5

if.entry:                                         ; preds = %1
  %memberidx.i = getelementptr inbounds %Array_FloError_, ptr %3, i64 0, i32 1
  %6 = load ptr, ptr %memberidx.i, align 8
  %7 = load ptr, ptr %6, align 8
  %memberidx3 = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 5
  %8 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 1
  %9 = load ptr, ptr %memberidx4, align 8
  %10 = load i64, ptr %9, align 4
  %memberidx.i12 = getelementptr inbounds %Array_FloFile_, ptr %8, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i12, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %11, i64 %10
  %12 = load ptr, ptr %ptridx.i, align 8
  %memberidx6 = getelementptr inbounds %FloFile, ptr %12, i64 0, i32 1
  %13 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 3
  %14 = load ptr, ptr %memberidx7, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2)
  %15 = load i64, ptr %7, align 4
  %memberidx1.i = getelementptr inbounds %FloError, ptr %7, i64 0, i32 1
  %16 = load ptr, ptr %memberidx1.i, align 8
  tail call fastcc void @print_message_error(i64 %15, ptr %16)
  %17 = load ptr, ptr %13, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %17, i64 0, i32 5
  %18 = load ptr, ptr %memberidx2.i, align 8
  %19 = tail call ptr %18(ptr nonnull %13)
  %memberidx3.i = getelementptr inbounds %FloError, ptr %7, i64 0, i32 2
  %20 = load ptr, ptr %memberidx3.i, align 8
  %memberidx4.i = getelementptr inbounds %FloRange, ptr %20, i64 0, i32 3
  %21 = load i64, ptr %memberidx4.i, align 4
  %22 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %2, ptr nonnull @26, ptr %19, i64 %21)
  %23 = load ptr, ptr %2, align 8
  %24 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %24, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %24, i64 0, i32 1
  store ptr %23, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %24, i64 0, i32 2
  store i64 %22, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %24, i64 0, i32 3
  store i64 %22, ptr %memberidx2.i.i, align 4
  call void @free(ptr %19)
  %25 = load ptr, ptr %24, align 8
  %memberidx.i.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %25, i64 0, i32 3
  %26 = load ptr, ptr %memberidx.i.i.i, align 8
  %27 = call ptr %26(ptr nonnull %24)
  %28 = load i64, ptr %memberidx1.i.i, align 4
  call void @write(i64 1, ptr %27, i64 %28)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %29 = load ptr, ptr %memberidx3.i, align 8
  %memberidx.i13 = getelementptr inbounds %FloRange, ptr %29, i64 0, i32 1
  %30 = load i64, ptr %memberidx.i13, align 4
  %31 = load ptr, ptr %14, align 8
  %memberidx.i.i14 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %31, i64 0, i32 2
  %32 = load ptr, ptr %memberidx.i.i14, align 8
  %33 = call i8 %32(ptr nonnull %14, i64 %30)
  %34 = icmp ne i8 %33, 10
  %memberidx1.i.i15 = getelementptr inbounds %string, ptr %14, i64 0, i32 2
  %35 = load i64, ptr %memberidx1.i.i15, align 4
  %36 = icmp sgt i64 %35, %30
  %37 = and i1 %34, %36
  br i1 %37, label %while.entry.i.i, label %get_next_line_index.exit.i

while.entry.i.i:                                  ; preds = %if.entry, %while.entry.i.i
  %start.0.i.i = phi i64 [ %38, %while.entry.i.i ], [ %30, %if.entry ]
  %38 = add nsw i64 %start.0.i.i, 1
  %39 = load ptr, ptr %14, align 8
  %memberidx2.i.i16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %39, i64 0, i32 2
  %40 = load ptr, ptr %memberidx2.i.i16, align 8
  %41 = call i8 %40(ptr nonnull %14, i64 %38)
  %42 = icmp ne i8 %41, 10
  %43 = load i64, ptr %memberidx1.i.i15, align 4
  %44 = icmp slt i64 %38, %43
  %45 = and i1 %42, %44
  br i1 %45, label %while.entry.i.i, label %get_next_line_index.exit.i

get_next_line_index.exit.i:                       ; preds = %while.entry.i.i, %if.entry
  %start.1.i.i = phi i64 [ %30, %if.entry ], [ %38, %while.entry.i.i ]
  %46 = load i64, ptr %29, align 4
  %memberidx2.i17 = getelementptr inbounds %FloRange, ptr %29, i64 0, i32 2
  %47 = load i64, ptr %memberidx2.i17, align 4
  %48 = sub i64 %46, %47
  %49 = load ptr, ptr %14, align 8
  %memberidx3.i18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %49, i64 0, i32 1
  %50 = load ptr, ptr %memberidx3.i18, align 8
  %51 = sub i64 %start.1.i.i, %48
  %52 = call ptr %50(ptr nonnull %14, i64 %48, i64 %51)
  %53 = load ptr, ptr %52, align 8
  %memberidx.i.i.i19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %53, i64 0, i32 3
  %54 = load ptr, ptr %memberidx.i.i.i19, align 8
  %55 = call ptr %54(ptr nonnull %52)
  %memberidx1.i.i.i20 = getelementptr inbounds %string, ptr %52, i64 0, i32 2
  %56 = load i64, ptr %memberidx1.i.i.i20, align 4
  call void @write(i64 1, ptr %55, i64 %56)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %57 = load i64, ptr %memberidx2.i17, align 4
  %58 = load i64, ptr %memberidx.i13, align 4
  %59 = load i64, ptr %29, align 4
  %60 = sub i64 %58, %59
  %61 = call ptr @malloc(i32 16)
  store i64 0, ptr %61, align 4
  %memberidx1.i30.i = getelementptr inbounds %Range, ptr %61, i64 0, i32 1
  store i64 %57, ptr %memberidx1.i30.i, align 4
  %62 = call ptr @malloc(i32 25)
  store ptr @VTableRangeIterator_int_, ptr %62, align 8
  %memberidx.i.i32.i = getelementptr inbounds %RangeIterator_int_, ptr %62, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i32.i, align 4
  %memberidx1.i.i33.i = getelementptr inbounds %RangeIterator_int_, ptr %62, i64 0, i32 3
  store i64 %57, ptr %memberidx1.i.i33.i, align 4
  %63 = load ptr, ptr @VTableRangeIterator_int_, align 8
  %64 = call i64 %63(ptr nonnull %62)
  %memberidx8.i = getelementptr inbounds %Iterator_int_, ptr %62, i64 0, i32 1
  %65 = load i1, ptr %memberidx8.i, align 1
  br i1 %65, label %for.end.i, label %for.body.i

for.body.i:                                       ; preds = %get_next_line_index.exit.i, %for.body.i
  %66 = call ptr @malloc(i32 8)
  store i8 32, ptr %66, align 8
  %67 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %67, align 8
  %memberidx.i.i34.i = getelementptr inbounds %string, ptr %67, i64 0, i32 1
  store ptr %66, ptr %memberidx.i.i34.i, align 8
  %memberidx1.i.i35.i = getelementptr inbounds %string, ptr %67, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i35.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %67, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i.i, align 4
  %68 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %69 = call ptr %68(ptr nonnull %67)
  %70 = load i64, ptr %memberidx1.i.i35.i, align 4
  call void @write(i64 1, ptr %69, i64 %70)
  %71 = load ptr, ptr %62, align 8
  %72 = load ptr, ptr %71, align 8
  %73 = call i64 %72(ptr nonnull %62)
  %74 = load i1, ptr %memberidx8.i, align 1
  br i1 %74, label %for.end.i, label %for.body.i

for.end.i:                                        ; preds = %for.body.i, %get_next_line_index.exit.i
  call void @free(ptr nonnull %62)
  %75 = call ptr @malloc(i32 56)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %75, ptr noundef nonnull align 8 dereferenceable(7) @11, i64 7, i1 false)
  %76 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %76, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %string, ptr %76, i64 0, i32 1
  store ptr %75, ptr %memberidx.i.i.i.i, align 8
  %memberidx1.i.i.i.i = getelementptr inbounds %string, ptr %76, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %string, ptr %76, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i.i.i, align 4
  %77 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %78 = call ptr %77(ptr nonnull %76)
  %79 = load i64, ptr %memberidx1.i.i.i.i, align 4
  call void @write(i64 1, ptr %78, i64 %79)
  %80 = call ptr @malloc(i32 16)
  store i64 0, ptr %80, align 4
  %memberidx1.i40.i = getelementptr inbounds %Range, ptr %80, i64 0, i32 1
  store i64 %60, ptr %memberidx1.i40.i, align 4
  %81 = call ptr @malloc(i32 25)
  store ptr @VTableRangeIterator_int_, ptr %81, align 8
  %memberidx.i.i42.i = getelementptr inbounds %RangeIterator_int_, ptr %81, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i42.i, align 4
  %memberidx1.i.i43.i = getelementptr inbounds %RangeIterator_int_, ptr %81, i64 0, i32 3
  store i64 %60, ptr %memberidx1.i.i43.i, align 4
  %82 = load ptr, ptr @VTableRangeIterator_int_, align 8
  %83 = call i64 %82(ptr nonnull %81)
  %memberidx18.i = getelementptr inbounds %Iterator_int_, ptr %81, i64 0, i32 1
  %84 = load i1, ptr %memberidx18.i, align 1
  br i1 %84, label %print_error_line.exit, label %for.body15.i

for.body15.i:                                     ; preds = %for.end.i, %for.body15.i
  %85 = call ptr @malloc(i32 8)
  store i8 94, ptr %85, align 8
  %86 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %86, align 8
  %memberidx.i.i44.i = getelementptr inbounds %string, ptr %86, i64 0, i32 1
  store ptr %85, ptr %memberidx.i.i44.i, align 8
  %memberidx1.i.i45.i = getelementptr inbounds %string, ptr %86, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i45.i, align 4
  %memberidx2.i.i46.i = getelementptr inbounds %string, ptr %86, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i46.i, align 4
  %87 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %88 = call ptr %87(ptr nonnull %86)
  %89 = load i64, ptr %memberidx1.i.i45.i, align 4
  call void @write(i64 1, ptr %88, i64 %89)
  %90 = load ptr, ptr %81, align 8
  %91 = load ptr, ptr %90, align 8
  %92 = call i64 %91(ptr nonnull %81)
  %93 = load i1, ptr %memberidx18.i, align 1
  br i1 %93, label %print_error_line.exit, label %for.body15.i

print_error_line.exit:                            ; preds = %for.body15.i, %for.end.i
  call void @free(ptr nonnull %81)
  %94 = call ptr @malloc(i32 32)
  store i32 1831885595, ptr %94, align 8
  %95 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %95, align 8
  %memberidx.i.i1.i.i = getelementptr inbounds %string, ptr %95, i64 0, i32 1
  store ptr %94, ptr %memberidx.i.i1.i.i, align 8
  %memberidx1.i.i2.i.i = getelementptr inbounds %string, ptr %95, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i2.i.i, align 4
  %memberidx2.i.i3.i.i = getelementptr inbounds %string, ptr %95, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i3.i.i, align 4
  %96 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %97 = call ptr %96(ptr nonnull %95)
  %98 = load i64, ptr %memberidx1.i.i2.i.i, align 4
  call void @write(i64 1, ptr %97, i64 %98)
  %99 = call ptr @malloc(i32 8)
  store i8 10, ptr %99, align 8
  %100 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %100, align 8
  %memberidx.i.i51.i = getelementptr inbounds %string, ptr %100, i64 0, i32 1
  store ptr %99, ptr %memberidx.i.i51.i, align 8
  %memberidx1.i.i52.i = getelementptr inbounds %string, ptr %100, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i52.i, align 4
  %memberidx2.i.i53.i = getelementptr inbounds %string, ptr %100, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i53.i, align 4
  %101 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %102 = call ptr %101(ptr nonnull %100)
  %103 = load i64, ptr %memberidx1.i.i52.i, align 4
  call void @write(i64 1, ptr %102, i64 %103)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2)
  br label %common.ret
}

define internal void @Compiler_set_std_path(ptr nocapture writeonly %0, ptr %1) {
  %3 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 2
  store ptr %1, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 4
  %4 = tail call ptr @malloc(i32 176)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(22) %4, ptr noundef nonnull align 8 dereferenceable(22) @24, i64 22, i1 false)
  %5 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %5, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 1
  store ptr %4, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 2
  store i64 22, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 3
  store i64 22, ptr %memberidx2.i.i, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %6 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i64 0, i32 5
  %7 = load ptr, ptr %memberidx.i, align 8
  %8 = tail call ptr %7(ptr nonnull %1)
  %9 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %10 = tail call ptr %9(ptr nonnull %5)
  %11 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @23, ptr %8, ptr %10)
  %12 = load ptr, ptr %3, align 8
  %13 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %13, align 8
  %memberidx.i.i4 = getelementptr inbounds %string, ptr %13, i64 0, i32 1
  store ptr %12, ptr %memberidx.i.i4, align 8
  %memberidx1.i.i5 = getelementptr inbounds %string, ptr %13, i64 0, i32 2
  store i64 %11, ptr %memberidx1.i.i5, align 4
  %memberidx2.i.i6 = getelementptr inbounds %string, ptr %13, i64 0, i32 3
  store i64 %11, ptr %memberidx2.i.i6, align 4
  call void @free(ptr %8)
  call void @free(ptr %10)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  store ptr %13, ptr %memberidx1, align 8
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_FloError__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_FloError_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_FloError_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal ptr @Compiler_register_file(ptr nocapture readonly %0, ptr %1) {
  %buf.i.i = alloca [400 x i8], align 1
  %3 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %3, i64 0, i32 4
  %4 = load ptr, ptr %memberidx.i, align 8
  %5 = tail call ptr @malloc(i32 32)
  store i32 1869375040, ptr %5, align 8
  %6 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %6, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %6, i64 0, i32 1
  store ptr %5, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %6, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %6, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i.i, align 4
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 2
  %7 = load ptr, ptr %memberidx1.i, align 8
  %8 = tail call ptr %4(ptr nonnull %1, ptr nonnull %6, ptr %7)
  %9 = load ptr, ptr %8, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i64 0, i32 6
  %10 = load ptr, ptr %memberidx2.i, align 8
  %11 = tail call ptr @malloc(i32 32)
  store i32 1869375022, ptr %11, align 8
  %12 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %12, align 8
  %memberidx.i.i5.i = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  store ptr %11, ptr %memberidx.i.i5.i, align 8
  %memberidx1.i.i6.i = getelementptr inbounds %string, ptr %12, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i6.i, align 4
  %memberidx2.i.i7.i = getelementptr inbounds %string, ptr %12, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i7.i, align 4
  %13 = tail call i1 %10(ptr nonnull %8, ptr nonnull %12)
  br i1 %13, label %Compiler_find_module_path.exit, label %if.entry.i

if.entry.i:                                       ; preds = %2
  %14 = tail call ptr @malloc(i32 32)
  store i32 1869375022, ptr %14, align 8
  %15 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %15, align 8
  %memberidx.i.i8.i = getelementptr inbounds %string, ptr %15, i64 0, i32 1
  store ptr %14, ptr %memberidx.i.i8.i, align 8
  %memberidx1.i.i9.i = getelementptr inbounds %string, ptr %15, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i9.i, align 4
  %memberidx2.i.i10.i = getelementptr inbounds %string, ptr %15, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i10.i, align 4
  %memberidx.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 2
  %16 = load i64, ptr %memberidx.i.i, align 4
  %17 = add i64 %16, 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 1
  %18 = load ptr, ptr %memberidx2.i.i, align 8
  %19 = tail call ptr @realloc(ptr %18, i64 %17)
  store ptr %19, ptr %memberidx2.i.i, align 8
  %20 = load i64, ptr %memberidx.i.i, align 4
  %21 = getelementptr inbounds i8, ptr %19, i64 %20
  %22 = load i32, ptr %14, align 8
  store i32 %22, ptr %21, align 2147483648
  store i64 %17, ptr %memberidx.i.i, align 4
  br label %Compiler_find_module_path.exit

Compiler_find_module_path.exit:                   ; preds = %2, %if.entry.i
  call void @llvm.lifetime.start.p0(i64 400, ptr nonnull %buf.i.i)
  %23 = load ptr, ptr %8, align 8
  %memberidx.i11.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %23, i64 0, i32 5
  %24 = load ptr, ptr %memberidx.i11.i, align 8
  %25 = tail call ptr %24(ptr nonnull %8)
  %26 = call ptr @realpath(ptr %25, ptr nonnull %buf.i.i)
  %27 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %buf.i.i)
  %28 = trunc i64 %27 to i32
  %mallocsize.i.i.i = shl i32 %28, 3
  %29 = call ptr @malloc(i32 %mallocsize.i.i.i)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %29, ptr nonnull align 8 %buf.i.i, i64 %27, i1 false)
  %30 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %30, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %string, ptr %30, i64 0, i32 1
  store ptr %29, ptr %memberidx.i.i.i.i, align 8
  %memberidx1.i.i.i.i = getelementptr inbounds %string, ptr %30, i64 0, i32 2
  store i64 %27, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %string, ptr %30, i64 0, i32 3
  store i64 %27, ptr %memberidx2.i.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 400, ptr nonnull %buf.i.i)
  %memberidx = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 7
  %31 = load ptr, ptr %memberidx, align 8
  %32 = load ptr, ptr %31, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %32, i64 0, i32 1
  %33 = load ptr, ptr %memberidx1, align 8
  %34 = call ptr %33(ptr nonnull %31, ptr nonnull %30)
  %.not = icmp eq ptr %34, null
  br i1 %.not, label %ifend, label %common.ret

common.ret:                                       ; preds = %Compiler_find_module_path.exit, %Array_FloFile____sl__.exit
  %common.ret.op = phi ptr [ %35, %Array_FloFile____sl__.exit ], [ %34, %Compiler_find_module_path.exit ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %Compiler_find_module_path.exit
  %35 = tail call ptr @malloc(i32 8)
  %memberidx2 = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 5
  %36 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_FloFile_, ptr %36, i64 0, i32 2
  %37 = load i64, ptr %memberidx3, align 4
  store i64 %37, ptr %35, align 4
  %38 = load ptr, ptr %memberidx, align 8
  %39 = load ptr, ptr %38, align 8
  %40 = load ptr, ptr %39, align 8
  call void %40(ptr nonnull %38, ptr nonnull %30, ptr nonnull %35)
  %41 = load ptr, ptr %memberidx2, align 8
  %42 = tail call ptr @malloc(i32 16)
  store ptr %30, ptr %42, align 8
  %memberidx1.i17 = getelementptr inbounds %FloFile, ptr %42, i64 0, i32 1
  store ptr %1, ptr %memberidx1.i17, align 8
  %memberidx.i18 = getelementptr inbounds %Array_FloFile_, ptr %41, i64 0, i32 2
  %43 = load i64, ptr %memberidx.i18, align 4
  %memberidx1.i19 = getelementptr inbounds %Array_FloFile_, ptr %41, i64 0, i32 3
  %44 = load i64, ptr %memberidx1.i19, align 4
  %.not.i = icmp slt i64 %43, %44
  br i1 %.not.i, label %ifend.Array_FloFile____sl__.exit_crit_edge, label %if.entry.i22

ifend.Array_FloFile____sl__.exit_crit_edge:       ; preds = %ifend
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_FloFile_, ptr %41, i64 0, i32 1
  %.pre23 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_FloFile____sl__.exit

if.entry.i22:                                     ; preds = %ifend
  %45 = shl i64 %44, 1
  store i64 %45, ptr %memberidx1.i19, align 4
  %memberidx2.i.i21 = getelementptr inbounds %Array_FloFile_, ptr %41, i64 0, i32 1
  %46 = load ptr, ptr %memberidx2.i.i21, align 8
  %47 = shl i64 %44, 4
  %48 = call ptr @realloc(ptr %46, i64 %47)
  store ptr %48, ptr %memberidx2.i.i21, align 8
  %.pre = load i64, ptr %memberidx.i18, align 4
  br label %Array_FloFile____sl__.exit

Array_FloFile____sl__.exit:                       ; preds = %ifend.Array_FloFile____sl__.exit_crit_edge, %if.entry.i22
  %49 = phi ptr [ %.pre23, %ifend.Array_FloFile____sl__.exit_crit_edge ], [ %48, %if.entry.i22 ]
  %50 = phi i64 [ %43, %ifend.Array_FloFile____sl__.exit_crit_edge ], [ %.pre, %if.entry.i22 ]
  %51 = add i64 %50, 1
  store i64 %51, ptr %memberidx.i18, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %49, i64 %50
  store ptr %42, ptr %ptridx.i, align 8
  br label %common.ret
}

define internal i1 @Compiler_set_current_file(ptr nocapture %0, ptr %1) {
  %memberidx = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load i64, ptr %1, align 4
  %memberidx.i = getelementptr inbounds %Array_FloFile_, ptr %3, i64 0, i32 1
  %5 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %5, i64 %4
  %6 = load ptr, ptr %ptridx.i, align 8
  %7 = load ptr, ptr %6, align 8
  %8 = load ptr, ptr %7, align 8
  %memberidx.i12 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i64 0, i32 5
  %9 = load ptr, ptr %memberidx.i12, align 8
  %10 = tail call ptr %9(ptr nonnull %7)
  %11 = tail call i64 @access(ptr %10, i64 0)
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %ifend, label %common.ret

common.ret:                                       ; preds = %2, %File_open_for_reading.exit
  ret i1 %12

ifend:                                            ; preds = %2
  %13 = load ptr, ptr %6, align 8
  %14 = load ptr, ptr %13, align 8
  %memberidx.i13 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %14, i64 0, i32 5
  %15 = load ptr, ptr %memberidx.i13, align 8
  %16 = tail call ptr %15(ptr nonnull %13)
  %17 = tail call i64 @fopen(ptr %16, ptr nonnull @25)
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %File_open_for_reading.exit, label %ifend.i

ifend.i:                                          ; preds = %ifend
  %19 = tail call ptr @malloc(i32 16)
  store ptr @VTableFile, ptr %19, align 8
  %memberidx.i.i = getelementptr inbounds %File, ptr %19, i64 0, i32 1
  store i64 %17, ptr %memberidx.i.i, align 4
  br label %File_open_for_reading.exit

File_open_for_reading.exit:                       ; preds = %ifend, %ifend.i
  %common.ret.op.i = phi ptr [ %19, %ifend.i ], [ null, %ifend ]
  %memberidx4 = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 3
  %20 = load ptr, ptr @VTableFile, align 8
  %21 = tail call ptr %20(ptr nonnull %common.ret.op.i)
  store ptr %21, ptr %memberidx4, align 8
  %memberidx6 = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 1
  store ptr %1, ptr %memberidx6, align 8
  %22 = load ptr, ptr %common.ret.op.i, align 8
  %memberidx7 = getelementptr inbounds <{ ptr, ptr }>, ptr %22, i64 0, i32 1
  %23 = load ptr, ptr %memberidx7, align 8
  tail call void %23(ptr nonnull %common.ret.op.i)
  br label %common.ret
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_FloFile__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_FloFile_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_FloFile_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal ptr @Compiler_add_builtins(ptr %0) {
  %2 = load ptr, ptr %0, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %2, i64 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Compiler, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = tail call ptr %3(ptr nonnull %0, ptr %4)
  ret ptr %5
}

define internal void @Map_string_FileId__set(ptr %0, ptr %1, ptr %2) {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Map_string_FileId_, ptr %0, i64 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = sitofp i64 %5 to double
  %memberidx1 = getelementptr inbounds %Map_string_FileId_, ptr %0, i64 0, i32 3
  %7 = load i64, ptr %memberidx1, align 4
  %8 = sitofp i64 %7 to double
  %9 = fdiv double %6, %8
  %10 = fcmp ogt double %9, 7.500000e-01
  br i1 %10, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %11 = load ptr, ptr %0, align 8
  %memberidx.i36 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx.i36, align 8
  %13 = tail call ptr %12(ptr nonnull %0)
  %14 = load i64, ptr %memberidx1, align 4
  %15 = shl i64 %14, 1
  store i64 %15, ptr %memberidx1, align 4
  store i64 0, ptr %memberidx, align 4
  %memberidx4.i = getelementptr inbounds %Map_string_FileId_, ptr %0, i64 0, i32 1
  %16 = load ptr, ptr %memberidx4.i, align 8
  %17 = shl i64 %14, 4
  %18 = tail call ptr @realloc(ptr %16, i64 %17)
  store ptr %18, ptr %memberidx4.i, align 8
  %19 = load i64, ptr %memberidx1, align 4
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %for.body.i40, label %for.cond11.preheader.i

for.cond11.preheader.i:                           ; preds = %for.body.i40, %if.entry
  %memberidx15.i = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %13, i64 0, i32 2
  %21 = load i64, ptr %memberidx15.i, align 4
  %22 = icmp sgt i64 %21, 0
  br i1 %22, label %for.body12.lr.ph.i, label %ifend

for.body12.lr.ph.i:                               ; preds = %for.cond11.preheader.i
  %memberidx.i32.i = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %13, i64 0, i32 1
  br label %for.body12.i

for.body.i40:                                     ; preds = %if.entry, %for.body.i40
  %i.036.i = phi i64 [ %25, %for.body.i40 ], [ 0, %if.entry ]
  %23 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %23, i64 %i.036.i
  %24 = tail call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_FileId_, ptr %24, align 8
  %memberidx.i.i39 = getelementptr inbounds %Bucket_string_FileId_, ptr %24, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i39, align 1
  store ptr %24, ptr %ptridx.i, align 8
  %25 = add nuw nsw i64 %i.036.i, 1
  %26 = load i64, ptr %memberidx1, align 4
  %27 = icmp slt i64 %25, %26
  br i1 %27, label %for.body.i40, label %for.cond11.preheader.i

for.body12.i:                                     ; preds = %for.body12.i, %for.body12.lr.ph.i
  %storemerge35.i = phi i64 [ 0, %for.body12.lr.ph.i ], [ %34, %for.body12.i ]
  %28 = load ptr, ptr %0, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %memberidx.i32.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %30, i64 %storemerge35.i
  %31 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx17.i = getelementptr inbounds %Bucket_string_FileId_, ptr %31, i64 0, i32 1
  %32 = load ptr, ptr %memberidx17.i, align 8
  %memberidx18.i = getelementptr inbounds %Bucket_string_FileId_, ptr %31, i64 0, i32 2
  %33 = load ptr, ptr %memberidx18.i, align 8
  tail call void %29(ptr nonnull %0, ptr %32, ptr %33)
  %34 = add nuw nsw i64 %storemerge35.i, 1
  %35 = load i64, ptr %memberidx15.i, align 4
  %36 = icmp slt i64 %34, %35
  br i1 %36, label %for.body12.i, label %ifend

ifend:                                            ; preds = %for.body12.i, %for.cond11.preheader.i, %3
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %37 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %37, i64 0, i32 5
  %38 = load ptr, ptr %memberidx.i, align 8
  %39 = tail call ptr %38(ptr nonnull %1)
  %40 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %39)
  %41 = load ptr, ptr %4, align 8
  %42 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %42, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 1
  store ptr %41, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 2
  store i64 %40, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 3
  store i64 %40, ptr %memberidx2.i.i, align 4
  call void @free(ptr %39)
  %43 = load i64, ptr %memberidx1.i.i, align 4
  %44 = icmp sgt i64 %43, 0
  br i1 %44, label %for.body.i, label %Map_string_FileId__hash_fnc.exit

for.body.i:                                       ; preds = %ifend, %for.body.i
  %i.0.i42 = phi i64 [ %51, %for.body.i ], [ 0, %ifend ]
  %hash.0.i41 = phi i64 [ %50, %for.body.i ], [ 0, %ifend ]
  %45 = shl i64 %hash.0.i41, 1
  %46 = load ptr, ptr %42, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i64 0, i32 2
  %47 = load ptr, ptr %memberidx2.i, align 8
  %48 = call i8 %47(ptr nonnull %42, i64 %i.0.i42)
  %49 = sext i8 %48 to i64
  %50 = add i64 %45, %49
  %51 = add nuw nsw i64 %i.0.i42, 1
  %52 = load i64, ptr %memberidx1.i.i, align 4
  %53 = icmp slt i64 %51, %52
  br i1 %53, label %for.body.i, label %Map_string_FileId__hash_fnc.exit

Map_string_FileId__hash_fnc.exit:                 ; preds = %for.body.i, %ifend
  %hash.0.i.lcssa = phi i64 [ 0, %ifend ], [ %50, %for.body.i ]
  %54 = call i64 @llvm.abs.i64(i64 %hash.0.i.lcssa, i1 false)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %55 = load i64, ptr %memberidx1, align 4
  %56 = srem i64 %54, %55
  %memberidx3 = getelementptr inbounds %Map_string_FileId_, ptr %0, i64 0, i32 1
  %57 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %57, i64 %56
  %58 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_FileId_, ptr %58, i64 0, i32 3
  %59 = load i1, ptr %memberidx4, align 1
  br i1 %59, label %while.end, label %while.entry.preheader

while.entry.preheader:                            ; preds = %Map_string_FileId__hash_fnc.exit
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend10
  %60 = phi ptr [ %57, %while.entry.preheader ], [ %78, %ifend10 ]
  %61 = phi i64 [ %55, %while.entry.preheader ], [ %79, %ifend10 ]
  %62 = phi ptr [ %58, %while.entry.preheader ], [ %82, %ifend10 ]
  %63 = phi i64 [ %56, %while.entry.preheader ], [ %81, %ifend10 ]
  %memberidx7 = getelementptr inbounds %Bucket_string_FileId_, ptr %62, i64 0, i32 1
  %64 = load ptr, ptr %memberidx7, align 8
  %memberidx.i33 = getelementptr inbounds %string, ptr %64, i64 0, i32 2
  %65 = load i64, ptr %memberidx.i33, align 4
  %66 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %65, %66
  br i1 %.not.i, label %ifend.i, label %ifend10

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i35 = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %67 = load ptr, ptr %memberidx2.i35, align 8
  %68 = load ptr, ptr %memberidx3.i, align 8
  %69 = call i64 @memcmp(ptr %67, ptr %68, i64 %65)
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %ifend.i.while.end.loopexit_crit_edge, label %ifend.i.ifend10_crit_edge

ifend.i.while.end.loopexit_crit_edge:             ; preds = %ifend.i
  %.pre44.pre = load ptr, ptr %memberidx3, align 8
  br label %while.end

ifend.i.ifend10_crit_edge:                        ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx1, align 4
  %.pre43 = load ptr, ptr %memberidx3, align 8
  br label %ifend10

while.end:                                        ; preds = %ifend10, %ifend.i.while.end.loopexit_crit_edge, %Map_string_FileId__hash_fnc.exit
  %71 = phi ptr [ %57, %Map_string_FileId__hash_fnc.exit ], [ %.pre44.pre, %ifend.i.while.end.loopexit_crit_edge ], [ %78, %ifend10 ]
  %72 = phi i64 [ %56, %Map_string_FileId__hash_fnc.exit ], [ %63, %ifend.i.while.end.loopexit_crit_edge ], [ %81, %ifend10 ]
  %73 = load i64, ptr %memberidx, align 4
  %74 = add i64 %73, 1
  store i64 %74, ptr %memberidx, align 4
  %ptridx18 = getelementptr inbounds ptr, ptr %71, i64 %72
  %75 = load ptr, ptr %ptridx18, align 8
  %76 = load ptr, ptr %75, align 8
  %77 = load ptr, ptr %76, align 8
  call void %77(ptr nonnull %75, ptr nonnull %1, ptr %2)
  ret void

ifend10:                                          ; preds = %ifend.i.ifend10_crit_edge, %while.entry
  %78 = phi ptr [ %.pre43, %ifend.i.ifend10_crit_edge ], [ %60, %while.entry ]
  %79 = phi i64 [ %.pre, %ifend.i.ifend10_crit_edge ], [ %61, %while.entry ]
  %80 = add i64 %63, 1
  %81 = srem i64 %80, %79
  %ptridx13 = getelementptr inbounds ptr, ptr %78, i64 %81
  %82 = load ptr, ptr %ptridx13, align 8
  %memberidx14 = getelementptr inbounds %Bucket_string_FileId_, ptr %82, i64 0, i32 3
  %83 = load i1, ptr %memberidx14, align 1
  br i1 %83, label %while.end, label %while.entry
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind willreturn writeonly
define internal void @Bucket_string_FileId__set(ptr nocapture writeonly %0, ptr %1, ptr %2) #8 {
  %memberidx = getelementptr inbounds %Bucket_string_FileId_, ptr %0, i64 0, i32 3
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %Bucket_string_FileId_, ptr %0, i64 0, i32 1
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_FileId_, ptr %0, i64 0, i32 2
  store ptr %2, ptr %memberidx2, align 8
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Bucket_string_FileId___find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal noalias ptr @Map_string_FileId__get_buckets(ptr nocapture readonly %0) {
for.entry:
  %1 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Bucket_string_FileId__, ptr %1, align 8
  %memberidx.i = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %1, i64 0, i32 2
  %memberidx1.i = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %1, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_Bucket_string_FileId__, ptr %1, i64 0, i32 1
  %2 = tail call ptr @malloc(i32 64)
  store ptr %2, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %memberidx2 = getelementptr inbounds %Map_string_FileId_, ptr %0, i64 0, i32 3
  %3 = load i64, ptr %memberidx2, align 4
  %4 = icmp sgt i64 %3, 0
  br i1 %4, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx3 = getelementptr inbounds %Map_string_FileId_, ptr %0, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %5 = phi i64 [ %3, %for.body.lr.ph ], [ %19, %ifend ]
  %6 = phi ptr [ %2, %for.body.lr.ph ], [ %20, %ifend ]
  %7 = phi ptr [ %2, %for.body.lr.ph ], [ %21, %ifend ]
  %8 = phi i64 [ 8, %for.body.lr.ph ], [ %22, %ifend ]
  %9 = phi i64 [ 0, %for.body.lr.ph ], [ %23, %ifend ]
  %i.011 = phi i64 [ 0, %for.body.lr.ph ], [ %24, %ifend ]
  %10 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %i.011
  %11 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_FileId_, ptr %11, i64 0, i32 3
  %12 = load i1, ptr %memberidx4, align 1
  br i1 %12, label %ifend, label %if.entry

for.end:                                          ; preds = %ifend, %for.entry
  ret ptr %1

if.entry:                                         ; preds = %for.body
  %.not.i = icmp slt i64 %9, %8
  br i1 %.not.i, label %Array_Bucket_string_FileId_____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %if.entry
  %13 = shl i64 %8, 1
  store i64 %13, ptr %memberidx1.i, align 4
  %14 = shl i64 %8, 4
  %15 = tail call ptr @realloc(ptr %7, i64 %14)
  store ptr %15, ptr %memberidx2.i, align 8
  br label %Array_Bucket_string_FileId_____sl__.exit

Array_Bucket_string_FileId_____sl__.exit:         ; preds = %if.entry, %if.entry.i
  %16 = phi ptr [ %6, %if.entry ], [ %15, %if.entry.i ]
  %17 = phi i64 [ %8, %if.entry ], [ %13, %if.entry.i ]
  %18 = add i64 %9, 1
  store i64 %18, ptr %memberidx.i, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %16, i64 %9
  store ptr %11, ptr %ptridx.i, align 8
  %.pre = load i64, ptr %memberidx2, align 4
  br label %ifend

ifend:                                            ; preds = %for.body, %Array_Bucket_string_FileId_____sl__.exit
  %19 = phi i64 [ %5, %for.body ], [ %.pre, %Array_Bucket_string_FileId_____sl__.exit ]
  %20 = phi ptr [ %6, %for.body ], [ %16, %Array_Bucket_string_FileId_____sl__.exit ]
  %21 = phi ptr [ %7, %for.body ], [ %16, %Array_Bucket_string_FileId_____sl__.exit ]
  %22 = phi i64 [ %8, %for.body ], [ %17, %Array_Bucket_string_FileId_____sl__.exit ]
  %23 = phi i64 [ %9, %for.body ], [ %18, %Array_Bucket_string_FileId_____sl__.exit ]
  %24 = add nuw nsw i64 %i.011, 1
  %25 = icmp slt i64 %24, %19
  br i1 %25, label %for.body, label %for.end
}

define internal ptr @Map_string_FileId__get(ptr nocapture readonly %0, ptr %1) {
  %3 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %4 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i64 0, i32 5
  %5 = load ptr, ptr %memberidx.i, align 8
  %6 = tail call ptr %5(ptr nonnull %1)
  %7 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @22, ptr %6)
  %8 = load ptr, ptr %3, align 8
  %9 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %9, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 1
  store ptr %8, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 2
  store i64 %7, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 3
  store i64 %7, ptr %memberidx2.i.i, align 4
  call void @free(ptr %6)
  %10 = load i64, ptr %memberidx1.i.i, align 4
  %11 = icmp sgt i64 %10, 0
  br i1 %11, label %for.body.i, label %Map_string_FileId__hash_fnc.exit

for.body.i:                                       ; preds = %2, %for.body.i
  %i.0.i36 = phi i64 [ %18, %for.body.i ], [ 0, %2 ]
  %hash.0.i35 = phi i64 [ %17, %for.body.i ], [ 0, %2 ]
  %12 = shl i64 %hash.0.i35, 1
  %13 = load ptr, ptr %9, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i64 0, i32 2
  %14 = load ptr, ptr %memberidx2.i, align 8
  %15 = call i8 %14(ptr nonnull %9, i64 %i.0.i36)
  %16 = sext i8 %15 to i64
  %17 = add i64 %12, %16
  %18 = add nuw nsw i64 %i.0.i36, 1
  %19 = load i64, ptr %memberidx1.i.i, align 4
  %20 = icmp slt i64 %18, %19
  br i1 %20, label %for.body.i, label %Map_string_FileId__hash_fnc.exit

Map_string_FileId__hash_fnc.exit:                 ; preds = %for.body.i, %2
  %hash.0.i.lcssa = phi i64 [ 0, %2 ], [ %17, %for.body.i ]
  %21 = call i64 @llvm.abs.i64(i64 %hash.0.i.lcssa, i1 false)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %memberidx = getelementptr inbounds %Map_string_FileId_, ptr %0, i64 0, i32 3
  %22 = load i64, ptr %memberidx, align 4
  %23 = srem i64 %21, %22
  %memberidx1 = getelementptr inbounds %Map_string_FileId_, ptr %0, i64 0, i32 1
  %24 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %24, i64 %23
  %25 = load ptr, ptr %ptridx, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_FileId_, ptr %25, i64 0, i32 3
  %26 = load i1, ptr %memberidx2, align 1
  br i1 %26, label %common.ret, label %while.entry.preheader

while.entry.preheader:                            ; preds = %Map_string_FileId__hash_fnc.exit
  %memberidx1.i33 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %else
  %27 = phi ptr [ %37, %else ], [ %24, %while.entry.preheader ]
  %28 = phi i64 [ %38, %else ], [ %22, %while.entry.preheader ]
  %29 = phi ptr [ %41, %else ], [ %25, %while.entry.preheader ]
  %hash.0 = phi i64 [ %40, %else ], [ %23, %while.entry.preheader ]
  %memberidx5 = getelementptr inbounds %Bucket_string_FileId_, ptr %29, i64 0, i32 1
  %30 = load ptr, ptr %memberidx5, align 8
  %memberidx.i32 = getelementptr inbounds %string, ptr %30, i64 0, i32 2
  %31 = load i64, ptr %memberidx.i32, align 4
  %32 = load i64, ptr %memberidx1.i33, align 4
  %.not.i = icmp eq i64 %31, %32
  br i1 %.not.i, label %ifend.i, label %else

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i34 = getelementptr inbounds %string, ptr %30, i64 0, i32 1
  %33 = load ptr, ptr %memberidx2.i34, align 8
  %34 = load ptr, ptr %memberidx3.i, align 8
  %35 = call i64 @memcmp(ptr %33, ptr %34, i64 %31)
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %while.end, label %ifend.i.else_crit_edge

ifend.i.else_crit_edge:                           ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx, align 4
  %.pre37 = load ptr, ptr %memberidx1, align 8
  br label %else

while.end:                                        ; preds = %ifend.i
  %.pre38.pre = load ptr, ptr %memberidx1, align 8
  %ptridx11.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre38.pre, i64 %hash.0
  %.pre39.pre = load ptr, ptr %ptridx11.phi.trans.insert.phi.trans.insert, align 8
  %memberidx12.phi.trans.insert.phi.trans.insert = getelementptr inbounds %Bucket_string_FileId_, ptr %.pre39.pre, i64 0, i32 3
  %.pre40.pre = load i1, ptr %memberidx12.phi.trans.insert.phi.trans.insert, align 1
  br i1 %.pre40.pre, label %common.ret, label %if.entry13

else:                                             ; preds = %ifend.i.else_crit_edge, %while.entry
  %37 = phi ptr [ %.pre37, %ifend.i.else_crit_edge ], [ %27, %while.entry ]
  %38 = phi i64 [ %.pre, %ifend.i.else_crit_edge ], [ %28, %while.entry ]
  %39 = add i64 %hash.0, 1
  %40 = srem i64 %39, %38
  %ptridx8 = getelementptr inbounds ptr, ptr %37, i64 %40
  %41 = load ptr, ptr %ptridx8, align 8
  %memberidx9 = getelementptr inbounds %Bucket_string_FileId_, ptr %41, i64 0, i32 3
  %42 = load i1, ptr %memberidx9, align 1
  br i1 %42, label %common.ret, label %while.entry

common.ret:                                       ; preds = %else, %Map_string_FileId__hash_fnc.exit, %while.end, %if.entry13
  %common.ret.op = phi ptr [ %43, %if.entry13 ], [ null, %while.end ], [ null, %Map_string_FileId__hash_fnc.exit ], [ null, %else ]
  ret ptr %common.ret.op

if.entry13:                                       ; preds = %while.end
  %memberidx18 = getelementptr inbounds %Bucket_string_FileId_, ptr %.pre39.pre, i64 0, i32 2
  %43 = load ptr, ptr %memberidx18, align 8
  br label %common.ret
}

; Function Attrs: nofree nounwind
declare noundef ptr @realpath(ptr nocapture noundef readonly, ptr noundef) local_unnamed_addr #9

declare ptr @dirname(ptr) local_unnamed_addr

define internal noalias ptr @File_read_all(ptr nocapture readonly %0) {
  %2 = tail call ptr @malloc(i32 0)
  %memberidx = getelementptr inbounds %File, ptr %0, i64 0, i32 1
  %buffer10 = alloca [1024 x i8], align 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = call i64 @fread(ptr nonnull %buffer10, i64 1, i64 1024, i64 %3)
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %ifend, %1
  %size.0.lcssa = phi i64 [ 0, %1 ], [ %8, %ifend ]
  %allocated_mem.0.lcssa = phi ptr [ %2, %1 ], [ %9, %ifend ]
  %6 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %6, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %6, i64 0, i32 1
  store ptr %allocated_mem.0.lcssa, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %6, i64 0, i32 2
  store i64 %size.0.lcssa, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %6, i64 0, i32 3
  store i64 %size.0.lcssa, ptr %memberidx2.i, align 4
  ret ptr %6

ifend:                                            ; preds = %1, %ifend
  %7 = phi i64 [ %12, %ifend ], [ %4, %1 ]
  %buffer13 = phi ptr [ %buffer, %ifend ], [ %buffer10, %1 ]
  %allocated_mem.012 = phi ptr [ %9, %ifend ], [ %2, %1 ]
  %size.011 = phi i64 [ %8, %ifend ], [ 0, %1 ]
  %8 = add i64 %7, %size.011
  %9 = call ptr @realloc(ptr %allocated_mem.012, i64 %8)
  %10 = getelementptr inbounds i8, ptr %9, i64 %size.011
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %10, ptr nonnull align 2147483648 %buffer13, i64 %7, i1 false)
  %buffer = alloca [1024 x i8], align 1
  %11 = load i64, ptr %memberidx, align 4
  %12 = call i64 @fread(ptr nonnull %buffer, i64 1, i64 1024, i64 %11)
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %if.entry, label %ifend
}

define internal void @File_close(ptr nocapture readonly %0) {
  %memberidx = getelementptr inbounds %File, ptr %0, i64 0, i32 1
  %2 = load i64, ptr %memberidx, align 4
  tail call void @fclose(i64 %2)
  ret void
}

declare i64 @fopen(ptr, ptr) local_unnamed_addr

declare i64 @fread(ptr, i64, i64, i64) local_unnamed_addr

; Function Attrs: nofree nounwind
declare noundef i64 @access(ptr nocapture noundef readonly, i64 noundef) local_unnamed_addr #9

declare void @fclose(i64) local_unnamed_addr

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind willreturn
define internal i64 @RangeIterator_int____next__(ptr nocapture %0) #10 {
  %memberidx = getelementptr inbounds %Iterator_int_, ptr %0, i64 0, i32 1
  %memberidx1 = getelementptr inbounds %RangeIterator_int_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %RangeIterator_int_, ptr %0, i64 0, i32 3
  %3 = load i64, ptr %memberidx2, align 4
  %4 = icmp sge i64 %2, %3
  store i1 %4, ptr %memberidx, align 1
  %5 = add i64 %2, 1
  store i64 %5, ptr %memberidx1, align 4
  ret i64 %2
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Token__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Token_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Token_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_Token____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_Token_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_Token_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_Token_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_Token_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

define internal fastcc ptr @Lexer_tokenize(ptr %0, ptr %1) unnamed_addr {
  %3 = alloca %Lexer, align 8
  %memberidx.i = getelementptr inbounds %Lexer, ptr %3, i64 0, i32 1
  store ptr %0, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Lexer, ptr %3, i64 0, i32 2
  store ptr %1, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Lexer, ptr %3, i64 0, i32 3
  store i64 -1, ptr %memberidx2.i, align 4
  %memberidx3.i = getelementptr inbounds %Lexer, ptr %3, i64 0, i32 5
  store i64 1, ptr %memberidx3.i, align 4
  %memberidx4.i = getelementptr inbounds %Lexer, ptr %3, i64 0, i32 4
  store i64 0, ptr %memberidx4.i, align 4
  %memberidx2.i.i24 = getelementptr inbounds %string, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx2.i.i24, align 4
  %5 = icmp slt i64 %4, 0
  br i1 %5, label %Lexer_advance.exit, label %ifend.i

ifend.i:                                          ; preds = %2
  %6 = load ptr, ptr %0, align 8
  %memberidx2.i26 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i64 0, i32 2
  %7 = load ptr, ptr %memberidx2.i26, align 8
  store i64 0, ptr %memberidx2.i, align 4
  %8 = tail call i8 %7(ptr nonnull %0, i64 0)
  store i8 %8, ptr %3, align 8
  %9 = icmp eq i8 %8, 10
  br i1 %9, label %if.entry6.i, label %else7.i

if.entry6.i:                                      ; preds = %ifend.i
  store i64 0, ptr %memberidx4.i, align 4
  store i64 2, ptr %memberidx3.i, align 4
  br label %Lexer_advance.exit

else7.i:                                          ; preds = %ifend.i
  store i64 1, ptr %memberidx4.i, align 4
  br label %Lexer_advance.exit

Lexer_advance.exit:                               ; preds = %2, %if.entry6.i, %else7.i
  %10 = phi i64 [ -1, %2 ], [ 0, %if.entry6.i ], [ 0, %else7.i ]
  %11 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Token_, ptr %11, align 8
  %memberidx.i28 = getelementptr inbounds %Array_Token_, ptr %11, i64 0, i32 2
  %memberidx1.i29 = getelementptr inbounds %Array_Token_, ptr %11, i64 0, i32 3
  store i64 8, ptr %memberidx1.i29, align 4
  %memberidx2.i30 = getelementptr inbounds %Array_Token_, ptr %11, i64 0, i32 1
  %12 = tail call ptr @malloc(i32 64)
  store ptr %12, ptr %memberidx2.i30, align 8
  store i64 0, ptr %memberidx.i28, align 4
  %13 = load i64, ptr %memberidx2.i.i24, align 4
  %14 = icmp sge i64 %10, %13
  %memberidx3 = getelementptr inbounds %Array_FloError_, ptr %1, i64 0, i32 2
  %15 = load i64, ptr %memberidx3, align 4
  %16 = icmp ne i64 %15, 0
  %17 = or i1 %14, %16
  br i1 %17, label %while.end, label %while.entry

while.entry:                                      ; preds = %Lexer_advance.exit, %Lexer_advance.exit53
  %18 = phi ptr [ %25, %Lexer_advance.exit53 ], [ %12, %Lexer_advance.exit ]
  %19 = phi i64 [ %26, %Lexer_advance.exit53 ], [ 8, %Lexer_advance.exit ]
  %20 = phi i64 [ %27, %Lexer_advance.exit53 ], [ 0, %Lexer_advance.exit ]
  %21 = call fastcc ptr @Lexer_lex_token(ptr nonnull %3)
  %.not.i56 = icmp slt i64 %20, %19
  br i1 %.not.i56, label %Array_Token____sl__.exit63, label %if.entry.i59

if.entry.i59:                                     ; preds = %while.entry
  %22 = shl i64 %19, 1
  store i64 %22, ptr %memberidx1.i29, align 4
  %23 = shl i64 %19, 4
  %24 = call ptr @realloc(ptr %18, i64 %23)
  store ptr %24, ptr %memberidx2.i30, align 8
  br label %Array_Token____sl__.exit63

Array_Token____sl__.exit63:                       ; preds = %while.entry, %if.entry.i59
  %25 = phi ptr [ %18, %while.entry ], [ %24, %if.entry.i59 ]
  %26 = phi i64 [ %19, %while.entry ], [ %22, %if.entry.i59 ]
  %27 = add i64 %20, 1
  store i64 %27, ptr %memberidx.i28, align 4
  %ptridx.i61 = getelementptr inbounds ptr, ptr %25, i64 %20
  store ptr %21, ptr %ptridx.i61, align 8
  %28 = load i64, ptr %memberidx2.i, align 4
  %29 = load ptr, ptr %memberidx.i, align 8
  %memberidx2.i.i43 = getelementptr inbounds %string, ptr %29, i64 0, i32 2
  %30 = load i64, ptr %memberidx2.i.i43, align 4
  %.not = icmp slt i64 %28, %30
  br i1 %.not, label %ifend.i47, label %Lexer_advance.exit53

ifend.i47:                                        ; preds = %Array_Token____sl__.exit63
  %31 = load ptr, ptr %29, align 8
  %memberidx2.i45 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %31, i64 0, i32 2
  %32 = load ptr, ptr %memberidx2.i45, align 8
  %33 = add nsw i64 %28, 1
  store i64 %33, ptr %memberidx2.i, align 4
  %34 = call i8 %32(ptr nonnull %29, i64 %33)
  store i8 %34, ptr %3, align 8
  %35 = icmp eq i8 %34, 10
  br i1 %35, label %if.entry6.i50, label %Lexer_advance.exit53.sink.split

if.entry6.i50:                                    ; preds = %ifend.i47
  store i64 0, ptr %memberidx4.i, align 4
  br label %Lexer_advance.exit53.sink.split

Lexer_advance.exit53.sink.split:                  ; preds = %ifend.i47, %if.entry6.i50
  %memberidx3.i.sink67 = phi ptr [ %memberidx3.i, %if.entry6.i50 ], [ %memberidx4.i, %ifend.i47 ]
  %36 = load i64, ptr %memberidx3.i.sink67, align 4
  %37 = add i64 %36, 1
  store i64 %37, ptr %memberidx3.i.sink67, align 4
  br label %Lexer_advance.exit53

Lexer_advance.exit53:                             ; preds = %Lexer_advance.exit53.sink.split, %Array_Token____sl__.exit63
  %38 = load i64, ptr %memberidx2.i, align 4
  %39 = load ptr, ptr %memberidx.i, align 8
  %memberidx2.i40 = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  %40 = load i64, ptr %memberidx2.i40, align 4
  %41 = icmp sge i64 %38, %40
  %42 = load ptr, ptr %memberidx1.i, align 8
  %memberidx5 = getelementptr inbounds %Array_FloError_, ptr %42, i64 0, i32 2
  %43 = load i64, ptr %memberidx5, align 4
  %44 = icmp ne i64 %43, 0
  %45 = or i1 %41, %44
  br i1 %45, label %while.end, label %while.entry

while.end:                                        ; preds = %Lexer_advance.exit53, %Lexer_advance.exit
  %46 = phi ptr [ %12, %Lexer_advance.exit ], [ %25, %Lexer_advance.exit53 ]
  %47 = phi i64 [ 8, %Lexer_advance.exit ], [ %26, %Lexer_advance.exit53 ]
  %48 = phi i64 [ 0, %Lexer_advance.exit ], [ %27, %Lexer_advance.exit53 ]
  %49 = tail call ptr @malloc(i32 16)
  %50 = tail call ptr @malloc(i32 32)
  %51 = load i64, ptr %memberidx4.i, align 4
  %52 = load i64, ptr %memberidx3.i, align 4
  %memberidx2.i36 = getelementptr inbounds %FloRange, ptr %50, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %50, i8 0, i64 16, i1 false)
  store i64 %51, ptr %memberidx2.i36, align 4
  %memberidx3.i37 = getelementptr inbounds %FloRange, ptr %50, i64 0, i32 3
  store i64 %52, ptr %memberidx3.i37, align 4
  store i64 44, ptr %49, align 4
  %memberidx1.i34 = getelementptr inbounds %Token, ptr %49, i64 0, i32 1
  store ptr %50, ptr %memberidx1.i34, align 8
  %.not.i = icmp slt i64 %48, %47
  br i1 %.not.i, label %Array_Token____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %while.end
  %53 = shl i64 %47, 1
  store i64 %53, ptr %memberidx1.i29, align 4
  %54 = shl i64 %47, 4
  %55 = call ptr @realloc(ptr %46, i64 %54)
  store ptr %55, ptr %memberidx2.i30, align 8
  %.pre = load i64, ptr %memberidx.i28, align 4
  br label %Array_Token____sl__.exit

Array_Token____sl__.exit:                         ; preds = %while.end, %if.entry.i
  %56 = phi ptr [ %46, %while.end ], [ %55, %if.entry.i ]
  %57 = phi i64 [ %48, %while.end ], [ %.pre, %if.entry.i ]
  %58 = add i64 %57, 1
  store i64 %58, ptr %memberidx.i28, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %56, i64 %57
  store ptr %49, ptr %ptridx.i, align 8
  ret ptr %11
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Array_Token___find(ptr nocapture readonly %0, ptr nocapture readonly %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Array_Token__, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Array_Token__, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %memberidx1.i = getelementptr inbounds %Array_Token_, ptr %1, i64 0, i32 2
  %5 = load i64, ptr %memberidx1.i, align 4
  %memberidx.i10.i = getelementptr inbounds %Array_Token_, ptr %1, i64 0, i32 1
  %6 = icmp sgt i64 %5, 0
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.09 = phi i64 [ 0, %for.body.lr.ph ], [ %15, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.09
  %7 = load ptr, ptr %ptridx, align 8
  %memberidx.i = getelementptr inbounds %Array_Token_, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx.i, align 4
  %.not.i = icmp eq i64 %8, %5
  br i1 %.not.i, label %for.cond.preheader.i, label %ifend

for.cond.preheader.i:                             ; preds = %for.body
  br i1 %6, label %for.body.lr.ph.i, label %common.ret

for.body.lr.ph.i:                                 ; preds = %for.cond.preheader.i
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %7, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i, align 8
  %10 = load ptr, ptr %memberidx.i10.i, align 8
  br label %for.body.i

for.cond.i:                                       ; preds = %for.body.i
  %11 = add nuw nsw i64 %storemerge12.i, 1
  %12 = icmp slt i64 %11, %5
  br i1 %12, label %for.body.i, label %common.ret

for.body.i:                                       ; preds = %for.cond.i, %for.body.lr.ph.i
  %storemerge12.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %11, %for.cond.i ]
  %ptridx.i.i = getelementptr inbounds ptr, ptr %9, i64 %storemerge12.i
  %13 = load ptr, ptr %ptridx.i.i, align 8
  %ptridx.i11.i = getelementptr inbounds ptr, ptr %10, i64 %storemerge12.i
  %14 = load ptr, ptr %ptridx.i11.i, align 8
  %.not9.i = icmp eq ptr %13, %14
  br i1 %.not9.i, label %for.cond.i, label %ifend

common.ret:                                       ; preds = %ifend, %for.cond.preheader.i, %for.cond.i, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.09, %for.cond.i ], [ -1, %ifend ], [ %i.09, %for.cond.preheader.i ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body.i, %for.body
  %15 = add nuw nsw i64 %i.09, 1
  %16 = icmp slt i64 %15, %2
  br i1 %16, label %for.body, label %common.ret
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_int__find(ptr nocapture readonly %0, i64 %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_int_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_int_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds i64, ptr %4, i64 %i.06
  %5 = load i64, ptr %ptridx, align 4
  %6 = icmp eq i64 %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal fastcc ptr @Lexer_string_token(ptr %0) unnamed_addr {
  %2 = alloca %StringBuilder, align 8
  %3 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Array_Token__, ptr %3, align 8
  %memberidx.i = getelementptr inbounds %Array_Array_Token__, ptr %3, i64 0, i32 2
  store i64 0, ptr %memberidx.i, align 4
  %memberidx1.i = getelementptr inbounds %Array_Array_Token__, ptr %3, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_Array_Token__, ptr %3, i64 0, i32 1
  %4 = tail call ptr @malloc(i32 64)
  store ptr %4, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %5 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_int_, ptr %5, align 8
  %memberidx.i64 = getelementptr inbounds %Array_int_, ptr %5, i64 0, i32 2
  store i64 0, ptr %memberidx.i64, align 4
  %memberidx1.i65 = getelementptr inbounds %Array_int_, ptr %5, i64 0, i32 3
  store i64 8, ptr %memberidx1.i65, align 4
  %memberidx2.i66 = getelementptr inbounds %Array_int_, ptr %5, i64 0, i32 1
  %6 = tail call ptr @malloc(i32 64)
  store ptr %6, ptr %memberidx2.i66, align 8
  store i64 0, ptr %memberidx.i64, align 4
  %memberidx.i.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %7 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx2.i.i, align 4
  %.not = icmp slt i64 %7, %9
  br i1 %.not, label %ifend.i, label %Lexer_advance.exit

ifend.i:                                          ; preds = %1
  %10 = load ptr, ptr %8, align 8
  %memberidx2.i68 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %10, i64 0, i32 2
  %11 = load ptr, ptr %memberidx2.i68, align 8
  %12 = add nsw i64 %7, 1
  store i64 %12, ptr %memberidx.i.i, align 4
  %13 = tail call i8 %11(ptr nonnull %8, i64 %12)
  store i8 %13, ptr %0, align 1
  %14 = icmp eq i8 %13, 10
  %memberidx9.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %14, label %if.entry6.i, label %Lexer_advance.exit.sink.split

if.entry6.i:                                      ; preds = %ifend.i
  store i64 0, ptr %memberidx9.i, align 4
  %memberidx10.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.sink.split

Lexer_advance.exit.sink.split:                    ; preds = %ifend.i, %if.entry6.i
  %memberidx10.i.sink267 = phi ptr [ %memberidx10.i, %if.entry6.i ], [ %memberidx9.i, %ifend.i ]
  %15 = load i64, ptr %memberidx10.i.sink267, align 4
  %16 = add i64 %15, 1
  store i64 %16, ptr %memberidx10.i.sink267, align 4
  br label %Lexer_advance.exit

Lexer_advance.exit:                               ; preds = %Lexer_advance.exit.sink.split, %1
  %17 = alloca %StringBuilder, align 8
  store ptr @VTableStringBuilder, ptr %17, align 8
  %memberidx.i69 = getelementptr inbounds %StringBuilder, ptr %17, i64 0, i32 2
  store i64 1, ptr %memberidx.i69, align 8
  %memberidx1.i70 = getelementptr inbounds %StringBuilder, ptr %17, i64 0, i32 1
  %18 = tail call ptr @malloc(i32 8)
  store ptr %18, ptr %memberidx1.i70, align 8
  %memberidx3.i71 = getelementptr inbounds %StringBuilder, ptr %17, i64 0, i32 3
  store ptr %18, ptr %memberidx3.i71, align 8
  %memberidx5.i = getelementptr inbounds %StringBuilder, ptr %17, i64 0, i32 4
  store i64 0, ptr %memberidx5.i, align 8
  %19 = load i64, ptr %memberidx.i.i, align 4
  %20 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i74 = getelementptr inbounds %string, ptr %20, i64 0, i32 2
  %21 = load i64, ptr %memberidx2.i74, align 4
  %.not217 = icmp slt i64 %19, %21
  br i1 %.not217, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %Lexer_advance.exit
  %memberidx12.i106 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx10.i104 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %while.entry.outer

while.entry.outer:                                ; preds = %while.entry.preheader, %Lexer_advance.exit124
  %escape_next.0.ph = phi i1 [ false, %while.entry.preheader ], [ %113, %Lexer_advance.exit124 ]
  %length.0.ph = phi i64 [ 2, %while.entry.preheader ], [ %112, %Lexer_advance.exit124 ]
  %22 = load i8, ptr %0, align 1
  %23 = icmp ne i8 %22, 34
  %24 = or i1 %escape_next.0.ph, %23
  br i1 %24, label %ifend.lr.ph, label %while.end

ifend.lr.ph:                                      ; preds = %while.entry.outer
  %25 = add i64 %length.0.ph, -2
  br label %ifend

while.end:                                        ; preds = %while.entry.outer, %Lexer_advance.exit124, %Array_Array_Token_____sl__.exit, %Lexer_advance.exit
  %length.1 = phi i64 [ 2, %Lexer_advance.exit ], [ %length.0.ph, %Array_Array_Token_____sl__.exit ], [ %length.0.ph, %while.entry.outer ], [ %112, %Lexer_advance.exit124 ]
  %26 = call ptr @malloc(i32 32)
  %27 = load i64, ptr %memberidx.i.i, align 4
  %28 = sub i64 1, %length.1
  %29 = add i64 %28, %27
  %30 = add i64 %27, 1
  %memberidx2.i76 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %31 = load i64, ptr %memberidx2.i76, align 4
  %32 = sub i64 %31, %length.1
  %memberidx3.i77 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %33 = load i64, ptr %memberidx3.i77, align 4
  store i64 %29, ptr %26, align 4
  %memberidx1.i.i78 = getelementptr inbounds %FloRange, ptr %26, i64 0, i32 1
  store i64 %30, ptr %memberidx1.i.i78, align 4
  %memberidx2.i.i79 = getelementptr inbounds %FloRange, ptr %26, i64 0, i32 2
  store i64 %32, ptr %memberidx2.i.i79, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %26, i64 0, i32 3
  store i64 %33, ptr %memberidx3.i.i, align 4
  %34 = load ptr, ptr %17, align 8
  %memberidx32 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %34, i64 0, i32 3
  %35 = load ptr, ptr %memberidx32, align 8
  %36 = call ptr %35(ptr nonnull %17)
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %2)
  %memberidx.i80 = getelementptr inbounds %string, ptr %36, i64 0, i32 2
  %37 = load i64, ptr %memberidx.i80, align 4
  store ptr @VTableStringBuilder, ptr %2, align 8
  %memberidx.i.i81 = getelementptr inbounds %StringBuilder, ptr %2, i64 0, i32 2
  store i64 %37, ptr %memberidx.i.i81, align 8
  %memberidx1.i.i82 = getelementptr inbounds %StringBuilder, ptr %2, i64 0, i32 1
  %38 = trunc i64 %37 to i32
  %mallocsize.i.i = shl i32 %38, 3
  %39 = call ptr @malloc(i32 %mallocsize.i.i)
  store ptr %39, ptr %memberidx1.i.i82, align 8
  %memberidx3.i.i83 = getelementptr inbounds %StringBuilder, ptr %2, i64 0, i32 3
  store ptr %39, ptr %memberidx3.i.i83, align 8
  %memberidx5.i.i = getelementptr inbounds %StringBuilder, ptr %2, i64 0, i32 4
  store i64 0, ptr %memberidx5.i.i, align 8
  %40 = load i64, ptr %memberidx.i80, align 4
  %41 = icmp sgt i64 %40, 0
  br i1 %41, label %for.body.i, label %unescape.exit

for.body.i:                                       ; preds = %while.end, %for.incr.i
  %i.0.i237 = phi i64 [ %46, %for.incr.i ], [ 0, %while.end ]
  %42 = load ptr, ptr %36, align 8
  %memberidx2.i84 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %42, i64 0, i32 2
  %43 = load ptr, ptr %memberidx2.i84, align 8
  %44 = call i8 %43(ptr nonnull %36, i64 %i.0.i237)
  %45 = icmp eq i8 %44, 92
  br i1 %45, label %if.entry.i, label %ifend.i85

for.incr.i:                                       ; preds = %if.entry16.i, %if.entry8.i, %ifend.i85
  %i.1.i = phi i64 [ %49, %if.entry8.i ], [ %81, %if.entry16.i ], [ %i.2.i, %ifend.i85 ]
  %46 = add i64 %i.1.i, 1
  %47 = load i64, ptr %memberidx.i80, align 4
  %48 = icmp slt i64 %46, %47
  br i1 %48, label %for.body.i, label %unescape.exit.loopexit

if.entry.i:                                       ; preds = %for.body.i
  %49 = add i64 %i.0.i237, 3
  %50 = load i64, ptr %memberidx.i80, align 4
  %51 = icmp slt i64 %49, %50
  br i1 %51, label %if.entry4.i, label %ifend6.i

ifend.i85:                                        ; preds = %ifend27.i.i, %get_escape_char.exit.i.fold.split, %get_escape_char.exit.i.fold.split226, %get_escape_char.exit.i.fold.split227, %get_escape_char.exit.i.fold.split228, %get_escape_char.exit.i.fold.split229, %get_escape_char.exit.i.fold.split230, %get_escape_char.exit.i.fold.split231, %get_escape_char.exit.i.fold.split232, %get_escape_char.exit.i.fold.split233, %ifend6.i, %for.body.i
  %char.0.i = phi i8 [ %44, %for.body.i ], [ 7, %ifend6.i ], [ %67, %ifend27.i.i ], [ 8, %get_escape_char.exit.i.fold.split ], [ 9, %get_escape_char.exit.i.fold.split226 ], [ 12, %get_escape_char.exit.i.fold.split227 ], [ 10, %get_escape_char.exit.i.fold.split228 ], [ 13, %get_escape_char.exit.i.fold.split229 ], [ 11, %get_escape_char.exit.i.fold.split230 ], [ 0, %get_escape_char.exit.i.fold.split231 ], [ %67, %get_escape_char.exit.i.fold.split232 ], [ %67, %get_escape_char.exit.i.fold.split233 ]
  %i.2.i = phi i64 [ %i.0.i237, %for.body.i ], [ %66, %ifend6.i ], [ %66, %ifend27.i.i ], [ %66, %get_escape_char.exit.i.fold.split ], [ %66, %get_escape_char.exit.i.fold.split226 ], [ %66, %get_escape_char.exit.i.fold.split227 ], [ %66, %get_escape_char.exit.i.fold.split228 ], [ %66, %get_escape_char.exit.i.fold.split229 ], [ %66, %get_escape_char.exit.i.fold.split230 ], [ %66, %get_escape_char.exit.i.fold.split231 ], [ %66, %get_escape_char.exit.i.fold.split232 ], [ %66, %get_escape_char.exit.i.fold.split233 ]
  %52 = load ptr, ptr %2, align 8
  %memberidx21.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %52, i64 0, i32 2
  %53 = load ptr, ptr %memberidx21.i, align 8
  call void %53(ptr nonnull %2, i8 %char.0.i)
  br label %for.incr.i

if.entry4.i:                                      ; preds = %if.entry.i
  %54 = load ptr, ptr %36, align 8
  %memberidx7.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %54, i64 0, i32 3
  %55 = load ptr, ptr %memberidx7.i, align 8
  %56 = call ptr %55(ptr nonnull %36)
  %57 = getelementptr i8, ptr %56, i64 1
  %58 = getelementptr i8, ptr %57, i64 %i.0.i237
  %59 = call i64 @memcmp(ptr %58, ptr nonnull @53, i64 3)
  %60 = icmp eq i64 %59, 0
  %61 = call i64 @memcmp(ptr %58, ptr nonnull @54, i64 3)
  %62 = icmp eq i64 %61, 0
  %63 = or i1 %60, %62
  br i1 %63, label %if.entry8.i, label %ifend10.i

ifend6.i:                                         ; preds = %if.entry13.i, %ifend10.i, %if.entry.i
  %64 = load ptr, ptr %36, align 8
  %memberidx20.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %64, i64 0, i32 2
  %65 = load ptr, ptr %memberidx20.i, align 8
  %66 = add nsw i64 %i.0.i237, 1
  %67 = call i8 %65(ptr nonnull %36, i64 %66)
  switch i8 %67, label %ifend27.i.i [
    i8 97, label %ifend.i85
    i8 98, label %get_escape_char.exit.i.fold.split
    i8 116, label %get_escape_char.exit.i.fold.split226
    i8 102, label %get_escape_char.exit.i.fold.split227
    i8 110, label %get_escape_char.exit.i.fold.split228
    i8 114, label %get_escape_char.exit.i.fold.split229
    i8 118, label %get_escape_char.exit.i.fold.split230
    i8 48, label %get_escape_char.exit.i.fold.split231
    i8 39, label %get_escape_char.exit.i.fold.split232
    i8 34, label %get_escape_char.exit.i.fold.split233
  ]

ifend27.i.i:                                      ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split:                ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split226:             ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split227:             ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split228:             ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split229:             ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split230:             ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split231:             ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split232:             ; preds = %ifend6.i
  br label %ifend.i85

get_escape_char.exit.i.fold.split233:             ; preds = %ifend6.i
  br label %ifend.i85

if.entry8.i:                                      ; preds = %if.entry4.i
  %68 = load ptr, ptr %2, align 8
  %memberidx11.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %68, i64 0, i32 1
  %69 = load ptr, ptr %memberidx11.i, align 8
  %70 = call ptr @malloc(i32 8)
  store i8 27, ptr %70, align 8
  %71 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %71, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %71, i64 0, i32 1
  store ptr %70, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %71, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %71, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i.i, align 4
  call void %69(ptr nonnull %2, ptr nonnull %71)
  br label %for.incr.i

ifend10.i:                                        ; preds = %if.entry4.i
  %72 = add i64 %i.0.i237, 6
  %73 = load i64, ptr %memberidx.i80, align 4
  %74 = icmp slt i64 %72, %73
  br i1 %74, label %if.entry13.i, label %ifend6.i

if.entry13.i:                                     ; preds = %ifend10.i
  %75 = call i64 @memcmp(ptr %58, ptr nonnull @55, i64 5)
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %if.entry16.i, label %ifend6.i

if.entry16.i:                                     ; preds = %if.entry13.i
  %77 = load ptr, ptr %2, align 8
  %memberidx19.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %77, i64 0, i32 1
  %78 = load ptr, ptr %memberidx19.i, align 8
  %79 = call ptr @malloc(i32 8)
  store i8 27, ptr %79, align 8
  %80 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %80, align 8
  %memberidx.i.i44.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  store ptr %79, ptr %memberidx.i.i44.i, align 8
  %memberidx1.i.i45.i = getelementptr inbounds %string, ptr %80, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i45.i, align 4
  %memberidx2.i.i46.i = getelementptr inbounds %string, ptr %80, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i46.i, align 4
  call void %78(ptr nonnull %2, ptr nonnull %80)
  %81 = add i64 %i.0.i237, 5
  br label %for.incr.i

unescape.exit.loopexit:                           ; preds = %for.incr.i
  %.pre259 = load ptr, ptr %2, align 8
  br label %unescape.exit

unescape.exit:                                    ; preds = %unescape.exit.loopexit, %while.end
  %82 = phi ptr [ %.pre259, %unescape.exit.loopexit ], [ @VTableStringBuilder, %while.end ]
  %memberidx22.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %82, i64 0, i32 3
  %83 = load ptr, ptr %memberidx22.i, align 8
  %84 = call ptr %83(ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %2)
  %85 = tail call ptr @malloc(i32 40)
  store i64 32, ptr %85, align 4
  %memberidx1.i.i86 = getelementptr inbounds %Token, ptr %85, i64 0, i32 1
  store ptr %26, ptr %memberidx1.i.i86, align 8
  %memberidx.i87 = getelementptr inbounds %StrToken, ptr %85, i64 0, i32 2
  store ptr %84, ptr %memberidx.i87, align 8
  %memberidx1.i88 = getelementptr inbounds %StrToken, ptr %85, i64 0, i32 3
  store ptr %5, ptr %memberidx1.i88, align 8
  %memberidx2.i89 = getelementptr inbounds %StrToken, ptr %85, i64 0, i32 4
  store ptr %3, ptr %memberidx2.i89, align 8
  ret ptr %85

ifend:                                            ; preds = %ifend.lr.ph, %Array_Array_Token_____sl__.exit
  %86 = phi i8 [ %22, %ifend.lr.ph ], [ %187, %Array_Array_Token_____sl__.exit ]
  %escape_next.0239 = phi i1 [ %escape_next.0.ph, %ifend.lr.ph ], [ false, %Array_Array_Token_____sl__.exit ]
  %87 = icmp ne i8 %86, 36
  %88 = or i1 %escape_next.0239, %87
  br i1 %88, label %ifend8, label %if.entry6

if.entry6:                                        ; preds = %ifend
  %89 = load i64, ptr %memberidx.i64, align 4
  %90 = load i64, ptr %memberidx1.i65, align 4
  %.not.i = icmp slt i64 %89, %90
  br i1 %.not.i, label %if.entry6.Array_int____sl__.exit_crit_edge, label %if.entry.i94

if.entry6.Array_int____sl__.exit_crit_edge:       ; preds = %if.entry6
  %.pre246 = load ptr, ptr %memberidx2.i66, align 8
  br label %Array_int____sl__.exit

if.entry.i94:                                     ; preds = %if.entry6
  %91 = shl i64 %90, 1
  store i64 %91, ptr %memberidx1.i65, align 4
  %92 = load ptr, ptr %memberidx2.i66, align 8
  %93 = shl i64 %90, 4
  %94 = call ptr @realloc(ptr %92, i64 %93)
  store ptr %94, ptr %memberidx2.i66, align 8
  %.pre = load i64, ptr %memberidx.i64, align 4
  br label %Array_int____sl__.exit

Array_int____sl__.exit:                           ; preds = %if.entry6.Array_int____sl__.exit_crit_edge, %if.entry.i94
  %95 = phi ptr [ %.pre246, %if.entry6.Array_int____sl__.exit_crit_edge ], [ %94, %if.entry.i94 ]
  %96 = phi i64 [ %89, %if.entry6.Array_int____sl__.exit_crit_edge ], [ %.pre, %if.entry.i94 ]
  %97 = add i64 %96, 1
  store i64 %97, ptr %memberidx.i64, align 4
  %ptridx.i = getelementptr inbounds i64, ptr %95, i64 %96
  store i64 %25, ptr %ptridx.i, align 4
  %98 = load i64, ptr %memberidx.i.i, align 4
  %99 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i98 = getelementptr inbounds %string, ptr %99, i64 0, i32 2
  %100 = load i64, ptr %memberidx2.i.i98, align 4
  %.not218 = icmp slt i64 %98, %100
  br i1 %.not218, label %ifend.i102, label %Lexer_advance.exit108

ifend.i102:                                       ; preds = %Array_int____sl__.exit
  %101 = load ptr, ptr %99, align 8
  %memberidx2.i100 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %101, i64 0, i32 2
  %102 = load ptr, ptr %memberidx2.i100, align 8
  %103 = add nsw i64 %98, 1
  store i64 %103, ptr %memberidx.i.i, align 4
  %104 = call i8 %102(ptr nonnull %99, i64 %103)
  store i8 %104, ptr %0, align 1
  %105 = icmp eq i8 %104, 10
  br i1 %105, label %if.entry6.i105, label %Lexer_advance.exit108.sink.split

if.entry6.i105:                                   ; preds = %ifend.i102
  store i64 0, ptr %memberidx12.i106, align 4
  br label %Lexer_advance.exit108.sink.split

Lexer_advance.exit108.sink.split:                 ; preds = %ifend.i102, %if.entry6.i105
  %memberidx10.i104.sink269 = phi ptr [ %memberidx10.i104, %if.entry6.i105 ], [ %memberidx12.i106, %ifend.i102 ]
  %106 = load i64, ptr %memberidx10.i104.sink269, align 4
  %107 = add i64 %106, 1
  store i64 %107, ptr %memberidx10.i104.sink269, align 4
  br label %Lexer_advance.exit108

Lexer_advance.exit108:                            ; preds = %Lexer_advance.exit108.sink.split, %Array_int____sl__.exit
  %108 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Token_, ptr %108, align 8
  %memberidx.i109 = getelementptr inbounds %Array_Token_, ptr %108, i64 0, i32 2
  store i64 0, ptr %memberidx.i109, align 4
  %memberidx1.i110 = getelementptr inbounds %Array_Token_, ptr %108, i64 0, i32 3
  store i64 8, ptr %memberidx1.i110, align 4
  %memberidx2.i111 = getelementptr inbounds %Array_Token_, ptr %108, i64 0, i32 1
  %109 = call ptr @malloc(i32 64)
  store ptr %109, ptr %memberidx2.i111, align 8
  store i64 0, ptr %memberidx.i109, align 4
  %110 = load i8, ptr %0, align 1
  %111 = icmp eq i8 %110, 40
  br i1 %111, label %if.entry12, label %else13

ifend8:                                           ; preds = %ifend
  %112 = add i64 %length.0.ph, 1
  %113 = icmp eq i8 %86, 92
  %114 = load ptr, ptr %17, align 8
  %memberidx30 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %114, i64 0, i32 2
  %115 = load ptr, ptr %memberidx30, align 8
  call void %115(ptr nonnull %17, i8 %86)
  %116 = load i64, ptr %memberidx.i.i, align 4
  %117 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i114 = getelementptr inbounds %string, ptr %117, i64 0, i32 2
  %118 = load i64, ptr %memberidx2.i.i114, align 4
  %.not224 = icmp slt i64 %116, %118
  br i1 %.not224, label %ifend.i118, label %Lexer_advance.exit124

ifend.i118:                                       ; preds = %ifend8
  %119 = load ptr, ptr %117, align 8
  %memberidx2.i116 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %119, i64 0, i32 2
  %120 = load ptr, ptr %memberidx2.i116, align 8
  %121 = add nsw i64 %116, 1
  store i64 %121, ptr %memberidx.i.i, align 4
  %122 = call i8 %120(ptr nonnull %117, i64 %121)
  store i8 %122, ptr %0, align 1
  %123 = icmp eq i8 %122, 10
  br i1 %123, label %if.entry6.i121, label %Lexer_advance.exit124.sink.split

if.entry6.i121:                                   ; preds = %ifend.i118
  store i64 0, ptr %memberidx12.i106, align 4
  br label %Lexer_advance.exit124.sink.split

Lexer_advance.exit124.sink.split:                 ; preds = %ifend.i118, %if.entry6.i121
  %memberidx10.i104.sink272 = phi ptr [ %memberidx10.i104, %if.entry6.i121 ], [ %memberidx12.i106, %ifend.i118 ]
  %124 = load i64, ptr %memberidx10.i104.sink272, align 4
  %125 = add i64 %124, 1
  store i64 %125, ptr %memberidx10.i104.sink272, align 4
  br label %Lexer_advance.exit124

Lexer_advance.exit124:                            ; preds = %Lexer_advance.exit124.sink.split, %ifend8
  %126 = load i64, ptr %memberidx.i.i, align 4
  %127 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i127 = getelementptr inbounds %string, ptr %127, i64 0, i32 2
  %128 = load i64, ptr %memberidx2.i127, align 4
  %.not225 = icmp slt i64 %126, %128
  br i1 %.not225, label %while.entry.outer, label %while.end

if.entry12:                                       ; preds = %Lexer_advance.exit108
  %129 = load i64, ptr %memberidx.i.i, align 4
  %130 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i130 = getelementptr inbounds %string, ptr %130, i64 0, i32 2
  %131 = load i64, ptr %memberidx2.i.i130, align 4
  %.not220 = icmp slt i64 %129, %131
  br i1 %.not220, label %ifend.i134, label %Lexer_advance.exit140

ifend.i134:                                       ; preds = %if.entry12
  %132 = load ptr, ptr %130, align 8
  %memberidx2.i132 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %132, i64 0, i32 2
  %133 = load ptr, ptr %memberidx2.i132, align 8
  %134 = add nsw i64 %129, 1
  store i64 %134, ptr %memberidx.i.i, align 4
  %135 = call i8 %133(ptr nonnull %130, i64 %134)
  store i8 %135, ptr %0, align 1
  %136 = icmp eq i8 %135, 10
  br i1 %136, label %if.entry6.i137, label %Lexer_advance.exit140.sink.split

if.entry6.i137:                                   ; preds = %ifend.i134
  store i64 0, ptr %memberidx12.i106, align 4
  br label %Lexer_advance.exit140.sink.split

Lexer_advance.exit140.sink.split:                 ; preds = %ifend.i134, %if.entry6.i137
  %memberidx10.i104.sink275 = phi ptr [ %memberidx10.i104, %if.entry6.i137 ], [ %memberidx12.i106, %ifend.i134 ]
  %.ph = phi i8 [ 10, %if.entry6.i137 ], [ %135, %ifend.i134 ]
  %137 = load i64, ptr %memberidx10.i104.sink275, align 4
  %138 = add i64 %137, 1
  store i64 %138, ptr %memberidx10.i104.sink275, align 4
  br label %Lexer_advance.exit140

Lexer_advance.exit140:                            ; preds = %Lexer_advance.exit140.sink.split, %if.entry12
  %139 = phi i8 [ 40, %if.entry12 ], [ %.ph, %Lexer_advance.exit140.sink.split ]
  %140 = icmp ne i8 %139, 41
  %141 = load i64, ptr %memberidx.i.i, align 4
  %142 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i143 = getelementptr inbounds %string, ptr %142, i64 0, i32 2
  %143 = load i64, ptr %memberidx2.i143, align 4
  %.not221 = icmp slt i64 %141, %143
  %144 = and i1 %140, %.not221
  br i1 %144, label %while.entry15, label %ifend14

else13:                                           ; preds = %Lexer_advance.exit108
  %145 = call fastcc ptr @Lexer_lex_token(ptr nonnull %0)
  %146 = load i64, ptr %memberidx.i109, align 4
  %147 = load i64, ptr %memberidx1.i110, align 4
  %.not.i146 = icmp slt i64 %146, %147
  br i1 %.not.i146, label %else13.Array_Token____sl__.exit_crit_edge, label %if.entry.i149

else13.Array_Token____sl__.exit_crit_edge:        ; preds = %else13
  %.pre248 = load ptr, ptr %memberidx2.i111, align 8
  br label %Array_Token____sl__.exit

if.entry.i149:                                    ; preds = %else13
  %148 = shl i64 %147, 1
  store i64 %148, ptr %memberidx1.i110, align 4
  %149 = load ptr, ptr %memberidx2.i111, align 8
  %150 = shl i64 %147, 4
  %151 = call ptr @realloc(ptr %149, i64 %150)
  store ptr %151, ptr %memberidx2.i111, align 8
  %.pre247 = load i64, ptr %memberidx.i109, align 4
  br label %Array_Token____sl__.exit

Array_Token____sl__.exit:                         ; preds = %else13.Array_Token____sl__.exit_crit_edge, %if.entry.i149
  %152 = phi ptr [ %.pre248, %else13.Array_Token____sl__.exit_crit_edge ], [ %151, %if.entry.i149 ]
  %153 = phi i64 [ %146, %else13.Array_Token____sl__.exit_crit_edge ], [ %.pre247, %if.entry.i149 ]
  %154 = add i64 %153, 1
  store i64 %154, ptr %memberidx.i109, align 4
  %ptridx.i151 = getelementptr inbounds ptr, ptr %152, i64 %153
  store ptr %145, ptr %ptridx.i151, align 8
  %.pre252 = load i64, ptr %memberidx.i.i, align 4
  %.pre253 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i155.phi.trans.insert = getelementptr inbounds %string, ptr %.pre253, i64 0, i32 2
  %.pre254 = load i64, ptr %memberidx2.i.i155.phi.trans.insert, align 4
  br label %ifend14

ifend14:                                          ; preds = %Lexer_advance.exit211, %Lexer_advance.exit140, %Array_Token____sl__.exit
  %155 = phi i64 [ %143, %Lexer_advance.exit140 ], [ %.pre254, %Array_Token____sl__.exit ], [ %221, %Lexer_advance.exit211 ]
  %156 = phi ptr [ %142, %Lexer_advance.exit140 ], [ %.pre253, %Array_Token____sl__.exit ], [ %220, %Lexer_advance.exit211 ]
  %157 = phi i64 [ %141, %Lexer_advance.exit140 ], [ %.pre252, %Array_Token____sl__.exit ], [ %219, %Lexer_advance.exit211 ]
  %.not219 = icmp slt i64 %157, %155
  br i1 %.not219, label %ifend.i159, label %Lexer_advance.exit165

ifend.i159:                                       ; preds = %ifend14
  %158 = load ptr, ptr %156, align 8
  %memberidx2.i157 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %158, i64 0, i32 2
  %159 = load ptr, ptr %memberidx2.i157, align 8
  %160 = add nsw i64 %157, 1
  store i64 %160, ptr %memberidx.i.i, align 4
  %161 = call i8 %159(ptr nonnull %156, i64 %160)
  store i8 %161, ptr %0, align 1
  %162 = icmp eq i8 %161, 10
  br i1 %162, label %if.entry6.i162, label %Lexer_advance.exit165.sink.split

if.entry6.i162:                                   ; preds = %ifend.i159
  store i64 0, ptr %memberidx12.i106, align 4
  br label %Lexer_advance.exit165.sink.split

Lexer_advance.exit165.sink.split:                 ; preds = %ifend.i159, %if.entry6.i162
  %memberidx10.i104.sink278 = phi ptr [ %memberidx10.i104, %if.entry6.i162 ], [ %memberidx12.i106, %ifend.i159 ]
  %163 = load i64, ptr %memberidx10.i104.sink278, align 4
  %164 = add i64 %163, 1
  store i64 %164, ptr %memberidx10.i104.sink278, align 4
  br label %Lexer_advance.exit165

Lexer_advance.exit165:                            ; preds = %Lexer_advance.exit165.sink.split, %ifend14
  %165 = tail call ptr @malloc(i32 16)
  %166 = tail call ptr @malloc(i32 32)
  %167 = load i64, ptr %memberidx12.i106, align 4
  %168 = load i64, ptr %memberidx10.i104, align 4
  %memberidx2.i167 = getelementptr inbounds %FloRange, ptr %166, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %166, i8 0, i64 16, i1 false)
  store i64 %167, ptr %memberidx2.i167, align 4
  %memberidx3.i168 = getelementptr inbounds %FloRange, ptr %166, i64 0, i32 3
  store i64 %168, ptr %memberidx3.i168, align 4
  store i64 44, ptr %165, align 4
  %memberidx1.i169 = getelementptr inbounds %Token, ptr %165, i64 0, i32 1
  store ptr %166, ptr %memberidx1.i169, align 8
  %169 = load i64, ptr %memberidx.i109, align 4
  %170 = load i64, ptr %memberidx1.i110, align 4
  %.not.i172 = icmp slt i64 %169, %170
  br i1 %.not.i172, label %Lexer_advance.exit165.Array_Token____sl__.exit179_crit_edge, label %if.entry.i175

Lexer_advance.exit165.Array_Token____sl__.exit179_crit_edge: ; preds = %Lexer_advance.exit165
  %.pre256 = load ptr, ptr %memberidx2.i111, align 8
  br label %Array_Token____sl__.exit179

if.entry.i175:                                    ; preds = %Lexer_advance.exit165
  %171 = shl i64 %170, 1
  store i64 %171, ptr %memberidx1.i110, align 4
  %172 = load ptr, ptr %memberidx2.i111, align 8
  %173 = shl i64 %170, 4
  %174 = call ptr @realloc(ptr %172, i64 %173)
  store ptr %174, ptr %memberidx2.i111, align 8
  %.pre255 = load i64, ptr %memberidx.i109, align 4
  br label %Array_Token____sl__.exit179

Array_Token____sl__.exit179:                      ; preds = %Lexer_advance.exit165.Array_Token____sl__.exit179_crit_edge, %if.entry.i175
  %175 = phi ptr [ %.pre256, %Lexer_advance.exit165.Array_Token____sl__.exit179_crit_edge ], [ %174, %if.entry.i175 ]
  %176 = phi i64 [ %169, %Lexer_advance.exit165.Array_Token____sl__.exit179_crit_edge ], [ %.pre255, %if.entry.i175 ]
  %177 = add i64 %176, 1
  store i64 %177, ptr %memberidx.i109, align 4
  %ptridx.i177 = getelementptr inbounds ptr, ptr %175, i64 %176
  store ptr %165, ptr %ptridx.i177, align 8
  %178 = load i64, ptr %memberidx.i, align 4
  %179 = load i64, ptr %memberidx1.i, align 4
  %.not.i182 = icmp slt i64 %178, %179
  br i1 %.not.i182, label %Array_Token____sl__.exit179.Array_Array_Token_____sl__.exit_crit_edge, label %if.entry.i185

Array_Token____sl__.exit179.Array_Array_Token_____sl__.exit_crit_edge: ; preds = %Array_Token____sl__.exit179
  %.pre258 = load ptr, ptr %memberidx2.i, align 8
  br label %Array_Array_Token_____sl__.exit

if.entry.i185:                                    ; preds = %Array_Token____sl__.exit179
  %180 = shl i64 %179, 1
  store i64 %180, ptr %memberidx1.i, align 4
  %181 = load ptr, ptr %memberidx2.i, align 8
  %182 = shl i64 %179, 4
  %183 = call ptr @realloc(ptr %181, i64 %182)
  store ptr %183, ptr %memberidx2.i, align 8
  %.pre257 = load i64, ptr %memberidx.i, align 4
  br label %Array_Array_Token_____sl__.exit

Array_Array_Token_____sl__.exit:                  ; preds = %Array_Token____sl__.exit179.Array_Array_Token_____sl__.exit_crit_edge, %if.entry.i185
  %184 = phi ptr [ %.pre258, %Array_Token____sl__.exit179.Array_Array_Token_____sl__.exit_crit_edge ], [ %183, %if.entry.i185 ]
  %185 = phi i64 [ %178, %Array_Token____sl__.exit179.Array_Array_Token_____sl__.exit_crit_edge ], [ %.pre257, %if.entry.i185 ]
  %186 = add i64 %185, 1
  store i64 %186, ptr %memberidx.i, align 4
  %ptridx.i187 = getelementptr inbounds ptr, ptr %184, i64 %185
  store ptr %108, ptr %ptridx.i187, align 8
  %187 = load i8, ptr %0, align 1
  %.not241 = icmp eq i8 %187, 34
  br i1 %.not241, label %while.end, label %ifend

while.entry15:                                    ; preds = %Lexer_advance.exit140, %Lexer_advance.exit211
  %188 = phi i8 [ %215, %Lexer_advance.exit211 ], [ %139, %Lexer_advance.exit140 ]
  %189 = phi i64 [ %192, %Lexer_advance.exit211 ], [ 0, %Lexer_advance.exit140 ]
  switch i8 %188, label %ifend25 [
    i8 40, label %ifend21.thread
    i8 41, label %if.entry23
  ]

ifend21.thread:                                   ; preds = %while.entry15
  %190 = add i64 %189, 1
  br label %ifend25

if.entry23:                                       ; preds = %while.entry15
  %191 = add i64 %189, -1
  br label %ifend25

ifend25:                                          ; preds = %while.entry15, %ifend21.thread, %if.entry23
  %192 = phi i64 [ %189, %while.entry15 ], [ %190, %ifend21.thread ], [ %191, %if.entry23 ]
  %193 = call fastcc ptr @Lexer_lex_token(ptr nonnull %0)
  %194 = load i64, ptr %memberidx.i109, align 4
  %195 = load i64, ptr %memberidx1.i110, align 4
  %.not.i191 = icmp slt i64 %194, %195
  br i1 %.not.i191, label %ifend25.Array_Token____sl__.exit198_crit_edge, label %if.entry.i194

ifend25.Array_Token____sl__.exit198_crit_edge:    ; preds = %ifend25
  %.pre250 = load ptr, ptr %memberidx2.i111, align 8
  br label %Array_Token____sl__.exit198

if.entry.i194:                                    ; preds = %ifend25
  %196 = shl i64 %195, 1
  store i64 %196, ptr %memberidx1.i110, align 4
  %197 = load ptr, ptr %memberidx2.i111, align 8
  %198 = shl i64 %195, 4
  %199 = call ptr @realloc(ptr %197, i64 %198)
  store ptr %199, ptr %memberidx2.i111, align 8
  %.pre249 = load i64, ptr %memberidx.i109, align 4
  br label %Array_Token____sl__.exit198

Array_Token____sl__.exit198:                      ; preds = %ifend25.Array_Token____sl__.exit198_crit_edge, %if.entry.i194
  %200 = phi ptr [ %.pre250, %ifend25.Array_Token____sl__.exit198_crit_edge ], [ %199, %if.entry.i194 ]
  %201 = phi i64 [ %194, %ifend25.Array_Token____sl__.exit198_crit_edge ], [ %.pre249, %if.entry.i194 ]
  %202 = add i64 %201, 1
  store i64 %202, ptr %memberidx.i109, align 4
  %ptridx.i196 = getelementptr inbounds ptr, ptr %200, i64 %201
  store ptr %193, ptr %ptridx.i196, align 8
  %203 = load i64, ptr %memberidx.i.i, align 4
  %204 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i201 = getelementptr inbounds %string, ptr %204, i64 0, i32 2
  %205 = load i64, ptr %memberidx2.i.i201, align 4
  %.not222 = icmp slt i64 %203, %205
  br i1 %.not222, label %ifend.i205, label %Array_Token____sl__.exit198.Lexer_advance.exit211_crit_edge

Array_Token____sl__.exit198.Lexer_advance.exit211_crit_edge: ; preds = %Array_Token____sl__.exit198
  %.pre251 = load i8, ptr %0, align 1
  br label %Lexer_advance.exit211

ifend.i205:                                       ; preds = %Array_Token____sl__.exit198
  %206 = load ptr, ptr %204, align 8
  %memberidx2.i203 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %206, i64 0, i32 2
  %207 = load ptr, ptr %memberidx2.i203, align 8
  %208 = add nsw i64 %203, 1
  store i64 %208, ptr %memberidx.i.i, align 4
  %209 = call i8 %207(ptr nonnull %204, i64 %208)
  store i8 %209, ptr %0, align 1
  %210 = icmp eq i8 %209, 10
  br i1 %210, label %if.entry6.i208, label %else7.i210

if.entry6.i208:                                   ; preds = %ifend.i205
  store i64 0, ptr %memberidx12.i106, align 4
  %211 = load i64, ptr %memberidx10.i104, align 4
  %212 = add i64 %211, 1
  store i64 %212, ptr %memberidx10.i104, align 4
  br label %Lexer_advance.exit211

else7.i210:                                       ; preds = %ifend.i205
  %213 = load i64, ptr %memberidx12.i106, align 4
  %214 = add i64 %213, 1
  store i64 %214, ptr %memberidx12.i106, align 4
  br label %Lexer_advance.exit211

Lexer_advance.exit211:                            ; preds = %Array_Token____sl__.exit198.Lexer_advance.exit211_crit_edge, %if.entry6.i208, %else7.i210
  %215 = phi i8 [ %.pre251, %Array_Token____sl__.exit198.Lexer_advance.exit211_crit_edge ], [ 10, %if.entry6.i208 ], [ %209, %else7.i210 ]
  %216 = icmp ne i8 %215, 41
  %217 = icmp ne i64 %192, 0
  %218 = or i1 %216, %217
  %219 = load i64, ptr %memberidx.i.i, align 4
  %220 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i214 = getelementptr inbounds %string, ptr %220, i64 0, i32 2
  %221 = load i64, ptr %memberidx2.i214, align 4
  %.not223 = icmp slt i64 %219, %221
  %222 = and i1 %218, %.not223
  br i1 %222, label %while.entry15, label %ifend14
}

define internal fastcc ptr @Lexer_base_int_token(ptr nocapture %0, i64 %1) unnamed_addr {
  %memberidx.i.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %3 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  %5 = load i64, ptr %memberidx2.i.i, align 4
  %.not = icmp slt i64 %3, %5
  br i1 %.not, label %ifend.i, label %Lexer_advance.exit

ifend.i:                                          ; preds = %2
  %6 = load ptr, ptr %4, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i64 0, i32 2
  %7 = load ptr, ptr %memberidx2.i, align 8
  %8 = add nsw i64 %3, 1
  store i64 %8, ptr %memberidx.i.i, align 4
  %9 = tail call i8 %7(ptr nonnull %4, i64 %8)
  store i8 %9, ptr %0, align 1
  %10 = icmp eq i8 %9, 10
  %memberidx9.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %10, label %if.entry6.i, label %Lexer_advance.exit.sink.split

if.entry6.i:                                      ; preds = %ifend.i
  store i64 0, ptr %memberidx9.i, align 4
  %memberidx10.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.sink.split

Lexer_advance.exit.sink.split:                    ; preds = %ifend.i, %if.entry6.i
  %memberidx10.i.sink67 = phi ptr [ %memberidx10.i, %if.entry6.i ], [ %memberidx9.i, %ifend.i ]
  %11 = load i64, ptr %memberidx10.i.sink67, align 4
  %12 = add i64 %11, 1
  store i64 %12, ptr %memberidx10.i.sink67, align 4
  br label %Lexer_advance.exit

Lexer_advance.exit:                               ; preds = %Lexer_advance.exit.sink.split, %2
  %13 = load i64, ptr %memberidx.i.i, align 4
  %14 = add i64 %13, 1
  %15 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i15 = getelementptr inbounds %string, ptr %15, i64 0, i32 2
  %16 = load i64, ptr %memberidx2.i15, align 4
  %17 = icmp slt i64 %14, %16
  br i1 %17, label %if.entry.i, label %Lexer_peek.exit

if.entry.i:                                       ; preds = %Lexer_advance.exit
  %18 = load ptr, ptr %15, align 8
  %memberidx4.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %18, i64 0, i32 2
  %19 = load ptr, ptr %memberidx4.i, align 8
  %20 = tail call i8 %19(ptr nonnull %15, i64 %14)
  br label %Lexer_peek.exit

Lexer_peek.exit:                                  ; preds = %Lexer_advance.exit, %if.entry.i
  %common.ret.op.i = phi i8 [ %20, %if.entry.i ], [ 0, %Lexer_advance.exit ]
  %21 = add i8 %common.ret.op.i, -97
  %22 = icmp ult i8 %21, 26
  %23 = add i8 %common.ret.op.i, -32
  %common.ret.op.i16 = select i1 %22, i8 %23, i8 %common.ret.op.i
  %24 = icmp slt i64 %1, 10
  %25 = icmp sgt i8 %common.ret.op.i16, 47
  %26 = sext i8 %common.ret.op.i16 to i64
  %27 = add i64 %1, 48
  %28 = icmp sge i64 %27, %26
  %29 = and i1 %25, %28
  br i1 %24, label %in_base_range.exit34, label %ifend.i33

ifend.i33:                                        ; preds = %Lexer_peek.exit
  %30 = icmp sgt i8 %common.ret.op.i16, 64
  %31 = add nuw i64 %1, 65
  %32 = icmp sge i64 %31, %26
  %33 = and i1 %30, %32
  %34 = or i1 %29, %33
  br label %in_base_range.exit34

in_base_range.exit34:                             ; preds = %Lexer_peek.exit, %ifend.i33
  %common.ret.op.i31 = phi i1 [ %34, %ifend.i33 ], [ %29, %Lexer_peek.exit ]
  %35 = load i64, ptr %memberidx.i.i, align 4
  %36 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i50 = getelementptr inbounds %string, ptr %36, i64 0, i32 2
  %37 = load i64, ptr %memberidx2.i50, align 4
  %.not60 = icmp slt i64 %35, %37
  %38 = and i1 %common.ret.op.i31, %.not60
  br i1 %38, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %in_base_range.exit34
  %memberidx12.i45 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx10.i43 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %39 = add i64 %1, 48
  %40 = add nuw i64 %1, 65
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %in_base_range.exit
  %41 = phi i64 [ %86, %in_base_range.exit ], [ %37, %while.entry.preheader ]
  %42 = phi ptr [ %85, %in_base_range.exit ], [ %36, %while.entry.preheader ]
  %43 = phi i64 [ %84, %in_base_range.exit ], [ %35, %while.entry.preheader ]
  %length.0 = phi i64 [ %48, %in_base_range.exit ], [ 3, %while.entry.preheader ]
  %value.0 = phi i64 [ %47, %in_base_range.exit ], [ 0, %while.entry.preheader ]
  %current_char.0 = phi i8 [ %common.ret.op.i23, %in_base_range.exit ], [ %common.ret.op.i16, %while.entry.preheader ]
  %44 = mul i64 %value.0, %1
  %45 = icmp sgt i8 %current_char.0, 64
  %spec.select.v = select i1 %45, i8 -55, i8 -48
  %spec.select = add i8 %spec.select.v, %current_char.0
  %46 = sext i8 %spec.select to i64
  %47 = add i64 %44, %46
  %48 = add i64 %length.0, 1
  %.not61 = icmp slt i64 %43, %41
  br i1 %.not61, label %ifend.i41, label %Lexer_advance.exit47

while.end:                                        ; preds = %in_base_range.exit, %in_base_range.exit34
  %length.1 = phi i64 [ 3, %in_base_range.exit34 ], [ %48, %in_base_range.exit ]
  %value.1 = phi i64 [ 0, %in_base_range.exit34 ], [ %47, %in_base_range.exit ]
  %49 = tail call ptr @malloc(i32 24)
  %50 = tail call ptr @malloc(i32 32)
  %51 = load i64, ptr %memberidx.i.i, align 4
  %52 = sub i64 1, %length.1
  %53 = add i64 %52, %51
  %54 = add i64 %51, 1
  %memberidx2.i54 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %55 = load i64, ptr %memberidx2.i54, align 4
  %56 = sub i64 %55, %length.1
  %memberidx3.i55 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %57 = load i64, ptr %memberidx3.i55, align 4
  store i64 %53, ptr %50, align 4
  %memberidx1.i.i56 = getelementptr inbounds %FloRange, ptr %50, i64 0, i32 1
  store i64 %54, ptr %memberidx1.i.i56, align 4
  %memberidx2.i.i57 = getelementptr inbounds %FloRange, ptr %50, i64 0, i32 2
  store i64 %56, ptr %memberidx2.i.i57, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %50, i64 0, i32 3
  store i64 %57, ptr %memberidx3.i.i, align 4
  store i64 29, ptr %49, align 4
  %memberidx1.i.i51 = getelementptr inbounds %Token, ptr %49, i64 0, i32 1
  store ptr %50, ptr %memberidx1.i.i51, align 8
  %memberidx.i52 = getelementptr inbounds %IntToken, ptr %49, i64 0, i32 2
  store i64 %value.1, ptr %memberidx.i52, align 4
  ret ptr %49

ifend.i41:                                        ; preds = %while.entry
  %58 = load ptr, ptr %42, align 8
  %memberidx2.i39 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %58, i64 0, i32 2
  %59 = load ptr, ptr %memberidx2.i39, align 8
  %60 = add nsw i64 %43, 1
  store i64 %60, ptr %memberidx.i.i, align 4
  %61 = tail call i8 %59(ptr nonnull %42, i64 %60)
  store i8 %61, ptr %0, align 1
  %62 = icmp eq i8 %61, 10
  br i1 %62, label %if.entry6.i44, label %Lexer_advance.exit47.sink.split

if.entry6.i44:                                    ; preds = %ifend.i41
  store i64 0, ptr %memberidx12.i45, align 4
  br label %Lexer_advance.exit47.sink.split

Lexer_advance.exit47.sink.split:                  ; preds = %ifend.i41, %if.entry6.i44
  %memberidx10.i43.sink69 = phi ptr [ %memberidx10.i43, %if.entry6.i44 ], [ %memberidx12.i45, %ifend.i41 ]
  %63 = load i64, ptr %memberidx10.i43.sink69, align 4
  %64 = add i64 %63, 1
  store i64 %64, ptr %memberidx10.i43.sink69, align 4
  br label %Lexer_advance.exit47

Lexer_advance.exit47:                             ; preds = %Lexer_advance.exit47.sink.split, %while.entry
  %65 = load i64, ptr %memberidx.i.i, align 4
  %66 = add i64 %65, 1
  %67 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i26 = getelementptr inbounds %string, ptr %67, i64 0, i32 2
  %68 = load i64, ptr %memberidx2.i26, align 4
  %69 = icmp slt i64 %66, %68
  br i1 %69, label %if.entry.i29, label %Lexer_peek.exit30

if.entry.i29:                                     ; preds = %Lexer_advance.exit47
  %70 = load ptr, ptr %67, align 8
  %memberidx4.i28 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %70, i64 0, i32 2
  %71 = load ptr, ptr %memberidx4.i28, align 8
  %72 = tail call i8 %71(ptr nonnull %67, i64 %66)
  br label %Lexer_peek.exit30

Lexer_peek.exit30:                                ; preds = %Lexer_advance.exit47, %if.entry.i29
  %common.ret.op.i27 = phi i8 [ %72, %if.entry.i29 ], [ 0, %Lexer_advance.exit47 ]
  %73 = add i8 %common.ret.op.i27, -97
  %74 = icmp ult i8 %73, 26
  %75 = add i8 %common.ret.op.i27, -32
  %common.ret.op.i23 = select i1 %74, i8 %75, i8 %common.ret.op.i27
  %76 = icmp sgt i8 %common.ret.op.i23, 47
  %77 = sext i8 %common.ret.op.i23 to i64
  %78 = icmp sge i64 %39, %77
  %79 = and i1 %76, %78
  br i1 %24, label %in_base_range.exit, label %ifend.i22

ifend.i22:                                        ; preds = %Lexer_peek.exit30
  %80 = icmp sgt i8 %common.ret.op.i23, 64
  %81 = icmp sge i64 %40, %77
  %82 = and i1 %80, %81
  %83 = or i1 %79, %82
  br label %in_base_range.exit

in_base_range.exit:                               ; preds = %Lexer_peek.exit30, %ifend.i22
  %common.ret.op.i20 = phi i1 [ %83, %ifend.i22 ], [ %79, %Lexer_peek.exit30 ]
  %84 = load i64, ptr %memberidx.i.i, align 4
  %85 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i19 = getelementptr inbounds %string, ptr %85, i64 0, i32 2
  %86 = load i64, ptr %memberidx2.i19, align 4
  %.not62 = icmp slt i64 %84, %86
  %87 = and i1 %common.ret.op.i20, %.not62
  br i1 %87, label %while.entry, label %while.end
}

define internal fastcc ptr @Lexer_lex_token(ptr %0) unnamed_addr {
  %2 = load i8, ptr %0, align 1
  switch i8 %2, label %ifend [
    i8 32, label %if.entry
    i8 9, label %if.entry
  ]

common.ret:                                       ; preds = %false_block.i, %true_block.i, %if.entry6.i912, %if.entry2.i, %if.entry.i909, %ifend5.i, %ifend.i895, %ifend6.i757, %Lexer_advance.exit84.i749, %ifend3.i728, %Lexer_advance.exit.i691, %ifend6.i, %Lexer_advance.exit84.i, %ifend3.i655, %Lexer_advance.exit.i649, %ifend.i628, %Lexer_advance.exit.i620, %ifend3.i591, %Lexer_advance.exit44.i583, %Lexer_advance.exit.i554, %ifend.i441, %Lexer_advance.exit.i433, %ifend.i365, %Lexer_advance.exit.i357, %ifend.i328, %Lexer_advance.exit.i320, %ifend.i291, %Lexer_advance.exit.i290, %ifend3.i269, %Lexer_advance.exit44.i261, %Lexer_advance.exit.i232, %ifend3.i, %Lexer_advance.exit44.i, %Lexer_advance.exit.i, %Array_FloError____sl__.exit, %if.entry87, %Lexer_dot_token.exit, %if.entry69, %if.entry66, %Lexer_char_token.exit, %if.entry60, %if.entry57, %if.entry54, %if.entry51, %if.entry48, %if.entry45, %if.entry42, %Lexer_advance.exit404, %if.entry18, %if.entry15, %if.entry12, %if.entry6, %Lexer_advance.exit
  %common.ret.op = phi ptr [ %13, %Lexer_advance.exit ], [ %338, %if.entry6 ], [ %449, %if.entry12 ], [ %456, %if.entry15 ], [ %463, %if.entry18 ], [ %821, %Lexer_advance.exit404 ], [ %853, %if.entry42 ], [ %860, %if.entry45 ], [ %867, %if.entry48 ], [ %874, %if.entry51 ], [ %881, %if.entry54 ], [ %888, %if.entry57 ], [ %895, %if.entry60 ], [ %938, %Lexer_char_token.exit ], [ %947, %if.entry66 ], [ %954, %if.entry69 ], [ %1253, %Lexer_dot_token.exit ], [ %1262, %if.entry87 ], [ null, %Array_FloError____sl__.exit ], [ %488, %Lexer_advance.exit.i ], [ %520, %ifend3.i ], [ %512, %Lexer_advance.exit44.i ], [ %545, %Lexer_advance.exit.i232 ], [ %577, %ifend3.i269 ], [ %569, %Lexer_advance.exit44.i261 ], [ %603, %Lexer_advance.exit.i290 ], [ %611, %ifend.i291 ], [ %636, %Lexer_advance.exit.i320 ], [ %644, %ifend.i328 ], [ %669, %Lexer_advance.exit.i357 ], [ %677, %ifend.i365 ], [ %838, %Lexer_advance.exit.i433 ], [ %846, %ifend.i441 ], [ %979, %Lexer_advance.exit.i554 ], [ %1011, %ifend3.i591 ], [ %1003, %Lexer_advance.exit44.i583 ], [ %1036, %Lexer_advance.exit.i620 ], [ %1044, %ifend.i628 ], [ %1069, %Lexer_advance.exit.i649 ], [ %1101, %ifend3.i655 ], [ %1118, %Lexer_advance.exit84.i ], [ %1126, %ifend6.i ], [ %1152, %Lexer_advance.exit.i691 ], [ %1184, %ifend3.i728 ], [ %1201, %Lexer_advance.exit84.i749 ], [ %1209, %ifend6.i757 ], [ %308, %ifend.i895 ], [ %312, %ifend5.i ], [ %351, %if.entry.i909 ], [ %362, %if.entry2.i ], [ %373, %if.entry6.i912 ], [ %414, %true_block.i ], [ %414, %false_block.i ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1, %1
  %memberidx.i.i166 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %3 = load i64, ptr %memberidx.i.i166, align 4
  %memberidx1.i.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i167 = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  %5 = load i64, ptr %memberidx2.i.i167, align 4
  %.not873 = icmp slt i64 %3, %5
  br i1 %.not873, label %ifend.i, label %Lexer_advance.exit

ifend.i:                                          ; preds = %if.entry
  %6 = load ptr, ptr %4, align 8
  %memberidx2.i169 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i64 0, i32 2
  %7 = load ptr, ptr %memberidx2.i169, align 8
  %8 = add nsw i64 %3, 1
  store i64 %8, ptr %memberidx.i.i166, align 4
  %9 = tail call i8 %7(ptr nonnull %4, i64 %8)
  store i8 %9, ptr %0, align 1
  %10 = icmp eq i8 %9, 10
  %memberidx9.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %10, label %if.entry6.i, label %Lexer_advance.exit.sink.split

if.entry6.i:                                      ; preds = %ifend.i
  store i64 0, ptr %memberidx9.i, align 4
  %memberidx10.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.sink.split

Lexer_advance.exit.sink.split:                    ; preds = %ifend.i, %if.entry6.i
  %memberidx10.i.sink999 = phi ptr [ %memberidx10.i, %if.entry6.i ], [ %memberidx9.i, %ifend.i ]
  %11 = load i64, ptr %memberidx10.i.sink999, align 4
  %12 = add i64 %11, 1
  store i64 %12, ptr %memberidx10.i.sink999, align 4
  br label %Lexer_advance.exit

Lexer_advance.exit:                               ; preds = %Lexer_advance.exit.sink.split, %if.entry
  %13 = tail call fastcc ptr @Lexer_lex_token(ptr nonnull %0)
  br label %common.ret

ifend:                                            ; preds = %1
  %14 = and i8 %2, -33
  %15 = add i8 %14, -65
  %16 = icmp ult i8 %15, 26
  %17 = icmp eq i8 %2, 95
  %18 = or i1 %17, %16
  br i1 %18, label %if.entry3, label %ifend5

if.entry3:                                        ; preds = %ifend
  %memberidx.i883 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %19 = load i64, ptr %memberidx.i883, align 4
  %20 = add i64 %19, 1
  %memberidx1.i.i884 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %21 = load ptr, ptr %memberidx1.i.i884, align 8
  %memberidx2.i.i885 = getelementptr inbounds %string, ptr %21, i64 0, i32 2
  %22 = load i64, ptr %memberidx2.i.i885, align 4
  %23 = icmp slt i64 %20, %22
  br i1 %23, label %if.entry.i.i887, label %Lexer_peek.exit.i

if.entry.i.i887:                                  ; preds = %if.entry3
  %24 = load ptr, ptr %21, align 8
  %memberidx4.i.i886 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %24, i64 0, i32 2
  %25 = load ptr, ptr %memberidx4.i.i886, align 8
  %26 = tail call i8 %25(ptr nonnull %21, i64 %20)
  %.pre.i = load i64, ptr %memberidx.i883, align 4
  %.pre159.i = load ptr, ptr %memberidx1.i.i884, align 8
  %memberidx2.i32.phi.trans.insert.i = getelementptr inbounds %string, ptr %.pre159.i, i64 0, i32 2
  %.pre160.i = load i64, ptr %memberidx2.i32.phi.trans.insert.i, align 4
  %.pre167.i = add i64 %.pre.i, 1
  br label %Lexer_peek.exit.i

Lexer_peek.exit.i:                                ; preds = %if.entry.i.i887, %if.entry3
  %.pre-phi.i = phi i64 [ %20, %if.entry3 ], [ %.pre167.i, %if.entry.i.i887 ]
  %27 = phi i64 [ %22, %if.entry3 ], [ %.pre160.i, %if.entry.i.i887 ]
  %28 = phi ptr [ %21, %if.entry3 ], [ %.pre159.i, %if.entry.i.i887 ]
  %29 = phi i64 [ %19, %if.entry3 ], [ %.pre.i, %if.entry.i.i887 ]
  %30 = icmp slt i64 %.pre-phi.i, %27
  br i1 %30, label %if.entry.i35.i, label %Lexer_peek.exit36.i

if.entry.i35.i:                                   ; preds = %Lexer_peek.exit.i
  %31 = load ptr, ptr %28, align 8
  %memberidx4.i34.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %31, i64 0, i32 2
  %32 = load ptr, ptr %memberidx4.i34.i, align 8
  %33 = tail call i8 %32(ptr nonnull %28, i64 %.pre-phi.i)
  %.pre161.i = load i64, ptr %memberidx.i883, align 4
  %.pre162.i = load ptr, ptr %memberidx1.i.i884, align 8
  %memberidx2.i54.phi.trans.insert.i = getelementptr inbounds %string, ptr %.pre162.i, i64 0, i32 2
  %.pre163.i = load i64, ptr %memberidx2.i54.phi.trans.insert.i, align 4
  br label %Lexer_peek.exit36.i

Lexer_peek.exit36.i:                              ; preds = %if.entry.i35.i, %Lexer_peek.exit.i
  %34 = phi i64 [ %.pre163.i, %if.entry.i35.i ], [ %27, %Lexer_peek.exit.i ]
  %35 = phi ptr [ %.pre162.i, %if.entry.i35.i ], [ %28, %Lexer_peek.exit.i ]
  %36 = phi i64 [ %.pre161.i, %if.entry.i35.i ], [ %29, %Lexer_peek.exit.i ]
  %common.ret.op.i33.i = phi i8 [ %33, %if.entry.i35.i ], [ 0, %Lexer_peek.exit.i ]
  %37 = and i8 %common.ret.op.i33.i, -33
  %38 = add i8 %37, -65
  %39 = icmp ult i8 %38, 26
  %40 = icmp eq i8 %common.ret.op.i33.i, 95
  %41 = or i1 %40, %39
  %42 = add i8 %common.ret.op.i33.i, -48
  %43 = icmp ult i8 %42, 10
  %44 = or i1 %43, %41
  %.not150.i = icmp slt i64 %36, %34
  %45 = and i1 %.not150.i, %44
  br i1 %45, label %while.entry.preheader.i, label %while.end.i891

while.entry.preheader.i:                          ; preds = %Lexer_peek.exit36.i
  %memberidx12.i78.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx10.i76.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %while.entry.i889

while.entry.i889:                                 ; preds = %Lexer_peek.exit87.i, %while.entry.preheader.i
  %46 = phi ptr [ %65, %Lexer_peek.exit87.i ], [ %35, %while.entry.preheader.i ]
  %47 = phi i64 [ %66, %Lexer_peek.exit87.i ], [ %36, %while.entry.preheader.i ]
  %48 = phi i64 [ %67, %Lexer_peek.exit87.i ], [ %34, %while.entry.preheader.i ]
  %length.0.i888 = phi i64 [ %49, %Lexer_peek.exit87.i ], [ 1, %while.entry.preheader.i ]
  %49 = add i64 %length.0.i888, 1
  %.not154.i = icmp slt i64 %47, %48
  br i1 %.not154.i, label %ifend.i74.i, label %Lexer_advance.exit80.i

ifend.i74.i:                                      ; preds = %while.entry.i889
  %50 = load ptr, ptr %46, align 8
  %memberidx2.i72.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %50, i64 0, i32 2
  %51 = load ptr, ptr %memberidx2.i72.i, align 8
  %52 = add nsw i64 %47, 1
  store i64 %52, ptr %memberidx.i883, align 4
  %53 = tail call i8 %51(ptr nonnull %46, i64 %52)
  store i8 %53, ptr %0, align 1
  %54 = icmp eq i8 %53, 10
  br i1 %54, label %if.entry6.i77.i, label %Lexer_advance.exit80.sink.split.i

if.entry6.i77.i:                                  ; preds = %ifend.i74.i
  store i64 0, ptr %memberidx12.i78.i, align 4
  br label %Lexer_advance.exit80.sink.split.i

Lexer_advance.exit80.sink.split.i:                ; preds = %if.entry6.i77.i, %ifend.i74.i
  %memberidx10.i76.sink170.i = phi ptr [ %memberidx10.i76.i, %if.entry6.i77.i ], [ %memberidx12.i78.i, %ifend.i74.i ]
  %55 = load i64, ptr %memberidx10.i76.sink170.i, align 4
  %56 = add i64 %55, 1
  store i64 %56, ptr %memberidx10.i76.sink170.i, align 4
  %.pre975 = load i64, ptr %memberidx.i883, align 4
  %.pre976 = load ptr, ptr %memberidx1.i.i884, align 8
  br label %Lexer_advance.exit80.i

Lexer_advance.exit80.i:                           ; preds = %Lexer_advance.exit80.sink.split.i, %while.entry.i889
  %57 = phi ptr [ %.pre976, %Lexer_advance.exit80.sink.split.i ], [ %46, %while.entry.i889 ]
  %58 = phi i64 [ %.pre975, %Lexer_advance.exit80.sink.split.i ], [ %47, %while.entry.i889 ]
  %59 = add i64 %58, 1
  %memberidx2.i83.i = getelementptr inbounds %string, ptr %57, i64 0, i32 2
  %60 = load i64, ptr %memberidx2.i83.i, align 4
  %61 = icmp slt i64 %59, %60
  br i1 %61, label %if.entry.i86.i, label %Lexer_peek.exit87.i

if.entry.i86.i:                                   ; preds = %Lexer_advance.exit80.i
  %62 = load ptr, ptr %57, align 8
  %memberidx4.i85.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %62, i64 0, i32 2
  %63 = load ptr, ptr %memberidx4.i85.i, align 8
  %64 = tail call i8 %63(ptr nonnull %57, i64 %59)
  %.pre164.i = load i64, ptr %memberidx.i883, align 4
  %.pre165.i = load ptr, ptr %memberidx1.i.i884, align 8
  %memberidx2.i105.phi.trans.insert.i = getelementptr inbounds %string, ptr %.pre165.i, i64 0, i32 2
  %.pre166.i = load i64, ptr %memberidx2.i105.phi.trans.insert.i, align 4
  br label %Lexer_peek.exit87.i

Lexer_peek.exit87.i:                              ; preds = %if.entry.i86.i, %Lexer_advance.exit80.i
  %65 = phi ptr [ %.pre165.i, %if.entry.i86.i ], [ %57, %Lexer_advance.exit80.i ]
  %66 = phi i64 [ %.pre164.i, %if.entry.i86.i ], [ %58, %Lexer_advance.exit80.i ]
  %67 = phi i64 [ %.pre166.i, %if.entry.i86.i ], [ %60, %Lexer_advance.exit80.i ]
  %common.ret.op.i84.i = phi i8 [ %64, %if.entry.i86.i ], [ 0, %Lexer_advance.exit80.i ]
  %68 = and i8 %common.ret.op.i84.i, -33
  %69 = add i8 %68, -65
  %70 = icmp ult i8 %69, 26
  %71 = icmp eq i8 %common.ret.op.i84.i, 95
  %72 = or i1 %71, %70
  %73 = add i8 %common.ret.op.i84.i, -48
  %74 = icmp ult i8 %73, 10
  %75 = or i1 %74, %72
  %.not155.i = icmp slt i64 %66, %67
  %76 = and i1 %.not155.i, %75
  br i1 %76, label %while.entry.i889, label %while.end.i891

while.end.i891:                                   ; preds = %Lexer_peek.exit87.i, %Lexer_peek.exit36.i
  %77 = phi ptr [ %35, %Lexer_peek.exit36.i ], [ %65, %Lexer_peek.exit87.i ]
  %length.1.i = phi i64 [ 1, %Lexer_peek.exit36.i ], [ %49, %Lexer_peek.exit87.i ]
  %78 = load ptr, ptr %77, align 8
  %memberidx2.i890 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %78, i64 0, i32 1
  %79 = load ptr, ptr %memberidx2.i890, align 8
  %80 = tail call ptr %79(ptr nonnull %77, i64 %19, i64 %length.1.i)
  %81 = tail call ptr @malloc(i32 32)
  %82 = load i64, ptr %memberidx.i883, align 4
  %83 = sub i64 1, %length.1.i
  %84 = add i64 %83, %82
  %85 = add i64 %82, 1
  %memberidx2.i107.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %86 = load i64, ptr %memberidx2.i107.i, align 4
  %87 = sub i64 %86, %length.1.i
  %memberidx3.i108.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %88 = load i64, ptr %memberidx3.i108.i, align 4
  store i64 %84, ptr %81, align 4
  %memberidx1.i.i109.i = getelementptr inbounds %FloRange, ptr %81, i64 0, i32 1
  store i64 %85, ptr %memberidx1.i.i109.i, align 4
  %memberidx2.i.i110.i = getelementptr inbounds %FloRange, ptr %81, i64 0, i32 2
  store i64 %87, ptr %memberidx2.i.i110.i, align 4
  %memberidx3.i.i111.i = getelementptr inbounds %FloRange, ptr %81, i64 0, i32 3
  store i64 %88, ptr %memberidx3.i.i111.i, align 4
  %89 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %89, ptr noundef nonnull align 8 dereferenceable(3) @29, i64 3, i1 false)
  %90 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %90, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %string, ptr %90, i64 0, i32 1
  store ptr %89, ptr %memberidx.i.i.i.i, align 8
  %memberidx1.i.i.i.i = getelementptr inbounds %string, ptr %90, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %string, ptr %90, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i.i.i, align 4
  %memberidx.i.i98.i = getelementptr inbounds %string, ptr %80, i64 0, i32 2
  %91 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i.i.i = icmp eq i64 %91, 3
  br i1 %.not.i.i.i, label %ifend.i.i.i, label %ifend.i102.i

ifend.i.i.i:                                      ; preds = %while.end.i891
  %memberidx2.i.i100.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %92 = load ptr, ptr %memberidx2.i.i100.i, align 8
  %93 = tail call i64 @memcmp(ptr %92, ptr nonnull %89, i64 3)
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %if.entry.i893, label %ifend.i102.i

ifend.i102.i:                                     ; preds = %ifend.i.i.i, %while.end.i891
  %95 = tail call ptr @malloc(i32 16)
  store i16 29295, ptr %95, align 8
  %96 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %96, align 8
  %memberidx.i.i137.i.i = getelementptr inbounds %string, ptr %96, i64 0, i32 1
  store ptr %95, ptr %memberidx.i.i137.i.i, align 8
  %memberidx1.i.i138.i.i = getelementptr inbounds %string, ptr %96, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i138.i.i, align 4
  %memberidx2.i.i139.i.i = getelementptr inbounds %string, ptr %96, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i139.i.i, align 4
  %97 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i142.i.i = icmp eq i64 %97, 2
  br i1 %.not.i142.i.i, label %ifend.i146.i.i, label %ifend3.i.i

ifend.i146.i.i:                                   ; preds = %ifend.i102.i
  %memberidx2.i144.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %98 = load ptr, ptr %memberidx2.i144.i.i, align 8
  %99 = tail call i64 @memcmp(ptr %98, ptr nonnull %95, i64 2)
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %if.entry.i893, label %ifend3.i.i

ifend3.i.i:                                       ; preds = %ifend.i146.i.i, %ifend.i102.i
  %101 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %101, ptr noundef nonnull align 8 dereferenceable(3) @30, i64 3, i1 false)
  %102 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %102, align 8
  %memberidx.i.i148.i.i = getelementptr inbounds %string, ptr %102, i64 0, i32 1
  store ptr %101, ptr %memberidx.i.i148.i.i, align 8
  %memberidx1.i.i149.i.i = getelementptr inbounds %string, ptr %102, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i149.i.i, align 4
  %memberidx2.i.i150.i.i = getelementptr inbounds %string, ptr %102, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i150.i.i, align 4
  %103 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i153.i.i = icmp eq i64 %103, 3
  br i1 %.not.i153.i.i, label %ifend.i157.i.i, label %ifend6.i.i

ifend.i157.i.i:                                   ; preds = %ifend3.i.i
  %memberidx2.i155.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %104 = load ptr, ptr %memberidx2.i155.i.i, align 8
  %105 = tail call i64 @memcmp(ptr %104, ptr nonnull %101, i64 3)
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %if.entry.i893, label %ifend6.i.i

ifend6.i.i:                                       ; preds = %ifend.i157.i.i, %ifend3.i.i
  %107 = tail call ptr @malloc(i32 40)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %107, ptr noundef nonnull align 8 dereferenceable(5) @31, i64 5, i1 false)
  %108 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %108, align 8
  %memberidx.i.i159.i.i = getelementptr inbounds %string, ptr %108, i64 0, i32 1
  store ptr %107, ptr %memberidx.i.i159.i.i, align 8
  %memberidx1.i.i160.i.i = getelementptr inbounds %string, ptr %108, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i160.i.i, align 4
  %memberidx2.i.i161.i.i = getelementptr inbounds %string, ptr %108, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i161.i.i, align 4
  %109 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i164.i.i = icmp eq i64 %109, 5
  br i1 %.not.i164.i.i, label %ifend.i168.i.i, label %ifend9.i.i

ifend.i168.i.i:                                   ; preds = %ifend6.i.i
  %memberidx2.i166.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %110 = load ptr, ptr %memberidx2.i166.i.i, align 8
  %111 = tail call i64 @memcmp(ptr %110, ptr nonnull %107, i64 5)
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %if.entry.i893, label %ifend9.i.i

ifend9.i.i:                                       ; preds = %ifend.i168.i.i, %ifend6.i.i
  %113 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %113, ptr noundef nonnull align 8 dereferenceable(3) @32, i64 3, i1 false)
  %114 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %114, align 8
  %memberidx.i.i170.i.i = getelementptr inbounds %string, ptr %114, i64 0, i32 1
  store ptr %113, ptr %memberidx.i.i170.i.i, align 8
  %memberidx1.i.i171.i.i = getelementptr inbounds %string, ptr %114, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i171.i.i, align 4
  %memberidx2.i.i172.i.i = getelementptr inbounds %string, ptr %114, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i172.i.i, align 4
  %115 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i175.i.i = icmp eq i64 %115, 3
  br i1 %.not.i175.i.i, label %ifend.i179.i.i, label %ifend12.i.i

ifend.i179.i.i:                                   ; preds = %ifend9.i.i
  %memberidx2.i177.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %116 = load ptr, ptr %memberidx2.i177.i.i, align 8
  %117 = tail call i64 @memcmp(ptr %116, ptr nonnull %113, i64 3)
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %if.entry.i893, label %ifend12.i.i

ifend12.i.i:                                      ; preds = %ifend.i179.i.i, %ifend9.i.i
  %119 = tail call ptr @malloc(i32 16)
  store i16 26217, ptr %119, align 8
  %120 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %120, align 8
  %memberidx.i.i181.i.i = getelementptr inbounds %string, ptr %120, i64 0, i32 1
  store ptr %119, ptr %memberidx.i.i181.i.i, align 8
  %memberidx1.i.i182.i.i = getelementptr inbounds %string, ptr %120, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i182.i.i, align 4
  %memberidx2.i.i183.i.i = getelementptr inbounds %string, ptr %120, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i183.i.i, align 4
  %121 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i186.i.i = icmp eq i64 %121, 2
  br i1 %.not.i186.i.i, label %ifend.i190.i.i, label %ifend15.i.i

ifend.i190.i.i:                                   ; preds = %ifend12.i.i
  %memberidx2.i188.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %122 = load ptr, ptr %memberidx2.i188.i.i, align 8
  %123 = tail call i64 @memcmp(ptr %122, ptr nonnull %119, i64 2)
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %if.entry.i893, label %ifend15.i.i

ifend15.i.i:                                      ; preds = %ifend.i190.i.i, %ifend12.i.i
  %125 = tail call ptr @malloc(i32 32)
  store i32 1702063205, ptr %125, align 8
  %126 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %126, align 8
  %memberidx.i.i192.i.i = getelementptr inbounds %string, ptr %126, i64 0, i32 1
  store ptr %125, ptr %memberidx.i.i192.i.i, align 8
  %memberidx1.i.i193.i.i = getelementptr inbounds %string, ptr %126, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i193.i.i, align 4
  %memberidx2.i.i194.i.i = getelementptr inbounds %string, ptr %126, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i194.i.i, align 4
  %127 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i197.i.i = icmp eq i64 %127, 4
  br i1 %.not.i197.i.i, label %ifend.i201.i.i, label %ifend18.i.i

ifend.i201.i.i:                                   ; preds = %ifend15.i.i
  %memberidx2.i199.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %128 = load ptr, ptr %memberidx2.i199.i.i, align 8
  %129 = tail call i64 @memcmp(ptr %128, ptr nonnull %125, i64 4)
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %if.entry.i893, label %ifend18.i.i

ifend18.i.i:                                      ; preds = %ifend.i201.i.i, %ifend15.i.i
  %131 = tail call ptr @malloc(i32 32)
  store i32 1819242338, ptr %131, align 8
  %132 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %132, align 8
  %memberidx.i.i203.i.i = getelementptr inbounds %string, ptr %132, i64 0, i32 1
  store ptr %131, ptr %memberidx.i.i203.i.i, align 8
  %memberidx1.i.i204.i.i = getelementptr inbounds %string, ptr %132, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i204.i.i, align 4
  %memberidx2.i.i205.i.i = getelementptr inbounds %string, ptr %132, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i205.i.i, align 4
  %133 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i208.i.i = icmp eq i64 %133, 4
  br i1 %.not.i208.i.i, label %ifend.i212.i.i, label %ifend21.i.i

ifend.i212.i.i:                                   ; preds = %ifend18.i.i
  %memberidx2.i210.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %134 = load ptr, ptr %memberidx2.i210.i.i, align 8
  %135 = tail call i64 @memcmp(ptr %134, ptr nonnull %131, i64 4)
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %if.entry.i893, label %ifend21.i.i

ifend21.i.i:                                      ; preds = %ifend.i212.i.i, %ifend18.i.i
  %137 = tail call ptr @malloc(i32 16)
  store i16 13417, ptr %137, align 8
  %138 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %138, align 8
  %memberidx.i.i214.i.i = getelementptr inbounds %string, ptr %138, i64 0, i32 1
  store ptr %137, ptr %memberidx.i.i214.i.i, align 8
  %memberidx1.i.i215.i.i = getelementptr inbounds %string, ptr %138, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i215.i.i, align 4
  %memberidx2.i.i216.i.i = getelementptr inbounds %string, ptr %138, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i216.i.i, align 4
  %139 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i219.i.i = icmp eq i64 %139, 2
  br i1 %.not.i219.i.i, label %ifend.i223.i.i, label %ifend24.i.i

ifend.i223.i.i:                                   ; preds = %ifend21.i.i
  %memberidx2.i221.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %140 = load ptr, ptr %memberidx2.i221.i.i, align 8
  %141 = tail call i64 @memcmp(ptr %140, ptr nonnull %137, i64 2)
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %if.entry.i893, label %ifend24.i.i

ifend24.i.i:                                      ; preds = %ifend.i223.i.i, %ifend21.i.i
  %143 = tail call ptr @malloc(i32 16)
  store i16 14441, ptr %143, align 8
  %144 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %144, align 8
  %memberidx.i.i225.i.i = getelementptr inbounds %string, ptr %144, i64 0, i32 1
  store ptr %143, ptr %memberidx.i.i225.i.i, align 8
  %memberidx1.i.i226.i.i = getelementptr inbounds %string, ptr %144, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i226.i.i, align 4
  %memberidx2.i.i227.i.i = getelementptr inbounds %string, ptr %144, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i227.i.i, align 4
  %145 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i230.i.i = icmp eq i64 %145, 2
  br i1 %.not.i230.i.i, label %ifend.i234.i.i, label %ifend27.i.i892

ifend.i234.i.i:                                   ; preds = %ifend24.i.i
  %memberidx2.i232.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %146 = load ptr, ptr %memberidx2.i232.i.i, align 8
  %147 = tail call i64 @memcmp(ptr %146, ptr nonnull %143, i64 2)
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %if.entry.i893, label %ifend27.i.i892

ifend27.i.i892:                                   ; preds = %ifend.i234.i.i, %ifend24.i.i
  %149 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %149, ptr noundef nonnull align 8 dereferenceable(3) @34, i64 3, i1 false)
  %150 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %150, align 8
  %memberidx.i.i236.i.i = getelementptr inbounds %string, ptr %150, i64 0, i32 1
  store ptr %149, ptr %memberidx.i.i236.i.i, align 8
  %memberidx1.i.i237.i.i = getelementptr inbounds %string, ptr %150, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i237.i.i, align 4
  %memberidx2.i.i238.i.i = getelementptr inbounds %string, ptr %150, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i238.i.i, align 4
  %151 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i241.i.i = icmp eq i64 %151, 3
  br i1 %.not.i241.i.i, label %ifend.i245.i.i, label %ifend30.i.i

ifend.i245.i.i:                                   ; preds = %ifend27.i.i892
  %memberidx2.i243.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %152 = load ptr, ptr %memberidx2.i243.i.i, align 8
  %153 = tail call i64 @memcmp(ptr %152, ptr nonnull %149, i64 3)
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %if.entry.i893, label %ifend30.i.i

ifend30.i.i:                                      ; preds = %ifend.i245.i.i, %ifend27.i.i892
  %155 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %155, ptr noundef nonnull align 8 dereferenceable(3) @35, i64 3, i1 false)
  %156 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %156, align 8
  %memberidx.i.i247.i.i = getelementptr inbounds %string, ptr %156, i64 0, i32 1
  store ptr %155, ptr %memberidx.i.i247.i.i, align 8
  %memberidx1.i.i248.i.i = getelementptr inbounds %string, ptr %156, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i248.i.i, align 4
  %memberidx2.i.i249.i.i = getelementptr inbounds %string, ptr %156, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i249.i.i, align 4
  %157 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i252.i.i = icmp eq i64 %157, 3
  br i1 %.not.i252.i.i, label %ifend.i256.i.i, label %ifend33.i.i

ifend.i256.i.i:                                   ; preds = %ifend30.i.i
  %memberidx2.i254.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %158 = load ptr, ptr %memberidx2.i254.i.i, align 8
  %159 = tail call i64 @memcmp(ptr %158, ptr nonnull %155, i64 3)
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %if.entry.i893, label %ifend33.i.i

ifend33.i.i:                                      ; preds = %ifend.i256.i.i, %ifend30.i.i
  %161 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %161, ptr noundef nonnull align 8 dereferenceable(3) @36, i64 3, i1 false)
  %162 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %162, align 8
  %memberidx.i.i258.i.i = getelementptr inbounds %string, ptr %162, i64 0, i32 1
  store ptr %161, ptr %memberidx.i.i258.i.i, align 8
  %memberidx1.i.i259.i.i = getelementptr inbounds %string, ptr %162, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i259.i.i, align 4
  %memberidx2.i.i260.i.i = getelementptr inbounds %string, ptr %162, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i260.i.i, align 4
  %163 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i263.i.i = icmp eq i64 %163, 3
  br i1 %.not.i263.i.i, label %ifend.i267.i.i, label %ifend36.i.i

ifend.i267.i.i:                                   ; preds = %ifend33.i.i
  %memberidx2.i265.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %164 = load ptr, ptr %memberidx2.i265.i.i, align 8
  %165 = tail call i64 @memcmp(ptr %164, ptr nonnull %161, i64 3)
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %if.entry.i893, label %ifend36.i.i

ifend36.i.i:                                      ; preds = %ifend.i267.i.i, %ifend33.i.i
  %167 = tail call ptr @malloc(i32 32)
  store i32 942813545, ptr %167, align 8
  %168 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %168, align 8
  %memberidx.i.i269.i.i = getelementptr inbounds %string, ptr %168, i64 0, i32 1
  store ptr %167, ptr %memberidx.i.i269.i.i, align 8
  %memberidx1.i.i270.i.i = getelementptr inbounds %string, ptr %168, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i270.i.i, align 4
  %memberidx2.i.i271.i.i = getelementptr inbounds %string, ptr %168, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i271.i.i, align 4
  %169 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i274.i.i = icmp eq i64 %169, 4
  br i1 %.not.i274.i.i, label %ifend.i278.i.i, label %ifend39.i.i

ifend.i278.i.i:                                   ; preds = %ifend36.i.i
  %memberidx2.i276.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %170 = load ptr, ptr %memberidx2.i276.i.i, align 8
  %171 = tail call i64 @memcmp(ptr %170, ptr nonnull %167, i64 4)
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %if.entry.i893, label %ifend39.i.i

ifend39.i.i:                                      ; preds = %ifend.i278.i.i, %ifend36.i.i
  %173 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %173, ptr noundef nonnull align 8 dereferenceable(3) @37, i64 3, i1 false)
  %174 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %174, align 8
  %memberidx.i.i280.i.i = getelementptr inbounds %string, ptr %174, i64 0, i32 1
  store ptr %173, ptr %memberidx.i.i280.i.i, align 8
  %memberidx1.i.i281.i.i = getelementptr inbounds %string, ptr %174, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i281.i.i, align 4
  %memberidx2.i.i282.i.i = getelementptr inbounds %string, ptr %174, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i282.i.i, align 4
  %175 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i285.i.i = icmp eq i64 %175, 3
  br i1 %.not.i285.i.i, label %ifend.i289.i.i, label %ifend42.i.i

ifend.i289.i.i:                                   ; preds = %ifend39.i.i
  %memberidx2.i287.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %176 = load ptr, ptr %memberidx2.i287.i.i, align 8
  %177 = tail call i64 @memcmp(ptr %176, ptr nonnull %173, i64 3)
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %if.entry.i893, label %ifend42.i.i

ifend42.i.i:                                      ; preds = %ifend.i289.i.i, %ifend39.i.i
  %179 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %179, ptr noundef nonnull align 8 dereferenceable(3) @38, i64 3, i1 false)
  %180 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %180, align 8
  %memberidx.i.i291.i.i = getelementptr inbounds %string, ptr %180, i64 0, i32 1
  store ptr %179, ptr %memberidx.i.i291.i.i, align 8
  %memberidx1.i.i292.i.i = getelementptr inbounds %string, ptr %180, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i292.i.i, align 4
  %memberidx2.i.i293.i.i = getelementptr inbounds %string, ptr %180, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i293.i.i, align 4
  %181 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i296.i.i = icmp eq i64 %181, 3
  br i1 %.not.i296.i.i, label %ifend.i300.i.i, label %ifend45.i.i

ifend.i300.i.i:                                   ; preds = %ifend42.i.i
  %memberidx2.i298.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %182 = load ptr, ptr %memberidx2.i298.i.i, align 8
  %183 = tail call i64 @memcmp(ptr %182, ptr nonnull %179, i64 3)
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %if.entry.i893, label %ifend45.i.i

ifend45.i.i:                                      ; preds = %ifend.i300.i.i, %ifend42.i.i
  %185 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %185, ptr noundef nonnull align 8 dereferenceable(3) @39, i64 3, i1 false)
  %186 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %186, align 8
  %memberidx.i.i302.i.i = getelementptr inbounds %string, ptr %186, i64 0, i32 1
  store ptr %185, ptr %memberidx.i.i302.i.i, align 8
  %memberidx1.i.i303.i.i = getelementptr inbounds %string, ptr %186, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i303.i.i, align 4
  %memberidx2.i.i304.i.i = getelementptr inbounds %string, ptr %186, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i304.i.i, align 4
  %187 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i307.i.i = icmp eq i64 %187, 3
  br i1 %.not.i307.i.i, label %ifend.i311.i.i, label %ifend48.i.i

ifend.i311.i.i:                                   ; preds = %ifend45.i.i
  %memberidx2.i309.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %188 = load ptr, ptr %memberidx2.i309.i.i, align 8
  %189 = tail call i64 @memcmp(ptr %188, ptr nonnull %185, i64 3)
  %190 = icmp eq i64 %189, 0
  br i1 %190, label %if.entry.i893, label %ifend48.i.i

ifend48.i.i:                                      ; preds = %ifend.i311.i.i, %ifend45.i.i
  %191 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %191, ptr noundef nonnull align 8 dereferenceable(3) @40, i64 3, i1 false)
  %192 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %192, align 8
  %memberidx.i.i313.i.i = getelementptr inbounds %string, ptr %192, i64 0, i32 1
  store ptr %191, ptr %memberidx.i.i313.i.i, align 8
  %memberidx1.i.i314.i.i = getelementptr inbounds %string, ptr %192, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i314.i.i, align 4
  %memberidx2.i.i315.i.i = getelementptr inbounds %string, ptr %192, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i315.i.i, align 4
  %193 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i318.i.i = icmp eq i64 %193, 3
  br i1 %.not.i318.i.i, label %ifend.i322.i.i, label %ifend51.i.i

ifend.i322.i.i:                                   ; preds = %ifend48.i.i
  %memberidx2.i320.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %194 = load ptr, ptr %memberidx2.i320.i.i, align 8
  %195 = tail call i64 @memcmp(ptr %194, ptr nonnull %191, i64 3)
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %if.entry.i893, label %ifend51.i.i

ifend51.i.i:                                      ; preds = %ifend.i322.i.i, %ifend48.i.i
  %197 = tail call ptr @malloc(i32 40)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %197, ptr noundef nonnull align 8 dereferenceable(5) @41, i64 5, i1 false)
  %198 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %198, align 8
  %memberidx.i.i324.i.i = getelementptr inbounds %string, ptr %198, i64 0, i32 1
  store ptr %197, ptr %memberidx.i.i324.i.i, align 8
  %memberidx1.i.i325.i.i = getelementptr inbounds %string, ptr %198, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i325.i.i, align 4
  %memberidx2.i.i326.i.i = getelementptr inbounds %string, ptr %198, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i326.i.i, align 4
  %199 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i329.i.i = icmp eq i64 %199, 5
  br i1 %.not.i329.i.i, label %ifend.i333.i.i, label %ifend54.i.i

ifend.i333.i.i:                                   ; preds = %ifend51.i.i
  %memberidx2.i331.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %200 = load ptr, ptr %memberidx2.i331.i.i, align 8
  %201 = tail call i64 @memcmp(ptr %200, ptr nonnull %197, i64 5)
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %if.entry.i893, label %ifend54.i.i

ifend54.i.i:                                      ; preds = %ifend.i333.i.i, %ifend51.i.i
  %203 = tail call ptr @malloc(i32 32)
  store i32 1684631414, ptr %203, align 8
  %204 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %204, align 8
  %memberidx.i.i335.i.i = getelementptr inbounds %string, ptr %204, i64 0, i32 1
  store ptr %203, ptr %memberidx.i.i335.i.i, align 8
  %memberidx1.i.i336.i.i = getelementptr inbounds %string, ptr %204, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i336.i.i, align 4
  %memberidx2.i.i337.i.i = getelementptr inbounds %string, ptr %204, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i337.i.i, align 4
  %205 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i340.i.i = icmp eq i64 %205, 4
  br i1 %.not.i340.i.i, label %ifend.i344.i.i, label %ifend57.i.i

ifend.i344.i.i:                                   ; preds = %ifend54.i.i
  %memberidx2.i342.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %206 = load ptr, ptr %memberidx2.i342.i.i, align 8
  %207 = tail call i64 @memcmp(ptr %206, ptr nonnull %203, i64 4)
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %if.entry.i893, label %ifend57.i.i

ifend57.i.i:                                      ; preds = %ifend.i344.i.i, %ifend54.i.i
  %209 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %209, ptr noundef nonnull align 8 dereferenceable(3) @42, i64 3, i1 false)
  %210 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %210, align 8
  %memberidx.i.i346.i.i = getelementptr inbounds %string, ptr %210, i64 0, i32 1
  store ptr %209, ptr %memberidx.i.i346.i.i, align 8
  %memberidx1.i.i347.i.i = getelementptr inbounds %string, ptr %210, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i347.i.i, align 4
  %memberidx2.i.i348.i.i = getelementptr inbounds %string, ptr %210, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i348.i.i, align 4
  %211 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i351.i.i = icmp eq i64 %211, 3
  br i1 %.not.i351.i.i, label %ifend.i355.i.i, label %ifend60.i.i

ifend.i355.i.i:                                   ; preds = %ifend57.i.i
  %memberidx2.i353.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %212 = load ptr, ptr %memberidx2.i353.i.i, align 8
  %213 = tail call i64 @memcmp(ptr %212, ptr nonnull %209, i64 3)
  %214 = icmp eq i64 %213, 0
  br i1 %214, label %if.entry.i893, label %ifend60.i.i

ifend60.i.i:                                      ; preds = %ifend.i355.i.i, %ifend57.i.i
  %215 = tail call ptr @malloc(i32 40)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %215, ptr noundef nonnull align 8 dereferenceable(5) @43, i64 5, i1 false)
  %216 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %216, align 8
  %memberidx.i.i357.i.i = getelementptr inbounds %string, ptr %216, i64 0, i32 1
  store ptr %215, ptr %memberidx.i.i357.i.i, align 8
  %memberidx1.i.i358.i.i = getelementptr inbounds %string, ptr %216, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i358.i.i, align 4
  %memberidx2.i.i359.i.i = getelementptr inbounds %string, ptr %216, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i359.i.i, align 4
  %217 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i362.i.i = icmp eq i64 %217, 5
  br i1 %.not.i362.i.i, label %ifend.i366.i.i, label %ifend63.i.i

ifend.i366.i.i:                                   ; preds = %ifend60.i.i
  %memberidx2.i364.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %218 = load ptr, ptr %memberidx2.i364.i.i, align 8
  %219 = tail call i64 @memcmp(ptr %218, ptr nonnull %215, i64 5)
  %220 = icmp eq i64 %219, 0
  br i1 %220, label %if.entry.i893, label %ifend63.i.i

ifend63.i.i:                                      ; preds = %ifend.i366.i.i, %ifend60.i.i
  %221 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %221, ptr noundef nonnull align 8 dereferenceable(3) @44, i64 3, i1 false)
  %222 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %222, align 8
  %memberidx.i.i368.i.i = getelementptr inbounds %string, ptr %222, i64 0, i32 1
  store ptr %221, ptr %memberidx.i.i368.i.i, align 8
  %memberidx1.i.i369.i.i = getelementptr inbounds %string, ptr %222, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i369.i.i, align 4
  %memberidx2.i.i370.i.i = getelementptr inbounds %string, ptr %222, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i370.i.i, align 4
  %223 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i373.i.i = icmp eq i64 %223, 3
  br i1 %.not.i373.i.i, label %ifend.i377.i.i, label %ifend66.i.i

ifend.i377.i.i:                                   ; preds = %ifend63.i.i
  %memberidx2.i375.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %224 = load ptr, ptr %memberidx2.i375.i.i, align 8
  %225 = tail call i64 @memcmp(ptr %224, ptr nonnull %221, i64 3)
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %if.entry.i893, label %ifend66.i.i

ifend66.i.i:                                      ; preds = %ifend.i377.i.i, %ifend63.i.i
  %227 = tail call ptr @malloc(i32 40)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %227, ptr noundef nonnull align 8 dereferenceable(5) @45, i64 5, i1 false)
  %228 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %228, align 8
  %memberidx.i.i379.i.i = getelementptr inbounds %string, ptr %228, i64 0, i32 1
  store ptr %227, ptr %memberidx.i.i379.i.i, align 8
  %memberidx1.i.i380.i.i = getelementptr inbounds %string, ptr %228, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i380.i.i, align 4
  %memberidx2.i.i381.i.i = getelementptr inbounds %string, ptr %228, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i381.i.i, align 4
  %229 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i384.i.i = icmp eq i64 %229, 5
  br i1 %.not.i384.i.i, label %ifend.i388.i.i, label %ifend69.i.i

ifend.i388.i.i:                                   ; preds = %ifend66.i.i
  %memberidx2.i386.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %230 = load ptr, ptr %memberidx2.i386.i.i, align 8
  %231 = tail call i64 @memcmp(ptr %230, ptr nonnull %227, i64 5)
  %232 = icmp eq i64 %231, 0
  br i1 %232, label %if.entry.i893, label %ifend69.i.i

ifend69.i.i:                                      ; preds = %ifend.i388.i.i, %ifend66.i.i
  %233 = tail call ptr @malloc(i32 64)
  store i64 7310870969309884259, ptr %233, align 8
  %234 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %234, align 8
  %memberidx.i.i390.i.i = getelementptr inbounds %string, ptr %234, i64 0, i32 1
  store ptr %233, ptr %memberidx.i.i390.i.i, align 8
  %memberidx1.i.i391.i.i = getelementptr inbounds %string, ptr %234, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i391.i.i, align 4
  %memberidx2.i.i392.i.i = getelementptr inbounds %string, ptr %234, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i392.i.i, align 4
  %235 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i395.i.i = icmp eq i64 %235, 8
  br i1 %.not.i395.i.i, label %ifend.i399.i.i, label %ifend72.i.i

ifend.i399.i.i:                                   ; preds = %ifend69.i.i
  %memberidx2.i397.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %236 = load ptr, ptr %memberidx2.i397.i.i, align 8
  %237 = tail call i64 @memcmp(ptr %236, ptr nonnull %233, i64 8)
  %238 = icmp eq i64 %237, 0
  br i1 %238, label %if.entry.i893, label %ifend72.i.i

ifend72.i.i:                                      ; preds = %ifend.i399.i.i, %ifend69.i.i
  %239 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %239, ptr noundef nonnull align 8 dereferenceable(6) @46, i64 6, i1 false)
  %240 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %240, align 8
  %memberidx.i.i401.i.i = getelementptr inbounds %string, ptr %240, i64 0, i32 1
  store ptr %239, ptr %memberidx.i.i401.i.i, align 8
  %memberidx1.i.i402.i.i = getelementptr inbounds %string, ptr %240, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i402.i.i, align 4
  %memberidx2.i.i403.i.i = getelementptr inbounds %string, ptr %240, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i403.i.i, align 4
  %241 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i406.i.i = icmp eq i64 %241, 6
  br i1 %.not.i406.i.i, label %ifend.i410.i.i, label %ifend75.i.i

ifend.i410.i.i:                                   ; preds = %ifend72.i.i
  %memberidx2.i408.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %242 = load ptr, ptr %memberidx2.i408.i.i, align 8
  %243 = tail call i64 @memcmp(ptr %242, ptr nonnull %239, i64 6)
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %if.entry.i893, label %ifend75.i.i

ifend75.i.i:                                      ; preds = %ifend.i410.i.i, %ifend72.i.i
  %245 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %245, ptr noundef nonnull align 8 dereferenceable(6) @47, i64 6, i1 false)
  %246 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %246, align 8
  %memberidx.i.i412.i.i = getelementptr inbounds %string, ptr %246, i64 0, i32 1
  store ptr %245, ptr %memberidx.i.i412.i.i, align 8
  %memberidx1.i.i413.i.i = getelementptr inbounds %string, ptr %246, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i413.i.i, align 4
  %memberidx2.i.i414.i.i = getelementptr inbounds %string, ptr %246, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i414.i.i, align 4
  %247 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i417.i.i = icmp eq i64 %247, 6
  br i1 %.not.i417.i.i, label %ifend.i421.i.i, label %ifend78.i.i

ifend.i421.i.i:                                   ; preds = %ifend75.i.i
  %memberidx2.i419.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %248 = load ptr, ptr %memberidx2.i419.i.i, align 8
  %249 = tail call i64 @memcmp(ptr %248, ptr nonnull %245, i64 6)
  %250 = icmp eq i64 %249, 0
  br i1 %250, label %if.entry.i893, label %ifend78.i.i

ifend78.i.i:                                      ; preds = %ifend.i421.i.i, %ifend75.i.i
  %251 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %251, ptr noundef nonnull align 8 dereferenceable(7) @48, i64 7, i1 false)
  %252 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %252, align 8
  %memberidx.i.i423.i.i = getelementptr inbounds %string, ptr %252, i64 0, i32 1
  store ptr %251, ptr %memberidx.i.i423.i.i, align 8
  %memberidx1.i.i424.i.i = getelementptr inbounds %string, ptr %252, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i424.i.i, align 4
  %memberidx2.i.i425.i.i = getelementptr inbounds %string, ptr %252, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i425.i.i, align 4
  %253 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i428.i.i = icmp eq i64 %253, 7
  br i1 %.not.i428.i.i, label %ifend.i432.i.i, label %ifend81.i.i

ifend.i432.i.i:                                   ; preds = %ifend78.i.i
  %memberidx2.i430.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %254 = load ptr, ptr %memberidx2.i430.i.i, align 8
  %255 = tail call i64 @memcmp(ptr %254, ptr nonnull %251, i64 7)
  %256 = icmp eq i64 %255, 0
  br i1 %256, label %if.entry.i893, label %ifend81.i.i

ifend81.i.i:                                      ; preds = %ifend.i432.i.i, %ifend78.i.i
  %257 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %257, ptr noundef nonnull align 8 dereferenceable(6) @49, i64 6, i1 false)
  %258 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %258, align 8
  %memberidx.i.i434.i.i = getelementptr inbounds %string, ptr %258, i64 0, i32 1
  store ptr %257, ptr %memberidx.i.i434.i.i, align 8
  %memberidx1.i.i435.i.i = getelementptr inbounds %string, ptr %258, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i435.i.i, align 4
  %memberidx2.i.i436.i.i = getelementptr inbounds %string, ptr %258, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i436.i.i, align 4
  %259 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i439.i.i = icmp eq i64 %259, 6
  br i1 %.not.i439.i.i, label %ifend.i443.i.i, label %ifend84.i.i

ifend.i443.i.i:                                   ; preds = %ifend81.i.i
  %memberidx2.i441.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %260 = load ptr, ptr %memberidx2.i441.i.i, align 8
  %261 = tail call i64 @memcmp(ptr %260, ptr nonnull %257, i64 6)
  %262 = icmp eq i64 %261, 0
  br i1 %262, label %if.entry.i893, label %ifend84.i.i

ifend84.i.i:                                      ; preds = %ifend.i443.i.i, %ifend81.i.i
  %263 = tail call ptr @malloc(i32 72)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %263, ptr noundef nonnull align 8 dereferenceable(9) @50, i64 9, i1 false)
  %264 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %264, align 8
  %memberidx.i.i445.i.i = getelementptr inbounds %string, ptr %264, i64 0, i32 1
  store ptr %263, ptr %memberidx.i.i445.i.i, align 8
  %memberidx1.i.i446.i.i = getelementptr inbounds %string, ptr %264, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i446.i.i, align 4
  %memberidx2.i.i447.i.i = getelementptr inbounds %string, ptr %264, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i447.i.i, align 4
  %265 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i450.i.i = icmp eq i64 %265, 9
  br i1 %.not.i450.i.i, label %ifend.i454.i.i, label %ifend87.i.i

ifend.i454.i.i:                                   ; preds = %ifend84.i.i
  %memberidx2.i452.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %266 = load ptr, ptr %memberidx2.i452.i.i, align 8
  %267 = tail call i64 @memcmp(ptr %266, ptr nonnull %263, i64 9)
  %268 = icmp eq i64 %267, 0
  br i1 %268, label %if.entry.i893, label %ifend87.i.i

ifend87.i.i:                                      ; preds = %ifend.i454.i.i, %ifend84.i.i
  %269 = tail call ptr @malloc(i32 16)
  store i16 28265, ptr %269, align 8
  %270 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %270, align 8
  %memberidx.i.i456.i.i = getelementptr inbounds %string, ptr %270, i64 0, i32 1
  store ptr %269, ptr %memberidx.i.i456.i.i, align 8
  %memberidx1.i.i457.i.i = getelementptr inbounds %string, ptr %270, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i457.i.i, align 4
  %memberidx2.i.i458.i.i = getelementptr inbounds %string, ptr %270, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i458.i.i, align 4
  %271 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i461.i.i = icmp eq i64 %271, 2
  br i1 %.not.i461.i.i, label %ifend.i465.i.i, label %ifend90.i.i

ifend.i465.i.i:                                   ; preds = %ifend87.i.i
  %memberidx2.i463.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %272 = load ptr, ptr %memberidx2.i463.i.i, align 8
  %273 = tail call i64 @memcmp(ptr %272, ptr nonnull %269, i64 2)
  %274 = icmp eq i64 %273, 0
  br i1 %274, label %if.entry.i893, label %ifend90.i.i

ifend90.i.i:                                      ; preds = %ifend.i465.i.i, %ifend87.i.i
  %275 = tail call ptr @malloc(i32 40)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %275, ptr noundef nonnull align 8 dereferenceable(5) @51, i64 5, i1 false)
  %276 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %276, align 8
  %memberidx.i.i467.i.i = getelementptr inbounds %string, ptr %276, i64 0, i32 1
  store ptr %275, ptr %memberidx.i.i467.i.i, align 8
  %memberidx1.i.i468.i.i = getelementptr inbounds %string, ptr %276, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i468.i.i, align 4
  %memberidx2.i.i469.i.i = getelementptr inbounds %string, ptr %276, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i469.i.i, align 4
  %277 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i472.i.i = icmp eq i64 %277, 5
  br i1 %.not.i472.i.i, label %ifend.i476.i.i, label %ifend93.i.i

ifend.i476.i.i:                                   ; preds = %ifend90.i.i
  %memberidx2.i474.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %278 = load ptr, ptr %memberidx2.i474.i.i, align 8
  %279 = tail call i64 @memcmp(ptr %278, ptr nonnull %275, i64 5)
  %280 = icmp eq i64 %279, 0
  br i1 %280, label %if.entry.i893, label %ifend93.i.i

ifend93.i.i:                                      ; preds = %ifend.i476.i.i, %ifend90.i.i
  %281 = tail call ptr @malloc(i32 32)
  store i32 1836412517, ptr %281, align 8
  %282 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %282, align 8
  %memberidx.i.i478.i.i = getelementptr inbounds %string, ptr %282, i64 0, i32 1
  store ptr %281, ptr %memberidx.i.i478.i.i, align 8
  %memberidx1.i.i479.i.i = getelementptr inbounds %string, ptr %282, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i479.i.i, align 4
  %memberidx2.i.i480.i.i = getelementptr inbounds %string, ptr %282, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i480.i.i, align 4
  %283 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i483.i.i = icmp eq i64 %283, 4
  br i1 %.not.i483.i.i, label %ifend.i487.i.i, label %ifend96.i.i

ifend.i487.i.i:                                   ; preds = %ifend93.i.i
  %memberidx2.i485.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %284 = load ptr, ptr %memberidx2.i485.i.i, align 8
  %285 = tail call i64 @memcmp(ptr %284, ptr nonnull %281, i64 4)
  %286 = icmp eq i64 %285, 0
  br i1 %286, label %if.entry.i893, label %ifend96.i.i

ifend96.i.i:                                      ; preds = %ifend.i487.i.i, %ifend93.i.i
  %287 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %287, ptr noundef nonnull align 8 dereferenceable(3) @52, i64 3, i1 false)
  %288 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %288, align 8
  %memberidx.i.i489.i.i = getelementptr inbounds %string, ptr %288, i64 0, i32 1
  store ptr %287, ptr %memberidx.i.i489.i.i, align 8
  %memberidx1.i.i490.i.i = getelementptr inbounds %string, ptr %288, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i490.i.i, align 4
  %memberidx2.i.i491.i.i = getelementptr inbounds %string, ptr %288, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i491.i.i, align 4
  %289 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i494.i.i = icmp eq i64 %289, 3
  br i1 %.not.i494.i.i, label %ifend.i498.i.i, label %ifend99.i.i

ifend.i498.i.i:                                   ; preds = %ifend96.i.i
  %memberidx2.i496.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %290 = load ptr, ptr %memberidx2.i496.i.i, align 8
  %291 = tail call i64 @memcmp(ptr %290, ptr nonnull %287, i64 3)
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %if.entry.i893, label %ifend99.i.i

ifend99.i.i:                                      ; preds = %ifend.i498.i.i, %ifend96.i.i
  %293 = tail call ptr @malloc(i32 16)
  store i16 29537, ptr %293, align 8
  %294 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %294, align 8
  %memberidx.i.i500.i.i = getelementptr inbounds %string, ptr %294, i64 0, i32 1
  store ptr %293, ptr %memberidx.i.i500.i.i, align 8
  %memberidx1.i.i501.i.i = getelementptr inbounds %string, ptr %294, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i501.i.i, align 4
  %memberidx2.i.i502.i.i = getelementptr inbounds %string, ptr %294, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i502.i.i, align 4
  %295 = load i64, ptr %memberidx.i.i98.i, align 4
  %.not.i505.i.i = icmp eq i64 %295, 2
  br i1 %.not.i505.i.i, label %ifend.i509.i.i, label %ifend.i895

ifend.i509.i.i:                                   ; preds = %ifend99.i.i
  %memberidx2.i507.i.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  %296 = load ptr, ptr %memberidx2.i507.i.i, align 8
  %297 = tail call i64 @memcmp(ptr %296, ptr nonnull %293, i64 2)
  %298 = icmp eq i64 %297, 0
  br i1 %298, label %if.entry.i893, label %ifend.i895

if.entry.i893:                                    ; preds = %ifend.i509.i.i, %ifend.i498.i.i, %ifend.i487.i.i, %ifend.i476.i.i, %ifend.i465.i.i, %ifend.i454.i.i, %ifend.i443.i.i, %ifend.i432.i.i, %ifend.i421.i.i, %ifend.i410.i.i, %ifend.i399.i.i, %ifend.i388.i.i, %ifend.i377.i.i, %ifend.i366.i.i, %ifend.i355.i.i, %ifend.i344.i.i, %ifend.i333.i.i, %ifend.i322.i.i, %ifend.i311.i.i, %ifend.i300.i.i, %ifend.i289.i.i, %ifend.i278.i.i, %ifend.i267.i.i, %ifend.i256.i.i, %ifend.i245.i.i, %ifend.i234.i.i, %ifend.i223.i.i, %ifend.i212.i.i, %ifend.i201.i.i, %ifend.i190.i.i, %ifend.i179.i.i, %ifend.i168.i.i, %ifend.i157.i.i, %ifend.i146.i.i, %ifend.i.i.i
  %299 = phi i1 [ false, %ifend.i509.i.i ], [ true, %ifend.i.i.i ], [ false, %ifend.i146.i.i ], [ false, %ifend.i157.i.i ], [ false, %ifend.i168.i.i ], [ false, %ifend.i179.i.i ], [ false, %ifend.i190.i.i ], [ false, %ifend.i201.i.i ], [ false, %ifend.i212.i.i ], [ false, %ifend.i223.i.i ], [ false, %ifend.i234.i.i ], [ false, %ifend.i245.i.i ], [ false, %ifend.i256.i.i ], [ false, %ifend.i267.i.i ], [ false, %ifend.i278.i.i ], [ false, %ifend.i289.i.i ], [ false, %ifend.i300.i.i ], [ false, %ifend.i311.i.i ], [ false, %ifend.i322.i.i ], [ false, %ifend.i333.i.i ], [ false, %ifend.i344.i.i ], [ false, %ifend.i355.i.i ], [ false, %ifend.i366.i.i ], [ false, %ifend.i377.i.i ], [ false, %ifend.i388.i.i ], [ false, %ifend.i399.i.i ], [ false, %ifend.i410.i.i ], [ false, %ifend.i421.i.i ], [ false, %ifend.i432.i.i ], [ false, %ifend.i443.i.i ], [ false, %ifend.i454.i.i ], [ false, %ifend.i465.i.i ], [ false, %ifend.i476.i.i ], [ false, %ifend.i487.i.i ], [ false, %ifend.i498.i.i ]
  %.pr.i = phi i64 [ 86, %ifend.i509.i.i ], [ 52, %ifend.i.i.i ], [ 53, %ifend.i146.i.i ], [ 54, %ifend.i157.i.i ], [ 55, %ifend.i168.i.i ], [ 56, %ifend.i179.i.i ], [ 57, %ifend.i190.i.i ], [ 58, %ifend.i201.i.i ], [ 59, %ifend.i212.i.i ], [ 60, %ifend.i223.i.i ], [ 61, %ifend.i234.i.i ], [ 62, %ifend.i245.i.i ], [ 63, %ifend.i256.i.i ], [ 64, %ifend.i267.i.i ], [ 65, %ifend.i278.i.i ], [ 66, %ifend.i289.i.i ], [ 67, %ifend.i300.i.i ], [ 68, %ifend.i311.i.i ], [ 69, %ifend.i322.i.i ], [ 70, %ifend.i333.i.i ], [ 71, %ifend.i344.i.i ], [ 72, %ifend.i355.i.i ], [ 73, %ifend.i366.i.i ], [ 74, %ifend.i377.i.i ], [ 75, %ifend.i388.i.i ], [ 76, %ifend.i399.i.i ], [ 77, %ifend.i410.i.i ], [ 78, %ifend.i421.i.i ], [ 79, %ifend.i432.i.i ], [ 80, %ifend.i443.i.i ], [ 81, %ifend.i454.i.i ], [ 82, %ifend.i465.i.i ], [ 83, %ifend.i476.i.i ], [ 84, %ifend.i487.i.i ], [ 85, %ifend.i498.i.i ]
  %300 = load i64, ptr %memberidx.i883, align 4
  %301 = add i64 %300, 1
  %302 = load ptr, ptr %memberidx1.i.i884, align 8
  %memberidx2.i93.i = getelementptr inbounds %string, ptr %302, i64 0, i32 2
  %303 = load i64, ptr %memberidx2.i93.i, align 4
  %304 = icmp slt i64 %301, %303
  br i1 %304, label %if.entry.i96.i, label %ifend5.i

if.entry.i96.i:                                   ; preds = %if.entry.i893
  %305 = load ptr, ptr %302, align 8
  %memberidx4.i95.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %305, i64 0, i32 2
  %306 = load ptr, ptr %memberidx4.i95.i, align 8
  %307 = tail call i8 %306(ptr nonnull %302, i64 %301)
  %phi.cmp.i = icmp eq i8 %307, 61
  br i1 %phi.cmp.i, label %if.entry3.i, label %ifend5.i

ifend.i895:                                       ; preds = %ifend.i509.i.i, %ifend99.i.i
  %308 = tail call ptr @malloc(i32 24)
  store i64 51, ptr %308, align 4
  %memberidx1.i.i89.i894 = getelementptr inbounds %Token, ptr %308, i64 0, i32 1
  store ptr %81, ptr %memberidx1.i.i89.i894, align 8
  %memberidx.i90.i = getelementptr inbounds %IdentifierToken, ptr %308, i64 0, i32 2
  store ptr %80, ptr %memberidx.i90.i, align 8
  br label %common.ret

if.entry3.i:                                      ; preds = %if.entry.i96.i
  br i1 %299, label %if.entry6.i896, label %ifend8.i

ifend5.sink.split.sink.split.i:                   ; preds = %ifend.i.i900, %ifend.i45.i, %ifend.i61.i
  %.ph.ph.i = phi i64 [ 16, %ifend.i61.i ], [ 17, %ifend.i45.i ], [ 18, %ifend.i.i900 ]
  store i64 0, ptr %memberidx2.i107.i, align 4
  br label %ifend5.sink.split.i

ifend5.sink.split.i:                              ; preds = %ifend.i.i900, %ifend.i45.i, %ifend.i61.i, %ifend5.sink.split.sink.split.i
  %memberidx2.i107.sink172.i = phi ptr [ %memberidx2.i107.i, %ifend.i61.i ], [ %memberidx2.i107.i, %ifend.i45.i ], [ %memberidx2.i107.i, %ifend.i.i900 ], [ %memberidx3.i108.i, %ifend5.sink.split.sink.split.i ]
  %.ph.i = phi i64 [ 16, %ifend.i61.i ], [ 17, %ifend.i45.i ], [ 18, %ifend.i.i900 ], [ %.ph.ph.i, %ifend5.sink.split.sink.split.i ]
  %309 = load i64, ptr %memberidx2.i107.sink172.i, align 4
  %310 = add i64 %309, 1
  store i64 %310, ptr %memberidx2.i107.sink172.i, align 4
  br label %ifend5.i

ifend5.i:                                         ; preds = %if.entry12.i, %if.entry9.i, %ifend8.i, %if.entry6.i896, %ifend5.sink.split.i, %if.entry.i96.i, %if.entry.i893
  %311 = phi i64 [ %.pr.i, %ifend8.i ], [ %.pr.i, %if.entry.i893 ], [ %.pr.i, %if.entry.i96.i ], [ 16, %if.entry6.i896 ], [ 17, %if.entry9.i ], [ 18, %if.entry12.i ], [ %.ph.i, %ifend5.sink.split.i ]
  %312 = tail call ptr @malloc(i32 16)
  store i64 %311, ptr %312, align 4
  %memberidx1.i88.i = getelementptr inbounds %Token, ptr %312, i64 0, i32 1
  store ptr %81, ptr %memberidx1.i88.i, align 8
  br label %common.ret

if.entry6.i896:                                   ; preds = %if.entry3.i
  %313 = load i64, ptr %memberidx.i883, align 4
  %314 = load ptr, ptr %memberidx1.i.i884, align 8
  %memberidx2.i.i57.i = getelementptr inbounds %string, ptr %314, i64 0, i32 2
  %315 = load i64, ptr %memberidx2.i.i57.i, align 4
  %.not153.i = icmp slt i64 %313, %315
  br i1 %.not153.i, label %ifend.i61.i, label %ifend5.i

ifend.i61.i:                                      ; preds = %if.entry6.i896
  %316 = load ptr, ptr %314, align 8
  %memberidx2.i59.i897 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %316, i64 0, i32 2
  %317 = load ptr, ptr %memberidx2.i59.i897, align 8
  %318 = add nsw i64 %313, 1
  store i64 %318, ptr %memberidx.i883, align 4
  %319 = tail call i8 %317(ptr nonnull %314, i64 %318)
  store i8 %319, ptr %0, align 1
  %320 = icmp eq i8 %319, 10
  br i1 %320, label %ifend5.sink.split.sink.split.i, label %ifend5.sink.split.i

ifend8.i:                                         ; preds = %if.entry3.i
  %trunc.i = trunc i64 %.pr.i to i7
  switch i7 %trunc.i, label %ifend5.i [
    i7 53, label %if.entry9.i
    i7 54, label %if.entry12.i
  ]

if.entry9.i:                                      ; preds = %ifend8.i
  %321 = load i64, ptr %memberidx.i883, align 4
  %322 = load ptr, ptr %memberidx1.i.i884, align 8
  %memberidx2.i.i41.i = getelementptr inbounds %string, ptr %322, i64 0, i32 2
  %323 = load i64, ptr %memberidx2.i.i41.i, align 4
  %.not152.i = icmp slt i64 %321, %323
  br i1 %.not152.i, label %ifend.i45.i, label %ifend5.i

ifend.i45.i:                                      ; preds = %if.entry9.i
  %324 = load ptr, ptr %322, align 8
  %memberidx2.i43.i898 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %324, i64 0, i32 2
  %325 = load ptr, ptr %memberidx2.i43.i898, align 8
  %326 = add nsw i64 %321, 1
  store i64 %326, ptr %memberidx.i883, align 4
  %327 = tail call i8 %325(ptr nonnull %322, i64 %326)
  store i8 %327, ptr %0, align 1
  %328 = icmp eq i8 %327, 10
  br i1 %328, label %ifend5.sink.split.sink.split.i, label %ifend5.sink.split.i

if.entry12.i:                                     ; preds = %ifend8.i
  %329 = load i64, ptr %memberidx.i883, align 4
  %330 = load ptr, ptr %memberidx1.i.i884, align 8
  %memberidx2.i.i.i899 = getelementptr inbounds %string, ptr %330, i64 0, i32 2
  %331 = load i64, ptr %memberidx2.i.i.i899, align 4
  %.not151.i = icmp slt i64 %329, %331
  br i1 %.not151.i, label %ifend.i.i900, label %ifend5.i

ifend.i.i900:                                     ; preds = %if.entry12.i
  %332 = load ptr, ptr %330, align 8
  %memberidx2.i38.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %332, i64 0, i32 2
  %333 = load ptr, ptr %memberidx2.i38.i, align 8
  %334 = add nsw i64 %329, 1
  store i64 %334, ptr %memberidx.i883, align 4
  %335 = tail call i8 %333(ptr nonnull %330, i64 %334)
  store i8 %335, ptr %0, align 1
  %336 = icmp eq i8 %335, 10
  br i1 %336, label %ifend5.sink.split.sink.split.i, label %ifend5.sink.split.i

ifend5:                                           ; preds = %ifend
  %337 = icmp eq i8 %2, 34
  br i1 %337, label %if.entry6, label %ifend8

if.entry6:                                        ; preds = %ifend5
  %338 = tail call fastcc ptr @Lexer_string_token(ptr nonnull %0)
  br label %common.ret

ifend8:                                           ; preds = %ifend5
  %339 = add i8 %2, -48
  %340 = icmp ult i8 %339, 10
  br i1 %340, label %if.entry9, label %ifend11

if.entry9:                                        ; preds = %ifend8
  %memberidx.i.i901 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %341 = load i64, ptr %memberidx.i.i901, align 4
  %342 = add i64 %341, 1
  %memberidx1.i.i902 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %343 = load ptr, ptr %memberidx1.i.i902, align 8
  %memberidx2.i.i903 = getelementptr inbounds %string, ptr %343, i64 0, i32 2
  %344 = load i64, ptr %memberidx2.i.i903, align 4
  %345 = icmp slt i64 %342, %344
  br i1 %345, label %Lexer_peek.exit.i906, label %ifend.i911

Lexer_peek.exit.i906:                             ; preds = %if.entry9
  %346 = icmp eq i8 %2, 48
  %347 = load ptr, ptr %343, align 8
  %memberidx4.i.i904 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %347, i64 0, i32 2
  %348 = load ptr, ptr %memberidx4.i.i904, align 8
  %349 = tail call i8 %348(ptr nonnull %343, i64 %342)
  %phi.cmp.i905 = icmp eq i8 %349, 98
  %350 = and i1 %346, %phi.cmp.i905
  br i1 %350, label %if.entry.i909, label %Lexer_peek.exit.ifend_crit_edge.i

Lexer_peek.exit.ifend_crit_edge.i:                ; preds = %Lexer_peek.exit.i906
  %.pre.i907 = load i64, ptr %memberidx.i.i901, align 4
  %.pre107.i = load ptr, ptr %memberidx1.i.i902, align 8
  %memberidx2.i45.phi.trans.insert.i = getelementptr inbounds %string, ptr %.pre107.i, i64 0, i32 2
  %.pre108.i = load i64, ptr %memberidx2.i45.phi.trans.insert.i, align 4
  %.pre121.i = add i64 %.pre.i907, 1
  br label %ifend.i911

if.entry.i909:                                    ; preds = %Lexer_peek.exit.i906
  %351 = tail call fastcc ptr @Lexer_base_int_token(ptr nonnull %0, i64 2)
  br label %common.ret

ifend.i911:                                       ; preds = %Lexer_peek.exit.ifend_crit_edge.i, %if.entry9
  %.pre-phi.i910 = phi i64 [ %.pre121.i, %Lexer_peek.exit.ifend_crit_edge.i ], [ %342, %if.entry9 ]
  %352 = phi i64 [ %.pre108.i, %Lexer_peek.exit.ifend_crit_edge.i ], [ %344, %if.entry9 ]
  %353 = phi ptr [ %.pre107.i, %Lexer_peek.exit.ifend_crit_edge.i ], [ %343, %if.entry9 ]
  %354 = phi i64 [ %.pre.i907, %Lexer_peek.exit.ifend_crit_edge.i ], [ %341, %if.entry9 ]
  %355 = icmp slt i64 %.pre-phi.i910, %352
  br i1 %355, label %Lexer_peek.exit49.i, label %ifend4.i

Lexer_peek.exit49.i:                              ; preds = %ifend.i911
  %356 = load i8, ptr %0, align 1
  %357 = icmp eq i8 %356, 48
  %358 = load ptr, ptr %353, align 8
  %memberidx4.i47.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %358, i64 0, i32 2
  %359 = load ptr, ptr %memberidx4.i47.i, align 8
  %360 = tail call i8 %359(ptr nonnull %353, i64 %.pre-phi.i910)
  %phi.cmp100.i = icmp eq i8 %360, 111
  %361 = and i1 %357, %phi.cmp100.i
  br i1 %361, label %if.entry2.i, label %Lexer_peek.exit49.ifend4_crit_edge.i

Lexer_peek.exit49.ifend4_crit_edge.i:             ; preds = %Lexer_peek.exit49.i
  %.pre109.i = load i64, ptr %memberidx.i.i901, align 4
  %.pre110.i = load ptr, ptr %memberidx1.i.i902, align 8
  %memberidx2.i52.phi.trans.insert.i = getelementptr inbounds %string, ptr %.pre110.i, i64 0, i32 2
  %.pre111.i = load i64, ptr %memberidx2.i52.phi.trans.insert.i, align 4
  %.pre122.i = add i64 %.pre109.i, 1
  br label %ifend4.i

if.entry2.i:                                      ; preds = %Lexer_peek.exit49.i
  %362 = tail call fastcc ptr @Lexer_base_int_token(ptr nonnull %0, i64 8)
  br label %common.ret

ifend4.i:                                         ; preds = %Lexer_peek.exit49.ifend4_crit_edge.i, %ifend.i911
  %.pre-phi123.i = phi i64 [ %.pre122.i, %Lexer_peek.exit49.ifend4_crit_edge.i ], [ %.pre-phi.i910, %ifend.i911 ]
  %363 = phi i64 [ %.pre111.i, %Lexer_peek.exit49.ifend4_crit_edge.i ], [ %352, %ifend.i911 ]
  %364 = phi ptr [ %.pre110.i, %Lexer_peek.exit49.ifend4_crit_edge.i ], [ %353, %ifend.i911 ]
  %365 = phi i64 [ %.pre109.i, %Lexer_peek.exit49.ifend4_crit_edge.i ], [ %354, %ifend.i911 ]
  %366 = icmp slt i64 %.pre-phi123.i, %363
  br i1 %366, label %Lexer_peek.exit56.i, label %ifend8.i913

Lexer_peek.exit56.i:                              ; preds = %ifend4.i
  %367 = load i8, ptr %0, align 1
  %368 = icmp eq i8 %367, 48
  %369 = load ptr, ptr %364, align 8
  %memberidx4.i54.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %369, i64 0, i32 2
  %370 = load ptr, ptr %memberidx4.i54.i, align 8
  %371 = tail call i8 %370(ptr nonnull %364, i64 %.pre-phi123.i)
  %phi.cmp101.i = icmp eq i8 %371, 120
  %372 = and i1 %368, %phi.cmp101.i
  br i1 %372, label %if.entry6.i912, label %Lexer_peek.exit56.ifend8_crit_edge.i

Lexer_peek.exit56.ifend8_crit_edge.i:             ; preds = %Lexer_peek.exit56.i
  %.pre112.i = load i64, ptr %memberidx.i.i901, align 4
  %.pre113.i = load ptr, ptr %memberidx1.i.i902, align 8
  %memberidx2.i59.phi.trans.insert.i = getelementptr inbounds %string, ptr %.pre113.i, i64 0, i32 2
  %.pre114.i = load i64, ptr %memberidx2.i59.phi.trans.insert.i, align 4
  %.pre124.i = add i64 %.pre112.i, 1
  br label %ifend8.i913

if.entry6.i912:                                   ; preds = %Lexer_peek.exit56.i
  %373 = tail call fastcc ptr @Lexer_base_int_token(ptr nonnull %0, i64 16)
  br label %common.ret

ifend8.i913:                                      ; preds = %Lexer_peek.exit56.ifend8_crit_edge.i, %ifend4.i
  %.pre-phi125.i = phi i64 [ %.pre124.i, %Lexer_peek.exit56.ifend8_crit_edge.i ], [ %.pre-phi123.i, %ifend4.i ]
  %374 = phi i64 [ %.pre114.i, %Lexer_peek.exit56.ifend8_crit_edge.i ], [ %363, %ifend4.i ]
  %375 = phi ptr [ %.pre113.i, %Lexer_peek.exit56.ifend8_crit_edge.i ], [ %364, %ifend4.i ]
  %376 = phi i64 [ %.pre112.i, %Lexer_peek.exit56.ifend8_crit_edge.i ], [ %365, %ifend4.i ]
  %377 = icmp slt i64 %.pre-phi125.i, %374
  br i1 %377, label %if.entry.i62.i, label %Lexer_peek.exit63.i

if.entry.i62.i:                                   ; preds = %ifend8.i913
  %378 = load ptr, ptr %375, align 8
  %memberidx4.i61.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %378, i64 0, i32 2
  %379 = load ptr, ptr %memberidx4.i61.i, align 8
  %380 = tail call i8 %379(ptr nonnull %375, i64 %.pre-phi125.i)
  %.pre115.i = load i64, ptr %memberidx.i.i901, align 4
  %.pre116.i = load ptr, ptr %memberidx1.i.i902, align 8
  %memberidx2.i67.phi.trans.insert.i = getelementptr inbounds %string, ptr %.pre116.i, i64 0, i32 2
  %.pre117.i = load i64, ptr %memberidx2.i67.phi.trans.insert.i, align 4
  br label %Lexer_peek.exit63.i

Lexer_peek.exit63.i:                              ; preds = %if.entry.i62.i, %ifend8.i913
  %381 = phi i64 [ %.pre117.i, %if.entry.i62.i ], [ %374, %ifend8.i913 ]
  %382 = phi ptr [ %.pre116.i, %if.entry.i62.i ], [ %375, %ifend8.i913 ]
  %383 = phi i64 [ %.pre115.i, %if.entry.i62.i ], [ %376, %ifend8.i913 ]
  %common.ret.op.i60.i = phi i8 [ %380, %if.entry.i62.i ], [ 0, %ifend8.i913 ]
  %384 = add i8 %common.ret.op.i60.i, -48
  %385 = icmp ult i8 %384, 10
  %386 = icmp eq i8 %common.ret.op.i60.i, 46
  %387 = or i1 %386, %385
  %.not.i914 = icmp slt i64 %383, %381
  %388 = and i1 %.not.i914, %387
  br i1 %388, label %while.entry.preheader.i917, label %while.end.i925

while.entry.preheader.i917:                       ; preds = %Lexer_peek.exit63.i
  %memberidx12.i.i915 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx10.i.i916 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %while.entry.i919

while.entry.i919:                                 ; preds = %Lexer_peek.exit86.i, %while.entry.preheader.i917
  %389 = phi i64 [ %439, %Lexer_peek.exit86.i ], [ %381, %while.entry.preheader.i917 ]
  %390 = phi ptr [ %440, %Lexer_peek.exit86.i ], [ %382, %while.entry.preheader.i917 ]
  %391 = phi i64 [ %441, %Lexer_peek.exit86.i ], [ %383, %while.entry.preheader.i917 ]
  %length.0.i918 = phi i64 [ %420, %Lexer_peek.exit86.i ], [ 1, %while.entry.preheader.i917 ]
  %is_float.0.i = phi i1 [ %spec.select.i, %Lexer_peek.exit86.i ], [ false, %while.entry.preheader.i917 ]
  %next_char.0.i = phi i8 [ %common.ret.op.i83.i, %Lexer_peek.exit86.i ], [ %common.ret.op.i60.i, %while.entry.preheader.i917 ]
  %392 = icmp eq i8 %next_char.0.i, 46
  %393 = add i64 %391, 2
  %394 = icmp slt i64 %393, %389
  br i1 %394, label %if.entry.i75.i, label %Lexer_peek.exit76.i

if.entry.i75.i:                                   ; preds = %while.entry.i919
  %395 = load ptr, ptr %390, align 8
  %memberidx4.i74.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %395, i64 0, i32 2
  %396 = load ptr, ptr %memberidx4.i74.i, align 8
  %397 = tail call i8 %396(ptr nonnull %390, i64 %393)
  br label %Lexer_peek.exit76.i

Lexer_peek.exit76.i:                              ; preds = %if.entry.i75.i, %while.entry.i919
  %common.ret.op.i73.i = phi i8 [ %397, %if.entry.i75.i ], [ 0, %while.entry.i919 ]
  %398 = add i8 %common.ret.op.i73.i, -58
  %399 = icmp ult i8 %398, -10
  %400 = or i1 %is_float.0.i, %399
  %401 = and i1 %392, %400
  br i1 %401, label %while.end.i925, label %ifend11.i

while.end.i925:                                   ; preds = %Lexer_peek.exit86.i, %Lexer_peek.exit76.i, %Lexer_peek.exit63.i
  %length.1.i920 = phi i64 [ 1, %Lexer_peek.exit63.i ], [ %length.0.i918, %Lexer_peek.exit76.i ], [ %420, %Lexer_peek.exit86.i ]
  %is_float.1.i = phi i1 [ false, %Lexer_peek.exit63.i ], [ %is_float.0.i, %Lexer_peek.exit76.i ], [ %spec.select.i, %Lexer_peek.exit86.i ]
  %402 = tail call ptr @malloc(i32 32)
  %403 = load i64, ptr %memberidx.i.i901, align 4
  %404 = sub i64 %403, %length.1.i920
  %405 = add i64 %404, 1
  %406 = add i64 %403, 1
  %memberidx2.i88.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %407 = load i64, ptr %memberidx2.i88.i, align 4
  %408 = sub i64 %407, %length.1.i920
  %memberidx3.i.i921 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %409 = load i64, ptr %memberidx3.i.i921, align 4
  store i64 %405, ptr %402, align 4
  %memberidx1.i.i89.i922 = getelementptr inbounds %FloRange, ptr %402, i64 0, i32 1
  store i64 %406, ptr %memberidx1.i.i89.i922, align 4
  %memberidx2.i.i.i923 = getelementptr inbounds %FloRange, ptr %402, i64 0, i32 2
  store i64 %408, ptr %memberidx2.i.i.i923, align 4
  %memberidx3.i.i.i924 = getelementptr inbounds %FloRange, ptr %402, i64 0, i32 3
  store i64 %409, ptr %memberidx3.i.i.i924, align 4
  %410 = load ptr, ptr %memberidx1.i.i902, align 8
  %411 = load ptr, ptr %410, align 8
  %memberidx17.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %411, i64 0, i32 1
  %412 = load ptr, ptr %memberidx17.i, align 8
  %413 = tail call ptr %412(ptr nonnull %410, i64 %405, i64 %length.1.i920)
  %414 = tail call ptr @malloc(i32 24)
  %415 = load ptr, ptr %413, align 8
  %memberidx19.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %415, i64 0, i32 5
  %416 = load ptr, ptr %memberidx19.i, align 8
  %417 = tail call ptr %416(ptr nonnull %413)
  br i1 %is_float.1.i, label %true_block.i, label %false_block.i

ifend11.i:                                        ; preds = %Lexer_peek.exit76.i
  %418 = load i8, ptr %0, align 1
  %419 = icmp eq i8 %418, 46
  %spec.select.i = select i1 %419, i1 true, i1 %is_float.0.i
  %420 = add i64 %length.0.i918, 1
  %421 = load i64, ptr %memberidx.i.i901, align 4
  %422 = load ptr, ptr %memberidx1.i.i902, align 8
  %memberidx2.i.i91.i = getelementptr inbounds %string, ptr %422, i64 0, i32 2
  %423 = load i64, ptr %memberidx2.i.i91.i, align 4
  %.not102.i = icmp slt i64 %421, %423
  br i1 %.not102.i, label %ifend.i.i927, label %Lexer_advance.exit.i929

ifend.i.i927:                                     ; preds = %ifend11.i
  %424 = load ptr, ptr %422, align 8
  %memberidx2.i93.i926 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %424, i64 0, i32 2
  %425 = load ptr, ptr %memberidx2.i93.i926, align 8
  %426 = add nsw i64 %421, 1
  store i64 %426, ptr %memberidx.i.i901, align 4
  %427 = tail call i8 %425(ptr nonnull %422, i64 %426)
  store i8 %427, ptr %0, align 1
  %428 = icmp eq i8 %427, 10
  br i1 %428, label %if.entry6.i.i928, label %Lexer_advance.exit.sink.split.i

if.entry6.i.i928:                                 ; preds = %ifend.i.i927
  store i64 0, ptr %memberidx12.i.i915, align 4
  br label %Lexer_advance.exit.sink.split.i

Lexer_advance.exit.sink.split.i:                  ; preds = %if.entry6.i.i928, %ifend.i.i927
  %memberidx10.i.sink127.i = phi ptr [ %memberidx10.i.i916, %if.entry6.i.i928 ], [ %memberidx12.i.i915, %ifend.i.i927 ]
  %429 = load i64, ptr %memberidx10.i.sink127.i, align 4
  %430 = add i64 %429, 1
  store i64 %430, ptr %memberidx10.i.sink127.i, align 4
  %.pre972 = load i64, ptr %memberidx.i.i901, align 4
  %.pre973 = load ptr, ptr %memberidx1.i.i902, align 8
  %memberidx2.i82.i.phi.trans.insert = getelementptr inbounds %string, ptr %.pre973, i64 0, i32 2
  %.pre974 = load i64, ptr %memberidx2.i82.i.phi.trans.insert, align 4
  br label %Lexer_advance.exit.i929

Lexer_advance.exit.i929:                          ; preds = %Lexer_advance.exit.sink.split.i, %ifend11.i
  %431 = phi i64 [ %.pre974, %Lexer_advance.exit.sink.split.i ], [ %423, %ifend11.i ]
  %432 = phi ptr [ %.pre973, %Lexer_advance.exit.sink.split.i ], [ %422, %ifend11.i ]
  %433 = phi i64 [ %.pre972, %Lexer_advance.exit.sink.split.i ], [ %421, %ifend11.i ]
  %434 = add i64 %433, 1
  %435 = icmp slt i64 %434, %431
  br i1 %435, label %if.entry.i85.i, label %Lexer_peek.exit86.i

if.entry.i85.i:                                   ; preds = %Lexer_advance.exit.i929
  %436 = load ptr, ptr %432, align 8
  %memberidx4.i84.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %436, i64 0, i32 2
  %437 = load ptr, ptr %memberidx4.i84.i, align 8
  %438 = tail call i8 %437(ptr nonnull %432, i64 %434)
  %.pre118.i = load i64, ptr %memberidx.i.i901, align 4
  %.pre119.i = load ptr, ptr %memberidx1.i.i902, align 8
  %memberidx2.i79.phi.trans.insert.i = getelementptr inbounds %string, ptr %.pre119.i, i64 0, i32 2
  %.pre120.i = load i64, ptr %memberidx2.i79.phi.trans.insert.i, align 4
  br label %Lexer_peek.exit86.i

Lexer_peek.exit86.i:                              ; preds = %if.entry.i85.i, %Lexer_advance.exit.i929
  %439 = phi i64 [ %.pre120.i, %if.entry.i85.i ], [ %431, %Lexer_advance.exit.i929 ]
  %440 = phi ptr [ %.pre119.i, %if.entry.i85.i ], [ %432, %Lexer_advance.exit.i929 ]
  %441 = phi i64 [ %.pre118.i, %if.entry.i85.i ], [ %433, %Lexer_advance.exit.i929 ]
  %common.ret.op.i83.i = phi i8 [ %438, %if.entry.i85.i ], [ 0, %Lexer_advance.exit.i929 ]
  %442 = add i8 %common.ret.op.i83.i, -48
  %443 = icmp ult i8 %442, 10
  %444 = icmp eq i8 %common.ret.op.i83.i, 46
  %445 = or i1 %444, %443
  %.not103.i = icmp slt i64 %441, %439
  %446 = and i1 %.not103.i, %445
  br i1 %446, label %while.entry.i919, label %while.end.i925

true_block.i:                                     ; preds = %while.end.i925
  %447 = tail call double @atof(ptr %417)
  tail call void @free(ptr %417)
  store i64 30, ptr %414, align 4
  %memberidx1.i.i68.i = getelementptr inbounds %Token, ptr %414, i64 0, i32 1
  store ptr %402, ptr %memberidx1.i.i68.i, align 8
  %memberidx.i69.i = getelementptr inbounds %FloatToken, ptr %414, i64 0, i32 2
  store double %447, ptr %memberidx.i69.i, align 8
  br label %common.ret

false_block.i:                                    ; preds = %while.end.i925
  %448 = tail call i64 @atol(ptr nocapture %417)
  tail call void @free(ptr %417)
  store i64 29, ptr %414, align 4
  %memberidx1.i.i.i930 = getelementptr inbounds %Token, ptr %414, i64 0, i32 1
  store ptr %402, ptr %memberidx1.i.i.i930, align 8
  %memberidx.i64.i = getelementptr inbounds %IntToken, ptr %414, i64 0, i32 2
  store i64 %448, ptr %memberidx.i64.i, align 4
  br label %common.ret

ifend11:                                          ; preds = %ifend8
  switch i8 %2, label %ifend89 [
    i8 58, label %if.entry12
    i8 59, label %if.entry15
    i8 44, label %if.entry18
    i8 43, label %if.entry21
    i8 45, label %if.entry24
    i8 42, label %if.entry27
    i8 37, label %if.entry30
    i8 94, label %if.entry33
    i8 47, label %if.entry36
    i8 40, label %if.entry42
    i8 41, label %if.entry45
    i8 123, label %if.entry48
    i8 125, label %if.entry51
    i8 91, label %if.entry54
    i8 93, label %if.entry57
    i8 13, label %if.entry60
    i8 10, label %if.entry60
    i8 39, label %if.entry63
    i8 63, label %if.entry66
    i8 38, label %if.entry69
    i8 61, label %if.entry72
    i8 33, label %if.entry75
    i8 62, label %if.entry78
    i8 60, label %if.entry81
    i8 46, label %if.entry84
    i8 0, label %if.entry87
  ]

if.entry12:                                       ; preds = %ifend11
  %449 = tail call ptr @malloc(i32 16)
  %450 = tail call ptr @malloc(i32 32)
  %memberidx.i178 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %451 = load i64, ptr %memberidx.i178, align 4
  %452 = add i64 %451, 1
  %memberidx2.i179 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %453 = load i64, ptr %memberidx2.i179, align 4
  %454 = add i64 %453, -1
  %memberidx3.i180 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %455 = load i64, ptr %memberidx3.i180, align 4
  store i64 %451, ptr %450, align 4
  %memberidx1.i.i181 = getelementptr inbounds %FloRange, ptr %450, i64 0, i32 1
  store i64 %452, ptr %memberidx1.i.i181, align 4
  %memberidx2.i.i182 = getelementptr inbounds %FloRange, ptr %450, i64 0, i32 2
  store i64 %454, ptr %memberidx2.i.i182, align 4
  %memberidx3.i.i183 = getelementptr inbounds %FloRange, ptr %450, i64 0, i32 3
  store i64 %455, ptr %memberidx3.i.i183, align 4
  store i64 1, ptr %449, align 4
  %memberidx1.i184 = getelementptr inbounds %Token, ptr %449, i64 0, i32 1
  store ptr %450, ptr %memberidx1.i184, align 8
  br label %common.ret

if.entry15:                                       ; preds = %ifend11
  %456 = tail call ptr @malloc(i32 16)
  %457 = tail call ptr @malloc(i32 32)
  %memberidx.i185 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %458 = load i64, ptr %memberidx.i185, align 4
  %459 = add i64 %458, 1
  %memberidx2.i186 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %460 = load i64, ptr %memberidx2.i186, align 4
  %461 = add i64 %460, -1
  %memberidx3.i187 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %462 = load i64, ptr %memberidx3.i187, align 4
  store i64 %458, ptr %457, align 4
  %memberidx1.i.i188 = getelementptr inbounds %FloRange, ptr %457, i64 0, i32 1
  store i64 %459, ptr %memberidx1.i.i188, align 4
  %memberidx2.i.i189 = getelementptr inbounds %FloRange, ptr %457, i64 0, i32 2
  store i64 %461, ptr %memberidx2.i.i189, align 4
  %memberidx3.i.i190 = getelementptr inbounds %FloRange, ptr %457, i64 0, i32 3
  store i64 %462, ptr %memberidx3.i.i190, align 4
  store i64 2, ptr %456, align 4
  %memberidx1.i191 = getelementptr inbounds %Token, ptr %456, i64 0, i32 1
  store ptr %457, ptr %memberidx1.i191, align 8
  br label %common.ret

if.entry18:                                       ; preds = %ifend11
  %463 = tail call ptr @malloc(i32 16)
  %464 = tail call ptr @malloc(i32 32)
  %memberidx.i192 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %465 = load i64, ptr %memberidx.i192, align 4
  %466 = add i64 %465, 1
  %memberidx2.i193 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %467 = load i64, ptr %memberidx2.i193, align 4
  %468 = add i64 %467, -1
  %memberidx3.i194 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %469 = load i64, ptr %memberidx3.i194, align 4
  store i64 %465, ptr %464, align 4
  %memberidx1.i.i195 = getelementptr inbounds %FloRange, ptr %464, i64 0, i32 1
  store i64 %466, ptr %memberidx1.i.i195, align 4
  %memberidx2.i.i196 = getelementptr inbounds %FloRange, ptr %464, i64 0, i32 2
  store i64 %468, ptr %memberidx2.i.i196, align 4
  %memberidx3.i.i197 = getelementptr inbounds %FloRange, ptr %464, i64 0, i32 3
  store i64 %469, ptr %memberidx3.i.i197, align 4
  store i64 3, ptr %463, align 4
  %memberidx1.i198 = getelementptr inbounds %Token, ptr %463, i64 0, i32 1
  store ptr %464, ptr %memberidx1.i198, align 8
  br label %common.ret

if.entry21:                                       ; preds = %ifend11
  %memberidx.i.i199 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %470 = load i64, ptr %memberidx.i.i199, align 4
  %471 = add i64 %470, 1
  %memberidx1.i.i200 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %472 = load ptr, ptr %memberidx1.i.i200, align 8
  %memberidx2.i.i201 = getelementptr inbounds %string, ptr %472, i64 0, i32 2
  %473 = load i64, ptr %memberidx2.i.i201, align 4
  %474 = icmp slt i64 %471, %473
  br i1 %474, label %if.entry.i.i, label %else.i

if.entry.i.i:                                     ; preds = %if.entry21
  %475 = load ptr, ptr %472, align 8
  %memberidx4.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %475, i64 0, i32 2
  %476 = load ptr, ptr %memberidx4.i.i, align 8
  %477 = tail call i8 %476(ptr nonnull %472, i64 %471)
  %phi.cmp869 = icmp eq i8 %477, 43
  %478 = load i64, ptr %memberidx.i.i199, align 4
  %479 = load ptr, ptr %memberidx1.i.i200, align 8
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %479, i64 0, i32 2
  %480 = load i64, ptr %memberidx2.i.i.i, align 4
  br i1 %phi.cmp869, label %if.entry.i202, label %if.entry.i.i.else.i_crit_edge

if.entry.i.i.else.i_crit_edge:                    ; preds = %if.entry.i.i
  %.pre980 = add i64 %478, 1
  br label %else.i

if.entry.i202:                                    ; preds = %if.entry.i.i
  %.not872 = icmp slt i64 %478, %480
  br i1 %.not872, label %ifend.i.i, label %Lexer_advance.exit.i

ifend.i.i:                                        ; preds = %if.entry.i202
  %481 = load ptr, ptr %479, align 8
  %memberidx2.i11.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %481, i64 0, i32 2
  %482 = load ptr, ptr %memberidx2.i11.i, align 8
  %483 = add nsw i64 %478, 1
  store i64 %483, ptr %memberidx.i.i199, align 4
  %484 = tail call i8 %482(ptr nonnull %479, i64 %483)
  store i8 %484, ptr %0, align 1
  %485 = icmp eq i8 %484, 10
  %memberidx9.i.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %485, label %if.entry6.i.i, label %Lexer_advance.exit.i.sink.split

if.entry6.i.i:                                    ; preds = %ifend.i.i
  store i64 0, ptr %memberidx9.i.i, align 4
  %memberidx10.i.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i.sink.split

Lexer_advance.exit.i.sink.split:                  ; preds = %ifend.i.i, %if.entry6.i.i
  %memberidx9.i.i.sink1001 = phi ptr [ %memberidx10.i.i, %if.entry6.i.i ], [ %memberidx9.i.i, %ifend.i.i ]
  %486 = load i64, ptr %memberidx9.i.i.sink1001, align 4
  %487 = add i64 %486, 1
  store i64 %487, ptr %memberidx9.i.i.sink1001, align 4
  br label %Lexer_advance.exit.i

Lexer_advance.exit.i:                             ; preds = %Lexer_advance.exit.i.sink.split, %if.entry.i202
  %488 = tail call ptr @malloc(i32 16)
  %489 = tail call ptr @malloc(i32 32)
  %490 = load i64, ptr %memberidx.i.i199, align 4
  %491 = add i64 %490, -1
  %492 = add i64 %490, 1
  %memberidx2.i13.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %493 = load i64, ptr %memberidx2.i13.i, align 4
  %494 = add i64 %493, -2
  %memberidx3.i14.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %495 = load i64, ptr %memberidx3.i14.i, align 4
  store i64 %491, ptr %489, align 4
  %memberidx1.i.i15.i = getelementptr inbounds %FloRange, ptr %489, i64 0, i32 1
  store i64 %492, ptr %memberidx1.i.i15.i, align 4
  %memberidx2.i.i16.i = getelementptr inbounds %FloRange, ptr %489, i64 0, i32 2
  store i64 %494, ptr %memberidx2.i.i16.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %489, i64 0, i32 3
  store i64 %495, ptr %memberidx3.i.i.i, align 4
  store i64 21, ptr %488, align 4
  %memberidx1.i17.i = getelementptr inbounds %Token, ptr %488, i64 0, i32 1
  store ptr %489, ptr %memberidx1.i17.i, align 8
  br label %common.ret

else.i:                                           ; preds = %if.entry.i.i.else.i_crit_edge, %if.entry21
  %.pre-phi = phi i64 [ %.pre980, %if.entry.i.i.else.i_crit_edge ], [ %471, %if.entry21 ]
  %496 = phi i64 [ %480, %if.entry.i.i.else.i_crit_edge ], [ %473, %if.entry21 ]
  %497 = phi ptr [ %479, %if.entry.i.i.else.i_crit_edge ], [ %472, %if.entry21 ]
  %498 = icmp slt i64 %.pre-phi, %496
  br i1 %498, label %if.entry.i30.i, label %ifend3.i

if.entry.i30.i:                                   ; preds = %else.i
  %499 = load ptr, ptr %497, align 8
  %memberidx4.i29.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %499, i64 0, i32 2
  %500 = load ptr, ptr %memberidx4.i29.i, align 8
  %501 = tail call i8 %500(ptr nonnull %497, i64 %.pre-phi)
  %phi.cmp870 = icmp eq i8 %501, 61
  br i1 %phi.cmp870, label %if.entry1.i, label %ifend3.i

if.entry1.i:                                      ; preds = %if.entry.i30.i
  %502 = load i64, ptr %memberidx.i.i199, align 4
  %503 = load ptr, ptr %memberidx1.i.i200, align 8
  %memberidx2.i.i34.i = getelementptr inbounds %string, ptr %503, i64 0, i32 2
  %504 = load i64, ptr %memberidx2.i.i34.i, align 4
  %.not871 = icmp slt i64 %502, %504
  br i1 %.not871, label %ifend.i38.i, label %Lexer_advance.exit44.i

ifend.i38.i:                                      ; preds = %if.entry1.i
  %505 = load ptr, ptr %503, align 8
  %memberidx2.i36.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %505, i64 0, i32 2
  %506 = load ptr, ptr %memberidx2.i36.i, align 8
  %507 = add nsw i64 %502, 1
  store i64 %507, ptr %memberidx.i.i199, align 4
  %508 = tail call i8 %506(ptr nonnull %503, i64 %507)
  store i8 %508, ptr %0, align 1
  %509 = icmp eq i8 %508, 10
  %memberidx9.i39.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %509, label %if.entry6.i41.i, label %Lexer_advance.exit44.i.sink.split

if.entry6.i41.i:                                  ; preds = %ifend.i38.i
  store i64 0, ptr %memberidx9.i39.i, align 4
  %memberidx10.i40.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit44.i.sink.split

Lexer_advance.exit44.i.sink.split:                ; preds = %ifend.i38.i, %if.entry6.i41.i
  %memberidx9.i39.i.sink1003 = phi ptr [ %memberidx10.i40.i, %if.entry6.i41.i ], [ %memberidx9.i39.i, %ifend.i38.i ]
  %510 = load i64, ptr %memberidx9.i39.i.sink1003, align 4
  %511 = add i64 %510, 1
  store i64 %511, ptr %memberidx9.i39.i.sink1003, align 4
  br label %Lexer_advance.exit44.i

Lexer_advance.exit44.i:                           ; preds = %Lexer_advance.exit44.i.sink.split, %if.entry1.i
  %512 = tail call ptr @malloc(i32 16)
  %513 = tail call ptr @malloc(i32 32)
  %514 = load i64, ptr %memberidx.i.i199, align 4
  %515 = add i64 %514, -1
  %516 = add i64 %514, 1
  %memberidx2.i46.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %517 = load i64, ptr %memberidx2.i46.i, align 4
  %518 = add i64 %517, -2
  %memberidx3.i47.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %519 = load i64, ptr %memberidx3.i47.i, align 4
  store i64 %515, ptr %513, align 4
  %memberidx1.i.i48.i = getelementptr inbounds %FloRange, ptr %513, i64 0, i32 1
  store i64 %516, ptr %memberidx1.i.i48.i, align 4
  %memberidx2.i.i49.i = getelementptr inbounds %FloRange, ptr %513, i64 0, i32 2
  store i64 %518, ptr %memberidx2.i.i49.i, align 4
  %memberidx3.i.i50.i = getelementptr inbounds %FloRange, ptr %513, i64 0, i32 3
  store i64 %519, ptr %memberidx3.i.i50.i, align 4
  store i64 12, ptr %512, align 4
  %memberidx1.i51.i = getelementptr inbounds %Token, ptr %512, i64 0, i32 1
  store ptr %513, ptr %memberidx1.i51.i, align 8
  br label %common.ret

ifend3.i:                                         ; preds = %else.i, %if.entry.i30.i
  %520 = tail call ptr @malloc(i32 16)
  %521 = tail call ptr @malloc(i32 32)
  %522 = load i64, ptr %memberidx.i.i199, align 4
  %523 = add i64 %522, 1
  %memberidx2.i20.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %524 = load i64, ptr %memberidx2.i20.i, align 4
  %525 = add i64 %524, -1
  %memberidx3.i21.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %526 = load i64, ptr %memberidx3.i21.i, align 4
  store i64 %522, ptr %521, align 4
  %memberidx1.i.i22.i = getelementptr inbounds %FloRange, ptr %521, i64 0, i32 1
  store i64 %523, ptr %memberidx1.i.i22.i, align 4
  %memberidx2.i.i23.i = getelementptr inbounds %FloRange, ptr %521, i64 0, i32 2
  store i64 %525, ptr %memberidx2.i.i23.i, align 4
  %memberidx3.i.i24.i = getelementptr inbounds %FloRange, ptr %521, i64 0, i32 3
  store i64 %526, ptr %memberidx3.i.i24.i, align 4
  store i64 6, ptr %520, align 4
  %memberidx1.i18.i = getelementptr inbounds %Token, ptr %520, i64 0, i32 1
  store ptr %521, ptr %memberidx1.i18.i, align 8
  br label %common.ret

if.entry24:                                       ; preds = %ifend11
  %memberidx.i.i204 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %527 = load i64, ptr %memberidx.i.i204, align 4
  %528 = add i64 %527, 1
  %memberidx1.i.i205 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %529 = load ptr, ptr %memberidx1.i.i205, align 8
  %memberidx2.i.i206 = getelementptr inbounds %string, ptr %529, i64 0, i32 2
  %530 = load i64, ptr %memberidx2.i.i206, align 4
  %531 = icmp slt i64 %528, %530
  br i1 %531, label %if.entry.i.i208, label %else.i236

if.entry.i.i208:                                  ; preds = %if.entry24
  %532 = load ptr, ptr %529, align 8
  %memberidx4.i.i207 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %532, i64 0, i32 2
  %533 = load ptr, ptr %memberidx4.i.i207, align 8
  %534 = tail call i8 %533(ptr nonnull %529, i64 %528)
  %phi.cmp865 = icmp eq i8 %534, 45
  %535 = load i64, ptr %memberidx.i.i204, align 4
  %536 = load ptr, ptr %memberidx1.i.i205, align 8
  %memberidx2.i.i.i214 = getelementptr inbounds %string, ptr %536, i64 0, i32 2
  %537 = load i64, ptr %memberidx2.i.i.i214, align 4
  br i1 %phi.cmp865, label %if.entry.i215, label %if.entry.i.i208.else.i236_crit_edge

if.entry.i.i208.else.i236_crit_edge:              ; preds = %if.entry.i.i208
  %.pre981 = add i64 %535, 1
  br label %else.i236

if.entry.i215:                                    ; preds = %if.entry.i.i208
  %.not868 = icmp slt i64 %535, %537
  br i1 %.not868, label %ifend.i.i219, label %Lexer_advance.exit.i232

ifend.i.i219:                                     ; preds = %if.entry.i215
  %538 = load ptr, ptr %536, align 8
  %memberidx2.i11.i217 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %538, i64 0, i32 2
  %539 = load ptr, ptr %memberidx2.i11.i217, align 8
  %540 = add nsw i64 %535, 1
  store i64 %540, ptr %memberidx.i.i204, align 4
  %541 = tail call i8 %539(ptr nonnull %536, i64 %540)
  store i8 %541, ptr %0, align 1
  %542 = icmp eq i8 %541, 10
  %memberidx9.i.i220 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %542, label %if.entry6.i.i222, label %Lexer_advance.exit.i232.sink.split

if.entry6.i.i222:                                 ; preds = %ifend.i.i219
  store i64 0, ptr %memberidx9.i.i220, align 4
  %memberidx10.i.i221 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i232.sink.split

Lexer_advance.exit.i232.sink.split:               ; preds = %ifend.i.i219, %if.entry6.i.i222
  %memberidx9.i.i220.sink1005 = phi ptr [ %memberidx10.i.i221, %if.entry6.i.i222 ], [ %memberidx9.i.i220, %ifend.i.i219 ]
  %543 = load i64, ptr %memberidx9.i.i220.sink1005, align 4
  %544 = add i64 %543, 1
  store i64 %544, ptr %memberidx9.i.i220.sink1005, align 4
  br label %Lexer_advance.exit.i232

Lexer_advance.exit.i232:                          ; preds = %Lexer_advance.exit.i232.sink.split, %if.entry.i215
  %545 = tail call ptr @malloc(i32 16)
  %546 = tail call ptr @malloc(i32 32)
  %547 = load i64, ptr %memberidx.i.i204, align 4
  %548 = add i64 %547, -1
  %549 = add i64 %547, 1
  %memberidx2.i13.i226 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %550 = load i64, ptr %memberidx2.i13.i226, align 4
  %551 = add i64 %550, -2
  %memberidx3.i14.i227 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %552 = load i64, ptr %memberidx3.i14.i227, align 4
  store i64 %548, ptr %546, align 4
  %memberidx1.i.i15.i228 = getelementptr inbounds %FloRange, ptr %546, i64 0, i32 1
  store i64 %549, ptr %memberidx1.i.i15.i228, align 4
  %memberidx2.i.i16.i229 = getelementptr inbounds %FloRange, ptr %546, i64 0, i32 2
  store i64 %551, ptr %memberidx2.i.i16.i229, align 4
  %memberidx3.i.i.i230 = getelementptr inbounds %FloRange, ptr %546, i64 0, i32 3
  store i64 %552, ptr %memberidx3.i.i.i230, align 4
  store i64 22, ptr %545, align 4
  %memberidx1.i17.i231 = getelementptr inbounds %Token, ptr %545, i64 0, i32 1
  store ptr %546, ptr %memberidx1.i17.i231, align 8
  br label %common.ret

else.i236:                                        ; preds = %if.entry.i.i208.else.i236_crit_edge, %if.entry24
  %.pre-phi982 = phi i64 [ %.pre981, %if.entry.i.i208.else.i236_crit_edge ], [ %528, %if.entry24 ]
  %553 = phi i64 [ %537, %if.entry.i.i208.else.i236_crit_edge ], [ %530, %if.entry24 ]
  %554 = phi ptr [ %536, %if.entry.i.i208.else.i236_crit_edge ], [ %529, %if.entry24 ]
  %555 = icmp slt i64 %.pre-phi982, %553
  br i1 %555, label %if.entry.i30.i238, label %ifend3.i269

if.entry.i30.i238:                                ; preds = %else.i236
  %556 = load ptr, ptr %554, align 8
  %memberidx4.i29.i237 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %556, i64 0, i32 2
  %557 = load ptr, ptr %memberidx4.i29.i237, align 8
  %558 = tail call i8 %557(ptr nonnull %554, i64 %.pre-phi982)
  %phi.cmp866 = icmp eq i8 %558, 61
  br i1 %phi.cmp866, label %if.entry1.i244, label %ifend3.i269

if.entry1.i244:                                   ; preds = %if.entry.i30.i238
  %559 = load i64, ptr %memberidx.i.i204, align 4
  %560 = load ptr, ptr %memberidx1.i.i205, align 8
  %memberidx2.i.i34.i243 = getelementptr inbounds %string, ptr %560, i64 0, i32 2
  %561 = load i64, ptr %memberidx2.i.i34.i243, align 4
  %.not867 = icmp slt i64 %559, %561
  br i1 %.not867, label %ifend.i38.i248, label %Lexer_advance.exit44.i261

ifend.i38.i248:                                   ; preds = %if.entry1.i244
  %562 = load ptr, ptr %560, align 8
  %memberidx2.i36.i246 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %562, i64 0, i32 2
  %563 = load ptr, ptr %memberidx2.i36.i246, align 8
  %564 = add nsw i64 %559, 1
  store i64 %564, ptr %memberidx.i.i204, align 4
  %565 = tail call i8 %563(ptr nonnull %560, i64 %564)
  store i8 %565, ptr %0, align 1
  %566 = icmp eq i8 %565, 10
  %memberidx9.i39.i249 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %566, label %if.entry6.i41.i251, label %Lexer_advance.exit44.i261.sink.split

if.entry6.i41.i251:                               ; preds = %ifend.i38.i248
  store i64 0, ptr %memberidx9.i39.i249, align 4
  %memberidx10.i40.i250 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit44.i261.sink.split

Lexer_advance.exit44.i261.sink.split:             ; preds = %ifend.i38.i248, %if.entry6.i41.i251
  %memberidx9.i39.i249.sink1007 = phi ptr [ %memberidx10.i40.i250, %if.entry6.i41.i251 ], [ %memberidx9.i39.i249, %ifend.i38.i248 ]
  %567 = load i64, ptr %memberidx9.i39.i249.sink1007, align 4
  %568 = add i64 %567, 1
  store i64 %568, ptr %memberidx9.i39.i249.sink1007, align 4
  br label %Lexer_advance.exit44.i261

Lexer_advance.exit44.i261:                        ; preds = %Lexer_advance.exit44.i261.sink.split, %if.entry1.i244
  %569 = tail call ptr @malloc(i32 16)
  %570 = tail call ptr @malloc(i32 32)
  %571 = load i64, ptr %memberidx.i.i204, align 4
  %572 = add i64 %571, -1
  %573 = add i64 %571, 1
  %memberidx2.i46.i255 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %574 = load i64, ptr %memberidx2.i46.i255, align 4
  %575 = add i64 %574, -2
  %memberidx3.i47.i256 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %576 = load i64, ptr %memberidx3.i47.i256, align 4
  store i64 %572, ptr %570, align 4
  %memberidx1.i.i48.i257 = getelementptr inbounds %FloRange, ptr %570, i64 0, i32 1
  store i64 %573, ptr %memberidx1.i.i48.i257, align 4
  %memberidx2.i.i49.i258 = getelementptr inbounds %FloRange, ptr %570, i64 0, i32 2
  store i64 %575, ptr %memberidx2.i.i49.i258, align 4
  %memberidx3.i.i50.i259 = getelementptr inbounds %FloRange, ptr %570, i64 0, i32 3
  store i64 %576, ptr %memberidx3.i.i50.i259, align 4
  store i64 11, ptr %569, align 4
  %memberidx1.i51.i260 = getelementptr inbounds %Token, ptr %569, i64 0, i32 1
  store ptr %570, ptr %memberidx1.i51.i260, align 8
  br label %common.ret

ifend3.i269:                                      ; preds = %else.i236, %if.entry.i30.i238
  %577 = tail call ptr @malloc(i32 16)
  %578 = tail call ptr @malloc(i32 32)
  %579 = load i64, ptr %memberidx.i.i204, align 4
  %580 = add i64 %579, -1
  %581 = add i64 %579, 1
  %memberidx2.i20.i263 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %582 = load i64, ptr %memberidx2.i20.i263, align 4
  %583 = add i64 %582, -2
  %memberidx3.i21.i264 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %584 = load i64, ptr %memberidx3.i21.i264, align 4
  store i64 %580, ptr %578, align 4
  %memberidx1.i.i22.i265 = getelementptr inbounds %FloRange, ptr %578, i64 0, i32 1
  store i64 %581, ptr %memberidx1.i.i22.i265, align 4
  %memberidx2.i.i23.i266 = getelementptr inbounds %FloRange, ptr %578, i64 0, i32 2
  store i64 %583, ptr %memberidx2.i.i23.i266, align 4
  %memberidx3.i.i24.i267 = getelementptr inbounds %FloRange, ptr %578, i64 0, i32 3
  store i64 %584, ptr %memberidx3.i.i24.i267, align 4
  store i64 5, ptr %577, align 4
  %memberidx1.i18.i268 = getelementptr inbounds %Token, ptr %577, i64 0, i32 1
  store ptr %578, ptr %memberidx1.i18.i268, align 8
  br label %common.ret

if.entry27:                                       ; preds = %ifend11
  %memberidx.i.i270 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %585 = load i64, ptr %memberidx.i.i270, align 4
  %586 = add i64 %585, 1
  %memberidx1.i.i271 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %587 = load ptr, ptr %memberidx1.i.i271, align 8
  %memberidx2.i.i272 = getelementptr inbounds %string, ptr %587, i64 0, i32 2
  %588 = load i64, ptr %memberidx2.i.i272, align 4
  %589 = icmp slt i64 %586, %588
  br i1 %589, label %if.entry.i.i274, label %ifend.i291

if.entry.i.i274:                                  ; preds = %if.entry27
  %590 = load ptr, ptr %587, align 8
  %memberidx4.i.i273 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %590, i64 0, i32 2
  %591 = load ptr, ptr %memberidx4.i.i273, align 8
  %592 = tail call i8 %591(ptr nonnull %587, i64 %586)
  %phi.cmp863 = icmp eq i8 %592, 61
  br i1 %phi.cmp863, label %if.entry.i281, label %ifend.i291

if.entry.i281:                                    ; preds = %if.entry.i.i274
  %593 = load i64, ptr %memberidx.i.i270, align 4
  %594 = load ptr, ptr %memberidx1.i.i271, align 8
  %memberidx2.i.i.i280 = getelementptr inbounds %string, ptr %594, i64 0, i32 2
  %595 = load i64, ptr %memberidx2.i.i.i280, align 4
  %.not864 = icmp slt i64 %593, %595
  br i1 %.not864, label %ifend.i.i283, label %Lexer_advance.exit.i290

ifend.i.i283:                                     ; preds = %if.entry.i281
  %596 = load ptr, ptr %594, align 8
  %memberidx2.i5.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %596, i64 0, i32 2
  %597 = load ptr, ptr %memberidx2.i5.i, align 8
  %598 = add nsw i64 %593, 1
  store i64 %598, ptr %memberidx.i.i270, align 4
  %599 = tail call i8 %597(ptr nonnull %594, i64 %598)
  store i8 %599, ptr %0, align 1
  %600 = icmp eq i8 %599, 10
  %memberidx9.i.i284 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %600, label %if.entry6.i.i286, label %Lexer_advance.exit.i290.sink.split

if.entry6.i.i286:                                 ; preds = %ifend.i.i283
  store i64 0, ptr %memberidx9.i.i284, align 4
  %memberidx10.i.i285 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i290.sink.split

Lexer_advance.exit.i290.sink.split:               ; preds = %ifend.i.i283, %if.entry6.i.i286
  %memberidx9.i.i284.sink1009 = phi ptr [ %memberidx10.i.i285, %if.entry6.i.i286 ], [ %memberidx9.i.i284, %ifend.i.i283 ]
  %601 = load i64, ptr %memberidx9.i.i284.sink1009, align 4
  %602 = add i64 %601, 1
  store i64 %602, ptr %memberidx9.i.i284.sink1009, align 4
  br label %Lexer_advance.exit.i290

Lexer_advance.exit.i290:                          ; preds = %Lexer_advance.exit.i290.sink.split, %if.entry.i281
  %603 = tail call ptr @malloc(i32 16)
  %604 = tail call ptr @malloc(i32 32)
  %605 = load i64, ptr %memberidx.i.i270, align 4
  %606 = add i64 %605, -1
  %607 = add i64 %605, 1
  %memberidx2.i7.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %608 = load i64, ptr %memberidx2.i7.i, align 4
  %609 = add i64 %608, -2
  %memberidx3.i8.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %610 = load i64, ptr %memberidx3.i8.i, align 4
  store i64 %606, ptr %604, align 4
  %memberidx1.i.i9.i = getelementptr inbounds %FloRange, ptr %604, i64 0, i32 1
  store i64 %607, ptr %memberidx1.i.i9.i, align 4
  %memberidx2.i.i10.i = getelementptr inbounds %FloRange, ptr %604, i64 0, i32 2
  store i64 %609, ptr %memberidx2.i.i10.i, align 4
  %memberidx3.i.i.i289 = getelementptr inbounds %FloRange, ptr %604, i64 0, i32 3
  store i64 %610, ptr %memberidx3.i.i.i289, align 4
  store i64 10, ptr %603, align 4
  %memberidx1.i11.i = getelementptr inbounds %Token, ptr %603, i64 0, i32 1
  store ptr %604, ptr %memberidx1.i11.i, align 8
  br label %common.ret

ifend.i291:                                       ; preds = %if.entry27, %if.entry.i.i274
  %611 = tail call ptr @malloc(i32 16)
  %612 = tail call ptr @malloc(i32 32)
  %613 = load i64, ptr %memberidx.i.i270, align 4
  %614 = add i64 %613, 1
  %memberidx2.i14.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %615 = load i64, ptr %memberidx2.i14.i, align 4
  %616 = add i64 %615, -1
  %memberidx3.i15.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %617 = load i64, ptr %memberidx3.i15.i, align 4
  store i64 %613, ptr %612, align 4
  %memberidx1.i.i16.i = getelementptr inbounds %FloRange, ptr %612, i64 0, i32 1
  store i64 %614, ptr %memberidx1.i.i16.i, align 4
  %memberidx2.i.i17.i = getelementptr inbounds %FloRange, ptr %612, i64 0, i32 2
  store i64 %616, ptr %memberidx2.i.i17.i, align 4
  %memberidx3.i.i18.i = getelementptr inbounds %FloRange, ptr %612, i64 0, i32 3
  store i64 %617, ptr %memberidx3.i.i18.i, align 4
  store i64 4, ptr %611, align 4
  %memberidx1.i12.i = getelementptr inbounds %Token, ptr %611, i64 0, i32 1
  store ptr %612, ptr %memberidx1.i12.i, align 8
  br label %common.ret

if.entry30:                                       ; preds = %ifend11
  %memberidx.i.i292 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %618 = load i64, ptr %memberidx.i.i292, align 4
  %619 = add i64 %618, 1
  %memberidx1.i.i293 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %620 = load ptr, ptr %memberidx1.i.i293, align 8
  %memberidx2.i.i294 = getelementptr inbounds %string, ptr %620, i64 0, i32 2
  %621 = load i64, ptr %memberidx2.i.i294, align 4
  %622 = icmp slt i64 %619, %621
  br i1 %622, label %if.entry.i.i296, label %ifend.i328

if.entry.i.i296:                                  ; preds = %if.entry30
  %623 = load ptr, ptr %620, align 8
  %memberidx4.i.i295 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %623, i64 0, i32 2
  %624 = load ptr, ptr %memberidx4.i.i295, align 8
  %625 = tail call i8 %624(ptr nonnull %620, i64 %619)
  %phi.cmp861 = icmp eq i8 %625, 61
  br i1 %phi.cmp861, label %if.entry.i303, label %ifend.i328

if.entry.i303:                                    ; preds = %if.entry.i.i296
  %626 = load i64, ptr %memberidx.i.i292, align 4
  %627 = load ptr, ptr %memberidx1.i.i293, align 8
  %memberidx2.i.i.i302 = getelementptr inbounds %string, ptr %627, i64 0, i32 2
  %628 = load i64, ptr %memberidx2.i.i.i302, align 4
  %.not862 = icmp slt i64 %626, %628
  br i1 %.not862, label %ifend.i.i307, label %Lexer_advance.exit.i320

ifend.i.i307:                                     ; preds = %if.entry.i303
  %629 = load ptr, ptr %627, align 8
  %memberidx2.i5.i305 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %629, i64 0, i32 2
  %630 = load ptr, ptr %memberidx2.i5.i305, align 8
  %631 = add nsw i64 %626, 1
  store i64 %631, ptr %memberidx.i.i292, align 4
  %632 = tail call i8 %630(ptr nonnull %627, i64 %631)
  store i8 %632, ptr %0, align 1
  %633 = icmp eq i8 %632, 10
  %memberidx9.i.i308 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %633, label %if.entry6.i.i310, label %Lexer_advance.exit.i320.sink.split

if.entry6.i.i310:                                 ; preds = %ifend.i.i307
  store i64 0, ptr %memberidx9.i.i308, align 4
  %memberidx10.i.i309 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i320.sink.split

Lexer_advance.exit.i320.sink.split:               ; preds = %ifend.i.i307, %if.entry6.i.i310
  %memberidx9.i.i308.sink1011 = phi ptr [ %memberidx10.i.i309, %if.entry6.i.i310 ], [ %memberidx9.i.i308, %ifend.i.i307 ]
  %634 = load i64, ptr %memberidx9.i.i308.sink1011, align 4
  %635 = add i64 %634, 1
  store i64 %635, ptr %memberidx9.i.i308.sink1011, align 4
  br label %Lexer_advance.exit.i320

Lexer_advance.exit.i320:                          ; preds = %Lexer_advance.exit.i320.sink.split, %if.entry.i303
  %636 = tail call ptr @malloc(i32 16)
  %637 = tail call ptr @malloc(i32 32)
  %638 = load i64, ptr %memberidx.i.i292, align 4
  %639 = add i64 %638, -1
  %640 = add i64 %638, 1
  %memberidx2.i7.i314 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %641 = load i64, ptr %memberidx2.i7.i314, align 4
  %642 = add i64 %641, -2
  %memberidx3.i8.i315 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %643 = load i64, ptr %memberidx3.i8.i315, align 4
  store i64 %639, ptr %637, align 4
  %memberidx1.i.i9.i316 = getelementptr inbounds %FloRange, ptr %637, i64 0, i32 1
  store i64 %640, ptr %memberidx1.i.i9.i316, align 4
  %memberidx2.i.i10.i317 = getelementptr inbounds %FloRange, ptr %637, i64 0, i32 2
  store i64 %642, ptr %memberidx2.i.i10.i317, align 4
  %memberidx3.i.i.i318 = getelementptr inbounds %FloRange, ptr %637, i64 0, i32 3
  store i64 %643, ptr %memberidx3.i.i.i318, align 4
  store i64 14, ptr %636, align 4
  %memberidx1.i11.i319 = getelementptr inbounds %Token, ptr %636, i64 0, i32 1
  store ptr %637, ptr %memberidx1.i11.i319, align 8
  br label %common.ret

ifend.i328:                                       ; preds = %if.entry30, %if.entry.i.i296
  %644 = tail call ptr @malloc(i32 16)
  %645 = tail call ptr @malloc(i32 32)
  %646 = load i64, ptr %memberidx.i.i292, align 4
  %647 = add i64 %646, 1
  %memberidx2.i14.i322 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %648 = load i64, ptr %memberidx2.i14.i322, align 4
  %649 = add i64 %648, -1
  %memberidx3.i15.i323 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %650 = load i64, ptr %memberidx3.i15.i323, align 4
  store i64 %646, ptr %645, align 4
  %memberidx1.i.i16.i324 = getelementptr inbounds %FloRange, ptr %645, i64 0, i32 1
  store i64 %647, ptr %memberidx1.i.i16.i324, align 4
  %memberidx2.i.i17.i325 = getelementptr inbounds %FloRange, ptr %645, i64 0, i32 2
  store i64 %649, ptr %memberidx2.i.i17.i325, align 4
  %memberidx3.i.i18.i326 = getelementptr inbounds %FloRange, ptr %645, i64 0, i32 3
  store i64 %650, ptr %memberidx3.i.i18.i326, align 4
  store i64 8, ptr %644, align 4
  %memberidx1.i12.i327 = getelementptr inbounds %Token, ptr %644, i64 0, i32 1
  store ptr %645, ptr %memberidx1.i12.i327, align 8
  br label %common.ret

if.entry33:                                       ; preds = %ifend11
  %memberidx.i.i329 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %651 = load i64, ptr %memberidx.i.i329, align 4
  %652 = add i64 %651, 1
  %memberidx1.i.i330 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %653 = load ptr, ptr %memberidx1.i.i330, align 8
  %memberidx2.i.i331 = getelementptr inbounds %string, ptr %653, i64 0, i32 2
  %654 = load i64, ptr %memberidx2.i.i331, align 4
  %655 = icmp slt i64 %652, %654
  br i1 %655, label %if.entry.i.i333, label %ifend.i365

if.entry.i.i333:                                  ; preds = %if.entry33
  %656 = load ptr, ptr %653, align 8
  %memberidx4.i.i332 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %656, i64 0, i32 2
  %657 = load ptr, ptr %memberidx4.i.i332, align 8
  %658 = tail call i8 %657(ptr nonnull %653, i64 %652)
  %phi.cmp859 = icmp eq i8 %658, 61
  br i1 %phi.cmp859, label %if.entry.i340, label %ifend.i365

if.entry.i340:                                    ; preds = %if.entry.i.i333
  %659 = load i64, ptr %memberidx.i.i329, align 4
  %660 = load ptr, ptr %memberidx1.i.i330, align 8
  %memberidx2.i.i.i339 = getelementptr inbounds %string, ptr %660, i64 0, i32 2
  %661 = load i64, ptr %memberidx2.i.i.i339, align 4
  %.not860 = icmp slt i64 %659, %661
  br i1 %.not860, label %ifend.i.i344, label %Lexer_advance.exit.i357

ifend.i.i344:                                     ; preds = %if.entry.i340
  %662 = load ptr, ptr %660, align 8
  %memberidx2.i5.i342 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %662, i64 0, i32 2
  %663 = load ptr, ptr %memberidx2.i5.i342, align 8
  %664 = add nsw i64 %659, 1
  store i64 %664, ptr %memberidx.i.i329, align 4
  %665 = tail call i8 %663(ptr nonnull %660, i64 %664)
  store i8 %665, ptr %0, align 1
  %666 = icmp eq i8 %665, 10
  %memberidx9.i.i345 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %666, label %if.entry6.i.i347, label %Lexer_advance.exit.i357.sink.split

if.entry6.i.i347:                                 ; preds = %ifend.i.i344
  store i64 0, ptr %memberidx9.i.i345, align 4
  %memberidx10.i.i346 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i357.sink.split

Lexer_advance.exit.i357.sink.split:               ; preds = %ifend.i.i344, %if.entry6.i.i347
  %memberidx9.i.i345.sink1013 = phi ptr [ %memberidx10.i.i346, %if.entry6.i.i347 ], [ %memberidx9.i.i345, %ifend.i.i344 ]
  %667 = load i64, ptr %memberidx9.i.i345.sink1013, align 4
  %668 = add i64 %667, 1
  store i64 %668, ptr %memberidx9.i.i345.sink1013, align 4
  br label %Lexer_advance.exit.i357

Lexer_advance.exit.i357:                          ; preds = %Lexer_advance.exit.i357.sink.split, %if.entry.i340
  %669 = tail call ptr @malloc(i32 16)
  %670 = tail call ptr @malloc(i32 32)
  %671 = load i64, ptr %memberidx.i.i329, align 4
  %672 = add i64 %671, -1
  %673 = add i64 %671, 1
  %memberidx2.i7.i351 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %674 = load i64, ptr %memberidx2.i7.i351, align 4
  %675 = add i64 %674, -2
  %memberidx3.i8.i352 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %676 = load i64, ptr %memberidx3.i8.i352, align 4
  store i64 %672, ptr %670, align 4
  %memberidx1.i.i9.i353 = getelementptr inbounds %FloRange, ptr %670, i64 0, i32 1
  store i64 %673, ptr %memberidx1.i.i9.i353, align 4
  %memberidx2.i.i10.i354 = getelementptr inbounds %FloRange, ptr %670, i64 0, i32 2
  store i64 %675, ptr %memberidx2.i.i10.i354, align 4
  %memberidx3.i.i.i355 = getelementptr inbounds %FloRange, ptr %670, i64 0, i32 3
  store i64 %676, ptr %memberidx3.i.i.i355, align 4
  store i64 15, ptr %669, align 4
  %memberidx1.i11.i356 = getelementptr inbounds %Token, ptr %669, i64 0, i32 1
  store ptr %670, ptr %memberidx1.i11.i356, align 8
  br label %common.ret

ifend.i365:                                       ; preds = %if.entry33, %if.entry.i.i333
  %677 = tail call ptr @malloc(i32 16)
  %678 = tail call ptr @malloc(i32 32)
  %679 = load i64, ptr %memberidx.i.i329, align 4
  %680 = add i64 %679, 1
  %memberidx2.i14.i359 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %681 = load i64, ptr %memberidx2.i14.i359, align 4
  %682 = add i64 %681, -1
  %memberidx3.i15.i360 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %683 = load i64, ptr %memberidx3.i15.i360, align 4
  store i64 %679, ptr %678, align 4
  %memberidx1.i.i16.i361 = getelementptr inbounds %FloRange, ptr %678, i64 0, i32 1
  store i64 %680, ptr %memberidx1.i.i16.i361, align 4
  %memberidx2.i.i17.i362 = getelementptr inbounds %FloRange, ptr %678, i64 0, i32 2
  store i64 %682, ptr %memberidx2.i.i17.i362, align 4
  %memberidx3.i.i18.i363 = getelementptr inbounds %FloRange, ptr %678, i64 0, i32 3
  store i64 %683, ptr %memberidx3.i.i18.i363, align 4
  store i64 9, ptr %677, align 4
  %memberidx1.i12.i364 = getelementptr inbounds %Token, ptr %677, i64 0, i32 1
  store ptr %678, ptr %memberidx1.i12.i364, align 8
  br label %common.ret

if.entry36:                                       ; preds = %ifend11
  %memberidx.i.i366 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %684 = load i64, ptr %memberidx.i.i366, align 4
  %685 = add i64 %684, 1
  %memberidx1.i.i367 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %686 = load ptr, ptr %memberidx1.i.i367, align 8
  %memberidx2.i.i368 = getelementptr inbounds %string, ptr %686, i64 0, i32 2
  %687 = load i64, ptr %memberidx2.i.i368, align 4
  %688 = icmp slt i64 %685, %687
  br i1 %688, label %Lexer_peek.exit.i372, label %else.i387

Lexer_peek.exit.i372:                             ; preds = %if.entry36
  %689 = load ptr, ptr %686, align 8
  %memberidx4.i.i369 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %689, i64 0, i32 2
  %690 = load ptr, ptr %memberidx4.i.i369, align 8
  %691 = tail call i8 %690(ptr nonnull %686, i64 %685)
  %692 = icmp eq i8 %691, 42
  %693 = load i64, ptr %memberidx.i.i366, align 4
  %694 = load ptr, ptr %memberidx1.i.i367, align 8
  %memberidx2.i.i.i375 = getelementptr inbounds %string, ptr %694, i64 0, i32 2
  %695 = load i64, ptr %memberidx2.i.i.i375, align 4
  br i1 %692, label %if.entry.i376, label %Lexer_peek.exit.i372.else.i387_crit_edge

Lexer_peek.exit.i372.else.i387_crit_edge:         ; preds = %Lexer_peek.exit.i372
  %.pre983 = add i64 %693, 1
  br label %else.i387

if.entry.i376:                                    ; preds = %Lexer_peek.exit.i372
  %.not853 = icmp slt i64 %693, %695
  br i1 %.not853, label %ifend.i.i380, label %Lexer_advance.exit.i386

ifend.i.i380:                                     ; preds = %if.entry.i376
  %696 = load ptr, ptr %694, align 8
  %memberidx2.i27.i378 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %696, i64 0, i32 2
  %697 = load ptr, ptr %memberidx2.i27.i378, align 8
  %698 = add nsw i64 %693, 1
  store i64 %698, ptr %memberidx.i.i366, align 4
  %699 = tail call i8 %697(ptr nonnull %694, i64 %698)
  store i8 %699, ptr %0, align 1
  %700 = icmp eq i8 %699, 10
  %memberidx9.i.i381 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %700, label %if.entry6.i.i383, label %Lexer_advance.exit.i386.sink.split

if.entry6.i.i383:                                 ; preds = %ifend.i.i380
  store i64 0, ptr %memberidx9.i.i381, align 4
  %memberidx10.i.i382 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i386.sink.split

Lexer_advance.exit.i386.sink.split:               ; preds = %ifend.i.i380, %if.entry6.i.i383
  %memberidx9.i.i381.sink1015 = phi ptr [ %memberidx10.i.i382, %if.entry6.i.i383 ], [ %memberidx9.i.i381, %ifend.i.i380 ]
  %701 = load i64, ptr %memberidx9.i.i381.sink1015, align 4
  %702 = add i64 %701, 1
  store i64 %702, ptr %memberidx9.i.i381.sink1015, align 4
  br label %Lexer_advance.exit.i386

Lexer_advance.exit.i386:                          ; preds = %Lexer_advance.exit.i386.sink.split, %if.entry.i376
  %703 = load i64, ptr %memberidx.i.i366, align 4
  %704 = load ptr, ptr %memberidx1.i.i367, align 8
  %memberidx2.i30.i = getelementptr inbounds %string, ptr %704, i64 0, i32 2
  %705 = load i64, ptr %memberidx2.i30.i, align 4
  %.not854 = icmp slt i64 %703, %705
  br i1 %.not854, label %while.entry.i.preheader, label %while.end.i

while.entry.i.preheader:                          ; preds = %Lexer_advance.exit.i386
  %memberidx12.i98.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx10.i96.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %while.entry.i

else.i387:                                        ; preds = %Lexer_peek.exit.i372.else.i387_crit_edge, %if.entry36
  %.pre-phi984 = phi i64 [ %.pre983, %Lexer_peek.exit.i372.else.i387_crit_edge ], [ %685, %if.entry36 ]
  %706 = phi i64 [ %695, %Lexer_peek.exit.i372.else.i387_crit_edge ], [ %687, %if.entry36 ]
  %707 = phi ptr [ %694, %Lexer_peek.exit.i372.else.i387_crit_edge ], [ %686, %if.entry36 ]
  %708 = icmp slt i64 %.pre-phi984, %706
  br i1 %708, label %if.entry.i46.i, label %ifend41

if.entry.i46.i:                                   ; preds = %else.i387
  %709 = load ptr, ptr %707, align 8
  %memberidx4.i45.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %709, i64 0, i32 2
  %710 = load ptr, ptr %memberidx4.i45.i, align 8
  %711 = tail call i8 %710(ptr nonnull %707, i64 %.pre-phi984)
  %phi.cmp846 = icmp eq i8 %711, 47
  %712 = load i64, ptr %memberidx.i.i366, align 4
  %713 = load ptr, ptr %memberidx1.i.i367, align 8
  %memberidx2.i.i119.i = getelementptr inbounds %string, ptr %713, i64 0, i32 2
  %714 = load i64, ptr %memberidx2.i.i119.i, align 4
  br i1 %phi.cmp846, label %if.entry4.i, label %if.entry.i46.i.ifend41_crit_edge

if.entry.i46.i.ifend41_crit_edge:                 ; preds = %if.entry.i46.i
  %.pre985 = add i64 %712, 1
  br label %ifend41

while.entry.i:                                    ; preds = %while.entry.i.preheader, %Lexer_advance.exit100.i
  %715 = phi i64 [ %705, %while.entry.i.preheader ], [ %764, %Lexer_advance.exit100.i ]
  %716 = phi ptr [ %704, %while.entry.i.preheader ], [ %763, %Lexer_advance.exit100.i ]
  %717 = phi i64 [ %703, %while.entry.i.preheader ], [ %762, %Lexer_advance.exit100.i ]
  %718 = add nsw i64 %717, 1
  %719 = icmp slt i64 %718, %715
  br i1 %719, label %if.entry.i53.i, label %Lexer_peek.exit54.i

if.entry.i53.i:                                   ; preds = %while.entry.i
  %720 = load ptr, ptr %716, align 8
  %memberidx4.i52.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %720, i64 0, i32 2
  %721 = load ptr, ptr %memberidx4.i52.i, align 8
  %722 = tail call i8 %721(ptr nonnull %716, i64 %718)
  %.pre955 = load i64, ptr %memberidx.i.i366, align 4
  %.pre956 = load ptr, ptr %memberidx1.i.i367, align 8
  %memberidx2.i57.i.phi.trans.insert = getelementptr inbounds %string, ptr %.pre956, i64 0, i32 2
  %.pre957 = load i64, ptr %memberidx2.i57.i.phi.trans.insert, align 4
  br label %Lexer_peek.exit54.i

Lexer_peek.exit54.i:                              ; preds = %if.entry.i53.i, %while.entry.i
  %723 = phi i64 [ %.pre957, %if.entry.i53.i ], [ %715, %while.entry.i ]
  %724 = phi ptr [ %.pre956, %if.entry.i53.i ], [ %716, %while.entry.i ]
  %725 = phi i64 [ %.pre955, %if.entry.i53.i ], [ %717, %while.entry.i ]
  %common.ret.op.i51.i = phi i8 [ %722, %if.entry.i53.i ], [ 0, %while.entry.i ]
  %726 = add i64 %725, 2
  %727 = icmp slt i64 %726, %723
  br i1 %727, label %Lexer_peek.exit61.i, label %ifend3.i389

Lexer_peek.exit61.i:                              ; preds = %Lexer_peek.exit54.i
  %728 = icmp eq i8 %common.ret.op.i51.i, 42
  %729 = load ptr, ptr %724, align 8
  %memberidx4.i59.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %729, i64 0, i32 2
  %730 = load ptr, ptr %memberidx4.i59.i, align 8
  %731 = tail call i8 %730(ptr nonnull %724, i64 %726)
  %732 = icmp eq i8 %731, 47
  %733 = and i1 %728, %732
  %.pre961.pre = load i64, ptr %memberidx.i.i366, align 4
  %.pre962.pre = load ptr, ptr %memberidx1.i.i367, align 8
  %memberidx2.i.i64.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds %string, ptr %.pre962.pre, i64 0, i32 2
  %.pre963.pre = load i64, ptr %memberidx2.i.i64.i.phi.trans.insert.phi.trans.insert, align 4
  br i1 %733, label %while.end.i, label %ifend3.i389

while.end.i:                                      ; preds = %Lexer_advance.exit100.i, %Lexer_peek.exit61.i, %Lexer_advance.exit.i386
  %734 = phi i64 [ %705, %Lexer_advance.exit.i386 ], [ %.pre963.pre, %Lexer_peek.exit61.i ], [ %764, %Lexer_advance.exit100.i ]
  %735 = phi ptr [ %704, %Lexer_advance.exit.i386 ], [ %.pre962.pre, %Lexer_peek.exit61.i ], [ %763, %Lexer_advance.exit100.i ]
  %736 = phi i64 [ %703, %Lexer_advance.exit.i386 ], [ %.pre961.pre, %Lexer_peek.exit61.i ], [ %762, %Lexer_advance.exit100.i ]
  %.not857 = icmp slt i64 %736, %734
  br i1 %.not857, label %ifend.i68.i, label %Lexer_advance.exit74.i

ifend.i68.i:                                      ; preds = %while.end.i
  %737 = load ptr, ptr %735, align 8
  %memberidx2.i66.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %737, i64 0, i32 2
  %738 = load ptr, ptr %memberidx2.i66.i, align 8
  %739 = add nsw i64 %736, 1
  store i64 %739, ptr %memberidx.i.i366, align 4
  %740 = tail call i8 %738(ptr nonnull %735, i64 %739)
  store i8 %740, ptr %0, align 1
  %741 = icmp eq i8 %740, 10
  %memberidx9.i69.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %741, label %if.entry6.i71.i, label %Lexer_advance.exit74.i.sink.split

if.entry6.i71.i:                                  ; preds = %ifend.i68.i
  store i64 0, ptr %memberidx9.i69.i, align 4
  %memberidx10.i70.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit74.i.sink.split

Lexer_advance.exit74.i.sink.split:                ; preds = %ifend.i68.i, %if.entry6.i71.i
  %memberidx9.i69.i.sink1017 = phi ptr [ %memberidx10.i70.i, %if.entry6.i71.i ], [ %memberidx9.i69.i, %ifend.i68.i ]
  %742 = load i64, ptr %memberidx9.i69.i.sink1017, align 4
  %743 = add i64 %742, 1
  store i64 %743, ptr %memberidx9.i69.i.sink1017, align 4
  br label %Lexer_advance.exit74.i

Lexer_advance.exit74.i:                           ; preds = %Lexer_advance.exit74.i.sink.split, %while.end.i
  %744 = load i64, ptr %memberidx.i.i366, align 4
  %745 = load ptr, ptr %memberidx1.i.i367, align 8
  %memberidx2.i.i77.i = getelementptr inbounds %string, ptr %745, i64 0, i32 2
  %746 = load i64, ptr %memberidx2.i.i77.i, align 4
  %.not858 = icmp slt i64 %744, %746
  br i1 %.not858, label %ifend.i81.i, label %if.entry39

ifend.i81.i:                                      ; preds = %Lexer_advance.exit74.i
  %747 = load ptr, ptr %745, align 8
  %memberidx2.i79.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %747, i64 0, i32 2
  %748 = load ptr, ptr %memberidx2.i79.i, align 8
  %749 = add nsw i64 %744, 1
  store i64 %749, ptr %memberidx.i.i366, align 4
  %750 = tail call i8 %748(ptr nonnull %745, i64 %749)
  store i8 %750, ptr %0, align 1
  %751 = icmp eq i8 %750, 10
  %memberidx9.i82.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %751, label %if.entry6.i84.i, label %if.entry39.sink.split

if.entry6.i84.i:                                  ; preds = %ifend.i81.i
  store i64 0, ptr %memberidx9.i82.i, align 4
  %memberidx10.i83.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %if.entry39.sink.split

ifend3.i389:                                      ; preds = %Lexer_peek.exit61.i, %Lexer_peek.exit54.i
  %752 = phi i64 [ %723, %Lexer_peek.exit54.i ], [ %.pre963.pre, %Lexer_peek.exit61.i ]
  %753 = phi ptr [ %724, %Lexer_peek.exit54.i ], [ %.pre962.pre, %Lexer_peek.exit61.i ]
  %754 = phi i64 [ %725, %Lexer_peek.exit54.i ], [ %.pre961.pre, %Lexer_peek.exit61.i ]
  %.not855 = icmp slt i64 %754, %752
  br i1 %.not855, label %ifend.i94.i, label %Lexer_advance.exit100.i

ifend.i94.i:                                      ; preds = %ifend3.i389
  %755 = load ptr, ptr %753, align 8
  %memberidx2.i92.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %755, i64 0, i32 2
  %756 = load ptr, ptr %memberidx2.i92.i, align 8
  %757 = add nsw i64 %754, 1
  store i64 %757, ptr %memberidx.i.i366, align 4
  %758 = tail call i8 %756(ptr nonnull %753, i64 %757)
  store i8 %758, ptr %0, align 1
  %759 = icmp eq i8 %758, 10
  br i1 %759, label %if.entry6.i97.i, label %Lexer_advance.exit100.i.sink.split

if.entry6.i97.i:                                  ; preds = %ifend.i94.i
  store i64 0, ptr %memberidx12.i98.i, align 4
  br label %Lexer_advance.exit100.i.sink.split

Lexer_advance.exit100.i.sink.split:               ; preds = %ifend.i94.i, %if.entry6.i97.i
  %memberidx12.i98.i.sink1019 = phi ptr [ %memberidx10.i96.i, %if.entry6.i97.i ], [ %memberidx12.i98.i, %ifend.i94.i ]
  %760 = load i64, ptr %memberidx12.i98.i.sink1019, align 4
  %761 = add i64 %760, 1
  store i64 %761, ptr %memberidx12.i98.i.sink1019, align 4
  br label %Lexer_advance.exit100.i

Lexer_advance.exit100.i:                          ; preds = %Lexer_advance.exit100.i.sink.split, %ifend3.i389
  %762 = load i64, ptr %memberidx.i.i366, align 4
  %763 = load ptr, ptr %memberidx1.i.i367, align 8
  %memberidx2.i103.i = getelementptr inbounds %string, ptr %763, i64 0, i32 2
  %764 = load i64, ptr %memberidx2.i103.i, align 4
  %.not856 = icmp slt i64 %762, %764
  br i1 %.not856, label %while.entry.i, label %while.end.i

if.entry4.i:                                      ; preds = %if.entry.i46.i
  %.not850 = icmp slt i64 %712, %714
  br i1 %.not850, label %ifend.i123.i, label %Lexer_advance.exit129.i

ifend.i123.i:                                     ; preds = %if.entry4.i
  %765 = load ptr, ptr %713, align 8
  %memberidx2.i121.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %765, i64 0, i32 2
  %766 = load ptr, ptr %memberidx2.i121.i, align 8
  %767 = add nsw i64 %712, 1
  store i64 %767, ptr %memberidx.i.i366, align 4
  %768 = tail call i8 %766(ptr nonnull %713, i64 %767)
  store i8 %768, ptr %0, align 1
  %769 = icmp eq i8 %768, 10
  %memberidx9.i124.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %769, label %if.entry6.i126.i, label %Lexer_advance.exit129.i.sink.split

if.entry6.i126.i:                                 ; preds = %ifend.i123.i
  store i64 0, ptr %memberidx9.i124.i, align 4
  %memberidx10.i125.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit129.i.sink.split

Lexer_advance.exit129.i.sink.split:               ; preds = %ifend.i123.i, %if.entry6.i126.i
  %memberidx9.i124.i.sink1021 = phi ptr [ %memberidx10.i125.i, %if.entry6.i126.i ], [ %memberidx9.i124.i, %ifend.i123.i ]
  %770 = load i64, ptr %memberidx9.i124.i.sink1021, align 4
  %771 = add i64 %770, 1
  store i64 %771, ptr %memberidx9.i124.i.sink1021, align 4
  br label %Lexer_advance.exit129.i

Lexer_advance.exit129.i:                          ; preds = %Lexer_advance.exit129.i.sink.split, %if.entry4.i
  %772 = load i64, ptr %memberidx.i.i366, align 4
  %773 = add i64 %772, 1
  %774 = load ptr, ptr %memberidx1.i.i367, align 8
  %memberidx2.i132.i = getelementptr inbounds %string, ptr %774, i64 0, i32 2
  %775 = load i64, ptr %memberidx2.i132.i, align 4
  %776 = icmp slt i64 %773, %775
  br i1 %776, label %if.entry.i135.i, label %Lexer_peek.exit136.i

if.entry.i135.i:                                  ; preds = %Lexer_advance.exit129.i
  %777 = load ptr, ptr %774, align 8
  %memberidx4.i134.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %777, i64 0, i32 2
  %778 = load ptr, ptr %memberidx4.i134.i, align 8
  %779 = tail call i8 %778(ptr nonnull %774, i64 %773)
  %phi.cmp851 = icmp eq i8 %779, 10
  %.pre949 = load i64, ptr %memberidx.i.i366, align 4
  %.pre950 = load ptr, ptr %memberidx1.i.i367, align 8
  %memberidx2.i139.i.phi.trans.insert = getelementptr inbounds %string, ptr %.pre950, i64 0, i32 2
  %.pre951 = load i64, ptr %memberidx2.i139.i.phi.trans.insert, align 4
  br label %Lexer_peek.exit136.i

Lexer_peek.exit136.i:                             ; preds = %if.entry.i135.i, %Lexer_advance.exit129.i
  %780 = phi i64 [ %.pre951, %if.entry.i135.i ], [ %775, %Lexer_advance.exit129.i ]
  %781 = phi ptr [ %.pre950, %if.entry.i135.i ], [ %774, %Lexer_advance.exit129.i ]
  %782 = phi i64 [ %.pre949, %if.entry.i135.i ], [ %772, %Lexer_advance.exit129.i ]
  %common.ret.op.i133.i = phi i1 [ %phi.cmp851, %if.entry.i135.i ], [ false, %Lexer_advance.exit129.i ]
  %783 = icmp sge i64 %782, %780
  %784 = or i1 %common.ret.op.i133.i, %783
  br i1 %784, label %if.entry39, label %while.entry7.i.preheader

while.entry7.i.preheader:                         ; preds = %Lexer_peek.exit136.i
  %memberidx12.i114.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %memberidx10.i112.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %while.entry7.i

while.entry7.i:                                   ; preds = %while.entry7.i.preheader, %Lexer_peek.exit40.i
  %785 = phi i64 [ %780, %while.entry7.i.preheader ], [ %803, %Lexer_peek.exit40.i ]
  %786 = phi ptr [ %781, %while.entry7.i.preheader ], [ %804, %Lexer_peek.exit40.i ]
  %787 = phi i64 [ %782, %while.entry7.i.preheader ], [ %805, %Lexer_peek.exit40.i ]
  %.not852 = icmp slt i64 %787, %785
  br i1 %.not852, label %ifend.i110.i, label %Lexer_advance.exit116.i

ifend.i110.i:                                     ; preds = %while.entry7.i
  %788 = load ptr, ptr %786, align 8
  %memberidx2.i108.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %788, i64 0, i32 2
  %789 = load ptr, ptr %memberidx2.i108.i, align 8
  %790 = add nsw i64 %787, 1
  store i64 %790, ptr %memberidx.i.i366, align 4
  %791 = tail call i8 %789(ptr nonnull %786, i64 %790)
  store i8 %791, ptr %0, align 1
  %792 = icmp eq i8 %791, 10
  br i1 %792, label %if.entry6.i113.i, label %Lexer_advance.exit116.i.sink.split

if.entry6.i113.i:                                 ; preds = %ifend.i110.i
  store i64 0, ptr %memberidx12.i114.i, align 4
  br label %Lexer_advance.exit116.i.sink.split

Lexer_advance.exit116.i.sink.split:               ; preds = %ifend.i110.i, %if.entry6.i113.i
  %memberidx12.i114.i.sink1023 = phi ptr [ %memberidx10.i112.i, %if.entry6.i113.i ], [ %memberidx12.i114.i, %ifend.i110.i ]
  %793 = load i64, ptr %memberidx12.i114.i.sink1023, align 4
  %794 = add i64 %793, 1
  store i64 %794, ptr %memberidx12.i114.i.sink1023, align 4
  br label %Lexer_advance.exit116.i

Lexer_advance.exit116.i:                          ; preds = %Lexer_advance.exit116.i.sink.split, %while.entry7.i
  %795 = load i64, ptr %memberidx.i.i366, align 4
  %796 = add i64 %795, 1
  %797 = load ptr, ptr %memberidx1.i.i367, align 8
  %memberidx2.i36.i391 = getelementptr inbounds %string, ptr %797, i64 0, i32 2
  %798 = load i64, ptr %memberidx2.i36.i391, align 4
  %799 = icmp slt i64 %796, %798
  br i1 %799, label %if.entry.i39.i, label %Lexer_peek.exit40.i

if.entry.i39.i:                                   ; preds = %Lexer_advance.exit116.i
  %800 = load ptr, ptr %797, align 8
  %memberidx4.i38.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %800, i64 0, i32 2
  %801 = load ptr, ptr %memberidx4.i38.i, align 8
  %802 = tail call i8 %801(ptr nonnull %797, i64 %796)
  %.pre952 = load i64, ptr %memberidx.i.i366, align 4
  %.pre953 = load ptr, ptr %memberidx1.i.i367, align 8
  %memberidx2.i33.i.phi.trans.insert = getelementptr inbounds %string, ptr %.pre953, i64 0, i32 2
  %.pre954 = load i64, ptr %memberidx2.i33.i.phi.trans.insert, align 4
  br label %Lexer_peek.exit40.i

Lexer_peek.exit40.i:                              ; preds = %if.entry.i39.i, %Lexer_advance.exit116.i
  %803 = phi i64 [ %.pre954, %if.entry.i39.i ], [ %798, %Lexer_advance.exit116.i ]
  %804 = phi ptr [ %.pre953, %if.entry.i39.i ], [ %797, %Lexer_advance.exit116.i ]
  %805 = phi i64 [ %.pre952, %if.entry.i39.i ], [ %795, %Lexer_advance.exit116.i ]
  %common.ret.op.i37.i = phi i8 [ %802, %if.entry.i39.i ], [ 0, %Lexer_advance.exit116.i ]
  %806 = icmp eq i8 %common.ret.op.i37.i, 10
  %807 = icmp sge i64 %805, %803
  %808 = or i1 %806, %807
  br i1 %808, label %if.entry39, label %while.entry7.i

if.entry39.sink.split:                            ; preds = %ifend.i81.i, %if.entry6.i84.i
  %memberidx9.i82.i.sink1025 = phi ptr [ %memberidx10.i83.i, %if.entry6.i84.i ], [ %memberidx9.i82.i, %ifend.i81.i ]
  %809 = load i64, ptr %memberidx9.i82.i.sink1025, align 4
  %810 = add i64 %809, 1
  store i64 %810, ptr %memberidx9.i82.i.sink1025, align 4
  br label %if.entry39

if.entry39:                                       ; preds = %Lexer_peek.exit40.i, %if.entry39.sink.split, %Lexer_peek.exit136.i, %Lexer_advance.exit74.i
  %811 = load i64, ptr %memberidx.i.i366, align 4
  %812 = load ptr, ptr %memberidx1.i.i367, align 8
  %memberidx2.i.i394 = getelementptr inbounds %string, ptr %812, i64 0, i32 2
  %813 = load i64, ptr %memberidx2.i.i394, align 4
  %.not849 = icmp slt i64 %811, %813
  br i1 %.not849, label %ifend.i398, label %Lexer_advance.exit404

ifend.i398:                                       ; preds = %if.entry39
  %814 = load ptr, ptr %812, align 8
  %memberidx2.i396 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %814, i64 0, i32 2
  %815 = load ptr, ptr %memberidx2.i396, align 8
  %816 = add nsw i64 %811, 1
  store i64 %816, ptr %memberidx.i.i366, align 4
  %817 = tail call i8 %815(ptr nonnull %812, i64 %816)
  store i8 %817, ptr %0, align 1
  %818 = icmp eq i8 %817, 10
  %memberidx9.i399 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %818, label %if.entry6.i401, label %Lexer_advance.exit404.sink.split

if.entry6.i401:                                   ; preds = %ifend.i398
  store i64 0, ptr %memberidx9.i399, align 4
  %memberidx10.i400 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit404.sink.split

Lexer_advance.exit404.sink.split:                 ; preds = %ifend.i398, %if.entry6.i401
  %memberidx10.i400.sink1027 = phi ptr [ %memberidx10.i400, %if.entry6.i401 ], [ %memberidx9.i399, %ifend.i398 ]
  %819 = load i64, ptr %memberidx10.i400.sink1027, align 4
  %820 = add i64 %819, 1
  store i64 %820, ptr %memberidx10.i400.sink1027, align 4
  br label %Lexer_advance.exit404

Lexer_advance.exit404:                            ; preds = %Lexer_advance.exit404.sink.split, %if.entry39
  %821 = tail call fastcc ptr @Lexer_lex_token(ptr nonnull %0)
  br label %common.ret

ifend41:                                          ; preds = %if.entry.i46.i.ifend41_crit_edge, %else.i387
  %.pre-phi986 = phi i64 [ %.pre985, %if.entry.i46.i.ifend41_crit_edge ], [ %.pre-phi984, %else.i387 ]
  %822 = phi i64 [ %714, %if.entry.i46.i.ifend41_crit_edge ], [ %706, %else.i387 ]
  %823 = phi ptr [ %713, %if.entry.i46.i.ifend41_crit_edge ], [ %707, %else.i387 ]
  %824 = icmp slt i64 %.pre-phi986, %822
  br i1 %824, label %if.entry.i.i409, label %ifend.i441

if.entry.i.i409:                                  ; preds = %ifend41
  %825 = load ptr, ptr %823, align 8
  %memberidx4.i.i408 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %825, i64 0, i32 2
  %826 = load ptr, ptr %memberidx4.i.i408, align 8
  %827 = tail call i8 %826(ptr nonnull %823, i64 %.pre-phi986)
  %phi.cmp847 = icmp eq i8 %827, 61
  br i1 %phi.cmp847, label %if.entry.i416, label %ifend.i441

if.entry.i416:                                    ; preds = %if.entry.i.i409
  %828 = load i64, ptr %memberidx.i.i366, align 4
  %829 = load ptr, ptr %memberidx1.i.i367, align 8
  %memberidx2.i.i.i415 = getelementptr inbounds %string, ptr %829, i64 0, i32 2
  %830 = load i64, ptr %memberidx2.i.i.i415, align 4
  %.not848 = icmp slt i64 %828, %830
  br i1 %.not848, label %ifend.i.i420, label %Lexer_advance.exit.i433

ifend.i.i420:                                     ; preds = %if.entry.i416
  %831 = load ptr, ptr %829, align 8
  %memberidx2.i5.i418 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %831, i64 0, i32 2
  %832 = load ptr, ptr %memberidx2.i5.i418, align 8
  %833 = add nsw i64 %828, 1
  store i64 %833, ptr %memberidx.i.i366, align 4
  %834 = tail call i8 %832(ptr nonnull %829, i64 %833)
  store i8 %834, ptr %0, align 1
  %835 = icmp eq i8 %834, 10
  %memberidx9.i.i421 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %835, label %if.entry6.i.i423, label %Lexer_advance.exit.i433.sink.split

if.entry6.i.i423:                                 ; preds = %ifend.i.i420
  store i64 0, ptr %memberidx9.i.i421, align 4
  %memberidx10.i.i422 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i433.sink.split

Lexer_advance.exit.i433.sink.split:               ; preds = %ifend.i.i420, %if.entry6.i.i423
  %memberidx9.i.i421.sink1029 = phi ptr [ %memberidx10.i.i422, %if.entry6.i.i423 ], [ %memberidx9.i.i421, %ifend.i.i420 ]
  %836 = load i64, ptr %memberidx9.i.i421.sink1029, align 4
  %837 = add i64 %836, 1
  store i64 %837, ptr %memberidx9.i.i421.sink1029, align 4
  br label %Lexer_advance.exit.i433

Lexer_advance.exit.i433:                          ; preds = %Lexer_advance.exit.i433.sink.split, %if.entry.i416
  %838 = tail call ptr @malloc(i32 16)
  %839 = tail call ptr @malloc(i32 32)
  %840 = load i64, ptr %memberidx.i.i366, align 4
  %841 = add i64 %840, -1
  %842 = add i64 %840, 1
  %memberidx2.i7.i427 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %843 = load i64, ptr %memberidx2.i7.i427, align 4
  %844 = add i64 %843, -2
  %memberidx3.i8.i428 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %845 = load i64, ptr %memberidx3.i8.i428, align 4
  store i64 %841, ptr %839, align 4
  %memberidx1.i.i9.i429 = getelementptr inbounds %FloRange, ptr %839, i64 0, i32 1
  store i64 %842, ptr %memberidx1.i.i9.i429, align 4
  %memberidx2.i.i10.i430 = getelementptr inbounds %FloRange, ptr %839, i64 0, i32 2
  store i64 %844, ptr %memberidx2.i.i10.i430, align 4
  %memberidx3.i.i.i431 = getelementptr inbounds %FloRange, ptr %839, i64 0, i32 3
  store i64 %845, ptr %memberidx3.i.i.i431, align 4
  store i64 13, ptr %838, align 4
  %memberidx1.i11.i432 = getelementptr inbounds %Token, ptr %838, i64 0, i32 1
  store ptr %839, ptr %memberidx1.i11.i432, align 8
  br label %common.ret

ifend.i441:                                       ; preds = %ifend41, %if.entry.i.i409
  %846 = tail call ptr @malloc(i32 16)
  %847 = tail call ptr @malloc(i32 32)
  %848 = load i64, ptr %memberidx.i.i366, align 4
  %849 = add i64 %848, 1
  %memberidx2.i14.i435 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %850 = load i64, ptr %memberidx2.i14.i435, align 4
  %851 = add i64 %850, -1
  %memberidx3.i15.i436 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %852 = load i64, ptr %memberidx3.i15.i436, align 4
  store i64 %848, ptr %847, align 4
  %memberidx1.i.i16.i437 = getelementptr inbounds %FloRange, ptr %847, i64 0, i32 1
  store i64 %849, ptr %memberidx1.i.i16.i437, align 4
  %memberidx2.i.i17.i438 = getelementptr inbounds %FloRange, ptr %847, i64 0, i32 2
  store i64 %851, ptr %memberidx2.i.i17.i438, align 4
  %memberidx3.i.i18.i439 = getelementptr inbounds %FloRange, ptr %847, i64 0, i32 3
  store i64 %852, ptr %memberidx3.i.i18.i439, align 4
  store i64 7, ptr %846, align 4
  %memberidx1.i12.i440 = getelementptr inbounds %Token, ptr %846, i64 0, i32 1
  store ptr %847, ptr %memberidx1.i12.i440, align 8
  br label %common.ret

if.entry42:                                       ; preds = %ifend11
  %853 = tail call ptr @malloc(i32 16)
  %854 = tail call ptr @malloc(i32 32)
  %memberidx.i442 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %855 = load i64, ptr %memberidx.i442, align 4
  %856 = add i64 %855, 1
  %memberidx2.i443 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %857 = load i64, ptr %memberidx2.i443, align 4
  %858 = add i64 %857, -1
  %memberidx3.i444 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %859 = load i64, ptr %memberidx3.i444, align 4
  store i64 %855, ptr %854, align 4
  %memberidx1.i.i445 = getelementptr inbounds %FloRange, ptr %854, i64 0, i32 1
  store i64 %856, ptr %memberidx1.i.i445, align 4
  %memberidx2.i.i446 = getelementptr inbounds %FloRange, ptr %854, i64 0, i32 2
  store i64 %858, ptr %memberidx2.i.i446, align 4
  %memberidx3.i.i447 = getelementptr inbounds %FloRange, ptr %854, i64 0, i32 3
  store i64 %859, ptr %memberidx3.i.i447, align 4
  store i64 23, ptr %853, align 4
  %memberidx1.i448 = getelementptr inbounds %Token, ptr %853, i64 0, i32 1
  store ptr %854, ptr %memberidx1.i448, align 8
  br label %common.ret

if.entry45:                                       ; preds = %ifend11
  %860 = tail call ptr @malloc(i32 16)
  %861 = tail call ptr @malloc(i32 32)
  %memberidx.i449 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %862 = load i64, ptr %memberidx.i449, align 4
  %863 = add i64 %862, 1
  %memberidx2.i450 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %864 = load i64, ptr %memberidx2.i450, align 4
  %865 = add i64 %864, -1
  %memberidx3.i451 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %866 = load i64, ptr %memberidx3.i451, align 4
  store i64 %862, ptr %861, align 4
  %memberidx1.i.i452 = getelementptr inbounds %FloRange, ptr %861, i64 0, i32 1
  store i64 %863, ptr %memberidx1.i.i452, align 4
  %memberidx2.i.i453 = getelementptr inbounds %FloRange, ptr %861, i64 0, i32 2
  store i64 %865, ptr %memberidx2.i.i453, align 4
  %memberidx3.i.i454 = getelementptr inbounds %FloRange, ptr %861, i64 0, i32 3
  store i64 %866, ptr %memberidx3.i.i454, align 4
  store i64 24, ptr %860, align 4
  %memberidx1.i455 = getelementptr inbounds %Token, ptr %860, i64 0, i32 1
  store ptr %861, ptr %memberidx1.i455, align 8
  br label %common.ret

if.entry48:                                       ; preds = %ifend11
  %867 = tail call ptr @malloc(i32 16)
  %868 = tail call ptr @malloc(i32 32)
  %memberidx.i456 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %869 = load i64, ptr %memberidx.i456, align 4
  %870 = add i64 %869, 1
  %memberidx2.i457 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %871 = load i64, ptr %memberidx2.i457, align 4
  %872 = add i64 %871, -1
  %memberidx3.i458 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %873 = load i64, ptr %memberidx3.i458, align 4
  store i64 %869, ptr %868, align 4
  %memberidx1.i.i459 = getelementptr inbounds %FloRange, ptr %868, i64 0, i32 1
  store i64 %870, ptr %memberidx1.i.i459, align 4
  %memberidx2.i.i460 = getelementptr inbounds %FloRange, ptr %868, i64 0, i32 2
  store i64 %872, ptr %memberidx2.i.i460, align 4
  %memberidx3.i.i461 = getelementptr inbounds %FloRange, ptr %868, i64 0, i32 3
  store i64 %873, ptr %memberidx3.i.i461, align 4
  store i64 25, ptr %867, align 4
  %memberidx1.i462 = getelementptr inbounds %Token, ptr %867, i64 0, i32 1
  store ptr %868, ptr %memberidx1.i462, align 8
  br label %common.ret

if.entry51:                                       ; preds = %ifend11
  %874 = tail call ptr @malloc(i32 16)
  %875 = tail call ptr @malloc(i32 32)
  %memberidx.i463 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %876 = load i64, ptr %memberidx.i463, align 4
  %877 = add i64 %876, 1
  %memberidx2.i464 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %878 = load i64, ptr %memberidx2.i464, align 4
  %879 = add i64 %878, -1
  %memberidx3.i465 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %880 = load i64, ptr %memberidx3.i465, align 4
  store i64 %876, ptr %875, align 4
  %memberidx1.i.i466 = getelementptr inbounds %FloRange, ptr %875, i64 0, i32 1
  store i64 %877, ptr %memberidx1.i.i466, align 4
  %memberidx2.i.i467 = getelementptr inbounds %FloRange, ptr %875, i64 0, i32 2
  store i64 %879, ptr %memberidx2.i.i467, align 4
  %memberidx3.i.i468 = getelementptr inbounds %FloRange, ptr %875, i64 0, i32 3
  store i64 %880, ptr %memberidx3.i.i468, align 4
  store i64 26, ptr %874, align 4
  %memberidx1.i469 = getelementptr inbounds %Token, ptr %874, i64 0, i32 1
  store ptr %875, ptr %memberidx1.i469, align 8
  br label %common.ret

if.entry54:                                       ; preds = %ifend11
  %881 = tail call ptr @malloc(i32 16)
  %882 = tail call ptr @malloc(i32 32)
  %memberidx.i470 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %883 = load i64, ptr %memberidx.i470, align 4
  %884 = add i64 %883, 1
  %memberidx2.i471 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %885 = load i64, ptr %memberidx2.i471, align 4
  %886 = add i64 %885, -1
  %memberidx3.i472 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %887 = load i64, ptr %memberidx3.i472, align 4
  store i64 %883, ptr %882, align 4
  %memberidx1.i.i473 = getelementptr inbounds %FloRange, ptr %882, i64 0, i32 1
  store i64 %884, ptr %memberidx1.i.i473, align 4
  %memberidx2.i.i474 = getelementptr inbounds %FloRange, ptr %882, i64 0, i32 2
  store i64 %886, ptr %memberidx2.i.i474, align 4
  %memberidx3.i.i475 = getelementptr inbounds %FloRange, ptr %882, i64 0, i32 3
  store i64 %887, ptr %memberidx3.i.i475, align 4
  store i64 27, ptr %881, align 4
  %memberidx1.i476 = getelementptr inbounds %Token, ptr %881, i64 0, i32 1
  store ptr %882, ptr %memberidx1.i476, align 8
  br label %common.ret

if.entry57:                                       ; preds = %ifend11
  %888 = tail call ptr @malloc(i32 16)
  %889 = tail call ptr @malloc(i32 32)
  %memberidx.i477 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %890 = load i64, ptr %memberidx.i477, align 4
  %891 = add i64 %890, 1
  %memberidx2.i478 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %892 = load i64, ptr %memberidx2.i478, align 4
  %893 = add i64 %892, -1
  %memberidx3.i479 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %894 = load i64, ptr %memberidx3.i479, align 4
  store i64 %890, ptr %889, align 4
  %memberidx1.i.i480 = getelementptr inbounds %FloRange, ptr %889, i64 0, i32 1
  store i64 %891, ptr %memberidx1.i.i480, align 4
  %memberidx2.i.i481 = getelementptr inbounds %FloRange, ptr %889, i64 0, i32 2
  store i64 %893, ptr %memberidx2.i.i481, align 4
  %memberidx3.i.i482 = getelementptr inbounds %FloRange, ptr %889, i64 0, i32 3
  store i64 %894, ptr %memberidx3.i.i482, align 4
  store i64 28, ptr %888, align 4
  %memberidx1.i483 = getelementptr inbounds %Token, ptr %888, i64 0, i32 1
  store ptr %889, ptr %memberidx1.i483, align 8
  br label %common.ret

if.entry60:                                       ; preds = %ifend11, %ifend11
  %895 = tail call ptr @malloc(i32 16)
  %896 = tail call ptr @malloc(i32 32)
  %memberidx.i484 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %897 = load i64, ptr %memberidx.i484, align 4
  %898 = add i64 %897, 1
  %memberidx2.i485 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %899 = load i64, ptr %memberidx2.i485, align 4
  %900 = add i64 %899, -1
  %memberidx3.i486 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %901 = load i64, ptr %memberidx3.i486, align 4
  store i64 %897, ptr %896, align 4
  %memberidx1.i.i487 = getelementptr inbounds %FloRange, ptr %896, i64 0, i32 1
  store i64 %898, ptr %memberidx1.i.i487, align 4
  %memberidx2.i.i488 = getelementptr inbounds %FloRange, ptr %896, i64 0, i32 2
  store i64 %900, ptr %memberidx2.i.i488, align 4
  %memberidx3.i.i489 = getelementptr inbounds %FloRange, ptr %896, i64 0, i32 3
  store i64 %901, ptr %memberidx3.i.i489, align 4
  store i64 31, ptr %895, align 4
  %memberidx1.i490 = getelementptr inbounds %Token, ptr %895, i64 0, i32 1
  store ptr %896, ptr %memberidx1.i490, align 8
  br label %common.ret

if.entry63:                                       ; preds = %ifend11
  %memberidx.i.i.i491 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %902 = load i64, ptr %memberidx.i.i.i491, align 4
  %memberidx1.i.i.i492 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %903 = load ptr, ptr %memberidx1.i.i.i492, align 8
  %memberidx2.i.i.i493 = getelementptr inbounds %string, ptr %903, i64 0, i32 2
  %904 = load i64, ptr %memberidx2.i.i.i493, align 4
  %.not843 = icmp slt i64 %902, %904
  br i1 %.not843, label %ifend.i.i497, label %ifend.i508

ifend.i.i497:                                     ; preds = %if.entry63
  %905 = load ptr, ptr %903, align 8
  %memberidx2.i.i495 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %905, i64 0, i32 2
  %906 = load ptr, ptr %memberidx2.i.i495, align 8
  %907 = add nsw i64 %902, 1
  store i64 %907, ptr %memberidx.i.i.i491, align 4
  %908 = tail call i8 %906(ptr nonnull %903, i64 %907)
  store i8 %908, ptr %0, align 1
  %909 = icmp eq i8 %908, 10
  %memberidx9.i.i498 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %909, label %if.entry6.i.i500, label %Lexer_advance.exit.i503

if.entry6.i.i500:                                 ; preds = %ifend.i.i497
  store i64 0, ptr %memberidx9.i.i498, align 4
  %memberidx10.i.i499 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %910 = load i64, ptr %memberidx10.i.i499, align 4
  %911 = add i64 %910, 1
  store i64 %911, ptr %memberidx10.i.i499, align 4
  br label %ifend.i508

Lexer_advance.exit.i503:                          ; preds = %ifend.i.i497
  %912 = load i64, ptr %memberidx9.i.i498, align 4
  %913 = add i64 %912, 1
  store i64 %913, ptr %memberidx9.i.i498, align 4
  %914 = icmp eq i8 %908, 92
  br i1 %914, label %if.entry.i504, label %ifend.i508

if.entry.i504:                                    ; preds = %Lexer_advance.exit.i503
  %915 = load i64, ptr %memberidx.i.i.i491, align 4
  %916 = load ptr, ptr %memberidx1.i.i.i492, align 8
  %memberidx2.i.i12.i = getelementptr inbounds %string, ptr %916, i64 0, i32 2
  %917 = load i64, ptr %memberidx2.i.i12.i, align 4
  %.not845 = icmp slt i64 %915, %917
  br i1 %.not845, label %ifend.i16.i, label %ifend27.i.i

ifend.i16.i:                                      ; preds = %if.entry.i504
  %918 = load ptr, ptr %916, align 8
  %memberidx2.i14.i505 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %918, i64 0, i32 2
  %919 = load ptr, ptr %memberidx2.i14.i505, align 8
  %920 = add nsw i64 %915, 1
  store i64 %920, ptr %memberidx.i.i.i491, align 4
  %921 = tail call i8 %919(ptr nonnull %916, i64 %920)
  store i8 %921, ptr %0, align 1
  %922 = icmp eq i8 %921, 10
  %memberidx9.i17.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %922, label %if.entry6.i19.i, label %Lexer_advance.exit22.i

if.entry6.i19.i:                                  ; preds = %ifend.i16.i
  store i64 0, ptr %memberidx9.i17.i, align 4
  %memberidx10.i18.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %923 = load i64, ptr %memberidx10.i18.i, align 4
  %924 = add i64 %923, 1
  store i64 %924, ptr %memberidx10.i18.i, align 4
  br label %ifend27.i.i

Lexer_advance.exit22.i:                           ; preds = %ifend.i16.i
  %925 = load i64, ptr %memberidx9.i17.i, align 4
  %926 = add i64 %925, 1
  store i64 %926, ptr %memberidx9.i17.i, align 4
  switch i8 %921, label %ifend27.i.i [
    i8 97, label %ifend.i508
    i8 98, label %get_escape_char.exit.i.fold.split
    i8 116, label %get_escape_char.exit.i.fold.split874
    i8 102, label %get_escape_char.exit.i.fold.split875
    i8 110, label %get_escape_char.exit.i.fold.split876
    i8 114, label %get_escape_char.exit.i.fold.split877
    i8 118, label %get_escape_char.exit.i.fold.split878
    i8 48, label %get_escape_char.exit.i.fold.split879
    i8 39, label %get_escape_char.exit.i.fold.split880
    i8 34, label %get_escape_char.exit.i.fold.split881
  ]

ifend27.i.i:                                      ; preds = %if.entry.i504, %if.entry6.i19.i, %Lexer_advance.exit22.i
  %927 = phi i8 [ %921, %Lexer_advance.exit22.i ], [ 92, %if.entry.i504 ], [ 10, %if.entry6.i19.i ]
  br label %ifend.i508

get_escape_char.exit.i.fold.split:                ; preds = %Lexer_advance.exit22.i
  br label %ifend.i508

get_escape_char.exit.i.fold.split874:             ; preds = %Lexer_advance.exit22.i
  br label %ifend.i508

get_escape_char.exit.i.fold.split875:             ; preds = %Lexer_advance.exit22.i
  br label %ifend.i508

get_escape_char.exit.i.fold.split876:             ; preds = %Lexer_advance.exit22.i
  br label %ifend.i508

get_escape_char.exit.i.fold.split877:             ; preds = %Lexer_advance.exit22.i
  br label %ifend.i508

get_escape_char.exit.i.fold.split878:             ; preds = %Lexer_advance.exit22.i
  br label %ifend.i508

get_escape_char.exit.i.fold.split879:             ; preds = %Lexer_advance.exit22.i
  br label %ifend.i508

get_escape_char.exit.i.fold.split880:             ; preds = %Lexer_advance.exit22.i
  br label %ifend.i508

get_escape_char.exit.i.fold.split881:             ; preds = %Lexer_advance.exit22.i
  br label %ifend.i508

ifend.i508:                                       ; preds = %if.entry63, %if.entry6.i.i500, %ifend27.i.i, %get_escape_char.exit.i.fold.split, %get_escape_char.exit.i.fold.split874, %get_escape_char.exit.i.fold.split875, %get_escape_char.exit.i.fold.split876, %get_escape_char.exit.i.fold.split877, %get_escape_char.exit.i.fold.split878, %get_escape_char.exit.i.fold.split879, %get_escape_char.exit.i.fold.split880, %get_escape_char.exit.i.fold.split881, %Lexer_advance.exit22.i, %Lexer_advance.exit.i503
  %length.0.i = phi i64 [ 3, %Lexer_advance.exit.i503 ], [ 5, %Lexer_advance.exit22.i ], [ 5, %get_escape_char.exit.i.fold.split881 ], [ 5, %get_escape_char.exit.i.fold.split880 ], [ 5, %get_escape_char.exit.i.fold.split879 ], [ 5, %get_escape_char.exit.i.fold.split878 ], [ 5, %get_escape_char.exit.i.fold.split877 ], [ 5, %get_escape_char.exit.i.fold.split876 ], [ 5, %get_escape_char.exit.i.fold.split875 ], [ 5, %get_escape_char.exit.i.fold.split874 ], [ 5, %get_escape_char.exit.i.fold.split ], [ 5, %ifend27.i.i ], [ 3, %if.entry6.i.i500 ], [ 3, %if.entry63 ]
  %value.0.i = phi i8 [ %908, %Lexer_advance.exit.i503 ], [ 7, %Lexer_advance.exit22.i ], [ %921, %get_escape_char.exit.i.fold.split881 ], [ %921, %get_escape_char.exit.i.fold.split880 ], [ 0, %get_escape_char.exit.i.fold.split879 ], [ 11, %get_escape_char.exit.i.fold.split878 ], [ 13, %get_escape_char.exit.i.fold.split877 ], [ 10, %get_escape_char.exit.i.fold.split876 ], [ 12, %get_escape_char.exit.i.fold.split875 ], [ 9, %get_escape_char.exit.i.fold.split874 ], [ 8, %get_escape_char.exit.i.fold.split ], [ %927, %ifend27.i.i ], [ 10, %if.entry6.i.i500 ], [ 39, %if.entry63 ]
  %928 = load i64, ptr %memberidx.i.i.i491, align 4
  %929 = load ptr, ptr %memberidx1.i.i.i492, align 8
  %memberidx2.i.i32.i = getelementptr inbounds %string, ptr %929, i64 0, i32 2
  %930 = load i64, ptr %memberidx2.i.i32.i, align 4
  %.not844 = icmp slt i64 %928, %930
  br i1 %.not844, label %ifend.i36.i, label %Lexer_char_token.exit

ifend.i36.i:                                      ; preds = %ifend.i508
  %931 = load ptr, ptr %929, align 8
  %memberidx2.i34.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %931, i64 0, i32 2
  %932 = load ptr, ptr %memberidx2.i34.i, align 8
  %933 = add nsw i64 %928, 1
  store i64 %933, ptr %memberidx.i.i.i491, align 4
  %934 = tail call i8 %932(ptr nonnull %929, i64 %933)
  store i8 %934, ptr %0, align 1
  %935 = icmp eq i8 %934, 10
  %memberidx9.i37.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %935, label %if.entry6.i39.i, label %Lexer_char_token.exit.sink.split

if.entry6.i39.i:                                  ; preds = %ifend.i36.i
  store i64 0, ptr %memberidx9.i37.i, align 4
  %memberidx10.i38.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_char_token.exit.sink.split

Lexer_char_token.exit.sink.split:                 ; preds = %ifend.i36.i, %if.entry6.i39.i
  %memberidx10.i38.i.sink1031 = phi ptr [ %memberidx10.i38.i, %if.entry6.i39.i ], [ %memberidx9.i37.i, %ifend.i36.i ]
  %936 = load i64, ptr %memberidx10.i38.i.sink1031, align 4
  %937 = add i64 %936, 1
  store i64 %937, ptr %memberidx10.i38.i.sink1031, align 4
  br label %Lexer_char_token.exit

Lexer_char_token.exit:                            ; preds = %Lexer_char_token.exit.sink.split, %ifend.i508
  %938 = tail call ptr @malloc(i32 17)
  %939 = tail call ptr @malloc(i32 32)
  %940 = load i64, ptr %memberidx.i.i.i491, align 4
  %941 = sub nsw i64 1, %length.0.i
  %942 = add i64 %941, %940
  %943 = add i64 %940, 1
  %memberidx2.i26.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %944 = load i64, ptr %memberidx2.i26.i, align 4
  %945 = sub i64 %944, %length.0.i
  %memberidx3.i27.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %946 = load i64, ptr %memberidx3.i27.i, align 4
  store i64 %942, ptr %939, align 4
  %memberidx1.i.i28.i = getelementptr inbounds %FloRange, ptr %939, i64 0, i32 1
  store i64 %943, ptr %memberidx1.i.i28.i, align 4
  %memberidx2.i.i29.i = getelementptr inbounds %FloRange, ptr %939, i64 0, i32 2
  store i64 %945, ptr %memberidx2.i.i29.i, align 4
  %memberidx3.i.i.i510 = getelementptr inbounds %FloRange, ptr %939, i64 0, i32 3
  store i64 %946, ptr %memberidx3.i.i.i510, align 4
  store i64 33, ptr %938, align 4
  %memberidx1.i.i24.i = getelementptr inbounds %Token, ptr %938, i64 0, i32 1
  store ptr %939, ptr %memberidx1.i.i24.i, align 8
  %memberidx.i.i511 = getelementptr inbounds %CharToken, ptr %938, i64 0, i32 2
  store i8 %value.0.i, ptr %memberidx.i.i511, align 1
  br label %common.ret

if.entry66:                                       ; preds = %ifend11
  %947 = tail call ptr @malloc(i32 16)
  %948 = tail call ptr @malloc(i32 32)
  %memberidx.i512 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %949 = load i64, ptr %memberidx.i512, align 4
  %950 = add i64 %949, 1
  %memberidx2.i513 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %951 = load i64, ptr %memberidx2.i513, align 4
  %952 = add i64 %951, -1
  %memberidx3.i514 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %953 = load i64, ptr %memberidx3.i514, align 4
  store i64 %949, ptr %948, align 4
  %memberidx1.i.i515 = getelementptr inbounds %FloRange, ptr %948, i64 0, i32 1
  store i64 %950, ptr %memberidx1.i.i515, align 4
  %memberidx2.i.i516 = getelementptr inbounds %FloRange, ptr %948, i64 0, i32 2
  store i64 %952, ptr %memberidx2.i.i516, align 4
  %memberidx3.i.i517 = getelementptr inbounds %FloRange, ptr %948, i64 0, i32 3
  store i64 %953, ptr %memberidx3.i.i517, align 4
  store i64 34, ptr %947, align 4
  %memberidx1.i518 = getelementptr inbounds %Token, ptr %947, i64 0, i32 1
  store ptr %948, ptr %memberidx1.i518, align 8
  br label %common.ret

if.entry69:                                       ; preds = %ifend11
  %954 = tail call ptr @malloc(i32 16)
  %955 = tail call ptr @malloc(i32 32)
  %memberidx.i519 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %956 = load i64, ptr %memberidx.i519, align 4
  %957 = add i64 %956, 1
  %memberidx2.i520 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %958 = load i64, ptr %memberidx2.i520, align 4
  %959 = add i64 %958, -1
  %memberidx3.i521 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %960 = load i64, ptr %memberidx3.i521, align 4
  store i64 %956, ptr %955, align 4
  %memberidx1.i.i522 = getelementptr inbounds %FloRange, ptr %955, i64 0, i32 1
  store i64 %957, ptr %memberidx1.i.i522, align 4
  %memberidx2.i.i523 = getelementptr inbounds %FloRange, ptr %955, i64 0, i32 2
  store i64 %959, ptr %memberidx2.i.i523, align 4
  %memberidx3.i.i524 = getelementptr inbounds %FloRange, ptr %955, i64 0, i32 3
  store i64 %960, ptr %memberidx3.i.i524, align 4
  store i64 35, ptr %954, align 4
  %memberidx1.i525 = getelementptr inbounds %Token, ptr %954, i64 0, i32 1
  store ptr %955, ptr %memberidx1.i525, align 8
  br label %common.ret

if.entry72:                                       ; preds = %ifend11
  %memberidx.i.i526 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %961 = load i64, ptr %memberidx.i.i526, align 4
  %962 = add i64 %961, 1
  %memberidx1.i.i527 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %963 = load ptr, ptr %memberidx1.i.i527, align 8
  %memberidx2.i.i528 = getelementptr inbounds %string, ptr %963, i64 0, i32 2
  %964 = load i64, ptr %memberidx2.i.i528, align 4
  %965 = icmp slt i64 %962, %964
  br i1 %965, label %if.entry.i.i530, label %else.i558

if.entry.i.i530:                                  ; preds = %if.entry72
  %966 = load ptr, ptr %963, align 8
  %memberidx4.i.i529 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %966, i64 0, i32 2
  %967 = load ptr, ptr %memberidx4.i.i529, align 8
  %968 = tail call i8 %967(ptr nonnull %963, i64 %962)
  %phi.cmp839 = icmp eq i8 %968, 61
  %969 = load i64, ptr %memberidx.i.i526, align 4
  %970 = load ptr, ptr %memberidx1.i.i527, align 8
  %memberidx2.i.i.i536 = getelementptr inbounds %string, ptr %970, i64 0, i32 2
  %971 = load i64, ptr %memberidx2.i.i.i536, align 4
  br i1 %phi.cmp839, label %if.entry.i537, label %if.entry.i.i530.else.i558_crit_edge

if.entry.i.i530.else.i558_crit_edge:              ; preds = %if.entry.i.i530
  %.pre987 = add i64 %969, 1
  br label %else.i558

if.entry.i537:                                    ; preds = %if.entry.i.i530
  %.not842 = icmp slt i64 %969, %971
  br i1 %.not842, label %ifend.i.i541, label %Lexer_advance.exit.i554

ifend.i.i541:                                     ; preds = %if.entry.i537
  %972 = load ptr, ptr %970, align 8
  %memberidx2.i11.i539 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %972, i64 0, i32 2
  %973 = load ptr, ptr %memberidx2.i11.i539, align 8
  %974 = add nsw i64 %969, 1
  store i64 %974, ptr %memberidx.i.i526, align 4
  %975 = tail call i8 %973(ptr nonnull %970, i64 %974)
  store i8 %975, ptr %0, align 1
  %976 = icmp eq i8 %975, 10
  %memberidx9.i.i542 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %976, label %if.entry6.i.i544, label %Lexer_advance.exit.i554.sink.split

if.entry6.i.i544:                                 ; preds = %ifend.i.i541
  store i64 0, ptr %memberidx9.i.i542, align 4
  %memberidx10.i.i543 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i554.sink.split

Lexer_advance.exit.i554.sink.split:               ; preds = %ifend.i.i541, %if.entry6.i.i544
  %memberidx9.i.i542.sink1033 = phi ptr [ %memberidx10.i.i543, %if.entry6.i.i544 ], [ %memberidx9.i.i542, %ifend.i.i541 ]
  %977 = load i64, ptr %memberidx9.i.i542.sink1033, align 4
  %978 = add i64 %977, 1
  store i64 %978, ptr %memberidx9.i.i542.sink1033, align 4
  br label %Lexer_advance.exit.i554

Lexer_advance.exit.i554:                          ; preds = %Lexer_advance.exit.i554.sink.split, %if.entry.i537
  %979 = tail call ptr @malloc(i32 16)
  %980 = tail call ptr @malloc(i32 32)
  %981 = load i64, ptr %memberidx.i.i526, align 4
  %982 = add i64 %981, -1
  %983 = add i64 %981, 1
  %memberidx2.i13.i548 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %984 = load i64, ptr %memberidx2.i13.i548, align 4
  %985 = add i64 %984, -2
  %memberidx3.i14.i549 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %986 = load i64, ptr %memberidx3.i14.i549, align 4
  store i64 %982, ptr %980, align 4
  %memberidx1.i.i15.i550 = getelementptr inbounds %FloRange, ptr %980, i64 0, i32 1
  store i64 %983, ptr %memberidx1.i.i15.i550, align 4
  %memberidx2.i.i16.i551 = getelementptr inbounds %FloRange, ptr %980, i64 0, i32 2
  store i64 %985, ptr %memberidx2.i.i16.i551, align 4
  %memberidx3.i.i.i552 = getelementptr inbounds %FloRange, ptr %980, i64 0, i32 3
  store i64 %986, ptr %memberidx3.i.i.i552, align 4
  store i64 37, ptr %979, align 4
  %memberidx1.i17.i553 = getelementptr inbounds %Token, ptr %979, i64 0, i32 1
  store ptr %980, ptr %memberidx1.i17.i553, align 8
  br label %common.ret

else.i558:                                        ; preds = %if.entry.i.i530.else.i558_crit_edge, %if.entry72
  %.pre-phi988 = phi i64 [ %.pre987, %if.entry.i.i530.else.i558_crit_edge ], [ %962, %if.entry72 ]
  %987 = phi i64 [ %971, %if.entry.i.i530.else.i558_crit_edge ], [ %964, %if.entry72 ]
  %988 = phi ptr [ %970, %if.entry.i.i530.else.i558_crit_edge ], [ %963, %if.entry72 ]
  %989 = icmp slt i64 %.pre-phi988, %987
  br i1 %989, label %if.entry.i30.i560, label %ifend3.i591

if.entry.i30.i560:                                ; preds = %else.i558
  %990 = load ptr, ptr %988, align 8
  %memberidx4.i29.i559 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %990, i64 0, i32 2
  %991 = load ptr, ptr %memberidx4.i29.i559, align 8
  %992 = tail call i8 %991(ptr nonnull %988, i64 %.pre-phi988)
  %phi.cmp840 = icmp eq i8 %992, 62
  br i1 %phi.cmp840, label %if.entry1.i566, label %ifend3.i591

if.entry1.i566:                                   ; preds = %if.entry.i30.i560
  %993 = load i64, ptr %memberidx.i.i526, align 4
  %994 = load ptr, ptr %memberidx1.i.i527, align 8
  %memberidx2.i.i34.i565 = getelementptr inbounds %string, ptr %994, i64 0, i32 2
  %995 = load i64, ptr %memberidx2.i.i34.i565, align 4
  %.not841 = icmp slt i64 %993, %995
  br i1 %.not841, label %ifend.i38.i570, label %Lexer_advance.exit44.i583

ifend.i38.i570:                                   ; preds = %if.entry1.i566
  %996 = load ptr, ptr %994, align 8
  %memberidx2.i36.i568 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %996, i64 0, i32 2
  %997 = load ptr, ptr %memberidx2.i36.i568, align 8
  %998 = add nsw i64 %993, 1
  store i64 %998, ptr %memberidx.i.i526, align 4
  %999 = tail call i8 %997(ptr nonnull %994, i64 %998)
  store i8 %999, ptr %0, align 1
  %1000 = icmp eq i8 %999, 10
  %memberidx9.i39.i571 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %1000, label %if.entry6.i41.i573, label %Lexer_advance.exit44.i583.sink.split

if.entry6.i41.i573:                               ; preds = %ifend.i38.i570
  store i64 0, ptr %memberidx9.i39.i571, align 4
  %memberidx10.i40.i572 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit44.i583.sink.split

Lexer_advance.exit44.i583.sink.split:             ; preds = %ifend.i38.i570, %if.entry6.i41.i573
  %memberidx9.i39.i571.sink1035 = phi ptr [ %memberidx10.i40.i572, %if.entry6.i41.i573 ], [ %memberidx9.i39.i571, %ifend.i38.i570 ]
  %1001 = load i64, ptr %memberidx9.i39.i571.sink1035, align 4
  %1002 = add i64 %1001, 1
  store i64 %1002, ptr %memberidx9.i39.i571.sink1035, align 4
  br label %Lexer_advance.exit44.i583

Lexer_advance.exit44.i583:                        ; preds = %Lexer_advance.exit44.i583.sink.split, %if.entry1.i566
  %1003 = tail call ptr @malloc(i32 16)
  %1004 = tail call ptr @malloc(i32 32)
  %1005 = load i64, ptr %memberidx.i.i526, align 4
  %1006 = add i64 %1005, -1
  %1007 = add i64 %1005, 1
  %memberidx2.i46.i577 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1008 = load i64, ptr %memberidx2.i46.i577, align 4
  %1009 = add i64 %1008, -2
  %memberidx3.i47.i578 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1010 = load i64, ptr %memberidx3.i47.i578, align 4
  store i64 %1006, ptr %1004, align 4
  %memberidx1.i.i48.i579 = getelementptr inbounds %FloRange, ptr %1004, i64 0, i32 1
  store i64 %1007, ptr %memberidx1.i.i48.i579, align 4
  %memberidx2.i.i49.i580 = getelementptr inbounds %FloRange, ptr %1004, i64 0, i32 2
  store i64 %1009, ptr %memberidx2.i.i49.i580, align 4
  %memberidx3.i.i50.i581 = getelementptr inbounds %FloRange, ptr %1004, i64 0, i32 3
  store i64 %1010, ptr %memberidx3.i.i50.i581, align 4
  store i64 43, ptr %1003, align 4
  %memberidx1.i51.i582 = getelementptr inbounds %Token, ptr %1003, i64 0, i32 1
  store ptr %1004, ptr %memberidx1.i51.i582, align 8
  br label %common.ret

ifend3.i591:                                      ; preds = %else.i558, %if.entry.i30.i560
  %1011 = tail call ptr @malloc(i32 16)
  %1012 = tail call ptr @malloc(i32 32)
  %1013 = load i64, ptr %memberidx.i.i526, align 4
  %1014 = add i64 %1013, 1
  %memberidx2.i20.i585 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1015 = load i64, ptr %memberidx2.i20.i585, align 4
  %1016 = add i64 %1015, -1
  %memberidx3.i21.i586 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1017 = load i64, ptr %memberidx3.i21.i586, align 4
  store i64 %1013, ptr %1012, align 4
  %memberidx1.i.i22.i587 = getelementptr inbounds %FloRange, ptr %1012, i64 0, i32 1
  store i64 %1014, ptr %memberidx1.i.i22.i587, align 4
  %memberidx2.i.i23.i588 = getelementptr inbounds %FloRange, ptr %1012, i64 0, i32 2
  store i64 %1016, ptr %memberidx2.i.i23.i588, align 4
  %memberidx3.i.i24.i589 = getelementptr inbounds %FloRange, ptr %1012, i64 0, i32 3
  store i64 %1017, ptr %memberidx3.i.i24.i589, align 4
  store i64 36, ptr %1011, align 4
  %memberidx1.i18.i590 = getelementptr inbounds %Token, ptr %1011, i64 0, i32 1
  store ptr %1012, ptr %memberidx1.i18.i590, align 8
  br label %common.ret

if.entry75:                                       ; preds = %ifend11
  %memberidx.i.i592 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %1018 = load i64, ptr %memberidx.i.i592, align 4
  %1019 = add i64 %1018, 1
  %memberidx1.i.i593 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %1020 = load ptr, ptr %memberidx1.i.i593, align 8
  %memberidx2.i.i594 = getelementptr inbounds %string, ptr %1020, i64 0, i32 2
  %1021 = load i64, ptr %memberidx2.i.i594, align 4
  %1022 = icmp slt i64 %1019, %1021
  br i1 %1022, label %if.entry.i.i596, label %ifend.i628

if.entry.i.i596:                                  ; preds = %if.entry75
  %1023 = load ptr, ptr %1020, align 8
  %memberidx4.i.i595 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1023, i64 0, i32 2
  %1024 = load ptr, ptr %memberidx4.i.i595, align 8
  %1025 = tail call i8 %1024(ptr nonnull %1020, i64 %1019)
  %phi.cmp837 = icmp eq i8 %1025, 61
  br i1 %phi.cmp837, label %if.entry.i603, label %ifend.i628

if.entry.i603:                                    ; preds = %if.entry.i.i596
  %1026 = load i64, ptr %memberidx.i.i592, align 4
  %1027 = load ptr, ptr %memberidx1.i.i593, align 8
  %memberidx2.i.i.i602 = getelementptr inbounds %string, ptr %1027, i64 0, i32 2
  %1028 = load i64, ptr %memberidx2.i.i.i602, align 4
  %.not838 = icmp slt i64 %1026, %1028
  br i1 %.not838, label %ifend.i.i607, label %Lexer_advance.exit.i620

ifend.i.i607:                                     ; preds = %if.entry.i603
  %1029 = load ptr, ptr %1027, align 8
  %memberidx2.i5.i605 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1029, i64 0, i32 2
  %1030 = load ptr, ptr %memberidx2.i5.i605, align 8
  %1031 = add nsw i64 %1026, 1
  store i64 %1031, ptr %memberidx.i.i592, align 4
  %1032 = tail call i8 %1030(ptr nonnull %1027, i64 %1031)
  store i8 %1032, ptr %0, align 1
  %1033 = icmp eq i8 %1032, 10
  %memberidx9.i.i608 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %1033, label %if.entry6.i.i610, label %Lexer_advance.exit.i620.sink.split

if.entry6.i.i610:                                 ; preds = %ifend.i.i607
  store i64 0, ptr %memberidx9.i.i608, align 4
  %memberidx10.i.i609 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i620.sink.split

Lexer_advance.exit.i620.sink.split:               ; preds = %ifend.i.i607, %if.entry6.i.i610
  %memberidx9.i.i608.sink1037 = phi ptr [ %memberidx10.i.i609, %if.entry6.i.i610 ], [ %memberidx9.i.i608, %ifend.i.i607 ]
  %1034 = load i64, ptr %memberidx9.i.i608.sink1037, align 4
  %1035 = add i64 %1034, 1
  store i64 %1035, ptr %memberidx9.i.i608.sink1037, align 4
  br label %Lexer_advance.exit.i620

Lexer_advance.exit.i620:                          ; preds = %Lexer_advance.exit.i620.sink.split, %if.entry.i603
  %1036 = tail call ptr @malloc(i32 16)
  %1037 = tail call ptr @malloc(i32 32)
  %1038 = load i64, ptr %memberidx.i.i592, align 4
  %1039 = add i64 %1038, -1
  %1040 = add i64 %1038, 1
  %memberidx2.i7.i614 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1041 = load i64, ptr %memberidx2.i7.i614, align 4
  %1042 = add i64 %1041, -2
  %memberidx3.i8.i615 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1043 = load i64, ptr %memberidx3.i8.i615, align 4
  store i64 %1039, ptr %1037, align 4
  %memberidx1.i.i9.i616 = getelementptr inbounds %FloRange, ptr %1037, i64 0, i32 1
  store i64 %1040, ptr %memberidx1.i.i9.i616, align 4
  %memberidx2.i.i10.i617 = getelementptr inbounds %FloRange, ptr %1037, i64 0, i32 2
  store i64 %1042, ptr %memberidx2.i.i10.i617, align 4
  %memberidx3.i.i.i618 = getelementptr inbounds %FloRange, ptr %1037, i64 0, i32 3
  store i64 %1043, ptr %memberidx3.i.i.i618, align 4
  store i64 38, ptr %1036, align 4
  %memberidx1.i11.i619 = getelementptr inbounds %Token, ptr %1036, i64 0, i32 1
  store ptr %1037, ptr %memberidx1.i11.i619, align 8
  br label %common.ret

ifend.i628:                                       ; preds = %if.entry75, %if.entry.i.i596
  %1044 = tail call ptr @malloc(i32 16)
  %1045 = tail call ptr @malloc(i32 32)
  %1046 = load i64, ptr %memberidx.i.i592, align 4
  %1047 = add i64 %1046, 1
  %memberidx2.i14.i622 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1048 = load i64, ptr %memberidx2.i14.i622, align 4
  %1049 = add i64 %1048, -1
  %memberidx3.i15.i623 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1050 = load i64, ptr %memberidx3.i15.i623, align 4
  store i64 %1046, ptr %1045, align 4
  %memberidx1.i.i16.i624 = getelementptr inbounds %FloRange, ptr %1045, i64 0, i32 1
  store i64 %1047, ptr %memberidx1.i.i16.i624, align 4
  %memberidx2.i.i17.i625 = getelementptr inbounds %FloRange, ptr %1045, i64 0, i32 2
  store i64 %1049, ptr %memberidx2.i.i17.i625, align 4
  %memberidx3.i.i18.i626 = getelementptr inbounds %FloRange, ptr %1045, i64 0, i32 3
  store i64 %1050, ptr %memberidx3.i.i18.i626, align 4
  store i64 45, ptr %1044, align 4
  %memberidx1.i12.i627 = getelementptr inbounds %Token, ptr %1044, i64 0, i32 1
  store ptr %1045, ptr %memberidx1.i12.i627, align 8
  br label %common.ret

if.entry78:                                       ; preds = %ifend11
  %memberidx.i.i629 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %1051 = load i64, ptr %memberidx.i.i629, align 4
  %1052 = add i64 %1051, 1
  %memberidx1.i.i630 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %1053 = load ptr, ptr %memberidx1.i.i630, align 8
  %memberidx2.i.i631 = getelementptr inbounds %string, ptr %1053, i64 0, i32 2
  %1054 = load i64, ptr %memberidx2.i.i631, align 4
  %1055 = icmp slt i64 %1052, %1054
  br i1 %1055, label %if.entry.i.i633, label %else.i653

if.entry.i.i633:                                  ; preds = %if.entry78
  %1056 = load ptr, ptr %1053, align 8
  %memberidx4.i.i632 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1056, i64 0, i32 2
  %1057 = load ptr, ptr %memberidx4.i.i632, align 8
  %1058 = tail call i8 %1057(ptr nonnull %1053, i64 %1052)
  %phi.cmp831 = icmp eq i8 %1058, 61
  %1059 = load i64, ptr %memberidx.i.i629, align 4
  %1060 = load ptr, ptr %memberidx1.i.i630, align 8
  %memberidx2.i.i.i639 = getelementptr inbounds %string, ptr %1060, i64 0, i32 2
  %1061 = load i64, ptr %memberidx2.i.i.i639, align 4
  br i1 %phi.cmp831, label %if.entry.i640, label %if.entry.i.i633.else.i653_crit_edge

if.entry.i.i633.else.i653_crit_edge:              ; preds = %if.entry.i.i633
  %.pre989 = add i64 %1059, 1
  br label %else.i653

if.entry.i640:                                    ; preds = %if.entry.i.i633
  %.not836 = icmp slt i64 %1059, %1061
  br i1 %.not836, label %ifend.i.i642, label %Lexer_advance.exit.i649

ifend.i.i642:                                     ; preds = %if.entry.i640
  %1062 = load ptr, ptr %1060, align 8
  %memberidx2.i17.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1062, i64 0, i32 2
  %1063 = load ptr, ptr %memberidx2.i17.i, align 8
  %1064 = add nsw i64 %1059, 1
  store i64 %1064, ptr %memberidx.i.i629, align 4
  %1065 = tail call i8 %1063(ptr nonnull %1060, i64 %1064)
  store i8 %1065, ptr %0, align 1
  %1066 = icmp eq i8 %1065, 10
  %memberidx9.i.i643 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %1066, label %if.entry6.i.i645, label %Lexer_advance.exit.i649.sink.split

if.entry6.i.i645:                                 ; preds = %ifend.i.i642
  store i64 0, ptr %memberidx9.i.i643, align 4
  %memberidx10.i.i644 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i649.sink.split

Lexer_advance.exit.i649.sink.split:               ; preds = %ifend.i.i642, %if.entry6.i.i645
  %memberidx9.i.i643.sink1039 = phi ptr [ %memberidx10.i.i644, %if.entry6.i.i645 ], [ %memberidx9.i.i643, %ifend.i.i642 ]
  %1067 = load i64, ptr %memberidx9.i.i643.sink1039, align 4
  %1068 = add i64 %1067, 1
  store i64 %1068, ptr %memberidx9.i.i643.sink1039, align 4
  br label %Lexer_advance.exit.i649

Lexer_advance.exit.i649:                          ; preds = %Lexer_advance.exit.i649.sink.split, %if.entry.i640
  %1069 = tail call ptr @malloc(i32 16)
  %1070 = tail call ptr @malloc(i32 32)
  %1071 = load i64, ptr %memberidx.i.i629, align 4
  %1072 = add i64 %1071, -1
  %1073 = add i64 %1071, 1
  %memberidx2.i19.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1074 = load i64, ptr %memberidx2.i19.i, align 4
  %1075 = add i64 %1074, -2
  %memberidx3.i20.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1076 = load i64, ptr %memberidx3.i20.i, align 4
  store i64 %1072, ptr %1070, align 4
  %memberidx1.i.i21.i = getelementptr inbounds %FloRange, ptr %1070, i64 0, i32 1
  store i64 %1073, ptr %memberidx1.i.i21.i, align 4
  %memberidx2.i.i22.i = getelementptr inbounds %FloRange, ptr %1070, i64 0, i32 2
  store i64 %1075, ptr %memberidx2.i.i22.i, align 4
  %memberidx3.i.i.i648 = getelementptr inbounds %FloRange, ptr %1070, i64 0, i32 3
  store i64 %1076, ptr %memberidx3.i.i.i648, align 4
  store i64 42, ptr %1069, align 4
  %memberidx1.i23.i = getelementptr inbounds %Token, ptr %1069, i64 0, i32 1
  store ptr %1070, ptr %memberidx1.i23.i, align 8
  br label %common.ret

else.i653:                                        ; preds = %if.entry.i.i633.else.i653_crit_edge, %if.entry78
  %.pre-phi990 = phi i64 [ %.pre989, %if.entry.i.i633.else.i653_crit_edge ], [ %1052, %if.entry78 ]
  %1077 = phi i64 [ %1061, %if.entry.i.i633.else.i653_crit_edge ], [ %1054, %if.entry78 ]
  %1078 = phi ptr [ %1060, %if.entry.i.i633.else.i653_crit_edge ], [ %1053, %if.entry78 ]
  %1079 = icmp slt i64 %.pre-phi990, %1077
  br i1 %1079, label %if.entry.i36.i, label %ifend3.i655

if.entry.i36.i:                                   ; preds = %else.i653
  %1080 = load ptr, ptr %1078, align 8
  %memberidx4.i35.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1080, i64 0, i32 2
  %1081 = load ptr, ptr %memberidx4.i35.i, align 8
  %1082 = tail call i8 %1081(ptr nonnull %1078, i64 %.pre-phi990)
  %phi.cmp832 = icmp eq i8 %1082, 62
  br i1 %phi.cmp832, label %if.entry1.i654, label %ifend3.i655

if.entry1.i654:                                   ; preds = %if.entry.i36.i
  %1083 = load i64, ptr %memberidx.i.i629, align 4
  %1084 = load ptr, ptr %memberidx1.i.i630, align 8
  %memberidx2.i.i40.i = getelementptr inbounds %string, ptr %1084, i64 0, i32 2
  %1085 = load i64, ptr %memberidx2.i.i40.i, align 4
  %.not833 = icmp slt i64 %1083, %1085
  br i1 %.not833, label %ifend.i44.i, label %Lexer_advance.exit50.i

ifend.i44.i:                                      ; preds = %if.entry1.i654
  %1086 = load ptr, ptr %1084, align 8
  %memberidx2.i42.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1086, i64 0, i32 2
  %1087 = load ptr, ptr %memberidx2.i42.i, align 8
  %1088 = add nsw i64 %1083, 1
  store i64 %1088, ptr %memberidx.i.i629, align 4
  %1089 = tail call i8 %1087(ptr nonnull %1084, i64 %1088)
  store i8 %1089, ptr %0, align 1
  %1090 = icmp eq i8 %1089, 10
  %memberidx9.i45.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %1090, label %if.entry6.i47.i, label %Lexer_advance.exit50.i.sink.split

if.entry6.i47.i:                                  ; preds = %ifend.i44.i
  store i64 0, ptr %memberidx9.i45.i, align 4
  %memberidx10.i46.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit50.i.sink.split

Lexer_advance.exit50.i.sink.split:                ; preds = %ifend.i44.i, %if.entry6.i47.i
  %memberidx9.i45.i.sink1041 = phi ptr [ %memberidx10.i46.i, %if.entry6.i47.i ], [ %memberidx9.i45.i, %ifend.i44.i ]
  %1091 = load i64, ptr %memberidx9.i45.i.sink1041, align 4
  %1092 = add i64 %1091, 1
  store i64 %1092, ptr %memberidx9.i45.i.sink1041, align 4
  br label %Lexer_advance.exit50.i

Lexer_advance.exit50.i:                           ; preds = %Lexer_advance.exit50.i.sink.split, %if.entry1.i654
  %1093 = load i64, ptr %memberidx.i.i629, align 4
  %1094 = add i64 %1093, 1
  %1095 = load ptr, ptr %memberidx1.i.i630, align 8
  %memberidx2.i53.i = getelementptr inbounds %string, ptr %1095, i64 0, i32 2
  %1096 = load i64, ptr %memberidx2.i53.i, align 4
  %1097 = icmp slt i64 %1094, %1096
  br i1 %1097, label %if.entry.i56.i, label %ifend6.i

if.entry.i56.i:                                   ; preds = %Lexer_advance.exit50.i
  %1098 = load ptr, ptr %1095, align 8
  %memberidx4.i55.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1098, i64 0, i32 2
  %1099 = load ptr, ptr %memberidx4.i55.i, align 8
  %1100 = tail call i8 %1099(ptr nonnull %1095, i64 %1094)
  %phi.cmp834 = icmp eq i8 %1100, 61
  br i1 %phi.cmp834, label %if.entry4.i656, label %ifend6.i

ifend3.i655:                                      ; preds = %else.i653, %if.entry.i36.i
  %1101 = tail call ptr @malloc(i32 16)
  %1102 = tail call ptr @malloc(i32 32)
  %1103 = load i64, ptr %memberidx.i.i629, align 4
  %1104 = add i64 %1103, 1
  %memberidx2.i59.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1105 = load i64, ptr %memberidx2.i59.i, align 4
  %1106 = add i64 %1105, -1
  %memberidx3.i60.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1107 = load i64, ptr %memberidx3.i60.i, align 4
  store i64 %1103, ptr %1102, align 4
  %memberidx1.i.i61.i = getelementptr inbounds %FloRange, ptr %1102, i64 0, i32 1
  store i64 %1104, ptr %memberidx1.i.i61.i, align 4
  %memberidx2.i.i62.i = getelementptr inbounds %FloRange, ptr %1102, i64 0, i32 2
  store i64 %1106, ptr %memberidx2.i.i62.i, align 4
  %memberidx3.i.i63.i = getelementptr inbounds %FloRange, ptr %1102, i64 0, i32 3
  store i64 %1107, ptr %memberidx3.i.i63.i, align 4
  store i64 39, ptr %1101, align 4
  %memberidx1.i64.i = getelementptr inbounds %Token, ptr %1101, i64 0, i32 1
  store ptr %1102, ptr %memberidx1.i64.i, align 8
  br label %common.ret

if.entry4.i656:                                   ; preds = %if.entry.i56.i
  %1108 = load i64, ptr %memberidx.i.i629, align 4
  %1109 = load ptr, ptr %memberidx1.i.i630, align 8
  %memberidx2.i.i74.i = getelementptr inbounds %string, ptr %1109, i64 0, i32 2
  %1110 = load i64, ptr %memberidx2.i.i74.i, align 4
  %.not835 = icmp slt i64 %1108, %1110
  br i1 %.not835, label %ifend.i78.i, label %Lexer_advance.exit84.i

ifend.i78.i:                                      ; preds = %if.entry4.i656
  %1111 = load ptr, ptr %1109, align 8
  %memberidx2.i76.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1111, i64 0, i32 2
  %1112 = load ptr, ptr %memberidx2.i76.i, align 8
  %1113 = add nsw i64 %1108, 1
  store i64 %1113, ptr %memberidx.i.i629, align 4
  %1114 = tail call i8 %1112(ptr nonnull %1109, i64 %1113)
  store i8 %1114, ptr %0, align 1
  %1115 = icmp eq i8 %1114, 10
  %memberidx9.i79.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %1115, label %if.entry6.i81.i, label %Lexer_advance.exit84.i.sink.split

if.entry6.i81.i:                                  ; preds = %ifend.i78.i
  store i64 0, ptr %memberidx9.i79.i, align 4
  %memberidx10.i80.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit84.i.sink.split

Lexer_advance.exit84.i.sink.split:                ; preds = %ifend.i78.i, %if.entry6.i81.i
  %memberidx9.i79.i.sink1043 = phi ptr [ %memberidx10.i80.i, %if.entry6.i81.i ], [ %memberidx9.i79.i, %ifend.i78.i ]
  %1116 = load i64, ptr %memberidx9.i79.i.sink1043, align 4
  %1117 = add i64 %1116, 1
  store i64 %1117, ptr %memberidx9.i79.i.sink1043, align 4
  br label %Lexer_advance.exit84.i

Lexer_advance.exit84.i:                           ; preds = %Lexer_advance.exit84.i.sink.split, %if.entry4.i656
  %1118 = tail call ptr @malloc(i32 16)
  %1119 = tail call ptr @malloc(i32 32)
  %1120 = load i64, ptr %memberidx.i.i629, align 4
  %1121 = add i64 %1120, -2
  %1122 = add i64 %1120, 1
  %memberidx2.i67.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1123 = load i64, ptr %memberidx2.i67.i, align 4
  %1124 = add i64 %1123, -3
  %memberidx3.i68.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1125 = load i64, ptr %memberidx3.i68.i, align 4
  store i64 %1121, ptr %1119, align 4
  %memberidx1.i.i69.i = getelementptr inbounds %FloRange, ptr %1119, i64 0, i32 1
  store i64 %1122, ptr %memberidx1.i.i69.i, align 4
  %memberidx2.i.i70.i = getelementptr inbounds %FloRange, ptr %1119, i64 0, i32 2
  store i64 %1124, ptr %memberidx2.i.i70.i, align 4
  %memberidx3.i.i71.i = getelementptr inbounds %FloRange, ptr %1119, i64 0, i32 3
  store i64 %1125, ptr %memberidx3.i.i71.i, align 4
  store i64 19, ptr %1118, align 4
  %memberidx1.i65.i657 = getelementptr inbounds %Token, ptr %1118, i64 0, i32 1
  store ptr %1119, ptr %memberidx1.i65.i657, align 8
  br label %common.ret

ifend6.i:                                         ; preds = %Lexer_advance.exit50.i, %if.entry.i56.i
  %1126 = tail call ptr @malloc(i32 16)
  %1127 = tail call ptr @malloc(i32 32)
  %1128 = load i64, ptr %memberidx.i.i629, align 4
  %1129 = add i64 %1128, -1
  %1130 = add i64 %1128, 1
  %memberidx2.i26.i659 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1131 = load i64, ptr %memberidx2.i26.i659, align 4
  %1132 = add i64 %1131, -2
  %memberidx3.i27.i660 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1133 = load i64, ptr %memberidx3.i27.i660, align 4
  store i64 %1129, ptr %1127, align 4
  %memberidx1.i.i28.i661 = getelementptr inbounds %FloRange, ptr %1127, i64 0, i32 1
  store i64 %1130, ptr %memberidx1.i.i28.i661, align 4
  %memberidx2.i.i29.i662 = getelementptr inbounds %FloRange, ptr %1127, i64 0, i32 2
  store i64 %1132, ptr %memberidx2.i.i29.i662, align 4
  %memberidx3.i.i30.i = getelementptr inbounds %FloRange, ptr %1127, i64 0, i32 3
  store i64 %1133, ptr %memberidx3.i.i30.i, align 4
  store i64 47, ptr %1126, align 4
  %memberidx1.i24.i = getelementptr inbounds %Token, ptr %1126, i64 0, i32 1
  store ptr %1127, ptr %memberidx1.i24.i, align 8
  br label %common.ret

if.entry81:                                       ; preds = %ifend11
  %memberidx.i.i663 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %1134 = load i64, ptr %memberidx.i.i663, align 4
  %1135 = add i64 %1134, 1
  %memberidx1.i.i664 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %1136 = load ptr, ptr %memberidx1.i.i664, align 8
  %memberidx2.i.i665 = getelementptr inbounds %string, ptr %1136, i64 0, i32 2
  %1137 = load i64, ptr %memberidx2.i.i665, align 4
  %1138 = icmp slt i64 %1135, %1137
  br i1 %1138, label %if.entry.i.i667, label %else.i695

if.entry.i.i667:                                  ; preds = %if.entry81
  %1139 = load ptr, ptr %1136, align 8
  %memberidx4.i.i666 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1139, i64 0, i32 2
  %1140 = load ptr, ptr %memberidx4.i.i666, align 8
  %1141 = tail call i8 %1140(ptr nonnull %1136, i64 %1135)
  %phi.cmp825 = icmp eq i8 %1141, 61
  %1142 = load i64, ptr %memberidx.i.i663, align 4
  %1143 = load ptr, ptr %memberidx1.i.i664, align 8
  %memberidx2.i.i.i673 = getelementptr inbounds %string, ptr %1143, i64 0, i32 2
  %1144 = load i64, ptr %memberidx2.i.i.i673, align 4
  br i1 %phi.cmp825, label %if.entry.i674, label %if.entry.i.i667.else.i695_crit_edge

if.entry.i.i667.else.i695_crit_edge:              ; preds = %if.entry.i.i667
  %.pre991 = add i64 %1142, 1
  br label %else.i695

if.entry.i674:                                    ; preds = %if.entry.i.i667
  %.not830 = icmp slt i64 %1142, %1144
  br i1 %.not830, label %ifend.i.i678, label %Lexer_advance.exit.i691

ifend.i.i678:                                     ; preds = %if.entry.i674
  %1145 = load ptr, ptr %1143, align 8
  %memberidx2.i17.i676 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1145, i64 0, i32 2
  %1146 = load ptr, ptr %memberidx2.i17.i676, align 8
  %1147 = add nsw i64 %1142, 1
  store i64 %1147, ptr %memberidx.i.i663, align 4
  %1148 = tail call i8 %1146(ptr nonnull %1143, i64 %1147)
  store i8 %1148, ptr %0, align 1
  %1149 = icmp eq i8 %1148, 10
  %memberidx9.i.i679 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %1149, label %if.entry6.i.i681, label %Lexer_advance.exit.i691.sink.split

if.entry6.i.i681:                                 ; preds = %ifend.i.i678
  store i64 0, ptr %memberidx9.i.i679, align 4
  %memberidx10.i.i680 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i691.sink.split

Lexer_advance.exit.i691.sink.split:               ; preds = %ifend.i.i678, %if.entry6.i.i681
  %memberidx9.i.i679.sink1045 = phi ptr [ %memberidx10.i.i680, %if.entry6.i.i681 ], [ %memberidx9.i.i679, %ifend.i.i678 ]
  %1150 = load i64, ptr %memberidx9.i.i679.sink1045, align 4
  %1151 = add i64 %1150, 1
  store i64 %1151, ptr %memberidx9.i.i679.sink1045, align 4
  br label %Lexer_advance.exit.i691

Lexer_advance.exit.i691:                          ; preds = %Lexer_advance.exit.i691.sink.split, %if.entry.i674
  %1152 = tail call ptr @malloc(i32 16)
  %1153 = tail call ptr @malloc(i32 32)
  %1154 = load i64, ptr %memberidx.i.i663, align 4
  %1155 = add i64 %1154, -1
  %1156 = add i64 %1154, 1
  %memberidx2.i19.i685 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1157 = load i64, ptr %memberidx2.i19.i685, align 4
  %1158 = add i64 %1157, -2
  %memberidx3.i20.i686 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1159 = load i64, ptr %memberidx3.i20.i686, align 4
  store i64 %1155, ptr %1153, align 4
  %memberidx1.i.i21.i687 = getelementptr inbounds %FloRange, ptr %1153, i64 0, i32 1
  store i64 %1156, ptr %memberidx1.i.i21.i687, align 4
  %memberidx2.i.i22.i688 = getelementptr inbounds %FloRange, ptr %1153, i64 0, i32 2
  store i64 %1158, ptr %memberidx2.i.i22.i688, align 4
  %memberidx3.i.i.i689 = getelementptr inbounds %FloRange, ptr %1153, i64 0, i32 3
  store i64 %1159, ptr %memberidx3.i.i.i689, align 4
  store i64 41, ptr %1152, align 4
  %memberidx1.i23.i690 = getelementptr inbounds %Token, ptr %1152, i64 0, i32 1
  store ptr %1153, ptr %memberidx1.i23.i690, align 8
  br label %common.ret

else.i695:                                        ; preds = %if.entry.i.i667.else.i695_crit_edge, %if.entry81
  %.pre-phi992 = phi i64 [ %.pre991, %if.entry.i.i667.else.i695_crit_edge ], [ %1135, %if.entry81 ]
  %1160 = phi i64 [ %1144, %if.entry.i.i667.else.i695_crit_edge ], [ %1137, %if.entry81 ]
  %1161 = phi ptr [ %1143, %if.entry.i.i667.else.i695_crit_edge ], [ %1136, %if.entry81 ]
  %1162 = icmp slt i64 %.pre-phi992, %1160
  br i1 %1162, label %if.entry.i36.i697, label %ifend3.i728

if.entry.i36.i697:                                ; preds = %else.i695
  %1163 = load ptr, ptr %1161, align 8
  %memberidx4.i35.i696 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1163, i64 0, i32 2
  %1164 = load ptr, ptr %memberidx4.i35.i696, align 8
  %1165 = tail call i8 %1164(ptr nonnull %1161, i64 %.pre-phi992)
  %phi.cmp826 = icmp eq i8 %1165, 60
  br i1 %phi.cmp826, label %if.entry1.i703, label %ifend3.i728

if.entry1.i703:                                   ; preds = %if.entry.i36.i697
  %1166 = load i64, ptr %memberidx.i.i663, align 4
  %1167 = load ptr, ptr %memberidx1.i.i664, align 8
  %memberidx2.i.i40.i702 = getelementptr inbounds %string, ptr %1167, i64 0, i32 2
  %1168 = load i64, ptr %memberidx2.i.i40.i702, align 4
  %.not827 = icmp slt i64 %1166, %1168
  br i1 %.not827, label %ifend.i44.i707, label %Lexer_advance.exit50.i716

ifend.i44.i707:                                   ; preds = %if.entry1.i703
  %1169 = load ptr, ptr %1167, align 8
  %memberidx2.i42.i705 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1169, i64 0, i32 2
  %1170 = load ptr, ptr %memberidx2.i42.i705, align 8
  %1171 = add nsw i64 %1166, 1
  store i64 %1171, ptr %memberidx.i.i663, align 4
  %1172 = tail call i8 %1170(ptr nonnull %1167, i64 %1171)
  store i8 %1172, ptr %0, align 1
  %1173 = icmp eq i8 %1172, 10
  %memberidx9.i45.i708 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %1173, label %if.entry6.i47.i710, label %Lexer_advance.exit50.i716.sink.split

if.entry6.i47.i710:                               ; preds = %ifend.i44.i707
  store i64 0, ptr %memberidx9.i45.i708, align 4
  %memberidx10.i46.i709 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit50.i716.sink.split

Lexer_advance.exit50.i716.sink.split:             ; preds = %ifend.i44.i707, %if.entry6.i47.i710
  %memberidx9.i45.i708.sink1047 = phi ptr [ %memberidx10.i46.i709, %if.entry6.i47.i710 ], [ %memberidx9.i45.i708, %ifend.i44.i707 ]
  %1174 = load i64, ptr %memberidx9.i45.i708.sink1047, align 4
  %1175 = add i64 %1174, 1
  store i64 %1175, ptr %memberidx9.i45.i708.sink1047, align 4
  br label %Lexer_advance.exit50.i716

Lexer_advance.exit50.i716:                        ; preds = %Lexer_advance.exit50.i716.sink.split, %if.entry1.i703
  %1176 = load i64, ptr %memberidx.i.i663, align 4
  %1177 = add i64 %1176, 1
  %1178 = load ptr, ptr %memberidx1.i.i664, align 8
  %memberidx2.i53.i715 = getelementptr inbounds %string, ptr %1178, i64 0, i32 2
  %1179 = load i64, ptr %memberidx2.i53.i715, align 4
  %1180 = icmp slt i64 %1177, %1179
  br i1 %1180, label %if.entry.i56.i718, label %ifend6.i757

if.entry.i56.i718:                                ; preds = %Lexer_advance.exit50.i716
  %1181 = load ptr, ptr %1178, align 8
  %memberidx4.i55.i717 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1181, i64 0, i32 2
  %1182 = load ptr, ptr %memberidx4.i55.i717, align 8
  %1183 = tail call i8 %1182(ptr nonnull %1178, i64 %1177)
  %phi.cmp828 = icmp eq i8 %1183, 61
  br i1 %phi.cmp828, label %if.entry4.i732, label %ifend6.i757

ifend3.i728:                                      ; preds = %else.i695, %if.entry.i36.i697
  %1184 = tail call ptr @malloc(i32 16)
  %1185 = tail call ptr @malloc(i32 32)
  %1186 = load i64, ptr %memberidx.i.i663, align 4
  %1187 = add i64 %1186, 1
  %memberidx2.i59.i722 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1188 = load i64, ptr %memberidx2.i59.i722, align 4
  %1189 = add i64 %1188, -1
  %memberidx3.i60.i723 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1190 = load i64, ptr %memberidx3.i60.i723, align 4
  store i64 %1186, ptr %1185, align 4
  %memberidx1.i.i61.i724 = getelementptr inbounds %FloRange, ptr %1185, i64 0, i32 1
  store i64 %1187, ptr %memberidx1.i.i61.i724, align 4
  %memberidx2.i.i62.i725 = getelementptr inbounds %FloRange, ptr %1185, i64 0, i32 2
  store i64 %1189, ptr %memberidx2.i.i62.i725, align 4
  %memberidx3.i.i63.i726 = getelementptr inbounds %FloRange, ptr %1185, i64 0, i32 3
  store i64 %1190, ptr %memberidx3.i.i63.i726, align 4
  store i64 40, ptr %1184, align 4
  %memberidx1.i64.i727 = getelementptr inbounds %Token, ptr %1184, i64 0, i32 1
  store ptr %1185, ptr %memberidx1.i64.i727, align 8
  br label %common.ret

if.entry4.i732:                                   ; preds = %if.entry.i56.i718
  %1191 = load i64, ptr %memberidx.i.i663, align 4
  %1192 = load ptr, ptr %memberidx1.i.i664, align 8
  %memberidx2.i.i74.i731 = getelementptr inbounds %string, ptr %1192, i64 0, i32 2
  %1193 = load i64, ptr %memberidx2.i.i74.i731, align 4
  %.not829 = icmp slt i64 %1191, %1193
  br i1 %.not829, label %ifend.i78.i736, label %Lexer_advance.exit84.i749

ifend.i78.i736:                                   ; preds = %if.entry4.i732
  %1194 = load ptr, ptr %1192, align 8
  %memberidx2.i76.i734 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1194, i64 0, i32 2
  %1195 = load ptr, ptr %memberidx2.i76.i734, align 8
  %1196 = add nsw i64 %1191, 1
  store i64 %1196, ptr %memberidx.i.i663, align 4
  %1197 = tail call i8 %1195(ptr nonnull %1192, i64 %1196)
  store i8 %1197, ptr %0, align 1
  %1198 = icmp eq i8 %1197, 10
  %memberidx9.i79.i737 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %1198, label %if.entry6.i81.i739, label %Lexer_advance.exit84.i749.sink.split

if.entry6.i81.i739:                               ; preds = %ifend.i78.i736
  store i64 0, ptr %memberidx9.i79.i737, align 4
  %memberidx10.i80.i738 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit84.i749.sink.split

Lexer_advance.exit84.i749.sink.split:             ; preds = %ifend.i78.i736, %if.entry6.i81.i739
  %memberidx9.i79.i737.sink1049 = phi ptr [ %memberidx10.i80.i738, %if.entry6.i81.i739 ], [ %memberidx9.i79.i737, %ifend.i78.i736 ]
  %1199 = load i64, ptr %memberidx9.i79.i737.sink1049, align 4
  %1200 = add i64 %1199, 1
  store i64 %1200, ptr %memberidx9.i79.i737.sink1049, align 4
  br label %Lexer_advance.exit84.i749

Lexer_advance.exit84.i749:                        ; preds = %Lexer_advance.exit84.i749.sink.split, %if.entry4.i732
  %1201 = tail call ptr @malloc(i32 16)
  %1202 = tail call ptr @malloc(i32 32)
  %1203 = load i64, ptr %memberidx.i.i663, align 4
  %1204 = add i64 %1203, -2
  %1205 = add i64 %1203, 1
  %memberidx2.i67.i743 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1206 = load i64, ptr %memberidx2.i67.i743, align 4
  %1207 = add i64 %1206, -3
  %memberidx3.i68.i744 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1208 = load i64, ptr %memberidx3.i68.i744, align 4
  store i64 %1204, ptr %1202, align 4
  %memberidx1.i.i69.i745 = getelementptr inbounds %FloRange, ptr %1202, i64 0, i32 1
  store i64 %1205, ptr %memberidx1.i.i69.i745, align 4
  %memberidx2.i.i70.i746 = getelementptr inbounds %FloRange, ptr %1202, i64 0, i32 2
  store i64 %1207, ptr %memberidx2.i.i70.i746, align 4
  %memberidx3.i.i71.i747 = getelementptr inbounds %FloRange, ptr %1202, i64 0, i32 3
  store i64 %1208, ptr %memberidx3.i.i71.i747, align 4
  store i64 20, ptr %1201, align 4
  %memberidx1.i65.i748 = getelementptr inbounds %Token, ptr %1201, i64 0, i32 1
  store ptr %1202, ptr %memberidx1.i65.i748, align 8
  br label %common.ret

ifend6.i757:                                      ; preds = %Lexer_advance.exit50.i716, %if.entry.i56.i718
  %1209 = tail call ptr @malloc(i32 16)
  %1210 = tail call ptr @malloc(i32 32)
  %1211 = load i64, ptr %memberidx.i.i663, align 4
  %1212 = add i64 %1211, -1
  %1213 = add i64 %1211, 1
  %memberidx2.i26.i751 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1214 = load i64, ptr %memberidx2.i26.i751, align 4
  %1215 = add i64 %1214, -2
  %memberidx3.i27.i752 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1216 = load i64, ptr %memberidx3.i27.i752, align 4
  store i64 %1212, ptr %1210, align 4
  %memberidx1.i.i28.i753 = getelementptr inbounds %FloRange, ptr %1210, i64 0, i32 1
  store i64 %1213, ptr %memberidx1.i.i28.i753, align 4
  %memberidx2.i.i29.i754 = getelementptr inbounds %FloRange, ptr %1210, i64 0, i32 2
  store i64 %1215, ptr %memberidx2.i.i29.i754, align 4
  %memberidx3.i.i30.i755 = getelementptr inbounds %FloRange, ptr %1210, i64 0, i32 3
  store i64 %1216, ptr %memberidx3.i.i30.i755, align 4
  store i64 46, ptr %1209, align 4
  %memberidx1.i24.i756 = getelementptr inbounds %Token, ptr %1209, i64 0, i32 1
  store ptr %1210, ptr %memberidx1.i24.i756, align 8
  br label %common.ret

if.entry84:                                       ; preds = %ifend11
  %memberidx.i.i758 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %1217 = load i64, ptr %memberidx.i.i758, align 4
  %1218 = add i64 %1217, 1
  %memberidx1.i.i759 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %1219 = load ptr, ptr %memberidx1.i.i759, align 8
  %memberidx2.i.i760 = getelementptr inbounds %string, ptr %1219, i64 0, i32 2
  %1220 = load i64, ptr %memberidx2.i.i760, align 4
  %1221 = icmp slt i64 %1218, %1220
  br i1 %1221, label %if.entry.i.i762, label %Lexer_dot_token.exit

if.entry.i.i762:                                  ; preds = %if.entry84
  %1222 = load ptr, ptr %1219, align 8
  %memberidx4.i.i761 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1222, i64 0, i32 2
  %1223 = load ptr, ptr %memberidx4.i.i761, align 8
  %1224 = tail call i8 %1223(ptr nonnull %1219, i64 %1218)
  %phi.cmp = icmp eq i8 %1224, 46
  br i1 %phi.cmp, label %if.entry.i768, label %Lexer_dot_token.exit

if.entry.i768:                                    ; preds = %if.entry.i.i762
  %1225 = load i64, ptr %memberidx.i.i758, align 4
  %1226 = load ptr, ptr %memberidx1.i.i759, align 8
  %memberidx2.i.i.i767 = getelementptr inbounds %string, ptr %1226, i64 0, i32 2
  %1227 = load i64, ptr %memberidx2.i.i.i767, align 4
  %.not = icmp slt i64 %1225, %1227
  br i1 %.not, label %ifend.i.i772, label %Lexer_advance.exit.i781

ifend.i.i772:                                     ; preds = %if.entry.i768
  %1228 = load ptr, ptr %1226, align 8
  %memberidx2.i11.i770 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1228, i64 0, i32 2
  %1229 = load ptr, ptr %memberidx2.i11.i770, align 8
  %1230 = add nsw i64 %1225, 1
  store i64 %1230, ptr %memberidx.i.i758, align 4
  %1231 = tail call i8 %1229(ptr nonnull %1226, i64 %1230)
  store i8 %1231, ptr %0, align 1
  %1232 = icmp eq i8 %1231, 10
  %memberidx9.i.i773 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %1232, label %if.entry6.i.i775, label %Lexer_advance.exit.i781.sink.split

if.entry6.i.i775:                                 ; preds = %ifend.i.i772
  store i64 0, ptr %memberidx9.i.i773, align 4
  %memberidx10.i.i774 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_advance.exit.i781.sink.split

Lexer_advance.exit.i781.sink.split:               ; preds = %ifend.i.i772, %if.entry6.i.i775
  %memberidx9.i.i773.sink1051 = phi ptr [ %memberidx10.i.i774, %if.entry6.i.i775 ], [ %memberidx9.i.i773, %ifend.i.i772 ]
  %1233 = load i64, ptr %memberidx9.i.i773.sink1051, align 4
  %1234 = add i64 %1233, 1
  store i64 %1234, ptr %memberidx9.i.i773.sink1051, align 4
  br label %Lexer_advance.exit.i781

Lexer_advance.exit.i781:                          ; preds = %Lexer_advance.exit.i781.sink.split, %if.entry.i768
  %1235 = load i64, ptr %memberidx.i.i758, align 4
  %1236 = add i64 %1235, 1
  %1237 = load ptr, ptr %memberidx1.i.i759, align 8
  %memberidx2.i14.i780 = getelementptr inbounds %string, ptr %1237, i64 0, i32 2
  %1238 = load i64, ptr %memberidx2.i14.i780, align 4
  %1239 = icmp slt i64 %1236, %1238
  br i1 %1239, label %if.entry.i17.i, label %Lexer_dot_token.exit

if.entry.i17.i:                                   ; preds = %Lexer_advance.exit.i781
  %1240 = load ptr, ptr %1237, align 8
  %memberidx4.i16.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1240, i64 0, i32 2
  %1241 = load ptr, ptr %memberidx4.i16.i, align 8
  %1242 = tail call i8 %1241(ptr nonnull %1237, i64 %1236)
  %phi.cmp823 = icmp eq i8 %1242, 46
  br i1 %phi.cmp823, label %if.entry1.i791, label %Lexer_dot_token.exit

if.entry1.i791:                                   ; preds = %if.entry.i17.i
  %1243 = load i64, ptr %memberidx.i.i758, align 4
  %1244 = load ptr, ptr %memberidx1.i.i759, align 8
  %memberidx2.i.i27.i = getelementptr inbounds %string, ptr %1244, i64 0, i32 2
  %1245 = load i64, ptr %memberidx2.i.i27.i, align 4
  %.not824 = icmp slt i64 %1243, %1245
  br i1 %.not824, label %ifend.i31.i, label %Lexer_dot_token.exit

ifend.i31.i:                                      ; preds = %if.entry1.i791
  %1246 = load ptr, ptr %1244, align 8
  %memberidx2.i29.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1246, i64 0, i32 2
  %1247 = load ptr, ptr %memberidx2.i29.i, align 8
  %1248 = add nsw i64 %1243, 1
  store i64 %1248, ptr %memberidx.i.i758, align 4
  %1249 = tail call i8 %1247(ptr nonnull %1244, i64 %1248)
  store i8 %1249, ptr %0, align 1
  %1250 = icmp eq i8 %1249, 10
  %memberidx9.i32.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  br i1 %1250, label %if.entry6.i34.i, label %Lexer_dot_token.exit.sink.split

if.entry6.i34.i:                                  ; preds = %ifend.i31.i
  store i64 0, ptr %memberidx9.i32.i, align 4
  %memberidx10.i33.i = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  br label %Lexer_dot_token.exit.sink.split

Lexer_dot_token.exit.sink.split:                  ; preds = %ifend.i31.i, %if.entry6.i34.i
  %memberidx10.i33.i.sink1053 = phi ptr [ %memberidx10.i33.i, %if.entry6.i34.i ], [ %memberidx9.i32.i, %ifend.i31.i ]
  %1251 = load i64, ptr %memberidx10.i33.i.sink1053, align 4
  %1252 = add i64 %1251, 1
  store i64 %1252, ptr %memberidx10.i33.i.sink1053, align 4
  br label %Lexer_dot_token.exit

Lexer_dot_token.exit:                             ; preds = %Lexer_dot_token.exit.sink.split, %Lexer_advance.exit.i781, %if.entry84, %if.entry1.i791, %if.entry.i.i762, %if.entry.i17.i
  %token.0.i = phi i64 [ 49, %if.entry.i17.i ], [ 48, %if.entry.i.i762 ], [ 50, %if.entry1.i791 ], [ 48, %if.entry84 ], [ 49, %Lexer_advance.exit.i781 ], [ 50, %Lexer_dot_token.exit.sink.split ]
  %length.0.i782 = phi i64 [ 2, %if.entry.i17.i ], [ 1, %if.entry.i.i762 ], [ 3, %if.entry1.i791 ], [ 1, %if.entry84 ], [ 2, %Lexer_advance.exit.i781 ], [ 3, %Lexer_dot_token.exit.sink.split ]
  %1253 = tail call ptr @malloc(i32 16)
  %1254 = tail call ptr @malloc(i32 32)
  %1255 = load i64, ptr %memberidx.i.i758, align 4
  %1256 = sub nsw i64 1, %length.0.i782
  %1257 = add i64 %1256, %1255
  %1258 = add i64 %1255, 1
  %memberidx2.i20.i784 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1259 = load i64, ptr %memberidx2.i20.i784, align 4
  %1260 = sub i64 %1259, %length.0.i782
  %memberidx3.i21.i785 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1261 = load i64, ptr %memberidx3.i21.i785, align 4
  store i64 %1257, ptr %1254, align 4
  %memberidx1.i.i22.i786 = getelementptr inbounds %FloRange, ptr %1254, i64 0, i32 1
  store i64 %1258, ptr %memberidx1.i.i22.i786, align 4
  %memberidx2.i.i23.i787 = getelementptr inbounds %FloRange, ptr %1254, i64 0, i32 2
  store i64 %1260, ptr %memberidx2.i.i23.i787, align 4
  %memberidx3.i.i.i788 = getelementptr inbounds %FloRange, ptr %1254, i64 0, i32 3
  store i64 %1261, ptr %memberidx3.i.i.i788, align 4
  store i64 %token.0.i, ptr %1253, align 4
  %memberidx1.i24.i789 = getelementptr inbounds %Token, ptr %1253, i64 0, i32 1
  store ptr %1254, ptr %memberidx1.i24.i789, align 8
  br label %common.ret

if.entry87:                                       ; preds = %ifend11
  %1262 = tail call ptr @malloc(i32 16)
  %1263 = tail call ptr @malloc(i32 32)
  %memberidx90 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1264 = load i64, ptr %memberidx90, align 4
  %memberidx91 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1265 = load i64, ptr %memberidx91, align 4
  %memberidx2.i793 = getelementptr inbounds %FloRange, ptr %1263, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %1263, i8 0, i64 16, i1 false)
  store i64 %1264, ptr %memberidx2.i793, align 4
  %memberidx3.i794 = getelementptr inbounds %FloRange, ptr %1263, i64 0, i32 3
  store i64 %1265, ptr %memberidx3.i794, align 4
  store i64 44, ptr %1262, align 4
  %memberidx1.i795 = getelementptr inbounds %Token, ptr %1262, i64 0, i32 1
  store ptr %1263, ptr %memberidx1.i795, align 8
  br label %common.ret

ifend89:                                          ; preds = %ifend11
  %memberidx92 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 2
  %1266 = load ptr, ptr %memberidx92, align 8
  %1267 = tail call ptr @malloc(i32 24)
  %memberidx93 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 1
  %1268 = load ptr, ptr %memberidx93, align 8
  %1269 = load ptr, ptr %1268, align 8
  %memberidx94 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1269, i64 0, i32 1
  %1270 = load ptr, ptr %memberidx94, align 8
  %memberidx95 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 3
  %1271 = load i64, ptr %memberidx95, align 4
  %1272 = tail call ptr %1270(ptr nonnull %1268, i64 %1271, i64 1)
  %1273 = load ptr, ptr %1272, align 8
  %memberidx96 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %1273, i64 0, i32 5
  %1274 = load ptr, ptr %memberidx96, align 8
  %1275 = tail call ptr %1274(ptr nonnull %1272)
  %1276 = alloca ptr, align 8
  %1277 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %1276, ptr nonnull @56, ptr %1275)
  %1278 = load ptr, ptr %1276, align 8
  %1279 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %1279, align 8
  %memberidx.i175 = getelementptr inbounds %string, ptr %1279, i64 0, i32 1
  store ptr %1278, ptr %memberidx.i175, align 8
  %memberidx1.i176 = getelementptr inbounds %string, ptr %1279, i64 0, i32 2
  store i64 %1277, ptr %memberidx1.i176, align 4
  %memberidx2.i177 = getelementptr inbounds %string, ptr %1279, i64 0, i32 3
  store i64 %1277, ptr %memberidx2.i177, align 4
  tail call void @free(ptr %1275)
  %1280 = call ptr @malloc(i32 32)
  %1281 = load i64, ptr %memberidx95, align 4
  %1282 = add i64 %1281, 1
  %memberidx2.i171 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 4
  %1283 = load i64, ptr %memberidx2.i171, align 4
  %1284 = add i64 %1283, -1
  %memberidx3.i172 = getelementptr inbounds %Lexer, ptr %0, i64 0, i32 5
  %1285 = load i64, ptr %memberidx3.i172, align 4
  store i64 %1281, ptr %1280, align 4
  %memberidx1.i.i173 = getelementptr inbounds %FloRange, ptr %1280, i64 0, i32 1
  store i64 %1282, ptr %memberidx1.i.i173, align 4
  %memberidx2.i.i174 = getelementptr inbounds %FloRange, ptr %1280, i64 0, i32 2
  store i64 %1284, ptr %memberidx2.i.i174, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %1280, i64 0, i32 3
  store i64 %1285, ptr %memberidx3.i.i, align 4
  store i64 0, ptr %1267, align 4
  %memberidx1.i165 = getelementptr inbounds %FloError, ptr %1267, i64 0, i32 2
  store ptr %1280, ptr %memberidx1.i165, align 8
  %memberidx2.i = getelementptr inbounds %FloError, ptr %1267, i64 0, i32 1
  store ptr %1279, ptr %memberidx2.i, align 8
  %memberidx.i = getelementptr inbounds %Array_FloError_, ptr %1266, i64 0, i32 2
  %1286 = load i64, ptr %memberidx.i, align 4
  %memberidx1.i = getelementptr inbounds %Array_FloError_, ptr %1266, i64 0, i32 3
  %1287 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp slt i64 %1286, %1287
  br i1 %.not.i, label %ifend89.Array_FloError____sl__.exit_crit_edge, label %if.entry.i

ifend89.Array_FloError____sl__.exit_crit_edge:    ; preds = %ifend89
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %1266, i64 0, i32 1
  %.pre971 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_FloError____sl__.exit

if.entry.i:                                       ; preds = %ifend89
  %1288 = shl i64 %1287, 1
  store i64 %1288, ptr %memberidx1.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_FloError_, ptr %1266, i64 0, i32 1
  %1289 = load ptr, ptr %memberidx2.i.i, align 8
  %1290 = shl i64 %1287, 4
  %1291 = call ptr @realloc(ptr %1289, i64 %1290)
  store ptr %1291, ptr %memberidx2.i.i, align 8
  %.pre970 = load i64, ptr %memberidx.i, align 4
  br label %Array_FloError____sl__.exit

Array_FloError____sl__.exit:                      ; preds = %ifend89.Array_FloError____sl__.exit_crit_edge, %if.entry.i
  %1292 = phi ptr [ %.pre971, %ifend89.Array_FloError____sl__.exit_crit_edge ], [ %1291, %if.entry.i ]
  %1293 = phi i64 [ %1286, %ifend89.Array_FloError____sl__.exit_crit_edge ], [ %.pre970, %if.entry.i ]
  %1294 = add i64 %1293, 1
  store i64 %1294, ptr %memberidx.i, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %1292, i64 %1293
  store ptr %1267, ptr %ptridx.i, align 8
  br label %common.ret
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn
declare double @atof(ptr nocapture) local_unnamed_addr #12

; Function Attrs: mustprogress nofree nounwind readonly willreturn
declare i64 @atol(ptr nocapture) local_unnamed_addr #12

; Function Attrs: mustprogress nounwind willreturn
define internal void @StringBuilder_add_byte(ptr nocapture %0, i8 %1) #13 {
  %memberidx = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 4
  %4 = load i64, ptr %memberidx1, align 4
  %5 = sub i64 %3, %4
  %6 = icmp slt i64 %5, 2
  br i1 %6, label %if.entry, label %.ifend_crit_edge

.ifend_crit_edge:                                 ; preds = %2
  %memberidx2.phi.trans.insert = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 3
  %.pre = load ptr, ptr %memberidx2.phi.trans.insert, align 8
  br label %ifend

if.entry:                                         ; preds = %2
  %7 = shl i64 %3, 1
  store i64 %7, ptr %memberidx, align 4
  %memberidx2.i = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %memberidx2.i, align 8
  %9 = tail call ptr @realloc(ptr %8, i64 %7)
  store ptr %9, ptr %memberidx2.i, align 8
  %memberidx5.i = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 3
  %10 = load i64, ptr %memberidx1, align 4
  %11 = getelementptr inbounds i8, ptr %9, i64 %10
  store ptr %11, ptr %memberidx5.i, align 8
  br label %ifend

ifend:                                            ; preds = %.ifend_crit_edge, %if.entry
  %12 = phi ptr [ %.pre, %.ifend_crit_edge ], [ %11, %if.entry ]
  %memberidx2 = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 3
  store i8 %1, ptr %12, align 1
  %13 = load ptr, ptr %memberidx2, align 8
  %14 = getelementptr inbounds i8, ptr %13, i64 1
  store ptr %14, ptr %memberidx2, align 8
  %15 = load i64, ptr %memberidx1, align 4
  %16 = add i64 %15, 1
  store i64 %16, ptr %memberidx1, align 4
  ret void
}

; Function Attrs: mustprogress nounwind willreturn
define internal void @StringBuilder_add_bytes_length(ptr nocapture %0, ptr nocapture readonly %1, i64 %2) #13 {
  %memberidx = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 4
  %5 = load i64, ptr %memberidx1, align 4
  %6 = sub i64 %4, %5
  %.not = icmp sgt i64 %6, %2
  br i1 %.not, label %.ifend_crit_edge, label %if.entry

.ifend_crit_edge:                                 ; preds = %3
  %memberidx2.phi.trans.insert = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 3
  %.pre = load ptr, ptr %memberidx2.phi.trans.insert, align 8
  br label %ifend

if.entry:                                         ; preds = %3
  %7 = shl i64 %4, 1
  store i64 %7, ptr %memberidx, align 4
  %memberidx2.i = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %memberidx2.i, align 8
  %9 = tail call ptr @realloc(ptr %8, i64 %7)
  store ptr %9, ptr %memberidx2.i, align 8
  %memberidx5.i = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 3
  %10 = load i64, ptr %memberidx1, align 4
  %11 = getelementptr inbounds i8, ptr %9, i64 %10
  store ptr %11, ptr %memberidx5.i, align 8
  br label %ifend

ifend:                                            ; preds = %.ifend_crit_edge, %if.entry
  %12 = phi ptr [ %.pre, %.ifend_crit_edge ], [ %11, %if.entry ]
  %memberidx2 = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 8 %12, ptr align 8 %1, i64 %2, i1 false)
  %13 = load ptr, ptr %memberidx2, align 8
  %14 = getelementptr inbounds i8, ptr %13, i64 %2
  store ptr %14, ptr %memberidx2, align 8
  %15 = load i64, ptr %memberidx1, align 4
  %16 = add i64 %15, %2
  store i64 %16, ptr %memberidx1, align 4
  ret void
}

define internal void @StringBuilder_append_string(ptr %0, ptr %1) {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = load ptr, ptr %1, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %5, i64 0, i32 3
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = tail call ptr %6(ptr nonnull %1)
  %memberidx2 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %8 = load i64, ptr %memberidx2, align 4
  tail call void %4(ptr nonnull %0, ptr %7, i64 %8)
  ret void
}

define internal noalias ptr @StringBuilder_get_string(ptr nocapture readonly %0) {
  %2 = tail call ptr @malloc(i32 32)
  %memberidx = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %StringBuilder, ptr %0, i64 0, i32 4
  %4 = load i64, ptr %memberidx1, align 4
  store ptr @VTablestring, ptr %2, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %2, i64 0, i32 1
  store ptr %3, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %2, i64 0, i32 2
  store i64 %4, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %2, i64 0, i32 3
  store i64 %4, ptr %memberidx2.i, align 4
  ret ptr %2
}

define internal fastcc void @print_tokens(ptr nocapture readonly %0, ptr %1) unnamed_addr {
for.entry:
  %2 = tail call ptr @malloc(i32 8)
  store i8 91, ptr %2, align 8
  %3 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %3, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %3, i64 0, i32 1
  store ptr %2, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %3, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %3, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i, align 4
  %4 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %5 = tail call ptr %4(ptr nonnull %3)
  %6 = load i64, ptr %memberidx1.i.i, align 4
  tail call void @write(i64 1, ptr %5, i64 %6)
  tail call void @write(i64 1, ptr nonnull @0, i64 1)
  %7 = tail call ptr @malloc(i32 33)
  %memberidx.i = getelementptr inbounds %Array_Token_, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Array_Token_, ptr %0, i64 0, i32 2
  %9 = load i64, ptr %memberidx1.i, align 4
  store ptr @VTableArrayIterator_Token_, ptr %7, align 8
  %memberidx.i.i20 = getelementptr inbounds %Iterator_Token_, ptr %7, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i20, align 1
  %memberidx1.i.i21 = getelementptr inbounds %ArrayIterator_Token_, ptr %7, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i21, align 4
  %memberidx2.i.i22 = getelementptr inbounds %ArrayIterator_Token_, ptr %7, i64 0, i32 4
  store ptr %8, ptr %memberidx2.i.i22, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_Token_, ptr %7, i64 0, i32 3
  store i64 %9, ptr %memberidx3.i.i, align 4
  %10 = load ptr, ptr @VTableArrayIterator_Token_, align 8
  %11 = tail call ptr %10(ptr nonnull %7)
  %12 = load i1, ptr %memberidx.i.i20, align 1
  br i1 %12, label %for.end, label %for.body

for.body:                                         ; preds = %for.entry, %ifend
  %token.059 = phi ptr [ %224, %ifend ], [ %11, %for.entry ]
  %13 = call ptr @malloc(i32 16)
  store i16 31520, ptr %13, align 8
  %14 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %14, align 8
  %memberidx.i.i23 = getelementptr inbounds %string, ptr %14, i64 0, i32 1
  store ptr %13, ptr %memberidx.i.i23, align 8
  %memberidx1.i.i24 = getelementptr inbounds %string, ptr %14, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i24, align 4
  %memberidx2.i.i25 = getelementptr inbounds %string, ptr %14, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i25, align 4
  %15 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %16 = call ptr %15(ptr nonnull %14)
  %17 = load i64, ptr %memberidx1.i.i24, align 4
  call void @write(i64 1, ptr %16, i64 %17)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %18 = load i64, ptr %token.059, align 4
  switch i64 %18, label %ifend189.i [
    i64 1, label %if.entry.i
    i64 2, label %if.entry1.i
    i64 3, label %if.entry4.i
    i64 6, label %if.entry7.i
    i64 21, label %if.entry10.i
    i64 5, label %if.entry13.i
    i64 22, label %if.entry16.i
    i64 4, label %if.entry19.i
    i64 7, label %if.entry22.i
    i64 23, label %if.entry25.i
    i64 24, label %if.entry28.i
    i64 8, label %if.entry31.i
    i64 25, label %if.entry34.i
    i64 26, label %if.entry37.i
    i64 27, label %if.entry40.i
    i64 28, label %if.entry43.i
    i64 29, label %if.entry46.i
    i64 30, label %if.entry49.i
    i64 31, label %if.entry52.i
    i64 32, label %if.entry55.i
    i64 33, label %if.entry58.i
    i64 9, label %if.entry61.i
    i64 34, label %if.entry64.i
    i64 35, label %if.entry67.i
    i64 36, label %if.entry70.i
    i64 37, label %if.entry73.i
    i64 38, label %if.entry76.i
    i64 39, label %if.entry79.i
    i64 40, label %if.entry82.i
    i64 41, label %if.entry85.i
    i64 42, label %if.entry88.i
    i64 43, label %if.entry91.i
    i64 44, label %if.entry94.i
    i64 45, label %if.entry97.i
    i64 46, label %if.entry100.i
    i64 47, label %if.entry103.i
    i64 48, label %if.entry106.i
    i64 49, label %if.entry109.i
    i64 50, label %if.entry112.i
    i64 51, label %if.entry115.i
    i64 52, label %if.entry118.i
    i64 53, label %if.entry121.i
    i64 54, label %if.entry124.i
    i64 55, label %if.entry127.i
    i64 57, label %if.entry130.i
    i64 58, label %if.entry133.i
    i64 59, label %if.entry136.i
    i64 60, label %if.entry139.i
    i64 61, label %if.entry142.i
    i64 62, label %if.entry145.i
    i64 63, label %if.entry148.i
    i64 64, label %if.entry151.i
    i64 65, label %if.entry154.i
    i64 66, label %if.entry157.i
    i64 67, label %if.entry160.i
    i64 68, label %if.entry163.i
    i64 69, label %if.entry166.i
    i64 70, label %if.entry169.i
    i64 71, label %if.entry172.i
    i64 72, label %if.entry175.i
    i64 73, label %if.entry178.i
    i64 74, label %if.entry181.i
    i64 75, label %if.entry184.i
    i64 76, label %if.entry187.i
  ]

if.entry.i:                                       ; preds = %for.body
  %19 = call ptr @malloc(i32 24)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %19, ptr noundef nonnull align 8 dereferenceable(3) @58, i64 3, i1 false)
  %20 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %20, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 1
  store ptr %19, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i.i, align 4
  br label %token_str.exit

if.entry1.i:                                      ; preds = %for.body
  %21 = call ptr @malloc(i32 56)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %21, ptr noundef nonnull align 8 dereferenceable(7) @59, i64 7, i1 false)
  %22 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %22, align 8
  %memberidx.i.i297.i = getelementptr inbounds %string, ptr %22, i64 0, i32 1
  store ptr %21, ptr %memberidx.i.i297.i, align 8
  %memberidx1.i.i298.i = getelementptr inbounds %string, ptr %22, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i298.i, align 4
  %memberidx2.i.i299.i = getelementptr inbounds %string, ptr %22, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i299.i, align 4
  br label %token_str.exit

if.entry4.i:                                      ; preds = %for.body
  %23 = call ptr @malloc(i32 40)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %23, ptr noundef nonnull align 8 dereferenceable(5) @60, i64 5, i1 false)
  %24 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %24, align 8
  %memberidx.i.i300.i = getelementptr inbounds %string, ptr %24, i64 0, i32 1
  store ptr %23, ptr %memberidx.i.i300.i, align 8
  %memberidx1.i.i301.i = getelementptr inbounds %string, ptr %24, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i301.i, align 4
  %memberidx2.i.i302.i = getelementptr inbounds %string, ptr %24, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i302.i, align 4
  br label %token_str.exit

if.entry7.i:                                      ; preds = %for.body
  %25 = call ptr @malloc(i32 32)
  store i32 1398099024, ptr %25, align 8
  %26 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %26, align 8
  %memberidx.i.i303.i = getelementptr inbounds %string, ptr %26, i64 0, i32 1
  store ptr %25, ptr %memberidx.i.i303.i, align 8
  %memberidx1.i.i304.i = getelementptr inbounds %string, ptr %26, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i304.i, align 4
  %memberidx2.i.i305.i = getelementptr inbounds %string, ptr %26, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i305.i, align 4
  br label %token_str.exit

if.entry10.i:                                     ; preds = %for.body
  %27 = call ptr @malloc(i32 72)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %27, ptr noundef nonnull align 8 dereferenceable(9) @61, i64 9, i1 false)
  %28 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %28, align 8
  %memberidx.i.i306.i = getelementptr inbounds %string, ptr %28, i64 0, i32 1
  store ptr %27, ptr %memberidx.i.i306.i, align 8
  %memberidx1.i.i307.i = getelementptr inbounds %string, ptr %28, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i307.i, align 4
  %memberidx2.i.i308.i = getelementptr inbounds %string, ptr %28, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i308.i, align 4
  br label %token_str.exit

if.entry13.i:                                     ; preds = %for.body
  %29 = call ptr @malloc(i32 40)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %29, ptr noundef nonnull align 8 dereferenceable(5) @62, i64 5, i1 false)
  %30 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %30, align 8
  %memberidx.i.i309.i = getelementptr inbounds %string, ptr %30, i64 0, i32 1
  store ptr %29, ptr %memberidx.i.i309.i, align 8
  %memberidx1.i.i310.i = getelementptr inbounds %string, ptr %30, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i310.i, align 4
  %memberidx2.i.i311.i = getelementptr inbounds %string, ptr %30, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i311.i, align 4
  br label %token_str.exit

if.entry16.i:                                     ; preds = %for.body
  %31 = call ptr @malloc(i32 88)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %31, ptr noundef nonnull align 8 dereferenceable(11) @63, i64 11, i1 false)
  %32 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %32, align 8
  %memberidx.i.i312.i = getelementptr inbounds %string, ptr %32, i64 0, i32 1
  store ptr %31, ptr %memberidx.i.i312.i, align 8
  %memberidx1.i.i313.i = getelementptr inbounds %string, ptr %32, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i313.i, align 4
  %memberidx2.i.i314.i = getelementptr inbounds %string, ptr %32, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i314.i, align 4
  br label %token_str.exit

if.entry19.i:                                     ; preds = %for.body
  %33 = call ptr @malloc(i32 32)
  store i32 1414288717, ptr %33, align 8
  %34 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %34, align 8
  %memberidx.i.i315.i = getelementptr inbounds %string, ptr %34, i64 0, i32 1
  store ptr %33, ptr %memberidx.i.i315.i, align 8
  %memberidx1.i.i316.i = getelementptr inbounds %string, ptr %34, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i316.i, align 4
  %memberidx2.i.i317.i = getelementptr inbounds %string, ptr %34, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i317.i, align 4
  br label %token_str.exit

if.entry22.i:                                     ; preds = %for.body
  %35 = call ptr @malloc(i32 24)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %35, ptr noundef nonnull align 8 dereferenceable(3) @64, i64 3, i1 false)
  %36 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %36, align 8
  %memberidx.i.i318.i = getelementptr inbounds %string, ptr %36, i64 0, i32 1
  store ptr %35, ptr %memberidx.i.i318.i, align 8
  %memberidx1.i.i319.i = getelementptr inbounds %string, ptr %36, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i319.i, align 4
  %memberidx2.i.i320.i = getelementptr inbounds %string, ptr %36, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i320.i, align 4
  br label %token_str.exit

if.entry25.i:                                     ; preds = %for.body
  %37 = call ptr @malloc(i32 32)
  store i32 1380012108, ptr %37, align 8
  %38 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %38, align 8
  %memberidx.i.i321.i = getelementptr inbounds %string, ptr %38, i64 0, i32 1
  store ptr %37, ptr %memberidx.i.i321.i, align 8
  %memberidx1.i.i322.i = getelementptr inbounds %string, ptr %38, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i322.i, align 4
  %memberidx2.i.i323.i = getelementptr inbounds %string, ptr %38, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i323.i, align 4
  br label %token_str.exit

if.entry28.i:                                     ; preds = %for.body
  %39 = call ptr @malloc(i32 32)
  store i32 1380012114, ptr %39, align 8
  %40 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %40, align 8
  %memberidx.i.i324.i = getelementptr inbounds %string, ptr %40, i64 0, i32 1
  store ptr %39, ptr %memberidx.i.i324.i, align 8
  %memberidx1.i.i325.i = getelementptr inbounds %string, ptr %40, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i325.i, align 4
  %memberidx2.i.i326.i = getelementptr inbounds %string, ptr %40, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i326.i, align 4
  br label %token_str.exit

if.entry31.i:                                     ; preds = %for.body
  %41 = call ptr @malloc(i32 24)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %41, ptr noundef nonnull align 8 dereferenceable(3) @65, i64 3, i1 false)
  %42 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %42, align 8
  %memberidx.i.i327.i = getelementptr inbounds %string, ptr %42, i64 0, i32 1
  store ptr %41, ptr %memberidx.i.i327.i, align 8
  %memberidx1.i.i328.i = getelementptr inbounds %string, ptr %42, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i328.i, align 4
  %memberidx2.i.i329.i = getelementptr inbounds %string, ptr %42, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i329.i, align 4
  br label %token_str.exit

if.entry34.i:                                     ; preds = %for.body
  %43 = call ptr @malloc(i32 48)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %43, ptr noundef nonnull align 8 dereferenceable(6) @66, i64 6, i1 false)
  %44 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %44, align 8
  %memberidx.i.i330.i = getelementptr inbounds %string, ptr %44, i64 0, i32 1
  store ptr %43, ptr %memberidx.i.i330.i, align 8
  %memberidx1.i.i331.i = getelementptr inbounds %string, ptr %44, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i331.i, align 4
  %memberidx2.i.i332.i = getelementptr inbounds %string, ptr %44, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i332.i, align 4
  br label %token_str.exit

if.entry37.i:                                     ; preds = %for.body
  %45 = call ptr @malloc(i32 48)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %45, ptr noundef nonnull align 8 dereferenceable(6) @67, i64 6, i1 false)
  %46 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %46, align 8
  %memberidx.i.i333.i = getelementptr inbounds %string, ptr %46, i64 0, i32 1
  store ptr %45, ptr %memberidx.i.i333.i, align 8
  %memberidx1.i.i334.i = getelementptr inbounds %string, ptr %46, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i334.i, align 4
  %memberidx2.i.i335.i = getelementptr inbounds %string, ptr %46, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i335.i, align 4
  br label %token_str.exit

if.entry40.i:                                     ; preds = %for.body
  %47 = call ptr @malloc(i32 64)
  store i64 6072342424809783884, ptr %47, align 8
  %48 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %48, align 8
  %memberidx.i.i336.i = getelementptr inbounds %string, ptr %48, i64 0, i32 1
  store ptr %47, ptr %memberidx.i.i336.i, align 8
  %memberidx1.i.i337.i = getelementptr inbounds %string, ptr %48, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i337.i, align 4
  %memberidx2.i.i338.i = getelementptr inbounds %string, ptr %48, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i338.i, align 4
  br label %token_str.exit

if.entry43.i:                                     ; preds = %for.body
  %49 = call ptr @malloc(i32 64)
  store i64 6072342424809783890, ptr %49, align 8
  %50 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %50, align 8
  %memberidx.i.i339.i = getelementptr inbounds %string, ptr %50, i64 0, i32 1
  store ptr %49, ptr %memberidx.i.i339.i, align 8
  %memberidx1.i.i340.i = getelementptr inbounds %string, ptr %50, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i340.i, align 4
  %memberidx2.i.i341.i = getelementptr inbounds %string, ptr %50, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i341.i, align 4
  br label %token_str.exit

if.entry46.i:                                     ; preds = %for.body
  %51 = call ptr @malloc(i32 24)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %51, ptr noundef nonnull align 8 dereferenceable(3) @68, i64 3, i1 false)
  %52 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %52, align 8
  %memberidx.i.i342.i = getelementptr inbounds %string, ptr %52, i64 0, i32 1
  store ptr %51, ptr %memberidx.i.i342.i, align 8
  %memberidx1.i.i343.i = getelementptr inbounds %string, ptr %52, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i343.i, align 4
  %memberidx2.i.i344.i = getelementptr inbounds %string, ptr %52, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i344.i, align 4
  br label %token_str.exit

if.entry49.i:                                     ; preds = %for.body
  %53 = call ptr @malloc(i32 40)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %53, ptr noundef nonnull align 8 dereferenceable(5) @69, i64 5, i1 false)
  %54 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %54, align 8
  %memberidx.i.i345.i = getelementptr inbounds %string, ptr %54, i64 0, i32 1
  store ptr %53, ptr %memberidx.i.i345.i, align 8
  %memberidx1.i.i346.i = getelementptr inbounds %string, ptr %54, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i346.i, align 4
  %memberidx2.i.i347.i = getelementptr inbounds %string, ptr %54, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i347.i, align 4
  br label %token_str.exit

if.entry52.i:                                     ; preds = %for.body
  %55 = call ptr @malloc(i32 16)
  store i16 20044, ptr %55, align 8
  %56 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %56, align 8
  %memberidx.i.i348.i = getelementptr inbounds %string, ptr %56, i64 0, i32 1
  store ptr %55, ptr %memberidx.i.i348.i, align 8
  %memberidx1.i.i349.i = getelementptr inbounds %string, ptr %56, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i349.i, align 4
  %memberidx2.i.i350.i = getelementptr inbounds %string, ptr %56, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i350.i, align 4
  br label %token_str.exit

if.entry55.i:                                     ; preds = %for.body
  %57 = call ptr @malloc(i32 24)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %57, ptr noundef nonnull align 8 dereferenceable(3) @70, i64 3, i1 false)
  %58 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %58, align 8
  %memberidx.i.i351.i = getelementptr inbounds %string, ptr %58, i64 0, i32 1
  store ptr %57, ptr %memberidx.i.i351.i, align 8
  %memberidx1.i.i352.i = getelementptr inbounds %string, ptr %58, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i352.i, align 4
  %memberidx2.i.i353.i = getelementptr inbounds %string, ptr %58, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i353.i, align 4
  br label %token_str.exit

if.entry58.i:                                     ; preds = %for.body
  %59 = call ptr @malloc(i32 32)
  store i32 1380010051, ptr %59, align 8
  %60 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %60, align 8
  %memberidx.i.i354.i = getelementptr inbounds %string, ptr %60, i64 0, i32 1
  store ptr %59, ptr %memberidx.i.i354.i, align 8
  %memberidx1.i.i355.i = getelementptr inbounds %string, ptr %60, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i355.i, align 4
  %memberidx2.i.i356.i = getelementptr inbounds %string, ptr %60, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i356.i, align 4
  br label %token_str.exit

if.entry61.i:                                     ; preds = %for.body
  %61 = call ptr @malloc(i32 24)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %61, ptr noundef nonnull align 8 dereferenceable(3) @71, i64 3, i1 false)
  %62 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %62, align 8
  %memberidx.i.i357.i = getelementptr inbounds %string, ptr %62, i64 0, i32 1
  store ptr %61, ptr %memberidx.i.i357.i, align 8
  %memberidx1.i.i358.i = getelementptr inbounds %string, ptr %62, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i358.i, align 4
  %memberidx2.i.i359.i = getelementptr inbounds %string, ptr %62, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i359.i, align 4
  br label %token_str.exit

if.entry64.i:                                     ; preds = %for.body
  %63 = call ptr @malloc(i32 32)
  store i32 1397052753, ptr %63, align 8
  %64 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %64, align 8
  %memberidx.i.i360.i = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  store ptr %63, ptr %memberidx.i.i360.i, align 8
  %memberidx1.i.i361.i = getelementptr inbounds %string, ptr %64, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i361.i, align 4
  %memberidx2.i.i362.i = getelementptr inbounds %string, ptr %64, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i362.i, align 4
  br label %token_str.exit

if.entry67.i:                                     ; preds = %for.body
  %65 = call ptr @malloc(i32 24)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %65, ptr noundef nonnull align 8 dereferenceable(3) @72, i64 3, i1 false)
  %66 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %66, align 8
  %memberidx.i.i363.i = getelementptr inbounds %string, ptr %66, i64 0, i32 1
  store ptr %65, ptr %memberidx.i.i363.i, align 8
  %memberidx1.i.i364.i = getelementptr inbounds %string, ptr %66, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i364.i, align 4
  %memberidx2.i.i365.i = getelementptr inbounds %string, ptr %66, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i365.i, align 4
  br label %token_str.exit

if.entry70.i:                                     ; preds = %for.body
  %67 = call ptr @malloc(i32 16)
  store i16 20805, ptr %67, align 8
  %68 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %68, align 8
  %memberidx.i.i366.i = getelementptr inbounds %string, ptr %68, i64 0, i32 1
  store ptr %67, ptr %memberidx.i.i366.i, align 8
  %memberidx1.i.i367.i = getelementptr inbounds %string, ptr %68, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i367.i, align 4
  %memberidx2.i.i368.i = getelementptr inbounds %string, ptr %68, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i368.i, align 4
  br label %token_str.exit

if.entry73.i:                                     ; preds = %for.body
  %69 = call ptr @malloc(i32 24)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %69, ptr noundef nonnull align 8 dereferenceable(3) @73, i64 3, i1 false)
  %70 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %70, align 8
  %memberidx.i.i369.i = getelementptr inbounds %string, ptr %70, i64 0, i32 1
  store ptr %69, ptr %memberidx.i.i369.i, align 8
  %memberidx1.i.i370.i = getelementptr inbounds %string, ptr %70, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i370.i, align 4
  %memberidx2.i.i371.i = getelementptr inbounds %string, ptr %70, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i371.i, align 4
  br label %token_str.exit

if.entry76.i:                                     ; preds = %for.body
  %71 = call ptr @malloc(i32 24)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %71, ptr noundef nonnull align 8 dereferenceable(3) @74, i64 3, i1 false)
  %72 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %72, align 8
  %memberidx.i.i372.i = getelementptr inbounds %string, ptr %72, i64 0, i32 1
  store ptr %71, ptr %memberidx.i.i372.i, align 8
  %memberidx1.i.i373.i = getelementptr inbounds %string, ptr %72, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i373.i, align 4
  %memberidx2.i.i374.i = getelementptr inbounds %string, ptr %72, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i374.i, align 4
  br label %token_str.exit

if.entry79.i:                                     ; preds = %for.body
  %73 = call ptr @malloc(i32 16)
  store i16 21575, ptr %73, align 8
  %74 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %74, align 8
  %memberidx.i.i375.i = getelementptr inbounds %string, ptr %74, i64 0, i32 1
  store ptr %73, ptr %memberidx.i.i375.i, align 8
  %memberidx1.i.i376.i = getelementptr inbounds %string, ptr %74, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i376.i, align 4
  %memberidx2.i.i377.i = getelementptr inbounds %string, ptr %74, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i377.i, align 4
  br label %token_str.exit

if.entry82.i:                                     ; preds = %for.body
  %75 = call ptr @malloc(i32 16)
  store i16 21580, ptr %75, align 8
  %76 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %76, align 8
  %memberidx.i.i378.i = getelementptr inbounds %string, ptr %76, i64 0, i32 1
  store ptr %75, ptr %memberidx.i.i378.i, align 8
  %memberidx1.i.i379.i = getelementptr inbounds %string, ptr %76, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i379.i, align 4
  %memberidx2.i.i380.i = getelementptr inbounds %string, ptr %76, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i380.i, align 4
  br label %token_str.exit

if.entry85.i:                                     ; preds = %for.body
  %77 = call ptr @malloc(i32 24)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %77, ptr noundef nonnull align 8 dereferenceable(3) @75, i64 3, i1 false)
  %78 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %78, align 8
  %memberidx.i.i381.i = getelementptr inbounds %string, ptr %78, i64 0, i32 1
  store ptr %77, ptr %memberidx.i.i381.i, align 8
  %memberidx1.i.i382.i = getelementptr inbounds %string, ptr %78, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i382.i, align 4
  %memberidx2.i.i383.i = getelementptr inbounds %string, ptr %78, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i383.i, align 4
  br label %token_str.exit

if.entry88.i:                                     ; preds = %for.body
  %79 = call ptr @malloc(i32 24)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %79, ptr noundef nonnull align 8 dereferenceable(3) @76, i64 3, i1 false)
  %80 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %80, align 8
  %memberidx.i.i384.i = getelementptr inbounds %string, ptr %80, i64 0, i32 1
  store ptr %79, ptr %memberidx.i.i384.i, align 8
  %memberidx1.i.i385.i = getelementptr inbounds %string, ptr %80, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i385.i, align 4
  %memberidx2.i.i386.i = getelementptr inbounds %string, ptr %80, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i386.i, align 4
  br label %token_str.exit

if.entry91.i:                                     ; preds = %for.body
  %81 = call ptr @malloc(i32 40)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %81, ptr noundef nonnull align 8 dereferenceable(5) @77, i64 5, i1 false)
  %82 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %82, align 8
  %memberidx.i.i387.i = getelementptr inbounds %string, ptr %82, i64 0, i32 1
  store ptr %81, ptr %memberidx.i.i387.i, align 8
  %memberidx1.i.i388.i = getelementptr inbounds %string, ptr %82, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i388.i, align 4
  %memberidx2.i.i389.i = getelementptr inbounds %string, ptr %82, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i389.i, align 4
  br label %token_str.exit

if.entry94.i:                                     ; preds = %for.body
  %83 = call ptr @malloc(i32 24)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %83, ptr noundef nonnull align 8 dereferenceable(3) @78, i64 3, i1 false)
  %84 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %84, align 8
  %memberidx.i.i390.i = getelementptr inbounds %string, ptr %84, i64 0, i32 1
  store ptr %83, ptr %memberidx.i.i390.i, align 8
  %memberidx1.i.i391.i = getelementptr inbounds %string, ptr %84, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i391.i, align 4
  %memberidx2.i.i392.i = getelementptr inbounds %string, ptr %84, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i392.i, align 4
  br label %token_str.exit

if.entry97.i:                                     ; preds = %for.body
  %85 = call ptr @malloc(i32 24)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %85, ptr noundef nonnull align 8 dereferenceable(3) @79, i64 3, i1 false)
  %86 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %86, align 8
  %memberidx.i.i393.i = getelementptr inbounds %string, ptr %86, i64 0, i32 1
  store ptr %85, ptr %memberidx.i.i393.i, align 8
  %memberidx1.i.i394.i = getelementptr inbounds %string, ptr %86, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i394.i, align 4
  %memberidx2.i.i395.i = getelementptr inbounds %string, ptr %86, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i395.i, align 4
  br label %token_str.exit

if.entry100.i:                                    ; preds = %for.body
  %87 = call ptr @malloc(i32 16)
  store i16 19539, ptr %87, align 8
  %88 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %88, align 8
  %memberidx.i.i396.i = getelementptr inbounds %string, ptr %88, i64 0, i32 1
  store ptr %87, ptr %memberidx.i.i396.i, align 8
  %memberidx1.i.i397.i = getelementptr inbounds %string, ptr %88, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i397.i, align 4
  %memberidx2.i.i398.i = getelementptr inbounds %string, ptr %88, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i398.i, align 4
  br label %token_str.exit

if.entry103.i:                                    ; preds = %for.body
  %89 = call ptr @malloc(i32 16)
  store i16 21075, ptr %89, align 8
  %90 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %90, align 8
  %memberidx.i.i399.i = getelementptr inbounds %string, ptr %90, i64 0, i32 1
  store ptr %89, ptr %memberidx.i.i399.i, align 8
  %memberidx1.i.i400.i = getelementptr inbounds %string, ptr %90, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i400.i, align 4
  %memberidx2.i.i401.i = getelementptr inbounds %string, ptr %90, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i401.i, align 4
  br label %token_str.exit

if.entry106.i:                                    ; preds = %for.body
  %91 = call ptr @malloc(i32 24)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %91, ptr noundef nonnull align 8 dereferenceable(3) @80, i64 3, i1 false)
  %92 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %92, align 8
  %memberidx.i.i402.i = getelementptr inbounds %string, ptr %92, i64 0, i32 1
  store ptr %91, ptr %memberidx.i.i402.i, align 8
  %memberidx1.i.i403.i = getelementptr inbounds %string, ptr %92, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i403.i, align 4
  %memberidx2.i.i404.i = getelementptr inbounds %string, ptr %92, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i404.i, align 4
  br label %token_str.exit

if.entry109.i:                                    ; preds = %for.body
  %93 = call ptr @malloc(i32 56)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %93, ptr noundef nonnull align 8 dereferenceable(7) @81, i64 7, i1 false)
  %94 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %94, align 8
  %memberidx.i.i405.i = getelementptr inbounds %string, ptr %94, i64 0, i32 1
  store ptr %93, ptr %memberidx.i.i405.i, align 8
  %memberidx1.i.i406.i = getelementptr inbounds %string, ptr %94, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i406.i, align 4
  %memberidx2.i.i407.i = getelementptr inbounds %string, ptr %94, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i407.i, align 4
  br label %token_str.exit

if.entry112.i:                                    ; preds = %for.body
  %95 = call ptr @malloc(i32 88)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %95, ptr noundef nonnull align 8 dereferenceable(11) @82, i64 11, i1 false)
  %96 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %96, align 8
  %memberidx.i.i408.i = getelementptr inbounds %string, ptr %96, i64 0, i32 1
  store ptr %95, ptr %memberidx.i.i408.i, align 8
  %memberidx1.i.i409.i = getelementptr inbounds %string, ptr %96, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i409.i, align 4
  %memberidx2.i.i410.i = getelementptr inbounds %string, ptr %96, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i410.i, align 4
  br label %token_str.exit

if.entry115.i:                                    ; preds = %for.body
  %97 = call ptr @malloc(i32 72)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %97, ptr noundef nonnull align 8 dereferenceable(9) @83, i64 9, i1 false)
  %98 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %98, align 8
  %memberidx.i.i411.i = getelementptr inbounds %string, ptr %98, i64 0, i32 1
  store ptr %97, ptr %memberidx.i.i411.i, align 8
  %memberidx1.i.i412.i = getelementptr inbounds %string, ptr %98, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i412.i, align 4
  %memberidx2.i.i413.i = getelementptr inbounds %string, ptr %98, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i413.i, align 4
  br label %token_str.exit

if.entry118.i:                                    ; preds = %for.body
  %99 = call ptr @malloc(i32 48)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %99, ptr noundef nonnull align 8 dereferenceable(6) @84, i64 6, i1 false)
  %100 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %100, align 8
  %memberidx.i.i414.i = getelementptr inbounds %string, ptr %100, i64 0, i32 1
  store ptr %99, ptr %memberidx.i.i414.i, align 8
  %memberidx1.i.i415.i = getelementptr inbounds %string, ptr %100, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i415.i, align 4
  %memberidx2.i.i416.i = getelementptr inbounds %string, ptr %100, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i416.i, align 4
  br label %token_str.exit

if.entry121.i:                                    ; preds = %for.body
  %101 = call ptr @malloc(i32 40)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %101, ptr noundef nonnull align 8 dereferenceable(5) @85, i64 5, i1 false)
  %102 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %102, align 8
  %memberidx.i.i417.i = getelementptr inbounds %string, ptr %102, i64 0, i32 1
  store ptr %101, ptr %memberidx.i.i417.i, align 8
  %memberidx1.i.i418.i = getelementptr inbounds %string, ptr %102, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i418.i, align 4
  %memberidx2.i.i419.i = getelementptr inbounds %string, ptr %102, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i419.i, align 4
  br label %token_str.exit

if.entry124.i:                                    ; preds = %for.body
  %103 = call ptr @malloc(i32 48)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %103, ptr noundef nonnull align 8 dereferenceable(6) @86, i64 6, i1 false)
  %104 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %104, align 8
  %memberidx.i.i420.i = getelementptr inbounds %string, ptr %104, i64 0, i32 1
  store ptr %103, ptr %memberidx.i.i420.i, align 8
  %memberidx1.i.i421.i = getelementptr inbounds %string, ptr %104, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i421.i, align 4
  %memberidx2.i.i422.i = getelementptr inbounds %string, ptr %104, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i422.i, align 4
  br label %token_str.exit

if.entry127.i:                                    ; preds = %for.body
  %105 = call ptr @malloc(i32 64)
  store i64 6290226120332562243, ptr %105, align 8
  %106 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %106, align 8
  %memberidx.i.i423.i = getelementptr inbounds %string, ptr %106, i64 0, i32 1
  store ptr %105, ptr %memberidx.i.i423.i, align 8
  %memberidx1.i.i424.i = getelementptr inbounds %string, ptr %106, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i424.i, align 4
  %memberidx2.i.i425.i = getelementptr inbounds %string, ptr %106, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i425.i, align 4
  br label %token_str.exit

if.entry130.i:                                    ; preds = %for.body
  %107 = call ptr @malloc(i32 40)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %107, ptr noundef nonnull align 8 dereferenceable(5) @87, i64 5, i1 false)
  %108 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %108, align 8
  %memberidx.i.i426.i = getelementptr inbounds %string, ptr %108, i64 0, i32 1
  store ptr %107, ptr %memberidx.i.i426.i, align 8
  %memberidx1.i.i427.i = getelementptr inbounds %string, ptr %108, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i427.i, align 4
  %memberidx2.i.i428.i = getelementptr inbounds %string, ptr %108, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i428.i, align 4
  br label %token_str.exit

if.entry133.i:                                    ; preds = %for.body
  %109 = call ptr @malloc(i32 56)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %109, ptr noundef nonnull align 8 dereferenceable(7) @88, i64 7, i1 false)
  %110 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %110, align 8
  %memberidx.i.i429.i = getelementptr inbounds %string, ptr %110, i64 0, i32 1
  store ptr %109, ptr %memberidx.i.i429.i, align 8
  %memberidx1.i.i430.i = getelementptr inbounds %string, ptr %110, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i430.i, align 4
  %memberidx2.i.i431.i = getelementptr inbounds %string, ptr %110, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i431.i, align 4
  br label %token_str.exit

if.entry136.i:                                    ; preds = %for.body
  %111 = call ptr @malloc(i32 56)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %111, ptr noundef nonnull align 8 dereferenceable(7) @89, i64 7, i1 false)
  %112 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %112, align 8
  %memberidx.i.i432.i = getelementptr inbounds %string, ptr %112, i64 0, i32 1
  store ptr %111, ptr %memberidx.i.i432.i, align 8
  %memberidx1.i.i433.i = getelementptr inbounds %string, ptr %112, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i433.i, align 4
  %memberidx2.i.i434.i = getelementptr inbounds %string, ptr %112, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i434.i, align 4
  br label %token_str.exit

if.entry139.i:                                    ; preds = %for.body
  %113 = call ptr @malloc(i32 40)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %113, ptr noundef nonnull align 8 dereferenceable(5) @90, i64 5, i1 false)
  %114 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %114, align 8
  %memberidx.i.i435.i = getelementptr inbounds %string, ptr %114, i64 0, i32 1
  store ptr %113, ptr %memberidx.i.i435.i, align 8
  %memberidx1.i.i436.i = getelementptr inbounds %string, ptr %114, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i436.i, align 4
  %memberidx2.i.i437.i = getelementptr inbounds %string, ptr %114, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i437.i, align 4
  br label %token_str.exit

if.entry142.i:                                    ; preds = %for.body
  %115 = call ptr @malloc(i32 40)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %115, ptr noundef nonnull align 8 dereferenceable(5) @91, i64 5, i1 false)
  %116 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %116, align 8
  %memberidx.i.i438.i = getelementptr inbounds %string, ptr %116, i64 0, i32 1
  store ptr %115, ptr %memberidx.i.i438.i, align 8
  %memberidx1.i.i439.i = getelementptr inbounds %string, ptr %116, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i439.i, align 4
  %memberidx2.i.i440.i = getelementptr inbounds %string, ptr %116, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i440.i, align 4
  br label %token_str.exit

if.entry145.i:                                    ; preds = %for.body
  %117 = call ptr @malloc(i32 48)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %117, ptr noundef nonnull align 8 dereferenceable(6) @92, i64 6, i1 false)
  %118 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %118, align 8
  %memberidx.i.i441.i = getelementptr inbounds %string, ptr %118, i64 0, i32 1
  store ptr %117, ptr %memberidx.i.i441.i, align 8
  %memberidx1.i.i442.i = getelementptr inbounds %string, ptr %118, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i442.i, align 4
  %memberidx2.i.i443.i = getelementptr inbounds %string, ptr %118, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i443.i, align 4
  br label %token_str.exit

if.entry148.i:                                    ; preds = %for.body
  %119 = call ptr @malloc(i32 48)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %119, ptr noundef nonnull align 8 dereferenceable(6) @93, i64 6, i1 false)
  %120 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %120, align 8
  %memberidx.i.i444.i = getelementptr inbounds %string, ptr %120, i64 0, i32 1
  store ptr %119, ptr %memberidx.i.i444.i, align 8
  %memberidx1.i.i445.i = getelementptr inbounds %string, ptr %120, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i445.i, align 4
  %memberidx2.i.i446.i = getelementptr inbounds %string, ptr %120, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i446.i, align 4
  br label %token_str.exit

if.entry151.i:                                    ; preds = %for.body
  %121 = call ptr @malloc(i32 48)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %121, ptr noundef nonnull align 8 dereferenceable(6) @94, i64 6, i1 false)
  %122 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %122, align 8
  %memberidx.i.i447.i = getelementptr inbounds %string, ptr %122, i64 0, i32 1
  store ptr %121, ptr %memberidx.i.i447.i, align 8
  %memberidx1.i.i448.i = getelementptr inbounds %string, ptr %122, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i448.i, align 4
  %memberidx2.i.i449.i = getelementptr inbounds %string, ptr %122, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i449.i, align 4
  br label %token_str.exit

if.entry154.i:                                    ; preds = %for.body
  %123 = call ptr @malloc(i32 56)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %123, ptr noundef nonnull align 8 dereferenceable(7) @95, i64 7, i1 false)
  %124 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %124, align 8
  %memberidx.i.i450.i = getelementptr inbounds %string, ptr %124, i64 0, i32 1
  store ptr %123, ptr %memberidx.i.i450.i, align 8
  %memberidx1.i.i451.i = getelementptr inbounds %string, ptr %124, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i451.i, align 4
  %memberidx2.i.i452.i = getelementptr inbounds %string, ptr %124, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i452.i, align 4
  br label %token_str.exit

if.entry157.i:                                    ; preds = %for.body
  %125 = call ptr @malloc(i32 48)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %125, ptr noundef nonnull align 8 dereferenceable(6) @96, i64 6, i1 false)
  %126 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %126, align 8
  %memberidx.i.i453.i = getelementptr inbounds %string, ptr %126, i64 0, i32 1
  store ptr %125, ptr %memberidx.i.i453.i, align 8
  %memberidx1.i.i454.i = getelementptr inbounds %string, ptr %126, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i454.i, align 4
  %memberidx2.i.i455.i = getelementptr inbounds %string, ptr %126, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i455.i, align 4
  br label %token_str.exit

if.entry160.i:                                    ; preds = %for.body
  %127 = call ptr @malloc(i32 48)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %127, ptr noundef nonnull align 8 dereferenceable(6) @97, i64 6, i1 false)
  %128 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %128, align 8
  %memberidx.i.i456.i = getelementptr inbounds %string, ptr %128, i64 0, i32 1
  store ptr %127, ptr %memberidx.i.i456.i, align 8
  %memberidx1.i.i457.i = getelementptr inbounds %string, ptr %128, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i457.i, align 4
  %memberidx2.i.i458.i = getelementptr inbounds %string, ptr %128, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i458.i, align 4
  br label %token_str.exit

if.entry163.i:                                    ; preds = %for.body
  %129 = call ptr @malloc(i32 48)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %129, ptr noundef nonnull align 8 dereferenceable(6) @98, i64 6, i1 false)
  %130 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %130, align 8
  %memberidx.i.i459.i = getelementptr inbounds %string, ptr %130, i64 0, i32 1
  store ptr %129, ptr %memberidx.i.i459.i, align 8
  %memberidx1.i.i460.i = getelementptr inbounds %string, ptr %130, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i460.i, align 4
  %memberidx2.i.i461.i = getelementptr inbounds %string, ptr %130, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i461.i, align 4
  br label %token_str.exit

if.entry166.i:                                    ; preds = %for.body
  %131 = call ptr @malloc(i32 48)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %131, ptr noundef nonnull align 8 dereferenceable(6) @99, i64 6, i1 false)
  %132 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %132, align 8
  %memberidx.i.i462.i = getelementptr inbounds %string, ptr %132, i64 0, i32 1
  store ptr %131, ptr %memberidx.i.i462.i, align 8
  %memberidx1.i.i463.i = getelementptr inbounds %string, ptr %132, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i463.i, align 4
  %memberidx2.i.i464.i = getelementptr inbounds %string, ptr %132, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i464.i, align 4
  br label %token_str.exit

if.entry169.i:                                    ; preds = %for.body
  %133 = call ptr @malloc(i32 64)
  store i64 6290226120030637126, ptr %133, align 8
  %134 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %134, align 8
  %memberidx.i.i465.i = getelementptr inbounds %string, ptr %134, i64 0, i32 1
  store ptr %133, ptr %memberidx.i.i465.i, align 8
  %memberidx1.i.i466.i = getelementptr inbounds %string, ptr %134, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i466.i, align 4
  %memberidx2.i.i467.i = getelementptr inbounds %string, ptr %134, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i467.i, align 4
  br label %token_str.exit

if.entry172.i:                                    ; preds = %for.body
  %135 = call ptr @malloc(i32 56)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %135, ptr noundef nonnull align 8 dereferenceable(7) @100, i64 7, i1 false)
  %136 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %136, align 8
  %memberidx.i.i468.i = getelementptr inbounds %string, ptr %136, i64 0, i32 1
  store ptr %135, ptr %memberidx.i.i468.i, align 8
  %memberidx1.i.i469.i = getelementptr inbounds %string, ptr %136, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i469.i, align 4
  %memberidx2.i.i470.i = getelementptr inbounds %string, ptr %136, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i470.i, align 4
  br label %token_str.exit

if.entry175.i:                                    ; preds = %for.body
  %137 = call ptr @malloc(i32 48)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %137, ptr noundef nonnull align 8 dereferenceable(6) @101, i64 6, i1 false)
  %138 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %138, align 8
  %memberidx.i.i471.i = getelementptr inbounds %string, ptr %138, i64 0, i32 1
  store ptr %137, ptr %memberidx.i.i471.i, align 8
  %memberidx1.i.i472.i = getelementptr inbounds %string, ptr %138, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i472.i, align 4
  %memberidx2.i.i473.i = getelementptr inbounds %string, ptr %138, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i473.i, align 4
  br label %token_str.exit

if.entry178.i:                                    ; preds = %for.body
  %139 = call ptr @malloc(i32 64)
  store i64 6290226055790282839, ptr %139, align 8
  %140 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %140, align 8
  %memberidx.i.i474.i = getelementptr inbounds %string, ptr %140, i64 0, i32 1
  store ptr %139, ptr %memberidx.i.i474.i, align 8
  %memberidx1.i.i475.i = getelementptr inbounds %string, ptr %140, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i475.i, align 4
  %memberidx2.i.i476.i = getelementptr inbounds %string, ptr %140, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i476.i, align 4
  br label %token_str.exit

if.entry181.i:                                    ; preds = %for.body
  %141 = call ptr @malloc(i32 48)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %141, ptr noundef nonnull align 8 dereferenceable(6) @102, i64 6, i1 false)
  %142 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %142, align 8
  %memberidx.i.i477.i = getelementptr inbounds %string, ptr %142, i64 0, i32 1
  store ptr %141, ptr %memberidx.i.i477.i, align 8
  %memberidx1.i.i478.i = getelementptr inbounds %string, ptr %142, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i478.i, align 4
  %memberidx2.i.i479.i = getelementptr inbounds %string, ptr %142, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i479.i, align 4
  br label %token_str.exit

if.entry184.i:                                    ; preds = %for.body
  %143 = call ptr @malloc(i32 64)
  store i64 6290226081375277634, ptr %143, align 8
  %144 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %144, align 8
  %memberidx.i.i480.i = getelementptr inbounds %string, ptr %144, i64 0, i32 1
  store ptr %143, ptr %memberidx.i.i480.i, align 8
  %memberidx1.i.i481.i = getelementptr inbounds %string, ptr %144, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i481.i, align 4
  %memberidx2.i.i482.i = getelementptr inbounds %string, ptr %144, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i482.i, align 4
  br label %token_str.exit

if.entry187.i:                                    ; preds = %for.body
  %145 = call ptr @malloc(i32 88)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %145, ptr noundef nonnull align 8 dereferenceable(11) @103, i64 11, i1 false)
  %146 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %146, align 8
  %memberidx.i.i483.i = getelementptr inbounds %string, ptr %146, i64 0, i32 1
  store ptr %145, ptr %memberidx.i.i483.i, align 8
  %memberidx1.i.i484.i = getelementptr inbounds %string, ptr %146, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i484.i, align 4
  %memberidx2.i.i485.i = getelementptr inbounds %string, ptr %146, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i485.i, align 4
  br label %token_str.exit

ifend189.i:                                       ; preds = %for.body
  switch i64 %18, label %ifend222.i [
    i64 77, label %if.entry190.i
    i64 78, label %if.entry193.i
    i64 79, label %if.entry196.i
    i64 80, label %if.entry199.i
    i64 81, label %if.entry202.i
    i64 82, label %if.entry205.i
    i64 83, label %if.entry208.i
    i64 84, label %if.entry211.i
    i64 85, label %if.entry214.i
    i64 86, label %if.entry217.i
    i64 56, label %if.entry220.i
  ]

if.entry190.i:                                    ; preds = %ifend189.i
  %147 = call ptr @malloc(i32 72)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %147, ptr noundef nonnull align 8 dereferenceable(9) @104, i64 9, i1 false)
  %148 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %148, align 8
  %memberidx.i.i486.i = getelementptr inbounds %string, ptr %148, i64 0, i32 1
  store ptr %147, ptr %memberidx.i.i486.i, align 8
  %memberidx1.i.i487.i = getelementptr inbounds %string, ptr %148, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i487.i, align 4
  %memberidx2.i.i488.i = getelementptr inbounds %string, ptr %148, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i488.i, align 4
  br label %token_str.exit

if.entry193.i:                                    ; preds = %ifend189.i
  %149 = call ptr @malloc(i32 72)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %149, ptr noundef nonnull align 8 dereferenceable(9) @105, i64 9, i1 false)
  %150 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %150, align 8
  %memberidx.i.i489.i = getelementptr inbounds %string, ptr %150, i64 0, i32 1
  store ptr %149, ptr %memberidx.i.i489.i, align 8
  %memberidx1.i.i490.i = getelementptr inbounds %string, ptr %150, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i490.i, align 4
  %memberidx2.i.i491.i = getelementptr inbounds %string, ptr %150, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i491.i, align 4
  br label %token_str.exit

if.entry196.i:                                    ; preds = %ifend189.i
  %151 = call ptr @malloc(i32 80)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(10) %151, ptr noundef nonnull align 8 dereferenceable(10) @106, i64 10, i1 false)
  %152 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %152, align 8
  %memberidx.i.i492.i = getelementptr inbounds %string, ptr %152, i64 0, i32 1
  store ptr %151, ptr %memberidx.i.i492.i, align 8
  %memberidx1.i.i493.i = getelementptr inbounds %string, ptr %152, i64 0, i32 2
  store i64 10, ptr %memberidx1.i.i493.i, align 4
  %memberidx2.i.i494.i = getelementptr inbounds %string, ptr %152, i64 0, i32 3
  store i64 10, ptr %memberidx2.i.i494.i, align 4
  br label %token_str.exit

if.entry199.i:                                    ; preds = %ifend189.i
  %153 = call ptr @malloc(i32 72)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %153, ptr noundef nonnull align 8 dereferenceable(9) @107, i64 9, i1 false)
  %154 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %154, align 8
  %memberidx.i.i495.i = getelementptr inbounds %string, ptr %154, i64 0, i32 1
  store ptr %153, ptr %memberidx.i.i495.i, align 8
  %memberidx1.i.i496.i = getelementptr inbounds %string, ptr %154, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i496.i, align 4
  %memberidx2.i.i497.i = getelementptr inbounds %string, ptr %154, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i497.i, align 4
  br label %token_str.exit

if.entry202.i:                                    ; preds = %ifend189.i
  %155 = call ptr @malloc(i32 96)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %155, ptr noundef nonnull align 8 dereferenceable(12) @108, i64 12, i1 false)
  %156 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %156, align 8
  %memberidx.i.i498.i = getelementptr inbounds %string, ptr %156, i64 0, i32 1
  store ptr %155, ptr %memberidx.i.i498.i, align 8
  %memberidx1.i.i499.i = getelementptr inbounds %string, ptr %156, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i499.i, align 4
  %memberidx2.i.i500.i = getelementptr inbounds %string, ptr %156, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i500.i, align 4
  br label %token_str.exit

if.entry205.i:                                    ; preds = %ifend189.i
  %157 = call ptr @malloc(i32 40)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %157, ptr noundef nonnull align 8 dereferenceable(5) @109, i64 5, i1 false)
  %158 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %158, align 8
  %memberidx.i.i501.i = getelementptr inbounds %string, ptr %158, i64 0, i32 1
  store ptr %157, ptr %memberidx.i.i501.i, align 8
  %memberidx1.i.i502.i = getelementptr inbounds %string, ptr %158, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i502.i, align 4
  %memberidx2.i.i503.i = getelementptr inbounds %string, ptr %158, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i503.i, align 4
  br label %token_str.exit

if.entry208.i:                                    ; preds = %ifend189.i
  %159 = call ptr @malloc(i32 64)
  store i64 6290226116036742211, ptr %159, align 8
  %160 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %160, align 8
  %memberidx.i.i504.i = getelementptr inbounds %string, ptr %160, i64 0, i32 1
  store ptr %159, ptr %memberidx.i.i504.i, align 8
  %memberidx1.i.i505.i = getelementptr inbounds %string, ptr %160, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i505.i, align 4
  %memberidx2.i.i506.i = getelementptr inbounds %string, ptr %160, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i506.i, align 4
  br label %token_str.exit

if.entry211.i:                                    ; preds = %ifend189.i
  %161 = call ptr @malloc(i32 56)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %161, ptr noundef nonnull align 8 dereferenceable(7) @110, i64 7, i1 false)
  %162 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %162, align 8
  %memberidx.i.i507.i = getelementptr inbounds %string, ptr %162, i64 0, i32 1
  store ptr %161, ptr %memberidx.i.i507.i, align 8
  %memberidx1.i.i508.i = getelementptr inbounds %string, ptr %162, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i508.i, align 4
  %memberidx2.i.i509.i = getelementptr inbounds %string, ptr %162, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i509.i, align 4
  br label %token_str.exit

if.entry214.i:                                    ; preds = %ifend189.i
  %163 = call ptr @malloc(i32 48)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %163, ptr noundef nonnull align 8 dereferenceable(6) @111, i64 6, i1 false)
  %164 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %164, align 8
  %memberidx.i.i510.i = getelementptr inbounds %string, ptr %164, i64 0, i32 1
  store ptr %163, ptr %memberidx.i.i510.i, align 8
  %memberidx1.i.i511.i = getelementptr inbounds %string, ptr %164, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i511.i, align 4
  %memberidx2.i.i512.i = getelementptr inbounds %string, ptr %164, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i512.i, align 4
  br label %token_str.exit

if.entry217.i:                                    ; preds = %ifend189.i
  %165 = call ptr @malloc(i32 40)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %165, ptr noundef nonnull align 8 dereferenceable(5) @112, i64 5, i1 false)
  %166 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %166, align 8
  %memberidx.i.i513.i = getelementptr inbounds %string, ptr %166, i64 0, i32 1
  store ptr %165, ptr %memberidx.i.i513.i, align 8
  %memberidx1.i.i514.i = getelementptr inbounds %string, ptr %166, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i514.i, align 4
  %memberidx2.i.i515.i = getelementptr inbounds %string, ptr %166, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i515.i, align 4
  br label %token_str.exit

if.entry220.i:                                    ; preds = %ifend189.i
  %167 = call ptr @malloc(i32 48)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %167, ptr noundef nonnull align 8 dereferenceable(6) @113, i64 6, i1 false)
  %168 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %168, align 8
  %memberidx.i.i516.i = getelementptr inbounds %string, ptr %168, i64 0, i32 1
  store ptr %167, ptr %memberidx.i.i516.i, align 8
  %memberidx1.i.i517.i = getelementptr inbounds %string, ptr %168, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i517.i, align 4
  %memberidx2.i.i518.i = getelementptr inbounds %string, ptr %168, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i518.i, align 4
  br label %token_str.exit

ifend222.i:                                       ; preds = %ifend189.i
  %169 = call ptr @malloc(i32 0)
  %170 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %170, align 8
  %memberidx.i.i519.i = getelementptr inbounds %string, ptr %170, i64 0, i32 1
  store ptr %169, ptr %memberidx.i.i519.i, align 8
  %memberidx1.i.i520.i = getelementptr inbounds %string, ptr %170, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i520.i, i8 0, i64 16, i1 false)
  br label %token_str.exit

token_str.exit:                                   ; preds = %if.entry.i, %if.entry1.i, %if.entry4.i, %if.entry7.i, %if.entry10.i, %if.entry13.i, %if.entry16.i, %if.entry19.i, %if.entry22.i, %if.entry25.i, %if.entry28.i, %if.entry31.i, %if.entry34.i, %if.entry37.i, %if.entry40.i, %if.entry43.i, %if.entry46.i, %if.entry49.i, %if.entry52.i, %if.entry55.i, %if.entry58.i, %if.entry61.i, %if.entry64.i, %if.entry67.i, %if.entry70.i, %if.entry73.i, %if.entry76.i, %if.entry79.i, %if.entry82.i, %if.entry85.i, %if.entry88.i, %if.entry91.i, %if.entry94.i, %if.entry97.i, %if.entry100.i, %if.entry103.i, %if.entry106.i, %if.entry109.i, %if.entry112.i, %if.entry115.i, %if.entry118.i, %if.entry121.i, %if.entry124.i, %if.entry127.i, %if.entry130.i, %if.entry133.i, %if.entry136.i, %if.entry139.i, %if.entry142.i, %if.entry145.i, %if.entry148.i, %if.entry151.i, %if.entry154.i, %if.entry157.i, %if.entry160.i, %if.entry163.i, %if.entry166.i, %if.entry169.i, %if.entry172.i, %if.entry175.i, %if.entry178.i, %if.entry181.i, %if.entry184.i, %if.entry187.i, %if.entry190.i, %if.entry193.i, %if.entry196.i, %if.entry199.i, %if.entry202.i, %if.entry205.i, %if.entry208.i, %if.entry211.i, %if.entry214.i, %if.entry217.i, %if.entry220.i, %ifend222.i
  %common.ret.op.i = phi ptr [ %20, %if.entry.i ], [ %22, %if.entry1.i ], [ %24, %if.entry4.i ], [ %26, %if.entry7.i ], [ %28, %if.entry10.i ], [ %30, %if.entry13.i ], [ %32, %if.entry16.i ], [ %34, %if.entry19.i ], [ %36, %if.entry22.i ], [ %38, %if.entry25.i ], [ %40, %if.entry28.i ], [ %42, %if.entry31.i ], [ %44, %if.entry34.i ], [ %46, %if.entry37.i ], [ %48, %if.entry40.i ], [ %50, %if.entry43.i ], [ %52, %if.entry46.i ], [ %54, %if.entry49.i ], [ %56, %if.entry52.i ], [ %58, %if.entry55.i ], [ %60, %if.entry58.i ], [ %62, %if.entry61.i ], [ %64, %if.entry64.i ], [ %66, %if.entry67.i ], [ %68, %if.entry70.i ], [ %70, %if.entry73.i ], [ %72, %if.entry76.i ], [ %74, %if.entry79.i ], [ %76, %if.entry82.i ], [ %78, %if.entry85.i ], [ %80, %if.entry88.i ], [ %82, %if.entry91.i ], [ %84, %if.entry94.i ], [ %86, %if.entry97.i ], [ %88, %if.entry100.i ], [ %90, %if.entry103.i ], [ %92, %if.entry106.i ], [ %94, %if.entry109.i ], [ %96, %if.entry112.i ], [ %98, %if.entry115.i ], [ %100, %if.entry118.i ], [ %102, %if.entry121.i ], [ %104, %if.entry124.i ], [ %106, %if.entry127.i ], [ %108, %if.entry130.i ], [ %110, %if.entry133.i ], [ %112, %if.entry136.i ], [ %114, %if.entry139.i ], [ %116, %if.entry142.i ], [ %118, %if.entry145.i ], [ %120, %if.entry148.i ], [ %122, %if.entry151.i ], [ %124, %if.entry154.i ], [ %126, %if.entry157.i ], [ %128, %if.entry160.i ], [ %130, %if.entry163.i ], [ %132, %if.entry166.i ], [ %134, %if.entry169.i ], [ %136, %if.entry172.i ], [ %138, %if.entry175.i ], [ %140, %if.entry178.i ], [ %142, %if.entry181.i ], [ %144, %if.entry184.i ], [ %146, %if.entry187.i ], [ %148, %if.entry190.i ], [ %150, %if.entry193.i ], [ %152, %if.entry196.i ], [ %154, %if.entry199.i ], [ %156, %if.entry202.i ], [ %158, %if.entry205.i ], [ %160, %if.entry208.i ], [ %162, %if.entry211.i ], [ %164, %if.entry214.i ], [ %166, %if.entry217.i ], [ %168, %if.entry220.i ], [ %170, %ifend222.i ]
  %171 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %172 = call ptr %171(ptr nonnull %common.ret.op.i)
  %173 = alloca ptr, align 8
  %174 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %173, ptr nonnull @114, ptr %172)
  %175 = load ptr, ptr %173, align 8
  %176 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %176, align 8
  %memberidx.i28 = getelementptr inbounds %string, ptr %176, i64 0, i32 1
  store ptr %175, ptr %memberidx.i28, align 8
  %memberidx1.i29 = getelementptr inbounds %string, ptr %176, i64 0, i32 2
  store i64 %174, ptr %memberidx1.i29, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %176, i64 0, i32 3
  store i64 %174, ptr %memberidx2.i, align 4
  tail call void @free(ptr %172)
  %177 = load ptr, ptr %176, align 8
  %memberidx.i.i30 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %177, i64 0, i32 3
  %178 = load ptr, ptr %memberidx.i.i30, align 8
  %179 = call ptr %178(ptr nonnull %176)
  %180 = load i64, ptr %memberidx1.i29, align 4
  call void @write(i64 1, ptr %179, i64 %180)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %memberidx4 = getelementptr inbounds %Token, ptr %token.059, i64 0, i32 1
  %181 = load ptr, ptr %memberidx4, align 8
  %182 = load i64, ptr %181, align 4
  %memberidx7 = getelementptr inbounds %FloRange, ptr %181, i64 0, i32 1
  %183 = load i64, ptr %memberidx7, align 4
  %184 = alloca ptr, align 8
  %185 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %184, ptr nonnull @115, i64 %182, i64 %183)
  %186 = load ptr, ptr %184, align 8
  %187 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %187, align 8
  %memberidx.i32 = getelementptr inbounds %string, ptr %187, i64 0, i32 1
  store ptr %186, ptr %memberidx.i32, align 8
  %memberidx1.i33 = getelementptr inbounds %string, ptr %187, i64 0, i32 2
  store i64 %185, ptr %memberidx1.i33, align 4
  %memberidx2.i34 = getelementptr inbounds %string, ptr %187, i64 0, i32 3
  store i64 %185, ptr %memberidx2.i34, align 4
  %188 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %189 = call ptr %188(ptr nonnull %187)
  %190 = load i64, ptr %memberidx1.i33, align 4
  call void @write(i64 1, ptr %189, i64 %190)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %191 = load i64, ptr %token.059, align 4
  %.not = icmp eq i64 %191, 31
  br i1 %.not, label %else, label %if.entry

for.end:                                          ; preds = %ifend, %for.entry
  tail call void @free(ptr nonnull %7)
  %192 = call ptr @malloc(i32 8)
  store i8 93, ptr %192, align 8
  %193 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %193, align 8
  %memberidx.i.i37 = getelementptr inbounds %string, ptr %193, i64 0, i32 1
  store ptr %192, ptr %memberidx.i.i37, align 8
  %memberidx1.i.i38 = getelementptr inbounds %string, ptr %193, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i38, align 4
  %memberidx2.i.i39 = getelementptr inbounds %string, ptr %193, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i39, align 4
  %194 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %195 = call ptr %194(ptr nonnull %193)
  %196 = load i64, ptr %memberidx1.i.i38, align 4
  call void @write(i64 1, ptr %195, i64 %196)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  ret void

if.entry:                                         ; preds = %token_str.exit
  %197 = load ptr, ptr %1, align 8
  %memberidx.i42 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %197, i64 0, i32 1
  %198 = load ptr, ptr %memberidx.i42, align 8
  %199 = load ptr, ptr %memberidx4, align 8
  %200 = load i64, ptr %199, align 4
  %memberidx4.i = getelementptr inbounds %FloRange, ptr %199, i64 0, i32 1
  %201 = load i64, ptr %memberidx4.i, align 4
  %202 = sub i64 %201, %200
  %203 = call ptr %198(ptr nonnull %1, i64 %200, i64 %202)
  %204 = load ptr, ptr %203, align 8
  %memberidx9 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %204, i64 0, i32 5
  %205 = load ptr, ptr %memberidx9, align 8
  %206 = call ptr %205(ptr nonnull %203)
  %207 = alloca ptr, align 8
  %208 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %207, ptr nonnull @116, ptr %206)
  %209 = load ptr, ptr %207, align 8
  %210 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %210, align 8
  %memberidx.i44 = getelementptr inbounds %string, ptr %210, i64 0, i32 1
  store ptr %209, ptr %memberidx.i44, align 8
  %memberidx1.i45 = getelementptr inbounds %string, ptr %210, i64 0, i32 2
  store i64 %208, ptr %memberidx1.i45, align 4
  %memberidx2.i46 = getelementptr inbounds %string, ptr %210, i64 0, i32 3
  store i64 %208, ptr %memberidx2.i46, align 4
  tail call void @free(ptr %206)
  %211 = load ptr, ptr %210, align 8
  %memberidx.i.i47 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %211, i64 0, i32 3
  br label %ifend

else:                                             ; preds = %token_str.exit
  %212 = call ptr @malloc(i32 88)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %212, ptr noundef nonnull align 8 dereferenceable(11) @117, i64 11, i1 false)
  %213 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %213, align 8
  %memberidx.i.i49 = getelementptr inbounds %string, ptr %213, i64 0, i32 1
  store ptr %212, ptr %memberidx.i.i49, align 8
  %memberidx1.i.i50 = getelementptr inbounds %string, ptr %213, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i50, align 4
  %memberidx2.i.i51 = getelementptr inbounds %string, ptr %213, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i51, align 4
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %.sink = phi ptr [ getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), %else ], [ %memberidx.i.i47, %if.entry ]
  %.sink61 = phi ptr [ %213, %else ], [ %210, %if.entry ]
  %memberidx1.i.i50.sink = phi ptr [ %memberidx1.i.i50, %else ], [ %memberidx1.i45, %if.entry ]
  %214 = load ptr, ptr %.sink, align 8
  %215 = call ptr %214(ptr nonnull %.sink61)
  %216 = load i64, ptr %memberidx1.i.i50.sink, align 4
  call void @write(i64 1, ptr %215, i64 %216)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %217 = call ptr @malloc(i32 24)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %217, ptr noundef nonnull align 8 dereferenceable(3) @118, i64 3, i1 false)
  %218 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %218, align 8
  %memberidx.i.i54 = getelementptr inbounds %string, ptr %218, i64 0, i32 1
  store ptr %217, ptr %memberidx.i.i54, align 8
  %memberidx1.i.i55 = getelementptr inbounds %string, ptr %218, i64 0, i32 2
  store i64 3, ptr %memberidx1.i.i55, align 4
  %memberidx2.i.i56 = getelementptr inbounds %string, ptr %218, i64 0, i32 3
  store i64 3, ptr %memberidx2.i.i56, align 4
  %219 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %220 = call ptr %219(ptr nonnull %218)
  %221 = load i64, ptr %memberidx1.i.i55, align 4
  call void @write(i64 1, ptr %220, i64 %221)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  %222 = load ptr, ptr %7, align 8
  %223 = load ptr, ptr %222, align 8
  %224 = call ptr %223(ptr nonnull %7)
  %225 = load i1, ptr %memberidx.i.i20, align 1
  br i1 %225, label %for.end, label %for.body
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_IdentifierToken__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_IdentifierToken_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_IdentifierToken_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_IdentifierToken____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_IdentifierToken_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_IdentifierToken_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_IdentifierToken_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_IdentifierToken_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ImportNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ImportNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ImportNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_ImportNode____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_ImportNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_ImportNode_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_ImportNode_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_ImportNode_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_VarDeclarationStatement__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_VarDeclarationStatement____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_VarDeclarationStatement_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_VarDeclarationStatement_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_VarDeclarationStatement_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_VarDeclarationStatement_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_EnumNodeField__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_EnumNodeField_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_EnumNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_EnumNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_EnumNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_EnumNode____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_EnumNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_EnumNode_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_EnumNode_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_EnumNode_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_TypeAliasNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_TypeAliasNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_TypeAliasNode____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_TypeAliasNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_TypeAliasNode_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_TypeAliasNode_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_TypeAliasNode_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ConstDeclarationStatement__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_ConstDeclarationStatement____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_ConstDeclarationStatement_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_ConstDeclarationStatement_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_ConstDeclarationStatement_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_ConstDeclarationStatement_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ArgNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ArgNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ArgNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_ArgNode____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_ArgNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_ArgNode_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_ArgNode_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_ArgNode_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_StatementNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_StatementNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_StatementNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_StatementNode____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_StatementNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_StatementNode_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_StatementNode_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_StatementNode_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_MethodNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_MethodNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_MethodNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_FieldNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_FieldNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_FieldNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_TypeNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_TypeNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_TypeNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_TypeNode____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_TypeNode_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_GenericParameterNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_GenericParameterNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ClassDeclarationNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_ClassDeclarationNode____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_ClassDeclarationNode_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_FunctionDeclarationNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_FunctionDeclarationNode____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_FunctionDeclarationNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_FunctionDeclarationNode_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_FunctionDeclarationNode_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_FunctionDeclarationNode_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

define internal fastcc void @ModuleAST_constructor(ptr nocapture writeonly %0) unnamed_addr {
  %2 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_FunctionDeclarationNode_, ptr %2, align 8
  %memberidx.i = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %2, i64 0, i32 2
  store i64 0, ptr %memberidx.i, align 4
  %memberidx1.i = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %2, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %2, i64 0, i32 1
  %3 = tail call ptr @malloc(i32 64)
  store ptr %3, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  store ptr %2, ptr %0, align 8
  %memberidx3 = getelementptr inbounds %ModuleAST, ptr %0, i64 0, i32 1
  %4 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ClassDeclarationNode_, ptr %4, align 8
  %memberidx.i27 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %4, i64 0, i32 2
  store i64 0, ptr %memberidx.i27, align 4
  %memberidx1.i28 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %4, i64 0, i32 3
  store i64 8, ptr %memberidx1.i28, align 4
  %memberidx2.i29 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %4, i64 0, i32 1
  %5 = tail call ptr @malloc(i32 64)
  store ptr %5, ptr %memberidx2.i29, align 8
  store i64 0, ptr %memberidx.i27, align 4
  store ptr %4, ptr %memberidx3, align 8
  %memberidx6 = getelementptr inbounds %ModuleAST, ptr %0, i64 0, i32 3
  %6 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ImportNode_, ptr %6, align 8
  %memberidx.i30 = getelementptr inbounds %Array_ImportNode_, ptr %6, i64 0, i32 2
  store i64 0, ptr %memberidx.i30, align 4
  %memberidx1.i31 = getelementptr inbounds %Array_ImportNode_, ptr %6, i64 0, i32 3
  store i64 8, ptr %memberidx1.i31, align 4
  %memberidx2.i32 = getelementptr inbounds %Array_ImportNode_, ptr %6, i64 0, i32 1
  %7 = tail call ptr @malloc(i32 64)
  store ptr %7, ptr %memberidx2.i32, align 8
  store i64 0, ptr %memberidx.i30, align 4
  store ptr %6, ptr %memberidx6, align 8
  %memberidx9 = getelementptr inbounds %ModuleAST, ptr %0, i64 0, i32 4
  %8 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ConstDeclarationStatement_, ptr %8, align 8
  %memberidx.i33 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %8, i64 0, i32 2
  store i64 0, ptr %memberidx.i33, align 4
  %memberidx1.i34 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %8, i64 0, i32 3
  store i64 8, ptr %memberidx1.i34, align 4
  %memberidx2.i35 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %8, i64 0, i32 1
  %9 = tail call ptr @malloc(i32 64)
  store ptr %9, ptr %memberidx2.i35, align 8
  store i64 0, ptr %memberidx.i33, align 4
  store ptr %8, ptr %memberidx9, align 8
  %memberidx12 = getelementptr inbounds %ModuleAST, ptr %0, i64 0, i32 5
  %10 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_VarDeclarationStatement_, ptr %10, align 8
  %memberidx.i36 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %10, i64 0, i32 2
  store i64 0, ptr %memberidx.i36, align 4
  %memberidx1.i37 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %10, i64 0, i32 3
  store i64 8, ptr %memberidx1.i37, align 4
  %memberidx2.i38 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %10, i64 0, i32 1
  %11 = tail call ptr @malloc(i32 64)
  store ptr %11, ptr %memberidx2.i38, align 8
  store i64 0, ptr %memberidx.i36, align 4
  store ptr %10, ptr %memberidx12, align 8
  %memberidx15 = getelementptr inbounds %ModuleAST, ptr %0, i64 0, i32 2
  %12 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_EnumNode_, ptr %12, align 8
  %memberidx.i39 = getelementptr inbounds %Array_EnumNode_, ptr %12, i64 0, i32 2
  store i64 0, ptr %memberidx.i39, align 4
  %memberidx1.i40 = getelementptr inbounds %Array_EnumNode_, ptr %12, i64 0, i32 3
  store i64 8, ptr %memberidx1.i40, align 4
  %memberidx2.i41 = getelementptr inbounds %Array_EnumNode_, ptr %12, i64 0, i32 1
  %13 = tail call ptr @malloc(i32 64)
  store ptr %13, ptr %memberidx2.i41, align 8
  store i64 0, ptr %memberidx.i39, align 4
  store ptr %12, ptr %memberidx15, align 8
  %memberidx18 = getelementptr inbounds %ModuleAST, ptr %0, i64 0, i32 6
  %14 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_TypeAliasNode_, ptr %14, align 8
  %memberidx.i42 = getelementptr inbounds %Array_TypeAliasNode_, ptr %14, i64 0, i32 2
  store i64 0, ptr %memberidx.i42, align 4
  %memberidx1.i43 = getelementptr inbounds %Array_TypeAliasNode_, ptr %14, i64 0, i32 3
  store i64 8, ptr %memberidx1.i43, align 4
  %memberidx2.i44 = getelementptr inbounds %Array_TypeAliasNode_, ptr %14, i64 0, i32 1
  %15 = tail call ptr @malloc(i32 64)
  store ptr %15, ptr %memberidx2.i44, align 8
  store i64 0, ptr %memberidx.i42, align 4
  store ptr %14, ptr %memberidx18, align 8
  ret void
}

define internal fastcc noalias ptr @Parser_parse(ptr %0, ptr %1) unnamed_addr {
  %3 = alloca %Parser, align 8
  store ptr %0, ptr %3, align 8
  %memberidx1.i = getelementptr inbounds %Parser, ptr %3, i64 0, i32 1
  store ptr %1, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Parser, ptr %3, i64 0, i32 3
  store i64 -1, ptr %memberidx2.i, align 8
  %memberidx2.i72 = getelementptr inbounds %Array_Token_, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx2.i72, align 4
  %5 = icmp sgt i64 %4, -1
  br i1 %5, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %2
  %memberidx3.i = getelementptr inbounds %Parser, ptr %3, i64 0, i32 2
  store i64 0, ptr %memberidx2.i, align 8
  %memberidx.i.i73 = getelementptr inbounds %Array_Token_, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %memberidx.i.i73, align 8
  %7 = load ptr, ptr %6, align 8
  store ptr %7, ptr %memberidx3.i, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %2, %if.entry.i
  %8 = phi i64 [ -1, %2 ], [ 0, %if.entry.i ]
  %9 = phi ptr [ undef, %2 ], [ %7, %if.entry.i ]
  %10 = tail call ptr @malloc(i32 56)
  tail call fastcc void @ModuleAST_constructor(ptr %10)
  %memberidx.i75 = getelementptr inbounds %Parser, ptr %3, i64 0, i32 2
  %11 = load i64, ptr %9, align 4
  %12 = icmp eq i64 %11, 31
  %memberidx3.i.i = getelementptr inbounds %Array_FloError_, ptr %1, i64 0, i32 2
  %13 = load i64, ptr %memberidx3.i.i, align 4
  %14 = icmp eq i64 %13, 0
  %15 = and i1 %12, %14
  br i1 %15, label %while.entry.i.preheader, label %Parser_new_lines.exit

while.entry.i.preheader:                          ; preds = %Parser_advance.exit
  %memberidx.i.i.i78 = getelementptr inbounds %Array_Token_, ptr %0, i64 0, i32 1
  %16 = load i64, ptr %memberidx2.i72, align 4
  %17 = icmp slt i64 %8, %16
  br i1 %17, label %while.entry.i, label %while.entry.i.us

while.entry.i.us:                                 ; preds = %while.entry.i.preheader, %while.entry.i.us
  br label %while.entry.i.us

while.entry.i:                                    ; preds = %while.entry.i.preheader, %Parser_advance.exit.i
  %18 = phi i64 [ %25, %Parser_advance.exit.i ], [ 31, %while.entry.i.preheader ]
  %19 = phi ptr [ %27, %Parser_advance.exit.i ], [ %9, %while.entry.i.preheader ]
  %20 = phi i64 [ %28, %Parser_advance.exit.i ], [ %8, %while.entry.i.preheader ]
  %21 = icmp slt i64 %20, %16
  br i1 %21, label %if.entry.i.i79, label %Parser_advance.exit.i

if.entry.i.i79:                                   ; preds = %while.entry.i
  %22 = add nsw i64 %20, 1
  store i64 %22, ptr %memberidx2.i, align 8
  %23 = load ptr, ptr %memberidx.i.i.i78, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %24, ptr %memberidx.i75, align 8
  %.pre = load i64, ptr %24, align 4
  br label %Parser_advance.exit.i

Parser_advance.exit.i:                            ; preds = %if.entry.i.i79, %while.entry.i
  %25 = phi i64 [ %.pre, %if.entry.i.i79 ], [ %18, %while.entry.i ]
  %26 = phi i64 [ %.pre, %if.entry.i.i79 ], [ 31, %while.entry.i ]
  %27 = phi ptr [ %24, %if.entry.i.i79 ], [ %19, %while.entry.i ]
  %28 = phi i64 [ %22, %if.entry.i.i79 ], [ %20, %while.entry.i ]
  %29 = icmp eq i64 %26, 31
  br i1 %29, label %while.entry.i, label %Parser_new_lines.exit

Parser_new_lines.exit:                            ; preds = %Parser_advance.exit.i, %Parser_advance.exit
  %30 = phi i64 [ %11, %Parser_advance.exit ], [ %25, %Parser_advance.exit.i ]
  %31 = phi ptr [ %9, %Parser_advance.exit ], [ %27, %Parser_advance.exit.i ]
  %32 = icmp ne i64 %30, 44
  %33 = and i1 %32, %14
  br i1 %33, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %Parser_new_lines.exit
  %memberidx32 = getelementptr inbounds %ModuleAST, ptr %10, i64 0, i32 5
  %memberidx26 = getelementptr inbounds %ModuleAST, ptr %10, i64 0, i32 4
  %memberidx20 = getelementptr inbounds %ModuleAST, ptr %10, i64 0, i32 3
  %memberidx14 = getelementptr inbounds %ModuleAST, ptr %10, i64 0, i32 2
  %memberidx8 = getelementptr inbounds %ModuleAST, ptr %10, i64 0, i32 1
  %memberidx40 = getelementptr inbounds %ModuleAST, ptr %10, i64 0, i32 6
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %Parser_new_lines.exit135
  %34 = phi i64 [ %30, %while.entry.preheader ], [ %106, %Parser_new_lines.exit135 ]
  %35 = phi ptr [ %31, %while.entry.preheader ], [ %107, %Parser_new_lines.exit135 ]
  switch i64 %34, label %else30 [
    i64 74, label %if.entry
    i64 83, label %if.entry5
    i64 84, label %if.entry11
    i64 78, label %if.entry17
    i64 55, label %if.entry23
    i64 56, label %if.entry29
  ]

while.end:                                        ; preds = %Parser_new_lines.exit135, %Parser_new_lines.exit
  ret ptr %10

if.entry:                                         ; preds = %while.entry
  %36 = load i64, ptr %memberidx2.i, align 8
  %37 = load ptr, ptr %3, align 8
  %memberidx2.i87 = getelementptr inbounds %Array_Token_, ptr %37, i64 0, i32 2
  %38 = load i64, ptr %memberidx2.i87, align 4
  %39 = icmp slt i64 %36, %38
  br i1 %39, label %if.entry.i91, label %Parser_advance.exit92

if.entry.i91:                                     ; preds = %if.entry
  %40 = add nsw i64 %36, 1
  store i64 %40, ptr %memberidx2.i, align 8
  %memberidx.i.i89 = getelementptr inbounds %Array_Token_, ptr %37, i64 0, i32 1
  %41 = load ptr, ptr %memberidx.i.i89, align 8
  %ptridx.i.i90 = getelementptr inbounds ptr, ptr %41, i64 %40
  %42 = load ptr, ptr %ptridx.i.i90, align 8
  store ptr %42, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit92

Parser_advance.exit92:                            ; preds = %if.entry, %if.entry.i91
  %43 = load ptr, ptr %10, align 8
  %44 = call ptr @malloc(i32 33)
  %memberidx.i.i98 = getelementptr inbounds %FunctionDeclarationNode, ptr %44, i64 0, i32 1
  %45 = call ptr @malloc(i32 32)
  store ptr @VTableArray_ArgNode_, ptr %45, align 8
  %memberidx.i.i.i99 = getelementptr inbounds %Array_ArgNode_, ptr %45, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i.i99, align 4
  %memberidx1.i.i.i = getelementptr inbounds %Array_ArgNode_, ptr %45, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i100 = getelementptr inbounds %Array_ArgNode_, ptr %45, i64 0, i32 1
  %46 = call ptr @malloc(i32 64)
  store ptr %46, ptr %memberidx2.i.i.i100, align 8
  store i64 0, ptr %memberidx.i.i.i99, align 4
  store ptr %45, ptr %memberidx.i.i98, align 8
  %memberidx3.i.i102 = getelementptr inbounds %FunctionDeclarationNode, ptr %44, i64 0, i32 4
  store i1 false, ptr %memberidx3.i.i102, align 1
  %47 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 51)
  store ptr %47, ptr %44, align 8
  %48 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 23)
  %49 = load ptr, ptr %memberidx.i75, align 8
  %50 = load i64, ptr %49, align 4
  %.not.i104 = icmp eq i64 %50, 24
  br i1 %.not.i104, label %ifend.i, label %if.entry.i106

if.entry.i106:                                    ; preds = %Parser_advance.exit92
  %51 = load ptr, ptr %memberidx.i.i98, align 8
  call fastcc void @Parser_parse_args(ptr nonnull %3, ptr %51)
  br label %ifend.i

ifend.i:                                          ; preds = %if.entry.i106, %Parser_advance.exit92
  %52 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 24)
  %53 = load ptr, ptr %memberidx.i75, align 8
  %54 = load i64, ptr %53, align 4
  %55 = icmp eq i64 %54, 1
  br i1 %55, label %if.entry6.i, label %else7.i

if.entry6.i:                                      ; preds = %ifend.i
  %56 = load i64, ptr %memberidx2.i, align 8
  %57 = load ptr, ptr %3, align 8
  %memberidx2.i34.i = getelementptr inbounds %Array_Token_, ptr %57, i64 0, i32 2
  %58 = load i64, ptr %memberidx2.i34.i, align 4
  %59 = icmp slt i64 %56, %58
  br i1 %59, label %if.entry.i.i108, label %Parser_advance.exit.i109

if.entry.i.i108:                                  ; preds = %if.entry6.i
  %60 = add nsw i64 %56, 1
  store i64 %60, ptr %memberidx2.i, align 8
  %memberidx.i.i36.i = getelementptr inbounds %Array_Token_, ptr %57, i64 0, i32 1
  %61 = load ptr, ptr %memberidx.i.i36.i, align 8
  %ptridx.i.i.i107 = getelementptr inbounds ptr, ptr %61, i64 %60
  %62 = load ptr, ptr %ptridx.i.i.i107, align 8
  store ptr %62, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i109

Parser_advance.exit.i109:                         ; preds = %if.entry.i.i108, %if.entry6.i
  %memberidx9.i = getelementptr inbounds %FunctionDeclarationNode, ptr %44, i64 0, i32 3
  %63 = call fastcc ptr @Parser_parse_type(ptr nonnull %3)
  store ptr %63, ptr %memberidx9.i, align 8
  br label %ifend8.i

else7.i:                                          ; preds = %ifend.i
  %memberidx10.i = getelementptr inbounds %FunctionDeclarationNode, ptr %44, i64 0, i32 3
  %64 = call ptr @malloc(i32 16)
  %65 = call ptr @malloc(i32 32)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %65, i8 0, i64 32, i1 false)
  store ptr %65, ptr %64, align 8
  %memberidx.i39.i = getelementptr inbounds %TypeNode, ptr %64, i64 0, i32 1
  store i64 12, ptr %memberidx.i39.i, align 4
  store ptr %64, ptr %memberidx10.i, align 8
  br label %ifend8.i

ifend8.i:                                         ; preds = %else7.i, %Parser_advance.exit.i109
  %66 = load ptr, ptr %memberidx.i75, align 8
  %67 = load i64, ptr %66, align 4
  %68 = icmp eq i64 %67, 25
  br i1 %68, label %if.entry13.i, label %else14.i

if.entry13.i:                                     ; preds = %ifend8.i
  %memberidx16.i = getelementptr inbounds %FunctionDeclarationNode, ptr %44, i64 0, i32 2
  %69 = call fastcc ptr @Parser_parse_block(ptr nonnull %3)
  store ptr %69, ptr %memberidx16.i, align 8
  br label %Parser_parse_function.exit

else14.i:                                         ; preds = %ifend8.i
  store i1 true, ptr %memberidx3.i.i102, align 1
  br label %Parser_parse_function.exit

Parser_parse_function.exit:                       ; preds = %if.entry13.i, %else14.i
  %memberidx.i111 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %43, i64 0, i32 2
  %70 = load i64, ptr %memberidx.i111, align 4
  %memberidx1.i112 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %43, i64 0, i32 3
  %71 = load i64, ptr %memberidx1.i112, align 4
  %.not.i113 = icmp slt i64 %70, %71
  br i1 %.not.i113, label %Parser_parse_function.exit.Array_FunctionDeclarationNode____sl__.exit_crit_edge, label %if.entry.i116

Parser_parse_function.exit.Array_FunctionDeclarationNode____sl__.exit_crit_edge: ; preds = %Parser_parse_function.exit
  %memberidx4.i117.phi.trans.insert = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %43, i64 0, i32 1
  %.pre344 = load ptr, ptr %memberidx4.i117.phi.trans.insert, align 8
  br label %Array_FunctionDeclarationNode____sl__.exit

if.entry.i116:                                    ; preds = %Parser_parse_function.exit
  %72 = shl i64 %71, 1
  store i64 %72, ptr %memberidx1.i112, align 4
  %memberidx2.i.i115 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %43, i64 0, i32 1
  %73 = load ptr, ptr %memberidx2.i.i115, align 8
  %74 = shl i64 %71, 4
  %75 = call ptr @realloc(ptr %73, i64 %74)
  store ptr %75, ptr %memberidx2.i.i115, align 8
  %.pre343 = load i64, ptr %memberidx.i111, align 4
  br label %Array_FunctionDeclarationNode____sl__.exit

Array_FunctionDeclarationNode____sl__.exit:       ; preds = %Parser_parse_function.exit.Array_FunctionDeclarationNode____sl__.exit_crit_edge, %if.entry.i116
  %76 = phi ptr [ %.pre344, %Parser_parse_function.exit.Array_FunctionDeclarationNode____sl__.exit_crit_edge ], [ %75, %if.entry.i116 ]
  %77 = phi i64 [ %70, %Parser_parse_function.exit.Array_FunctionDeclarationNode____sl__.exit_crit_edge ], [ %.pre343, %if.entry.i116 ]
  %78 = add i64 %77, 1
  store i64 %78, ptr %memberidx.i111, align 4
  %ptridx.i118 = getelementptr inbounds ptr, ptr %76, i64 %77
  store ptr %44, ptr %ptridx.i118, align 8
  br label %ifend

ifend:                                            ; preds = %Array_TypeAliasNode____sl__.exit, %Parser_error.exit, %Array_VarDeclarationStatement____sl__.exit, %Array_ConstDeclarationStatement____sl__.exit, %Array_ImportNode____sl__.exit, %Array_EnumNode____sl__.exit, %Array_ClassDeclarationNode____sl__.exit, %Array_FunctionDeclarationNode____sl__.exit
  %79 = load ptr, ptr %memberidx.i75, align 8
  %80 = load i64, ptr %79, align 4
  %81 = icmp eq i64 %80, 31
  %82 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i.i123 = getelementptr inbounds %Array_FloError_, ptr %82, i64 0, i32 2
  %83 = load i64, ptr %memberidx3.i.i123, align 4
  %84 = icmp eq i64 %83, 0
  %85 = and i1 %81, %84
  br i1 %85, label %while.entry.i126.preheader, label %Parser_new_lines.exit135

while.entry.i126.preheader:                       ; preds = %ifend
  %86 = load ptr, ptr %3, align 8
  %memberidx2.i12.i125 = getelementptr inbounds %Array_Token_, ptr %86, i64 0, i32 2
  %memberidx.i.i.i128 = getelementptr inbounds %Array_Token_, ptr %86, i64 0, i32 1
  %.pre349 = load i64, ptr %memberidx2.i, align 8
  br label %while.entry.i126

while.entry.i126:                                 ; preds = %while.entry.i126.preheader, %Parser_advance.exit.i134
  %87 = phi i64 [ 0, %while.entry.i126.preheader ], [ %96, %Parser_advance.exit.i134 ]
  %88 = phi i64 [ 31, %while.entry.i126.preheader ], [ %97, %Parser_advance.exit.i134 ]
  %89 = phi ptr [ %79, %while.entry.i126.preheader ], [ %100, %Parser_advance.exit.i134 ]
  %90 = phi i64 [ %.pre349, %while.entry.i126.preheader ], [ %101, %Parser_advance.exit.i134 ]
  %91 = load i64, ptr %memberidx2.i12.i125, align 4
  %92 = icmp slt i64 %90, %91
  br i1 %92, label %if.entry.i.i130, label %Parser_advance.exit.i134

if.entry.i.i130:                                  ; preds = %while.entry.i126
  %93 = add nsw i64 %90, 1
  store i64 %93, ptr %memberidx2.i, align 8
  %94 = load ptr, ptr %memberidx.i.i.i128, align 8
  %ptridx.i.i.i129 = getelementptr inbounds ptr, ptr %94, i64 %93
  %95 = load ptr, ptr %ptridx.i.i.i129, align 8
  store ptr %95, ptr %memberidx.i75, align 8
  %.pre350 = load i64, ptr %95, align 4
  %.pre351 = load i64, ptr %memberidx3.i.i123, align 4
  br label %Parser_advance.exit.i134

Parser_advance.exit.i134:                         ; preds = %if.entry.i.i130, %while.entry.i126
  %96 = phi i64 [ %.pre351, %if.entry.i.i130 ], [ %87, %while.entry.i126 ]
  %97 = phi i64 [ %.pre350, %if.entry.i.i130 ], [ %88, %while.entry.i126 ]
  %98 = phi i64 [ %.pre351, %if.entry.i.i130 ], [ 0, %while.entry.i126 ]
  %99 = phi i64 [ %.pre350, %if.entry.i.i130 ], [ 31, %while.entry.i126 ]
  %100 = phi ptr [ %95, %if.entry.i.i130 ], [ %89, %while.entry.i126 ]
  %101 = phi i64 [ %93, %if.entry.i.i130 ], [ %90, %while.entry.i126 ]
  %102 = icmp eq i64 %99, 31
  %103 = icmp eq i64 %98, 0
  %104 = and i1 %102, %103
  br i1 %104, label %while.entry.i126, label %Parser_new_lines.exit135

Parser_new_lines.exit135:                         ; preds = %Parser_advance.exit.i134, %ifend
  %105 = phi i64 [ %83, %ifend ], [ %96, %Parser_advance.exit.i134 ]
  %106 = phi i64 [ %80, %ifend ], [ %97, %Parser_advance.exit.i134 ]
  %107 = phi ptr [ %79, %ifend ], [ %100, %Parser_advance.exit.i134 ]
  %108 = icmp ne i64 %106, 44
  %109 = icmp eq i64 %105, 0
  %110 = and i1 %108, %109
  br i1 %110, label %while.entry, label %while.end

if.entry5:                                        ; preds = %while.entry
  %111 = load ptr, ptr %memberidx8, align 8
  %112 = load i64, ptr %memberidx2.i, align 8
  %113 = load ptr, ptr %3, align 8
  %memberidx2.i.i140 = getelementptr inbounds %Array_Token_, ptr %113, i64 0, i32 2
  %114 = load i64, ptr %memberidx2.i.i140, align 4
  %115 = icmp slt i64 %112, %114
  br i1 %115, label %if.entry.i.i144, label %Parser_advance.exit.i150

if.entry.i.i144:                                  ; preds = %if.entry5
  %116 = add nsw i64 %112, 1
  store i64 %116, ptr %memberidx2.i, align 8
  %memberidx.i.i.i142 = getelementptr inbounds %Array_Token_, ptr %113, i64 0, i32 1
  %117 = load ptr, ptr %memberidx.i.i.i142, align 8
  %ptridx.i.i.i143 = getelementptr inbounds ptr, ptr %117, i64 %116
  %118 = load ptr, ptr %ptridx.i.i.i143, align 8
  store ptr %118, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i150

Parser_advance.exit.i150:                         ; preds = %if.entry.i.i144, %if.entry5
  %119 = call ptr @malloc(i32 40)
  %120 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 51)
  store ptr %120, ptr %119, align 8
  %memberidx1.i.i145 = getelementptr inbounds %ClassDeclarationNode, ptr %119, i64 0, i32 3
  %121 = call ptr @malloc(i32 32)
  store ptr @VTableArray_FieldNode_, ptr %121, align 8
  %memberidx.i.i21.i = getelementptr inbounds %Array_FieldNode_, ptr %121, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i21.i, align 4
  %memberidx1.i.i.i146 = getelementptr inbounds %Array_FieldNode_, ptr %121, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i146, align 4
  %memberidx2.i.i.i147 = getelementptr inbounds %Array_FieldNode_, ptr %121, i64 0, i32 1
  %122 = call ptr @malloc(i32 64)
  store ptr %122, ptr %memberidx2.i.i.i147, align 8
  store i64 0, ptr %memberidx.i.i21.i, align 4
  store ptr %121, ptr %memberidx1.i.i145, align 8
  %memberidx4.i.i148 = getelementptr inbounds %ClassDeclarationNode, ptr %119, i64 0, i32 4
  %123 = call ptr @malloc(i32 32)
  store ptr @VTableArray_MethodNode_, ptr %123, align 8
  %memberidx.i15.i.i = getelementptr inbounds %Array_MethodNode_, ptr %123, i64 0, i32 2
  store i64 0, ptr %memberidx.i15.i.i, align 4
  %memberidx1.i16.i.i = getelementptr inbounds %Array_MethodNode_, ptr %123, i64 0, i32 3
  store i64 8, ptr %memberidx1.i16.i.i, align 4
  %memberidx2.i17.i.i = getelementptr inbounds %Array_MethodNode_, ptr %123, i64 0, i32 1
  %124 = call ptr @malloc(i32 64)
  store ptr %124, ptr %memberidx2.i17.i.i, align 8
  store i64 0, ptr %memberidx.i15.i.i, align 4
  store ptr %123, ptr %memberidx4.i.i148, align 8
  %memberidx7.i.i = getelementptr inbounds %ClassDeclarationNode, ptr %119, i64 0, i32 1
  %125 = call ptr @malloc(i32 32)
  store ptr @VTableArray_GenericParameterNode_, ptr %125, align 8
  %memberidx.i18.i.i = getelementptr inbounds %Array_GenericParameterNode_, ptr %125, i64 0, i32 2
  store i64 0, ptr %memberidx.i18.i.i, align 4
  %memberidx1.i19.i.i = getelementptr inbounds %Array_GenericParameterNode_, ptr %125, i64 0, i32 3
  store i64 8, ptr %memberidx1.i19.i.i, align 4
  %memberidx2.i20.i.i = getelementptr inbounds %Array_GenericParameterNode_, ptr %125, i64 0, i32 1
  %126 = call ptr @malloc(i32 64)
  store ptr %126, ptr %memberidx2.i20.i.i, align 8
  store i64 0, ptr %memberidx.i18.i.i, align 4
  store ptr %125, ptr %memberidx7.i.i, align 8
  %memberidx10.i.i = getelementptr inbounds %ClassDeclarationNode, ptr %119, i64 0, i32 2
  store ptr null, ptr %memberidx10.i.i, align 8
  %127 = load ptr, ptr %memberidx.i75, align 8
  %128 = load i64, ptr %127, align 4
  %129 = icmp eq i64 %128, 40
  br i1 %129, label %if.entry.i152, label %ifend.i153

if.entry.i152:                                    ; preds = %Parser_advance.exit.i150
  %130 = load i64, ptr %memberidx2.i, align 8
  %131 = load ptr, ptr %3, align 8
  %memberidx2.i.i24.i = getelementptr inbounds %Array_Token_, ptr %131, i64 0, i32 2
  %132 = load i64, ptr %memberidx2.i.i24.i, align 4
  %133 = icmp slt i64 %130, %132
  br i1 %133, label %if.entry.i.i.i, label %Parser_advance.exit.i.i

if.entry.i.i.i:                                   ; preds = %if.entry.i152
  %134 = add nsw i64 %130, 1
  store i64 %134, ptr %memberidx2.i, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Token_, ptr %131, i64 0, i32 1
  %135 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %135, i64 %134
  %136 = load ptr, ptr %ptridx.i.i.i.i, align 8
  store ptr %136, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i.i

Parser_advance.exit.i.i:                          ; preds = %if.entry.i.i.i, %if.entry.i152
  %137 = call ptr @malloc(i32 8)
  %138 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 51)
  store ptr %138, ptr %137, align 8
  %139 = load i64, ptr %memberidx.i18.i.i, align 4
  %140 = load i64, ptr %memberidx1.i19.i.i, align 4
  %.not.i21.i.i = icmp slt i64 %139, %140
  br i1 %.not.i21.i.i, label %Parser_advance.exit.i.i.Array_GenericParameterNode____sl__.exit27.i.i_crit_edge, label %if.entry.i24.i.i

Parser_advance.exit.i.i.Array_GenericParameterNode____sl__.exit27.i.i_crit_edge: ; preds = %Parser_advance.exit.i.i
  %.pre331 = load ptr, ptr %memberidx2.i20.i.i, align 8
  br label %Array_GenericParameterNode____sl__.exit27.i.i

if.entry.i24.i.i:                                 ; preds = %Parser_advance.exit.i.i
  %141 = shl i64 %140, 1
  store i64 %141, ptr %memberidx1.i19.i.i, align 4
  %142 = load ptr, ptr %memberidx2.i20.i.i, align 8
  %143 = shl i64 %140, 4
  %144 = call ptr @realloc(ptr %142, i64 %143)
  store ptr %144, ptr %memberidx2.i20.i.i, align 8
  %.pre330 = load i64, ptr %memberidx.i18.i.i, align 4
  br label %Array_GenericParameterNode____sl__.exit27.i.i

Array_GenericParameterNode____sl__.exit27.i.i:    ; preds = %Parser_advance.exit.i.i.Array_GenericParameterNode____sl__.exit27.i.i_crit_edge, %if.entry.i24.i.i
  %145 = phi ptr [ %144, %if.entry.i24.i.i ], [ %.pre331, %Parser_advance.exit.i.i.Array_GenericParameterNode____sl__.exit27.i.i_crit_edge ]
  %146 = phi i64 [ %.pre330, %if.entry.i24.i.i ], [ %139, %Parser_advance.exit.i.i.Array_GenericParameterNode____sl__.exit27.i.i_crit_edge ]
  %147 = add i64 %146, 1
  store i64 %147, ptr %memberidx.i18.i.i, align 4
  %ptridx.i26.i.i = getelementptr inbounds ptr, ptr %145, i64 %146
  store ptr %137, ptr %ptridx.i26.i.i, align 8
  %148 = load ptr, ptr %memberidx.i75, align 8
  %149 = load i64, ptr %148, align 4
  %150 = icmp eq i64 %149, 3
  %151 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i30.i.i = getelementptr inbounds %Array_FloError_, ptr %151, i64 0, i32 2
  %152 = load i64, ptr %memberidx3.i30.i.i, align 4
  %153 = icmp eq i64 %152, 0
  %154 = and i1 %150, %153
  br i1 %154, label %while.entry.i.i, label %Parser_parse_generic_parameters.exit.i

while.entry.i.i:                                  ; preds = %Array_GenericParameterNode____sl__.exit27.i.i, %Array_GenericParameterNode____sl__.exit.i.i
  %155 = load i64, ptr %memberidx2.i, align 8
  %156 = load ptr, ptr %3, align 8
  %memberidx2.i32.i.i = getelementptr inbounds %Array_Token_, ptr %156, i64 0, i32 2
  %157 = load i64, ptr %memberidx2.i32.i.i, align 4
  %158 = icmp slt i64 %155, %157
  br i1 %158, label %if.entry.i36.i.i, label %Parser_advance.exit37.i.i

if.entry.i36.i.i:                                 ; preds = %while.entry.i.i
  %159 = add nsw i64 %155, 1
  store i64 %159, ptr %memberidx2.i, align 8
  %memberidx.i.i34.i.i = getelementptr inbounds %Array_Token_, ptr %156, i64 0, i32 1
  %160 = load ptr, ptr %memberidx.i.i34.i.i, align 8
  %ptridx.i.i35.i.i = getelementptr inbounds ptr, ptr %160, i64 %159
  %161 = load ptr, ptr %ptridx.i.i35.i.i, align 8
  store ptr %161, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit37.i.i

Parser_advance.exit37.i.i:                        ; preds = %if.entry.i36.i.i, %while.entry.i.i
  %162 = call ptr @malloc(i32 8)
  %163 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 51)
  store ptr %163, ptr %162, align 8
  %164 = load i64, ptr %memberidx.i18.i.i, align 4
  %165 = load i64, ptr %memberidx1.i19.i.i, align 4
  %.not.i.i.i = icmp slt i64 %164, %165
  br i1 %.not.i.i.i, label %Parser_advance.exit37.i.i.Array_GenericParameterNode____sl__.exit.i.i_crit_edge, label %if.entry.i18.i.i

Parser_advance.exit37.i.i.Array_GenericParameterNode____sl__.exit.i.i_crit_edge: ; preds = %Parser_advance.exit37.i.i
  %.pre333 = load ptr, ptr %memberidx2.i20.i.i, align 8
  br label %Array_GenericParameterNode____sl__.exit.i.i

if.entry.i18.i.i:                                 ; preds = %Parser_advance.exit37.i.i
  %166 = shl i64 %165, 1
  store i64 %166, ptr %memberidx1.i19.i.i, align 4
  %167 = load ptr, ptr %memberidx2.i20.i.i, align 8
  %168 = shl i64 %165, 4
  %169 = call ptr @realloc(ptr %167, i64 %168)
  store ptr %169, ptr %memberidx2.i20.i.i, align 8
  %.pre332 = load i64, ptr %memberidx.i18.i.i, align 4
  br label %Array_GenericParameterNode____sl__.exit.i.i

Array_GenericParameterNode____sl__.exit.i.i:      ; preds = %Parser_advance.exit37.i.i.Array_GenericParameterNode____sl__.exit.i.i_crit_edge, %if.entry.i18.i.i
  %170 = phi ptr [ %169, %if.entry.i18.i.i ], [ %.pre333, %Parser_advance.exit37.i.i.Array_GenericParameterNode____sl__.exit.i.i_crit_edge ]
  %171 = phi i64 [ %.pre332, %if.entry.i18.i.i ], [ %164, %Parser_advance.exit37.i.i.Array_GenericParameterNode____sl__.exit.i.i_crit_edge ]
  %172 = add i64 %171, 1
  store i64 %172, ptr %memberidx.i18.i.i, align 4
  %ptridx.i.i27.i = getelementptr inbounds ptr, ptr %170, i64 %171
  store ptr %162, ptr %ptridx.i.i27.i, align 8
  %173 = load ptr, ptr %memberidx.i75, align 8
  %174 = load i64, ptr %173, align 4
  %175 = icmp eq i64 %174, 3
  %176 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i15.i.i = getelementptr inbounds %Array_FloError_, ptr %176, i64 0, i32 2
  %177 = load i64, ptr %memberidx3.i15.i.i, align 4
  %178 = icmp eq i64 %177, 0
  %179 = and i1 %175, %178
  br i1 %179, label %while.entry.i.i, label %Parser_parse_generic_parameters.exit.i

Parser_parse_generic_parameters.exit.i:           ; preds = %Array_GenericParameterNode____sl__.exit.i.i, %Array_GenericParameterNode____sl__.exit27.i.i
  %180 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 39)
  %.pre334 = load ptr, ptr %memberidx.i75, align 8
  %.pre335 = load i64, ptr %.pre334, align 4
  br label %ifend.i153

ifend.i153:                                       ; preds = %Parser_parse_generic_parameters.exit.i, %Parser_advance.exit.i150
  %181 = phi i64 [ %.pre335, %Parser_parse_generic_parameters.exit.i ], [ %128, %Parser_advance.exit.i150 ]
  %182 = icmp eq i64 %181, 23
  br i1 %182, label %if.entry5.i, label %ifend7.i

if.entry5.i:                                      ; preds = %ifend.i153
  %183 = load i64, ptr %memberidx2.i, align 8
  %184 = load ptr, ptr %3, align 8
  %memberidx2.i29.i = getelementptr inbounds %Array_Token_, ptr %184, i64 0, i32 2
  %185 = load i64, ptr %memberidx2.i29.i, align 4
  %186 = icmp slt i64 %183, %185
  br i1 %186, label %if.entry.i33.i, label %Parser_advance.exit34.i

if.entry.i33.i:                                   ; preds = %if.entry5.i
  %187 = add nsw i64 %183, 1
  store i64 %187, ptr %memberidx2.i, align 8
  %memberidx.i.i31.i = getelementptr inbounds %Array_Token_, ptr %184, i64 0, i32 1
  %188 = load ptr, ptr %memberidx.i.i31.i, align 8
  %ptridx.i.i32.i = getelementptr inbounds ptr, ptr %188, i64 %187
  %189 = load ptr, ptr %ptridx.i.i32.i, align 8
  store ptr %189, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit34.i

Parser_advance.exit34.i:                          ; preds = %if.entry.i33.i, %if.entry5.i
  %190 = call fastcc ptr @Parser_parse_object_type(ptr nonnull %3)
  store ptr %190, ptr %memberidx10.i.i, align 8
  %191 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 24)
  %.pre336 = load ptr, ptr %memberidx.i75, align 8
  %.pre337 = load i64, ptr %.pre336, align 4
  br label %ifend7.i

ifend7.i:                                         ; preds = %Parser_advance.exit34.i, %ifend.i153
  %192 = phi i64 [ %.pre337, %Parser_advance.exit34.i ], [ %181, %ifend.i153 ]
  %193 = icmp eq i64 %192, 31
  %194 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i.i38.i = getelementptr inbounds %Array_FloError_, ptr %194, i64 0, i32 2
  %195 = load i64, ptr %memberidx3.i.i38.i, align 4
  %196 = icmp eq i64 %195, 0
  %197 = and i1 %193, %196
  br i1 %197, label %while.entry.i39.i.preheader, label %Parser_parse_class.exit

while.entry.i39.i.preheader:                      ; preds = %ifend7.i
  %198 = load ptr, ptr %3, align 8
  %memberidx2.i12.i.i = getelementptr inbounds %Array_Token_, ptr %198, i64 0, i32 2
  %memberidx.i.i.i40.i = getelementptr inbounds %Array_Token_, ptr %198, i64 0, i32 1
  %.pre338 = load i64, ptr %memberidx2.i, align 8
  br label %while.entry.i39.i

while.entry.i39.i:                                ; preds = %while.entry.i39.i.preheader, %Parser_advance.exit.i43.i
  %199 = phi i64 [ %.pre338, %while.entry.i39.i.preheader ], [ %207, %Parser_advance.exit.i43.i ]
  %200 = load i64, ptr %memberidx2.i12.i.i, align 4
  %201 = icmp slt i64 %199, %200
  br i1 %201, label %if.entry.i.i42.i, label %Parser_advance.exit.i43.i

if.entry.i.i42.i:                                 ; preds = %while.entry.i39.i
  %202 = add nsw i64 %199, 1
  store i64 %202, ptr %memberidx2.i, align 8
  %203 = load ptr, ptr %memberidx.i.i.i40.i, align 8
  %ptridx.i.i.i41.i = getelementptr inbounds ptr, ptr %203, i64 %202
  %204 = load ptr, ptr %ptridx.i.i.i41.i, align 8
  store ptr %204, ptr %memberidx.i75, align 8
  %.pre339 = load i64, ptr %204, align 4
  %.pre340 = load i64, ptr %memberidx3.i.i38.i, align 4
  br label %Parser_advance.exit.i43.i

Parser_advance.exit.i43.i:                        ; preds = %if.entry.i.i42.i, %while.entry.i39.i
  %205 = phi i64 [ %.pre340, %if.entry.i.i42.i ], [ 0, %while.entry.i39.i ]
  %206 = phi i64 [ %.pre339, %if.entry.i.i42.i ], [ 31, %while.entry.i39.i ]
  %207 = phi i64 [ %202, %if.entry.i.i42.i ], [ %199, %while.entry.i39.i ]
  %208 = icmp eq i64 %206, 31
  %209 = icmp eq i64 %205, 0
  %210 = and i1 %208, %209
  br i1 %210, label %while.entry.i39.i, label %Parser_parse_class.exit

Parser_parse_class.exit:                          ; preds = %Parser_advance.exit.i43.i, %ifend7.i
  %211 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 25)
  %212 = load ptr, ptr %memberidx.i75, align 8
  %213 = load i64, ptr %212, align 4
  %214 = icmp eq i64 %213, 31
  %215 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i.i.i259 = getelementptr inbounds %Array_FloError_, ptr %215, i64 0, i32 2
  %216 = load i64, ptr %memberidx3.i.i.i259, align 4
  %217 = icmp eq i64 %216, 0
  %218 = and i1 %214, %217
  br i1 %218, label %while.entry.i.preheader.i, label %Parser_new_lines.exit.i

while.entry.i.preheader.i:                        ; preds = %Parser_parse_class.exit
  %219 = load ptr, ptr %3, align 8
  %memberidx2.i12.i.i261 = getelementptr inbounds %Array_Token_, ptr %219, i64 0, i32 2
  %memberidx.i.i.i.i262 = getelementptr inbounds %Array_Token_, ptr %219, i64 0, i32 1
  %220 = load i64, ptr %memberidx2.i, align 8
  %221 = load i64, ptr %memberidx2.i12.i.i261, align 4
  %222 = icmp slt i64 %220, %221
  br i1 %222, label %while.entry.i.i263, label %while.entry.i.us.i

while.entry.i.us.i:                               ; preds = %while.entry.i.preheader.i, %while.entry.i.us.i
  br label %while.entry.i.us.i

while.entry.i.i263:                               ; preds = %while.entry.i.preheader.i, %Parser_advance.exit.i.i266
  %223 = phi i64 [ %230, %Parser_advance.exit.i.i266 ], [ 31, %while.entry.i.preheader.i ]
  %224 = phi i64 [ %233, %Parser_advance.exit.i.i266 ], [ %220, %while.entry.i.preheader.i ]
  %225 = load i64, ptr %memberidx2.i12.i.i261, align 4
  %226 = icmp slt i64 %224, %225
  br i1 %226, label %if.entry.i.i.i265, label %Parser_advance.exit.i.i266

if.entry.i.i.i265:                                ; preds = %while.entry.i.i263
  %227 = add nsw i64 %224, 1
  store i64 %227, ptr %memberidx2.i, align 8
  %228 = load ptr, ptr %memberidx.i.i.i.i262, align 8
  %ptridx.i.i.i.i264 = getelementptr inbounds ptr, ptr %228, i64 %227
  %229 = load ptr, ptr %ptridx.i.i.i.i264, align 8
  store ptr %229, ptr %memberidx.i75, align 8
  %.pre.i = load i64, ptr %229, align 4
  %.pre161.i = load i64, ptr %memberidx3.i.i.i259, align 4
  br label %Parser_advance.exit.i.i266

Parser_advance.exit.i.i266:                       ; preds = %if.entry.i.i.i265, %while.entry.i.i263
  %230 = phi i64 [ %.pre.i, %if.entry.i.i.i265 ], [ %223, %while.entry.i.i263 ]
  %231 = phi i64 [ %.pre161.i, %if.entry.i.i.i265 ], [ 0, %while.entry.i.i263 ]
  %232 = phi i64 [ %.pre.i, %if.entry.i.i.i265 ], [ 31, %while.entry.i.i263 ]
  %233 = phi i64 [ %227, %if.entry.i.i.i265 ], [ %224, %while.entry.i.i263 ]
  %234 = icmp eq i64 %232, 31
  %235 = icmp eq i64 %231, 0
  %236 = and i1 %235, %234
  br i1 %236, label %while.entry.i.i263, label %Parser_new_lines.exit.i

Parser_new_lines.exit.i:                          ; preds = %Parser_advance.exit.i.i266, %Parser_parse_class.exit
  %237 = phi i64 [ %213, %Parser_parse_class.exit ], [ %230, %Parser_advance.exit.i.i266 ]
  %238 = phi i64 [ %216, %Parser_parse_class.exit ], [ %231, %Parser_advance.exit.i.i266 ]
  %.fr.i = freeze i64 %238
  %239 = icmp eq i64 %.fr.i, 0
  br i1 %239, label %switch.early.test.i, label %while.end.i268

switch.early.test.i:                              ; preds = %Parser_new_lines.exit.i
  switch i64 %237, label %while.entry.i267 [
    i64 44, label %while.end.i268
    i64 26, label %while.end.i268
  ]

while.entry.i267:                                 ; preds = %switch.early.test.i, %switch.early.test147.i
  %240 = phi i64 [ %296, %switch.early.test147.i ], [ %237, %switch.early.test.i ]
  switch i64 %240, label %if.entry.i269 [
    i64 80, label %else.i
    i64 79, label %Parser_parse_access_modifier.exit.fold.split.i
    i64 81, label %else.fold.split.i
  ]

Parser_parse_access_modifier.exit.fold.split.i:   ; preds = %while.entry.i267
  br label %else.i

while.end.i268:                                   ; preds = %switch.early.test147.i, %switch.early.test147.i, %Parser_new_lines.exit115.i, %switch.early.test.i, %switch.early.test.i, %Parser_new_lines.exit.i
  %241 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 26)
  br label %Parser_parse_class_block.exit

if.entry.i269:                                    ; preds = %while.entry.i267
  %.pre162.i = load i64, ptr %memberidx2.i, align 8
  %.pre163.i = load ptr, ptr %3, align 8
  br label %ifend.i271

else.fold.split.i:                                ; preds = %while.entry.i267
  br label %else.i

else.i:                                           ; preds = %else.fold.split.i, %Parser_parse_access_modifier.exit.fold.split.i, %while.entry.i267
  %common.ret.op.i.ph.i = phi i64 [ 1, %Parser_parse_access_modifier.exit.fold.split.i ], [ 2, %while.entry.i267 ], [ 3, %else.fold.split.i ]
  %242 = load i64, ptr %memberidx2.i, align 8
  %243 = load ptr, ptr %3, align 8
  %memberidx2.i55.i = getelementptr inbounds %Array_Token_, ptr %243, i64 0, i32 2
  %244 = load i64, ptr %memberidx2.i55.i, align 4
  %245 = icmp slt i64 %242, %244
  br i1 %245, label %if.entry.i.i270, label %ifend.i271

if.entry.i.i270:                                  ; preds = %else.i
  %246 = add nsw i64 %242, 1
  store i64 %246, ptr %memberidx2.i, align 8
  %memberidx.i.i57.i = getelementptr inbounds %Array_Token_, ptr %243, i64 0, i32 1
  %247 = load ptr, ptr %memberidx.i.i57.i, align 8
  %ptridx.i.i58.i = getelementptr inbounds ptr, ptr %247, i64 %246
  %248 = load ptr, ptr %ptridx.i.i58.i, align 8
  store ptr %248, ptr %memberidx.i75, align 8
  br label %ifend.i271

ifend.i271:                                       ; preds = %if.entry.i.i270, %else.i, %if.entry.i269
  %249 = phi i64 [ %common.ret.op.i.ph.i, %if.entry.i.i270 ], [ %common.ret.op.i.ph.i, %else.i ], [ 2, %if.entry.i269 ]
  %250 = phi ptr [ %243, %if.entry.i.i270 ], [ %243, %else.i ], [ %.pre163.i, %if.entry.i269 ]
  %251 = phi i64 [ %246, %if.entry.i.i270 ], [ %242, %else.i ], [ %.pre162.i, %if.entry.i269 ]
  %252 = add i64 %251, 1
  %memberidx2.i61.i = getelementptr inbounds %Array_Token_, ptr %250, i64 0, i32 2
  %253 = load i64, ptr %memberidx2.i61.i, align 4
  %254 = icmp slt i64 %252, %253
  br i1 %254, label %Parser_peek.exit.i, label %Parser_peek.exit.thread.i

Parser_peek.exit.i:                               ; preds = %ifend.i271
  %memberidx.i.i63.i = getelementptr inbounds %Array_Token_, ptr %250, i64 0, i32 1
  %255 = load ptr, ptr %memberidx.i.i63.i, align 8
  %ptridx.i.i64.i = getelementptr inbounds ptr, ptr %255, i64 %252
  %common.ret.op.i62.i = load ptr, ptr %ptridx.i.i64.i, align 8
  %256 = load i64, ptr %common.ret.op.i62.i, align 4
  %257 = icmp eq i64 %256, 1
  br i1 %257, label %if.entry3.i, label %Parser_peek.exit99.i

Parser_peek.exit.thread.i:                        ; preds = %ifend.i271
  %258 = add i64 %253, -1
  %memberidx.i12.i.i = getelementptr inbounds %Array_Token_, ptr %250, i64 0, i32 1
  %259 = load ptr, ptr %memberidx.i12.i.i, align 8
  %ptridx.i13.i.i = getelementptr inbounds ptr, ptr %259, i64 %258
  %common.ret.op.i62150.i = load ptr, ptr %ptridx.i13.i.i, align 8
  %260 = load i64, ptr %common.ret.op.i62150.i, align 4
  %261 = icmp eq i64 %260, 1
  br i1 %261, label %if.entry3.i, label %Parser_peek.exit99.i

if.entry3.i:                                      ; preds = %Parser_peek.exit.thread.i, %Parser_peek.exit.i
  %262 = call ptr @malloc(i32 32)
  %263 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 51)
  store ptr %263, ptr %262, align 8
  %memberidx1.i73.i = getelementptr inbounds %FieldNode, ptr %262, i64 0, i32 2
  store ptr null, ptr %memberidx1.i73.i, align 8
  %264 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 1)
  %memberidx6.i = getelementptr inbounds %FieldNode, ptr %262, i64 0, i32 3
  %265 = call fastcc ptr @Parser_parse_type(ptr nonnull %3)
  store ptr %265, ptr %memberidx6.i, align 8
  %266 = load ptr, ptr %memberidx.i75, align 8
  %267 = load i64, ptr %266, align 4
  %268 = icmp eq i64 %267, 36
  br i1 %268, label %if.entry9.i, label %ifend11.i

Parser_peek.exit99.i:                             ; preds = %Parser_peek.exit.thread.i, %Parser_peek.exit.i
  %269 = phi i64 [ %256, %Parser_peek.exit.i ], [ %260, %Parser_peek.exit.thread.i ]
  %270 = icmp eq i64 %269, 23
  br i1 %270, label %if.entry16.i, label %else17.i

ifend5.i:                                         ; preds = %Array_MethodNode____sl__.exit.i, %Array_FieldNode____sl__.exit.i
  %271 = load ptr, ptr %memberidx.i75, align 8
  %272 = load i64, ptr %271, align 4
  %273 = icmp eq i64 %272, 31
  %274 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i.i103.i = getelementptr inbounds %Array_FloError_, ptr %274, i64 0, i32 2
  %275 = load i64, ptr %memberidx3.i.i103.i, align 4
  %276 = icmp eq i64 %275, 0
  %277 = and i1 %273, %276
  br i1 %277, label %while.entry.i106.preheader.i, label %Parser_new_lines.exit115.i

while.entry.i106.preheader.i:                     ; preds = %ifend5.i
  %278 = load ptr, ptr %3, align 8
  %memberidx2.i12.i105.i = getelementptr inbounds %Array_Token_, ptr %278, i64 0, i32 2
  %memberidx.i.i.i108.i = getelementptr inbounds %Array_Token_, ptr %278, i64 0, i32 1
  %279 = load i64, ptr %memberidx2.i, align 8
  %280 = load i64, ptr %memberidx2.i12.i105.i, align 4
  %281 = icmp slt i64 %279, %280
  br i1 %281, label %while.entry.i106.i, label %while.entry.i106.us.i

while.entry.i106.us.i:                            ; preds = %while.entry.i106.preheader.i, %while.entry.i106.us.i
  br label %while.entry.i106.us.i

while.entry.i106.i:                               ; preds = %while.entry.i106.preheader.i, %Parser_advance.exit.i114.i
  %282 = phi i64 [ %289, %Parser_advance.exit.i114.i ], [ 31, %while.entry.i106.preheader.i ]
  %283 = phi i64 [ %292, %Parser_advance.exit.i114.i ], [ %279, %while.entry.i106.preheader.i ]
  %284 = load i64, ptr %memberidx2.i12.i105.i, align 4
  %285 = icmp slt i64 %283, %284
  br i1 %285, label %if.entry.i.i110.i, label %Parser_advance.exit.i114.i

if.entry.i.i110.i:                                ; preds = %while.entry.i106.i
  %286 = add nsw i64 %283, 1
  store i64 %286, ptr %memberidx2.i, align 8
  %287 = load ptr, ptr %memberidx.i.i.i108.i, align 8
  %ptridx.i.i.i109.i = getelementptr inbounds ptr, ptr %287, i64 %286
  %288 = load ptr, ptr %ptridx.i.i.i109.i, align 8
  store ptr %288, ptr %memberidx.i75, align 8
  %.pre171.i = load i64, ptr %288, align 4
  %.pre172.i = load i64, ptr %memberidx3.i.i103.i, align 4
  br label %Parser_advance.exit.i114.i

Parser_advance.exit.i114.i:                       ; preds = %if.entry.i.i110.i, %while.entry.i106.i
  %289 = phi i64 [ %.pre171.i, %if.entry.i.i110.i ], [ %282, %while.entry.i106.i ]
  %290 = phi i64 [ %.pre172.i, %if.entry.i.i110.i ], [ 0, %while.entry.i106.i ]
  %291 = phi i64 [ %.pre171.i, %if.entry.i.i110.i ], [ 31, %while.entry.i106.i ]
  %292 = phi i64 [ %286, %if.entry.i.i110.i ], [ %283, %while.entry.i106.i ]
  %293 = icmp eq i64 %291, 31
  %294 = icmp eq i64 %290, 0
  %295 = and i1 %294, %293
  br i1 %295, label %while.entry.i106.i, label %Parser_new_lines.exit115.i

Parser_new_lines.exit115.i:                       ; preds = %Parser_advance.exit.i114.i, %ifend5.i
  %296 = phi i64 [ %272, %ifend5.i ], [ %289, %Parser_advance.exit.i114.i ]
  %297 = phi i64 [ %275, %ifend5.i ], [ %290, %Parser_advance.exit.i114.i ]
  %.fr151.i = freeze i64 %297
  %298 = icmp eq i64 %.fr151.i, 0
  br i1 %298, label %switch.early.test147.i, label %while.end.i268

switch.early.test147.i:                           ; preds = %Parser_new_lines.exit115.i
  switch i64 %296, label %while.entry.i267 [
    i64 44, label %while.end.i268
    i64 26, label %while.end.i268
  ]

if.entry9.i:                                      ; preds = %if.entry3.i
  %299 = load i64, ptr %memberidx2.i, align 8
  %300 = load ptr, ptr %3, align 8
  %memberidx2.i120.i = getelementptr inbounds %Array_Token_, ptr %300, i64 0, i32 2
  %301 = load i64, ptr %memberidx2.i120.i, align 4
  %302 = icmp slt i64 %299, %301
  br i1 %302, label %if.entry.i124.i, label %Parser_advance.exit126.i

if.entry.i124.i:                                  ; preds = %if.entry9.i
  %303 = add nsw i64 %299, 1
  store i64 %303, ptr %memberidx2.i, align 8
  %memberidx.i.i122.i = getelementptr inbounds %Array_Token_, ptr %300, i64 0, i32 1
  %304 = load ptr, ptr %memberidx.i.i122.i, align 8
  %ptridx.i.i123.i = getelementptr inbounds ptr, ptr %304, i64 %303
  %305 = load ptr, ptr %ptridx.i.i123.i, align 8
  store ptr %305, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit126.i

Parser_advance.exit126.i:                         ; preds = %if.entry.i124.i, %if.entry9.i
  %306 = call fastcc ptr @Parser_parse_expression(ptr nonnull %3)
  store ptr %306, ptr %memberidx1.i73.i, align 8
  br label %ifend11.i

ifend11.i:                                        ; preds = %Parser_advance.exit126.i, %if.entry3.i
  %memberidx13.i = getelementptr inbounds %FieldNode, ptr %262, i64 0, i32 1
  store i64 %249, ptr %memberidx13.i, align 4
  %307 = load ptr, ptr %memberidx1.i.i145, align 8
  %memberidx.i127.i = getelementptr inbounds %Array_FieldNode_, ptr %307, i64 0, i32 2
  %308 = load i64, ptr %memberidx.i127.i, align 4
  %memberidx1.i128.i = getelementptr inbounds %Array_FieldNode_, ptr %307, i64 0, i32 3
  %309 = load i64, ptr %memberidx1.i128.i, align 4
  %.not.i129.i = icmp slt i64 %308, %309
  br i1 %.not.i129.i, label %ifend11.Array_FieldNode____sl__.exit_crit_edge.i, label %if.entry.i132.i

ifend11.Array_FieldNode____sl__.exit_crit_edge.i: ; preds = %ifend11.i
  %memberidx4.i133.phi.trans.insert.i = getelementptr inbounds %Array_FieldNode_, ptr %307, i64 0, i32 1
  %.pre170.i = load ptr, ptr %memberidx4.i133.phi.trans.insert.i, align 8
  br label %Array_FieldNode____sl__.exit.i

if.entry.i132.i:                                  ; preds = %ifend11.i
  %310 = shl i64 %309, 1
  store i64 %310, ptr %memberidx1.i128.i, align 4
  %memberidx2.i.i131.i = getelementptr inbounds %Array_FieldNode_, ptr %307, i64 0, i32 1
  %311 = load ptr, ptr %memberidx2.i.i131.i, align 8
  %312 = shl i64 %309, 4
  %313 = call ptr @realloc(ptr %311, i64 %312)
  store ptr %313, ptr %memberidx2.i.i131.i, align 8
  %.pre169.i = load i64, ptr %memberidx.i127.i, align 4
  br label %Array_FieldNode____sl__.exit.i

Array_FieldNode____sl__.exit.i:                   ; preds = %if.entry.i132.i, %ifend11.Array_FieldNode____sl__.exit_crit_edge.i
  %314 = phi ptr [ %.pre170.i, %ifend11.Array_FieldNode____sl__.exit_crit_edge.i ], [ %313, %if.entry.i132.i ]
  %315 = phi i64 [ %308, %ifend11.Array_FieldNode____sl__.exit_crit_edge.i ], [ %.pre169.i, %if.entry.i132.i ]
  %316 = add i64 %315, 1
  store i64 %316, ptr %memberidx.i127.i, align 4
  %ptridx.i134.i = getelementptr inbounds ptr, ptr %314, i64 %315
  store ptr %262, ptr %ptridx.i134.i, align 8
  br label %ifend5.i

if.entry16.i:                                     ; preds = %Parser_peek.exit99.i
  %317 = call ptr @malloc(i32 42)
  %318 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 51)
  store ptr %318, ptr %317, align 8
  %memberidx1.i.i74.i = getelementptr inbounds %MethodNode, ptr %317, i64 0, i32 1
  %319 = call ptr @malloc(i32 32)
  store ptr @VTableArray_ArgNode_, ptr %319, align 8
  %memberidx.i.i.i75.i = getelementptr inbounds %Array_ArgNode_, ptr %319, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i.i75.i, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %Array_ArgNode_, ptr %319, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i76.i = getelementptr inbounds %Array_ArgNode_, ptr %319, i64 0, i32 1
  %320 = call ptr @malloc(i32 64)
  store ptr %320, ptr %memberidx2.i.i.i76.i, align 8
  store i64 0, ptr %memberidx.i.i.i75.i, align 4
  store ptr %319, ptr %memberidx1.i.i74.i, align 8
  %memberidx4.i.i78.i = getelementptr inbounds %MethodNode, ptr %317, i64 0, i32 5
  store i1 true, ptr %memberidx4.i.i78.i, align 1
  %memberidx5.i.i.i = getelementptr inbounds %MethodNode, ptr %317, i64 0, i32 6
  store i1 false, ptr %memberidx5.i.i.i, align 1
  %321 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 23)
  %322 = load ptr, ptr %memberidx.i75, align 8
  %323 = load i64, ptr %322, align 4
  %.not.i80.i = icmp eq i64 %323, 24
  br i1 %.not.i80.i, label %ifend.i86.i, label %if.entry.i84.i

if.entry.i84.i:                                   ; preds = %if.entry16.i
  %memberidx3.i81.i = getelementptr inbounds %IdentifierToken, ptr %322, i64 0, i32 2
  %324 = load ptr, ptr %memberidx3.i81.i, align 8
  %325 = call ptr @malloc(i32 32)
  store i32 1936287860, ptr %325, align 8
  %326 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %326, align 8
  %memberidx.i.i53.i.i = getelementptr inbounds %string, ptr %326, i64 0, i32 1
  store ptr %325, ptr %memberidx.i.i53.i.i, align 8
  %memberidx1.i.i54.i.i = getelementptr inbounds %string, ptr %326, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i54.i.i, align 4
  %memberidx2.i.i55.i.i = getelementptr inbounds %string, ptr %326, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i55.i.i, align 4
  %memberidx.i.i82.i = getelementptr inbounds %string, ptr %324, i64 0, i32 2
  %327 = load i64, ptr %memberidx.i.i82.i, align 4
  %.not.i.i83.i = icmp eq i64 %327, 4
  br i1 %.not.i.i83.i, label %ifend.i.i.i, label %ifend.i86.i

ifend.i.i.i:                                      ; preds = %if.entry.i84.i
  %memberidx2.i.i85.i = getelementptr inbounds %string, ptr %324, i64 0, i32 1
  %328 = load ptr, ptr %memberidx2.i.i85.i, align 8
  %329 = call i64 @memcmp(ptr %328, ptr nonnull %325, i64 4)
  %330 = icmp eq i64 %329, 0
  br i1 %330, label %if.entry4.i.i, label %ifend.i86.i

ifend.i86.i:                                      ; preds = %if.entry.i.i88.i, %if.entry4.i.i, %ifend.i.i.i, %if.entry.i84.i, %if.entry16.i
  %331 = load ptr, ptr %memberidx.i75, align 8
  %332 = load i64, ptr %331, align 4
  %.not52.i.i = icmp eq i64 %332, 24
  br i1 %.not52.i.i, label %ifend12.i.i, label %if.entry10.i.i

if.entry4.i.i:                                    ; preds = %ifend.i.i.i
  store i1 false, ptr %memberidx4.i.i78.i, align 1
  %333 = load i64, ptr %memberidx2.i, align 8
  %334 = load ptr, ptr %3, align 8
  %memberidx2.i59.i.i = getelementptr inbounds %Array_Token_, ptr %334, i64 0, i32 2
  %335 = load i64, ptr %memberidx2.i59.i.i, align 4
  %336 = icmp slt i64 %333, %335
  br i1 %336, label %if.entry.i.i88.i, label %ifend.i86.i

if.entry.i.i88.i:                                 ; preds = %if.entry4.i.i
  %337 = add nsw i64 %333, 1
  store i64 %337, ptr %memberidx2.i, align 8
  %memberidx.i.i61.i.i = getelementptr inbounds %Array_Token_, ptr %334, i64 0, i32 1
  %338 = load ptr, ptr %memberidx.i.i61.i.i, align 8
  %ptridx.i.i.i87.i = getelementptr inbounds ptr, ptr %338, i64 %337
  %339 = load ptr, ptr %ptridx.i.i.i87.i, align 8
  store ptr %339, ptr %memberidx.i75, align 8
  br label %ifend.i86.i

if.entry10.i.i:                                   ; preds = %ifend.i86.i
  %340 = load i1, ptr %memberidx4.i.i78.i, align 1
  br i1 %340, label %ifend16.i.i, label %if.entry14.i.i

ifend12.i.i:                                      ; preds = %ifend16.i.i, %ifend.i86.i
  %341 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 24)
  %342 = load ptr, ptr %memberidx.i75, align 8
  %343 = load i64, ptr %342, align 4
  %344 = icmp eq i64 %343, 1
  br i1 %344, label %if.entry20.i.i, label %else21.i.i

if.entry14.i.i:                                   ; preds = %if.entry10.i.i
  %345 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 3)
  br label %ifend16.i.i

ifend16.i.i:                                      ; preds = %if.entry14.i.i, %if.entry10.i.i
  %346 = load ptr, ptr %memberidx1.i.i74.i, align 8
  call fastcc void @Parser_parse_args(ptr nonnull %3, ptr %346)
  br label %ifend12.i.i

if.entry20.i.i:                                   ; preds = %ifend12.i.i
  %347 = load i64, ptr %memberidx2.i, align 8
  %348 = load ptr, ptr %3, align 8
  %memberidx2.i64.i.i = getelementptr inbounds %Array_Token_, ptr %348, i64 0, i32 2
  %349 = load i64, ptr %memberidx2.i64.i.i, align 4
  %350 = icmp slt i64 %347, %349
  br i1 %350, label %if.entry.i68.i.i, label %Parser_advance.exit70.i.i

if.entry.i68.i.i:                                 ; preds = %if.entry20.i.i
  %351 = add nsw i64 %347, 1
  store i64 %351, ptr %memberidx2.i, align 8
  %memberidx.i.i66.i.i = getelementptr inbounds %Array_Token_, ptr %348, i64 0, i32 1
  %352 = load ptr, ptr %memberidx.i.i66.i.i, align 8
  %ptridx.i.i67.i.i = getelementptr inbounds ptr, ptr %352, i64 %351
  %353 = load ptr, ptr %ptridx.i.i67.i.i, align 8
  store ptr %353, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit70.i.i

Parser_advance.exit70.i.i:                        ; preds = %if.entry.i68.i.i, %if.entry20.i.i
  %memberidx23.i.i = getelementptr inbounds %MethodNode, ptr %317, i64 0, i32 4
  %354 = call fastcc ptr @Parser_parse_type(ptr nonnull %3)
  store ptr %354, ptr %memberidx23.i.i, align 8
  br label %ifend22.i.i

else21.i.i:                                       ; preds = %ifend12.i.i
  %memberidx24.i.i = getelementptr inbounds %MethodNode, ptr %317, i64 0, i32 4
  %355 = call ptr @malloc(i32 16)
  %356 = call ptr @malloc(i32 32)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %356, i8 0, i64 32, i1 false)
  store ptr %356, ptr %355, align 8
  %memberidx.i74.i.i = getelementptr inbounds %TypeNode, ptr %355, i64 0, i32 1
  store i64 12, ptr %memberidx.i74.i.i, align 4
  store ptr %355, ptr %memberidx24.i.i, align 8
  br label %ifend22.i.i

ifend22.i.i:                                      ; preds = %else21.i.i, %Parser_advance.exit70.i.i
  %357 = load ptr, ptr %memberidx.i75, align 8
  %358 = load i64, ptr %357, align 4
  %359 = icmp eq i64 %358, 25
  br i1 %359, label %if.entry27.i.i, label %else28.i.i

if.entry27.i.i:                                   ; preds = %ifend22.i.i
  %memberidx30.i.i = getelementptr inbounds %MethodNode, ptr %317, i64 0, i32 2
  %360 = call fastcc ptr @Parser_parse_block(ptr nonnull %3)
  store ptr %360, ptr %memberidx30.i.i, align 8
  br label %Parser_parse_method.exit.i

else28.i.i:                                       ; preds = %ifend22.i.i
  store i1 true, ptr %memberidx5.i.i.i, align 1
  br label %Parser_parse_method.exit.i

Parser_parse_method.exit.i:                       ; preds = %else28.i.i, %if.entry27.i.i
  %memberidx19.i = getelementptr inbounds %MethodNode, ptr %317, i64 0, i32 3
  store i64 %249, ptr %memberidx19.i, align 4
  %361 = load ptr, ptr %memberidx4.i.i148, align 8
  %memberidx.i67.i = getelementptr inbounds %Array_MethodNode_, ptr %361, i64 0, i32 2
  %362 = load i64, ptr %memberidx.i67.i, align 4
  %memberidx1.i68.i = getelementptr inbounds %Array_MethodNode_, ptr %361, i64 0, i32 3
  %363 = load i64, ptr %memberidx1.i68.i, align 4
  %.not.i.i272 = icmp slt i64 %362, %363
  br i1 %.not.i.i272, label %Parser_parse_method.exit.Array_MethodNode____sl__.exit_crit_edge.i, label %if.entry.i71.i

Parser_parse_method.exit.Array_MethodNode____sl__.exit_crit_edge.i: ; preds = %Parser_parse_method.exit.i
  %memberidx4.i.phi.trans.insert.i = getelementptr inbounds %Array_MethodNode_, ptr %361, i64 0, i32 1
  %.pre168.i = load ptr, ptr %memberidx4.i.phi.trans.insert.i, align 8
  br label %Array_MethodNode____sl__.exit.i

if.entry.i71.i:                                   ; preds = %Parser_parse_method.exit.i
  %364 = shl i64 %363, 1
  store i64 %364, ptr %memberidx1.i68.i, align 4
  %memberidx2.i.i70.i = getelementptr inbounds %Array_MethodNode_, ptr %361, i64 0, i32 1
  %365 = load ptr, ptr %memberidx2.i.i70.i, align 8
  %366 = shl i64 %363, 4
  %367 = call ptr @realloc(ptr %365, i64 %366)
  store ptr %367, ptr %memberidx2.i.i70.i, align 8
  %.pre167.i = load i64, ptr %memberidx.i67.i, align 4
  br label %Array_MethodNode____sl__.exit.i

Array_MethodNode____sl__.exit.i:                  ; preds = %if.entry.i71.i, %Parser_parse_method.exit.Array_MethodNode____sl__.exit_crit_edge.i
  %368 = phi ptr [ %.pre168.i, %Parser_parse_method.exit.Array_MethodNode____sl__.exit_crit_edge.i ], [ %367, %if.entry.i71.i ]
  %369 = phi i64 [ %362, %Parser_parse_method.exit.Array_MethodNode____sl__.exit_crit_edge.i ], [ %.pre167.i, %if.entry.i71.i ]
  %370 = add i64 %369, 1
  store i64 %370, ptr %memberidx.i67.i, align 4
  %ptridx.i.i273 = getelementptr inbounds ptr, ptr %368, i64 %369
  store ptr %317, ptr %ptridx.i.i273, align 8
  br label %ifend5.i

else17.i:                                         ; preds = %Parser_peek.exit99.i
  %371 = call ptr @malloc(i32 152)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(19) %371, ptr noundef nonnull align 8 dereferenceable(19) @135, i64 19, i1 false)
  %372 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %372, align 8
  %memberidx.i.i51.i = getelementptr inbounds %string, ptr %372, i64 0, i32 1
  store ptr %371, ptr %memberidx.i.i51.i, align 8
  %memberidx1.i.i52.i = getelementptr inbounds %string, ptr %372, i64 0, i32 2
  store i64 19, ptr %memberidx1.i.i52.i, align 4
  %memberidx2.i.i53.i = getelementptr inbounds %string, ptr %372, i64 0, i32 3
  store i64 19, ptr %memberidx2.i.i53.i, align 4
  %373 = load ptr, ptr %memberidx1.i, align 8
  %374 = call ptr @malloc(i32 24)
  %375 = load ptr, ptr %memberidx.i75, align 8
  %memberidx2.i.i274 = getelementptr inbounds %Token, ptr %375, i64 0, i32 1
  %376 = load ptr, ptr %memberidx2.i.i274, align 8
  store i64 2, ptr %374, align 4
  %memberidx1.i.i.i275 = getelementptr inbounds %FloError, ptr %374, i64 0, i32 2
  store ptr %376, ptr %memberidx1.i.i.i275, align 8
  %memberidx2.i.i44.i = getelementptr inbounds %FloError, ptr %374, i64 0, i32 1
  store ptr %372, ptr %memberidx2.i.i44.i, align 8
  %memberidx.i.i45.i = getelementptr inbounds %Array_FloError_, ptr %373, i64 0, i32 2
  %377 = load i64, ptr %memberidx.i.i45.i, align 4
  %memberidx1.i4.i.i = getelementptr inbounds %Array_FloError_, ptr %373, i64 0, i32 3
  %378 = load i64, ptr %memberidx1.i4.i.i, align 4
  %.not.i.i.i276 = icmp slt i64 %377, %378
  br i1 %.not.i.i.i276, label %else17.Parser_error.exit_crit_edge.i, label %if.entry.i.i47.i

else17.Parser_error.exit_crit_edge.i:             ; preds = %else17.i
  %memberidx4.i.i.phi.trans.insert.i = getelementptr inbounds %Array_FloError_, ptr %373, i64 0, i32 1
  %.pre166.i = load ptr, ptr %memberidx4.i.i.phi.trans.insert.i, align 8
  br label %Parser_error.exit.i

if.entry.i.i47.i:                                 ; preds = %else17.i
  %379 = shl i64 %378, 1
  store i64 %379, ptr %memberidx1.i4.i.i, align 4
  %memberidx2.i.i.i.i277 = getelementptr inbounds %Array_FloError_, ptr %373, i64 0, i32 1
  %380 = load ptr, ptr %memberidx2.i.i.i.i277, align 8
  %381 = shl i64 %378, 4
  %382 = call ptr @realloc(ptr %380, i64 %381)
  store ptr %382, ptr %memberidx2.i.i.i.i277, align 8
  %.pre165.i = load i64, ptr %memberidx.i.i45.i, align 4
  br label %Parser_error.exit.i

Parser_error.exit.i:                              ; preds = %if.entry.i.i47.i, %else17.Parser_error.exit_crit_edge.i
  %383 = phi ptr [ %.pre166.i, %else17.Parser_error.exit_crit_edge.i ], [ %382, %if.entry.i.i47.i ]
  %384 = phi i64 [ %377, %else17.Parser_error.exit_crit_edge.i ], [ %.pre165.i, %if.entry.i.i47.i ]
  %385 = add i64 %384, 1
  store i64 %385, ptr %memberidx.i.i45.i, align 4
  %ptridx.i.i.i278 = getelementptr inbounds ptr, ptr %383, i64 %384
  store ptr %374, ptr %ptridx.i.i.i278, align 8
  br label %Parser_parse_class_block.exit

Parser_parse_class_block.exit:                    ; preds = %while.end.i268, %Parser_error.exit.i
  %memberidx.i155 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %111, i64 0, i32 2
  %386 = load i64, ptr %memberidx.i155, align 4
  %memberidx1.i156 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %111, i64 0, i32 3
  %387 = load i64, ptr %memberidx1.i156, align 4
  %.not.i157 = icmp slt i64 %386, %387
  br i1 %.not.i157, label %Parser_parse_class_block.exit.Array_ClassDeclarationNode____sl__.exit_crit_edge, label %if.entry.i160

Parser_parse_class_block.exit.Array_ClassDeclarationNode____sl__.exit_crit_edge: ; preds = %Parser_parse_class_block.exit
  %memberidx4.i161.phi.trans.insert = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %111, i64 0, i32 1
  %.pre342 = load ptr, ptr %memberidx4.i161.phi.trans.insert, align 8
  br label %Array_ClassDeclarationNode____sl__.exit

if.entry.i160:                                    ; preds = %Parser_parse_class_block.exit
  %388 = shl i64 %387, 1
  store i64 %388, ptr %memberidx1.i156, align 4
  %memberidx2.i.i159 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %111, i64 0, i32 1
  %389 = load ptr, ptr %memberidx2.i.i159, align 8
  %390 = shl i64 %387, 4
  %391 = call ptr @realloc(ptr %389, i64 %390)
  store ptr %391, ptr %memberidx2.i.i159, align 8
  %.pre341 = load i64, ptr %memberidx.i155, align 4
  br label %Array_ClassDeclarationNode____sl__.exit

Array_ClassDeclarationNode____sl__.exit:          ; preds = %Parser_parse_class_block.exit.Array_ClassDeclarationNode____sl__.exit_crit_edge, %if.entry.i160
  %392 = phi ptr [ %.pre342, %Parser_parse_class_block.exit.Array_ClassDeclarationNode____sl__.exit_crit_edge ], [ %391, %if.entry.i160 ]
  %393 = phi i64 [ %386, %Parser_parse_class_block.exit.Array_ClassDeclarationNode____sl__.exit_crit_edge ], [ %.pre341, %if.entry.i160 ]
  %394 = add i64 %393, 1
  store i64 %394, ptr %memberidx.i155, align 4
  %ptridx.i162 = getelementptr inbounds ptr, ptr %392, i64 %393
  store ptr %119, ptr %ptridx.i162, align 8
  br label %ifend

if.entry11:                                       ; preds = %while.entry
  %395 = load ptr, ptr %memberidx14, align 8
  %396 = load i64, ptr %memberidx2.i, align 8
  %397 = load ptr, ptr %3, align 8
  %memberidx2.i.i280 = getelementptr inbounds %Array_Token_, ptr %397, i64 0, i32 2
  %398 = load i64, ptr %memberidx2.i.i280, align 4
  %399 = icmp slt i64 %396, %398
  br i1 %399, label %if.entry.i.i284, label %Parser_advance.exit.i287

if.entry.i.i284:                                  ; preds = %if.entry11
  %400 = add nsw i64 %396, 1
  store i64 %400, ptr %memberidx2.i, align 8
  %memberidx.i.i.i282 = getelementptr inbounds %Array_Token_, ptr %397, i64 0, i32 1
  %401 = load ptr, ptr %memberidx.i.i.i282, align 8
  %ptridx.i.i.i283 = getelementptr inbounds ptr, ptr %401, i64 %400
  %402 = load ptr, ptr %ptridx.i.i.i283, align 8
  store ptr %402, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i287

Parser_advance.exit.i287:                         ; preds = %if.entry.i.i284, %if.entry11
  %403 = call ptr @malloc(i32 24)
  %404 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 51)
  store ptr %404, ptr %403, align 8
  %memberidx1.i38.i = getelementptr inbounds %EnumNode, ptr %403, i64 0, i32 1
  %405 = call ptr @malloc(i32 32)
  store ptr @VTableArray_EnumNodeField_, ptr %405, align 8
  %memberidx.i.i39.i = getelementptr inbounds %Array_EnumNodeField_, ptr %405, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i39.i, align 4
  %memberidx1.i.i.i285 = getelementptr inbounds %Array_EnumNodeField_, ptr %405, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i285, align 4
  %memberidx2.i.i40.i = getelementptr inbounds %Array_EnumNodeField_, ptr %405, i64 0, i32 1
  %406 = call ptr @malloc(i32 64)
  store ptr %406, ptr %memberidx2.i.i40.i, align 8
  store i64 0, ptr %memberidx.i.i39.i, align 4
  store ptr %405, ptr %memberidx1.i38.i, align 8
  %memberidx4.i42.i = getelementptr inbounds %EnumNode, ptr %403, i64 0, i32 2
  store ptr null, ptr %memberidx4.i42.i, align 8
  %407 = load ptr, ptr %memberidx.i75, align 8
  %408 = load i64, ptr %407, align 4
  %409 = icmp eq i64 %408, 23
  br i1 %409, label %if.entry.i288, label %ifend.i290

if.entry.i288:                                    ; preds = %Parser_advance.exit.i287
  %410 = load i64, ptr %memberidx2.i, align 8
  %411 = load ptr, ptr %3, align 8
  %memberidx2.i44.i = getelementptr inbounds %Array_Token_, ptr %411, i64 0, i32 2
  %412 = load i64, ptr %memberidx2.i44.i, align 4
  %413 = icmp slt i64 %410, %412
  br i1 %413, label %if.entry.i48.i, label %Parser_advance.exit49.i

if.entry.i48.i:                                   ; preds = %if.entry.i288
  %414 = add nsw i64 %410, 1
  store i64 %414, ptr %memberidx2.i, align 8
  %memberidx.i.i46.i = getelementptr inbounds %Array_Token_, ptr %411, i64 0, i32 1
  %415 = load ptr, ptr %memberidx.i.i46.i, align 8
  %ptridx.i.i47.i = getelementptr inbounds ptr, ptr %415, i64 %414
  %416 = load ptr, ptr %ptridx.i.i47.i, align 8
  store ptr %416, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit49.i

Parser_advance.exit49.i:                          ; preds = %if.entry.i48.i, %if.entry.i288
  %417 = call fastcc ptr @Parser_parse_type(ptr nonnull %3)
  store ptr %417, ptr %memberidx4.i42.i, align 8
  %418 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 24)
  %.pre.i289 = load ptr, ptr %memberidx.i75, align 8
  %.pre101.i = load i64, ptr %.pre.i289, align 4
  br label %ifend.i290

ifend.i290:                                       ; preds = %Parser_advance.exit49.i, %Parser_advance.exit.i287
  %419 = phi i64 [ %408, %Parser_advance.exit.i287 ], [ %.pre101.i, %Parser_advance.exit49.i ]
  %420 = icmp eq i64 %419, 31
  %421 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i.i53.i = getelementptr inbounds %Array_FloError_, ptr %421, i64 0, i32 2
  %422 = load i64, ptr %memberidx3.i.i53.i, align 4
  %423 = icmp eq i64 %422, 0
  %424 = and i1 %420, %423
  br i1 %424, label %while.entry.i56.preheader.i, label %Parser_new_lines.exit65.i

while.entry.i56.preheader.i:                      ; preds = %ifend.i290
  %425 = load ptr, ptr %3, align 8
  %memberidx2.i12.i55.i = getelementptr inbounds %Array_Token_, ptr %425, i64 0, i32 2
  %memberidx.i.i.i58.i = getelementptr inbounds %Array_Token_, ptr %425, i64 0, i32 1
  %426 = load i64, ptr %memberidx2.i, align 8
  %427 = load i64, ptr %memberidx2.i12.i55.i, align 4
  %428 = icmp slt i64 %426, %427
  br i1 %428, label %while.entry.i56.i, label %while.entry.i56.us.i

while.entry.i56.us.i:                             ; preds = %while.entry.i56.preheader.i, %while.entry.i56.us.i
  br label %while.entry.i56.us.i

while.entry.i56.i:                                ; preds = %while.entry.i56.preheader.i, %Parser_advance.exit.i64.i
  %429 = phi i64 [ %437, %Parser_advance.exit.i64.i ], [ %426, %while.entry.i56.preheader.i ]
  %430 = load i64, ptr %memberidx2.i12.i55.i, align 4
  %431 = icmp slt i64 %429, %430
  br i1 %431, label %if.entry.i.i60.i, label %Parser_advance.exit.i64.i

if.entry.i.i60.i:                                 ; preds = %while.entry.i56.i
  %432 = add nsw i64 %429, 1
  store i64 %432, ptr %memberidx2.i, align 8
  %433 = load ptr, ptr %memberidx.i.i.i58.i, align 8
  %ptridx.i.i.i59.i = getelementptr inbounds ptr, ptr %433, i64 %432
  %434 = load ptr, ptr %ptridx.i.i.i59.i, align 8
  store ptr %434, ptr %memberidx.i75, align 8
  %.pre102.i = load i64, ptr %434, align 4
  %.pre103.i = load i64, ptr %memberidx3.i.i53.i, align 4
  br label %Parser_advance.exit.i64.i

Parser_advance.exit.i64.i:                        ; preds = %if.entry.i.i60.i, %while.entry.i56.i
  %435 = phi i64 [ %.pre103.i, %if.entry.i.i60.i ], [ 0, %while.entry.i56.i ]
  %436 = phi i64 [ %.pre102.i, %if.entry.i.i60.i ], [ 31, %while.entry.i56.i ]
  %437 = phi i64 [ %432, %if.entry.i.i60.i ], [ %429, %while.entry.i56.i ]
  %438 = icmp eq i64 %436, 31
  %439 = icmp eq i64 %435, 0
  %440 = and i1 %439, %438
  br i1 %440, label %while.entry.i56.i, label %Parser_new_lines.exit65.i

Parser_new_lines.exit65.i:                        ; preds = %Parser_advance.exit.i64.i, %ifend.i290
  %441 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 25)
  %442 = load ptr, ptr %memberidx.i75, align 8
  %443 = load i64, ptr %442, align 4
  %444 = icmp eq i64 %443, 31
  %445 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i.i69.i = getelementptr inbounds %Array_FloError_, ptr %445, i64 0, i32 2
  %446 = load i64, ptr %memberidx3.i.i69.i, align 4
  %447 = icmp eq i64 %446, 0
  %448 = and i1 %444, %447
  br i1 %448, label %while.entry.i72.preheader.i, label %Parser_new_lines.exit81.i

while.entry.i72.preheader.i:                      ; preds = %Parser_new_lines.exit65.i
  %449 = load ptr, ptr %3, align 8
  %memberidx2.i12.i71.i = getelementptr inbounds %Array_Token_, ptr %449, i64 0, i32 2
  %memberidx.i.i.i74.i = getelementptr inbounds %Array_Token_, ptr %449, i64 0, i32 1
  %450 = load i64, ptr %memberidx2.i, align 8
  %451 = load i64, ptr %memberidx2.i12.i71.i, align 4
  %452 = icmp slt i64 %450, %451
  br i1 %452, label %while.entry.i72.i, label %while.entry.i72.us.i

while.entry.i72.us.i:                             ; preds = %while.entry.i72.preheader.i, %while.entry.i72.us.i
  br label %while.entry.i72.us.i

while.entry.i72.i:                                ; preds = %while.entry.i72.preheader.i, %Parser_advance.exit.i80.i
  %453 = phi i64 [ %460, %Parser_advance.exit.i80.i ], [ 31, %while.entry.i72.preheader.i ]
  %454 = phi i64 [ %463, %Parser_advance.exit.i80.i ], [ %450, %while.entry.i72.preheader.i ]
  %455 = load i64, ptr %memberidx2.i12.i71.i, align 4
  %456 = icmp slt i64 %454, %455
  br i1 %456, label %if.entry.i.i76.i, label %Parser_advance.exit.i80.i

if.entry.i.i76.i:                                 ; preds = %while.entry.i72.i
  %457 = add nsw i64 %454, 1
  store i64 %457, ptr %memberidx2.i, align 8
  %458 = load ptr, ptr %memberidx.i.i.i74.i, align 8
  %ptridx.i.i.i75.i = getelementptr inbounds ptr, ptr %458, i64 %457
  %459 = load ptr, ptr %ptridx.i.i.i75.i, align 8
  store ptr %459, ptr %memberidx.i75, align 8
  %.pre104.i = load i64, ptr %459, align 4
  %.pre105.i = load i64, ptr %memberidx3.i.i69.i, align 4
  br label %Parser_advance.exit.i80.i

Parser_advance.exit.i80.i:                        ; preds = %if.entry.i.i76.i, %while.entry.i72.i
  %460 = phi i64 [ %.pre104.i, %if.entry.i.i76.i ], [ %453, %while.entry.i72.i ]
  %461 = phi i64 [ %.pre105.i, %if.entry.i.i76.i ], [ 0, %while.entry.i72.i ]
  %462 = phi i64 [ %.pre104.i, %if.entry.i.i76.i ], [ 31, %while.entry.i72.i ]
  %463 = phi i64 [ %457, %if.entry.i.i76.i ], [ %454, %while.entry.i72.i ]
  %464 = icmp eq i64 %462, 31
  %465 = icmp eq i64 %461, 0
  %466 = and i1 %465, %464
  br i1 %466, label %while.entry.i72.i, label %Parser_new_lines.exit81.i

Parser_new_lines.exit81.i:                        ; preds = %Parser_advance.exit.i80.i, %Parser_new_lines.exit65.i
  %467 = phi i64 [ %443, %Parser_new_lines.exit65.i ], [ %460, %Parser_advance.exit.i80.i ]
  %468 = icmp eq i64 %467, 51
  br i1 %468, label %while.entry.i291, label %Parser_parse_enum.exit

while.entry.i291:                                 ; preds = %Parser_new_lines.exit81.i, %Parser_new_lines.exit.i304
  %469 = call ptr @malloc(i32 16)
  %470 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 51)
  store ptr %470, ptr %469, align 8
  %memberidx1.i89.i = getelementptr inbounds %EnumNodeField, ptr %469, i64 0, i32 1
  store ptr null, ptr %memberidx1.i89.i, align 8
  %471 = load ptr, ptr %memberidx.i75, align 8
  %472 = load i64, ptr %471, align 4
  %473 = icmp eq i64 %472, 36
  br i1 %473, label %if.entry7.i, label %ifend9.i

if.entry7.i:                                      ; preds = %while.entry.i291
  %474 = load i64, ptr %memberidx2.i, align 8
  %475 = load ptr, ptr %3, align 8
  %memberidx2.i83.i = getelementptr inbounds %Array_Token_, ptr %475, i64 0, i32 2
  %476 = load i64, ptr %memberidx2.i83.i, align 4
  %477 = icmp slt i64 %474, %476
  br i1 %477, label %if.entry.i87.i, label %Parser_advance.exit88.i

if.entry.i87.i:                                   ; preds = %if.entry7.i
  %478 = add nsw i64 %474, 1
  store i64 %478, ptr %memberidx2.i, align 8
  %memberidx.i.i85.i = getelementptr inbounds %Array_Token_, ptr %475, i64 0, i32 1
  %479 = load ptr, ptr %memberidx.i.i85.i, align 8
  %ptridx.i.i86.i = getelementptr inbounds ptr, ptr %479, i64 %478
  %480 = load ptr, ptr %ptridx.i.i86.i, align 8
  store ptr %480, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit88.i

Parser_advance.exit88.i:                          ; preds = %if.entry.i87.i, %if.entry7.i
  %481 = call fastcc ptr @Parser_parse_expression(ptr nonnull %3)
  store ptr %481, ptr %memberidx1.i89.i, align 8
  br label %ifend9.i

ifend9.i:                                         ; preds = %Parser_advance.exit88.i, %while.entry.i291
  %482 = load i64, ptr %memberidx.i.i39.i, align 4
  %483 = load i64, ptr %memberidx1.i.i.i285, align 4
  %.not.i.i293 = icmp slt i64 %482, %483
  br i1 %.not.i.i293, label %ifend9.Array_EnumNodeField____sl__.exit_crit_edge.i, label %if.entry.i37.i

ifend9.Array_EnumNodeField____sl__.exit_crit_edge.i: ; preds = %ifend9.i
  %.pre107.i = load ptr, ptr %memberidx2.i.i40.i, align 8
  br label %Array_EnumNodeField____sl__.exit.i

if.entry.i37.i:                                   ; preds = %ifend9.i
  %484 = shl i64 %483, 1
  store i64 %484, ptr %memberidx1.i.i.i285, align 4
  %485 = load ptr, ptr %memberidx2.i.i40.i, align 8
  %486 = shl i64 %483, 4
  %487 = call ptr @realloc(ptr %485, i64 %486)
  store ptr %487, ptr %memberidx2.i.i40.i, align 8
  %.pre106.i = load i64, ptr %memberidx.i.i39.i, align 4
  br label %Array_EnumNodeField____sl__.exit.i

Array_EnumNodeField____sl__.exit.i:               ; preds = %if.entry.i37.i, %ifend9.Array_EnumNodeField____sl__.exit_crit_edge.i
  %488 = phi ptr [ %.pre107.i, %ifend9.Array_EnumNodeField____sl__.exit_crit_edge.i ], [ %487, %if.entry.i37.i ]
  %489 = phi i64 [ %482, %ifend9.Array_EnumNodeField____sl__.exit_crit_edge.i ], [ %.pre106.i, %if.entry.i37.i ]
  %490 = add i64 %489, 1
  store i64 %490, ptr %memberidx.i.i39.i, align 4
  %ptridx.i.i294 = getelementptr inbounds ptr, ptr %488, i64 %489
  store ptr %469, ptr %ptridx.i.i294, align 8
  %491 = load ptr, ptr %memberidx.i75, align 8
  %492 = load i64, ptr %491, align 4
  %493 = icmp eq i64 %492, 31
  %494 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i.i.i295 = getelementptr inbounds %Array_FloError_, ptr %494, i64 0, i32 2
  %495 = load i64, ptr %memberidx3.i.i.i295, align 4
  %496 = icmp eq i64 %495, 0
  %497 = and i1 %493, %496
  br i1 %497, label %while.entry.i.preheader.i298, label %Parser_new_lines.exit.i304

while.entry.i.preheader.i298:                     ; preds = %Array_EnumNodeField____sl__.exit.i
  %498 = load ptr, ptr %3, align 8
  %memberidx2.i12.i.i296 = getelementptr inbounds %Array_Token_, ptr %498, i64 0, i32 2
  %memberidx.i.i.i.i297 = getelementptr inbounds %Array_Token_, ptr %498, i64 0, i32 1
  %499 = load i64, ptr %memberidx2.i, align 8
  %500 = load i64, ptr %memberidx2.i12.i.i296, align 4
  %501 = icmp slt i64 %499, %500
  br i1 %501, label %while.entry.i.i300, label %while.entry.i.us.i299

while.entry.i.us.i299:                            ; preds = %while.entry.i.preheader.i298, %while.entry.i.us.i299
  br label %while.entry.i.us.i299

while.entry.i.i300:                               ; preds = %while.entry.i.preheader.i298, %Parser_advance.exit.i.i303
  %502 = phi i64 [ %509, %Parser_advance.exit.i.i303 ], [ 31, %while.entry.i.preheader.i298 ]
  %503 = phi i64 [ %512, %Parser_advance.exit.i.i303 ], [ %499, %while.entry.i.preheader.i298 ]
  %504 = load i64, ptr %memberidx2.i12.i.i296, align 4
  %505 = icmp slt i64 %503, %504
  br i1 %505, label %if.entry.i.i.i302, label %Parser_advance.exit.i.i303

if.entry.i.i.i302:                                ; preds = %while.entry.i.i300
  %506 = add nsw i64 %503, 1
  store i64 %506, ptr %memberidx2.i, align 8
  %507 = load ptr, ptr %memberidx.i.i.i.i297, align 8
  %ptridx.i.i.i.i301 = getelementptr inbounds ptr, ptr %507, i64 %506
  %508 = load ptr, ptr %ptridx.i.i.i.i301, align 8
  store ptr %508, ptr %memberidx.i75, align 8
  %.pre108.i = load i64, ptr %508, align 4
  %.pre109.i = load i64, ptr %memberidx3.i.i.i295, align 4
  br label %Parser_advance.exit.i.i303

Parser_advance.exit.i.i303:                       ; preds = %if.entry.i.i.i302, %while.entry.i.i300
  %509 = phi i64 [ %.pre108.i, %if.entry.i.i.i302 ], [ %502, %while.entry.i.i300 ]
  %510 = phi i64 [ %.pre109.i, %if.entry.i.i.i302 ], [ 0, %while.entry.i.i300 ]
  %511 = phi i64 [ %.pre108.i, %if.entry.i.i.i302 ], [ 31, %while.entry.i.i300 ]
  %512 = phi i64 [ %506, %if.entry.i.i.i302 ], [ %503, %while.entry.i.i300 ]
  %513 = icmp eq i64 %511, 31
  %514 = icmp eq i64 %510, 0
  %515 = and i1 %514, %513
  br i1 %515, label %while.entry.i.i300, label %Parser_new_lines.exit.i304

Parser_new_lines.exit.i304:                       ; preds = %Parser_advance.exit.i.i303, %Array_EnumNodeField____sl__.exit.i
  %516 = phi i64 [ %492, %Array_EnumNodeField____sl__.exit.i ], [ %509, %Parser_advance.exit.i.i303 ]
  %517 = icmp eq i64 %516, 51
  br i1 %517, label %while.entry.i291, label %Parser_parse_enum.exit

Parser_parse_enum.exit:                           ; preds = %Parser_new_lines.exit.i304, %Parser_new_lines.exit81.i
  %518 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 26)
  %memberidx.i164 = getelementptr inbounds %Array_EnumNode_, ptr %395, i64 0, i32 2
  %519 = load i64, ptr %memberidx.i164, align 4
  %memberidx1.i165 = getelementptr inbounds %Array_EnumNode_, ptr %395, i64 0, i32 3
  %520 = load i64, ptr %memberidx1.i165, align 4
  %.not.i166 = icmp slt i64 %519, %520
  br i1 %.not.i166, label %Parser_parse_enum.exit.Array_EnumNode____sl__.exit_crit_edge, label %if.entry.i169

Parser_parse_enum.exit.Array_EnumNode____sl__.exit_crit_edge: ; preds = %Parser_parse_enum.exit
  %memberidx4.i170.phi.trans.insert = getelementptr inbounds %Array_EnumNode_, ptr %395, i64 0, i32 1
  %.pre329 = load ptr, ptr %memberidx4.i170.phi.trans.insert, align 8
  br label %Array_EnumNode____sl__.exit

if.entry.i169:                                    ; preds = %Parser_parse_enum.exit
  %521 = shl i64 %520, 1
  store i64 %521, ptr %memberidx1.i165, align 4
  %memberidx2.i.i168 = getelementptr inbounds %Array_EnumNode_, ptr %395, i64 0, i32 1
  %522 = load ptr, ptr %memberidx2.i.i168, align 8
  %523 = shl i64 %520, 4
  %524 = call ptr @realloc(ptr %522, i64 %523)
  store ptr %524, ptr %memberidx2.i.i168, align 8
  %.pre328 = load i64, ptr %memberidx.i164, align 4
  br label %Array_EnumNode____sl__.exit

Array_EnumNode____sl__.exit:                      ; preds = %Parser_parse_enum.exit.Array_EnumNode____sl__.exit_crit_edge, %if.entry.i169
  %525 = phi ptr [ %.pre329, %Parser_parse_enum.exit.Array_EnumNode____sl__.exit_crit_edge ], [ %524, %if.entry.i169 ]
  %526 = phi i64 [ %519, %Parser_parse_enum.exit.Array_EnumNode____sl__.exit_crit_edge ], [ %.pre328, %if.entry.i169 ]
  %527 = add i64 %526, 1
  store i64 %527, ptr %memberidx.i164, align 4
  %ptridx.i171 = getelementptr inbounds ptr, ptr %525, i64 %526
  store ptr %403, ptr %ptridx.i171, align 8
  br label %ifend

if.entry17:                                       ; preds = %while.entry
  %528 = load ptr, ptr %memberidx20, align 8
  %529 = call ptr @malloc(i32 16)
  %530 = call ptr @malloc(i32 32)
  store ptr @VTableArray_IdentifierToken_, ptr %530, align 8
  %memberidx.i.i.i173 = getelementptr inbounds %Array_IdentifierToken_, ptr %530, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i.i173, align 4
  %memberidx1.i.i.i174 = getelementptr inbounds %Array_IdentifierToken_, ptr %530, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i174, align 4
  %memberidx2.i.i.i175 = getelementptr inbounds %Array_IdentifierToken_, ptr %530, i64 0, i32 1
  %531 = call ptr @malloc(i32 64)
  store ptr %531, ptr %memberidx2.i.i.i175, align 8
  store i64 0, ptr %memberidx.i.i.i173, align 4
  store ptr %530, ptr %529, align 8
  %532 = load i64, ptr %memberidx2.i, align 8
  %533 = load ptr, ptr %3, align 8
  %memberidx2.i24.i = getelementptr inbounds %Array_Token_, ptr %533, i64 0, i32 2
  %534 = load i64, ptr %memberidx2.i24.i, align 4
  %535 = icmp slt i64 %532, %534
  br i1 %535, label %if.entry.i.i180, label %if.entry17.Parser_advance.exit.i182_crit_edge

if.entry17.Parser_advance.exit.i182_crit_edge:    ; preds = %if.entry17
  %.pre322 = load ptr, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i182

if.entry.i.i180:                                  ; preds = %if.entry17
  %536 = add nsw i64 %532, 1
  store i64 %536, ptr %memberidx2.i, align 8
  %memberidx.i.i25.i = getelementptr inbounds %Array_Token_, ptr %533, i64 0, i32 1
  %537 = load ptr, ptr %memberidx.i.i25.i, align 8
  %ptridx.i.i.i179 = getelementptr inbounds ptr, ptr %537, i64 %536
  %538 = load ptr, ptr %ptridx.i.i.i179, align 8
  store ptr %538, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit.i182

Parser_advance.exit.i182:                         ; preds = %if.entry17.Parser_advance.exit.i182_crit_edge, %if.entry.i.i180
  %539 = phi i64 [ %532, %if.entry17.Parser_advance.exit.i182_crit_edge ], [ %536, %if.entry.i.i180 ]
  %540 = phi ptr [ %.pre322, %if.entry17.Parser_advance.exit.i182_crit_edge ], [ %538, %if.entry.i.i180 ]
  %541 = load i64, ptr %540, align 4
  %542 = icmp eq i64 %541, 51
  br i1 %542, label %if.entry.i185, label %ifend.i189

if.entry.i185:                                    ; preds = %Parser_advance.exit.i182
  %543 = load i64, ptr %memberidx1.i.i.i174, align 4
  %.not.i.i184 = icmp sgt i64 %543, 0
  br i1 %.not.i.i184, label %Array_IdentifierToken____sl__.exit.i, label %if.entry.i29.i

if.entry.i29.i:                                   ; preds = %if.entry.i185
  %544 = shl i64 %543, 1
  store i64 %544, ptr %memberidx1.i.i.i174, align 4
  %545 = shl i64 %543, 4
  %546 = call ptr @realloc(ptr %531, i64 %545)
  store ptr %546, ptr %memberidx2.i.i.i175, align 8
  br label %Array_IdentifierToken____sl__.exit.i

Array_IdentifierToken____sl__.exit.i:             ; preds = %if.entry.i29.i, %if.entry.i185
  %547 = phi ptr [ %546, %if.entry.i29.i ], [ %531, %if.entry.i185 ]
  store i64 1, ptr %memberidx.i.i.i173, align 4
  store ptr %540, ptr %547, align 8
  %548 = load i64, ptr %memberidx2.i24.i, align 4
  %549 = icmp slt i64 %539, %548
  br i1 %549, label %if.entry.i35.i, label %Parser_advance.exit36.i

if.entry.i35.i:                                   ; preds = %Array_IdentifierToken____sl__.exit.i
  %550 = add nsw i64 %539, 1
  store i64 %550, ptr %memberidx2.i, align 8
  %memberidx.i.i33.i = getelementptr inbounds %Array_Token_, ptr %533, i64 0, i32 1
  %551 = load ptr, ptr %memberidx.i.i33.i, align 8
  %ptridx.i.i34.i = getelementptr inbounds ptr, ptr %551, i64 %550
  %552 = load ptr, ptr %ptridx.i.i34.i, align 8
  store ptr %552, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit36.i

Parser_advance.exit36.i:                          ; preds = %if.entry.i35.i, %Array_IdentifierToken____sl__.exit.i
  %553 = phi ptr [ %552, %if.entry.i35.i ], [ %540, %Array_IdentifierToken____sl__.exit.i ]
  %554 = load i64, ptr %553, align 4
  %555 = icmp eq i64 %554, 3
  %556 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i43.i = getelementptr inbounds %Array_FloError_, ptr %556, i64 0, i32 2
  %557 = load i64, ptr %memberidx3.i43.i, align 4
  %558 = icmp eq i64 %557, 0
  %559 = and i1 %555, %558
  br i1 %559, label %while.entry.i190, label %while.end.i

ifend.i189thread-pre-split:                       ; preds = %if.entry.i40.i, %if.entry.i.i.i194, %else.i.i
  %.ph = phi ptr [ %598, %if.entry.i40.i ], [ %606, %if.entry.i.i.i194 ], [ %.pre325, %else.i.i ]
  %.pr = load i64, ptr %.ph, align 4
  br label %ifend.i189

ifend.i189:                                       ; preds = %ifend.i189thread-pre-split, %Parser_advance.exit.i182
  %560 = phi i64 [ %.pr, %ifend.i189thread-pre-split ], [ %541, %Parser_advance.exit.i182 ]
  %561 = phi ptr [ %.ph, %ifend.i189thread-pre-split ], [ %540, %Parser_advance.exit.i182 ]
  %memberidx9.i188 = getelementptr inbounds %ImportNode, ptr %529, i64 0, i32 1
  %562 = icmp eq i64 %560, 32
  br i1 %562, label %if.entry.i60.i, label %else.i66.i

if.entry.i60.i:                                   ; preds = %ifend.i189
  %563 = load i64, ptr %memberidx2.i, align 8
  %564 = load ptr, ptr %3, align 8
  %memberidx2.i.i59.i = getelementptr inbounds %Array_Token_, ptr %564, i64 0, i32 2
  %565 = load i64, ptr %memberidx2.i.i59.i, align 4
  %566 = icmp slt i64 %563, %565
  br i1 %566, label %if.entry.i.i64.i, label %Parser_parse_import.exit

if.entry.i.i64.i:                                 ; preds = %if.entry.i60.i
  %567 = add nsw i64 %563, 1
  store i64 %567, ptr %memberidx2.i, align 8
  %memberidx.i.i.i62.i = getelementptr inbounds %Array_Token_, ptr %564, i64 0, i32 1
  %568 = load ptr, ptr %memberidx.i.i.i62.i, align 8
  %ptridx.i.i.i63.i = getelementptr inbounds ptr, ptr %568, i64 %567
  %569 = load ptr, ptr %ptridx.i.i.i63.i, align 8
  store ptr %569, ptr %memberidx.i75, align 8
  br label %Parser_parse_import.exit

else.i66.i:                                       ; preds = %ifend.i189
  %570 = call ptr @malloc(i32 16)
  %memberidx35.i67.i = getelementptr inbounds %Token, ptr %561, i64 0, i32 1
  %571 = load ptr, ptr %memberidx35.i67.i, align 8
  store i64 44, ptr %570, align 4
  %memberidx1.i82.i68.i = getelementptr inbounds %Token, ptr %570, i64 0, i32 1
  store ptr %571, ptr %memberidx1.i82.i68.i, align 8
  br label %Parser_parse_import.exit

while.entry.i190:                                 ; preds = %Parser_advance.exit36.i, %Array_IdentifierToken____sl__.exit55.i
  %572 = load i64, ptr %memberidx2.i, align 8
  %573 = load ptr, ptr %3, align 8
  %memberidx2.i71.i = getelementptr inbounds %Array_Token_, ptr %573, i64 0, i32 2
  %574 = load i64, ptr %memberidx2.i71.i, align 4
  %575 = icmp slt i64 %572, %574
  br i1 %575, label %if.entry.i75.i, label %Parser_advance.exit76.i

if.entry.i75.i:                                   ; preds = %while.entry.i190
  %576 = add nsw i64 %572, 1
  store i64 %576, ptr %memberidx2.i, align 8
  %memberidx.i.i73.i = getelementptr inbounds %Array_Token_, ptr %573, i64 0, i32 1
  %577 = load ptr, ptr %memberidx.i.i73.i, align 8
  %ptridx.i.i74.i = getelementptr inbounds ptr, ptr %577, i64 %576
  %578 = load ptr, ptr %ptridx.i.i74.i, align 8
  store ptr %578, ptr %memberidx.i75, align 8
  br label %Parser_advance.exit76.i

Parser_advance.exit76.i:                          ; preds = %if.entry.i75.i, %while.entry.i190
  %579 = load ptr, ptr %529, align 8
  %580 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 51)
  %memberidx.i47.i = getelementptr inbounds %Array_IdentifierToken_, ptr %579, i64 0, i32 2
  %581 = load i64, ptr %memberidx.i47.i, align 4
  %memberidx1.i48.i = getelementptr inbounds %Array_IdentifierToken_, ptr %579, i64 0, i32 3
  %582 = load i64, ptr %memberidx1.i48.i, align 4
  %.not.i49.i = icmp slt i64 %581, %582
  br i1 %.not.i49.i, label %Parser_advance.exit76.i.Array_IdentifierToken____sl__.exit55.i_crit_edge, label %if.entry.i52.i

Parser_advance.exit76.i.Array_IdentifierToken____sl__.exit55.i_crit_edge: ; preds = %Parser_advance.exit76.i
  %memberidx4.i53.i.phi.trans.insert = getelementptr inbounds %Array_IdentifierToken_, ptr %579, i64 0, i32 1
  %.pre324 = load ptr, ptr %memberidx4.i53.i.phi.trans.insert, align 8
  br label %Array_IdentifierToken____sl__.exit55.i

if.entry.i52.i:                                   ; preds = %Parser_advance.exit76.i
  %583 = shl i64 %582, 1
  store i64 %583, ptr %memberidx1.i48.i, align 4
  %memberidx2.i.i51.i = getelementptr inbounds %Array_IdentifierToken_, ptr %579, i64 0, i32 1
  %584 = load ptr, ptr %memberidx2.i.i51.i, align 8
  %585 = shl i64 %582, 4
  %586 = call ptr @realloc(ptr %584, i64 %585)
  store ptr %586, ptr %memberidx2.i.i51.i, align 8
  %.pre323 = load i64, ptr %memberidx.i47.i, align 4
  br label %Array_IdentifierToken____sl__.exit55.i

Array_IdentifierToken____sl__.exit55.i:           ; preds = %Parser_advance.exit76.i.Array_IdentifierToken____sl__.exit55.i_crit_edge, %if.entry.i52.i
  %587 = phi ptr [ %586, %if.entry.i52.i ], [ %.pre324, %Parser_advance.exit76.i.Array_IdentifierToken____sl__.exit55.i_crit_edge ]
  %588 = phi i64 [ %.pre323, %if.entry.i52.i ], [ %581, %Parser_advance.exit76.i.Array_IdentifierToken____sl__.exit55.i_crit_edge ]
  %589 = add i64 %588, 1
  store i64 %589, ptr %memberidx.i47.i, align 4
  %ptridx.i54.i = getelementptr inbounds ptr, ptr %587, i64 %588
  store ptr %580, ptr %ptridx.i54.i, align 8
  %590 = load ptr, ptr %memberidx.i75, align 8
  %591 = load i64, ptr %590, align 4
  %592 = icmp eq i64 %591, 3
  %593 = load ptr, ptr %memberidx1.i, align 8
  %memberidx3.i46.i = getelementptr inbounds %Array_FloError_, ptr %593, i64 0, i32 2
  %594 = load i64, ptr %memberidx3.i46.i, align 4
  %595 = icmp eq i64 %594, 0
  %596 = and i1 %592, %595
  br i1 %596, label %while.entry.i190, label %while.end.i

while.end.i:                                      ; preds = %Array_IdentifierToken____sl__.exit55.i, %Parser_advance.exit36.i
  %597 = phi i64 [ %554, %Parser_advance.exit36.i ], [ %591, %Array_IdentifierToken____sl__.exit55.i ]
  %598 = phi ptr [ %553, %Parser_advance.exit36.i ], [ %590, %Array_IdentifierToken____sl__.exit55.i ]
  %599 = icmp eq i64 %597, 82
  br i1 %599, label %if.entry.i40.i, label %else.i.i

if.entry.i40.i:                                   ; preds = %while.end.i
  %600 = load i64, ptr %memberidx2.i, align 8
  %601 = load ptr, ptr %3, align 8
  %memberidx2.i.i39.i = getelementptr inbounds %Array_Token_, ptr %601, i64 0, i32 2
  %602 = load i64, ptr %memberidx2.i.i39.i, align 4
  %603 = icmp slt i64 %600, %602
  br i1 %603, label %if.entry.i.i.i194, label %ifend.i189thread-pre-split

if.entry.i.i.i194:                                ; preds = %if.entry.i40.i
  %604 = add nsw i64 %600, 1
  store i64 %604, ptr %memberidx2.i, align 8
  %memberidx.i.i.i.i192 = getelementptr inbounds %Array_Token_, ptr %601, i64 0, i32 1
  %605 = load ptr, ptr %memberidx.i.i.i.i192, align 8
  %ptridx.i.i.i.i193 = getelementptr inbounds ptr, ptr %605, i64 %604
  %606 = load ptr, ptr %ptridx.i.i.i.i193, align 8
  store ptr %606, ptr %memberidx.i75, align 8
  br label %ifend.i189thread-pre-split

else.i.i:                                         ; preds = %while.end.i
  %607 = call ptr @malloc(i32 16)
  %memberidx35.i.i = getelementptr inbounds %Token, ptr %598, i64 0, i32 1
  %608 = load ptr, ptr %memberidx35.i.i, align 8
  store i64 44, ptr %607, align 4
  %memberidx1.i82.i.i = getelementptr inbounds %Token, ptr %607, i64 0, i32 1
  store ptr %608, ptr %memberidx1.i82.i.i, align 8
  %.pre325 = load ptr, ptr %memberidx.i75, align 8
  br label %ifend.i189thread-pre-split

Parser_parse_import.exit:                         ; preds = %if.entry.i60.i, %if.entry.i.i64.i, %else.i66.i
  %common.ret.op.i57.i = phi ptr [ %570, %else.i66.i ], [ %561, %if.entry.i.i64.i ], [ %561, %if.entry.i60.i ]
  store ptr %common.ret.op.i57.i, ptr %memberidx9.i188, align 8
  %memberidx.i196 = getelementptr inbounds %Array_ImportNode_, ptr %528, i64 0, i32 2
  %609 = load i64, ptr %memberidx.i196, align 4
  %memberidx1.i197 = getelementptr inbounds %Array_ImportNode_, ptr %528, i64 0, i32 3
  %610 = load i64, ptr %memberidx1.i197, align 4
  %.not.i198 = icmp slt i64 %609, %610
  br i1 %.not.i198, label %Parser_parse_import.exit.Array_ImportNode____sl__.exit_crit_edge, label %if.entry.i201

Parser_parse_import.exit.Array_ImportNode____sl__.exit_crit_edge: ; preds = %Parser_parse_import.exit
  %memberidx4.i202.phi.trans.insert = getelementptr inbounds %Array_ImportNode_, ptr %528, i64 0, i32 1
  %.pre327 = load ptr, ptr %memberidx4.i202.phi.trans.insert, align 8
  br label %Array_ImportNode____sl__.exit

if.entry.i201:                                    ; preds = %Parser_parse_import.exit
  %611 = shl i64 %610, 1
  store i64 %611, ptr %memberidx1.i197, align 4
  %memberidx2.i.i200 = getelementptr inbounds %Array_ImportNode_, ptr %528, i64 0, i32 1
  %612 = load ptr, ptr %memberidx2.i.i200, align 8
  %613 = shl i64 %610, 4
  %614 = call ptr @realloc(ptr %612, i64 %613)
  store ptr %614, ptr %memberidx2.i.i200, align 8
  %.pre326 = load i64, ptr %memberidx.i196, align 4
  br label %Array_ImportNode____sl__.exit

Array_ImportNode____sl__.exit:                    ; preds = %Parser_parse_import.exit.Array_ImportNode____sl__.exit_crit_edge, %if.entry.i201
  %615 = phi ptr [ %.pre327, %Parser_parse_import.exit.Array_ImportNode____sl__.exit_crit_edge ], [ %614, %if.entry.i201 ]
  %616 = phi i64 [ %609, %Parser_parse_import.exit.Array_ImportNode____sl__.exit_crit_edge ], [ %.pre326, %if.entry.i201 ]
  %617 = add i64 %616, 1
  store i64 %617, ptr %memberidx.i196, align 4
  %ptridx.i203 = getelementptr inbounds ptr, ptr %615, i64 %616
  store ptr %529, ptr %ptridx.i203, align 8
  br label %ifend

if.entry23:                                       ; preds = %while.entry
  %618 = load ptr, ptr %memberidx26, align 8
  %619 = call fastcc ptr @Parser_parse_const_declaration_statement(ptr nonnull %3)
  %memberidx.i205 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %618, i64 0, i32 2
  %620 = load i64, ptr %memberidx.i205, align 4
  %memberidx1.i206 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %618, i64 0, i32 3
  %621 = load i64, ptr %memberidx1.i206, align 4
  %.not.i207 = icmp slt i64 %620, %621
  br i1 %.not.i207, label %if.entry23.Array_ConstDeclarationStatement____sl__.exit_crit_edge, label %if.entry.i210

if.entry23.Array_ConstDeclarationStatement____sl__.exit_crit_edge: ; preds = %if.entry23
  %memberidx4.i211.phi.trans.insert = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %618, i64 0, i32 1
  %.pre321 = load ptr, ptr %memberidx4.i211.phi.trans.insert, align 8
  br label %Array_ConstDeclarationStatement____sl__.exit

if.entry.i210:                                    ; preds = %if.entry23
  %622 = shl i64 %621, 1
  store i64 %622, ptr %memberidx1.i206, align 4
  %memberidx2.i.i209 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %618, i64 0, i32 1
  %623 = load ptr, ptr %memberidx2.i.i209, align 8
  %624 = shl i64 %621, 4
  %625 = call ptr @realloc(ptr %623, i64 %624)
  store ptr %625, ptr %memberidx2.i.i209, align 8
  %.pre320 = load i64, ptr %memberidx.i205, align 4
  br label %Array_ConstDeclarationStatement____sl__.exit

Array_ConstDeclarationStatement____sl__.exit:     ; preds = %if.entry23.Array_ConstDeclarationStatement____sl__.exit_crit_edge, %if.entry.i210
  %626 = phi ptr [ %.pre321, %if.entry23.Array_ConstDeclarationStatement____sl__.exit_crit_edge ], [ %625, %if.entry.i210 ]
  %627 = phi i64 [ %620, %if.entry23.Array_ConstDeclarationStatement____sl__.exit_crit_edge ], [ %.pre320, %if.entry.i210 ]
  %628 = add i64 %627, 1
  store i64 %628, ptr %memberidx.i205, align 4
  %ptridx.i212 = getelementptr inbounds ptr, ptr %626, i64 %627
  store ptr %619, ptr %ptridx.i212, align 8
  br label %ifend

if.entry29:                                       ; preds = %while.entry
  %629 = load ptr, ptr %memberidx32, align 8
  %630 = call fastcc ptr @Parser_parse_variable_declaration_statement(ptr nonnull %3)
  %memberidx.i214 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %629, i64 0, i32 2
  %631 = load i64, ptr %memberidx.i214, align 4
  %memberidx1.i215 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %629, i64 0, i32 3
  %632 = load i64, ptr %memberidx1.i215, align 4
  %.not.i216 = icmp slt i64 %631, %632
  br i1 %.not.i216, label %if.entry29.Array_VarDeclarationStatement____sl__.exit_crit_edge, label %if.entry.i219

if.entry29.Array_VarDeclarationStatement____sl__.exit_crit_edge: ; preds = %if.entry29
  %memberidx4.i220.phi.trans.insert = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %629, i64 0, i32 1
  %.pre319 = load ptr, ptr %memberidx4.i220.phi.trans.insert, align 8
  br label %Array_VarDeclarationStatement____sl__.exit

if.entry.i219:                                    ; preds = %if.entry29
  %633 = shl i64 %632, 1
  store i64 %633, ptr %memberidx1.i215, align 4
  %memberidx2.i.i218 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %629, i64 0, i32 1
  %634 = load ptr, ptr %memberidx2.i.i218, align 8
  %635 = shl i64 %632, 4
  %636 = call ptr @realloc(ptr %634, i64 %635)
  store ptr %636, ptr %memberidx2.i.i218, align 8
  %.pre318 = load i64, ptr %memberidx.i214, align 4
  br label %Array_VarDeclarationStatement____sl__.exit

Array_VarDeclarationStatement____sl__.exit:       ; preds = %if.entry29.Array_VarDeclarationStatement____sl__.exit_crit_edge, %if.entry.i219
  %637 = phi ptr [ %.pre319, %if.entry29.Array_VarDeclarationStatement____sl__.exit_crit_edge ], [ %636, %if.entry.i219 ]
  %638 = phi i64 [ %631, %if.entry29.Array_VarDeclarationStatement____sl__.exit_crit_edge ], [ %.pre318, %if.entry.i219 ]
  %639 = add i64 %638, 1
  store i64 %639, ptr %memberidx.i214, align 4
  %ptridx.i221 = getelementptr inbounds ptr, ptr %637, i64 %638
  store ptr %630, ptr %ptridx.i221, align 8
  br label %ifend

else30:                                           ; preds = %while.entry
  %memberidx36 = getelementptr inbounds %IdentifierToken, ptr %35, i64 0, i32 2
  %640 = load ptr, ptr %memberidx36, align 8
  %641 = call ptr @malloc(i32 32)
  store i32 1701869940, ptr %641, align 8
  %642 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %642, align 8
  %memberidx.i.i223 = getelementptr inbounds %string, ptr %642, i64 0, i32 1
  store ptr %641, ptr %memberidx.i.i223, align 8
  %memberidx1.i.i224 = getelementptr inbounds %string, ptr %642, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i224, align 4
  %memberidx2.i.i225 = getelementptr inbounds %string, ptr %642, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i225, align 4
  %memberidx.i226 = getelementptr inbounds %string, ptr %640, i64 0, i32 2
  %643 = load i64, ptr %memberidx.i226, align 4
  %.not.i228 = icmp eq i64 %643, 4
  br i1 %.not.i228, label %string___eq__.exit, label %else38

string___eq__.exit:                               ; preds = %else30
  %644 = icmp eq i64 %34, 51
  %memberidx2.i229 = getelementptr inbounds %string, ptr %640, i64 0, i32 1
  %645 = load ptr, ptr %memberidx2.i229, align 8
  %646 = call i64 @memcmp(ptr %645, ptr nonnull %641, i64 4)
  %647 = icmp eq i64 %646, 0
  %648 = and i1 %644, %647
  br i1 %648, label %if.entry37, label %else38

if.entry37:                                       ; preds = %string___eq__.exit
  %649 = load ptr, ptr %memberidx40, align 8
  %650 = load i64, ptr %memberidx2.i, align 8
  %651 = load ptr, ptr %3, align 8
  %memberidx2.i.i233 = getelementptr inbounds %Array_Token_, ptr %651, i64 0, i32 2
  %652 = load i64, ptr %memberidx2.i.i233, align 4
  %653 = icmp slt i64 %650, %652
  br i1 %653, label %if.entry.i.i237, label %Parser_parse_type_alias.exit

if.entry.i.i237:                                  ; preds = %if.entry37
  %654 = add nsw i64 %650, 1
  store i64 %654, ptr %memberidx2.i, align 8
  %memberidx.i.i.i235 = getelementptr inbounds %Array_Token_, ptr %651, i64 0, i32 1
  %655 = load ptr, ptr %memberidx.i.i.i235, align 8
  %ptridx.i.i.i236 = getelementptr inbounds ptr, ptr %655, i64 %654
  %656 = load ptr, ptr %ptridx.i.i.i236, align 8
  store ptr %656, ptr %memberidx.i75, align 8
  br label %Parser_parse_type_alias.exit

Parser_parse_type_alias.exit:                     ; preds = %if.entry37, %if.entry.i.i237
  %657 = call ptr @malloc(i32 16)
  %658 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 51)
  store ptr %658, ptr %657, align 8
  %659 = call fastcc ptr @Parser_eat(ptr nonnull %3, i64 36)
  %memberidx.i238 = getelementptr inbounds %TypeAliasNode, ptr %657, i64 0, i32 1
  %660 = call fastcc ptr @Parser_parse_type(ptr nonnull %3)
  store ptr %660, ptr %memberidx.i238, align 8
  %memberidx.i93 = getelementptr inbounds %Array_TypeAliasNode_, ptr %649, i64 0, i32 2
  %661 = load i64, ptr %memberidx.i93, align 4
  %memberidx1.i94 = getelementptr inbounds %Array_TypeAliasNode_, ptr %649, i64 0, i32 3
  %662 = load i64, ptr %memberidx1.i94, align 4
  %.not.i = icmp slt i64 %661, %662
  br i1 %.not.i, label %Parser_parse_type_alias.exit.Array_TypeAliasNode____sl__.exit_crit_edge, label %if.entry.i97

Parser_parse_type_alias.exit.Array_TypeAliasNode____sl__.exit_crit_edge: ; preds = %Parser_parse_type_alias.exit
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_TypeAliasNode_, ptr %649, i64 0, i32 1
  %.pre348 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_TypeAliasNode____sl__.exit

if.entry.i97:                                     ; preds = %Parser_parse_type_alias.exit
  %663 = shl i64 %662, 1
  store i64 %663, ptr %memberidx1.i94, align 4
  %memberidx2.i.i96 = getelementptr inbounds %Array_TypeAliasNode_, ptr %649, i64 0, i32 1
  %664 = load ptr, ptr %memberidx2.i.i96, align 8
  %665 = shl i64 %662, 4
  %666 = call ptr @realloc(ptr %664, i64 %665)
  store ptr %666, ptr %memberidx2.i.i96, align 8
  %.pre347 = load i64, ptr %memberidx.i93, align 4
  br label %Array_TypeAliasNode____sl__.exit

Array_TypeAliasNode____sl__.exit:                 ; preds = %Parser_parse_type_alias.exit.Array_TypeAliasNode____sl__.exit_crit_edge, %if.entry.i97
  %667 = phi ptr [ %.pre348, %Parser_parse_type_alias.exit.Array_TypeAliasNode____sl__.exit_crit_edge ], [ %666, %if.entry.i97 ]
  %668 = phi i64 [ %661, %Parser_parse_type_alias.exit.Array_TypeAliasNode____sl__.exit_crit_edge ], [ %.pre347, %if.entry.i97 ]
  %669 = add i64 %668, 1
  store i64 %669, ptr %memberidx.i93, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %667, i64 %668
  store ptr %657, ptr %ptridx.i, align 8
  br label %ifend

else38:                                           ; preds = %else30, %string___eq__.exit
  %670 = call ptr @malloc(i32 632)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(79) %670, ptr noundef nonnull align 8 dereferenceable(79) @136, i64 79, i1 false)
  %671 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %671, align 8
  %memberidx.i.i80 = getelementptr inbounds %string, ptr %671, i64 0, i32 1
  store ptr %670, ptr %memberidx.i.i80, align 8
  %memberidx1.i.i81 = getelementptr inbounds %string, ptr %671, i64 0, i32 2
  store i64 79, ptr %memberidx1.i.i81, align 4
  %memberidx2.i.i82 = getelementptr inbounds %string, ptr %671, i64 0, i32 3
  store i64 79, ptr %memberidx2.i.i82, align 4
  %672 = load ptr, ptr %memberidx1.i, align 8
  %673 = call ptr @malloc(i32 24)
  %674 = load ptr, ptr %memberidx.i75, align 8
  %memberidx2.i70 = getelementptr inbounds %Token, ptr %674, i64 0, i32 1
  %675 = load ptr, ptr %memberidx2.i70, align 8
  store i64 2, ptr %673, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %673, i64 0, i32 2
  store ptr %675, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %673, i64 0, i32 1
  store ptr %671, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %672, i64 0, i32 2
  %676 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i4.i = getelementptr inbounds %Array_FloError_, ptr %672, i64 0, i32 3
  %677 = load i64, ptr %memberidx1.i4.i, align 4
  %.not.i.i = icmp slt i64 %676, %677
  br i1 %.not.i.i, label %else38.Parser_error.exit_crit_edge, label %if.entry.i.i

else38.Parser_error.exit_crit_edge:               ; preds = %else38
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %672, i64 0, i32 1
  %.pre346 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %Parser_error.exit

if.entry.i.i:                                     ; preds = %else38
  %678 = shl i64 %677, 1
  store i64 %678, ptr %memberidx1.i4.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %672, i64 0, i32 1
  %679 = load ptr, ptr %memberidx2.i.i.i, align 8
  %680 = shl i64 %677, 4
  %681 = call ptr @realloc(ptr %679, i64 %680)
  store ptr %681, ptr %memberidx2.i.i.i, align 8
  %.pre345 = load i64, ptr %memberidx.i.i, align 4
  br label %Parser_error.exit

Parser_error.exit:                                ; preds = %else38.Parser_error.exit_crit_edge, %if.entry.i.i
  %682 = phi ptr [ %.pre346, %else38.Parser_error.exit_crit_edge ], [ %681, %if.entry.i.i ]
  %683 = phi i64 [ %676, %else38.Parser_error.exit_crit_edge ], [ %.pre345, %if.entry.i.i ]
  %684 = add i64 %683, 1
  store i64 %684, ptr %memberidx.i.i, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %682, i64 %683
  store ptr %673, ptr %ptridx.i.i, align 8
  br label %ifend
}

define internal fastcc ptr @Parser_parse_block(ptr %0) unnamed_addr {
  %2 = tail call ptr @malloc(i32 16)
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  store ptr %4, ptr %2, align 8
  %memberidx.i77 = getelementptr inbounds %BlockNode, ptr %2, i64 0, i32 1
  %5 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_StatementNode_, ptr %5, align 8
  %memberidx.i.i78 = getelementptr inbounds %Array_StatementNode_, ptr %5, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i78, align 4
  %memberidx1.i.i = getelementptr inbounds %Array_StatementNode_, ptr %5, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i79 = getelementptr inbounds %Array_StatementNode_, ptr %5, i64 0, i32 1
  %6 = tail call ptr @malloc(i32 64)
  store ptr %6, ptr %memberidx2.i.i79, align 8
  store i64 0, ptr %memberidx.i.i78, align 4
  store ptr %5, ptr %memberidx.i77, align 8
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load i64, ptr %7, align 4
  %9 = icmp eq i64 %8, 31
  %memberidx2.i.i63 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %10 = load ptr, ptr %memberidx2.i.i63, align 8
  %memberidx3.i.i64 = getelementptr inbounds %Array_FloError_, ptr %10, i64 0, i32 2
  %11 = load i64, ptr %memberidx3.i.i64, align 4
  %12 = icmp eq i64 %11, 0
  %13 = and i1 %9, %12
  br i1 %13, label %while.entry.i67.preheader, label %Parser_new_lines.exit76

while.entry.i67.preheader:                        ; preds = %1
  %memberidx.i11.i65 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %14 = load ptr, ptr %0, align 8
  %memberidx2.i12.i66 = getelementptr inbounds %Array_Token_, ptr %14, i64 0, i32 2
  %memberidx.i.i.i69 = getelementptr inbounds %Array_Token_, ptr %14, i64 0, i32 1
  %15 = load i64, ptr %memberidx.i11.i65, align 4
  %16 = load i64, ptr %memberidx2.i12.i66, align 4
  %17 = icmp slt i64 %15, %16
  br i1 %17, label %while.entry.i67, label %while.entry.i67.us

while.entry.i67.us:                               ; preds = %while.entry.i67.preheader, %while.entry.i67.us
  br label %while.entry.i67.us

while.entry.i67:                                  ; preds = %while.entry.i67.preheader, %Parser_advance.exit.i75
  %18 = phi i64 [ %26, %Parser_advance.exit.i75 ], [ 0, %while.entry.i67.preheader ]
  %19 = phi i64 [ %27, %Parser_advance.exit.i75 ], [ 31, %while.entry.i67.preheader ]
  %20 = phi i64 [ %30, %Parser_advance.exit.i75 ], [ %15, %while.entry.i67.preheader ]
  %21 = load i64, ptr %memberidx2.i12.i66, align 4
  %22 = icmp slt i64 %20, %21
  br i1 %22, label %if.entry.i.i71, label %Parser_advance.exit.i75

if.entry.i.i71:                                   ; preds = %while.entry.i67
  %23 = add nsw i64 %20, 1
  store i64 %23, ptr %memberidx.i11.i65, align 4
  %24 = load ptr, ptr %memberidx.i.i.i69, align 8
  %ptridx.i.i.i70 = getelementptr inbounds ptr, ptr %24, i64 %23
  %25 = load ptr, ptr %ptridx.i.i.i70, align 8
  store ptr %25, ptr %memberidx, align 8
  %.pre = load i64, ptr %25, align 4
  %.pre92 = load i64, ptr %memberidx3.i.i64, align 4
  br label %Parser_advance.exit.i75

Parser_advance.exit.i75:                          ; preds = %if.entry.i.i71, %while.entry.i67
  %26 = phi i64 [ %.pre92, %if.entry.i.i71 ], [ %18, %while.entry.i67 ]
  %27 = phi i64 [ %.pre, %if.entry.i.i71 ], [ %19, %while.entry.i67 ]
  %28 = phi i64 [ %.pre92, %if.entry.i.i71 ], [ 0, %while.entry.i67 ]
  %29 = phi i64 [ %.pre, %if.entry.i.i71 ], [ 31, %while.entry.i67 ]
  %30 = phi i64 [ %23, %if.entry.i.i71 ], [ %20, %while.entry.i67 ]
  %31 = icmp eq i64 %29, 31
  %32 = icmp eq i64 %28, 0
  %33 = and i1 %31, %32
  br i1 %33, label %while.entry.i67, label %Parser_new_lines.exit76

Parser_new_lines.exit76:                          ; preds = %Parser_advance.exit.i75, %1
  %34 = phi i64 [ %11, %1 ], [ %26, %Parser_advance.exit.i75 ]
  %35 = phi i64 [ %8, %1 ], [ %27, %Parser_advance.exit.i75 ]
  %36 = icmp eq i64 %35, 25
  br i1 %36, label %if.entry, label %else

if.entry:                                         ; preds = %Parser_new_lines.exit76
  %memberidx.i56 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %37 = load i64, ptr %memberidx.i56, align 4
  %38 = load ptr, ptr %0, align 8
  %memberidx2.i57 = getelementptr inbounds %Array_Token_, ptr %38, i64 0, i32 2
  %39 = load i64, ptr %memberidx2.i57, align 4
  %40 = icmp slt i64 %37, %39
  br i1 %40, label %Parser_advance.exit, label %Parser_new_lines.exit55

Parser_advance.exit:                              ; preds = %if.entry
  %41 = add nsw i64 %37, 1
  store i64 %41, ptr %memberidx.i56, align 4
  %memberidx.i.i59 = getelementptr inbounds %Array_Token_, ptr %38, i64 0, i32 1
  %42 = load ptr, ptr %memberidx.i.i59, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %42, i64 %41
  %43 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %43, ptr %memberidx, align 8
  %.pre95 = load i64, ptr %43, align 4
  %.pre96 = load i64, ptr %memberidx3.i.i64, align 4
  %44 = icmp eq i64 %.pre95, 31
  %45 = icmp eq i64 %.pre96, 0
  %46 = and i1 %44, %45
  br i1 %46, label %while.entry.i46.preheader, label %Parser_new_lines.exit55

while.entry.i46.preheader:                        ; preds = %Parser_advance.exit
  %memberidx.i.i.i48 = getelementptr inbounds %Array_Token_, ptr %38, i64 0, i32 1
  %47 = load i64, ptr %memberidx2.i57, align 4
  %48 = icmp slt i64 %41, %47
  br i1 %48, label %while.entry.i46, label %while.entry.i46.us

while.entry.i46.us:                               ; preds = %while.entry.i46.preheader, %while.entry.i46.us
  br label %while.entry.i46.us

while.entry.i46:                                  ; preds = %while.entry.i46.preheader, %Parser_advance.exit.i54
  %49 = phi i64 [ %57, %Parser_advance.exit.i54 ], [ 31, %while.entry.i46.preheader ]
  %50 = phi i64 [ %58, %Parser_advance.exit.i54 ], [ 0, %while.entry.i46.preheader ]
  %51 = phi i64 [ %61, %Parser_advance.exit.i54 ], [ %41, %while.entry.i46.preheader ]
  %52 = load i64, ptr %memberidx2.i57, align 4
  %53 = icmp slt i64 %51, %52
  br i1 %53, label %if.entry.i.i50, label %Parser_advance.exit.i54

if.entry.i.i50:                                   ; preds = %while.entry.i46
  %54 = add nsw i64 %51, 1
  store i64 %54, ptr %memberidx.i56, align 4
  %55 = load ptr, ptr %memberidx.i.i.i48, align 8
  %ptridx.i.i.i49 = getelementptr inbounds ptr, ptr %55, i64 %54
  %56 = load ptr, ptr %ptridx.i.i.i49, align 8
  store ptr %56, ptr %memberidx, align 8
  %.pre97 = load i64, ptr %56, align 4
  %.pre98 = load i64, ptr %memberidx3.i.i64, align 4
  br label %Parser_advance.exit.i54

Parser_advance.exit.i54:                          ; preds = %if.entry.i.i50, %while.entry.i46
  %57 = phi i64 [ %.pre97, %if.entry.i.i50 ], [ %49, %while.entry.i46 ]
  %58 = phi i64 [ %.pre98, %if.entry.i.i50 ], [ %50, %while.entry.i46 ]
  %59 = phi i64 [ %.pre98, %if.entry.i.i50 ], [ 0, %while.entry.i46 ]
  %60 = phi i64 [ %.pre97, %if.entry.i.i50 ], [ 31, %while.entry.i46 ]
  %61 = phi i64 [ %54, %if.entry.i.i50 ], [ %51, %while.entry.i46 ]
  %62 = icmp eq i64 %60, 31
  %63 = icmp eq i64 %59, 0
  %64 = and i1 %62, %63
  br i1 %64, label %while.entry.i46, label %Parser_new_lines.exit55

Parser_new_lines.exit55:                          ; preds = %Parser_advance.exit.i54, %if.entry, %Parser_advance.exit
  %65 = phi i64 [ %.pre95, %Parser_advance.exit ], [ 25, %if.entry ], [ %57, %Parser_advance.exit.i54 ]
  %66 = phi i64 [ %.pre96, %Parser_advance.exit ], [ %34, %if.entry ], [ %58, %Parser_advance.exit.i54 ]
  %.fr = freeze i64 %66
  %67 = icmp eq i64 %.fr, 0
  br i1 %67, label %switch.early.test, label %while.end

switch.early.test:                                ; preds = %Parser_new_lines.exit55
  switch i64 %65, label %while.entry [
    i64 44, label %while.end
    i64 26, label %while.end
  ]

else:                                             ; preds = %Parser_new_lines.exit76
  %68 = tail call fastcc ptr @Parser_parse_statement(ptr nonnull %0)
  %69 = load i64, ptr %memberidx.i.i78, align 4
  %70 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i30 = icmp slt i64 %69, %70
  br i1 %.not.i30, label %else.Array_StatementNode____sl__.exit36_crit_edge, label %if.entry.i33

else.Array_StatementNode____sl__.exit36_crit_edge: ; preds = %else
  %.pre94 = load ptr, ptr %memberidx2.i.i79, align 8
  br label %Array_StatementNode____sl__.exit36

if.entry.i33:                                     ; preds = %else
  %71 = shl i64 %70, 1
  store i64 %71, ptr %memberidx1.i.i, align 4
  %72 = load ptr, ptr %memberidx2.i.i79, align 8
  %73 = shl i64 %70, 4
  %74 = tail call ptr @realloc(ptr %72, i64 %73)
  store ptr %74, ptr %memberidx2.i.i79, align 8
  %.pre93 = load i64, ptr %memberidx.i.i78, align 4
  br label %Array_StatementNode____sl__.exit36

Array_StatementNode____sl__.exit36:               ; preds = %else.Array_StatementNode____sl__.exit36_crit_edge, %if.entry.i33
  %75 = phi ptr [ %.pre94, %else.Array_StatementNode____sl__.exit36_crit_edge ], [ %74, %if.entry.i33 ]
  %76 = phi i64 [ %69, %else.Array_StatementNode____sl__.exit36_crit_edge ], [ %.pre93, %if.entry.i33 ]
  %77 = add i64 %76, 1
  store i64 %77, ptr %memberidx.i.i78, align 4
  %ptridx.i35 = getelementptr inbounds ptr, ptr %75, i64 %76
  store ptr %68, ptr %ptridx.i35, align 8
  br label %ifend

ifend:                                            ; preds = %Array_StatementNode____sl__.exit36, %while.end
  ret ptr %2

while.entry:                                      ; preds = %switch.early.test, %switch.early.test84
  %78 = tail call fastcc ptr @Parser_parse_statement(ptr nonnull %0)
  %79 = load i64, ptr %memberidx.i.i78, align 4
  %80 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i = icmp slt i64 %79, %80
  br i1 %.not.i, label %while.entry.Array_StatementNode____sl__.exit_crit_edge, label %if.entry.i

while.entry.Array_StatementNode____sl__.exit_crit_edge: ; preds = %while.entry
  %.pre100 = load ptr, ptr %memberidx2.i.i79, align 8
  br label %Array_StatementNode____sl__.exit

if.entry.i:                                       ; preds = %while.entry
  %81 = shl i64 %80, 1
  store i64 %81, ptr %memberidx1.i.i, align 4
  %82 = load ptr, ptr %memberidx2.i.i79, align 8
  %83 = shl i64 %80, 4
  %84 = tail call ptr @realloc(ptr %82, i64 %83)
  store ptr %84, ptr %memberidx2.i.i79, align 8
  %.pre99 = load i64, ptr %memberidx.i.i78, align 4
  br label %Array_StatementNode____sl__.exit

Array_StatementNode____sl__.exit:                 ; preds = %while.entry.Array_StatementNode____sl__.exit_crit_edge, %if.entry.i
  %85 = phi ptr [ %.pre100, %while.entry.Array_StatementNode____sl__.exit_crit_edge ], [ %84, %if.entry.i ]
  %86 = phi i64 [ %79, %while.entry.Array_StatementNode____sl__.exit_crit_edge ], [ %.pre99, %if.entry.i ]
  %87 = add i64 %86, 1
  store i64 %87, ptr %memberidx.i.i78, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %85, i64 %86
  store ptr %78, ptr %ptridx.i, align 8
  %88 = load ptr, ptr %memberidx, align 8
  %89 = load i64, ptr %88, align 4
  %90 = icmp eq i64 %89, 31
  %91 = load ptr, ptr %memberidx2.i.i63, align 8
  %memberidx3.i.i = getelementptr inbounds %Array_FloError_, ptr %91, i64 0, i32 2
  %92 = load i64, ptr %memberidx3.i.i, align 4
  %93 = icmp eq i64 %92, 0
  %94 = and i1 %90, %93
  br i1 %94, label %while.entry.i.preheader, label %Parser_new_lines.exit

while.entry.i.preheader:                          ; preds = %Array_StatementNode____sl__.exit
  %95 = load ptr, ptr %0, align 8
  %memberidx2.i12.i = getelementptr inbounds %Array_Token_, ptr %95, i64 0, i32 2
  %memberidx.i.i.i = getelementptr inbounds %Array_Token_, ptr %95, i64 0, i32 1
  %96 = load i64, ptr %memberidx.i56, align 4
  %97 = load i64, ptr %memberidx2.i12.i, align 4
  %98 = icmp slt i64 %96, %97
  br i1 %98, label %while.entry.i, label %while.entry.i.us

while.entry.i.us:                                 ; preds = %while.entry.i.preheader, %while.entry.i.us
  br label %while.entry.i.us

while.entry.i:                                    ; preds = %while.entry.i.preheader, %Parser_advance.exit.i
  %99 = phi i64 [ %107, %Parser_advance.exit.i ], [ 31, %while.entry.i.preheader ]
  %100 = phi i64 [ %108, %Parser_advance.exit.i ], [ 0, %while.entry.i.preheader ]
  %101 = phi i64 [ %111, %Parser_advance.exit.i ], [ %96, %while.entry.i.preheader ]
  %102 = load i64, ptr %memberidx2.i12.i, align 4
  %103 = icmp slt i64 %101, %102
  br i1 %103, label %if.entry.i.i, label %Parser_advance.exit.i

if.entry.i.i:                                     ; preds = %while.entry.i
  %104 = add nsw i64 %101, 1
  store i64 %104, ptr %memberidx.i56, align 4
  %105 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %105, i64 %104
  %106 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %106, ptr %memberidx, align 8
  %.pre101 = load i64, ptr %106, align 4
  %.pre102 = load i64, ptr %memberidx3.i.i, align 4
  br label %Parser_advance.exit.i

Parser_advance.exit.i:                            ; preds = %if.entry.i.i, %while.entry.i
  %107 = phi i64 [ %.pre101, %if.entry.i.i ], [ %99, %while.entry.i ]
  %108 = phi i64 [ %.pre102, %if.entry.i.i ], [ %100, %while.entry.i ]
  %109 = phi i64 [ %.pre102, %if.entry.i.i ], [ 0, %while.entry.i ]
  %110 = phi i64 [ %.pre101, %if.entry.i.i ], [ 31, %while.entry.i ]
  %111 = phi i64 [ %104, %if.entry.i.i ], [ %101, %while.entry.i ]
  %112 = icmp eq i64 %110, 31
  %113 = icmp eq i64 %109, 0
  %114 = and i1 %112, %113
  br i1 %114, label %while.entry.i, label %Parser_new_lines.exit

Parser_new_lines.exit:                            ; preds = %Parser_advance.exit.i, %Array_StatementNode____sl__.exit
  %115 = phi i64 [ %89, %Array_StatementNode____sl__.exit ], [ %107, %Parser_advance.exit.i ]
  %116 = phi i64 [ %92, %Array_StatementNode____sl__.exit ], [ %108, %Parser_advance.exit.i ]
  %.fr85 = freeze i64 %116
  %117 = icmp eq i64 %.fr85, 0
  br i1 %117, label %switch.early.test84, label %while.end

switch.early.test84:                              ; preds = %Parser_new_lines.exit
  switch i64 %115, label %while.entry [
    i64 44, label %while.end
    i64 26, label %while.end
  ]

while.end:                                        ; preds = %switch.early.test84, %switch.early.test84, %Parser_new_lines.exit, %switch.early.test, %switch.early.test, %Parser_new_lines.exit55
  %118 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 26)
  br label %ifend
}

define internal fastcc ptr @Parser_parse_type(ptr %0) unnamed_addr {
  %2 = tail call ptr @malloc(i32 16)
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  store ptr %4, ptr %2, align 8
  %memberidx.i135 = getelementptr inbounds %TypeNode, ptr %2, i64 0, i32 1
  store i64 12, ptr %memberidx.i135, align 4
  %5 = load i64, ptr %3, align 4
  switch i64 %5, label %else7 [
    i64 51, label %if.entry
    i64 23, label %if.entry6
  ]

if.entry:                                         ; preds = %1
  %6 = tail call fastcc ptr @Parser_parse_object_type(ptr nonnull %0)
  br label %ifend

ifend:                                            ; preds = %if.entry.i.i125, %ifend.i, %Parser_parse_function_type.exit, %if.entry
  %type_node.0 = phi ptr [ %6, %if.entry ], [ %16, %Parser_parse_function_type.exit ], [ %39, %ifend.i ], [ %39, %if.entry.i.i125 ]
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load i64, ptr %7, align 4
  %9 = icmp eq i64 %8, 27
  %10 = icmp eq i64 %8, 4
  %11 = or i1 %9, %10
  %memberidx2.i133 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %12 = load ptr, ptr %memberidx2.i133, align 8
  %memberidx3.i134 = getelementptr inbounds %Array_FloError_, ptr %12, i64 0, i32 2
  %13 = load i64, ptr %memberidx3.i134, align 4
  %14 = icmp eq i64 %13, 0
  %15 = and i1 %11, %14
  br i1 %15, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %ifend
  %memberidx.i.i101 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry

if.entry6:                                        ; preds = %1
  %16 = tail call ptr @malloc(i32 32)
  %17 = load ptr, ptr %memberidx, align 8
  %memberidx1.i137 = getelementptr inbounds %Token, ptr %17, i64 0, i32 1
  %18 = load ptr, ptr %memberidx1.i137, align 8
  store ptr %18, ptr %16, align 8
  %memberidx.i.i23.i = getelementptr inbounds %TypeNode, ptr %16, i64 0, i32 1
  store i64 17, ptr %memberidx.i.i23.i, align 4
  %memberidx.i24.i = getelementptr inbounds %FunctionTypeNode, ptr %16, i64 0, i32 2
  %19 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_TypeNode_, ptr %19, align 8
  %memberidx.i3.i.i = getelementptr inbounds %Array_TypeNode_, ptr %19, i64 0, i32 2
  store i64 0, ptr %memberidx.i3.i.i, align 4
  %memberidx1.i.i25.i = getelementptr inbounds %Array_TypeNode_, ptr %19, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i25.i, align 4
  %memberidx2.i.i26.i = getelementptr inbounds %Array_TypeNode_, ptr %19, i64 0, i32 1
  %20 = tail call ptr @malloc(i32 64)
  store ptr %20, ptr %memberidx2.i.i26.i, align 8
  store i64 0, ptr %memberidx.i3.i.i, align 4
  store ptr %19, ptr %memberidx.i24.i, align 8
  %memberidx.i.i138 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %21 = load i64, ptr %memberidx.i.i138, align 4
  %22 = load ptr, ptr %0, align 8
  %memberidx2.i21.i = getelementptr inbounds %Array_Token_, ptr %22, i64 0, i32 2
  %23 = load i64, ptr %memberidx2.i21.i, align 4
  %24 = icmp slt i64 %21, %23
  br i1 %24, label %if.entry.i.i141, label %if.entry6.Parser_advance.exit.i143_crit_edge

if.entry6.Parser_advance.exit.i143_crit_edge:     ; preds = %if.entry6
  %.pre = load ptr, ptr %memberidx, align 8
  br label %Parser_advance.exit.i143

if.entry.i.i141:                                  ; preds = %if.entry6
  %25 = add nsw i64 %21, 1
  store i64 %25, ptr %memberidx.i.i138, align 4
  %memberidx.i.i.i139 = getelementptr inbounds %Array_Token_, ptr %22, i64 0, i32 1
  %26 = load ptr, ptr %memberidx.i.i.i139, align 8
  %ptridx.i.i.i140 = getelementptr inbounds ptr, ptr %26, i64 %25
  %27 = load ptr, ptr %ptridx.i.i.i140, align 8
  store ptr %27, ptr %memberidx, align 8
  br label %Parser_advance.exit.i143

Parser_advance.exit.i143:                         ; preds = %if.entry6.Parser_advance.exit.i143_crit_edge, %if.entry.i.i141
  %28 = phi ptr [ %.pre, %if.entry6.Parser_advance.exit.i143_crit_edge ], [ %27, %if.entry.i.i141 ]
  %29 = load i64, ptr %28, align 4
  %.not.i142 = icmp eq i64 %29, 24
  br i1 %.not.i142, label %Parser_parse_function_type.exit, label %if.entry.i145

if.entry.i145:                                    ; preds = %Parser_advance.exit.i143
  tail call fastcc void @Parser_parse_type_list(ptr nonnull %0, ptr nonnull %19)
  br label %Parser_parse_function_type.exit

Parser_parse_function_type.exit:                  ; preds = %Parser_advance.exit.i143, %if.entry.i145
  %30 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 24)
  %31 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 43)
  %memberidx5.i = getelementptr inbounds %FunctionTypeNode, ptr %16, i64 0, i32 3
  %32 = tail call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  store ptr %32, ptr %memberidx5.i, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = tail call ptr @malloc(i32 32)
  %35 = load i64, ptr %18, align 4
  %memberidx1.i.i146 = getelementptr inbounds %FloRange, ptr %33, i64 0, i32 1
  %36 = load i64, ptr %memberidx1.i.i146, align 4
  %memberidx2.i.i147 = getelementptr inbounds %FloRange, ptr %18, i64 0, i32 2
  %37 = load i64, ptr %memberidx2.i.i147, align 4
  %memberidx3.i.i148 = getelementptr inbounds %FloRange, ptr %33, i64 0, i32 3
  %38 = load i64, ptr %memberidx3.i.i148, align 4
  store i64 %35, ptr %34, align 4
  %memberidx1.i.i.i149 = getelementptr inbounds %FloRange, ptr %34, i64 0, i32 1
  store i64 %36, ptr %memberidx1.i.i.i149, align 4
  %memberidx2.i.i.i150 = getelementptr inbounds %FloRange, ptr %34, i64 0, i32 2
  store i64 %37, ptr %memberidx2.i.i.i150, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %34, i64 0, i32 3
  store i64 %38, ptr %memberidx3.i.i.i, align 4
  store ptr %34, ptr %16, align 8
  br label %ifend

else7:                                            ; preds = %1
  %39 = tail call ptr @malloc(i32 16)
  %40 = load ptr, ptr %memberidx, align 8
  %memberidx1.i119 = getelementptr inbounds %Token, ptr %40, i64 0, i32 1
  %41 = load ptr, ptr %memberidx1.i119, align 8
  store ptr %41, ptr %39, align 8
  %memberidx.i.i120 = getelementptr inbounds %TypeNode, ptr %39, i64 0, i32 1
  store i64 12, ptr %memberidx.i.i120, align 4
  %42 = load i64, ptr %40, align 4
  switch i64 %42, label %if.entry73.i [
    i64 59, label %if.entry.i122
    i64 60, label %if.entry7.i
    i64 61, label %if.entry13.i
    i64 62, label %if.entry19.i
    i64 63, label %if.entry25.i
    i64 64, label %if.entry31.i
    i64 65, label %if.entry37.i
    i64 66, label %if.entry43.i
    i64 67, label %if.entry49.i
    i64 68, label %if.entry55.i
    i64 69, label %if.entry61.i
    i64 70, label %if.entry67.i
    i64 71, label %ifend.i
  ]

if.entry.i122:                                    ; preds = %else7
  store i64 0, ptr %memberidx.i.i120, align 4
  br label %ifend.i

ifend.i:                                          ; preds = %else7, %Parser_error.exit.i, %if.entry67.i, %if.entry61.i, %if.entry55.i, %if.entry49.i, %if.entry43.i, %if.entry37.i, %if.entry31.i, %if.entry25.i, %if.entry19.i, %if.entry13.i, %if.entry7.i, %if.entry.i122
  %memberidx.i104.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %43 = load i64, ptr %memberidx.i104.i, align 4
  %44 = load ptr, ptr %0, align 8
  %memberidx2.i105.i = getelementptr inbounds %Array_Token_, ptr %44, i64 0, i32 2
  %45 = load i64, ptr %memberidx2.i105.i, align 4
  %46 = icmp slt i64 %43, %45
  br i1 %46, label %if.entry.i.i125, label %ifend

if.entry.i.i125:                                  ; preds = %ifend.i
  %47 = add nsw i64 %43, 1
  store i64 %47, ptr %memberidx.i104.i, align 4
  %memberidx.i.i106.i = getelementptr inbounds %Array_Token_, ptr %44, i64 0, i32 1
  %48 = load ptr, ptr %memberidx.i.i106.i, align 8
  %ptridx.i.i107.i = getelementptr inbounds ptr, ptr %48, i64 %47
  %49 = load ptr, ptr %ptridx.i.i107.i, align 8
  store ptr %49, ptr %memberidx, align 8
  br label %ifend

if.entry7.i:                                      ; preds = %else7
  store i64 1, ptr %memberidx.i.i120, align 4
  br label %ifend.i

if.entry13.i:                                     ; preds = %else7
  store i64 2, ptr %memberidx.i.i120, align 4
  br label %ifend.i

if.entry19.i:                                     ; preds = %else7
  store i64 3, ptr %memberidx.i.i120, align 4
  br label %ifend.i

if.entry25.i:                                     ; preds = %else7
  store i64 4, ptr %memberidx.i.i120, align 4
  br label %ifend.i

if.entry31.i:                                     ; preds = %else7
  store i64 5, ptr %memberidx.i.i120, align 4
  br label %ifend.i

if.entry37.i:                                     ; preds = %else7
  store i64 6, ptr %memberidx.i.i120, align 4
  br label %ifend.i

if.entry43.i:                                     ; preds = %else7
  store i64 7, ptr %memberidx.i.i120, align 4
  br label %ifend.i

if.entry49.i:                                     ; preds = %else7
  store i64 8, ptr %memberidx.i.i120, align 4
  br label %ifend.i

if.entry55.i:                                     ; preds = %else7
  store i64 9, ptr %memberidx.i.i120, align 4
  br label %ifend.i

if.entry61.i:                                     ; preds = %else7
  store i64 10, ptr %memberidx.i.i120, align 4
  br label %ifend.i

if.entry67.i:                                     ; preds = %else7
  store i64 11, ptr %memberidx.i.i120, align 4
  br label %ifend.i

if.entry73.i:                                     ; preds = %else7
  %50 = tail call ptr @malloc(i32 208)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(26) %50, ptr noundef nonnull align 8 dereferenceable(26) @130, i64 26, i1 false)
  %51 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %51, align 8
  %memberidx.i.i108.i = getelementptr inbounds %string, ptr %51, i64 0, i32 1
  store ptr %50, ptr %memberidx.i.i108.i, align 8
  %memberidx1.i.i109.i = getelementptr inbounds %string, ptr %51, i64 0, i32 2
  store i64 26, ptr %memberidx1.i.i109.i, align 4
  %memberidx2.i.i110.i = getelementptr inbounds %string, ptr %51, i64 0, i32 3
  store i64 26, ptr %memberidx2.i.i110.i, align 4
  %memberidx.i103.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %52 = load ptr, ptr %memberidx.i103.i, align 8
  %53 = tail call ptr @malloc(i32 24)
  %54 = load ptr, ptr %memberidx, align 8
  %memberidx2.i.i129 = getelementptr inbounds %Token, ptr %54, i64 0, i32 1
  %55 = load ptr, ptr %memberidx2.i.i129, align 8
  store i64 2, ptr %53, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloError, ptr %53, i64 0, i32 2
  store ptr %55, ptr %memberidx1.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %FloError, ptr %53, i64 0, i32 1
  store ptr %51, ptr %memberidx2.i.i.i, align 8
  %memberidx.i.i.i130 = getelementptr inbounds %Array_FloError_, ptr %52, i64 0, i32 2
  %56 = load i64, ptr %memberidx.i.i.i130, align 4
  %memberidx1.i4.i.i = getelementptr inbounds %Array_FloError_, ptr %52, i64 0, i32 3
  %57 = load i64, ptr %memberidx1.i4.i.i, align 4
  %.not.i.i.i = icmp slt i64 %56, %57
  br i1 %.not.i.i.i, label %if.entry73.i.Parser_error.exit.i_crit_edge, label %if.entry.i.i.i

if.entry73.i.Parser_error.exit.i_crit_edge:       ; preds = %if.entry73.i
  %memberidx4.i.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %52, i64 0, i32 1
  %.pre159 = load ptr, ptr %memberidx4.i.i.i.phi.trans.insert, align 8
  br label %Parser_error.exit.i

if.entry.i.i.i:                                   ; preds = %if.entry73.i
  %58 = shl i64 %57, 1
  store i64 %58, ptr %memberidx1.i4.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %Array_FloError_, ptr %52, i64 0, i32 1
  %59 = load ptr, ptr %memberidx2.i.i.i.i, align 8
  %60 = shl i64 %57, 4
  %61 = tail call ptr @realloc(ptr %59, i64 %60)
  store ptr %61, ptr %memberidx2.i.i.i.i, align 8
  %.pre158 = load i64, ptr %memberidx.i.i.i130, align 4
  br label %Parser_error.exit.i

Parser_error.exit.i:                              ; preds = %if.entry73.i.Parser_error.exit.i_crit_edge, %if.entry.i.i.i
  %62 = phi ptr [ %61, %if.entry.i.i.i ], [ %.pre159, %if.entry73.i.Parser_error.exit.i_crit_edge ]
  %63 = phi i64 [ %.pre158, %if.entry.i.i.i ], [ %56, %if.entry73.i.Parser_error.exit.i_crit_edge ]
  %64 = add i64 %63, 1
  store i64 %64, ptr %memberidx.i.i.i130, align 4
  %ptridx.i.i.i131 = getelementptr inbounds ptr, ptr %62, i64 %63
  store ptr %53, ptr %ptridx.i.i.i131, align 8
  br label %ifend.i

while.entry:                                      ; preds = %while.entry.preheader, %ifend17
  %65 = phi i64 [ %96, %ifend17 ], [ %8, %while.entry.preheader ]
  %type_node.1 = phi ptr [ %type_node.3, %ifend17 ], [ %type_node.0, %while.entry.preheader ]
  %66 = icmp eq i64 %65, 27
  br i1 %66, label %if.entry15, label %else16

while.end:                                        ; preds = %ifend17, %ifend
  %type_node.2 = phi ptr [ %type_node.0, %ifend ], [ %type_node.3, %ifend17 ]
  ret ptr %type_node.2

if.entry15:                                       ; preds = %while.entry
  %67 = load i64, ptr %memberidx.i.i101, align 4
  %68 = load ptr, ptr %0, align 8
  %memberidx2.i114 = getelementptr inbounds %Array_Token_, ptr %68, i64 0, i32 2
  %69 = load i64, ptr %memberidx2.i114, align 4
  %70 = icmp slt i64 %67, %69
  br i1 %70, label %Parser_advance.exit, label %else21

Parser_advance.exit:                              ; preds = %if.entry15
  %71 = add nsw i64 %67, 1
  store i64 %71, ptr %memberidx.i.i101, align 4
  %memberidx.i.i116 = getelementptr inbounds %Array_Token_, ptr %68, i64 0, i32 1
  %72 = load ptr, ptr %memberidx.i.i116, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %72, i64 %71
  %73 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %73, ptr %memberidx, align 8
  %.pre160 = load i64, ptr %73, align 4
  %74 = icmp eq i64 %.pre160, 28
  br i1 %74, label %if.entry20, label %else21

else16:                                           ; preds = %while.entry
  %75 = tail call ptr @malloc(i32 24)
  %76 = load ptr, ptr %type_node.1, align 8
  %77 = load ptr, ptr %memberidx, align 8
  %78 = load i64, ptr %77, align 4
  %79 = icmp eq i64 %78, 4
  br i1 %79, label %if.entry.i103, label %else.i109

if.entry.i103:                                    ; preds = %else16
  %80 = load i64, ptr %memberidx.i.i101, align 4
  %81 = load ptr, ptr %0, align 8
  %memberidx2.i.i102 = getelementptr inbounds %Array_Token_, ptr %81, i64 0, i32 2
  %82 = load i64, ptr %memberidx2.i.i102, align 4
  %83 = icmp slt i64 %80, %82
  br i1 %83, label %if.entry.i.i107, label %Parser_eat.exit112

if.entry.i.i107:                                  ; preds = %if.entry.i103
  %84 = add nsw i64 %80, 1
  store i64 %84, ptr %memberidx.i.i101, align 4
  %memberidx.i.i.i105 = getelementptr inbounds %Array_Token_, ptr %81, i64 0, i32 1
  %85 = load ptr, ptr %memberidx.i.i.i105, align 8
  %ptridx.i.i.i106 = getelementptr inbounds ptr, ptr %85, i64 %84
  %86 = load ptr, ptr %ptridx.i.i.i106, align 8
  store ptr %86, ptr %memberidx, align 8
  br label %Parser_eat.exit112

else.i109:                                        ; preds = %else16
  %87 = tail call ptr @malloc(i32 16)
  %memberidx35.i110 = getelementptr inbounds %Token, ptr %77, i64 0, i32 1
  %88 = load ptr, ptr %memberidx35.i110, align 8
  store i64 44, ptr %87, align 4
  %memberidx1.i82.i111 = getelementptr inbounds %Token, ptr %87, i64 0, i32 1
  store ptr %88, ptr %memberidx1.i82.i111, align 8
  br label %Parser_eat.exit112

Parser_eat.exit112:                               ; preds = %if.entry.i103, %if.entry.i.i107, %else.i109
  %common.ret.op.i100 = phi ptr [ %87, %else.i109 ], [ %77, %if.entry.i.i107 ], [ %77, %if.entry.i103 ]
  %memberidx35 = getelementptr inbounds %Token, ptr %common.ret.op.i100, i64 0, i32 1
  %89 = load ptr, ptr %memberidx35, align 8
  %90 = tail call ptr @malloc(i32 32)
  %91 = load i64, ptr %76, align 4
  %memberidx1.i93 = getelementptr inbounds %FloRange, ptr %89, i64 0, i32 1
  %92 = load i64, ptr %memberidx1.i93, align 4
  %memberidx2.i94 = getelementptr inbounds %FloRange, ptr %76, i64 0, i32 2
  %93 = load i64, ptr %memberidx2.i94, align 4
  %memberidx3.i95 = getelementptr inbounds %FloRange, ptr %89, i64 0, i32 3
  %94 = load i64, ptr %memberidx3.i95, align 4
  store i64 %91, ptr %90, align 4
  %memberidx1.i.i96 = getelementptr inbounds %FloRange, ptr %90, i64 0, i32 1
  store i64 %92, ptr %memberidx1.i.i96, align 4
  %memberidx2.i.i97 = getelementptr inbounds %FloRange, ptr %90, i64 0, i32 2
  store i64 %93, ptr %memberidx2.i.i97, align 4
  %memberidx3.i.i98 = getelementptr inbounds %FloRange, ptr %90, i64 0, i32 3
  store i64 %94, ptr %memberidx3.i.i98, align 4
  store ptr %90, ptr %75, align 8
  %memberidx.i.i91 = getelementptr inbounds %TypeNode, ptr %75, i64 0, i32 1
  store i64 15, ptr %memberidx.i.i91, align 4
  %memberidx.i92 = getelementptr inbounds %PointerTypeNode, ptr %75, i64 0, i32 2
  store ptr %type_node.1, ptr %memberidx.i92, align 8
  br label %ifend17

ifend17:                                          ; preds = %else.i, %if.entry.i.i, %if.entry.i, %Parser_eat.exit112
  %type_node.3 = phi ptr [ %75, %Parser_eat.exit112 ], [ %type_node.4, %if.entry.i ], [ %type_node.4, %if.entry.i.i ], [ %type_node.4, %else.i ]
  %95 = load ptr, ptr %memberidx, align 8
  %96 = load i64, ptr %95, align 4
  %97 = icmp eq i64 %96, 27
  %98 = icmp eq i64 %96, 4
  %99 = or i1 %97, %98
  %100 = load ptr, ptr %memberidx2.i133, align 8
  %memberidx3.i90 = getelementptr inbounds %Array_FloError_, ptr %100, i64 0, i32 2
  %101 = load i64, ptr %memberidx3.i90, align 4
  %102 = icmp eq i64 %101, 0
  %103 = and i1 %99, %102
  br i1 %103, label %while.entry, label %while.end

if.entry20:                                       ; preds = %Parser_advance.exit
  %104 = tail call ptr @malloc(i32 32)
  %105 = tail call ptr @malloc(i32 24)
  %106 = tail call ptr @malloc(i32 40)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %106, ptr noundef nonnull align 8 dereferenceable(5) @131, i64 5, i1 false)
  %107 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %107, align 8
  %memberidx.i.i85 = getelementptr inbounds %string, ptr %107, i64 0, i32 1
  store ptr %106, ptr %memberidx.i.i85, align 8
  %memberidx1.i.i86 = getelementptr inbounds %string, ptr %107, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i86, align 4
  %memberidx2.i.i87 = getelementptr inbounds %string, ptr %107, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i87, align 4
  %108 = load ptr, ptr %memberidx, align 8
  %memberidx24 = getelementptr inbounds %Token, ptr %108, i64 0, i32 1
  %109 = load ptr, ptr %memberidx24, align 8
  store i64 51, ptr %105, align 4
  %memberidx1.i.i83 = getelementptr inbounds %Token, ptr %105, i64 0, i32 1
  store ptr %109, ptr %memberidx1.i.i83, align 8
  %memberidx.i84 = getelementptr inbounds %IdentifierToken, ptr %105, i64 0, i32 2
  store ptr %107, ptr %memberidx.i84, align 8
  %110 = load ptr, ptr %memberidx24, align 8
  store ptr %110, ptr %104, align 8
  %memberidx.i.i77 = getelementptr inbounds %TypeNode, ptr %104, i64 0, i32 1
  store i64 18, ptr %memberidx.i.i77, align 4
  %memberidx.i78 = getelementptr inbounds %RecordTypeNode, ptr %104, i64 0, i32 2
  store ptr %105, ptr %memberidx.i78, align 8
  %memberidx1.i79 = getelementptr inbounds %RecordTypeNode, ptr %104, i64 0, i32 3
  %111 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_TypeNode_, ptr %111, align 8
  %memberidx.i5.i = getelementptr inbounds %Array_TypeNode_, ptr %111, i64 0, i32 2
  store i64 0, ptr %memberidx.i5.i, align 4
  %memberidx1.i.i80 = getelementptr inbounds %Array_TypeNode_, ptr %111, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i80, align 4
  %memberidx2.i.i81 = getelementptr inbounds %Array_TypeNode_, ptr %111, i64 0, i32 1
  %112 = tail call ptr @malloc(i32 64)
  store ptr %112, ptr %memberidx2.i.i81, align 8
  store ptr %111, ptr %memberidx1.i79, align 8
  %113 = load i64, ptr %memberidx1.i.i80, align 4
  %.not.i = icmp sgt i64 %113, 0
  br i1 %.not.i, label %Array_TypeNode____sl__.exit, label %if.entry.i76

if.entry.i76:                                     ; preds = %if.entry20
  %114 = shl i64 %113, 1
  store i64 %114, ptr %memberidx1.i.i80, align 4
  %115 = shl i64 %113, 4
  %116 = tail call ptr @realloc(ptr %112, i64 %115)
  store ptr %116, ptr %memberidx2.i.i81, align 8
  br label %Array_TypeNode____sl__.exit

Array_TypeNode____sl__.exit:                      ; preds = %if.entry20, %if.entry.i76
  %117 = phi ptr [ %112, %if.entry20 ], [ %116, %if.entry.i76 ]
  store i64 1, ptr %memberidx.i5.i, align 4
  store ptr %type_node.1, ptr %117, align 8
  %.pre161 = load ptr, ptr %104, align 8
  %.pre162 = load ptr, ptr %memberidx, align 8
  br label %ifend22

else21:                                           ; preds = %if.entry15, %Parser_advance.exit
  %118 = tail call ptr @malloc(i32 32)
  %119 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %120 = load ptr, ptr %memberidx, align 8
  %memberidx29 = getelementptr inbounds %Token, ptr %120, i64 0, i32 1
  %121 = load ptr, ptr %memberidx29, align 8
  store ptr %121, ptr %118, align 8
  %memberidx.i.i69 = getelementptr inbounds %TypeNode, ptr %118, i64 0, i32 1
  store i64 16, ptr %memberidx.i.i69, align 4
  %memberidx.i70 = getelementptr inbounds %ArrayTypeNode, ptr %118, i64 0, i32 2
  store ptr %type_node.1, ptr %memberidx.i70, align 8
  %memberidx1.i71 = getelementptr inbounds %ArrayTypeNode, ptr %118, i64 0, i32 3
  store ptr %119, ptr %memberidx1.i71, align 8
  br label %ifend22

ifend22:                                          ; preds = %else21, %Array_TypeNode____sl__.exit
  %122 = phi ptr [ %.pre162, %Array_TypeNode____sl__.exit ], [ %120, %else21 ]
  %123 = phi ptr [ %.pre161, %Array_TypeNode____sl__.exit ], [ %121, %else21 ]
  %type_node.4 = phi ptr [ %104, %Array_TypeNode____sl__.exit ], [ %118, %else21 ]
  %memberidx33 = getelementptr inbounds %Token, ptr %122, i64 0, i32 1
  %124 = load ptr, ptr %memberidx33, align 8
  %125 = tail call ptr @malloc(i32 32)
  %126 = load i64, ptr %123, align 4
  %memberidx1.i = getelementptr inbounds %FloRange, ptr %124, i64 0, i32 1
  %127 = load i64, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %FloRange, ptr %123, i64 0, i32 2
  %128 = load i64, ptr %memberidx2.i, align 4
  %memberidx3.i = getelementptr inbounds %FloRange, ptr %124, i64 0, i32 3
  %129 = load i64, ptr %memberidx3.i, align 4
  store i64 %126, ptr %125, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %125, i64 0, i32 1
  store i64 %127, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i67 = getelementptr inbounds %FloRange, ptr %125, i64 0, i32 2
  store i64 %128, ptr %memberidx2.i.i67, align 4
  %memberidx3.i.i68 = getelementptr inbounds %FloRange, ptr %125, i64 0, i32 3
  store i64 %129, ptr %memberidx3.i.i68, align 4
  store ptr %125, ptr %type_node.4, align 8
  %130 = load ptr, ptr %memberidx, align 8
  %131 = load i64, ptr %130, align 4
  %132 = icmp eq i64 %131, 28
  br i1 %132, label %if.entry.i, label %else.i

if.entry.i:                                       ; preds = %ifend22
  %133 = load i64, ptr %memberidx.i.i101, align 4
  %134 = load ptr, ptr %0, align 8
  %memberidx2.i.i = getelementptr inbounds %Array_Token_, ptr %134, i64 0, i32 2
  %135 = load i64, ptr %memberidx2.i.i, align 4
  %136 = icmp slt i64 %133, %135
  br i1 %136, label %if.entry.i.i, label %ifend17

if.entry.i.i:                                     ; preds = %if.entry.i
  %137 = add nsw i64 %133, 1
  store i64 %137, ptr %memberidx.i.i101, align 4
  %memberidx.i.i.i = getelementptr inbounds %Array_Token_, ptr %134, i64 0, i32 1
  %138 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %138, i64 %137
  %139 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %139, ptr %memberidx, align 8
  br label %ifend17

else.i:                                           ; preds = %ifend22
  %140 = tail call ptr @malloc(i32 16)
  %memberidx35.i = getelementptr inbounds %Token, ptr %130, i64 0, i32 1
  %141 = load ptr, ptr %memberidx35.i, align 8
  store i64 44, ptr %140, align 4
  %memberidx1.i82.i = getelementptr inbounds %Token, ptr %140, i64 0, i32 1
  store ptr %141, ptr %memberidx1.i82.i, align 8
  br label %ifend17
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ExpressionNode__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ExpressionNode_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_ExpressionNode____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_ExpressionNode_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_ExpressionNode_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_ExpressionNode_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_ExpressionNode_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

define internal fastcc void @Parser_parse_expression_list(ptr %0, ptr nocapture %1) unnamed_addr {
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx.i, align 8
  %4 = load i64, ptr %3, align 4
  %5 = icmp eq i64 %4, 31
  %memberidx2.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %Array_FloError_, ptr %6, i64 0, i32 2
  %7 = load i64, ptr %memberidx3.i.i, align 4
  %8 = icmp eq i64 %7, 0
  %9 = and i1 %5, %8
  br i1 %9, label %while.entry.i.preheader, label %Parser_new_lines.exit

while.entry.i.preheader:                          ; preds = %2
  %memberidx.i11.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %10 = load ptr, ptr %0, align 8
  %memberidx2.i12.i = getelementptr inbounds %Array_Token_, ptr %10, i64 0, i32 2
  %memberidx.i.i.i = getelementptr inbounds %Array_Token_, ptr %10, i64 0, i32 1
  %11 = load i64, ptr %memberidx.i11.i, align 4
  %12 = load i64, ptr %memberidx2.i12.i, align 4
  %13 = icmp slt i64 %11, %12
  br i1 %13, label %while.entry.i, label %while.entry.i.us

while.entry.i.us:                                 ; preds = %while.entry.i.preheader, %while.entry.i.us
  br label %while.entry.i.us

while.entry.i:                                    ; preds = %while.entry.i.preheader, %Parser_advance.exit.i
  %14 = phi i64 [ %22, %Parser_advance.exit.i ], [ %11, %while.entry.i.preheader ]
  %15 = load i64, ptr %memberidx2.i12.i, align 4
  %16 = icmp slt i64 %14, %15
  br i1 %16, label %if.entry.i.i, label %Parser_advance.exit.i

if.entry.i.i:                                     ; preds = %while.entry.i
  %17 = add nsw i64 %14, 1
  store i64 %17, ptr %memberidx.i11.i, align 4
  %18 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %19, ptr %memberidx.i, align 8
  %.pre = load i64, ptr %19, align 4
  %.pre96 = load i64, ptr %memberidx3.i.i, align 4
  br label %Parser_advance.exit.i

Parser_advance.exit.i:                            ; preds = %if.entry.i.i, %while.entry.i
  %20 = phi i64 [ %.pre96, %if.entry.i.i ], [ 0, %while.entry.i ]
  %21 = phi i64 [ %.pre, %if.entry.i.i ], [ 31, %while.entry.i ]
  %22 = phi i64 [ %17, %if.entry.i.i ], [ %14, %while.entry.i ]
  %23 = icmp eq i64 %21, 31
  %24 = icmp eq i64 %20, 0
  %25 = and i1 %23, %24
  br i1 %25, label %while.entry.i, label %Parser_new_lines.exit

Parser_new_lines.exit:                            ; preds = %Parser_advance.exit.i, %2
  %26 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %memberidx.i15 = getelementptr inbounds %Array_ExpressionNode_, ptr %1, i64 0, i32 2
  %27 = load i64, ptr %memberidx.i15, align 4
  %memberidx1.i = getelementptr inbounds %Array_ExpressionNode_, ptr %1, i64 0, i32 3
  %28 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp slt i64 %27, %28
  br i1 %.not.i, label %Parser_new_lines.exit.Array_ExpressionNode____sl__.exit_crit_edge, label %if.entry.i

Parser_new_lines.exit.Array_ExpressionNode____sl__.exit_crit_edge: ; preds = %Parser_new_lines.exit
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_ExpressionNode_, ptr %1, i64 0, i32 1
  %.pre98 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_ExpressionNode____sl__.exit

if.entry.i:                                       ; preds = %Parser_new_lines.exit
  %29 = shl i64 %28, 1
  store i64 %29, ptr %memberidx1.i, align 4
  %memberidx2.i.i17 = getelementptr inbounds %Array_ExpressionNode_, ptr %1, i64 0, i32 1
  %30 = load ptr, ptr %memberidx2.i.i17, align 8
  %31 = shl i64 %28, 4
  %32 = tail call ptr @realloc(ptr %30, i64 %31)
  store ptr %32, ptr %memberidx2.i.i17, align 8
  %.pre97 = load i64, ptr %memberidx.i15, align 4
  br label %Array_ExpressionNode____sl__.exit

Array_ExpressionNode____sl__.exit:                ; preds = %Parser_new_lines.exit.Array_ExpressionNode____sl__.exit_crit_edge, %if.entry.i
  %33 = phi ptr [ %.pre98, %Parser_new_lines.exit.Array_ExpressionNode____sl__.exit_crit_edge ], [ %32, %if.entry.i ]
  %34 = phi i64 [ %27, %Parser_new_lines.exit.Array_ExpressionNode____sl__.exit_crit_edge ], [ %.pre97, %if.entry.i ]
  %35 = add i64 %34, 1
  store i64 %35, ptr %memberidx.i15, align 4
  %memberidx4.i = getelementptr inbounds %Array_ExpressionNode_, ptr %1, i64 0, i32 1
  %ptridx.i = getelementptr inbounds ptr, ptr %33, i64 %34
  store ptr %26, ptr %ptridx.i, align 8
  %36 = load ptr, ptr %memberidx.i, align 8
  %37 = load i64, ptr %36, align 4
  %38 = icmp eq i64 %37, 31
  %39 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i21 = getelementptr inbounds %Array_FloError_, ptr %39, i64 0, i32 2
  %40 = load i64, ptr %memberidx3.i.i21, align 4
  %41 = icmp eq i64 %40, 0
  %42 = and i1 %38, %41
  br i1 %42, label %while.entry.i24.preheader, label %Parser_new_lines.exit33

while.entry.i24.preheader:                        ; preds = %Array_ExpressionNode____sl__.exit
  %memberidx.i11.i22 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %43 = load ptr, ptr %0, align 8
  %memberidx2.i12.i23 = getelementptr inbounds %Array_Token_, ptr %43, i64 0, i32 2
  %memberidx.i.i.i26 = getelementptr inbounds %Array_Token_, ptr %43, i64 0, i32 1
  %44 = load i64, ptr %memberidx.i11.i22, align 4
  %45 = load i64, ptr %memberidx2.i12.i23, align 4
  %46 = icmp slt i64 %44, %45
  br i1 %46, label %while.entry.i24, label %while.entry.i24.us

while.entry.i24.us:                               ; preds = %while.entry.i24.preheader, %while.entry.i24.us
  br label %while.entry.i24.us

while.entry.i24:                                  ; preds = %while.entry.i24.preheader, %Parser_advance.exit.i32
  %47 = phi i64 [ %55, %Parser_advance.exit.i32 ], [ 0, %while.entry.i24.preheader ]
  %48 = phi i64 [ %56, %Parser_advance.exit.i32 ], [ 31, %while.entry.i24.preheader ]
  %49 = phi i64 [ %59, %Parser_advance.exit.i32 ], [ %44, %while.entry.i24.preheader ]
  %50 = load i64, ptr %memberidx2.i12.i23, align 4
  %51 = icmp slt i64 %49, %50
  br i1 %51, label %if.entry.i.i28, label %Parser_advance.exit.i32

if.entry.i.i28:                                   ; preds = %while.entry.i24
  %52 = add nsw i64 %49, 1
  store i64 %52, ptr %memberidx.i11.i22, align 4
  %53 = load ptr, ptr %memberidx.i.i.i26, align 8
  %ptridx.i.i.i27 = getelementptr inbounds ptr, ptr %53, i64 %52
  %54 = load ptr, ptr %ptridx.i.i.i27, align 8
  store ptr %54, ptr %memberidx.i, align 8
  %.pre99 = load i64, ptr %54, align 4
  %.pre100 = load i64, ptr %memberidx3.i.i21, align 4
  br label %Parser_advance.exit.i32

Parser_advance.exit.i32:                          ; preds = %if.entry.i.i28, %while.entry.i24
  %55 = phi i64 [ %.pre100, %if.entry.i.i28 ], [ %47, %while.entry.i24 ]
  %56 = phi i64 [ %.pre99, %if.entry.i.i28 ], [ %48, %while.entry.i24 ]
  %57 = phi i64 [ %.pre100, %if.entry.i.i28 ], [ 0, %while.entry.i24 ]
  %58 = phi i64 [ %.pre99, %if.entry.i.i28 ], [ 31, %while.entry.i24 ]
  %59 = phi i64 [ %52, %if.entry.i.i28 ], [ %49, %while.entry.i24 ]
  %60 = icmp eq i64 %58, 31
  %61 = icmp eq i64 %57, 0
  %62 = and i1 %60, %61
  br i1 %62, label %while.entry.i24, label %Parser_new_lines.exit33

Parser_new_lines.exit33:                          ; preds = %Parser_advance.exit.i32, %Array_ExpressionNode____sl__.exit
  %63 = phi i64 [ %40, %Array_ExpressionNode____sl__.exit ], [ %55, %Parser_advance.exit.i32 ]
  %64 = phi i64 [ %37, %Array_ExpressionNode____sl__.exit ], [ %56, %Parser_advance.exit.i32 ]
  %65 = icmp eq i64 %64, 3
  %66 = icmp eq i64 %63, 0
  %67 = and i1 %65, %66
  br i1 %67, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %Parser_new_lines.exit33
  %memberidx.i35 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %Array_ExpressionNode____sl__.exit64
  %68 = phi ptr [ %39, %while.entry.preheader ], [ %106, %Array_ExpressionNode____sl__.exit64 ]
  %69 = load i64, ptr %memberidx.i35, align 4
  %70 = load ptr, ptr %0, align 8
  %memberidx2.i36 = getelementptr inbounds %Array_Token_, ptr %70, i64 0, i32 2
  %71 = load i64, ptr %memberidx2.i36, align 4
  %72 = icmp slt i64 %69, %71
  br i1 %72, label %Parser_advance.exit, label %Parser_new_lines.exit55

Parser_advance.exit:                              ; preds = %while.entry
  %73 = add nsw i64 %69, 1
  store i64 %73, ptr %memberidx.i35, align 4
  %memberidx.i.i38 = getelementptr inbounds %Array_Token_, ptr %70, i64 0, i32 1
  %74 = load ptr, ptr %memberidx.i.i38, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %74, i64 %73
  %75 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %75, ptr %memberidx.i, align 8
  %.pre101 = load i64, ptr %75, align 4
  %memberidx3.i.i43.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %68, i64 0, i32 2
  %.pre102 = load i64, ptr %memberidx3.i.i43.phi.trans.insert, align 4
  %76 = icmp eq i64 %.pre101, 31
  %memberidx3.i.i43 = getelementptr inbounds %Array_FloError_, ptr %68, i64 0, i32 2
  %77 = icmp eq i64 %.pre102, 0
  %78 = and i1 %76, %77
  br i1 %78, label %while.entry.i46.preheader, label %Parser_new_lines.exit55

while.entry.i46.preheader:                        ; preds = %Parser_advance.exit
  %memberidx.i.i.i48 = getelementptr inbounds %Array_Token_, ptr %70, i64 0, i32 1
  %79 = load i64, ptr %memberidx2.i36, align 4
  %80 = icmp slt i64 %73, %79
  br i1 %80, label %while.entry.i46, label %while.entry.i46.us

while.entry.i46.us:                               ; preds = %while.entry.i46.preheader, %while.entry.i46.us
  br label %while.entry.i46.us

while.entry.i46:                                  ; preds = %while.entry.i46.preheader, %Parser_advance.exit.i54
  %81 = phi i64 [ %89, %Parser_advance.exit.i54 ], [ %73, %while.entry.i46.preheader ]
  %82 = load i64, ptr %memberidx2.i36, align 4
  %83 = icmp slt i64 %81, %82
  br i1 %83, label %if.entry.i.i50, label %Parser_advance.exit.i54

if.entry.i.i50:                                   ; preds = %while.entry.i46
  %84 = add nsw i64 %81, 1
  store i64 %84, ptr %memberidx.i35, align 4
  %85 = load ptr, ptr %memberidx.i.i.i48, align 8
  %ptridx.i.i.i49 = getelementptr inbounds ptr, ptr %85, i64 %84
  %86 = load ptr, ptr %ptridx.i.i.i49, align 8
  store ptr %86, ptr %memberidx.i, align 8
  %.pre104 = load i64, ptr %86, align 4
  %.pre105 = load i64, ptr %memberidx3.i.i43, align 4
  br label %Parser_advance.exit.i54

Parser_advance.exit.i54:                          ; preds = %if.entry.i.i50, %while.entry.i46
  %87 = phi i64 [ %.pre105, %if.entry.i.i50 ], [ 0, %while.entry.i46 ]
  %88 = phi i64 [ %.pre104, %if.entry.i.i50 ], [ 31, %while.entry.i46 ]
  %89 = phi i64 [ %84, %if.entry.i.i50 ], [ %81, %while.entry.i46 ]
  %90 = icmp eq i64 %88, 31
  %91 = icmp eq i64 %87, 0
  %92 = and i1 %90, %91
  br i1 %92, label %while.entry.i46, label %Parser_new_lines.exit55

Parser_new_lines.exit55:                          ; preds = %Parser_advance.exit.i54, %while.entry, %Parser_advance.exit
  %93 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %94 = load i64, ptr %memberidx.i15, align 4
  %95 = load i64, ptr %memberidx1.i, align 4
  %.not.i58 = icmp slt i64 %94, %95
  br i1 %.not.i58, label %Parser_new_lines.exit55.Array_ExpressionNode____sl__.exit64_crit_edge, label %if.entry.i61

Parser_new_lines.exit55.Array_ExpressionNode____sl__.exit64_crit_edge: ; preds = %Parser_new_lines.exit55
  %.pre107 = load ptr, ptr %memberidx4.i, align 8
  br label %Array_ExpressionNode____sl__.exit64

if.entry.i61:                                     ; preds = %Parser_new_lines.exit55
  %96 = shl i64 %95, 1
  store i64 %96, ptr %memberidx1.i, align 4
  %97 = load ptr, ptr %memberidx4.i, align 8
  %98 = shl i64 %95, 4
  %99 = tail call ptr @realloc(ptr %97, i64 %98)
  store ptr %99, ptr %memberidx4.i, align 8
  %.pre106 = load i64, ptr %memberidx.i15, align 4
  br label %Array_ExpressionNode____sl__.exit64

Array_ExpressionNode____sl__.exit64:              ; preds = %Parser_new_lines.exit55.Array_ExpressionNode____sl__.exit64_crit_edge, %if.entry.i61
  %100 = phi ptr [ %.pre107, %Parser_new_lines.exit55.Array_ExpressionNode____sl__.exit64_crit_edge ], [ %99, %if.entry.i61 ]
  %101 = phi i64 [ %94, %Parser_new_lines.exit55.Array_ExpressionNode____sl__.exit64_crit_edge ], [ %.pre106, %if.entry.i61 ]
  %102 = add i64 %101, 1
  store i64 %102, ptr %memberidx.i15, align 4
  %ptridx.i63 = getelementptr inbounds ptr, ptr %100, i64 %101
  store ptr %93, ptr %ptridx.i63, align 8
  %103 = load ptr, ptr %memberidx.i, align 8
  %104 = load i64, ptr %103, align 4
  %105 = icmp eq i64 %104, 3
  %106 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i67 = getelementptr inbounds %Array_FloError_, ptr %106, i64 0, i32 2
  %107 = load i64, ptr %memberidx3.i67, align 4
  %108 = icmp eq i64 %107, 0
  %109 = and i1 %105, %108
  br i1 %109, label %while.entry, label %while.end

while.end:                                        ; preds = %Array_ExpressionNode____sl__.exit64, %Parser_new_lines.exit33
  %110 = phi i64 [ %63, %Parser_new_lines.exit33 ], [ %107, %Array_ExpressionNode____sl__.exit64 ]
  %111 = phi ptr [ %39, %Parser_new_lines.exit33 ], [ %106, %Array_ExpressionNode____sl__.exit64 ]
  %112 = phi i64 [ %64, %Parser_new_lines.exit33 ], [ %104, %Array_ExpressionNode____sl__.exit64 ]
  %113 = icmp eq i64 %112, 31
  %memberidx3.i.i71 = getelementptr inbounds %Array_FloError_, ptr %111, i64 0, i32 2
  %114 = icmp eq i64 %110, 0
  %115 = and i1 %113, %114
  br i1 %115, label %while.entry.i74.preheader, label %Parser_new_lines.exit83

while.entry.i74.preheader:                        ; preds = %while.end
  %memberidx.i11.i72 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %116 = load ptr, ptr %0, align 8
  %memberidx2.i12.i73 = getelementptr inbounds %Array_Token_, ptr %116, i64 0, i32 2
  %memberidx.i.i.i76 = getelementptr inbounds %Array_Token_, ptr %116, i64 0, i32 1
  %117 = load i64, ptr %memberidx.i11.i72, align 4
  %118 = load i64, ptr %memberidx2.i12.i73, align 4
  %119 = icmp slt i64 %117, %118
  br i1 %119, label %while.entry.i74, label %while.entry.i74.us

while.entry.i74.us:                               ; preds = %while.entry.i74.preheader, %while.entry.i74.us
  br label %while.entry.i74.us

while.entry.i74:                                  ; preds = %while.entry.i74.preheader, %Parser_advance.exit.i82
  %120 = phi i64 [ %128, %Parser_advance.exit.i82 ], [ %117, %while.entry.i74.preheader ]
  %121 = load i64, ptr %memberidx2.i12.i73, align 4
  %122 = icmp slt i64 %120, %121
  br i1 %122, label %if.entry.i.i78, label %Parser_advance.exit.i82

if.entry.i.i78:                                   ; preds = %while.entry.i74
  %123 = add nsw i64 %120, 1
  store i64 %123, ptr %memberidx.i11.i72, align 4
  %124 = load ptr, ptr %memberidx.i.i.i76, align 8
  %ptridx.i.i.i77 = getelementptr inbounds ptr, ptr %124, i64 %123
  %125 = load ptr, ptr %ptridx.i.i.i77, align 8
  store ptr %125, ptr %memberidx.i, align 8
  %.pre108 = load i64, ptr %125, align 4
  %.pre109 = load i64, ptr %memberidx3.i.i71, align 4
  br label %Parser_advance.exit.i82

Parser_advance.exit.i82:                          ; preds = %if.entry.i.i78, %while.entry.i74
  %126 = phi i64 [ %.pre109, %if.entry.i.i78 ], [ 0, %while.entry.i74 ]
  %127 = phi i64 [ %.pre108, %if.entry.i.i78 ], [ 31, %while.entry.i74 ]
  %128 = phi i64 [ %123, %if.entry.i.i78 ], [ %120, %while.entry.i74 ]
  %129 = icmp eq i64 %127, 31
  %130 = icmp eq i64 %126, 0
  %131 = and i1 %129, %130
  br i1 %131, label %while.entry.i74, label %Parser_new_lines.exit83

Parser_new_lines.exit83:                          ; preds = %Parser_advance.exit.i82, %while.end
  ret void
}

define internal fastcc ptr @Parser_parse_string(ptr nocapture %0) unnamed_addr {
for.entry:
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %1 = load ptr, ptr %memberidx.i, align 8
  %2 = load i64, ptr %1, align 4
  %3 = icmp eq i64 %2, 32
  br i1 %3, label %if.entry.i, label %else.i

if.entry.i:                                       ; preds = %for.entry
  %memberidx.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %4 = load i64, ptr %memberidx.i.i, align 4
  %5 = load ptr, ptr %0, align 8
  %memberidx2.i.i = getelementptr inbounds %Array_Token_, ptr %5, i64 0, i32 2
  %6 = load i64, ptr %memberidx2.i.i, align 4
  %7 = icmp slt i64 %4, %6
  br i1 %7, label %if.entry.i.i, label %Parser_eat.exit

if.entry.i.i:                                     ; preds = %if.entry.i
  %8 = add nsw i64 %4, 1
  store i64 %8, ptr %memberidx.i.i, align 4
  %memberidx.i.i.i = getelementptr inbounds %Array_Token_, ptr %5, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %9, i64 %8
  %10 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %10, ptr %memberidx.i, align 8
  br label %Parser_eat.exit

else.i:                                           ; preds = %for.entry
  %11 = tail call ptr @malloc(i32 16)
  %memberidx35.i = getelementptr inbounds %Token, ptr %1, i64 0, i32 1
  %12 = load ptr, ptr %memberidx35.i, align 8
  store i64 44, ptr %11, align 4
  %memberidx1.i82.i = getelementptr inbounds %Token, ptr %11, i64 0, i32 1
  store ptr %12, ptr %memberidx1.i82.i, align 8
  br label %Parser_eat.exit

Parser_eat.exit:                                  ; preds = %if.entry.i, %if.entry.i.i, %else.i
  %common.ret.op.i = phi ptr [ %11, %else.i ], [ %1, %if.entry.i.i ], [ %1, %if.entry.i ]
  %13 = alloca %Parser, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %14 = load ptr, ptr %memberidx, align 8
  store ptr null, ptr %13, align 8
  %memberidx1.i = getelementptr inbounds %Parser, ptr %13, i64 0, i32 1
  store ptr %14, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Parser, ptr %13, i64 0, i32 3
  store i64 -1, ptr %memberidx2.i, align 8
  %15 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ExpressionNode_, ptr %15, align 8
  %memberidx.i18 = getelementptr inbounds %Array_ExpressionNode_, ptr %15, i64 0, i32 2
  store i64 0, ptr %memberidx.i18, align 4
  %memberidx1.i19 = getelementptr inbounds %Array_ExpressionNode_, ptr %15, i64 0, i32 3
  store i64 8, ptr %memberidx1.i19, align 4
  %memberidx2.i20 = getelementptr inbounds %Array_ExpressionNode_, ptr %15, i64 0, i32 1
  %16 = tail call ptr @malloc(i32 64)
  store ptr %16, ptr %memberidx2.i20, align 8
  store i64 0, ptr %memberidx.i18, align 4
  %memberidx3 = getelementptr inbounds %StrToken, ptr %common.ret.op.i, i64 0, i32 4
  %17 = load ptr, ptr %memberidx3, align 8
  %memberidx441 = getelementptr inbounds %Array_Array_Token__, ptr %17, i64 0, i32 2
  %18 = load i64, ptr %memberidx441, align 4
  %19 = icmp sgt i64 %18, 0
  %20 = load ptr, ptr %memberidx.i, align 8
  %21 = load i64, ptr %20, align 4
  %22 = icmp ne i64 %21, 44
  %23 = load ptr, ptr %memberidx, align 8
  %memberidx3.i42 = getelementptr inbounds %Array_FloError_, ptr %23, i64 0, i32 2
  %24 = load i64, ptr %memberidx3.i42, align 4
  %25 = icmp eq i64 %24, 0
  %26 = and i1 %22, %25
  %27 = and i1 %19, %26
  br i1 %27, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %Parser_eat.exit
  %memberidx3.i26 = getelementptr inbounds %Parser, ptr %13, i64 0, i32 2
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %Array_ExpressionNode____sl__.exit
  %28 = phi ptr [ %17, %for.body.lr.ph ], [ %46, %Array_ExpressionNode____sl__.exit ]
  %i.043 = phi i64 [ 0, %for.body.lr.ph ], [ %45, %Array_ExpressionNode____sl__.exit ]
  %memberidx.i23 = getelementptr inbounds %Array_Array_Token__, ptr %28, i64 0, i32 1
  %29 = load ptr, ptr %memberidx.i23, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %29, i64 %i.043
  %30 = load ptr, ptr %ptridx.i, align 8
  store ptr %30, ptr %13, align 8
  store i64 -1, ptr %memberidx2.i, align 8
  %memberidx2.i25 = getelementptr inbounds %Array_Token_, ptr %30, i64 0, i32 2
  %31 = load i64, ptr %memberidx2.i25, align 4
  %32 = icmp sgt i64 %31, -1
  br i1 %32, label %if.entry.i28, label %Parser_advance.exit

if.entry.i28:                                     ; preds = %for.body
  store i64 0, ptr %memberidx2.i, align 8
  %memberidx.i.i27 = getelementptr inbounds %Array_Token_, ptr %30, i64 0, i32 1
  %33 = load ptr, ptr %memberidx.i.i27, align 8
  %34 = load ptr, ptr %33, align 8
  store ptr %34, ptr %memberidx3.i26, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %for.body, %if.entry.i28
  %35 = call fastcc ptr @Parser_parse_expression(ptr nonnull %13)
  %36 = load i64, ptr %memberidx.i18, align 4
  %37 = load i64, ptr %memberidx1.i19, align 4
  %.not.i = icmp slt i64 %36, %37
  br i1 %.not.i, label %Parser_advance.exit.Array_ExpressionNode____sl__.exit_crit_edge, label %if.entry.i33

Parser_advance.exit.Array_ExpressionNode____sl__.exit_crit_edge: ; preds = %Parser_advance.exit
  %.pre44 = load ptr, ptr %memberidx2.i20, align 8
  br label %Array_ExpressionNode____sl__.exit

if.entry.i33:                                     ; preds = %Parser_advance.exit
  %38 = shl i64 %37, 1
  store i64 %38, ptr %memberidx1.i19, align 4
  %39 = load ptr, ptr %memberidx2.i20, align 8
  %40 = shl i64 %37, 4
  %41 = call ptr @realloc(ptr %39, i64 %40)
  store ptr %41, ptr %memberidx2.i20, align 8
  %.pre = load i64, ptr %memberidx.i18, align 4
  br label %Array_ExpressionNode____sl__.exit

Array_ExpressionNode____sl__.exit:                ; preds = %Parser_advance.exit.Array_ExpressionNode____sl__.exit_crit_edge, %if.entry.i33
  %42 = phi ptr [ %.pre44, %Parser_advance.exit.Array_ExpressionNode____sl__.exit_crit_edge ], [ %41, %if.entry.i33 ]
  %43 = phi i64 [ %36, %Parser_advance.exit.Array_ExpressionNode____sl__.exit_crit_edge ], [ %.pre, %if.entry.i33 ]
  %44 = add i64 %43, 1
  store i64 %44, ptr %memberidx.i18, align 4
  %ptridx.i34 = getelementptr inbounds ptr, ptr %42, i64 %43
  store ptr %35, ptr %ptridx.i34, align 8
  %45 = add nuw nsw i64 %i.043, 1
  %46 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Array_Array_Token__, ptr %46, i64 0, i32 2
  %47 = load i64, ptr %memberidx4, align 4
  %48 = icmp slt i64 %45, %47
  %49 = load ptr, ptr %memberidx.i, align 8
  %50 = load i64, ptr %49, align 4
  %51 = icmp ne i64 %50, 44
  %52 = load ptr, ptr %memberidx, align 8
  %memberidx3.i = getelementptr inbounds %Array_FloError_, ptr %52, i64 0, i32 2
  %53 = load i64, ptr %memberidx3.i, align 4
  %54 = icmp eq i64 %53, 0
  %55 = and i1 %51, %54
  %56 = and i1 %48, %55
  br i1 %56, label %for.body, label %for.end

for.end:                                          ; preds = %Array_ExpressionNode____sl__.exit, %Parser_eat.exit
  %57 = tail call ptr @malloc(i32 40)
  %memberidx.i35 = getelementptr inbounds %Token, ptr %common.ret.op.i, i64 0, i32 1
  %58 = load ptr, ptr %memberidx.i35, align 8
  store ptr %58, ptr %57, align 8
  %memberidx.i.i.i36 = getelementptr inbounds %StatementNode, ptr %57, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i36, align 4
  %memberidx.i.i37 = getelementptr inbounds %ExpressionNode, ptr %57, i64 0, i32 2
  store i64 2, ptr %memberidx.i.i37, align 4
  %memberidx1.i38 = getelementptr inbounds %StringExpressionNode, ptr %57, i64 0, i32 3
  store ptr %common.ret.op.i, ptr %memberidx1.i38, align 8
  %memberidx2.i39 = getelementptr inbounds %StringExpressionNode, ptr %57, i64 0, i32 4
  store ptr %15, ptr %memberidx2.i39, align 8
  ret ptr %57
}

define internal fastcc noalias ptr @Parser_parse_variable_declaration_statement(ptr %0) unnamed_addr {
  %2 = tail call ptr @malloc(i32 40)
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  store ptr %4, ptr %2, align 8
  %memberidx.i.i = getelementptr inbounds %StatementNode, ptr %2, i64 0, i32 1
  store i64 1, ptr %memberidx.i.i, align 4
  %memberidx.i = getelementptr inbounds %VarDeclarationStatement, ptr %2, i64 0, i32 3
  %memberidx1.i = getelementptr inbounds %VarDeclarationStatement, ptr %2, i64 0, i32 4
  %memberidx.i63 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %memberidx.i, i8 0, i64 16, i1 false)
  %5 = load i64, ptr %memberidx.i63, align 4
  %6 = load ptr, ptr %0, align 8
  %memberidx2.i64 = getelementptr inbounds %Array_Token_, ptr %6, i64 0, i32 2
  %7 = load i64, ptr %memberidx2.i64, align 4
  %8 = icmp slt i64 %5, %7
  br i1 %8, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %1
  %9 = add nsw i64 %5, 1
  store i64 %9, ptr %memberidx.i63, align 4
  %memberidx.i.i66 = getelementptr inbounds %Array_Token_, ptr %6, i64 0, i32 1
  %10 = load ptr, ptr %memberidx.i.i66, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %10, i64 %9
  %11 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %11, ptr %memberidx, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %1, %if.entry.i
  %memberidx2 = getelementptr inbounds %VarDeclarationStatement, ptr %2, i64 0, i32 2
  %12 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 51)
  store ptr %12, ptr %memberidx2, align 8
  %13 = load ptr, ptr %memberidx, align 8
  %14 = load i64, ptr %13, align 4
  %15 = icmp eq i64 %14, 1
  br i1 %15, label %if.entry, label %ifend

if.entry:                                         ; preds = %Parser_advance.exit
  %16 = load i64, ptr %memberidx.i63, align 4
  %17 = load ptr, ptr %0, align 8
  %memberidx2.i68 = getelementptr inbounds %Array_Token_, ptr %17, i64 0, i32 2
  %18 = load i64, ptr %memberidx2.i68, align 4
  %19 = icmp slt i64 %16, %18
  br i1 %19, label %if.entry.i72, label %Parser_advance.exit73

if.entry.i72:                                     ; preds = %if.entry
  %20 = add nsw i64 %16, 1
  store i64 %20, ptr %memberidx.i63, align 4
  %memberidx.i.i70 = getelementptr inbounds %Array_Token_, ptr %17, i64 0, i32 1
  %21 = load ptr, ptr %memberidx.i.i70, align 8
  %ptridx.i.i71 = getelementptr inbounds ptr, ptr %21, i64 %20
  %22 = load ptr, ptr %ptridx.i.i71, align 8
  store ptr %22, ptr %memberidx, align 8
  br label %Parser_advance.exit73

Parser_advance.exit73:                            ; preds = %if.entry, %if.entry.i72
  %23 = tail call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  store ptr %23, ptr %memberidx.i, align 8
  %.pre = load ptr, ptr %memberidx, align 8
  %.pre104 = load i64, ptr %.pre, align 4
  br label %ifend

ifend:                                            ; preds = %Parser_advance.exit, %Parser_advance.exit73
  %24 = phi ptr [ null, %Parser_advance.exit ], [ %23, %Parser_advance.exit73 ]
  %25 = phi i64 [ %14, %Parser_advance.exit ], [ %.pre104, %Parser_advance.exit73 ]
  %26 = phi ptr [ %13, %Parser_advance.exit ], [ %.pre, %Parser_advance.exit73 ]
  %memberidx7 = getelementptr inbounds %Token, ptr %26, i64 0, i32 1
  %27 = load ptr, ptr %memberidx7, align 8
  %28 = icmp eq i64 %25, 36
  br i1 %28, label %if.entry10, label %else11

if.entry10:                                       ; preds = %ifend
  %29 = load i64, ptr %memberidx.i63, align 4
  %30 = load ptr, ptr %0, align 8
  %memberidx2.i75 = getelementptr inbounds %Array_Token_, ptr %30, i64 0, i32 2
  %31 = load i64, ptr %memberidx2.i75, align 4
  %32 = icmp slt i64 %29, %31
  br i1 %32, label %if.entry.i79, label %Parser_advance.exit80

if.entry.i79:                                     ; preds = %if.entry10
  %33 = add nsw i64 %29, 1
  store i64 %33, ptr %memberidx.i63, align 4
  %memberidx.i.i77 = getelementptr inbounds %Array_Token_, ptr %30, i64 0, i32 1
  %34 = load ptr, ptr %memberidx.i.i77, align 8
  %ptridx.i.i78 = getelementptr inbounds ptr, ptr %34, i64 %33
  %35 = load ptr, ptr %ptridx.i.i78, align 8
  store ptr %35, ptr %memberidx, align 8
  br label %Parser_advance.exit80

Parser_advance.exit80:                            ; preds = %if.entry10, %if.entry.i79
  %36 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  store ptr %36, ptr %memberidx1.i, align 8
  %37 = load ptr, ptr %36, align 8
  br label %ifend12

else11:                                           ; preds = %ifend
  %38 = icmp ne ptr %24, null
  %39 = icmp eq i64 %25, 23
  %40 = and i1 %39, %38
  br i1 %40, label %if.entry19, label %ifend12

ifend12:                                          ; preds = %ifend30, %else11, %Parser_advance.exit80
  %41 = phi ptr [ %27, %ifend30 ], [ %27, %else11 ], [ %37, %Parser_advance.exit80 ]
  %42 = tail call ptr @malloc(i32 32)
  %43 = load i64, ptr %4, align 4
  %memberidx1.i94 = getelementptr inbounds %FloRange, ptr %41, i64 0, i32 1
  %44 = load i64, ptr %memberidx1.i94, align 4
  %memberidx2.i95 = getelementptr inbounds %FloRange, ptr %4, i64 0, i32 2
  %45 = load i64, ptr %memberidx2.i95, align 4
  %memberidx3.i96 = getelementptr inbounds %FloRange, ptr %41, i64 0, i32 3
  %46 = load i64, ptr %memberidx3.i96, align 4
  store i64 %43, ptr %42, align 4
  %memberidx1.i.i97 = getelementptr inbounds %FloRange, ptr %42, i64 0, i32 1
  store i64 %44, ptr %memberidx1.i.i97, align 4
  %memberidx2.i.i98 = getelementptr inbounds %FloRange, ptr %42, i64 0, i32 2
  store i64 %45, ptr %memberidx2.i.i98, align 4
  %memberidx3.i.i99 = getelementptr inbounds %FloRange, ptr %42, i64 0, i32 3
  store i64 %46, ptr %memberidx3.i.i99, align 4
  store ptr %42, ptr %2, align 8
  ret ptr %2

if.entry19:                                       ; preds = %else11
  %47 = tail call ptr @malloc(i32 41)
  %48 = load ptr, ptr %24, align 8
  %memberidx.i88 = getelementptr inbounds %NewExpressionNode, ptr %47, i64 0, i32 3
  store ptr %24, ptr %memberidx.i88, align 8
  %memberidx1.i89 = getelementptr inbounds %NewExpressionNode, ptr %47, i64 0, i32 4
  store i1 true, ptr %memberidx1.i89, align 1
  store ptr %48, ptr %47, align 8
  %memberidx.i.i.i = getelementptr inbounds %StatementNode, ptr %47, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i, align 4
  %memberidx.i.i90 = getelementptr inbounds %ExpressionNode, ptr %47, i64 0, i32 2
  store i64 11, ptr %memberidx.i.i90, align 4
  %memberidx2.i91 = getelementptr inbounds %NewExpressionNode, ptr %47, i64 0, i32 5
  %49 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ExpressionNode_, ptr %49, align 8
  %memberidx.i7.i = getelementptr inbounds %Array_ExpressionNode_, ptr %49, i64 0, i32 2
  store i64 0, ptr %memberidx.i7.i, align 4
  %memberidx1.i.i92 = getelementptr inbounds %Array_ExpressionNode_, ptr %49, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i92, align 4
  %memberidx2.i.i93 = getelementptr inbounds %Array_ExpressionNode_, ptr %49, i64 0, i32 1
  %50 = tail call ptr @malloc(i32 64)
  store ptr %50, ptr %memberidx2.i.i93, align 8
  store i64 0, ptr %memberidx.i7.i, align 4
  store ptr %49, ptr %memberidx2.i91, align 8
  store i1 false, ptr %memberidx1.i89, align 1
  %51 = load i64, ptr %memberidx.i63, align 4
  %52 = load ptr, ptr %0, align 8
  %memberidx2.i82 = getelementptr inbounds %Array_Token_, ptr %52, i64 0, i32 2
  %53 = load i64, ptr %memberidx2.i82, align 4
  %54 = icmp slt i64 %51, %53
  br i1 %54, label %if.entry.i86, label %if.entry19.Parser_advance.exit87_crit_edge

if.entry19.Parser_advance.exit87_crit_edge:       ; preds = %if.entry19
  %.pre105 = load ptr, ptr %memberidx, align 8
  br label %Parser_advance.exit87

if.entry.i86:                                     ; preds = %if.entry19
  %55 = add nsw i64 %51, 1
  store i64 %55, ptr %memberidx.i63, align 4
  %memberidx.i.i84 = getelementptr inbounds %Array_Token_, ptr %52, i64 0, i32 1
  %56 = load ptr, ptr %memberidx.i.i84, align 8
  %ptridx.i.i85 = getelementptr inbounds ptr, ptr %56, i64 %55
  %57 = load ptr, ptr %ptridx.i.i85, align 8
  store ptr %57, ptr %memberidx, align 8
  br label %Parser_advance.exit87

Parser_advance.exit87:                            ; preds = %if.entry19.Parser_advance.exit87_crit_edge, %if.entry.i86
  %58 = phi ptr [ %.pre105, %if.entry19.Parser_advance.exit87_crit_edge ], [ %57, %if.entry.i86 ]
  %59 = load i64, ptr %58, align 4
  %.not = icmp eq i64 %59, 24
  br i1 %.not, label %ifend30, label %if.entry28

if.entry28:                                       ; preds = %Parser_advance.exit87
  tail call fastcc void @Parser_parse_expression_list(ptr nonnull %0, ptr nonnull %49)
  br label %ifend30

ifend30:                                          ; preds = %Parser_advance.exit87, %if.entry28
  %60 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 24)
  %memberidx34 = getelementptr inbounds %Token, ptr %60, i64 0, i32 1
  %61 = load ptr, ptr %memberidx34, align 8
  %62 = tail call ptr @malloc(i32 32)
  %63 = load i64, ptr %48, align 4
  %memberidx1.i62 = getelementptr inbounds %FloRange, ptr %61, i64 0, i32 1
  %64 = load i64, ptr %memberidx1.i62, align 4
  %memberidx2.i = getelementptr inbounds %FloRange, ptr %48, i64 0, i32 2
  %65 = load i64, ptr %memberidx2.i, align 4
  %memberidx3.i = getelementptr inbounds %FloRange, ptr %61, i64 0, i32 3
  %66 = load i64, ptr %memberidx3.i, align 4
  store i64 %63, ptr %62, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %62, i64 0, i32 1
  store i64 %64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %62, i64 0, i32 2
  store i64 %65, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %62, i64 0, i32 3
  store i64 %66, ptr %memberidx3.i.i, align 4
  store ptr %62, ptr %47, align 8
  store ptr %47, ptr %memberidx1.i, align 8
  br label %ifend12
}

define internal fastcc ptr @Parser_parse_statement(ptr %0) unnamed_addr {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %2 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %2, i64 0, i32 1
  %3 = load ptr, ptr %memberidx1, align 8
  %4 = load i64, ptr %2, align 4
  switch i64 %4, label %ifend38 [
    i64 57, label %if.entry
    i64 73, label %if.entry6
    i64 72, label %if.entry11
    i64 77, label %if.entry16
    i64 56, label %if.entry21
    i64 55, label %if.entry26
    i64 76, label %if.entry31
    i64 75, label %if.entry36
  ]

common.ret:                                       ; preds = %switch.early.test, %switch.early.test, %switch.early.test, %Parser_advance.exit.i, %if.entry.i, %if.entry28.i, %ifend.i, %Parser_advance.exit38.i, %Parser_new_lines.exit.i, %Parser_advance.exit67, %Parser_advance.exit, %if.entry26, %if.entry21, %Parser_parse_while_statement.exit, %ifend38
  %common.ret.op = phi ptr [ %191, %ifend38 ], [ %58, %Parser_parse_while_statement.exit ], [ %173, %if.entry21 ], [ %174, %if.entry26 ], [ %182, %Parser_advance.exit ], [ %190, %Parser_advance.exit67 ], [ %5, %Parser_new_lines.exit.i ], [ %5, %Parser_advance.exit38.i ], [ %76, %ifend.i ], [ %76, %if.entry28.i ], [ %151, %switch.early.test ], [ %151, %if.entry.i ], [ %151, %Parser_advance.exit.i ], [ %151, %switch.early.test ], [ %151, %switch.early.test ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  %5 = tail call ptr @malloc(i32 40)
  %6 = load ptr, ptr %memberidx, align 8
  %memberidx1.i98 = getelementptr inbounds %Token, ptr %6, i64 0, i32 1
  %7 = load ptr, ptr %memberidx1.i98, align 8
  store ptr %7, ptr %5, align 8
  %memberidx.i.i.i99 = getelementptr inbounds %StatementNode, ptr %5, i64 0, i32 1
  store i64 0, ptr %memberidx.i.i.i99, align 4
  %memberidx.i.i100 = getelementptr inbounds %IfStatementNode, ptr %5, i64 0, i32 4
  store ptr null, ptr %memberidx.i.i100, align 8
  %memberidx.i24.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %8 = load i64, ptr %memberidx.i24.i, align 4
  %9 = load ptr, ptr %0, align 8
  %memberidx2.i.i101 = getelementptr inbounds %Array_Token_, ptr %9, i64 0, i32 2
  %10 = load i64, ptr %memberidx2.i.i101, align 4
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %if.entry.i.i104, label %Parser_advance.exit.i111

if.entry.i.i104:                                  ; preds = %if.entry
  %12 = add nsw i64 %8, 1
  store i64 %12, ptr %memberidx.i24.i, align 4
  %memberidx.i.i25.i = getelementptr inbounds %Array_Token_, ptr %9, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i.i25.i, align 8
  %ptridx.i.i.i103 = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i.i.i103, align 8
  store ptr %14, ptr %memberidx, align 8
  br label %Parser_advance.exit.i111

Parser_advance.exit.i111:                         ; preds = %if.entry.i.i104, %if.entry
  %memberidx2.i105 = getelementptr inbounds %IfStatementNode, ptr %5, i64 0, i32 2
  %15 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  store ptr %15, ptr %memberidx2.i105, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = tail call ptr @malloc(i32 32)
  %18 = load i64, ptr %7, align 4
  %memberidx1.i.i106 = getelementptr inbounds %FloRange, ptr %16, i64 0, i32 1
  %19 = load i64, ptr %memberidx1.i.i106, align 4
  %memberidx2.i26.i = getelementptr inbounds %FloRange, ptr %7, i64 0, i32 2
  %20 = load i64, ptr %memberidx2.i26.i, align 4
  %memberidx3.i27.i = getelementptr inbounds %FloRange, ptr %16, i64 0, i32 3
  %21 = load i64, ptr %memberidx3.i27.i, align 4
  store i64 %18, ptr %17, align 4
  %memberidx1.i.i.i107 = getelementptr inbounds %FloRange, ptr %17, i64 0, i32 1
  store i64 %19, ptr %memberidx1.i.i.i107, align 4
  %memberidx2.i.i.i108 = getelementptr inbounds %FloRange, ptr %17, i64 0, i32 2
  store i64 %20, ptr %memberidx2.i.i.i108, align 4
  %memberidx3.i.i.i109 = getelementptr inbounds %FloRange, ptr %17, i64 0, i32 3
  store i64 %21, ptr %memberidx3.i.i.i109, align 4
  store ptr %17, ptr %5, align 8
  %memberidx7.i110 = getelementptr inbounds %IfStatementNode, ptr %5, i64 0, i32 3
  %22 = tail call fastcc ptr @Parser_parse_block(ptr nonnull %0)
  store ptr %22, ptr %memberidx7.i110, align 8
  %23 = load ptr, ptr %memberidx, align 8
  %24 = load i64, ptr %23, align 4
  %25 = icmp eq i64 %24, 31
  %memberidx2.i.i30.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %26 = load ptr, ptr %memberidx2.i.i30.i, align 8
  %memberidx3.i.i31.i = getelementptr inbounds %Array_FloError_, ptr %26, i64 0, i32 2
  %27 = load i64, ptr %memberidx3.i.i31.i, align 4
  %28 = icmp eq i64 %27, 0
  %29 = and i1 %25, %28
  br i1 %29, label %while.entry.i.i.preheader, label %Parser_new_lines.exit.i

while.entry.i.i.preheader:                        ; preds = %Parser_advance.exit.i111
  %30 = load ptr, ptr %0, align 8
  %memberidx2.i12.i.i = getelementptr inbounds %Array_Token_, ptr %30, i64 0, i32 2
  %memberidx.i.i.i.i112 = getelementptr inbounds %Array_Token_, ptr %30, i64 0, i32 1
  %31 = load i64, ptr %memberidx.i24.i, align 4
  %32 = load i64, ptr %memberidx2.i12.i.i, align 4
  %33 = icmp slt i64 %31, %32
  br i1 %33, label %while.entry.i.i, label %while.entry.i.i.us

while.entry.i.i.us:                               ; preds = %while.entry.i.i.preheader, %while.entry.i.i.us
  br label %while.entry.i.i.us

while.entry.i.i:                                  ; preds = %while.entry.i.i.preheader, %Parser_advance.exit.i.i115
  %34 = phi i64 [ %41, %Parser_advance.exit.i.i115 ], [ 31, %while.entry.i.i.preheader ]
  %35 = phi i64 [ %44, %Parser_advance.exit.i.i115 ], [ %31, %while.entry.i.i.preheader ]
  %36 = load i64, ptr %memberidx2.i12.i.i, align 4
  %37 = icmp slt i64 %35, %36
  br i1 %37, label %if.entry.i.i.i114, label %Parser_advance.exit.i.i115

if.entry.i.i.i114:                                ; preds = %while.entry.i.i
  %38 = add nsw i64 %35, 1
  store i64 %38, ptr %memberidx.i24.i, align 4
  %39 = load ptr, ptr %memberidx.i.i.i.i112, align 8
  %ptridx.i.i.i.i113 = getelementptr inbounds ptr, ptr %39, i64 %38
  %40 = load ptr, ptr %ptridx.i.i.i.i113, align 8
  store ptr %40, ptr %memberidx, align 8
  %.pre139 = load i64, ptr %40, align 4
  %.pre140 = load i64, ptr %memberidx3.i.i31.i, align 4
  br label %Parser_advance.exit.i.i115

Parser_advance.exit.i.i115:                       ; preds = %if.entry.i.i.i114, %while.entry.i.i
  %41 = phi i64 [ %.pre139, %if.entry.i.i.i114 ], [ %34, %while.entry.i.i ]
  %42 = phi i64 [ %.pre140, %if.entry.i.i.i114 ], [ 0, %while.entry.i.i ]
  %43 = phi i64 [ %.pre139, %if.entry.i.i.i114 ], [ 31, %while.entry.i.i ]
  %44 = phi i64 [ %38, %if.entry.i.i.i114 ], [ %35, %while.entry.i.i ]
  %45 = icmp eq i64 %43, 31
  %46 = icmp eq i64 %42, 0
  %47 = and i1 %45, %46
  br i1 %47, label %while.entry.i.i, label %Parser_new_lines.exit.i

Parser_new_lines.exit.i:                          ; preds = %Parser_advance.exit.i.i115, %Parser_advance.exit.i111
  %48 = phi i64 [ %24, %Parser_advance.exit.i111 ], [ %41, %Parser_advance.exit.i.i115 ]
  %49 = icmp eq i64 %48, 58
  br i1 %49, label %if.entry.i116, label %common.ret

if.entry.i116:                                    ; preds = %Parser_new_lines.exit.i
  %50 = load i64, ptr %memberidx.i24.i, align 4
  %51 = load ptr, ptr %0, align 8
  %memberidx2.i33.i = getelementptr inbounds %Array_Token_, ptr %51, i64 0, i32 2
  %52 = load i64, ptr %memberidx2.i33.i, align 4
  %53 = icmp slt i64 %50, %52
  br i1 %53, label %if.entry.i37.i, label %Parser_advance.exit38.i

if.entry.i37.i:                                   ; preds = %if.entry.i116
  %54 = add nsw i64 %50, 1
  store i64 %54, ptr %memberidx.i24.i, align 4
  %memberidx.i.i35.i = getelementptr inbounds %Array_Token_, ptr %51, i64 0, i32 1
  %55 = load ptr, ptr %memberidx.i.i35.i, align 8
  %ptridx.i.i36.i = getelementptr inbounds ptr, ptr %55, i64 %54
  %56 = load ptr, ptr %ptridx.i.i36.i, align 8
  store ptr %56, ptr %memberidx, align 8
  br label %Parser_advance.exit38.i

Parser_advance.exit38.i:                          ; preds = %if.entry.i37.i, %if.entry.i116
  %57 = tail call fastcc ptr @Parser_parse_block(ptr nonnull %0)
  store ptr %57, ptr %memberidx.i.i100, align 8
  br label %common.ret

if.entry6:                                        ; preds = %1
  %58 = tail call ptr @malloc(i32 32)
  %59 = load ptr, ptr %memberidx, align 8
  %memberidx1.i84 = getelementptr inbounds %Token, ptr %59, i64 0, i32 1
  %60 = load ptr, ptr %memberidx1.i84, align 8
  store ptr %60, ptr %58, align 8
  %memberidx.i.i.i85 = getelementptr inbounds %StatementNode, ptr %58, i64 0, i32 1
  store i64 4, ptr %memberidx.i.i.i85, align 4
  %memberidx.i.i86 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %61 = load i64, ptr %memberidx.i.i86, align 4
  %62 = load ptr, ptr %0, align 8
  %memberidx2.i.i87 = getelementptr inbounds %Array_Token_, ptr %62, i64 0, i32 2
  %63 = load i64, ptr %memberidx2.i.i87, align 4
  %64 = icmp slt i64 %61, %63
  br i1 %64, label %if.entry.i.i90, label %Parser_parse_while_statement.exit

if.entry.i.i90:                                   ; preds = %if.entry6
  %65 = add nsw i64 %61, 1
  store i64 %65, ptr %memberidx.i.i86, align 4
  %memberidx.i.i16.i = getelementptr inbounds %Array_Token_, ptr %62, i64 0, i32 1
  %66 = load ptr, ptr %memberidx.i.i16.i, align 8
  %ptridx.i.i.i89 = getelementptr inbounds ptr, ptr %66, i64 %65
  %67 = load ptr, ptr %ptridx.i.i.i89, align 8
  store ptr %67, ptr %memberidx, align 8
  br label %Parser_parse_while_statement.exit

Parser_parse_while_statement.exit:                ; preds = %if.entry6, %if.entry.i.i90
  %memberidx2.i91 = getelementptr inbounds %WhileStatementNode, ptr %58, i64 0, i32 2
  %68 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  store ptr %68, ptr %memberidx2.i91, align 8
  %69 = load ptr, ptr %68, align 8
  %70 = tail call ptr @malloc(i32 32)
  %71 = load i64, ptr %60, align 4
  %memberidx1.i.i92 = getelementptr inbounds %FloRange, ptr %69, i64 0, i32 1
  %72 = load i64, ptr %memberidx1.i.i92, align 4
  %memberidx2.i17.i = getelementptr inbounds %FloRange, ptr %60, i64 0, i32 2
  %73 = load i64, ptr %memberidx2.i17.i, align 4
  %memberidx3.i18.i = getelementptr inbounds %FloRange, ptr %69, i64 0, i32 3
  %74 = load i64, ptr %memberidx3.i18.i, align 4
  store i64 %71, ptr %70, align 4
  %memberidx1.i.i.i93 = getelementptr inbounds %FloRange, ptr %70, i64 0, i32 1
  store i64 %72, ptr %memberidx1.i.i.i93, align 4
  %memberidx2.i.i.i94 = getelementptr inbounds %FloRange, ptr %70, i64 0, i32 2
  store i64 %73, ptr %memberidx2.i.i.i94, align 4
  %memberidx3.i.i.i95 = getelementptr inbounds %FloRange, ptr %70, i64 0, i32 3
  store i64 %74, ptr %memberidx3.i.i.i95, align 4
  store ptr %70, ptr %58, align 8
  %memberidx7.i = getelementptr inbounds %WhileStatementNode, ptr %58, i64 0, i32 3
  %75 = tail call fastcc ptr @Parser_parse_block(ptr nonnull %0)
  store ptr %75, ptr %memberidx7.i, align 8
  br label %common.ret

if.entry11:                                       ; preds = %1
  %76 = tail call ptr @malloc(i32 72)
  %77 = load ptr, ptr %memberidx, align 8
  %memberidx1.i70 = getelementptr inbounds %Token, ptr %77, i64 0, i32 1
  %78 = load ptr, ptr %memberidx1.i70, align 8
  %memberidx.i.i71 = getelementptr inbounds %ForStatementNode, ptr %76, i64 0, i32 2
  %memberidx1.i.i72 = getelementptr inbounds %ForStatementNode, ptr %76, i64 0, i32 3
  %memberidx2.i.i73 = getelementptr inbounds %ForStatementNode, ptr %76, i64 0, i32 4
  %memberidx3.i.i74 = getelementptr inbounds %ForStatementNode, ptr %76, i64 0, i32 6
  store i64 0, ptr %memberidx3.i.i74, align 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %memberidx.i.i71, i8 0, i64 24, i1 false)
  store ptr %78, ptr %76, align 8
  %memberidx.i.i.i75 = getelementptr inbounds %StatementNode, ptr %76, i64 0, i32 1
  store i64 3, ptr %memberidx.i.i.i75, align 4
  %memberidx.i60.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %79 = load i64, ptr %memberidx.i60.i, align 4
  %80 = load ptr, ptr %0, align 8
  %memberidx2.i61.i = getelementptr inbounds %Array_Token_, ptr %80, i64 0, i32 2
  %81 = load i64, ptr %memberidx2.i61.i, align 4
  %82 = icmp slt i64 %79, %81
  br i1 %82, label %if.entry.i.i77, label %Parser_advance.exit.i78

if.entry.i.i77:                                   ; preds = %if.entry11
  %83 = add nsw i64 %79, 1
  store i64 %83, ptr %memberidx.i60.i, align 4
  %memberidx.i.i63.i = getelementptr inbounds %Array_Token_, ptr %80, i64 0, i32 1
  %84 = load ptr, ptr %memberidx.i.i63.i, align 8
  %ptridx.i.i.i76 = getelementptr inbounds ptr, ptr %84, i64 %83
  %85 = load ptr, ptr %ptridx.i.i.i76, align 8
  store ptr %85, ptr %memberidx, align 8
  %.pre = load i64, ptr %memberidx2.i61.i, align 4
  br label %Parser_advance.exit.i78

Parser_advance.exit.i78:                          ; preds = %if.entry.i.i77, %if.entry11
  %86 = phi ptr [ %85, %if.entry.i.i77 ], [ %77, %if.entry11 ]
  %87 = phi i64 [ %.pre, %if.entry.i.i77 ], [ %81, %if.entry11 ]
  %88 = phi i64 [ %83, %if.entry.i.i77 ], [ %79, %if.entry11 ]
  %89 = add i64 %88, 1
  %90 = icmp slt i64 %89, %87
  %91 = add i64 %87, -1
  %.sink142 = select i1 %90, i64 %89, i64 %91
  %memberidx.i12.i.i = getelementptr inbounds %Array_Token_, ptr %80, i64 0, i32 1
  %92 = load ptr, ptr %memberidx.i12.i.i, align 8
  %ptridx.i13.i.i = getelementptr inbounds ptr, ptr %92, i64 %.sink142
  %common.ret.op.i.i = load ptr, ptr %ptridx.i13.i.i, align 8
  %93 = load i64, ptr %common.ret.op.i.i, align 4
  %.not.i = icmp eq i64 %93, 82
  br i1 %.not.i, label %else.i, label %if.entry.i79

if.entry.i79:                                     ; preds = %Parser_advance.exit.i78
  %94 = load i64, ptr %86, align 4
  %.not57.i = icmp eq i64 %94, 2
  br i1 %.not57.i, label %if.entry.i85.i, label %ifend7.i

else.i:                                           ; preds = %Parser_advance.exit.i78
  store i64 1, ptr %memberidx3.i.i74, align 4
  %memberidx22.i = getelementptr inbounds %ForStatementNode, ptr %76, i64 0, i32 7
  %95 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 51)
  store ptr %95, ptr %memberidx22.i, align 8
  %96 = load ptr, ptr %memberidx, align 8
  %97 = load i64, ptr %96, align 4
  %98 = icmp eq i64 %97, 82
  br i1 %98, label %if.entry.i72.i, label %else.i.i

if.entry.i72.i:                                   ; preds = %else.i
  %99 = load i64, ptr %memberidx.i60.i, align 4
  %100 = load ptr, ptr %0, align 8
  %memberidx2.i.i.i80 = getelementptr inbounds %Array_Token_, ptr %100, i64 0, i32 2
  %101 = load i64, ptr %memberidx2.i.i.i80, align 4
  %102 = icmp slt i64 %99, %101
  br i1 %102, label %if.entry.i.i.i, label %Parser_eat.exit.i

if.entry.i.i.i:                                   ; preds = %if.entry.i72.i
  %103 = add nsw i64 %99, 1
  store i64 %103, ptr %memberidx.i60.i, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Token_, ptr %100, i64 0, i32 1
  %104 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %104, i64 %103
  %105 = load ptr, ptr %ptridx.i.i.i.i, align 8
  store ptr %105, ptr %memberidx, align 8
  br label %Parser_eat.exit.i

else.i.i:                                         ; preds = %else.i
  %106 = tail call ptr @malloc(i32 16)
  %memberidx35.i.i = getelementptr inbounds %Token, ptr %96, i64 0, i32 1
  %107 = load ptr, ptr %memberidx35.i.i, align 8
  store i64 44, ptr %106, align 4
  %memberidx1.i82.i.i = getelementptr inbounds %Token, ptr %106, i64 0, i32 1
  store ptr %107, ptr %memberidx1.i82.i.i, align 8
  br label %Parser_eat.exit.i

Parser_eat.exit.i:                                ; preds = %if.entry.i72.i, %if.entry.i.i.i, %else.i.i
  %memberidx23.i = getelementptr inbounds %ForStatementNode, ptr %76, i64 0, i32 5
  %108 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  store ptr %108, ptr %memberidx23.i, align 8
  br label %ifend.i

ifend.i:                                          ; preds = %if.entry17.i, %Parser_eat.exit108.i, %Parser_eat.exit.i
  %109 = load ptr, ptr %memberidx, align 8
  %memberidx27.i = getelementptr inbounds %Token, ptr %109, i64 0, i32 1
  %110 = load ptr, ptr %memberidx27.i, align 8
  %111 = tail call ptr @malloc(i32 32)
  %112 = load i64, ptr %78, align 4
  %memberidx1.i73.i = getelementptr inbounds %FloRange, ptr %110, i64 0, i32 1
  %113 = load i64, ptr %memberidx1.i73.i, align 4
  %memberidx2.i74.i = getelementptr inbounds %FloRange, ptr %78, i64 0, i32 2
  %114 = load i64, ptr %memberidx2.i74.i, align 4
  %memberidx3.i75.i = getelementptr inbounds %FloRange, ptr %110, i64 0, i32 3
  %115 = load i64, ptr %memberidx3.i75.i, align 4
  store i64 %112, ptr %111, align 4
  %memberidx1.i.i.i82 = getelementptr inbounds %FloRange, ptr %111, i64 0, i32 1
  store i64 %113, ptr %memberidx1.i.i.i82, align 4
  %memberidx2.i.i76.i = getelementptr inbounds %FloRange, ptr %111, i64 0, i32 2
  store i64 %114, ptr %memberidx2.i.i76.i, align 4
  %memberidx3.i.i77.i = getelementptr inbounds %FloRange, ptr %111, i64 0, i32 3
  store i64 %115, ptr %memberidx3.i.i77.i, align 4
  store ptr %111, ptr %76, align 8
  %116 = load ptr, ptr %memberidx, align 8
  %117 = load i64, ptr %116, align 4
  %118 = icmp ne i64 %117, 44
  %memberidx2.i79.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %119 = load ptr, ptr %memberidx2.i79.i, align 8
  %memberidx3.i80.i = getelementptr inbounds %Array_FloError_, ptr %119, i64 0, i32 2
  %120 = load i64, ptr %memberidx3.i80.i, align 4
  %121 = icmp eq i64 %120, 0
  %122 = and i1 %118, %121
  br i1 %122, label %if.entry28.i, label %common.ret

ifend7.i:                                         ; preds = %if.entry.i79
  %123 = tail call fastcc ptr @Parser_parse_statement(ptr nonnull %0)
  store ptr %123, ptr %memberidx.i.i71, align 8
  %.pre133 = load ptr, ptr %memberidx, align 8
  %.pre134 = load i64, ptr %.pre133, align 4
  %phi.cmp = icmp eq i64 %.pre134, 2
  br i1 %phi.cmp, label %if.entry.i85.i, label %else.i91.i

if.entry.i85.i:                                   ; preds = %if.entry.i79, %ifend7.i
  %124 = phi ptr [ %.pre133, %ifend7.i ], [ %86, %if.entry.i79 ]
  %125 = load i64, ptr %memberidx.i60.i, align 4
  %126 = load ptr, ptr %0, align 8
  %memberidx2.i.i84.i = getelementptr inbounds %Array_Token_, ptr %126, i64 0, i32 2
  %127 = load i64, ptr %memberidx2.i.i84.i, align 4
  %128 = icmp slt i64 %125, %127
  br i1 %128, label %if.entry.i.i89.i, label %Parser_eat.exit94.i

if.entry.i.i89.i:                                 ; preds = %if.entry.i85.i
  %129 = add nsw i64 %125, 1
  store i64 %129, ptr %memberidx.i60.i, align 4
  %memberidx.i.i.i87.i = getelementptr inbounds %Array_Token_, ptr %126, i64 0, i32 1
  %130 = load ptr, ptr %memberidx.i.i.i87.i, align 8
  %ptridx.i.i.i88.i = getelementptr inbounds ptr, ptr %130, i64 %129
  %131 = load ptr, ptr %ptridx.i.i.i88.i, align 8
  store ptr %131, ptr %memberidx, align 8
  br label %Parser_eat.exit94.i

else.i91.i:                                       ; preds = %ifend7.i
  %132 = tail call ptr @malloc(i32 16)
  %memberidx35.i92.i = getelementptr inbounds %Token, ptr %.pre133, i64 0, i32 1
  %133 = load ptr, ptr %memberidx35.i92.i, align 8
  store i64 44, ptr %132, align 4
  %memberidx1.i82.i93.i = getelementptr inbounds %Token, ptr %132, i64 0, i32 1
  store ptr %133, ptr %memberidx1.i82.i93.i, align 8
  %.pre135 = load ptr, ptr %memberidx, align 8
  br label %Parser_eat.exit94.i

Parser_eat.exit94.i:                              ; preds = %if.entry.i85.i, %if.entry.i.i89.i, %else.i91.i
  %134 = phi ptr [ %124, %if.entry.i85.i ], [ %131, %if.entry.i.i89.i ], [ %.pre135, %else.i91.i ]
  %135 = load i64, ptr %134, align 4
  %.not58.i = icmp eq i64 %135, 2
  br i1 %.not58.i, label %if.entry.i99.i, label %ifend13.i

ifend13.i:                                        ; preds = %Parser_eat.exit94.i
  %136 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  store ptr %136, ptr %memberidx1.i.i72, align 8
  %.pre136 = load ptr, ptr %memberidx, align 8
  %.pre137 = load i64, ptr %.pre136, align 4
  %phi.cmp141 = icmp eq i64 %.pre137, 2
  br i1 %phi.cmp141, label %if.entry.i99.i, label %else.i105.i

if.entry.i99.i:                                   ; preds = %Parser_eat.exit94.i, %ifend13.i
  %137 = phi ptr [ %.pre136, %ifend13.i ], [ %134, %Parser_eat.exit94.i ]
  %138 = load i64, ptr %memberidx.i60.i, align 4
  %139 = load ptr, ptr %0, align 8
  %memberidx2.i.i98.i = getelementptr inbounds %Array_Token_, ptr %139, i64 0, i32 2
  %140 = load i64, ptr %memberidx2.i.i98.i, align 4
  %141 = icmp slt i64 %138, %140
  br i1 %141, label %if.entry.i.i103.i, label %Parser_eat.exit108.i

if.entry.i.i103.i:                                ; preds = %if.entry.i99.i
  %142 = add nsw i64 %138, 1
  store i64 %142, ptr %memberidx.i60.i, align 4
  %memberidx.i.i.i101.i = getelementptr inbounds %Array_Token_, ptr %139, i64 0, i32 1
  %143 = load ptr, ptr %memberidx.i.i.i101.i, align 8
  %ptridx.i.i.i102.i = getelementptr inbounds ptr, ptr %143, i64 %142
  %144 = load ptr, ptr %ptridx.i.i.i102.i, align 8
  store ptr %144, ptr %memberidx, align 8
  br label %Parser_eat.exit108.i

else.i105.i:                                      ; preds = %ifend13.i
  %145 = tail call ptr @malloc(i32 16)
  %memberidx35.i106.i = getelementptr inbounds %Token, ptr %.pre136, i64 0, i32 1
  %146 = load ptr, ptr %memberidx35.i106.i, align 8
  store i64 44, ptr %145, align 4
  %memberidx1.i82.i107.i = getelementptr inbounds %Token, ptr %145, i64 0, i32 1
  store ptr %146, ptr %memberidx1.i82.i107.i, align 8
  %.pre138 = load ptr, ptr %memberidx, align 8
  br label %Parser_eat.exit108.i

Parser_eat.exit108.i:                             ; preds = %if.entry.i99.i, %if.entry.i.i103.i, %else.i105.i
  %147 = phi ptr [ %137, %if.entry.i99.i ], [ %144, %if.entry.i.i103.i ], [ %.pre138, %else.i105.i ]
  %148 = load i64, ptr %147, align 4
  %.not59.i = icmp eq i64 %148, 25
  br i1 %.not59.i, label %ifend.i, label %if.entry17.i

if.entry17.i:                                     ; preds = %Parser_eat.exit108.i
  %149 = tail call fastcc ptr @Parser_parse_statement(ptr nonnull %0)
  store ptr %149, ptr %memberidx2.i.i73, align 8
  br label %ifend.i

if.entry28.i:                                     ; preds = %ifend.i
  %memberidx31.i = getelementptr inbounds %ForStatementNode, ptr %76, i64 0, i32 8
  %150 = tail call fastcc ptr @Parser_parse_block(ptr nonnull %0)
  store ptr %150, ptr %memberidx31.i, align 8
  br label %common.ret

if.entry16:                                       ; preds = %1
  %151 = tail call ptr @malloc(i32 24)
  %152 = load ptr, ptr %memberidx, align 8
  %memberidx1.i = getelementptr inbounds %Token, ptr %152, i64 0, i32 1
  %153 = load ptr, ptr %memberidx1.i, align 8
  %memberidx.i.i = getelementptr inbounds %ReturnStatementNode, ptr %151, i64 0, i32 2
  store ptr null, ptr %memberidx.i.i, align 8
  store ptr %153, ptr %151, align 8
  %memberidx.i.i.i = getelementptr inbounds %StatementNode, ptr %151, i64 0, i32 1
  store i64 7, ptr %memberidx.i.i.i, align 4
  %memberidx.i18.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %154 = load i64, ptr %memberidx.i18.i, align 4
  %155 = load ptr, ptr %0, align 8
  %memberidx2.i19.i = getelementptr inbounds %Array_Token_, ptr %155, i64 0, i32 2
  %156 = load i64, ptr %memberidx2.i19.i, align 4
  %157 = icmp slt i64 %154, %156
  br i1 %157, label %if.entry.i.i, label %Parser_advance.exit.i

if.entry.i.i:                                     ; preds = %if.entry16
  %158 = add nsw i64 %154, 1
  store i64 %158, ptr %memberidx.i18.i, align 4
  %memberidx.i.i21.i = getelementptr inbounds %Array_Token_, ptr %155, i64 0, i32 1
  %159 = load ptr, ptr %memberidx.i.i21.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %159, i64 %158
  %160 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %160, ptr %memberidx, align 8
  br label %Parser_advance.exit.i

Parser_advance.exit.i:                            ; preds = %if.entry.i.i, %if.entry16
  %161 = phi ptr [ %160, %if.entry.i.i ], [ %152, %if.entry16 ]
  %memberidx2.i23.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %162 = load ptr, ptr %memberidx2.i23.i, align 8
  %memberidx3.i24.i = getelementptr inbounds %Array_FloError_, ptr %162, i64 0, i32 2
  %163 = load i64, ptr %memberidx3.i24.i, align 4
  %.fr = freeze i64 %163
  %164 = icmp eq i64 %.fr, 0
  br i1 %164, label %switch.early.test, label %common.ret

switch.early.test:                                ; preds = %Parser_advance.exit.i
  %165 = load i64, ptr %161, align 4
  switch i64 %165, label %if.entry.i [
    i64 44, label %common.ret
    i64 31, label %common.ret
    i64 26, label %common.ret
  ]

if.entry.i:                                       ; preds = %switch.early.test
  %166 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %167 = load ptr, ptr %166, align 8
  %168 = tail call ptr @malloc(i32 32)
  %169 = load i64, ptr %153, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %167, i64 0, i32 1
  %170 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %153, i64 0, i32 2
  %171 = load i64, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %167, i64 0, i32 3
  %172 = load i64, ptr %memberidx3.i.i, align 4
  store i64 %169, ptr %168, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %168, i64 0, i32 1
  store i64 %170, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %168, i64 0, i32 2
  store i64 %171, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %168, i64 0, i32 3
  store i64 %172, ptr %memberidx3.i.i.i, align 4
  store ptr %168, ptr %151, align 8
  store ptr %166, ptr %memberidx.i.i, align 8
  br label %common.ret

if.entry21:                                       ; preds = %1
  %173 = tail call fastcc ptr @Parser_parse_variable_declaration_statement(ptr nonnull %0)
  br label %common.ret

if.entry26:                                       ; preds = %1
  %174 = tail call fastcc ptr @Parser_parse_const_declaration_statement(ptr nonnull %0)
  br label %common.ret

if.entry31:                                       ; preds = %1
  %memberidx.i57 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %175 = load i64, ptr %memberidx.i57, align 4
  %176 = load ptr, ptr %0, align 8
  %memberidx2.i = getelementptr inbounds %Array_Token_, ptr %176, i64 0, i32 2
  %177 = load i64, ptr %memberidx2.i, align 4
  %178 = icmp slt i64 %175, %177
  br i1 %178, label %if.entry.i59, label %Parser_advance.exit

if.entry.i59:                                     ; preds = %if.entry31
  %179 = add nsw i64 %175, 1
  store i64 %179, ptr %memberidx.i57, align 4
  %memberidx.i.i58 = getelementptr inbounds %Array_Token_, ptr %176, i64 0, i32 1
  %180 = load ptr, ptr %memberidx.i.i58, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %180, i64 %179
  %181 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %181, ptr %memberidx, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %if.entry31, %if.entry.i59
  %182 = tail call ptr @malloc(i32 16)
  store ptr %3, ptr %182, align 8
  %memberidx.i60 = getelementptr inbounds %StatementNode, ptr %182, i64 0, i32 1
  store i64 5, ptr %memberidx.i60, align 4
  br label %common.ret

if.entry36:                                       ; preds = %1
  %memberidx.i61 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %183 = load i64, ptr %memberidx.i61, align 4
  %184 = load ptr, ptr %0, align 8
  %memberidx2.i62 = getelementptr inbounds %Array_Token_, ptr %184, i64 0, i32 2
  %185 = load i64, ptr %memberidx2.i62, align 4
  %186 = icmp slt i64 %183, %185
  br i1 %186, label %if.entry.i66, label %Parser_advance.exit67

if.entry.i66:                                     ; preds = %if.entry36
  %187 = add nsw i64 %183, 1
  store i64 %187, ptr %memberidx.i61, align 4
  %memberidx.i.i64 = getelementptr inbounds %Array_Token_, ptr %184, i64 0, i32 1
  %188 = load ptr, ptr %memberidx.i.i64, align 8
  %ptridx.i.i65 = getelementptr inbounds ptr, ptr %188, i64 %187
  %189 = load ptr, ptr %ptridx.i.i65, align 8
  store ptr %189, ptr %memberidx, align 8
  br label %Parser_advance.exit67

Parser_advance.exit67:                            ; preds = %if.entry36, %if.entry.i66
  %190 = tail call ptr @malloc(i32 16)
  store ptr %3, ptr %190, align 8
  %memberidx.i68 = getelementptr inbounds %StatementNode, ptr %190, i64 0, i32 1
  store i64 6, ptr %memberidx.i68, align 4
  br label %common.ret

ifend38:                                          ; preds = %1
  %191 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  br label %common.ret
}

define internal fastcc void @Parser_parse_args(ptr %0, ptr nocapture %1) unnamed_addr {
  %3 = tail call fastcc ptr @Parser_parse_arg(ptr %0)
  %memberidx.i = getelementptr inbounds %Array_ArgNode_, ptr %1, i64 0, i32 2
  %4 = load i64, ptr %memberidx.i, align 4
  %memberidx1.i = getelementptr inbounds %Array_ArgNode_, ptr %1, i64 0, i32 3
  %5 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp slt i64 %4, %5
  br i1 %.not.i, label %.Array_ArgNode____sl__.exit_crit_edge, label %if.entry.i

.Array_ArgNode____sl__.exit_crit_edge:            ; preds = %2
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_ArgNode_, ptr %1, i64 0, i32 1
  %.pre24 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_ArgNode____sl__.exit

if.entry.i:                                       ; preds = %2
  %6 = shl i64 %5, 1
  store i64 %6, ptr %memberidx1.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_ArgNode_, ptr %1, i64 0, i32 1
  %7 = load ptr, ptr %memberidx2.i.i, align 8
  %8 = shl i64 %5, 4
  %9 = tail call ptr @realloc(ptr %7, i64 %8)
  store ptr %9, ptr %memberidx2.i.i, align 8
  %.pre = load i64, ptr %memberidx.i, align 4
  br label %Array_ArgNode____sl__.exit

Array_ArgNode____sl__.exit:                       ; preds = %.Array_ArgNode____sl__.exit_crit_edge, %if.entry.i
  %10 = phi ptr [ %.pre24, %.Array_ArgNode____sl__.exit_crit_edge ], [ %9, %if.entry.i ]
  %11 = phi i64 [ %4, %.Array_ArgNode____sl__.exit_crit_edge ], [ %.pre, %if.entry.i ]
  %12 = add i64 %11, 1
  store i64 %12, ptr %memberidx.i, align 4
  %memberidx4.i = getelementptr inbounds %Array_ArgNode_, ptr %1, i64 0, i32 1
  %ptridx.i = getelementptr inbounds ptr, ptr %10, i64 %11
  store ptr %3, ptr %ptridx.i, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %13 = load ptr, ptr %memberidx, align 8
  %14 = load i64, ptr %13, align 4
  %15 = icmp eq i64 %14, 3
  %memberidx2.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %16 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %Array_FloError_, ptr %16, i64 0, i32 2
  %17 = load i64, ptr %memberidx3.i, align 4
  %18 = icmp eq i64 %17, 0
  %19 = and i1 %15, %18
  br i1 %19, label %while.entry, label %while.end

while.entry:                                      ; preds = %Array_ArgNode____sl__.exit, %Array_ArgNode____sl__.exit23
  %20 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 3)
  %21 = tail call fastcc ptr @Parser_parse_arg(ptr nonnull %0)
  %22 = load i64, ptr %memberidx.i, align 4
  %23 = load i64, ptr %memberidx1.i, align 4
  %.not.i17 = icmp slt i64 %22, %23
  br i1 %.not.i17, label %while.entry.Array_ArgNode____sl__.exit23_crit_edge, label %if.entry.i20

while.entry.Array_ArgNode____sl__.exit23_crit_edge: ; preds = %while.entry
  %.pre26 = load ptr, ptr %memberidx4.i, align 8
  br label %Array_ArgNode____sl__.exit23

if.entry.i20:                                     ; preds = %while.entry
  %24 = shl i64 %23, 1
  store i64 %24, ptr %memberidx1.i, align 4
  %25 = load ptr, ptr %memberidx4.i, align 8
  %26 = shl i64 %23, 4
  %27 = tail call ptr @realloc(ptr %25, i64 %26)
  store ptr %27, ptr %memberidx4.i, align 8
  %.pre25 = load i64, ptr %memberidx.i, align 4
  br label %Array_ArgNode____sl__.exit23

Array_ArgNode____sl__.exit23:                     ; preds = %while.entry.Array_ArgNode____sl__.exit23_crit_edge, %if.entry.i20
  %28 = phi ptr [ %.pre26, %while.entry.Array_ArgNode____sl__.exit23_crit_edge ], [ %27, %if.entry.i20 ]
  %29 = phi i64 [ %22, %while.entry.Array_ArgNode____sl__.exit23_crit_edge ], [ %.pre25, %if.entry.i20 ]
  %30 = add i64 %29, 1
  store i64 %30, ptr %memberidx.i, align 4
  %ptridx.i22 = getelementptr inbounds ptr, ptr %28, i64 %29
  store ptr %21, ptr %ptridx.i22, align 8
  %31 = load ptr, ptr %memberidx, align 8
  %32 = load i64, ptr %31, align 4
  %33 = icmp eq i64 %32, 3
  %34 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i14 = getelementptr inbounds %Array_FloError_, ptr %34, i64 0, i32 2
  %35 = load i64, ptr %memberidx3.i14, align 4
  %36 = icmp eq i64 %35, 0
  %37 = and i1 %33, %36
  br i1 %37, label %while.entry, label %while.end

while.end:                                        ; preds = %Array_ArgNode____sl__.exit23, %Array_ArgNode____sl__.exit
  ret void
}

define internal fastcc noalias ptr @Parser_parse_const_declaration_statement(ptr %0) unnamed_addr {
  %2 = tail call ptr @malloc(i32 40)
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %3, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %memberidx.i.i = getelementptr inbounds %StatementNode, ptr %2, i64 0, i32 1
  store i64 2, ptr %memberidx.i.i, align 4
  %memberidx.i = getelementptr inbounds %ConstDeclarationStatement, ptr %2, i64 0, i32 3
  store ptr null, ptr %memberidx.i, align 8
  %memberidx.i24 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %5 = load i64, ptr %memberidx.i24, align 4
  %6 = load ptr, ptr %0, align 8
  %memberidx2.i25 = getelementptr inbounds %Array_Token_, ptr %6, i64 0, i32 2
  %7 = load i64, ptr %memberidx2.i25, align 4
  %8 = icmp slt i64 %5, %7
  br i1 %8, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %1
  %9 = add nsw i64 %5, 1
  store i64 %9, ptr %memberidx.i24, align 4
  %memberidx.i.i27 = getelementptr inbounds %Array_Token_, ptr %6, i64 0, i32 1
  %10 = load ptr, ptr %memberidx.i.i27, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %10, i64 %9
  %11 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %11, ptr %memberidx, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %1, %if.entry.i
  %memberidx2 = getelementptr inbounds %ConstDeclarationStatement, ptr %2, i64 0, i32 2
  %12 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 51)
  store ptr %12, ptr %memberidx2, align 8
  %13 = load ptr, ptr %memberidx, align 8
  %14 = load i64, ptr %13, align 4
  %15 = icmp eq i64 %14, 1
  br i1 %15, label %if.entry, label %ifend

if.entry:                                         ; preds = %Parser_advance.exit
  %16 = load i64, ptr %memberidx.i24, align 4
  %17 = load ptr, ptr %0, align 8
  %memberidx2.i29 = getelementptr inbounds %Array_Token_, ptr %17, i64 0, i32 2
  %18 = load i64, ptr %memberidx2.i29, align 4
  %19 = icmp slt i64 %16, %18
  br i1 %19, label %if.entry.i33, label %Parser_advance.exit34

if.entry.i33:                                     ; preds = %if.entry
  %20 = add nsw i64 %16, 1
  store i64 %20, ptr %memberidx.i24, align 4
  %memberidx.i.i31 = getelementptr inbounds %Array_Token_, ptr %17, i64 0, i32 1
  %21 = load ptr, ptr %memberidx.i.i31, align 8
  %ptridx.i.i32 = getelementptr inbounds ptr, ptr %21, i64 %20
  %22 = load ptr, ptr %ptridx.i.i32, align 8
  store ptr %22, ptr %memberidx, align 8
  br label %Parser_advance.exit34

Parser_advance.exit34:                            ; preds = %if.entry, %if.entry.i33
  %23 = tail call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  store ptr %23, ptr %memberidx.i, align 8
  br label %ifend

ifend:                                            ; preds = %Parser_advance.exit, %Parser_advance.exit34
  %24 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 36)
  %memberidx6 = getelementptr inbounds %ConstDeclarationStatement, ptr %2, i64 0, i32 4
  %25 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  store ptr %25, ptr %memberidx6, align 8
  %26 = load ptr, ptr %25, align 8
  %27 = tail call ptr @malloc(i32 32)
  %28 = load i64, ptr %4, align 4
  %memberidx1.i = getelementptr inbounds %FloRange, ptr %26, i64 0, i32 1
  %29 = load i64, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %FloRange, ptr %4, i64 0, i32 2
  %30 = load i64, ptr %memberidx2.i, align 4
  %memberidx3.i = getelementptr inbounds %FloRange, ptr %26, i64 0, i32 3
  %31 = load i64, ptr %memberidx3.i, align 4
  store i64 %28, ptr %27, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %27, i64 0, i32 1
  store i64 %29, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %27, i64 0, i32 2
  store i64 %30, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %27, i64 0, i32 3
  store i64 %31, ptr %memberidx3.i.i, align 4
  store ptr %27, ptr %2, align 8
  ret ptr %2
}

define internal fastcc void @Parser_parse_type_list(ptr %0, ptr nocapture %1) unnamed_addr {
  %3 = tail call fastcc ptr @Parser_parse_type(ptr %0)
  %memberidx.i20 = getelementptr inbounds %Array_TypeNode_, ptr %1, i64 0, i32 2
  %4 = load i64, ptr %memberidx.i20, align 4
  %memberidx1.i21 = getelementptr inbounds %Array_TypeNode_, ptr %1, i64 0, i32 3
  %5 = load i64, ptr %memberidx1.i21, align 4
  %.not.i22 = icmp slt i64 %4, %5
  br i1 %.not.i22, label %.Array_TypeNode____sl__.exit28_crit_edge, label %if.entry.i25

.Array_TypeNode____sl__.exit28_crit_edge:         ; preds = %2
  %memberidx4.i26.phi.trans.insert = getelementptr inbounds %Array_TypeNode_, ptr %1, i64 0, i32 1
  %.pre29 = load ptr, ptr %memberidx4.i26.phi.trans.insert, align 8
  br label %Array_TypeNode____sl__.exit28

if.entry.i25:                                     ; preds = %2
  %6 = shl i64 %5, 1
  store i64 %6, ptr %memberidx1.i21, align 4
  %memberidx2.i.i24 = getelementptr inbounds %Array_TypeNode_, ptr %1, i64 0, i32 1
  %7 = load ptr, ptr %memberidx2.i.i24, align 8
  %8 = shl i64 %5, 4
  %9 = tail call ptr @realloc(ptr %7, i64 %8)
  store ptr %9, ptr %memberidx2.i.i24, align 8
  %.pre = load i64, ptr %memberidx.i20, align 4
  br label %Array_TypeNode____sl__.exit28

Array_TypeNode____sl__.exit28:                    ; preds = %.Array_TypeNode____sl__.exit28_crit_edge, %if.entry.i25
  %10 = phi ptr [ %.pre29, %.Array_TypeNode____sl__.exit28_crit_edge ], [ %9, %if.entry.i25 ]
  %11 = phi i64 [ %4, %.Array_TypeNode____sl__.exit28_crit_edge ], [ %.pre, %if.entry.i25 ]
  %12 = add i64 %11, 1
  store i64 %12, ptr %memberidx.i20, align 4
  %memberidx4.i26 = getelementptr inbounds %Array_TypeNode_, ptr %1, i64 0, i32 1
  %ptridx.i27 = getelementptr inbounds ptr, ptr %10, i64 %11
  store ptr %3, ptr %ptridx.i27, align 8
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %13 = load ptr, ptr %memberidx, align 8
  %14 = load i64, ptr %13, align 4
  %15 = icmp eq i64 %14, 3
  %memberidx2.i18 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %16 = load ptr, ptr %memberidx2.i18, align 8
  %memberidx3.i19 = getelementptr inbounds %Array_FloError_, ptr %16, i64 0, i32 2
  %17 = load i64, ptr %memberidx3.i19, align 4
  %18 = icmp eq i64 %17, 0
  %19 = and i1 %15, %18
  br i1 %19, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %Array_TypeNode____sl__.exit28
  %memberidx.i12 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %Array_TypeNode____sl__.exit
  %20 = load i64, ptr %memberidx.i12, align 4
  %21 = load ptr, ptr %0, align 8
  %memberidx2.i13 = getelementptr inbounds %Array_Token_, ptr %21, i64 0, i32 2
  %22 = load i64, ptr %memberidx2.i13, align 4
  %23 = icmp slt i64 %20, %22
  br i1 %23, label %if.entry.i16, label %Parser_advance.exit

if.entry.i16:                                     ; preds = %while.entry
  %24 = add nsw i64 %20, 1
  store i64 %24, ptr %memberidx.i12, align 4
  %memberidx.i.i15 = getelementptr inbounds %Array_Token_, ptr %21, i64 0, i32 1
  %25 = load ptr, ptr %memberidx.i.i15, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %25, i64 %24
  %26 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %26, ptr %memberidx, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %while.entry, %if.entry.i16
  %27 = tail call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  %28 = load i64, ptr %memberidx.i20, align 4
  %29 = load i64, ptr %memberidx1.i21, align 4
  %.not.i = icmp slt i64 %28, %29
  br i1 %.not.i, label %Parser_advance.exit.Array_TypeNode____sl__.exit_crit_edge, label %if.entry.i

Parser_advance.exit.Array_TypeNode____sl__.exit_crit_edge: ; preds = %Parser_advance.exit
  %.pre31 = load ptr, ptr %memberidx4.i26, align 8
  br label %Array_TypeNode____sl__.exit

if.entry.i:                                       ; preds = %Parser_advance.exit
  %30 = shl i64 %29, 1
  store i64 %30, ptr %memberidx1.i21, align 4
  %31 = load ptr, ptr %memberidx4.i26, align 8
  %32 = shl i64 %29, 4
  %33 = tail call ptr @realloc(ptr %31, i64 %32)
  store ptr %33, ptr %memberidx4.i26, align 8
  %.pre30 = load i64, ptr %memberidx.i20, align 4
  br label %Array_TypeNode____sl__.exit

Array_TypeNode____sl__.exit:                      ; preds = %Parser_advance.exit.Array_TypeNode____sl__.exit_crit_edge, %if.entry.i
  %34 = phi ptr [ %.pre31, %Parser_advance.exit.Array_TypeNode____sl__.exit_crit_edge ], [ %33, %if.entry.i ]
  %35 = phi i64 [ %28, %Parser_advance.exit.Array_TypeNode____sl__.exit_crit_edge ], [ %.pre30, %if.entry.i ]
  %36 = add i64 %35, 1
  store i64 %36, ptr %memberidx.i20, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %34, i64 %35
  store ptr %27, ptr %ptridx.i, align 8
  %37 = load ptr, ptr %memberidx, align 8
  %38 = load i64, ptr %37, align 4
  %39 = icmp eq i64 %38, 3
  %40 = load ptr, ptr %memberidx2.i18, align 8
  %memberidx3.i = getelementptr inbounds %Array_FloError_, ptr %40, i64 0, i32 2
  %41 = load i64, ptr %memberidx3.i, align 4
  %42 = icmp eq i64 %41, 0
  %43 = and i1 %39, %42
  br i1 %43, label %while.entry, label %while.end

while.end:                                        ; preds = %Array_TypeNode____sl__.exit, %Array_TypeNode____sl__.exit28
  ret void
}

define internal fastcc ptr @Parser_parse_arg(ptr %0) unnamed_addr {
  %2 = tail call ptr @malloc(i32 24)
  %3 = tail call fastcc ptr @Parser_eat(ptr %0, i64 51)
  store ptr %3, ptr %2, align 8
  %memberidx1.i = getelementptr inbounds %ArgNode, ptr %2, i64 0, i32 1
  %memberidx2.i = getelementptr inbounds %ArgNode, ptr %2, i64 0, i32 2
  %memberidx.i51 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %memberidx1.i, i8 0, i64 16, i1 false)
  %4 = load ptr, ptr %memberidx.i51, align 8
  %5 = load i64, ptr %4, align 4
  %6 = icmp ne i64 %5, 44
  %memberidx2.i52 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %memberidx2.i52, align 8
  %memberidx3.i = getelementptr inbounds %Array_FloError_, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx3.i, align 4
  %9 = icmp eq i64 %8, 0
  %10 = and i1 %6, %9
  br i1 %10, label %ifend, label %common.ret

common.ret:                                       ; preds = %Parser_error.exit, %ifend13, %Parser_advance.exit, %1
  ret ptr %2

ifend:                                            ; preds = %1
  %11 = icmp eq i64 %5, 1
  br i1 %11, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend
  %memberidx.i53 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %12 = load i64, ptr %memberidx.i53, align 4
  %13 = load ptr, ptr %0, align 8
  %memberidx2.i54 = getelementptr inbounds %Array_Token_, ptr %13, i64 0, i32 2
  %14 = load i64, ptr %memberidx2.i54, align 4
  %15 = icmp slt i64 %12, %14
  br i1 %15, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %if.entry2
  %16 = add nsw i64 %12, 1
  store i64 %16, ptr %memberidx.i53, align 4
  %memberidx.i.i56 = getelementptr inbounds %Array_Token_, ptr %13, i64 0, i32 1
  %17 = load ptr, ptr %memberidx.i.i56, align 8
  %ptridx.i.i57 = getelementptr inbounds ptr, ptr %17, i64 %16
  %18 = load ptr, ptr %ptridx.i.i57, align 8
  store ptr %18, ptr %memberidx.i51, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %if.entry2, %if.entry.i
  %19 = tail call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  store ptr %19, ptr %memberidx1.i, align 8
  %20 = load ptr, ptr %memberidx.i51, align 8
  %21 = load i64, ptr %20, align 4
  %22 = icmp ne i64 %21, 44
  %23 = load ptr, ptr %memberidx2.i52, align 8
  %memberidx3.i63 = getelementptr inbounds %Array_FloError_, ptr %23, i64 0, i32 2
  %24 = load i64, ptr %memberidx3.i63, align 4
  %25 = icmp eq i64 %24, 0
  %26 = and i1 %22, %25
  br i1 %26, label %ifend4, label %common.ret

ifend4:                                           ; preds = %Parser_advance.exit, %ifend
  %27 = phi ptr [ %19, %Parser_advance.exit ], [ null, %ifend ]
  %28 = phi i64 [ %21, %Parser_advance.exit ], [ %5, %ifend ]
  %29 = icmp eq i64 %28, 36
  br i1 %29, label %if.entry11, label %ifend13

if.entry11:                                       ; preds = %ifend4
  %memberidx.i64 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %30 = load i64, ptr %memberidx.i64, align 4
  %31 = load ptr, ptr %0, align 8
  %memberidx2.i65 = getelementptr inbounds %Array_Token_, ptr %31, i64 0, i32 2
  %32 = load i64, ptr %memberidx2.i65, align 4
  %33 = icmp slt i64 %30, %32
  br i1 %33, label %if.entry.i69, label %Parser_advance.exit70

if.entry.i69:                                     ; preds = %if.entry11
  %34 = add nsw i64 %30, 1
  store i64 %34, ptr %memberidx.i64, align 4
  %memberidx.i.i67 = getelementptr inbounds %Array_Token_, ptr %31, i64 0, i32 1
  %35 = load ptr, ptr %memberidx.i.i67, align 8
  %ptridx.i.i68 = getelementptr inbounds ptr, ptr %35, i64 %34
  %36 = load ptr, ptr %ptridx.i.i68, align 8
  store ptr %36, ptr %memberidx.i51, align 8
  br label %Parser_advance.exit70

Parser_advance.exit70:                            ; preds = %if.entry11, %if.entry.i69
  %37 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  store ptr %37, ptr %memberidx2.i, align 8
  %phi.cmp = icmp eq ptr %37, null
  br label %ifend13

ifend13:                                          ; preds = %ifend4, %Parser_advance.exit70
  %38 = phi i1 [ true, %ifend4 ], [ %phi.cmp, %Parser_advance.exit70 ]
  %39 = icmp eq ptr %27, null
  %40 = and i1 %39, %38
  br i1 %40, label %if.entry17, label %common.ret

if.entry17:                                       ; preds = %ifend13
  %memberidx21 = getelementptr inbounds %IdentifierToken, ptr %3, i64 0, i32 2
  %41 = load ptr, ptr %memberidx21, align 8
  %42 = load ptr, ptr %41, align 8
  %memberidx22 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %42, i64 0, i32 5
  %43 = load ptr, ptr %memberidx22, align 8
  %44 = tail call ptr %43(ptr nonnull %41)
  %45 = alloca ptr, align 8
  %46 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %45, ptr nonnull @133, ptr %44)
  %47 = load ptr, ptr %45, align 8
  %48 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %48, align 8
  %memberidx.i58 = getelementptr inbounds %string, ptr %48, i64 0, i32 1
  store ptr %47, ptr %memberidx.i58, align 8
  %memberidx1.i59 = getelementptr inbounds %string, ptr %48, i64 0, i32 2
  store i64 %46, ptr %memberidx1.i59, align 4
  %memberidx2.i60 = getelementptr inbounds %string, ptr %48, i64 0, i32 3
  store i64 %46, ptr %memberidx2.i60, align 4
  tail call void @free(ptr %44)
  %49 = load ptr, ptr %memberidx2.i52, align 8
  %50 = call ptr @malloc(i32 24)
  %51 = load ptr, ptr %memberidx.i51, align 8
  %memberidx2.i50 = getelementptr inbounds %Token, ptr %51, i64 0, i32 1
  %52 = load ptr, ptr %memberidx2.i50, align 8
  store i64 2, ptr %50, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %50, i64 0, i32 2
  store ptr %52, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %50, i64 0, i32 1
  store ptr %48, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %49, i64 0, i32 2
  %53 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i4.i = getelementptr inbounds %Array_FloError_, ptr %49, i64 0, i32 3
  %54 = load i64, ptr %memberidx1.i4.i, align 4
  %.not.i.i = icmp slt i64 %53, %54
  br i1 %.not.i.i, label %if.entry17.Parser_error.exit_crit_edge, label %if.entry.i.i

if.entry17.Parser_error.exit_crit_edge:           ; preds = %if.entry17
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %49, i64 0, i32 1
  %.pre72 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %Parser_error.exit

if.entry.i.i:                                     ; preds = %if.entry17
  %55 = shl i64 %54, 1
  store i64 %55, ptr %memberidx1.i4.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %49, i64 0, i32 1
  %56 = load ptr, ptr %memberidx2.i.i.i, align 8
  %57 = shl i64 %54, 4
  %58 = call ptr @realloc(ptr %56, i64 %57)
  store ptr %58, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i, align 4
  br label %Parser_error.exit

Parser_error.exit:                                ; preds = %if.entry17.Parser_error.exit_crit_edge, %if.entry.i.i
  %59 = phi ptr [ %.pre72, %if.entry17.Parser_error.exit_crit_edge ], [ %58, %if.entry.i.i ]
  %60 = phi i64 [ %53, %if.entry17.Parser_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %61 = add i64 %60, 1
  store i64 %61, ptr %memberidx.i.i, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %59, i64 %60
  store ptr %50, ptr %ptridx.i.i, align 8
  %62 = load ptr, ptr %memberidx2.i52, align 8
  %memberidx25 = getelementptr inbounds %Array_FloError_, ptr %62, i64 0, i32 2
  %63 = load i64, ptr %memberidx25, align 4
  %64 = add i64 %63, -1
  %memberidx.i = getelementptr inbounds %Array_FloError_, ptr %62, i64 0, i32 1
  %65 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %65, i64 %64
  %66 = load ptr, ptr %ptridx.i, align 8
  %memberidx26 = getelementptr inbounds %FloError, ptr %66, i64 0, i32 2
  %memberidx28 = getelementptr inbounds %Token, ptr %3, i64 0, i32 1
  %67 = load ptr, ptr %memberidx28, align 8
  store ptr %67, ptr %memberidx26, align 8
  br label %common.ret
}

define internal fastcc ptr @Parser_parse_object_type(ptr %0) unnamed_addr {
  %2 = tail call fastcc ptr @Parser_eat(ptr %0, i64 51)
  %3 = tail call ptr @malloc(i32 32)
  %memberidx = getelementptr inbounds %Token, ptr %2, i64 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  store ptr %4, ptr %3, align 8
  %memberidx.i.i17 = getelementptr inbounds %TypeNode, ptr %3, i64 0, i32 1
  store i64 18, ptr %memberidx.i.i17, align 4
  %memberidx.i18 = getelementptr inbounds %RecordTypeNode, ptr %3, i64 0, i32 2
  store ptr %2, ptr %memberidx.i18, align 8
  %memberidx1.i19 = getelementptr inbounds %RecordTypeNode, ptr %3, i64 0, i32 3
  %5 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_TypeNode_, ptr %5, align 8
  %memberidx.i5.i = getelementptr inbounds %Array_TypeNode_, ptr %5, i64 0, i32 2
  store i64 0, ptr %memberidx.i5.i, align 4
  %memberidx1.i.i20 = getelementptr inbounds %Array_TypeNode_, ptr %5, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i20, align 4
  %memberidx2.i.i21 = getelementptr inbounds %Array_TypeNode_, ptr %5, i64 0, i32 1
  %6 = tail call ptr @malloc(i32 64)
  store ptr %6, ptr %memberidx2.i.i21, align 8
  store i64 0, ptr %memberidx.i5.i, align 4
  store ptr %5, ptr %memberidx1.i19, align 8
  %memberidx1 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = load i64, ptr %7, align 4
  %9 = icmp eq i64 %8, 40
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %10 = load i64, ptr %memberidx.i, align 4
  %11 = load ptr, ptr %0, align 8
  %memberidx2.i15 = getelementptr inbounds %Array_Token_, ptr %11, i64 0, i32 2
  %12 = load i64, ptr %memberidx2.i15, align 4
  %13 = icmp slt i64 %10, %12
  br i1 %13, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %if.entry
  %14 = add nsw i64 %10, 1
  store i64 %14, ptr %memberidx.i, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %11, i64 0, i32 1
  %15 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %15, i64 %14
  %16 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %16, ptr %memberidx1, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %if.entry, %if.entry.i
  tail call fastcc void @Parser_parse_type_list(ptr nonnull %0, ptr nonnull %5)
  %17 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 39)
  %memberidx6 = getelementptr inbounds %Token, ptr %17, i64 0, i32 1
  %18 = load ptr, ptr %memberidx6, align 8
  %19 = tail call ptr @malloc(i32 32)
  %20 = load i64, ptr %4, align 4
  %memberidx1.i = getelementptr inbounds %FloRange, ptr %18, i64 0, i32 1
  %21 = load i64, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %FloRange, ptr %4, i64 0, i32 2
  %22 = load i64, ptr %memberidx2.i, align 4
  %memberidx3.i = getelementptr inbounds %FloRange, ptr %18, i64 0, i32 3
  %23 = load i64, ptr %memberidx3.i, align 4
  store i64 %20, ptr %19, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %19, i64 0, i32 1
  store i64 %21, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %19, i64 0, i32 2
  store i64 %22, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %19, i64 0, i32 3
  store i64 %23, ptr %memberidx3.i.i, align 4
  store ptr %19, ptr %3, align 8
  br label %ifend

ifend:                                            ; preds = %1, %Parser_advance.exit
  ret ptr %3
}

define internal fastcc ptr @Parser_parse_unary_expression_pre(ptr %0) unnamed_addr {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %2 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Token, ptr %2, i64 0, i32 1
  %3 = load ptr, ptr %memberidx1, align 8
  %4 = load i64, ptr %2, align 4
  switch i64 %4, label %else35.i.i [
    i64 21, label %ifend
    i64 22, label %Parser_is_unary_op.exit.fold.split
    i64 5, label %Parser_is_unary_op.exit.fold.split27
    i64 35, label %ifend.fold.split
    i64 32, label %if.entry.i58.i
    i64 29, label %if.entry4.i.i
    i64 30, label %if.entry9.i.i
    i64 33, label %if.entry14.i.i
    i64 51, label %if.entry19.i.i
    i64 27, label %if.entry24.i.i
    i64 85, label %if.entry29.i.i
    i64 23, label %if.entry34.i.i
  ]

Parser_is_unary_op.exit.fold.split:               ; preds = %1
  br label %ifend

Parser_is_unary_op.exit.fold.split27:             ; preds = %1
  br label %ifend

common.ret41.sink.split:                          ; preds = %Parser_advance.exit, %Parser_advance.exit.i
  %.sink47 = phi ptr [ %218, %Parser_advance.exit.i ], [ %234, %Parser_advance.exit ]
  %memberidx.i.i.i.i = getelementptr inbounds %StatementNode, ptr %.sink47, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i, align 4
  %memberidx.i.i18.i = getelementptr inbounds %ExpressionNode, ptr %.sink47, i64 0, i32 2
  store i64 9, ptr %memberidx.i.i18.i, align 4
  br label %common.ret41

common.ret41:                                     ; preds = %common.ret41.sink.split, %Parser_parse_lhs_expression_allow_call.exit
  %common.ret41.op = phi ptr [ %expression.1.i, %Parser_parse_lhs_expression_allow_call.exit ], [ %.sink47, %common.ret41.sink.split ]
  ret ptr %common.ret41.op

if.entry.i58.i:                                   ; preds = %1
  %5 = tail call fastcc ptr @Parser_parse_string(ptr nonnull %0)
  br label %Parser_parse_atom.exit.i

if.entry4.i.i:                                    ; preds = %1
  %6 = tail call ptr @malloc(i32 32)
  %7 = load ptr, ptr %memberidx, align 8
  %8 = load i64, ptr %7, align 4
  %9 = icmp eq i64 %8, 29
  br i1 %9, label %if.entry.i.i62.i, label %else.i.i70.i

if.entry.i.i62.i:                                 ; preds = %if.entry4.i.i
  %memberidx.i.i.i60.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %10 = load i64, ptr %memberidx.i.i.i60.i, align 4
  %11 = load ptr, ptr %0, align 8
  %memberidx2.i.i.i61.i = getelementptr inbounds %Array_Token_, ptr %11, i64 0, i32 2
  %12 = load i64, ptr %memberidx2.i.i.i61.i, align 4
  %13 = icmp slt i64 %10, %12
  br i1 %13, label %if.entry.i.i.i66.i, label %Parser_eat.exit.i73.i

if.entry.i.i.i66.i:                               ; preds = %if.entry.i.i62.i
  %14 = add nsw i64 %10, 1
  store i64 %14, ptr %memberidx.i.i.i60.i, align 4
  %memberidx.i.i.i.i64.i = getelementptr inbounds %Array_Token_, ptr %11, i64 0, i32 1
  %15 = load ptr, ptr %memberidx.i.i.i.i64.i, align 8
  %ptridx.i.i.i.i65.i = getelementptr inbounds ptr, ptr %15, i64 %14
  %16 = load ptr, ptr %ptridx.i.i.i.i65.i, align 8
  store ptr %16, ptr %memberidx, align 8
  br label %Parser_eat.exit.i73.i

else.i.i70.i:                                     ; preds = %if.entry4.i.i
  %17 = tail call ptr @malloc(i32 16)
  %memberidx35.i.i68.i = getelementptr inbounds %Token, ptr %7, i64 0, i32 1
  %18 = load ptr, ptr %memberidx35.i.i68.i, align 8
  store i64 44, ptr %17, align 4
  %memberidx1.i82.i.i69.i = getelementptr inbounds %Token, ptr %17, i64 0, i32 1
  store ptr %18, ptr %memberidx1.i82.i.i69.i, align 8
  br label %Parser_eat.exit.i73.i

Parser_eat.exit.i73.i:                            ; preds = %else.i.i70.i, %if.entry.i.i.i66.i, %if.entry.i.i62.i
  %common.ret.op.i.i71.i = phi ptr [ %17, %else.i.i70.i ], [ %7, %if.entry.i.i.i66.i ], [ %7, %if.entry.i.i62.i ]
  %memberidx.i58.i.i = getelementptr inbounds %Token, ptr %common.ret.op.i.i71.i, i64 0, i32 1
  %19 = load ptr, ptr %memberidx.i58.i.i, align 8
  store ptr %19, ptr %6, align 8
  %memberidx.i.i.i59.i.i = getelementptr inbounds %StatementNode, ptr %6, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i59.i.i, align 4
  %memberidx.i.i60.i.i = getelementptr inbounds %ExpressionNode, ptr %6, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i60.i.i, align 4
  %memberidx1.i.i72.i = getelementptr inbounds %IntExpressionNode, ptr %6, i64 0, i32 3
  store ptr %common.ret.op.i.i71.i, ptr %memberidx1.i.i72.i, align 8
  br label %Parser_parse_atom.exit.i

if.entry9.i.i:                                    ; preds = %1
  %20 = tail call ptr @malloc(i32 32)
  %21 = load ptr, ptr %memberidx, align 8
  %22 = load i64, ptr %21, align 4
  %23 = icmp eq i64 %22, 30
  br i1 %23, label %if.entry.i65.i.i, label %else.i71.i.i

if.entry.i65.i.i:                                 ; preds = %if.entry9.i.i
  %memberidx.i.i63.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %24 = load i64, ptr %memberidx.i.i63.i.i, align 4
  %25 = load ptr, ptr %0, align 8
  %memberidx2.i.i64.i.i = getelementptr inbounds %Array_Token_, ptr %25, i64 0, i32 2
  %26 = load i64, ptr %memberidx2.i.i64.i.i, align 4
  %27 = icmp slt i64 %24, %26
  br i1 %27, label %if.entry.i.i69.i.i, label %Parser_eat.exit74.i.i

if.entry.i.i69.i.i:                               ; preds = %if.entry.i65.i.i
  %28 = add nsw i64 %24, 1
  store i64 %28, ptr %memberidx.i.i63.i.i, align 4
  %memberidx.i.i.i67.i.i = getelementptr inbounds %Array_Token_, ptr %25, i64 0, i32 1
  %29 = load ptr, ptr %memberidx.i.i.i67.i.i, align 8
  %ptridx.i.i.i68.i.i = getelementptr inbounds ptr, ptr %29, i64 %28
  %30 = load ptr, ptr %ptridx.i.i.i68.i.i, align 8
  store ptr %30, ptr %memberidx, align 8
  br label %Parser_eat.exit74.i.i

else.i71.i.i:                                     ; preds = %if.entry9.i.i
  %31 = tail call ptr @malloc(i32 16)
  %memberidx35.i72.i.i = getelementptr inbounds %Token, ptr %21, i64 0, i32 1
  %32 = load ptr, ptr %memberidx35.i72.i.i, align 8
  store i64 44, ptr %31, align 4
  %memberidx1.i82.i73.i.i = getelementptr inbounds %Token, ptr %31, i64 0, i32 1
  store ptr %32, ptr %memberidx1.i82.i73.i.i, align 8
  br label %Parser_eat.exit74.i.i

Parser_eat.exit74.i.i:                            ; preds = %else.i71.i.i, %if.entry.i.i69.i.i, %if.entry.i65.i.i
  %common.ret.op.i62.i.i = phi ptr [ %31, %else.i71.i.i ], [ %21, %if.entry.i.i69.i.i ], [ %21, %if.entry.i65.i.i ]
  %memberidx.i75.i.i = getelementptr inbounds %Token, ptr %common.ret.op.i62.i.i, i64 0, i32 1
  %33 = load ptr, ptr %memberidx.i75.i.i, align 8
  store ptr %33, ptr %20, align 8
  %memberidx.i.i.i76.i.i = getelementptr inbounds %StatementNode, ptr %20, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i76.i.i, align 4
  %memberidx.i.i77.i.i = getelementptr inbounds %ExpressionNode, ptr %20, i64 0, i32 2
  store i64 1, ptr %memberidx.i.i77.i.i, align 4
  %memberidx1.i78.i.i = getelementptr inbounds %FloatExpressionNode, ptr %20, i64 0, i32 3
  store ptr %common.ret.op.i62.i.i, ptr %memberidx1.i78.i.i, align 8
  br label %Parser_parse_atom.exit.i

if.entry14.i.i:                                   ; preds = %1
  %34 = tail call ptr @malloc(i32 32)
  %35 = load ptr, ptr %memberidx, align 8
  %36 = load i64, ptr %35, align 4
  %37 = icmp eq i64 %36, 33
  br i1 %37, label %if.entry.i83.i.i, label %else.i89.i.i

if.entry.i83.i.i:                                 ; preds = %if.entry14.i.i
  %memberidx.i.i81.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %38 = load i64, ptr %memberidx.i.i81.i.i, align 4
  %39 = load ptr, ptr %0, align 8
  %memberidx2.i.i82.i.i = getelementptr inbounds %Array_Token_, ptr %39, i64 0, i32 2
  %40 = load i64, ptr %memberidx2.i.i82.i.i, align 4
  %41 = icmp slt i64 %38, %40
  br i1 %41, label %if.entry.i.i87.i.i, label %Parser_eat.exit92.i.i

if.entry.i.i87.i.i:                               ; preds = %if.entry.i83.i.i
  %42 = add nsw i64 %38, 1
  store i64 %42, ptr %memberidx.i.i81.i.i, align 4
  %memberidx.i.i.i85.i.i = getelementptr inbounds %Array_Token_, ptr %39, i64 0, i32 1
  %43 = load ptr, ptr %memberidx.i.i.i85.i.i, align 8
  %ptridx.i.i.i86.i.i = getelementptr inbounds ptr, ptr %43, i64 %42
  %44 = load ptr, ptr %ptridx.i.i.i86.i.i, align 8
  store ptr %44, ptr %memberidx, align 8
  br label %Parser_eat.exit92.i.i

else.i89.i.i:                                     ; preds = %if.entry14.i.i
  %45 = tail call ptr @malloc(i32 16)
  %memberidx35.i90.i.i = getelementptr inbounds %Token, ptr %35, i64 0, i32 1
  %46 = load ptr, ptr %memberidx35.i90.i.i, align 8
  store i64 44, ptr %45, align 4
  %memberidx1.i82.i91.i.i = getelementptr inbounds %Token, ptr %45, i64 0, i32 1
  store ptr %46, ptr %memberidx1.i82.i91.i.i, align 8
  br label %Parser_eat.exit92.i.i

Parser_eat.exit92.i.i:                            ; preds = %else.i89.i.i, %if.entry.i.i87.i.i, %if.entry.i83.i.i
  %common.ret.op.i80.i.i = phi ptr [ %45, %else.i89.i.i ], [ %35, %if.entry.i.i87.i.i ], [ %35, %if.entry.i83.i.i ]
  %memberidx.i93.i.i = getelementptr inbounds %Token, ptr %common.ret.op.i80.i.i, i64 0, i32 1
  %47 = load ptr, ptr %memberidx.i93.i.i, align 8
  store ptr %47, ptr %34, align 8
  %memberidx.i.i.i94.i.i = getelementptr inbounds %StatementNode, ptr %34, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i94.i.i, align 4
  %memberidx.i.i95.i.i = getelementptr inbounds %ExpressionNode, ptr %34, i64 0, i32 2
  store i64 3, ptr %memberidx.i.i95.i.i, align 4
  %memberidx1.i96.i.i = getelementptr inbounds %CharExpressionNode, ptr %34, i64 0, i32 3
  store ptr %common.ret.op.i80.i.i, ptr %memberidx1.i96.i.i, align 8
  br label %Parser_parse_atom.exit.i

if.entry19.i.i:                                   ; preds = %1
  %48 = tail call ptr @malloc(i32 32)
  %49 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 51)
  %memberidx.i97.i.i = getelementptr inbounds %Token, ptr %49, i64 0, i32 1
  %50 = load ptr, ptr %memberidx.i97.i.i, align 8
  store ptr %50, ptr %48, align 8
  %memberidx.i.i.i98.i.i = getelementptr inbounds %StatementNode, ptr %48, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i98.i.i, align 4
  %memberidx.i.i99.i.i = getelementptr inbounds %ExpressionNode, ptr %48, i64 0, i32 2
  store i64 7, ptr %memberidx.i.i99.i.i, align 4
  %memberidx1.i100.i.i = getelementptr inbounds %VarAccessExpressionNode, ptr %48, i64 0, i32 3
  store ptr %49, ptr %memberidx1.i100.i.i, align 8
  br label %Parser_parse_atom.exit.i

if.entry24.i.i:                                   ; preds = %1
  %51 = tail call ptr @malloc(i32 32)
  %52 = load ptr, ptr %memberidx, align 8
  %memberidx1.i104.i = getelementptr inbounds %Token, ptr %52, i64 0, i32 1
  %53 = load ptr, ptr %memberidx1.i104.i, align 8
  store ptr %53, ptr %51, align 8
  %memberidx.i.i.i.i105.i = getelementptr inbounds %StatementNode, ptr %51, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i105.i, align 4
  %memberidx.i.i.i106.i = getelementptr inbounds %ExpressionNode, ptr %51, i64 0, i32 2
  store i64 6, ptr %memberidx.i.i.i106.i, align 4
  %memberidx.i.i107.i = getelementptr inbounds %ArrayExpressionNode, ptr %51, i64 0, i32 3
  %54 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ExpressionNode_, ptr %54, align 8
  %memberidx.i3.i.i.i = getelementptr inbounds %Array_ExpressionNode_, ptr %54, i64 0, i32 2
  store i64 0, ptr %memberidx.i3.i.i.i, align 4
  %memberidx1.i.i.i108.i = getelementptr inbounds %Array_ExpressionNode_, ptr %54, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i108.i, align 4
  %memberidx2.i.i.i109.i = getelementptr inbounds %Array_ExpressionNode_, ptr %54, i64 0, i32 1
  %55 = tail call ptr @malloc(i32 64)
  store ptr %55, ptr %memberidx2.i.i.i109.i, align 8
  store i64 0, ptr %memberidx.i3.i.i.i, align 4
  store ptr %54, ptr %memberidx.i.i107.i, align 8
  %memberidx.i15.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %56 = load i64, ptr %memberidx.i15.i.i, align 4
  %57 = load ptr, ptr %0, align 8
  %memberidx2.i16.i.i = getelementptr inbounds %Array_Token_, ptr %57, i64 0, i32 2
  %58 = load i64, ptr %memberidx2.i16.i.i, align 4
  %59 = icmp slt i64 %56, %58
  br i1 %59, label %if.entry.i.i113.i, label %if.entry24.i.i.Parser_advance.exit.i115.i_crit_edge

if.entry24.i.i.Parser_advance.exit.i115.i_crit_edge: ; preds = %if.entry24.i.i
  %.pre = load ptr, ptr %memberidx, align 8
  br label %Parser_advance.exit.i115.i

if.entry.i.i113.i:                                ; preds = %if.entry24.i.i
  %60 = add nsw i64 %56, 1
  store i64 %60, ptr %memberidx.i15.i.i, align 4
  %memberidx.i.i17.i.i = getelementptr inbounds %Array_Token_, ptr %57, i64 0, i32 1
  %61 = load ptr, ptr %memberidx.i.i17.i.i, align 8
  %ptridx.i.i.i112.i = getelementptr inbounds ptr, ptr %61, i64 %60
  %62 = load ptr, ptr %ptridx.i.i.i112.i, align 8
  store ptr %62, ptr %memberidx, align 8
  br label %Parser_advance.exit.i115.i

Parser_advance.exit.i115.i:                       ; preds = %if.entry24.i.i.Parser_advance.exit.i115.i_crit_edge, %if.entry.i.i113.i
  %63 = phi ptr [ %.pre, %if.entry24.i.i.Parser_advance.exit.i115.i_crit_edge ], [ %62, %if.entry.i.i113.i ]
  %64 = load i64, ptr %63, align 4
  %.not.i114.i = icmp eq i64 %64, 28
  br i1 %.not.i114.i, label %if.entry.i21.i.i, label %ifend.i.i

ifend.i.i:                                        ; preds = %Parser_advance.exit.i115.i
  tail call fastcc void @Parser_parse_expression_list(ptr nonnull %0, ptr nonnull %54)
  %.pre42 = load ptr, ptr %memberidx, align 8
  %.pre43 = load i64, ptr %.pre42, align 4
  %phi.cmp = icmp eq i64 %.pre43, 28
  br i1 %phi.cmp, label %if.entry.i21.i.i, label %else.i.i125.i

if.entry.i21.i.i:                                 ; preds = %Parser_advance.exit.i115.i, %ifend.i.i
  %65 = phi ptr [ %.pre42, %ifend.i.i ], [ %63, %Parser_advance.exit.i115.i ]
  %66 = load i64, ptr %memberidx.i15.i.i, align 4
  %67 = load ptr, ptr %0, align 8
  %memberidx2.i.i20.i.i = getelementptr inbounds %Array_Token_, ptr %67, i64 0, i32 2
  %68 = load i64, ptr %memberidx2.i.i20.i.i, align 4
  %69 = icmp slt i64 %66, %68
  br i1 %69, label %if.entry.i.i.i122.i, label %Parser_parse_array_expression.exit.i

if.entry.i.i.i122.i:                              ; preds = %if.entry.i21.i.i
  %70 = add nsw i64 %66, 1
  store i64 %70, ptr %memberidx.i15.i.i, align 4
  %memberidx.i.i.i22.i.i = getelementptr inbounds %Array_Token_, ptr %67, i64 0, i32 1
  %71 = load ptr, ptr %memberidx.i.i.i22.i.i, align 8
  %ptridx.i.i.i.i121.i = getelementptr inbounds ptr, ptr %71, i64 %70
  %72 = load ptr, ptr %ptridx.i.i.i.i121.i, align 8
  store ptr %72, ptr %memberidx, align 8
  br label %Parser_parse_array_expression.exit.i

else.i.i125.i:                                    ; preds = %ifend.i.i
  %73 = tail call ptr @malloc(i32 16)
  %memberidx35.i.i123.i = getelementptr inbounds %Token, ptr %.pre42, i64 0, i32 1
  %74 = load ptr, ptr %memberidx35.i.i123.i, align 8
  store i64 44, ptr %73, align 4
  %memberidx1.i82.i.i124.i = getelementptr inbounds %Token, ptr %73, i64 0, i32 1
  store ptr %74, ptr %memberidx1.i82.i.i124.i, align 8
  br label %Parser_parse_array_expression.exit.i

Parser_parse_array_expression.exit.i:             ; preds = %else.i.i125.i, %if.entry.i.i.i122.i, %if.entry.i21.i.i
  %common.ret.op.i.i.i = phi ptr [ %73, %else.i.i125.i ], [ %65, %if.entry.i.i.i122.i ], [ %65, %if.entry.i21.i.i ]
  %memberidx7.i126.i = getelementptr inbounds %Token, ptr %common.ret.op.i.i.i, i64 0, i32 1
  %75 = load ptr, ptr %memberidx7.i126.i, align 8
  %76 = tail call ptr @malloc(i32 32)
  %77 = load i64, ptr %53, align 4
  %memberidx1.i.i127.i = getelementptr inbounds %FloRange, ptr %75, i64 0, i32 1
  %78 = load i64, ptr %memberidx1.i.i127.i, align 4
  %memberidx2.i23.i.i = getelementptr inbounds %FloRange, ptr %53, i64 0, i32 2
  %79 = load i64, ptr %memberidx2.i23.i.i, align 4
  %memberidx3.i24.i.i = getelementptr inbounds %FloRange, ptr %75, i64 0, i32 3
  %80 = load i64, ptr %memberidx3.i24.i.i, align 4
  store i64 %77, ptr %76, align 4
  %memberidx1.i.i25.i.i = getelementptr inbounds %FloRange, ptr %76, i64 0, i32 1
  store i64 %78, ptr %memberidx1.i.i25.i.i, align 4
  %memberidx2.i.i26.i.i = getelementptr inbounds %FloRange, ptr %76, i64 0, i32 2
  store i64 %79, ptr %memberidx2.i.i26.i.i, align 4
  %memberidx3.i.i27.i.i = getelementptr inbounds %FloRange, ptr %76, i64 0, i32 3
  store i64 %80, ptr %memberidx3.i.i27.i.i, align 4
  store ptr %76, ptr %51, align 8
  br label %Parser_parse_atom.exit.i

if.entry29.i.i:                                   ; preds = %1
  %memberidx.i.i87.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %81 = load i64, ptr %memberidx.i.i87.i, align 4
  %82 = load ptr, ptr %0, align 8
  %memberidx2.i.i88.i = getelementptr inbounds %Array_Token_, ptr %82, i64 0, i32 2
  %83 = load i64, ptr %memberidx2.i.i88.i, align 4
  %84 = icmp slt i64 %81, %83
  br i1 %84, label %if.entry.i.i92.i, label %Parser_advance.exit.i97.i

if.entry.i.i92.i:                                 ; preds = %if.entry29.i.i
  %85 = add nsw i64 %81, 1
  store i64 %85, ptr %memberidx.i.i87.i, align 4
  %memberidx.i.i.i90.i = getelementptr inbounds %Array_Token_, ptr %82, i64 0, i32 1
  %86 = load ptr, ptr %memberidx.i.i.i90.i, align 8
  %ptridx.i.i.i91.i = getelementptr inbounds ptr, ptr %86, i64 %85
  %87 = load ptr, ptr %ptridx.i.i.i91.i, align 8
  store ptr %87, ptr %memberidx, align 8
  br label %Parser_advance.exit.i97.i

Parser_advance.exit.i97.i:                        ; preds = %if.entry.i.i92.i, %if.entry29.i.i
  %88 = tail call ptr @malloc(i32 41)
  %89 = tail call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  %memberidx.i18.i.i = getelementptr inbounds %NewExpressionNode, ptr %88, i64 0, i32 3
  store ptr %89, ptr %memberidx.i18.i.i, align 8
  %memberidx1.i.i93.i = getelementptr inbounds %NewExpressionNode, ptr %88, i64 0, i32 4
  store i1 true, ptr %memberidx1.i.i93.i, align 1
  store ptr %3, ptr %88, align 8
  %memberidx.i.i.i.i94.i = getelementptr inbounds %StatementNode, ptr %88, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i94.i, align 4
  %memberidx.i.i19.i.i = getelementptr inbounds %ExpressionNode, ptr %88, i64 0, i32 2
  store i64 11, ptr %memberidx.i.i19.i.i, align 4
  %memberidx2.i20.i.i = getelementptr inbounds %NewExpressionNode, ptr %88, i64 0, i32 5
  %90 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ExpressionNode_, ptr %90, align 8
  %memberidx.i7.i.i.i = getelementptr inbounds %Array_ExpressionNode_, ptr %90, i64 0, i32 2
  store i64 0, ptr %memberidx.i7.i.i.i, align 4
  %memberidx1.i.i.i95.i = getelementptr inbounds %Array_ExpressionNode_, ptr %90, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i95.i, align 4
  %memberidx2.i.i.i96.i = getelementptr inbounds %Array_ExpressionNode_, ptr %90, i64 0, i32 1
  %91 = tail call ptr @malloc(i32 64)
  store ptr %91, ptr %memberidx2.i.i.i96.i, align 8
  store i64 0, ptr %memberidx.i7.i.i.i, align 4
  store ptr %90, ptr %memberidx2.i20.i.i, align 8
  %92 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 23)
  %memberidx2.i22.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %93 = load ptr, ptr %memberidx2.i22.i.i, align 8
  %memberidx3.i23.i.i = getelementptr inbounds %Array_FloError_, ptr %93, i64 0, i32 2
  %94 = load i64, ptr %memberidx3.i23.i.i, align 4
  %.fr = freeze i64 %94
  %95 = icmp eq i64 %.fr, 0
  br i1 %95, label %switch.early.test.i.i, label %Parser_parse_new_expression.exit.i

switch.early.test.i.i:                            ; preds = %Parser_advance.exit.i97.i
  %96 = load ptr, ptr %memberidx, align 8
  %97 = load i64, ptr %96, align 4
  switch i64 %97, label %if.entry.i99.i [
    i64 44, label %Parser_parse_new_expression.exit.i
    i64 24, label %Parser_parse_new_expression.exit.i
  ]

if.entry.i99.i:                                   ; preds = %switch.early.test.i.i
  tail call fastcc void @Parser_parse_expression_list(ptr nonnull %0, ptr nonnull %90)
  br label %Parser_parse_new_expression.exit.i

Parser_parse_new_expression.exit.i:               ; preds = %if.entry.i99.i, %switch.early.test.i.i, %switch.early.test.i.i, %Parser_advance.exit.i97.i
  %98 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 24)
  %memberidx7.i100.i = getelementptr inbounds %Token, ptr %98, i64 0, i32 1
  %99 = load ptr, ptr %memberidx7.i100.i, align 8
  %100 = tail call ptr @malloc(i32 32)
  %101 = load i64, ptr %3, align 4
  %memberidx1.i24.i.i = getelementptr inbounds %FloRange, ptr %99, i64 0, i32 1
  %102 = load i64, ptr %memberidx1.i24.i.i, align 4
  %memberidx2.i25.i.i = getelementptr inbounds %FloRange, ptr %3, i64 0, i32 2
  %103 = load i64, ptr %memberidx2.i25.i.i, align 4
  %memberidx3.i26.i.i = getelementptr inbounds %FloRange, ptr %99, i64 0, i32 3
  %104 = load i64, ptr %memberidx3.i26.i.i, align 4
  store i64 %101, ptr %100, align 4
  %memberidx1.i.i27.i.i = getelementptr inbounds %FloRange, ptr %100, i64 0, i32 1
  store i64 %102, ptr %memberidx1.i.i27.i.i, align 4
  %memberidx2.i.i28.i101.i = getelementptr inbounds %FloRange, ptr %100, i64 0, i32 2
  store i64 %103, ptr %memberidx2.i.i28.i101.i, align 4
  %memberidx3.i.i.i102.i = getelementptr inbounds %FloRange, ptr %100, i64 0, i32 3
  store i64 %104, ptr %memberidx3.i.i.i102.i, align 4
  store ptr %100, ptr %88, align 8
  br label %Parser_parse_atom.exit.i

if.entry34.i.i:                                   ; preds = %1
  %memberidx.i101.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %105 = load i64, ptr %memberidx.i101.i.i, align 4
  %106 = load ptr, ptr %0, align 8
  %memberidx2.i.i74.i = getelementptr inbounds %Array_Token_, ptr %106, i64 0, i32 2
  %107 = load i64, ptr %memberidx2.i.i74.i, align 4
  %108 = icmp slt i64 %105, %107
  br i1 %108, label %if.entry.i103.i.i, label %Parser_advance.exit.i.i

if.entry.i103.i.i:                                ; preds = %if.entry34.i.i
  %109 = add nsw i64 %105, 1
  store i64 %109, ptr %memberidx.i101.i.i, align 4
  %memberidx.i.i102.i.i = getelementptr inbounds %Array_Token_, ptr %106, i64 0, i32 1
  %110 = load ptr, ptr %memberidx.i.i102.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %110, i64 %109
  %111 = load ptr, ptr %ptridx.i.i.i.i, align 8
  store ptr %111, ptr %memberidx, align 8
  br label %Parser_advance.exit.i.i

Parser_advance.exit.i.i:                          ; preds = %if.entry.i103.i.i, %if.entry34.i.i
  %112 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %113 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 24)
  br label %Parser_parse_atom.exit.i

else35.i.i:                                       ; preds = %1
  %114 = tail call ptr @malloc(i32 224)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(28) %114, ptr noundef nonnull align 8 dereferenceable(28) @132, i64 28, i1 false)
  %115 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %115, align 8
  %memberidx.i.i104.i.i = getelementptr inbounds %string, ptr %115, i64 0, i32 1
  store ptr %114, ptr %memberidx.i.i104.i.i, align 8
  %memberidx1.i.i.i76.i = getelementptr inbounds %string, ptr %115, i64 0, i32 2
  store i64 28, ptr %memberidx1.i.i.i76.i, align 4
  %memberidx2.i.i105.i.i = getelementptr inbounds %string, ptr %115, i64 0, i32 3
  store i64 28, ptr %memberidx2.i.i105.i.i, align 4
  %memberidx.i106.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %116 = load ptr, ptr %memberidx.i106.i.i, align 8
  %117 = tail call ptr @malloc(i32 24)
  %118 = load ptr, ptr %memberidx, align 8
  %memberidx2.i108.i.i = getelementptr inbounds %Token, ptr %118, i64 0, i32 1
  %119 = load ptr, ptr %memberidx2.i108.i.i, align 8
  store i64 2, ptr %117, align 4
  %memberidx1.i.i109.i.i = getelementptr inbounds %FloError, ptr %117, i64 0, i32 2
  store ptr %119, ptr %memberidx1.i.i109.i.i, align 8
  %memberidx2.i.i110.i.i = getelementptr inbounds %FloError, ptr %117, i64 0, i32 1
  store ptr %115, ptr %memberidx2.i.i110.i.i, align 8
  %memberidx.i.i111.i.i = getelementptr inbounds %Array_FloError_, ptr %116, i64 0, i32 2
  %120 = load i64, ptr %memberidx.i.i111.i.i, align 4
  %memberidx1.i4.i.i.i = getelementptr inbounds %Array_FloError_, ptr %116, i64 0, i32 3
  %121 = load i64, ptr %memberidx1.i4.i.i.i, align 4
  %.not.i.i.i.i = icmp slt i64 %120, %121
  br i1 %.not.i.i.i.i, label %else35.i.i.Parser_error.exit.i.i_crit_edge, label %if.entry.i.i113.i.i

else35.i.i.Parser_error.exit.i.i_crit_edge:       ; preds = %else35.i.i
  %memberidx4.i.i.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %116, i64 0, i32 1
  %.pre45 = load ptr, ptr %memberidx4.i.i.i.i.phi.trans.insert, align 8
  br label %Parser_error.exit.i.i

if.entry.i.i113.i.i:                              ; preds = %else35.i.i
  %122 = shl i64 %121, 1
  store i64 %122, ptr %memberidx1.i4.i.i.i, align 4
  %memberidx2.i.i.i.i.i = getelementptr inbounds %Array_FloError_, ptr %116, i64 0, i32 1
  %123 = load ptr, ptr %memberidx2.i.i.i.i.i, align 8
  %124 = shl i64 %121, 4
  %125 = tail call ptr @realloc(ptr %123, i64 %124)
  store ptr %125, ptr %memberidx2.i.i.i.i.i, align 8
  %.pre44 = load i64, ptr %memberidx.i.i111.i.i, align 4
  br label %Parser_error.exit.i.i

Parser_error.exit.i.i:                            ; preds = %else35.i.i.Parser_error.exit.i.i_crit_edge, %if.entry.i.i113.i.i
  %126 = phi ptr [ %125, %if.entry.i.i113.i.i ], [ %.pre45, %else35.i.i.Parser_error.exit.i.i_crit_edge ]
  %127 = phi i64 [ %.pre44, %if.entry.i.i113.i.i ], [ %120, %else35.i.i.Parser_error.exit.i.i_crit_edge ]
  %128 = add i64 %127, 1
  store i64 %128, ptr %memberidx.i.i111.i.i, align 4
  %ptridx.i.i114.i.i = getelementptr inbounds ptr, ptr %126, i64 %127
  store ptr %117, ptr %ptridx.i.i114.i.i, align 8
  %129 = tail call ptr @malloc(i32 24)
  %130 = load ptr, ptr %memberidx, align 8
  %memberidx38.i.i = getelementptr inbounds %Token, ptr %130, i64 0, i32 1
  %131 = load ptr, ptr %memberidx38.i.i, align 8
  store ptr %131, ptr %129, align 8
  %memberidx.i.i115.i.i = getelementptr inbounds %StatementNode, ptr %129, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i115.i.i, align 4
  %memberidx.i116.i.i = getelementptr inbounds %ExpressionNode, ptr %129, i64 0, i32 2
  store i64 7, ptr %memberidx.i116.i.i, align 4
  br label %Parser_parse_atom.exit.i

Parser_parse_atom.exit.i:                         ; preds = %Parser_error.exit.i.i, %Parser_advance.exit.i.i, %Parser_parse_new_expression.exit.i, %Parser_parse_array_expression.exit.i, %if.entry19.i.i, %Parser_eat.exit92.i.i, %Parser_eat.exit74.i.i, %Parser_eat.exit.i73.i, %if.entry.i58.i
  %common.ret.op.i.i = phi ptr [ %5, %if.entry.i58.i ], [ %129, %Parser_error.exit.i.i ], [ %6, %Parser_eat.exit.i73.i ], [ %20, %Parser_eat.exit74.i.i ], [ %34, %Parser_eat.exit92.i.i ], [ %48, %if.entry19.i.i ], [ %51, %Parser_parse_array_expression.exit.i ], [ %88, %Parser_parse_new_expression.exit.i ], [ %112, %Parser_advance.exit.i.i ]
  %132 = load ptr, ptr %memberidx, align 8
  %133 = load i64, ptr %132, align 4
  %134 = icmp ne i64 %133, 44
  %memberidx2.i.i29 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %135 = load ptr, ptr %memberidx2.i.i29, align 8
  %memberidx3.i.i30 = getelementptr inbounds %Array_FloError_, ptr %135, i64 0, i32 2
  %136 = load i64, ptr %memberidx3.i.i30, align 4
  %137 = icmp eq i64 %136, 0
  %138 = and i1 %134, %137
  br i1 %138, label %while.entry.i.preheader, label %Parser_parse_lhs_expression_allow_call.exit

while.entry.i.preheader:                          ; preds = %Parser_parse_atom.exit.i
  %memberidx.i.i.i.i34 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry.i

while.entry.i:                                    ; preds = %while.entry.i.preheader, %ifend.i
  %139 = phi i64 [ %158, %ifend.i ], [ %133, %while.entry.i.preheader ]
  %140 = phi ptr [ %157, %ifend.i ], [ %132, %while.entry.i.preheader ]
  %expression.0.i = phi ptr [ %expression.2.i, %ifend.i ], [ %common.ret.op.i.i, %while.entry.i.preheader ]
  switch i64 %139, label %Parser_parse_lhs_expression_allow_call.exit [
    i64 23, label %if.entry.i31
    i64 27, label %if.entry.i.i29.i
    i64 48, label %if.entry.i.i.i
  ]

if.entry.i31:                                     ; preds = %while.entry.i
  %141 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 23)
  %142 = tail call ptr @malloc(i32 40)
  %143 = load ptr, ptr %memberidx, align 8
  %memberidx1.i46.i = getelementptr inbounds %Token, ptr %143, i64 0, i32 1
  %144 = load ptr, ptr %memberidx1.i46.i, align 8
  store ptr %144, ptr %142, align 8
  %memberidx.i.i.i.i47.i = getelementptr inbounds %StatementNode, ptr %142, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i47.i, align 4
  %memberidx.i.i.i48.i = getelementptr inbounds %ExpressionNode, ptr %142, i64 0, i32 2
  store i64 14, ptr %memberidx.i.i.i48.i, align 4
  %memberidx.i.i49.i = getelementptr inbounds %CallExpressionNode, ptr %142, i64 0, i32 3
  store ptr %expression.0.i, ptr %memberidx.i.i49.i, align 8
  %memberidx1.i.i50.i = getelementptr inbounds %CallExpressionNode, ptr %142, i64 0, i32 4
  %145 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ExpressionNode_, ptr %145, align 8
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_ExpressionNode_, ptr %145, i64 0, i32 2
  store i64 0, ptr %memberidx.i5.i.i.i, align 4
  %memberidx1.i.i.i51.i = getelementptr inbounds %Array_ExpressionNode_, ptr %145, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i.i51.i, align 4
  %memberidx2.i.i.i52.i = getelementptr inbounds %Array_ExpressionNode_, ptr %145, i64 0, i32 1
  %146 = tail call ptr @malloc(i32 64)
  store ptr %146, ptr %memberidx2.i.i.i52.i, align 8
  store i64 0, ptr %memberidx.i5.i.i.i, align 4
  store ptr %145, ptr %memberidx1.i.i50.i, align 8
  %147 = load ptr, ptr %memberidx, align 8
  %148 = load i64, ptr %147, align 4
  %.not.i.i = icmp eq i64 %148, 24
  br i1 %.not.i.i, label %Parser_parse_call_expression.exit.i, label %if.entry.i.i32

if.entry.i.i32:                                   ; preds = %if.entry.i31
  tail call fastcc void @Parser_parse_expression_list(ptr nonnull %0, ptr nonnull %145)
  br label %Parser_parse_call_expression.exit.i

Parser_parse_call_expression.exit.i:              ; preds = %if.entry.i.i32, %if.entry.i31
  %149 = load ptr, ptr %expression.0.i, align 8
  %150 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 24)
  %memberidx7.i.i = getelementptr inbounds %Token, ptr %150, i64 0, i32 1
  %151 = load ptr, ptr %memberidx7.i.i, align 8
  %152 = tail call ptr @malloc(i32 32)
  %153 = load i64, ptr %149, align 4
  %memberidx1.i15.i.i = getelementptr inbounds %FloRange, ptr %151, i64 0, i32 1
  %154 = load i64, ptr %memberidx1.i15.i.i, align 4
  %memberidx2.i.i55.i = getelementptr inbounds %FloRange, ptr %149, i64 0, i32 2
  %155 = load i64, ptr %memberidx2.i.i55.i, align 4
  %memberidx3.i16.i.i = getelementptr inbounds %FloRange, ptr %151, i64 0, i32 3
  %156 = load i64, ptr %memberidx3.i16.i.i, align 4
  store i64 %153, ptr %152, align 4
  %memberidx1.i.i17.i.i = getelementptr inbounds %FloRange, ptr %152, i64 0, i32 1
  store i64 %154, ptr %memberidx1.i.i17.i.i, align 4
  %memberidx2.i.i18.i.i = getelementptr inbounds %FloRange, ptr %152, i64 0, i32 2
  store i64 %155, ptr %memberidx2.i.i18.i.i, align 4
  %memberidx3.i.i.i56.i = getelementptr inbounds %FloRange, ptr %152, i64 0, i32 3
  store i64 %156, ptr %memberidx3.i.i.i56.i, align 4
  store ptr %152, ptr %142, align 8
  br label %ifend.i

ifend.i:                                          ; preds = %Parser_parse_member_expression.exit.i, %Parser_parse_index_expression.exit.i, %Parser_parse_call_expression.exit.i
  %expression.2.i = phi ptr [ %142, %Parser_parse_call_expression.exit.i ], [ %171, %Parser_parse_index_expression.exit.i ], [ %201, %Parser_parse_member_expression.exit.i ]
  %157 = load ptr, ptr %memberidx, align 8
  %158 = load i64, ptr %157, align 4
  %159 = icmp ne i64 %158, 44
  %160 = load ptr, ptr %memberidx2.i.i29, align 8
  %memberidx3.i25.i = getelementptr inbounds %Array_FloError_, ptr %160, i64 0, i32 2
  %161 = load i64, ptr %memberidx3.i25.i, align 4
  %162 = icmp eq i64 %161, 0
  %163 = and i1 %159, %162
  br i1 %163, label %while.entry.i, label %Parser_parse_lhs_expression_allow_call.exit

if.entry.i.i29.i:                                 ; preds = %while.entry.i
  %164 = load i64, ptr %memberidx.i.i.i.i34, align 4
  %165 = load ptr, ptr %0, align 8
  %memberidx2.i.i.i28.i = getelementptr inbounds %Array_Token_, ptr %165, i64 0, i32 2
  %166 = load i64, ptr %memberidx2.i.i.i28.i, align 4
  %167 = icmp slt i64 %164, %166
  br i1 %167, label %if.entry.i.i.i33.i, label %Parser_eat.exit.i.i

if.entry.i.i.i33.i:                               ; preds = %if.entry.i.i29.i
  %168 = add nsw i64 %164, 1
  store i64 %168, ptr %memberidx.i.i.i.i34, align 4
  %memberidx.i.i.i.i31.i = getelementptr inbounds %Array_Token_, ptr %165, i64 0, i32 1
  %169 = load ptr, ptr %memberidx.i.i.i.i31.i, align 8
  %ptridx.i.i.i.i32.i = getelementptr inbounds ptr, ptr %169, i64 %168
  %170 = load ptr, ptr %ptridx.i.i.i.i32.i, align 8
  store ptr %170, ptr %memberidx, align 8
  br label %Parser_eat.exit.i.i

Parser_eat.exit.i.i:                              ; preds = %if.entry.i.i.i33.i, %if.entry.i.i29.i
  %171 = tail call ptr @malloc(i32 40)
  %172 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %173 = load ptr, ptr %memberidx, align 8
  %memberidx1.i40.i = getelementptr inbounds %Token, ptr %173, i64 0, i32 1
  %174 = load ptr, ptr %memberidx1.i40.i, align 8
  %memberidx.i10.i.i = getelementptr inbounds %ExpressionIndexNode, ptr %171, i64 0, i32 3
  store ptr %expression.0.i, ptr %memberidx.i10.i.i, align 8
  %memberidx1.i.i41.i = getelementptr inbounds %ExpressionIndexNode, ptr %171, i64 0, i32 4
  store ptr %172, ptr %memberidx1.i.i41.i, align 8
  store ptr %174, ptr %171, align 8
  %memberidx.i.i.i11.i.i = getelementptr inbounds %StatementNode, ptr %171, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i11.i.i, align 4
  %memberidx.i.i12.i.i = getelementptr inbounds %ExpressionNode, ptr %171, i64 0, i32 2
  store i64 13, ptr %memberidx.i.i12.i.i, align 4
  %175 = load ptr, ptr %expression.0.i, align 8
  %176 = load i64, ptr %173, align 4
  %177 = icmp eq i64 %176, 28
  br i1 %177, label %if.entry.i17.i.i, label %else.i23.i.i

if.entry.i17.i.i:                                 ; preds = %Parser_eat.exit.i.i
  %178 = load i64, ptr %memberidx.i.i.i.i34, align 4
  %179 = load ptr, ptr %0, align 8
  %memberidx2.i.i16.i.i = getelementptr inbounds %Array_Token_, ptr %179, i64 0, i32 2
  %180 = load i64, ptr %memberidx2.i.i16.i.i, align 4
  %181 = icmp slt i64 %178, %180
  br i1 %181, label %if.entry.i.i21.i.i, label %Parser_parse_index_expression.exit.i

if.entry.i.i21.i.i:                               ; preds = %if.entry.i17.i.i
  %182 = add nsw i64 %178, 1
  store i64 %182, ptr %memberidx.i.i.i.i34, align 4
  %memberidx.i.i.i19.i.i = getelementptr inbounds %Array_Token_, ptr %179, i64 0, i32 1
  %183 = load ptr, ptr %memberidx.i.i.i19.i.i, align 8
  %ptridx.i.i.i20.i.i = getelementptr inbounds ptr, ptr %183, i64 %182
  %184 = load ptr, ptr %ptridx.i.i.i20.i.i, align 8
  store ptr %184, ptr %memberidx, align 8
  br label %Parser_parse_index_expression.exit.i

else.i23.i.i:                                     ; preds = %Parser_eat.exit.i.i
  %185 = tail call ptr @malloc(i32 16)
  %186 = load ptr, ptr %memberidx1.i40.i, align 8
  store i64 44, ptr %185, align 4
  %memberidx1.i82.i25.i.i = getelementptr inbounds %Token, ptr %185, i64 0, i32 1
  store ptr %186, ptr %memberidx1.i82.i25.i.i, align 8
  br label %Parser_parse_index_expression.exit.i

Parser_parse_index_expression.exit.i:             ; preds = %else.i23.i.i, %if.entry.i.i21.i.i, %if.entry.i17.i.i
  %common.ret.op.i14.i.i = phi ptr [ %185, %else.i23.i.i ], [ %173, %if.entry.i.i21.i.i ], [ %173, %if.entry.i17.i.i ]
  %memberidx4.i.i = getelementptr inbounds %Token, ptr %common.ret.op.i14.i.i, i64 0, i32 1
  %187 = load ptr, ptr %memberidx4.i.i, align 8
  %188 = tail call ptr @malloc(i32 32)
  %189 = load i64, ptr %175, align 4
  %memberidx1.i27.i.i = getelementptr inbounds %FloRange, ptr %187, i64 0, i32 1
  %190 = load i64, ptr %memberidx1.i27.i.i, align 4
  %memberidx2.i.i42.i = getelementptr inbounds %FloRange, ptr %175, i64 0, i32 2
  %191 = load i64, ptr %memberidx2.i.i42.i, align 4
  %memberidx3.i.i43.i = getelementptr inbounds %FloRange, ptr %187, i64 0, i32 3
  %192 = load i64, ptr %memberidx3.i.i43.i, align 4
  store i64 %189, ptr %188, align 4
  %memberidx1.i.i.i44.i = getelementptr inbounds %FloRange, ptr %188, i64 0, i32 1
  store i64 %190, ptr %memberidx1.i.i.i44.i, align 4
  %memberidx2.i.i28.i.i = getelementptr inbounds %FloRange, ptr %188, i64 0, i32 2
  store i64 %191, ptr %memberidx2.i.i28.i.i, align 4
  %memberidx3.i.i29.i.i = getelementptr inbounds %FloRange, ptr %188, i64 0, i32 3
  store i64 %192, ptr %memberidx3.i.i29.i.i, align 4
  store ptr %188, ptr %171, align 8
  br label %ifend.i

if.entry.i.i.i:                                   ; preds = %while.entry.i
  %193 = load i64, ptr %memberidx.i.i.i.i34, align 4
  %194 = load ptr, ptr %0, align 8
  %memberidx2.i.i.i.i = getelementptr inbounds %Array_Token_, ptr %194, i64 0, i32 2
  %195 = load i64, ptr %memberidx2.i.i.i.i, align 4
  %196 = icmp slt i64 %193, %195
  br i1 %196, label %if.entry.i.i.i.i, label %Parser_parse_member_expression.exit.i

if.entry.i.i.i.i:                                 ; preds = %if.entry.i.i.i
  %197 = add nsw i64 %193, 1
  store i64 %197, ptr %memberidx.i.i.i.i34, align 4
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Token_, ptr %194, i64 0, i32 1
  %198 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %198, i64 %197
  %199 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  store ptr %199, ptr %memberidx, align 8
  br label %Parser_parse_member_expression.exit.i

Parser_parse_member_expression.exit.i:            ; preds = %if.entry.i.i.i.i, %if.entry.i.i.i
  %200 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 51)
  %201 = tail call ptr @malloc(i32 40)
  %202 = load ptr, ptr %expression.0.i, align 8
  %memberidx1.i.i35 = getelementptr inbounds %Token, ptr %200, i64 0, i32 1
  %203 = load ptr, ptr %memberidx1.i.i35, align 8
  %204 = tail call ptr @malloc(i32 32)
  %205 = load i64, ptr %202, align 4
  %memberidx1.i.i.i36 = getelementptr inbounds %FloRange, ptr %203, i64 0, i32 1
  %206 = load i64, ptr %memberidx1.i.i.i36, align 4
  %memberidx2.i.i.i37 = getelementptr inbounds %FloRange, ptr %202, i64 0, i32 2
  %207 = load i64, ptr %memberidx2.i.i.i37, align 4
  %memberidx3.i.i.i38 = getelementptr inbounds %FloRange, ptr %203, i64 0, i32 3
  %208 = load i64, ptr %memberidx3.i.i.i38, align 4
  store i64 %205, ptr %204, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %FloRange, ptr %204, i64 0, i32 1
  store i64 %206, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i5.i.i = getelementptr inbounds %FloRange, ptr %204, i64 0, i32 2
  store i64 %207, ptr %memberidx2.i.i5.i.i, align 4
  %memberidx3.i.i6.i.i = getelementptr inbounds %FloRange, ptr %204, i64 0, i32 3
  store i64 %208, ptr %memberidx3.i.i6.i.i, align 4
  store ptr %204, ptr %201, align 8
  %memberidx.i.i.i7.i.i = getelementptr inbounds %StatementNode, ptr %201, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i7.i.i, align 4
  %memberidx.i.i8.i.i = getelementptr inbounds %ExpressionNode, ptr %201, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i8.i.i, align 4
  %memberidx.i9.i.i = getelementptr inbounds %MemberExpressionNode, ptr %201, i64 0, i32 3
  store ptr %expression.0.i, ptr %memberidx.i9.i.i, align 8
  %memberidx1.i10.i.i = getelementptr inbounds %MemberExpressionNode, ptr %201, i64 0, i32 4
  store ptr %200, ptr %memberidx1.i10.i.i, align 8
  br label %ifend.i

Parser_parse_lhs_expression_allow_call.exit:      ; preds = %while.entry.i, %ifend.i, %Parser_parse_atom.exit.i
  %209 = phi i64 [ %133, %Parser_parse_atom.exit.i ], [ %139, %while.entry.i ], [ %158, %ifend.i ]
  %210 = phi ptr [ %132, %Parser_parse_atom.exit.i ], [ %140, %while.entry.i ], [ %157, %ifend.i ]
  %expression.1.i = phi ptr [ %common.ret.op.i.i, %Parser_parse_atom.exit.i ], [ %expression.0.i, %while.entry.i ], [ %expression.2.i, %ifend.i ]
  switch i64 %209, label %common.ret41 [
    i64 21, label %ifend.i20
    i64 22, label %if.entry3.i
  ]

ifend.i20:                                        ; preds = %Parser_parse_lhs_expression_allow_call.exit, %if.entry3.i
  %op.0.i = phi i64 [ 4, %if.entry3.i ], [ 3, %Parser_parse_lhs_expression_allow_call.exit ]
  %memberidx.i.i18 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %211 = load i64, ptr %memberidx.i.i18, align 4
  %212 = load ptr, ptr %0, align 8
  %memberidx2.i.i19 = getelementptr inbounds %Array_Token_, ptr %212, i64 0, i32 2
  %213 = load i64, ptr %memberidx2.i.i19, align 4
  %214 = icmp slt i64 %211, %213
  br i1 %214, label %if.entry.i.i, label %Parser_advance.exit.i

if.entry.i.i:                                     ; preds = %ifend.i20
  %215 = add nsw i64 %211, 1
  store i64 %215, ptr %memberidx.i.i18, align 4
  %memberidx.i.i.i22 = getelementptr inbounds %Array_Token_, ptr %212, i64 0, i32 1
  %216 = load ptr, ptr %memberidx.i.i.i22, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %216, i64 %215
  %217 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %217, ptr %memberidx, align 8
  br label %Parser_advance.exit.i

Parser_advance.exit.i:                            ; preds = %if.entry.i.i, %ifend.i20
  %218 = tail call ptr @malloc(i32 40)
  %219 = load ptr, ptr %expression.1.i, align 8
  %memberidx7.i = getelementptr inbounds %Token, ptr %210, i64 0, i32 1
  %220 = load ptr, ptr %memberidx7.i, align 8
  %221 = tail call ptr @malloc(i32 32)
  %222 = load i64, ptr %219, align 4
  %memberidx1.i.i23 = getelementptr inbounds %FloRange, ptr %220, i64 0, i32 1
  %223 = load i64, ptr %memberidx1.i.i23, align 4
  %memberidx2.i14.i = getelementptr inbounds %FloRange, ptr %219, i64 0, i32 2
  %224 = load i64, ptr %memberidx2.i14.i, align 4
  %memberidx3.i15.i = getelementptr inbounds %FloRange, ptr %220, i64 0, i32 3
  %225 = load i64, ptr %memberidx3.i15.i, align 4
  store i64 %222, ptr %221, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %221, i64 0, i32 1
  store i64 %223, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %221, i64 0, i32 2
  store i64 %224, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %221, i64 0, i32 3
  store i64 %225, ptr %memberidx3.i.i.i, align 4
  %memberidx.i16.i = getelementptr inbounds %UnaryExpressionNode, ptr %218, i64 0, i32 3
  store i64 %op.0.i, ptr %memberidx.i16.i, align 4
  %memberidx1.i17.i = getelementptr inbounds %UnaryExpressionNode, ptr %218, i64 0, i32 4
  store ptr %expression.1.i, ptr %memberidx1.i17.i, align 8
  store ptr %221, ptr %218, align 8
  br label %common.ret41.sink.split

if.entry3.i:                                      ; preds = %Parser_parse_lhs_expression_allow_call.exit
  br label %ifend.i20

ifend.fold.split:                                 ; preds = %1
  br label %ifend

ifend:                                            ; preds = %1, %ifend.fold.split, %Parser_is_unary_op.exit.fold.split, %Parser_is_unary_op.exit.fold.split27
  %common.ret.op.i.ph = phi i64 [ 5, %Parser_is_unary_op.exit.fold.split27 ], [ 2, %Parser_is_unary_op.exit.fold.split ], [ 1, %1 ], [ 7, %ifend.fold.split ]
  %memberidx.i8 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %226 = load i64, ptr %memberidx.i8, align 4
  %227 = load ptr, ptr %0, align 8
  %memberidx2.i = getelementptr inbounds %Array_Token_, ptr %227, i64 0, i32 2
  %228 = load i64, ptr %memberidx2.i, align 4
  %229 = icmp slt i64 %226, %228
  br i1 %229, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %ifend
  %230 = add nsw i64 %226, 1
  store i64 %230, ptr %memberidx.i8, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %227, i64 0, i32 1
  %231 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %231, i64 %230
  %232 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %232, ptr %memberidx, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %ifend, %if.entry.i
  %233 = tail call fastcc ptr @Parser_parse_unary_expression_pre(ptr nonnull %0)
  %234 = tail call ptr @malloc(i32 40)
  %235 = load ptr, ptr %233, align 8
  %236 = tail call ptr @malloc(i32 32)
  %237 = load i64, ptr %3, align 4
  %memberidx1.i = getelementptr inbounds %FloRange, ptr %235, i64 0, i32 1
  %238 = load i64, ptr %memberidx1.i, align 4
  %memberidx2.i10 = getelementptr inbounds %FloRange, ptr %3, i64 0, i32 2
  %239 = load i64, ptr %memberidx2.i10, align 4
  %memberidx3.i11 = getelementptr inbounds %FloRange, ptr %235, i64 0, i32 3
  %240 = load i64, ptr %memberidx3.i11, align 4
  store i64 %237, ptr %236, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %236, i64 0, i32 1
  store i64 %238, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %236, i64 0, i32 2
  store i64 %239, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %236, i64 0, i32 3
  store i64 %240, ptr %memberidx3.i.i, align 4
  %memberidx.i12 = getelementptr inbounds %UnaryExpressionNode, ptr %234, i64 0, i32 3
  store i64 %common.ret.op.i.ph, ptr %memberidx.i12, align 4
  %memberidx1.i13 = getelementptr inbounds %UnaryExpressionNode, ptr %234, i64 0, i32 4
  store ptr %233, ptr %memberidx1.i13, align 8
  store ptr %236, ptr %234, align 8
  br label %common.ret41.sink.split
}

define internal fastcc ptr @Parser_eat(ptr nocapture %0, i64 %1) unnamed_addr {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %4 = load i64, ptr %3, align 4
  %5 = icmp eq i64 %4, %1
  br i1 %5, label %if.entry, label %else

common.ret:                                       ; preds = %if.entry.i, %if.entry, %ifend4
  %common.ret.op = phi ptr [ %28, %ifend4 ], [ %3, %if.entry ], [ %3, %if.entry.i ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx.i, align 4
  %7 = load ptr, ptr %0, align 8
  %memberidx2.i = getelementptr inbounds %Array_Token_, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx2.i, align 4
  %9 = icmp slt i64 %6, %8
  br i1 %9, label %if.entry.i, label %common.ret

if.entry.i:                                       ; preds = %if.entry
  %10 = add nsw i64 %6, 1
  store i64 %10, ptr %memberidx.i, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %7, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %11, i64 %10
  %12 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %12, ptr %memberidx, align 8
  br label %common.ret

else:                                             ; preds = %2
  switch i64 %1, label %ifend4 [
    i64 51, label %if.entry2
    i64 36, label %if.entry5
    i64 1, label %if.entry8
    i64 23, label %if.entry11
    i64 24, label %if.entry14
    i64 25, label %if.entry17
    i64 26, label %if.entry20
    i64 3, label %if.entry23
    i64 40, label %if.entry26
    i64 39, label %if.entry29
    i64 43, label %if.entry32
  ]

if.entry2:                                        ; preds = %else
  %13 = tail call ptr @malloc(i32 176)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(22) %13, ptr noundef nonnull align 8 dereferenceable(22) @119, i64 22, i1 false)
  %14 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %14, align 8
  %memberidx.i.i65 = getelementptr inbounds %string, ptr %14, i64 0, i32 1
  store ptr %13, ptr %memberidx.i.i65, align 8
  %memberidx1.i.i66 = getelementptr inbounds %string, ptr %14, i64 0, i32 2
  store i64 22, ptr %memberidx1.i.i66, align 4
  %memberidx2.i.i67 = getelementptr inbounds %string, ptr %14, i64 0, i32 3
  store i64 22, ptr %memberidx2.i.i67, align 4
  %memberidx.i68 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %15 = load ptr, ptr %memberidx.i68, align 8
  %16 = tail call ptr @malloc(i32 24)
  %17 = load ptr, ptr %memberidx, align 8
  %memberidx2.i70 = getelementptr inbounds %Token, ptr %17, i64 0, i32 1
  %18 = load ptr, ptr %memberidx2.i70, align 8
  store i64 2, ptr %16, align 4
  %memberidx1.i.i71 = getelementptr inbounds %FloError, ptr %16, i64 0, i32 2
  store ptr %18, ptr %memberidx1.i.i71, align 8
  %memberidx2.i.i72 = getelementptr inbounds %FloError, ptr %16, i64 0, i32 1
  store ptr %14, ptr %memberidx2.i.i72, align 8
  %memberidx.i.i73 = getelementptr inbounds %Array_FloError_, ptr %15, i64 0, i32 2
  %19 = load i64, ptr %memberidx.i.i73, align 4
  %memberidx1.i4.i74 = getelementptr inbounds %Array_FloError_, ptr %15, i64 0, i32 3
  %20 = load i64, ptr %memberidx1.i4.i74, align 4
  %.not.i.i75 = icmp slt i64 %19, %20
  br i1 %.not.i.i75, label %if.entry2.Parser_error.exit81_crit_edge, label %if.entry.i.i78

if.entry2.Parser_error.exit81_crit_edge:          ; preds = %if.entry2
  %memberidx4.i.i79.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %15, i64 0, i32 1
  %.pre260 = load ptr, ptr %memberidx4.i.i79.phi.trans.insert, align 8
  br label %Parser_error.exit81

if.entry.i.i78:                                   ; preds = %if.entry2
  %21 = shl i64 %20, 1
  store i64 %21, ptr %memberidx1.i4.i74, align 4
  %memberidx2.i.i.i77 = getelementptr inbounds %Array_FloError_, ptr %15, i64 0, i32 1
  %22 = load ptr, ptr %memberidx2.i.i.i77, align 8
  %23 = shl i64 %20, 4
  %24 = tail call ptr @realloc(ptr %22, i64 %23)
  store ptr %24, ptr %memberidx2.i.i.i77, align 8
  %.pre259 = load i64, ptr %memberidx.i.i73, align 4
  br label %Parser_error.exit81

Parser_error.exit81:                              ; preds = %if.entry2.Parser_error.exit81_crit_edge, %if.entry.i.i78
  %25 = phi ptr [ %.pre260, %if.entry2.Parser_error.exit81_crit_edge ], [ %24, %if.entry.i.i78 ]
  %26 = phi i64 [ %19, %if.entry2.Parser_error.exit81_crit_edge ], [ %.pre259, %if.entry.i.i78 ]
  %27 = add i64 %26, 1
  store i64 %27, ptr %memberidx.i.i73, align 4
  %ptridx.i.i80 = getelementptr inbounds ptr, ptr %25, i64 %26
  store ptr %16, ptr %ptridx.i.i80, align 8
  br label %ifend4

ifend4:                                           ; preds = %else, %Parser_error.exit, %Parser_error.exit235, %Parser_error.exit218, %Parser_error.exit201, %Parser_error.exit184, %Parser_error.exit167, %Parser_error.exit150, %Parser_error.exit133, %Parser_error.exit116, %Parser_error.exit99, %Parser_error.exit81
  %28 = tail call ptr @malloc(i32 16)
  %memberidx35 = getelementptr inbounds %Token, ptr %3, i64 0, i32 1
  %29 = load ptr, ptr %memberidx35, align 8
  store i64 44, ptr %28, align 4
  %memberidx1.i82 = getelementptr inbounds %Token, ptr %28, i64 0, i32 1
  store ptr %29, ptr %memberidx1.i82, align 8
  br label %common.ret

if.entry5:                                        ; preds = %else
  %30 = tail call ptr @malloc(i32 96)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %30, ptr noundef nonnull align 8 dereferenceable(12) @120, i64 12, i1 false)
  %31 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %31, align 8
  %memberidx.i.i83 = getelementptr inbounds %string, ptr %31, i64 0, i32 1
  store ptr %30, ptr %memberidx.i.i83, align 8
  %memberidx1.i.i84 = getelementptr inbounds %string, ptr %31, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i84, align 4
  %memberidx2.i.i85 = getelementptr inbounds %string, ptr %31, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i85, align 4
  %memberidx.i86 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %32 = load ptr, ptr %memberidx.i86, align 8
  %33 = tail call ptr @malloc(i32 24)
  %34 = load ptr, ptr %memberidx, align 8
  %memberidx2.i88 = getelementptr inbounds %Token, ptr %34, i64 0, i32 1
  %35 = load ptr, ptr %memberidx2.i88, align 8
  store i64 2, ptr %33, align 4
  %memberidx1.i.i89 = getelementptr inbounds %FloError, ptr %33, i64 0, i32 2
  store ptr %35, ptr %memberidx1.i.i89, align 8
  %memberidx2.i.i90 = getelementptr inbounds %FloError, ptr %33, i64 0, i32 1
  store ptr %31, ptr %memberidx2.i.i90, align 8
  %memberidx.i.i91 = getelementptr inbounds %Array_FloError_, ptr %32, i64 0, i32 2
  %36 = load i64, ptr %memberidx.i.i91, align 4
  %memberidx1.i4.i92 = getelementptr inbounds %Array_FloError_, ptr %32, i64 0, i32 3
  %37 = load i64, ptr %memberidx1.i4.i92, align 4
  %.not.i.i93 = icmp slt i64 %36, %37
  br i1 %.not.i.i93, label %if.entry5.Parser_error.exit99_crit_edge, label %if.entry.i.i96

if.entry5.Parser_error.exit99_crit_edge:          ; preds = %if.entry5
  %memberidx4.i.i97.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %32, i64 0, i32 1
  %.pre258 = load ptr, ptr %memberidx4.i.i97.phi.trans.insert, align 8
  br label %Parser_error.exit99

if.entry.i.i96:                                   ; preds = %if.entry5
  %38 = shl i64 %37, 1
  store i64 %38, ptr %memberidx1.i4.i92, align 4
  %memberidx2.i.i.i95 = getelementptr inbounds %Array_FloError_, ptr %32, i64 0, i32 1
  %39 = load ptr, ptr %memberidx2.i.i.i95, align 8
  %40 = shl i64 %37, 4
  %41 = tail call ptr @realloc(ptr %39, i64 %40)
  store ptr %41, ptr %memberidx2.i.i.i95, align 8
  %.pre257 = load i64, ptr %memberidx.i.i91, align 4
  br label %Parser_error.exit99

Parser_error.exit99:                              ; preds = %if.entry5.Parser_error.exit99_crit_edge, %if.entry.i.i96
  %42 = phi ptr [ %.pre258, %if.entry5.Parser_error.exit99_crit_edge ], [ %41, %if.entry.i.i96 ]
  %43 = phi i64 [ %36, %if.entry5.Parser_error.exit99_crit_edge ], [ %.pre257, %if.entry.i.i96 ]
  %44 = add i64 %43, 1
  store i64 %44, ptr %memberidx.i.i91, align 4
  %ptridx.i.i98 = getelementptr inbounds ptr, ptr %42, i64 %43
  store ptr %33, ptr %ptridx.i.i98, align 8
  br label %ifend4

if.entry8:                                        ; preds = %else
  %45 = tail call ptr @malloc(i32 96)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %45, ptr noundef nonnull align 8 dereferenceable(12) @121, i64 12, i1 false)
  %46 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %46, align 8
  %memberidx.i.i100 = getelementptr inbounds %string, ptr %46, i64 0, i32 1
  store ptr %45, ptr %memberidx.i.i100, align 8
  %memberidx1.i.i101 = getelementptr inbounds %string, ptr %46, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i101, align 4
  %memberidx2.i.i102 = getelementptr inbounds %string, ptr %46, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i102, align 4
  %memberidx.i103 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %47 = load ptr, ptr %memberidx.i103, align 8
  %48 = tail call ptr @malloc(i32 24)
  %49 = load ptr, ptr %memberidx, align 8
  %memberidx2.i105 = getelementptr inbounds %Token, ptr %49, i64 0, i32 1
  %50 = load ptr, ptr %memberidx2.i105, align 8
  store i64 2, ptr %48, align 4
  %memberidx1.i.i106 = getelementptr inbounds %FloError, ptr %48, i64 0, i32 2
  store ptr %50, ptr %memberidx1.i.i106, align 8
  %memberidx2.i.i107 = getelementptr inbounds %FloError, ptr %48, i64 0, i32 1
  store ptr %46, ptr %memberidx2.i.i107, align 8
  %memberidx.i.i108 = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 2
  %51 = load i64, ptr %memberidx.i.i108, align 4
  %memberidx1.i4.i109 = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 3
  %52 = load i64, ptr %memberidx1.i4.i109, align 4
  %.not.i.i110 = icmp slt i64 %51, %52
  br i1 %.not.i.i110, label %if.entry8.Parser_error.exit116_crit_edge, label %if.entry.i.i113

if.entry8.Parser_error.exit116_crit_edge:         ; preds = %if.entry8
  %memberidx4.i.i114.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 1
  %.pre256 = load ptr, ptr %memberidx4.i.i114.phi.trans.insert, align 8
  br label %Parser_error.exit116

if.entry.i.i113:                                  ; preds = %if.entry8
  %53 = shl i64 %52, 1
  store i64 %53, ptr %memberidx1.i4.i109, align 4
  %memberidx2.i.i.i112 = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 1
  %54 = load ptr, ptr %memberidx2.i.i.i112, align 8
  %55 = shl i64 %52, 4
  %56 = tail call ptr @realloc(ptr %54, i64 %55)
  store ptr %56, ptr %memberidx2.i.i.i112, align 8
  %.pre255 = load i64, ptr %memberidx.i.i108, align 4
  br label %Parser_error.exit116

Parser_error.exit116:                             ; preds = %if.entry8.Parser_error.exit116_crit_edge, %if.entry.i.i113
  %57 = phi ptr [ %.pre256, %if.entry8.Parser_error.exit116_crit_edge ], [ %56, %if.entry.i.i113 ]
  %58 = phi i64 [ %51, %if.entry8.Parser_error.exit116_crit_edge ], [ %.pre255, %if.entry.i.i113 ]
  %59 = add i64 %58, 1
  store i64 %59, ptr %memberidx.i.i108, align 4
  %ptridx.i.i115 = getelementptr inbounds ptr, ptr %57, i64 %58
  store ptr %48, ptr %ptridx.i.i115, align 8
  br label %ifend4

if.entry11:                                       ; preds = %else
  %60 = tail call ptr @malloc(i32 96)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %60, ptr noundef nonnull align 8 dereferenceable(12) @122, i64 12, i1 false)
  %61 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %61, align 8
  %memberidx.i.i117 = getelementptr inbounds %string, ptr %61, i64 0, i32 1
  store ptr %60, ptr %memberidx.i.i117, align 8
  %memberidx1.i.i118 = getelementptr inbounds %string, ptr %61, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i118, align 4
  %memberidx2.i.i119 = getelementptr inbounds %string, ptr %61, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i119, align 4
  %memberidx.i120 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %62 = load ptr, ptr %memberidx.i120, align 8
  %63 = tail call ptr @malloc(i32 24)
  %64 = load ptr, ptr %memberidx, align 8
  %memberidx2.i122 = getelementptr inbounds %Token, ptr %64, i64 0, i32 1
  %65 = load ptr, ptr %memberidx2.i122, align 8
  store i64 2, ptr %63, align 4
  %memberidx1.i.i123 = getelementptr inbounds %FloError, ptr %63, i64 0, i32 2
  store ptr %65, ptr %memberidx1.i.i123, align 8
  %memberidx2.i.i124 = getelementptr inbounds %FloError, ptr %63, i64 0, i32 1
  store ptr %61, ptr %memberidx2.i.i124, align 8
  %memberidx.i.i125 = getelementptr inbounds %Array_FloError_, ptr %62, i64 0, i32 2
  %66 = load i64, ptr %memberidx.i.i125, align 4
  %memberidx1.i4.i126 = getelementptr inbounds %Array_FloError_, ptr %62, i64 0, i32 3
  %67 = load i64, ptr %memberidx1.i4.i126, align 4
  %.not.i.i127 = icmp slt i64 %66, %67
  br i1 %.not.i.i127, label %if.entry11.Parser_error.exit133_crit_edge, label %if.entry.i.i130

if.entry11.Parser_error.exit133_crit_edge:        ; preds = %if.entry11
  %memberidx4.i.i131.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %62, i64 0, i32 1
  %.pre254 = load ptr, ptr %memberidx4.i.i131.phi.trans.insert, align 8
  br label %Parser_error.exit133

if.entry.i.i130:                                  ; preds = %if.entry11
  %68 = shl i64 %67, 1
  store i64 %68, ptr %memberidx1.i4.i126, align 4
  %memberidx2.i.i.i129 = getelementptr inbounds %Array_FloError_, ptr %62, i64 0, i32 1
  %69 = load ptr, ptr %memberidx2.i.i.i129, align 8
  %70 = shl i64 %67, 4
  %71 = tail call ptr @realloc(ptr %69, i64 %70)
  store ptr %71, ptr %memberidx2.i.i.i129, align 8
  %.pre253 = load i64, ptr %memberidx.i.i125, align 4
  br label %Parser_error.exit133

Parser_error.exit133:                             ; preds = %if.entry11.Parser_error.exit133_crit_edge, %if.entry.i.i130
  %72 = phi ptr [ %.pre254, %if.entry11.Parser_error.exit133_crit_edge ], [ %71, %if.entry.i.i130 ]
  %73 = phi i64 [ %66, %if.entry11.Parser_error.exit133_crit_edge ], [ %.pre253, %if.entry.i.i130 ]
  %74 = add i64 %73, 1
  store i64 %74, ptr %memberidx.i.i125, align 4
  %ptridx.i.i132 = getelementptr inbounds ptr, ptr %72, i64 %73
  store ptr %63, ptr %ptridx.i.i132, align 8
  br label %ifend4

if.entry14:                                       ; preds = %else
  %75 = tail call ptr @malloc(i32 96)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %75, ptr noundef nonnull align 8 dereferenceable(12) @123, i64 12, i1 false)
  %76 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %76, align 8
  %memberidx.i.i134 = getelementptr inbounds %string, ptr %76, i64 0, i32 1
  store ptr %75, ptr %memberidx.i.i134, align 8
  %memberidx1.i.i135 = getelementptr inbounds %string, ptr %76, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i135, align 4
  %memberidx2.i.i136 = getelementptr inbounds %string, ptr %76, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i136, align 4
  %memberidx.i137 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %77 = load ptr, ptr %memberidx.i137, align 8
  %78 = tail call ptr @malloc(i32 24)
  %79 = load ptr, ptr %memberidx, align 8
  %memberidx2.i139 = getelementptr inbounds %Token, ptr %79, i64 0, i32 1
  %80 = load ptr, ptr %memberidx2.i139, align 8
  store i64 2, ptr %78, align 4
  %memberidx1.i.i140 = getelementptr inbounds %FloError, ptr %78, i64 0, i32 2
  store ptr %80, ptr %memberidx1.i.i140, align 8
  %memberidx2.i.i141 = getelementptr inbounds %FloError, ptr %78, i64 0, i32 1
  store ptr %76, ptr %memberidx2.i.i141, align 8
  %memberidx.i.i142 = getelementptr inbounds %Array_FloError_, ptr %77, i64 0, i32 2
  %81 = load i64, ptr %memberidx.i.i142, align 4
  %memberidx1.i4.i143 = getelementptr inbounds %Array_FloError_, ptr %77, i64 0, i32 3
  %82 = load i64, ptr %memberidx1.i4.i143, align 4
  %.not.i.i144 = icmp slt i64 %81, %82
  br i1 %.not.i.i144, label %if.entry14.Parser_error.exit150_crit_edge, label %if.entry.i.i147

if.entry14.Parser_error.exit150_crit_edge:        ; preds = %if.entry14
  %memberidx4.i.i148.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %77, i64 0, i32 1
  %.pre252 = load ptr, ptr %memberidx4.i.i148.phi.trans.insert, align 8
  br label %Parser_error.exit150

if.entry.i.i147:                                  ; preds = %if.entry14
  %83 = shl i64 %82, 1
  store i64 %83, ptr %memberidx1.i4.i143, align 4
  %memberidx2.i.i.i146 = getelementptr inbounds %Array_FloError_, ptr %77, i64 0, i32 1
  %84 = load ptr, ptr %memberidx2.i.i.i146, align 8
  %85 = shl i64 %82, 4
  %86 = tail call ptr @realloc(ptr %84, i64 %85)
  store ptr %86, ptr %memberidx2.i.i.i146, align 8
  %.pre251 = load i64, ptr %memberidx.i.i142, align 4
  br label %Parser_error.exit150

Parser_error.exit150:                             ; preds = %if.entry14.Parser_error.exit150_crit_edge, %if.entry.i.i147
  %87 = phi ptr [ %.pre252, %if.entry14.Parser_error.exit150_crit_edge ], [ %86, %if.entry.i.i147 ]
  %88 = phi i64 [ %81, %if.entry14.Parser_error.exit150_crit_edge ], [ %.pre251, %if.entry.i.i147 ]
  %89 = add i64 %88, 1
  store i64 %89, ptr %memberidx.i.i142, align 4
  %ptridx.i.i149 = getelementptr inbounds ptr, ptr %87, i64 %88
  store ptr %78, ptr %ptridx.i.i149, align 8
  br label %ifend4

if.entry17:                                       ; preds = %else
  %90 = tail call ptr @malloc(i32 96)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %90, ptr noundef nonnull align 8 dereferenceable(12) @124, i64 12, i1 false)
  %91 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %91, align 8
  %memberidx.i.i151 = getelementptr inbounds %string, ptr %91, i64 0, i32 1
  store ptr %90, ptr %memberidx.i.i151, align 8
  %memberidx1.i.i152 = getelementptr inbounds %string, ptr %91, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i152, align 4
  %memberidx2.i.i153 = getelementptr inbounds %string, ptr %91, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i153, align 4
  %memberidx.i154 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %92 = load ptr, ptr %memberidx.i154, align 8
  %93 = tail call ptr @malloc(i32 24)
  %94 = load ptr, ptr %memberidx, align 8
  %memberidx2.i156 = getelementptr inbounds %Token, ptr %94, i64 0, i32 1
  %95 = load ptr, ptr %memberidx2.i156, align 8
  store i64 2, ptr %93, align 4
  %memberidx1.i.i157 = getelementptr inbounds %FloError, ptr %93, i64 0, i32 2
  store ptr %95, ptr %memberidx1.i.i157, align 8
  %memberidx2.i.i158 = getelementptr inbounds %FloError, ptr %93, i64 0, i32 1
  store ptr %91, ptr %memberidx2.i.i158, align 8
  %memberidx.i.i159 = getelementptr inbounds %Array_FloError_, ptr %92, i64 0, i32 2
  %96 = load i64, ptr %memberidx.i.i159, align 4
  %memberidx1.i4.i160 = getelementptr inbounds %Array_FloError_, ptr %92, i64 0, i32 3
  %97 = load i64, ptr %memberidx1.i4.i160, align 4
  %.not.i.i161 = icmp slt i64 %96, %97
  br i1 %.not.i.i161, label %if.entry17.Parser_error.exit167_crit_edge, label %if.entry.i.i164

if.entry17.Parser_error.exit167_crit_edge:        ; preds = %if.entry17
  %memberidx4.i.i165.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %92, i64 0, i32 1
  %.pre250 = load ptr, ptr %memberidx4.i.i165.phi.trans.insert, align 8
  br label %Parser_error.exit167

if.entry.i.i164:                                  ; preds = %if.entry17
  %98 = shl i64 %97, 1
  store i64 %98, ptr %memberidx1.i4.i160, align 4
  %memberidx2.i.i.i163 = getelementptr inbounds %Array_FloError_, ptr %92, i64 0, i32 1
  %99 = load ptr, ptr %memberidx2.i.i.i163, align 8
  %100 = shl i64 %97, 4
  %101 = tail call ptr @realloc(ptr %99, i64 %100)
  store ptr %101, ptr %memberidx2.i.i.i163, align 8
  %.pre249 = load i64, ptr %memberidx.i.i159, align 4
  br label %Parser_error.exit167

Parser_error.exit167:                             ; preds = %if.entry17.Parser_error.exit167_crit_edge, %if.entry.i.i164
  %102 = phi ptr [ %.pre250, %if.entry17.Parser_error.exit167_crit_edge ], [ %101, %if.entry.i.i164 ]
  %103 = phi i64 [ %96, %if.entry17.Parser_error.exit167_crit_edge ], [ %.pre249, %if.entry.i.i164 ]
  %104 = add i64 %103, 1
  store i64 %104, ptr %memberidx.i.i159, align 4
  %ptridx.i.i166 = getelementptr inbounds ptr, ptr %102, i64 %103
  store ptr %93, ptr %ptridx.i.i166, align 8
  br label %ifend4

if.entry20:                                       ; preds = %else
  %105 = tail call ptr @malloc(i32 96)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %105, ptr noundef nonnull align 8 dereferenceable(12) @125, i64 12, i1 false)
  %106 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %106, align 8
  %memberidx.i.i168 = getelementptr inbounds %string, ptr %106, i64 0, i32 1
  store ptr %105, ptr %memberidx.i.i168, align 8
  %memberidx1.i.i169 = getelementptr inbounds %string, ptr %106, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i169, align 4
  %memberidx2.i.i170 = getelementptr inbounds %string, ptr %106, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i170, align 4
  %memberidx.i171 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %107 = load ptr, ptr %memberidx.i171, align 8
  %108 = tail call ptr @malloc(i32 24)
  %109 = load ptr, ptr %memberidx, align 8
  %memberidx2.i173 = getelementptr inbounds %Token, ptr %109, i64 0, i32 1
  %110 = load ptr, ptr %memberidx2.i173, align 8
  store i64 2, ptr %108, align 4
  %memberidx1.i.i174 = getelementptr inbounds %FloError, ptr %108, i64 0, i32 2
  store ptr %110, ptr %memberidx1.i.i174, align 8
  %memberidx2.i.i175 = getelementptr inbounds %FloError, ptr %108, i64 0, i32 1
  store ptr %106, ptr %memberidx2.i.i175, align 8
  %memberidx.i.i176 = getelementptr inbounds %Array_FloError_, ptr %107, i64 0, i32 2
  %111 = load i64, ptr %memberidx.i.i176, align 4
  %memberidx1.i4.i177 = getelementptr inbounds %Array_FloError_, ptr %107, i64 0, i32 3
  %112 = load i64, ptr %memberidx1.i4.i177, align 4
  %.not.i.i178 = icmp slt i64 %111, %112
  br i1 %.not.i.i178, label %if.entry20.Parser_error.exit184_crit_edge, label %if.entry.i.i181

if.entry20.Parser_error.exit184_crit_edge:        ; preds = %if.entry20
  %memberidx4.i.i182.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %107, i64 0, i32 1
  %.pre248 = load ptr, ptr %memberidx4.i.i182.phi.trans.insert, align 8
  br label %Parser_error.exit184

if.entry.i.i181:                                  ; preds = %if.entry20
  %113 = shl i64 %112, 1
  store i64 %113, ptr %memberidx1.i4.i177, align 4
  %memberidx2.i.i.i180 = getelementptr inbounds %Array_FloError_, ptr %107, i64 0, i32 1
  %114 = load ptr, ptr %memberidx2.i.i.i180, align 8
  %115 = shl i64 %112, 4
  %116 = tail call ptr @realloc(ptr %114, i64 %115)
  store ptr %116, ptr %memberidx2.i.i.i180, align 8
  %.pre247 = load i64, ptr %memberidx.i.i176, align 4
  br label %Parser_error.exit184

Parser_error.exit184:                             ; preds = %if.entry20.Parser_error.exit184_crit_edge, %if.entry.i.i181
  %117 = phi ptr [ %.pre248, %if.entry20.Parser_error.exit184_crit_edge ], [ %116, %if.entry.i.i181 ]
  %118 = phi i64 [ %111, %if.entry20.Parser_error.exit184_crit_edge ], [ %.pre247, %if.entry.i.i181 ]
  %119 = add i64 %118, 1
  store i64 %119, ptr %memberidx.i.i176, align 4
  %ptridx.i.i183 = getelementptr inbounds ptr, ptr %117, i64 %118
  store ptr %108, ptr %ptridx.i.i183, align 8
  br label %ifend4

if.entry23:                                       ; preds = %else
  %120 = tail call ptr @malloc(i32 96)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %120, ptr noundef nonnull align 8 dereferenceable(12) @126, i64 12, i1 false)
  %121 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %121, align 8
  %memberidx.i.i185 = getelementptr inbounds %string, ptr %121, i64 0, i32 1
  store ptr %120, ptr %memberidx.i.i185, align 8
  %memberidx1.i.i186 = getelementptr inbounds %string, ptr %121, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i186, align 4
  %memberidx2.i.i187 = getelementptr inbounds %string, ptr %121, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i187, align 4
  %memberidx.i188 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %122 = load ptr, ptr %memberidx.i188, align 8
  %123 = tail call ptr @malloc(i32 24)
  %124 = load ptr, ptr %memberidx, align 8
  %memberidx2.i190 = getelementptr inbounds %Token, ptr %124, i64 0, i32 1
  %125 = load ptr, ptr %memberidx2.i190, align 8
  store i64 2, ptr %123, align 4
  %memberidx1.i.i191 = getelementptr inbounds %FloError, ptr %123, i64 0, i32 2
  store ptr %125, ptr %memberidx1.i.i191, align 8
  %memberidx2.i.i192 = getelementptr inbounds %FloError, ptr %123, i64 0, i32 1
  store ptr %121, ptr %memberidx2.i.i192, align 8
  %memberidx.i.i193 = getelementptr inbounds %Array_FloError_, ptr %122, i64 0, i32 2
  %126 = load i64, ptr %memberidx.i.i193, align 4
  %memberidx1.i4.i194 = getelementptr inbounds %Array_FloError_, ptr %122, i64 0, i32 3
  %127 = load i64, ptr %memberidx1.i4.i194, align 4
  %.not.i.i195 = icmp slt i64 %126, %127
  br i1 %.not.i.i195, label %if.entry23.Parser_error.exit201_crit_edge, label %if.entry.i.i198

if.entry23.Parser_error.exit201_crit_edge:        ; preds = %if.entry23
  %memberidx4.i.i199.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %122, i64 0, i32 1
  %.pre246 = load ptr, ptr %memberidx4.i.i199.phi.trans.insert, align 8
  br label %Parser_error.exit201

if.entry.i.i198:                                  ; preds = %if.entry23
  %128 = shl i64 %127, 1
  store i64 %128, ptr %memberidx1.i4.i194, align 4
  %memberidx2.i.i.i197 = getelementptr inbounds %Array_FloError_, ptr %122, i64 0, i32 1
  %129 = load ptr, ptr %memberidx2.i.i.i197, align 8
  %130 = shl i64 %127, 4
  %131 = tail call ptr @realloc(ptr %129, i64 %130)
  store ptr %131, ptr %memberidx2.i.i.i197, align 8
  %.pre245 = load i64, ptr %memberidx.i.i193, align 4
  br label %Parser_error.exit201

Parser_error.exit201:                             ; preds = %if.entry23.Parser_error.exit201_crit_edge, %if.entry.i.i198
  %132 = phi ptr [ %.pre246, %if.entry23.Parser_error.exit201_crit_edge ], [ %131, %if.entry.i.i198 ]
  %133 = phi i64 [ %126, %if.entry23.Parser_error.exit201_crit_edge ], [ %.pre245, %if.entry.i.i198 ]
  %134 = add i64 %133, 1
  store i64 %134, ptr %memberidx.i.i193, align 4
  %ptridx.i.i200 = getelementptr inbounds ptr, ptr %132, i64 %133
  store ptr %123, ptr %ptridx.i.i200, align 8
  br label %ifend4

if.entry26:                                       ; preds = %else
  %135 = tail call ptr @malloc(i32 96)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %135, ptr noundef nonnull align 8 dereferenceable(12) @127, i64 12, i1 false)
  %136 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %136, align 8
  %memberidx.i.i202 = getelementptr inbounds %string, ptr %136, i64 0, i32 1
  store ptr %135, ptr %memberidx.i.i202, align 8
  %memberidx1.i.i203 = getelementptr inbounds %string, ptr %136, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i203, align 4
  %memberidx2.i.i204 = getelementptr inbounds %string, ptr %136, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i204, align 4
  %memberidx.i205 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %137 = load ptr, ptr %memberidx.i205, align 8
  %138 = tail call ptr @malloc(i32 24)
  %139 = load ptr, ptr %memberidx, align 8
  %memberidx2.i207 = getelementptr inbounds %Token, ptr %139, i64 0, i32 1
  %140 = load ptr, ptr %memberidx2.i207, align 8
  store i64 2, ptr %138, align 4
  %memberidx1.i.i208 = getelementptr inbounds %FloError, ptr %138, i64 0, i32 2
  store ptr %140, ptr %memberidx1.i.i208, align 8
  %memberidx2.i.i209 = getelementptr inbounds %FloError, ptr %138, i64 0, i32 1
  store ptr %136, ptr %memberidx2.i.i209, align 8
  %memberidx.i.i210 = getelementptr inbounds %Array_FloError_, ptr %137, i64 0, i32 2
  %141 = load i64, ptr %memberidx.i.i210, align 4
  %memberidx1.i4.i211 = getelementptr inbounds %Array_FloError_, ptr %137, i64 0, i32 3
  %142 = load i64, ptr %memberidx1.i4.i211, align 4
  %.not.i.i212 = icmp slt i64 %141, %142
  br i1 %.not.i.i212, label %if.entry26.Parser_error.exit218_crit_edge, label %if.entry.i.i215

if.entry26.Parser_error.exit218_crit_edge:        ; preds = %if.entry26
  %memberidx4.i.i216.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %137, i64 0, i32 1
  %.pre244 = load ptr, ptr %memberidx4.i.i216.phi.trans.insert, align 8
  br label %Parser_error.exit218

if.entry.i.i215:                                  ; preds = %if.entry26
  %143 = shl i64 %142, 1
  store i64 %143, ptr %memberidx1.i4.i211, align 4
  %memberidx2.i.i.i214 = getelementptr inbounds %Array_FloError_, ptr %137, i64 0, i32 1
  %144 = load ptr, ptr %memberidx2.i.i.i214, align 8
  %145 = shl i64 %142, 4
  %146 = tail call ptr @realloc(ptr %144, i64 %145)
  store ptr %146, ptr %memberidx2.i.i.i214, align 8
  %.pre243 = load i64, ptr %memberidx.i.i210, align 4
  br label %Parser_error.exit218

Parser_error.exit218:                             ; preds = %if.entry26.Parser_error.exit218_crit_edge, %if.entry.i.i215
  %147 = phi ptr [ %.pre244, %if.entry26.Parser_error.exit218_crit_edge ], [ %146, %if.entry.i.i215 ]
  %148 = phi i64 [ %141, %if.entry26.Parser_error.exit218_crit_edge ], [ %.pre243, %if.entry.i.i215 ]
  %149 = add i64 %148, 1
  store i64 %149, ptr %memberidx.i.i210, align 4
  %ptridx.i.i217 = getelementptr inbounds ptr, ptr %147, i64 %148
  store ptr %138, ptr %ptridx.i.i217, align 8
  br label %ifend4

if.entry29:                                       ; preds = %else
  %150 = tail call ptr @malloc(i32 96)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %150, ptr noundef nonnull align 8 dereferenceable(12) @128, i64 12, i1 false)
  %151 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %151, align 8
  %memberidx.i.i219 = getelementptr inbounds %string, ptr %151, i64 0, i32 1
  store ptr %150, ptr %memberidx.i.i219, align 8
  %memberidx1.i.i220 = getelementptr inbounds %string, ptr %151, i64 0, i32 2
  store i64 12, ptr %memberidx1.i.i220, align 4
  %memberidx2.i.i221 = getelementptr inbounds %string, ptr %151, i64 0, i32 3
  store i64 12, ptr %memberidx2.i.i221, align 4
  %memberidx.i222 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %152 = load ptr, ptr %memberidx.i222, align 8
  %153 = tail call ptr @malloc(i32 24)
  %154 = load ptr, ptr %memberidx, align 8
  %memberidx2.i224 = getelementptr inbounds %Token, ptr %154, i64 0, i32 1
  %155 = load ptr, ptr %memberidx2.i224, align 8
  store i64 2, ptr %153, align 4
  %memberidx1.i.i225 = getelementptr inbounds %FloError, ptr %153, i64 0, i32 2
  store ptr %155, ptr %memberidx1.i.i225, align 8
  %memberidx2.i.i226 = getelementptr inbounds %FloError, ptr %153, i64 0, i32 1
  store ptr %151, ptr %memberidx2.i.i226, align 8
  %memberidx.i.i227 = getelementptr inbounds %Array_FloError_, ptr %152, i64 0, i32 2
  %156 = load i64, ptr %memberidx.i.i227, align 4
  %memberidx1.i4.i228 = getelementptr inbounds %Array_FloError_, ptr %152, i64 0, i32 3
  %157 = load i64, ptr %memberidx1.i4.i228, align 4
  %.not.i.i229 = icmp slt i64 %156, %157
  br i1 %.not.i.i229, label %if.entry29.Parser_error.exit235_crit_edge, label %if.entry.i.i232

if.entry29.Parser_error.exit235_crit_edge:        ; preds = %if.entry29
  %memberidx4.i.i233.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %152, i64 0, i32 1
  %.pre242 = load ptr, ptr %memberidx4.i.i233.phi.trans.insert, align 8
  br label %Parser_error.exit235

if.entry.i.i232:                                  ; preds = %if.entry29
  %158 = shl i64 %157, 1
  store i64 %158, ptr %memberidx1.i4.i228, align 4
  %memberidx2.i.i.i231 = getelementptr inbounds %Array_FloError_, ptr %152, i64 0, i32 1
  %159 = load ptr, ptr %memberidx2.i.i.i231, align 8
  %160 = shl i64 %157, 4
  %161 = tail call ptr @realloc(ptr %159, i64 %160)
  store ptr %161, ptr %memberidx2.i.i.i231, align 8
  %.pre241 = load i64, ptr %memberidx.i.i227, align 4
  br label %Parser_error.exit235

Parser_error.exit235:                             ; preds = %if.entry29.Parser_error.exit235_crit_edge, %if.entry.i.i232
  %162 = phi ptr [ %.pre242, %if.entry29.Parser_error.exit235_crit_edge ], [ %161, %if.entry.i.i232 ]
  %163 = phi i64 [ %156, %if.entry29.Parser_error.exit235_crit_edge ], [ %.pre241, %if.entry.i.i232 ]
  %164 = add i64 %163, 1
  store i64 %164, ptr %memberidx.i.i227, align 4
  %ptridx.i.i234 = getelementptr inbounds ptr, ptr %162, i64 %163
  store ptr %153, ptr %ptridx.i.i234, align 8
  br label %ifend4

if.entry32:                                       ; preds = %else
  %165 = tail call ptr @malloc(i32 104)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(13) %165, ptr noundef nonnull align 8 dereferenceable(13) @129, i64 13, i1 false)
  %166 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %166, align 8
  %memberidx.i.i236 = getelementptr inbounds %string, ptr %166, i64 0, i32 1
  store ptr %165, ptr %memberidx.i.i236, align 8
  %memberidx1.i.i237 = getelementptr inbounds %string, ptr %166, i64 0, i32 2
  store i64 13, ptr %memberidx1.i.i237, align 4
  %memberidx2.i.i238 = getelementptr inbounds %string, ptr %166, i64 0, i32 3
  store i64 13, ptr %memberidx2.i.i238, align 4
  %memberidx.i61 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %167 = load ptr, ptr %memberidx.i61, align 8
  %168 = tail call ptr @malloc(i32 24)
  %169 = load ptr, ptr %memberidx, align 8
  %memberidx2.i62 = getelementptr inbounds %Token, ptr %169, i64 0, i32 1
  %170 = load ptr, ptr %memberidx2.i62, align 8
  store i64 2, ptr %168, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %168, i64 0, i32 2
  store ptr %170, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %168, i64 0, i32 1
  store ptr %166, ptr %memberidx2.i.i, align 8
  %memberidx.i.i63 = getelementptr inbounds %Array_FloError_, ptr %167, i64 0, i32 2
  %171 = load i64, ptr %memberidx.i.i63, align 4
  %memberidx1.i4.i = getelementptr inbounds %Array_FloError_, ptr %167, i64 0, i32 3
  %172 = load i64, ptr %memberidx1.i4.i, align 4
  %.not.i.i = icmp slt i64 %171, %172
  br i1 %.not.i.i, label %if.entry32.Parser_error.exit_crit_edge, label %if.entry.i.i

if.entry32.Parser_error.exit_crit_edge:           ; preds = %if.entry32
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %167, i64 0, i32 1
  %.pre240 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %Parser_error.exit

if.entry.i.i:                                     ; preds = %if.entry32
  %173 = shl i64 %172, 1
  store i64 %173, ptr %memberidx1.i4.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %167, i64 0, i32 1
  %174 = load ptr, ptr %memberidx2.i.i.i, align 8
  %175 = shl i64 %172, 4
  %176 = tail call ptr @realloc(ptr %174, i64 %175)
  store ptr %176, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i63, align 4
  br label %Parser_error.exit

Parser_error.exit:                                ; preds = %if.entry32.Parser_error.exit_crit_edge, %if.entry.i.i
  %177 = phi ptr [ %.pre240, %if.entry32.Parser_error.exit_crit_edge ], [ %176, %if.entry.i.i ]
  %178 = phi i64 [ %171, %if.entry32.Parser_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %179 = add i64 %178, 1
  store i64 %179, ptr %memberidx.i.i63, align 4
  %ptridx.i.i64 = getelementptr inbounds ptr, ptr %177, i64 %178
  store ptr %168, ptr %ptridx.i.i64, align 8
  br label %ifend4
}

define internal fastcc ptr @Parser_parse_term_expression(ptr %0) unnamed_addr {
  %2 = tail call fastcc ptr @Parser_parse_unary_expression_pre(ptr %0)
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx.i, align 8
  %4 = load i64, ptr %3, align 4
  switch i64 %4, label %ifend7.i [
    i64 4, label %Parser_is_term_expr_op.exit
    i64 7, label %Parser_is_term_expr_op.exit.fold.split
    i64 8, label %Parser_is_term_expr_op.exit.fold.split30
  ]

ifend7.i:                                         ; preds = %1
  %5 = icmp eq i64 %4, 9
  %spec.select.i = select i1 %5, i64 6, i64 0
  br label %Parser_is_term_expr_op.exit

Parser_is_term_expr_op.exit.fold.split:           ; preds = %1
  br label %Parser_is_term_expr_op.exit

Parser_is_term_expr_op.exit.fold.split30:         ; preds = %1
  br label %Parser_is_term_expr_op.exit

Parser_is_term_expr_op.exit:                      ; preds = %1, %Parser_is_term_expr_op.exit.fold.split30, %Parser_is_term_expr_op.exit.fold.split, %ifend7.i
  %common.ret.op.i = phi i64 [ 3, %1 ], [ %spec.select.i, %ifend7.i ], [ 4, %Parser_is_term_expr_op.exit.fold.split ], [ 5, %Parser_is_term_expr_op.exit.fold.split30 ]
  %6 = icmp ne i64 %common.ret.op.i, 0
  %7 = icmp ne i64 %4, 44
  %memberidx2.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %Array_FloError_, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx3.i, align 4
  %10 = icmp eq i64 %9, 0
  %11 = and i1 %7, %10
  %12 = and i1 %6, %11
  br i1 %12, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %Parser_is_term_expr_op.exit
  %memberidx.i11 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %Parser_is_term_expr_op.exit24
  %unary.0 = phi ptr [ %20, %Parser_is_term_expr_op.exit24 ], [ %2, %while.entry.preheader ]
  %op.0 = phi i64 [ %common.ret.op.i19, %Parser_is_term_expr_op.exit24 ], [ %common.ret.op.i, %while.entry.preheader ]
  %13 = load i64, ptr %memberidx.i11, align 4
  %14 = load ptr, ptr %0, align 8
  %memberidx2.i12 = getelementptr inbounds %Array_Token_, ptr %14, i64 0, i32 2
  %15 = load i64, ptr %memberidx2.i12, align 4
  %16 = icmp slt i64 %13, %15
  br i1 %16, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %while.entry
  %17 = add nsw i64 %13, 1
  store i64 %17, ptr %memberidx.i11, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %14, i64 0, i32 1
  %18 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %19, ptr %memberidx.i, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %while.entry, %if.entry.i
  %20 = tail call ptr @malloc(i32 48)
  %21 = tail call fastcc ptr @Parser_parse_unary_expression_pre(ptr nonnull %0)
  %22 = load ptr, ptr %unary.0, align 8
  %23 = load ptr, ptr %21, align 8
  %24 = tail call ptr @malloc(i32 32)
  %25 = load i64, ptr %22, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %23, i64 0, i32 1
  %26 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %22, i64 0, i32 2
  %27 = load i64, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %23, i64 0, i32 3
  %28 = load i64, ptr %memberidx3.i.i, align 4
  store i64 %25, ptr %24, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 1
  store i64 %26, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 2
  store i64 %27, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 3
  store i64 %28, ptr %memberidx3.i.i.i, align 4
  store ptr %24, ptr %20, align 8
  %memberidx.i.i.i = getelementptr inbounds %StatementNode, ptr %20, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i, align 4
  %memberidx.i.i15 = getelementptr inbounds %ExpressionNode, ptr %20, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i15, align 4
  %memberidx2.i16 = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 3
  store ptr %unary.0, ptr %memberidx2.i16, align 8
  %memberidx3.i17 = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 4
  store i64 %op.0, ptr %memberidx3.i17, align 4
  %memberidx4.i = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 5
  store ptr %21, ptr %memberidx4.i, align 8
  %29 = load ptr, ptr %memberidx.i, align 8
  %30 = load i64, ptr %29, align 4
  switch i64 %30, label %ifend7.i23 [
    i64 4, label %Parser_is_term_expr_op.exit24
    i64 7, label %Parser_is_term_expr_op.exit24.fold.split
    i64 8, label %Parser_is_term_expr_op.exit24.fold.split31
  ]

ifend7.i23:                                       ; preds = %Parser_advance.exit
  %31 = icmp eq i64 %30, 9
  %spec.select.i22 = select i1 %31, i64 6, i64 0
  br label %Parser_is_term_expr_op.exit24

Parser_is_term_expr_op.exit24.fold.split:         ; preds = %Parser_advance.exit
  br label %Parser_is_term_expr_op.exit24

Parser_is_term_expr_op.exit24.fold.split31:       ; preds = %Parser_advance.exit
  br label %Parser_is_term_expr_op.exit24

Parser_is_term_expr_op.exit24:                    ; preds = %Parser_advance.exit, %Parser_is_term_expr_op.exit24.fold.split31, %Parser_is_term_expr_op.exit24.fold.split, %ifend7.i23
  %common.ret.op.i19 = phi i64 [ 3, %Parser_advance.exit ], [ %spec.select.i22, %ifend7.i23 ], [ 4, %Parser_is_term_expr_op.exit24.fold.split ], [ 5, %Parser_is_term_expr_op.exit24.fold.split31 ]
  %32 = icmp ne i64 %common.ret.op.i19, 0
  %33 = icmp ne i64 %30, 44
  %34 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i27 = getelementptr inbounds %Array_FloError_, ptr %34, i64 0, i32 2
  %35 = load i64, ptr %memberidx3.i27, align 4
  %36 = icmp eq i64 %35, 0
  %37 = and i1 %33, %36
  %38 = and i1 %32, %37
  br i1 %38, label %while.entry, label %while.end

while.end:                                        ; preds = %Parser_is_term_expr_op.exit24, %Parser_is_term_expr_op.exit
  %unary.1 = phi ptr [ %2, %Parser_is_term_expr_op.exit ], [ %20, %Parser_is_term_expr_op.exit24 ]
  ret ptr %unary.1
}

define internal fastcc ptr @Parser_parse_arithmetic_expression(ptr %0) unnamed_addr {
  %2 = tail call fastcc ptr @Parser_parse_term_expression(ptr %0)
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx.i, align 8
  %4 = load i64, ptr %3, align 4
  %memberidx2.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %Array_FloError_, ptr %5, i64 0, i32 2
  %6 = load i64, ptr %memberidx3.i, align 4
  %7 = icmp eq i64 %6, 0
  %8 = add i64 %4, -5
  %9 = icmp ult i64 %8, 2
  %10 = and i1 %9, %7
  br i1 %10, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %1
  %11 = icmp eq i64 %4, 6
  %12 = icmp eq i64 %4, 5
  %spec.select.i = select i1 %12, i64 2, i64 0
  %common.ret.op.i = select i1 %11, i64 1, i64 %spec.select.i
  %memberidx.i11 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %Parser_advance.exit
  %term.0 = phi ptr [ %20, %Parser_advance.exit ], [ %2, %while.entry.preheader ]
  %op.0 = phi i64 [ %common.ret.op.i19, %Parser_advance.exit ], [ %common.ret.op.i, %while.entry.preheader ]
  %13 = load i64, ptr %memberidx.i11, align 4
  %14 = load ptr, ptr %0, align 8
  %memberidx2.i12 = getelementptr inbounds %Array_Token_, ptr %14, i64 0, i32 2
  %15 = load i64, ptr %memberidx2.i12, align 4
  %16 = icmp slt i64 %13, %15
  br i1 %16, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %while.entry
  %17 = add nsw i64 %13, 1
  store i64 %17, ptr %memberidx.i11, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %14, i64 0, i32 1
  %18 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %19, ptr %memberidx.i, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %while.entry, %if.entry.i
  %20 = tail call ptr @malloc(i32 48)
  %21 = tail call fastcc ptr @Parser_parse_term_expression(ptr nonnull %0)
  %22 = load ptr, ptr %term.0, align 8
  %23 = load ptr, ptr %21, align 8
  %24 = tail call ptr @malloc(i32 32)
  %25 = load i64, ptr %22, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %23, i64 0, i32 1
  %26 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %22, i64 0, i32 2
  %27 = load i64, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %23, i64 0, i32 3
  %28 = load i64, ptr %memberidx3.i.i, align 4
  store i64 %25, ptr %24, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 1
  store i64 %26, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 2
  store i64 %27, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 3
  store i64 %28, ptr %memberidx3.i.i.i, align 4
  store ptr %24, ptr %20, align 8
  %memberidx.i.i.i = getelementptr inbounds %StatementNode, ptr %20, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i, align 4
  %memberidx.i.i14 = getelementptr inbounds %ExpressionNode, ptr %20, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i14, align 4
  %memberidx2.i15 = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 3
  store ptr %term.0, ptr %memberidx2.i15, align 8
  %memberidx3.i16 = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 4
  store i64 %op.0, ptr %memberidx3.i16, align 4
  %memberidx4.i = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 5
  store ptr %21, ptr %memberidx4.i, align 8
  %29 = load ptr, ptr %memberidx.i, align 8
  %30 = load i64, ptr %29, align 4
  %31 = icmp eq i64 %30, 6
  %32 = icmp eq i64 %30, 5
  %spec.select.i18 = select i1 %32, i64 2, i64 0
  %common.ret.op.i19 = select i1 %31, i64 1, i64 %spec.select.i18
  %33 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i22 = getelementptr inbounds %Array_FloError_, ptr %33, i64 0, i32 2
  %34 = load i64, ptr %memberidx3.i22, align 4
  %35 = icmp eq i64 %34, 0
  %36 = add i64 %30, -5
  %37 = icmp ult i64 %36, 2
  %38 = and i1 %37, %35
  br i1 %38, label %while.entry, label %while.end

while.end:                                        ; preds = %Parser_advance.exit, %1
  %term.1 = phi ptr [ %2, %1 ], [ %20, %Parser_advance.exit ]
  ret ptr %term.1
}

define internal fastcc ptr @Parser_parse_bitshift_expression(ptr %0) unnamed_addr {
  %2 = tail call fastcc ptr @Parser_parse_arithmetic_expression(ptr %0)
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx.i, align 8
  %4 = load i64, ptr %3, align 4
  switch i64 %4, label %ifend4.i [
    i64 46, label %Parser_is_bitshift_expr_op.exit
    i64 47, label %Parser_is_bitshift_expr_op.exit.fold.split
  ]

ifend4.i:                                         ; preds = %1
  %5 = icmp eq i64 %4, 54
  %spec.select.i = select i1 %5, i64 17, i64 0
  br label %Parser_is_bitshift_expr_op.exit

Parser_is_bitshift_expr_op.exit.fold.split:       ; preds = %1
  br label %Parser_is_bitshift_expr_op.exit

Parser_is_bitshift_expr_op.exit:                  ; preds = %1, %Parser_is_bitshift_expr_op.exit.fold.split, %ifend4.i
  %common.ret.op.i = phi i64 [ 13, %1 ], [ %spec.select.i, %ifend4.i ], [ 14, %Parser_is_bitshift_expr_op.exit.fold.split ]
  %6 = icmp ne i64 %common.ret.op.i, 0
  %7 = icmp ne i64 %4, 44
  %memberidx2.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %Array_FloError_, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx3.i, align 4
  %10 = icmp eq i64 %9, 0
  %11 = and i1 %7, %10
  %12 = and i1 %6, %11
  br i1 %12, label %while.entry.preheader, label %while.end

while.entry.preheader:                            ; preds = %Parser_is_bitshift_expr_op.exit
  %memberidx.i11 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %Parser_is_bitshift_expr_op.exit23
  %arith.0 = phi ptr [ %20, %Parser_is_bitshift_expr_op.exit23 ], [ %2, %while.entry.preheader ]
  %op.0 = phi i64 [ %common.ret.op.i19, %Parser_is_bitshift_expr_op.exit23 ], [ %common.ret.op.i, %while.entry.preheader ]
  %13 = load i64, ptr %memberidx.i11, align 4
  %14 = load ptr, ptr %0, align 8
  %memberidx2.i12 = getelementptr inbounds %Array_Token_, ptr %14, i64 0, i32 2
  %15 = load i64, ptr %memberidx2.i12, align 4
  %16 = icmp slt i64 %13, %15
  br i1 %16, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %while.entry
  %17 = add nsw i64 %13, 1
  store i64 %17, ptr %memberidx.i11, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %14, i64 0, i32 1
  %18 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %19, ptr %memberidx.i, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %while.entry, %if.entry.i
  %20 = tail call ptr @malloc(i32 48)
  %21 = tail call fastcc ptr @Parser_parse_arithmetic_expression(ptr nonnull %0)
  %22 = load ptr, ptr %arith.0, align 8
  %23 = load ptr, ptr %21, align 8
  %24 = tail call ptr @malloc(i32 32)
  %25 = load i64, ptr %22, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %23, i64 0, i32 1
  %26 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %22, i64 0, i32 2
  %27 = load i64, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %23, i64 0, i32 3
  %28 = load i64, ptr %memberidx3.i.i, align 4
  store i64 %25, ptr %24, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 1
  store i64 %26, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 2
  store i64 %27, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 3
  store i64 %28, ptr %memberidx3.i.i.i, align 4
  store ptr %24, ptr %20, align 8
  %memberidx.i.i.i = getelementptr inbounds %StatementNode, ptr %20, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i, align 4
  %memberidx.i.i15 = getelementptr inbounds %ExpressionNode, ptr %20, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i15, align 4
  %memberidx2.i16 = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 3
  store ptr %arith.0, ptr %memberidx2.i16, align 8
  %memberidx3.i17 = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 4
  store i64 %op.0, ptr %memberidx3.i17, align 4
  %memberidx4.i = getelementptr inbounds %BinaryExpressionNode, ptr %20, i64 0, i32 5
  store ptr %21, ptr %memberidx4.i, align 8
  %29 = load ptr, ptr %memberidx.i, align 8
  %30 = load i64, ptr %29, align 4
  switch i64 %30, label %ifend4.i22 [
    i64 46, label %Parser_is_bitshift_expr_op.exit23
    i64 47, label %Parser_is_bitshift_expr_op.exit23.fold.split
  ]

ifend4.i22:                                       ; preds = %Parser_advance.exit
  %31 = icmp eq i64 %30, 54
  %spec.select.i21 = select i1 %31, i64 17, i64 0
  br label %Parser_is_bitshift_expr_op.exit23

Parser_is_bitshift_expr_op.exit23.fold.split:     ; preds = %Parser_advance.exit
  br label %Parser_is_bitshift_expr_op.exit23

Parser_is_bitshift_expr_op.exit23:                ; preds = %Parser_advance.exit, %Parser_is_bitshift_expr_op.exit23.fold.split, %ifend4.i22
  %common.ret.op.i19 = phi i64 [ 13, %Parser_advance.exit ], [ %spec.select.i21, %ifend4.i22 ], [ 14, %Parser_is_bitshift_expr_op.exit23.fold.split ]
  %32 = icmp ne i64 %common.ret.op.i19, 0
  %33 = icmp ne i64 %30, 44
  %34 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i26 = getelementptr inbounds %Array_FloError_, ptr %34, i64 0, i32 2
  %35 = load i64, ptr %memberidx3.i26, align 4
  %36 = icmp eq i64 %35, 0
  %37 = and i1 %33, %36
  %38 = and i1 %32, %37
  br i1 %38, label %while.entry, label %while.end

while.end:                                        ; preds = %Parser_is_bitshift_expr_op.exit23, %Parser_is_bitshift_expr_op.exit
  %arith.1 = phi ptr [ %2, %Parser_is_bitshift_expr_op.exit ], [ %20, %Parser_is_bitshift_expr_op.exit23 ]
  ret ptr %arith.1
}

define internal fastcc ptr @Parser_parse_comparasion_expression(ptr %0) unnamed_addr {
  %memberidx = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %2 = load ptr, ptr %memberidx, align 8
  %3 = load i64, ptr %2, align 4
  %4 = icmp eq i64 %3, 45
  br i1 %4, label %if.entry, label %ifend

common.ret:                                       ; preds = %Parser_is_comp_expr_op.exit47, %Parser_is_comp_expr_op.exit, %Parser_advance.exit
  %common.ret.op = phi ptr [ %14, %Parser_advance.exit ], [ %21, %Parser_is_comp_expr_op.exit ], [ %40, %Parser_is_comp_expr_op.exit47 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  %memberidx1 = getelementptr inbounds %Token, ptr %2, i64 0, i32 1
  %5 = load ptr, ptr %memberidx1, align 8
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx.i, align 4
  %7 = load ptr, ptr %0, align 8
  %memberidx2.i = getelementptr inbounds %Array_Token_, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx2.i, align 4
  %9 = icmp slt i64 %6, %8
  br i1 %9, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %if.entry
  %10 = add nsw i64 %6, 1
  store i64 %10, ptr %memberidx.i, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Token_, ptr %7, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %11, i64 %10
  %12 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %12, ptr %memberidx, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %if.entry, %if.entry.i
  %13 = tail call fastcc ptr @Parser_parse_comparasion_expression(ptr nonnull %0)
  %14 = tail call ptr @malloc(i32 40)
  %15 = load ptr, ptr %13, align 8
  %16 = tail call ptr @malloc(i32 32)
  %17 = load i64, ptr %5, align 4
  %memberidx1.i = getelementptr inbounds %FloRange, ptr %15, i64 0, i32 1
  %18 = load i64, ptr %memberidx1.i, align 4
  %memberidx2.i15 = getelementptr inbounds %FloRange, ptr %5, i64 0, i32 2
  %19 = load i64, ptr %memberidx2.i15, align 4
  %memberidx3.i16 = getelementptr inbounds %FloRange, ptr %15, i64 0, i32 3
  %20 = load i64, ptr %memberidx3.i16, align 4
  store i64 %17, ptr %16, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %16, i64 0, i32 1
  store i64 %18, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %16, i64 0, i32 2
  store i64 %19, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %16, i64 0, i32 3
  store i64 %20, ptr %memberidx3.i.i, align 4
  %memberidx.i17 = getelementptr inbounds %UnaryExpressionNode, ptr %14, i64 0, i32 3
  store i64 6, ptr %memberidx.i17, align 4
  %memberidx1.i18 = getelementptr inbounds %UnaryExpressionNode, ptr %14, i64 0, i32 4
  store ptr %13, ptr %memberidx1.i18, align 8
  store ptr %16, ptr %14, align 8
  %memberidx.i.i.i = getelementptr inbounds %StatementNode, ptr %14, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i, align 4
  %memberidx.i.i19 = getelementptr inbounds %ExpressionNode, ptr %14, i64 0, i32 2
  store i64 9, ptr %memberidx.i.i19, align 4
  br label %common.ret

ifend:                                            ; preds = %1
  %21 = tail call fastcc ptr @Parser_parse_bitshift_expression(ptr nonnull %0)
  %22 = load ptr, ptr %memberidx, align 8
  %23 = load i64, ptr %22, align 4
  switch i64 %23, label %ifend13.i [
    i64 39, label %Parser_is_comp_expr_op.exit
    i64 40, label %Parser_is_comp_expr_op.exit.fold.split
    i64 42, label %Parser_is_comp_expr_op.exit.fold.split54
    i64 41, label %Parser_is_comp_expr_op.exit.fold.split55
    i64 37, label %Parser_is_comp_expr_op.exit.fold.split56
  ]

ifend13.i:                                        ; preds = %ifend
  %24 = icmp eq i64 %23, 38
  %spec.select.i = select i1 %24, i64 12, i64 0
  br label %Parser_is_comp_expr_op.exit

Parser_is_comp_expr_op.exit.fold.split:           ; preds = %ifend
  br label %Parser_is_comp_expr_op.exit

Parser_is_comp_expr_op.exit.fold.split54:         ; preds = %ifend
  br label %Parser_is_comp_expr_op.exit

Parser_is_comp_expr_op.exit.fold.split55:         ; preds = %ifend
  br label %Parser_is_comp_expr_op.exit

Parser_is_comp_expr_op.exit.fold.split56:         ; preds = %ifend
  br label %Parser_is_comp_expr_op.exit

Parser_is_comp_expr_op.exit:                      ; preds = %ifend, %Parser_is_comp_expr_op.exit.fold.split56, %Parser_is_comp_expr_op.exit.fold.split55, %Parser_is_comp_expr_op.exit.fold.split54, %Parser_is_comp_expr_op.exit.fold.split, %ifend13.i
  %op.promoted = phi i64 [ 7, %ifend ], [ %spec.select.i, %ifend13.i ], [ 9, %Parser_is_comp_expr_op.exit.fold.split ], [ 8, %Parser_is_comp_expr_op.exit.fold.split54 ], [ 10, %Parser_is_comp_expr_op.exit.fold.split55 ], [ 11, %Parser_is_comp_expr_op.exit.fold.split56 ]
  %25 = icmp ne i64 %op.promoted, 0
  %26 = icmp ne i64 %23, 44
  %memberidx2.i22 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %27 = load ptr, ptr %memberidx2.i22, align 8
  %memberidx3.i23 = getelementptr inbounds %Array_FloError_, ptr %27, i64 0, i32 2
  %28 = load i64, ptr %memberidx3.i23, align 4
  %29 = icmp eq i64 %28, 0
  %30 = and i1 %26, %29
  %31 = and i1 %25, %30
  br i1 %31, label %while.entry.preheader, label %common.ret

while.entry.preheader:                            ; preds = %Parser_is_comp_expr_op.exit
  %memberidx.i24 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %Parser_is_comp_expr_op.exit47
  %common.ret.op.i4060 = phi i64 [ %op.promoted, %while.entry.preheader ], [ %common.ret.op.i40, %Parser_is_comp_expr_op.exit47 ]
  %32 = phi ptr [ %21, %while.entry.preheader ], [ %40, %Parser_is_comp_expr_op.exit47 ]
  %33 = load i64, ptr %memberidx.i24, align 4
  %34 = load ptr, ptr %0, align 8
  %memberidx2.i25 = getelementptr inbounds %Array_Token_, ptr %34, i64 0, i32 2
  %35 = load i64, ptr %memberidx2.i25, align 4
  %36 = icmp slt i64 %33, %35
  br i1 %36, label %if.entry.i29, label %Parser_advance.exit31

if.entry.i29:                                     ; preds = %while.entry
  %37 = add nsw i64 %33, 1
  store i64 %37, ptr %memberidx.i24, align 4
  %memberidx.i.i27 = getelementptr inbounds %Array_Token_, ptr %34, i64 0, i32 1
  %38 = load ptr, ptr %memberidx.i.i27, align 8
  %ptridx.i.i28 = getelementptr inbounds ptr, ptr %38, i64 %37
  %39 = load ptr, ptr %ptridx.i.i28, align 8
  store ptr %39, ptr %memberidx, align 8
  br label %Parser_advance.exit31

Parser_advance.exit31:                            ; preds = %while.entry, %if.entry.i29
  %40 = tail call ptr @malloc(i32 48)
  %41 = tail call fastcc ptr @Parser_parse_bitshift_expression(ptr nonnull %0)
  %42 = load ptr, ptr %32, align 8
  %43 = load ptr, ptr %41, align 8
  %44 = tail call ptr @malloc(i32 32)
  %45 = load i64, ptr %42, align 4
  %memberidx1.i.i32 = getelementptr inbounds %FloRange, ptr %43, i64 0, i32 1
  %46 = load i64, ptr %memberidx1.i.i32, align 4
  %memberidx2.i.i33 = getelementptr inbounds %FloRange, ptr %42, i64 0, i32 2
  %47 = load i64, ptr %memberidx2.i.i33, align 4
  %memberidx3.i.i34 = getelementptr inbounds %FloRange, ptr %43, i64 0, i32 3
  %48 = load i64, ptr %memberidx3.i.i34, align 4
  store i64 %45, ptr %44, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %44, i64 0, i32 1
  store i64 %46, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %44, i64 0, i32 2
  store i64 %47, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %44, i64 0, i32 3
  store i64 %48, ptr %memberidx3.i.i.i, align 4
  store ptr %44, ptr %40, align 8
  %memberidx.i.i.i35 = getelementptr inbounds %StatementNode, ptr %40, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i35, align 4
  %memberidx.i.i36 = getelementptr inbounds %ExpressionNode, ptr %40, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i36, align 4
  %memberidx2.i37 = getelementptr inbounds %BinaryExpressionNode, ptr %40, i64 0, i32 3
  store ptr %32, ptr %memberidx2.i37, align 8
  %memberidx3.i38 = getelementptr inbounds %BinaryExpressionNode, ptr %40, i64 0, i32 4
  store i64 %common.ret.op.i4060, ptr %memberidx3.i38, align 4
  %memberidx4.i = getelementptr inbounds %BinaryExpressionNode, ptr %40, i64 0, i32 5
  store ptr %41, ptr %memberidx4.i, align 8
  %49 = load ptr, ptr %memberidx, align 8
  %50 = load i64, ptr %49, align 4
  switch i64 %50, label %ifend13.i46 [
    i64 39, label %Parser_is_comp_expr_op.exit47
    i64 40, label %Parser_is_comp_expr_op.exit47.fold.split
    i64 42, label %Parser_is_comp_expr_op.exit47.fold.split57
    i64 41, label %Parser_is_comp_expr_op.exit47.fold.split58
    i64 37, label %Parser_is_comp_expr_op.exit47.fold.split59
  ]

ifend13.i46:                                      ; preds = %Parser_advance.exit31
  %51 = icmp eq i64 %50, 38
  %spec.select.i45 = select i1 %51, i64 12, i64 0
  br label %Parser_is_comp_expr_op.exit47

Parser_is_comp_expr_op.exit47.fold.split:         ; preds = %Parser_advance.exit31
  br label %Parser_is_comp_expr_op.exit47

Parser_is_comp_expr_op.exit47.fold.split57:       ; preds = %Parser_advance.exit31
  br label %Parser_is_comp_expr_op.exit47

Parser_is_comp_expr_op.exit47.fold.split58:       ; preds = %Parser_advance.exit31
  br label %Parser_is_comp_expr_op.exit47

Parser_is_comp_expr_op.exit47.fold.split59:       ; preds = %Parser_advance.exit31
  br label %Parser_is_comp_expr_op.exit47

Parser_is_comp_expr_op.exit47:                    ; preds = %Parser_advance.exit31, %Parser_is_comp_expr_op.exit47.fold.split59, %Parser_is_comp_expr_op.exit47.fold.split58, %Parser_is_comp_expr_op.exit47.fold.split57, %Parser_is_comp_expr_op.exit47.fold.split, %ifend13.i46
  %common.ret.op.i40 = phi i64 [ 7, %Parser_advance.exit31 ], [ %spec.select.i45, %ifend13.i46 ], [ 9, %Parser_is_comp_expr_op.exit47.fold.split ], [ 8, %Parser_is_comp_expr_op.exit47.fold.split57 ], [ 10, %Parser_is_comp_expr_op.exit47.fold.split58 ], [ 11, %Parser_is_comp_expr_op.exit47.fold.split59 ]
  %52 = icmp ne i64 %common.ret.op.i40, 0
  %53 = icmp ne i64 %50, 44
  %54 = load ptr, ptr %memberidx2.i22, align 8
  %memberidx3.i50 = getelementptr inbounds %Array_FloError_, ptr %54, i64 0, i32 2
  %55 = load i64, ptr %memberidx3.i50, align 4
  %56 = icmp eq i64 %55, 0
  %57 = and i1 %53, %56
  %58 = and i1 %52, %57
  br i1 %58, label %while.entry, label %common.ret
}

define internal fastcc ptr @Parser_parse_expression(ptr %0) unnamed_addr {
  %2 = tail call fastcc ptr @Parser_parse_comparasion_expression(ptr %0)
  %memberidx.i.i19.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx.i.i19.i, align 8
  %4 = load i64, ptr %3, align 4
  %5 = and i64 %4, -2
  %6 = icmp eq i64 %5, 52
  %7 = icmp ne i64 %4, 44
  %memberidx2.i.i20.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %memberidx2.i.i20.i, align 8
  %memberidx3.i.i21.i = getelementptr inbounds %Array_FloError_, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx3.i.i21.i, align 4
  %10 = icmp eq i64 %9, 0
  %11 = and i1 %7, %10
  %12 = and i1 %6, %11
  br i1 %12, label %while.entry.i.i.preheader, label %Parser_parse_bit_expression.exit.i

while.entry.i.i.preheader:                        ; preds = %1
  %13 = icmp eq i64 %4, 53
  %14 = icmp eq i64 %4, 52
  %spec.select.i.i.i = select i1 %14, i64 16, i64 0
  %common.ret.op.i.i.i = select i1 %13, i64 15, i64 %spec.select.i.i.i
  %memberidx.i11.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  br label %while.entry.i.i

while.entry.i.i:                                  ; preds = %while.entry.i.i.preheader, %Parser_advance.exit.i35.i
  %cmp.0.i.i = phi ptr [ %22, %Parser_advance.exit.i35.i ], [ %2, %while.entry.i.i.preheader ]
  %op.0.i.i = phi i64 [ %common.ret.op.i19.i.i, %Parser_advance.exit.i35.i ], [ %common.ret.op.i.i.i, %while.entry.i.i.preheader ]
  %15 = load i64, ptr %memberidx.i11.i.i, align 4
  %16 = load ptr, ptr %0, align 8
  %memberidx2.i12.i22.i = getelementptr inbounds %Array_Token_, ptr %16, i64 0, i32 2
  %17 = load i64, ptr %memberidx2.i12.i22.i, align 4
  %18 = icmp slt i64 %15, %17
  br i1 %18, label %if.entry.i.i26.i, label %Parser_advance.exit.i35.i

if.entry.i.i26.i:                                 ; preds = %while.entry.i.i
  %19 = add nsw i64 %15, 1
  store i64 %19, ptr %memberidx.i11.i.i, align 4
  %memberidx.i.i.i24.i = getelementptr inbounds %Array_Token_, ptr %16, i64 0, i32 1
  %20 = load ptr, ptr %memberidx.i.i.i24.i, align 8
  %ptridx.i.i.i25.i = getelementptr inbounds ptr, ptr %20, i64 %19
  %21 = load ptr, ptr %ptridx.i.i.i25.i, align 8
  store ptr %21, ptr %memberidx.i.i19.i, align 8
  br label %Parser_advance.exit.i35.i

Parser_advance.exit.i35.i:                        ; preds = %if.entry.i.i26.i, %while.entry.i.i
  %22 = tail call ptr @malloc(i32 48)
  %23 = tail call fastcc ptr @Parser_parse_comparasion_expression(ptr nonnull %0)
  %24 = load ptr, ptr %cmp.0.i.i, align 8
  %25 = load ptr, ptr %23, align 8
  %26 = tail call ptr @malloc(i32 32)
  %27 = load i64, ptr %24, align 4
  %memberidx1.i.i.i27.i = getelementptr inbounds %FloRange, ptr %25, i64 0, i32 1
  %28 = load i64, ptr %memberidx1.i.i.i27.i, align 4
  %memberidx2.i.i.i28.i = getelementptr inbounds %FloRange, ptr %24, i64 0, i32 2
  %29 = load i64, ptr %memberidx2.i.i.i28.i, align 4
  %memberidx3.i.i.i29.i = getelementptr inbounds %FloRange, ptr %25, i64 0, i32 3
  %30 = load i64, ptr %memberidx3.i.i.i29.i, align 4
  store i64 %27, ptr %26, align 4
  %memberidx1.i.i.i.i30.i = getelementptr inbounds %FloRange, ptr %26, i64 0, i32 1
  store i64 %28, ptr %memberidx1.i.i.i.i30.i, align 4
  %memberidx2.i.i.i.i31.i = getelementptr inbounds %FloRange, ptr %26, i64 0, i32 2
  store i64 %29, ptr %memberidx2.i.i.i.i31.i, align 4
  %memberidx3.i.i.i.i32.i = getelementptr inbounds %FloRange, ptr %26, i64 0, i32 3
  store i64 %30, ptr %memberidx3.i.i.i.i32.i, align 4
  store ptr %26, ptr %22, align 8
  %memberidx.i.i.i.i33.i = getelementptr inbounds %StatementNode, ptr %22, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i33.i, align 4
  %memberidx.i.i14.i.i = getelementptr inbounds %ExpressionNode, ptr %22, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i14.i.i, align 4
  %memberidx2.i15.i.i = getelementptr inbounds %BinaryExpressionNode, ptr %22, i64 0, i32 3
  store ptr %cmp.0.i.i, ptr %memberidx2.i15.i.i, align 8
  %memberidx3.i16.i.i = getelementptr inbounds %BinaryExpressionNode, ptr %22, i64 0, i32 4
  store i64 %op.0.i.i, ptr %memberidx3.i16.i.i, align 4
  %memberidx4.i.i34.i = getelementptr inbounds %BinaryExpressionNode, ptr %22, i64 0, i32 5
  store ptr %23, ptr %memberidx4.i.i34.i, align 8
  %31 = load ptr, ptr %memberidx.i.i19.i, align 8
  %32 = load i64, ptr %31, align 4
  %33 = icmp eq i64 %32, 53
  %34 = icmp eq i64 %32, 52
  %spec.select.i18.i.i = select i1 %34, i64 16, i64 0
  %common.ret.op.i19.i.i = select i1 %33, i64 15, i64 %spec.select.i18.i.i
  %35 = and i64 %32, -2
  %36 = icmp eq i64 %35, 52
  %37 = icmp ne i64 %32, 44
  %38 = load ptr, ptr %memberidx2.i.i20.i, align 8
  %memberidx3.i22.i.i = getelementptr inbounds %Array_FloError_, ptr %38, i64 0, i32 2
  %39 = load i64, ptr %memberidx3.i22.i.i, align 4
  %40 = icmp eq i64 %39, 0
  %41 = and i1 %37, %40
  %42 = and i1 %36, %41
  br i1 %42, label %while.entry.i.i, label %Parser_parse_bit_expression.exit.i

Parser_parse_bit_expression.exit.i:               ; preds = %Parser_advance.exit.i35.i, %1
  %43 = phi i64 [ %9, %1 ], [ %39, %Parser_advance.exit.i35.i ]
  %44 = phi i64 [ %4, %1 ], [ %32, %Parser_advance.exit.i35.i ]
  %cmp.1.i.i = phi ptr [ %2, %1 ], [ %22, %Parser_advance.exit.i35.i ]
  %45 = icmp eq i64 %44, 49
  %46 = icmp eq i64 %43, 0
  %47 = and i1 %45, %46
  br i1 %47, label %ifend.i.i, label %Parser_parse_range_expression.exit.i

ifend.i.i:                                        ; preds = %Parser_parse_bit_expression.exit.i
  %memberidx.i8.i.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %48 = load i64, ptr %memberidx.i8.i.i, align 4
  %49 = load ptr, ptr %0, align 8
  %memberidx2.i9.i.i = getelementptr inbounds %Array_Token_, ptr %49, i64 0, i32 2
  %50 = load i64, ptr %memberidx2.i9.i.i, align 4
  %51 = icmp slt i64 %48, %50
  br i1 %51, label %if.entry.i.i.i, label %Parser_advance.exit.i.i

if.entry.i.i.i:                                   ; preds = %ifend.i.i
  %52 = add nsw i64 %48, 1
  store i64 %52, ptr %memberidx.i8.i.i, align 4
  %memberidx.i.i.i14.i = getelementptr inbounds %Array_Token_, ptr %49, i64 0, i32 1
  %53 = load ptr, ptr %memberidx.i.i.i14.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %53, i64 %52
  %54 = load ptr, ptr %ptridx.i.i.i.i, align 8
  store ptr %54, ptr %memberidx.i.i19.i, align 8
  br label %Parser_advance.exit.i.i

Parser_advance.exit.i.i:                          ; preds = %if.entry.i.i.i, %ifend.i.i
  %55 = tail call ptr @malloc(i32 48)
  %56 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %57 = load ptr, ptr %cmp.1.i.i, align 8
  %58 = load ptr, ptr %56, align 8
  %59 = tail call ptr @malloc(i32 32)
  %60 = load i64, ptr %57, align 4
  %memberidx1.i.i.i15.i = getelementptr inbounds %FloRange, ptr %58, i64 0, i32 1
  %61 = load i64, ptr %memberidx1.i.i.i15.i, align 4
  %memberidx2.i.i.i16.i = getelementptr inbounds %FloRange, ptr %57, i64 0, i32 2
  %62 = load i64, ptr %memberidx2.i.i.i16.i, align 4
  %memberidx3.i.i.i17.i = getelementptr inbounds %FloRange, ptr %58, i64 0, i32 3
  %63 = load i64, ptr %memberidx3.i.i.i17.i, align 4
  store i64 %60, ptr %59, align 4
  %memberidx1.i.i.i.i.i = getelementptr inbounds %FloRange, ptr %59, i64 0, i32 1
  store i64 %61, ptr %memberidx1.i.i.i.i.i, align 4
  %memberidx2.i.i.i.i.i = getelementptr inbounds %FloRange, ptr %59, i64 0, i32 2
  store i64 %62, ptr %memberidx2.i.i.i.i.i, align 4
  %memberidx3.i.i.i.i.i = getelementptr inbounds %FloRange, ptr %59, i64 0, i32 3
  store i64 %63, ptr %memberidx3.i.i.i.i.i, align 4
  store ptr %59, ptr %55, align 8
  %memberidx.i.i.i.i.i = getelementptr inbounds %StatementNode, ptr %55, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i.i, align 4
  %memberidx.i.i11.i.i = getelementptr inbounds %ExpressionNode, ptr %55, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i11.i.i, align 4
  %memberidx2.i12.i.i = getelementptr inbounds %BinaryExpressionNode, ptr %55, i64 0, i32 3
  store ptr %cmp.1.i.i, ptr %memberidx2.i12.i.i, align 8
  %memberidx3.i13.i.i = getelementptr inbounds %BinaryExpressionNode, ptr %55, i64 0, i32 4
  store i64 31, ptr %memberidx3.i13.i.i, align 4
  %memberidx4.i.i.i = getelementptr inbounds %BinaryExpressionNode, ptr %55, i64 0, i32 5
  store ptr %56, ptr %memberidx4.i.i.i, align 8
  %.pre = load ptr, ptr %memberidx.i.i19.i, align 8
  %.pre85 = load i64, ptr %.pre, align 4
  br label %Parser_parse_range_expression.exit.i

Parser_parse_range_expression.exit.i:             ; preds = %Parser_advance.exit.i.i, %Parser_parse_bit_expression.exit.i
  %64 = phi i64 [ %.pre85, %Parser_advance.exit.i.i ], [ %44, %Parser_parse_bit_expression.exit.i ]
  %common.ret.op.i.i = phi ptr [ %55, %Parser_advance.exit.i.i ], [ %cmp.1.i.i, %Parser_parse_bit_expression.exit.i ]
  %.not.i = icmp eq i64 %64, 86
  br i1 %.not.i, label %ifend.i, label %Parser_parse_typecast_expression.exit

ifend.i:                                          ; preds = %Parser_parse_range_expression.exit.i
  %memberidx.i.i70 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %65 = load i64, ptr %memberidx.i.i70, align 4
  %66 = load ptr, ptr %0, align 8
  %memberidx2.i.i71 = getelementptr inbounds %Array_Token_, ptr %66, i64 0, i32 2
  %67 = load i64, ptr %memberidx2.i.i71, align 4
  %68 = icmp slt i64 %65, %67
  br i1 %68, label %if.entry.i.i75, label %Parser_advance.exit.i83

if.entry.i.i75:                                   ; preds = %ifend.i
  %69 = add nsw i64 %65, 1
  store i64 %69, ptr %memberidx.i.i70, align 4
  %memberidx.i.i.i73 = getelementptr inbounds %Array_Token_, ptr %66, i64 0, i32 1
  %70 = load ptr, ptr %memberidx.i.i.i73, align 8
  %ptridx.i.i.i74 = getelementptr inbounds ptr, ptr %70, i64 %69
  %71 = load ptr, ptr %ptridx.i.i.i74, align 8
  store ptr %71, ptr %memberidx.i.i19.i, align 8
  br label %Parser_advance.exit.i83

Parser_advance.exit.i83:                          ; preds = %if.entry.i.i75, %ifend.i
  %72 = tail call ptr @malloc(i32 40)
  %73 = tail call fastcc ptr @Parser_parse_type(ptr nonnull %0)
  %74 = load ptr, ptr %common.ret.op.i.i, align 8
  %75 = load ptr, ptr %73, align 8
  %76 = tail call ptr @malloc(i32 32)
  %77 = load i64, ptr %74, align 4
  %memberidx1.i.i.i76 = getelementptr inbounds %FloRange, ptr %75, i64 0, i32 1
  %78 = load i64, ptr %memberidx1.i.i.i76, align 4
  %memberidx2.i.i.i77 = getelementptr inbounds %FloRange, ptr %74, i64 0, i32 2
  %79 = load i64, ptr %memberidx2.i.i.i77, align 4
  %memberidx3.i.i.i78 = getelementptr inbounds %FloRange, ptr %75, i64 0, i32 3
  %80 = load i64, ptr %memberidx3.i.i.i78, align 4
  store i64 %77, ptr %76, align 4
  %memberidx1.i.i.i.i79 = getelementptr inbounds %FloRange, ptr %76, i64 0, i32 1
  store i64 %78, ptr %memberidx1.i.i.i.i79, align 4
  %memberidx2.i.i.i.i80 = getelementptr inbounds %FloRange, ptr %76, i64 0, i32 2
  store i64 %79, ptr %memberidx2.i.i.i.i80, align 4
  %memberidx3.i.i.i.i81 = getelementptr inbounds %FloRange, ptr %76, i64 0, i32 3
  store i64 %80, ptr %memberidx3.i.i.i.i81, align 4
  store ptr %76, ptr %72, align 8
  %memberidx.i.i.i.i82 = getelementptr inbounds %StatementNode, ptr %72, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i82, align 4
  %memberidx.i.i6.i = getelementptr inbounds %ExpressionNode, ptr %72, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i6.i, align 4
  %memberidx2.i7.i = getelementptr inbounds %TypeCastExpressionNode, ptr %72, i64 0, i32 3
  store ptr %common.ret.op.i.i, ptr %memberidx2.i7.i, align 8
  %memberidx3.i8.i = getelementptr inbounds %TypeCastExpressionNode, ptr %72, i64 0, i32 4
  store ptr %73, ptr %memberidx3.i8.i, align 8
  %.pre86 = load ptr, ptr %memberidx.i.i19.i, align 8
  %.pre87 = load i64, ptr %.pre86, align 4
  br label %Parser_parse_typecast_expression.exit

Parser_parse_typecast_expression.exit:            ; preds = %Parser_parse_range_expression.exit.i, %Parser_advance.exit.i83
  %81 = phi i64 [ %.pre87, %Parser_advance.exit.i83 ], [ %64, %Parser_parse_range_expression.exit.i ]
  %common.ret.op.i69 = phi ptr [ %72, %Parser_advance.exit.i83 ], [ %common.ret.op.i.i, %Parser_parse_range_expression.exit.i ]
  %82 = icmp eq i64 %81, 34
  %83 = load ptr, ptr %memberidx2.i.i20.i, align 8
  %memberidx3.i.i48 = getelementptr inbounds %Array_FloError_, ptr %83, i64 0, i32 2
  %84 = load i64, ptr %memberidx3.i.i48, align 4
  %85 = icmp eq i64 %84, 0
  %86 = and i1 %82, %85
  br i1 %86, label %ifend.i51, label %Parser_parse_ternary_expression.exit

ifend.i51:                                        ; preds = %Parser_parse_typecast_expression.exit
  %memberidx.i10.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %87 = load i64, ptr %memberidx.i10.i, align 4
  %88 = load ptr, ptr %0, align 8
  %memberidx2.i11.i = getelementptr inbounds %Array_Token_, ptr %88, i64 0, i32 2
  %89 = load i64, ptr %memberidx2.i11.i, align 4
  %90 = icmp slt i64 %87, %89
  br i1 %90, label %if.entry.i.i, label %Parser_advance.exit.i

if.entry.i.i:                                     ; preds = %ifend.i51
  %91 = add nsw i64 %87, 1
  store i64 %91, ptr %memberidx.i10.i, align 4
  %memberidx.i.i.i52 = getelementptr inbounds %Array_Token_, ptr %88, i64 0, i32 1
  %92 = load ptr, ptr %memberidx.i.i.i52, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %92, i64 %91
  %93 = load ptr, ptr %ptridx.i.i.i, align 8
  store ptr %93, ptr %memberidx.i.i19.i, align 8
  br label %Parser_advance.exit.i

Parser_advance.exit.i:                            ; preds = %if.entry.i.i, %ifend.i51
  %94 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %95 = tail call fastcc ptr @Parser_eat(ptr nonnull %0, i64 1)
  %96 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %97 = tail call ptr @malloc(i32 48)
  %98 = load ptr, ptr %common.ret.op.i69, align 8
  %99 = load ptr, ptr %96, align 8
  %100 = tail call ptr @malloc(i32 32)
  %101 = load i64, ptr %98, align 4
  %memberidx1.i.i.i53 = getelementptr inbounds %FloRange, ptr %99, i64 0, i32 1
  %102 = load i64, ptr %memberidx1.i.i.i53, align 4
  %memberidx2.i.i.i54 = getelementptr inbounds %FloRange, ptr %98, i64 0, i32 2
  %103 = load i64, ptr %memberidx2.i.i.i54, align 4
  %memberidx3.i.i.i55 = getelementptr inbounds %FloRange, ptr %99, i64 0, i32 3
  %104 = load i64, ptr %memberidx3.i.i.i55, align 4
  store i64 %101, ptr %100, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %FloRange, ptr %100, i64 0, i32 1
  store i64 %102, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %FloRange, ptr %100, i64 0, i32 2
  store i64 %103, ptr %memberidx2.i.i.i.i, align 4
  %memberidx3.i.i.i.i = getelementptr inbounds %FloRange, ptr %100, i64 0, i32 3
  store i64 %104, ptr %memberidx3.i.i.i.i, align 4
  store ptr %100, ptr %97, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %StatementNode, ptr %97, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i, align 4
  %memberidx.i.i13.i = getelementptr inbounds %ExpressionNode, ptr %97, i64 0, i32 2
  store i64 15, ptr %memberidx.i.i13.i, align 4
  %memberidx2.i14.i = getelementptr inbounds %TernaryExpressionNode, ptr %97, i64 0, i32 3
  store ptr %common.ret.op.i69, ptr %memberidx2.i14.i, align 8
  %memberidx3.i15.i = getelementptr inbounds %TernaryExpressionNode, ptr %97, i64 0, i32 4
  store ptr %94, ptr %memberidx3.i15.i, align 8
  %memberidx4.i.i = getelementptr inbounds %TernaryExpressionNode, ptr %97, i64 0, i32 5
  store ptr %96, ptr %memberidx4.i.i, align 8
  %105 = load ptr, ptr %94, align 8
  %106 = load ptr, ptr %96, align 8
  %107 = tail call ptr @malloc(i32 32)
  %108 = load i64, ptr %105, align 4
  %memberidx1.i15.i.i = getelementptr inbounds %FloRange, ptr %106, i64 0, i32 1
  %109 = load i64, ptr %memberidx1.i15.i.i, align 4
  %memberidx2.i16.i.i = getelementptr inbounds %FloRange, ptr %105, i64 0, i32 2
  %110 = load i64, ptr %memberidx2.i16.i.i, align 4
  %memberidx3.i17.i.i = getelementptr inbounds %FloRange, ptr %106, i64 0, i32 3
  %111 = load i64, ptr %memberidx3.i17.i.i, align 4
  store i64 %108, ptr %107, align 4
  %memberidx1.i.i18.i.i = getelementptr inbounds %FloRange, ptr %107, i64 0, i32 1
  store i64 %109, ptr %memberidx1.i.i18.i.i, align 4
  %memberidx2.i.i19.i.i = getelementptr inbounds %FloRange, ptr %107, i64 0, i32 2
  store i64 %110, ptr %memberidx2.i.i19.i.i, align 4
  %memberidx3.i.i20.i.i = getelementptr inbounds %FloRange, ptr %107, i64 0, i32 3
  store i64 %111, ptr %memberidx3.i.i20.i.i, align 4
  store ptr %107, ptr %97, align 8
  %.pre88 = load ptr, ptr %memberidx.i.i19.i, align 8
  %.pre89 = load i64, ptr %.pre88, align 4
  %.pre90 = load ptr, ptr %memberidx2.i.i20.i, align 8
  %memberidx3.i44.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %.pre90, i64 0, i32 2
  %.pre91 = load i64, ptr %memberidx3.i44.phi.trans.insert, align 4
  br label %Parser_parse_ternary_expression.exit

Parser_parse_ternary_expression.exit:             ; preds = %Parser_parse_typecast_expression.exit, %Parser_advance.exit.i
  %112 = phi i64 [ %.pre91, %Parser_advance.exit.i ], [ %84, %Parser_parse_typecast_expression.exit ]
  %113 = phi i64 [ %.pre89, %Parser_advance.exit.i ], [ %81, %Parser_parse_typecast_expression.exit ]
  %common.ret.op.i49 = phi ptr [ %97, %Parser_advance.exit.i ], [ %common.ret.op.i69, %Parser_parse_typecast_expression.exit ]
  %114 = icmp eq i64 %113, 82
  %115 = icmp eq i64 %112, 0
  %116 = and i1 %114, %115
  br i1 %116, label %if.entry, label %ifend

common.ret84.sink.split:                          ; preds = %Parser_advance.exit41, %Parser_advance.exit
  %.sink98 = phi ptr [ %145, %Parser_advance.exit ], [ %124, %Parser_advance.exit41 ]
  %common.ret.op.i.sink = phi i64 [ %common.ret.op.i, %Parser_advance.exit ], [ 18, %Parser_advance.exit41 ]
  %.sink = phi ptr [ %146, %Parser_advance.exit ], [ %125, %Parser_advance.exit41 ]
  %memberidx.i.i.i = getelementptr inbounds %StatementNode, ptr %.sink98, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i, align 4
  %memberidx.i.i = getelementptr inbounds %ExpressionNode, ptr %.sink98, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i, align 4
  %memberidx2.i = getelementptr inbounds %BinaryExpressionNode, ptr %.sink98, i64 0, i32 3
  store ptr %common.ret.op.i49, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %BinaryExpressionNode, ptr %.sink98, i64 0, i32 4
  store i64 %common.ret.op.i.sink, ptr %memberidx3.i, align 4
  %memberidx4.i = getelementptr inbounds %BinaryExpressionNode, ptr %.sink98, i64 0, i32 5
  store ptr %.sink, ptr %memberidx4.i, align 8
  br label %common.ret84

common.ret84:                                     ; preds = %common.ret84.sink.split, %Parser_is_assign_op.exit
  %common.ret84.op = phi ptr [ %common.ret.op.i49, %Parser_is_assign_op.exit ], [ %.sink98, %common.ret84.sink.split ]
  ret ptr %common.ret84.op

if.entry:                                         ; preds = %Parser_parse_ternary_expression.exit
  %memberidx.i34 = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %117 = load i64, ptr %memberidx.i34, align 4
  %118 = load ptr, ptr %0, align 8
  %memberidx2.i35 = getelementptr inbounds %Array_Token_, ptr %118, i64 0, i32 2
  %119 = load i64, ptr %memberidx2.i35, align 4
  %120 = icmp slt i64 %117, %119
  br i1 %120, label %if.entry.i39, label %Parser_advance.exit41

if.entry.i39:                                     ; preds = %if.entry
  %121 = add nsw i64 %117, 1
  store i64 %121, ptr %memberidx.i34, align 4
  %memberidx.i.i37 = getelementptr inbounds %Array_Token_, ptr %118, i64 0, i32 1
  %122 = load ptr, ptr %memberidx.i.i37, align 8
  %ptridx.i.i38 = getelementptr inbounds ptr, ptr %122, i64 %121
  %123 = load ptr, ptr %ptridx.i.i38, align 8
  store ptr %123, ptr %memberidx.i.i19.i, align 8
  br label %Parser_advance.exit41

Parser_advance.exit41:                            ; preds = %if.entry, %if.entry.i39
  %124 = tail call ptr @malloc(i32 48)
  %125 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %126 = load ptr, ptr %common.ret.op.i49, align 8
  %127 = load ptr, ptr %125, align 8
  %128 = tail call ptr @malloc(i32 32)
  %129 = load i64, ptr %126, align 4
  %memberidx1.i.i23 = getelementptr inbounds %FloRange, ptr %127, i64 0, i32 1
  %130 = load i64, ptr %memberidx1.i.i23, align 4
  %memberidx2.i.i24 = getelementptr inbounds %FloRange, ptr %126, i64 0, i32 2
  %131 = load i64, ptr %memberidx2.i.i24, align 4
  %memberidx3.i.i25 = getelementptr inbounds %FloRange, ptr %127, i64 0, i32 3
  %132 = load i64, ptr %memberidx3.i.i25, align 4
  store i64 %129, ptr %128, align 4
  %memberidx1.i.i.i26 = getelementptr inbounds %FloRange, ptr %128, i64 0, i32 1
  store i64 %130, ptr %memberidx1.i.i.i26, align 4
  %memberidx2.i.i.i27 = getelementptr inbounds %FloRange, ptr %128, i64 0, i32 2
  store i64 %131, ptr %memberidx2.i.i.i27, align 4
  %memberidx3.i.i.i28 = getelementptr inbounds %FloRange, ptr %128, i64 0, i32 3
  store i64 %132, ptr %memberidx3.i.i.i28, align 4
  store ptr %128, ptr %124, align 8
  br label %common.ret84.sink.split

ifend:                                            ; preds = %Parser_parse_ternary_expression.exit
  switch i64 %113, label %ifend51.i [
    i64 36, label %Parser_is_assign_op.exit
    i64 10, label %Parser_is_assign_op.exit.fold.split
    i64 11, label %Parser_is_assign_op.exit.fold.split59
    i64 12, label %Parser_is_assign_op.exit.fold.split60
    i64 13, label %Parser_is_assign_op.exit.fold.split61
    i64 14, label %Parser_is_assign_op.exit.fold.split62
    i64 15, label %Parser_is_assign_op.exit.fold.split63
    i64 16, label %Parser_is_assign_op.exit.fold.split64
    i64 17, label %Parser_is_assign_op.exit.fold.split65
    i64 18, label %Parser_is_assign_op.exit.fold.split66
    i64 20, label %Parser_is_assign_op.exit.fold.split67
  ]

ifend51.i:                                        ; preds = %ifend
  %133 = icmp eq i64 %113, 19
  %spec.select.i = select i1 %133, i64 30, i64 0
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split:              ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split59:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split60:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split61:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split62:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split63:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split64:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split65:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split66:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit.fold.split67:            ; preds = %ifend
  br label %Parser_is_assign_op.exit

Parser_is_assign_op.exit:                         ; preds = %ifend, %Parser_is_assign_op.exit.fold.split67, %Parser_is_assign_op.exit.fold.split66, %Parser_is_assign_op.exit.fold.split65, %Parser_is_assign_op.exit.fold.split64, %Parser_is_assign_op.exit.fold.split63, %Parser_is_assign_op.exit.fold.split62, %Parser_is_assign_op.exit.fold.split61, %Parser_is_assign_op.exit.fold.split60, %Parser_is_assign_op.exit.fold.split59, %Parser_is_assign_op.exit.fold.split, %ifend51.i
  %common.ret.op.i = phi i64 [ 19, %ifend ], [ %spec.select.i, %ifend51.i ], [ 22, %Parser_is_assign_op.exit.fold.split ], [ 21, %Parser_is_assign_op.exit.fold.split59 ], [ 20, %Parser_is_assign_op.exit.fold.split60 ], [ 23, %Parser_is_assign_op.exit.fold.split61 ], [ 24, %Parser_is_assign_op.exit.fold.split62 ], [ 25, %Parser_is_assign_op.exit.fold.split63 ], [ 26, %Parser_is_assign_op.exit.fold.split64 ], [ 27, %Parser_is_assign_op.exit.fold.split65 ], [ 28, %Parser_is_assign_op.exit.fold.split66 ], [ 29, %Parser_is_assign_op.exit.fold.split67 ]
  %134 = icmp ne i64 %common.ret.op.i, 0
  %135 = icmp ne i64 %113, 44
  %136 = and i1 %135, %115
  %137 = and i1 %136, %134
  br i1 %137, label %ifend4, label %common.ret84

ifend4:                                           ; preds = %Parser_is_assign_op.exit
  %memberidx.i = getelementptr inbounds %Parser, ptr %0, i64 0, i32 3
  %138 = load i64, ptr %memberidx.i, align 4
  %139 = load ptr, ptr %0, align 8
  %memberidx2.i16 = getelementptr inbounds %Array_Token_, ptr %139, i64 0, i32 2
  %140 = load i64, ptr %memberidx2.i16, align 4
  %141 = icmp slt i64 %138, %140
  br i1 %141, label %if.entry.i, label %Parser_advance.exit

if.entry.i:                                       ; preds = %ifend4
  %142 = add nsw i64 %138, 1
  store i64 %142, ptr %memberidx.i, align 4
  %memberidx.i.i18 = getelementptr inbounds %Array_Token_, ptr %139, i64 0, i32 1
  %143 = load ptr, ptr %memberidx.i.i18, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %143, i64 %142
  %144 = load ptr, ptr %ptridx.i.i, align 8
  store ptr %144, ptr %memberidx.i.i19.i, align 8
  br label %Parser_advance.exit

Parser_advance.exit:                              ; preds = %ifend4, %if.entry.i
  %145 = tail call ptr @malloc(i32 48)
  %146 = tail call fastcc ptr @Parser_parse_expression(ptr nonnull %0)
  %147 = load ptr, ptr %common.ret.op.i49, align 8
  %148 = load ptr, ptr %146, align 8
  %149 = tail call ptr @malloc(i32 32)
  %150 = load i64, ptr %147, align 4
  %memberidx1.i.i = getelementptr inbounds %FloRange, ptr %148, i64 0, i32 1
  %151 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %FloRange, ptr %147, i64 0, i32 2
  %152 = load i64, ptr %memberidx2.i.i, align 4
  %memberidx3.i.i = getelementptr inbounds %FloRange, ptr %148, i64 0, i32 3
  %153 = load i64, ptr %memberidx3.i.i, align 4
  store i64 %150, ptr %149, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %149, i64 0, i32 1
  store i64 %151, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %149, i64 0, i32 2
  store i64 %152, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %149, i64 0, i32 3
  store i64 %153, ptr %memberidx3.i.i.i, align 4
  store ptr %149, ptr %145, align 8
  br label %common.ret84.sink.split
}

define internal void @Map_string_VarId__set(ptr %0, ptr %1, ptr %2) {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Map_string_VarId_, ptr %0, i64 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = sitofp i64 %5 to double
  %memberidx1 = getelementptr inbounds %Map_string_VarId_, ptr %0, i64 0, i32 3
  %7 = load i64, ptr %memberidx1, align 4
  %8 = sitofp i64 %7 to double
  %9 = fdiv double %6, %8
  %10 = fcmp ogt double %9, 7.500000e-01
  br i1 %10, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %11 = load ptr, ptr %0, align 8
  %memberidx.i36 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx.i36, align 8
  %13 = tail call ptr %12(ptr nonnull %0)
  %14 = load i64, ptr %memberidx1, align 4
  %15 = shl i64 %14, 1
  store i64 %15, ptr %memberidx1, align 4
  store i64 0, ptr %memberidx, align 4
  %memberidx4.i = getelementptr inbounds %Map_string_VarId_, ptr %0, i64 0, i32 1
  %16 = load ptr, ptr %memberidx4.i, align 8
  %17 = shl i64 %14, 4
  %18 = tail call ptr @realloc(ptr %16, i64 %17)
  store ptr %18, ptr %memberidx4.i, align 8
  %19 = load i64, ptr %memberidx1, align 4
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %for.body.i40, label %for.cond11.preheader.i

for.cond11.preheader.i:                           ; preds = %for.body.i40, %if.entry
  %memberidx15.i = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %13, i64 0, i32 2
  %21 = load i64, ptr %memberidx15.i, align 4
  %22 = icmp sgt i64 %21, 0
  br i1 %22, label %for.body12.lr.ph.i, label %ifend

for.body12.lr.ph.i:                               ; preds = %for.cond11.preheader.i
  %memberidx.i32.i = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %13, i64 0, i32 1
  br label %for.body12.i

for.body.i40:                                     ; preds = %if.entry, %for.body.i40
  %i.036.i = phi i64 [ %25, %for.body.i40 ], [ 0, %if.entry ]
  %23 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %23, i64 %i.036.i
  %24 = tail call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_VarId_, ptr %24, align 8
  %memberidx.i.i39 = getelementptr inbounds %Bucket_string_VarId_, ptr %24, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i39, align 1
  store ptr %24, ptr %ptridx.i, align 8
  %25 = add nuw nsw i64 %i.036.i, 1
  %26 = load i64, ptr %memberidx1, align 4
  %27 = icmp slt i64 %25, %26
  br i1 %27, label %for.body.i40, label %for.cond11.preheader.i

for.body12.i:                                     ; preds = %for.body12.i, %for.body12.lr.ph.i
  %storemerge35.i = phi i64 [ 0, %for.body12.lr.ph.i ], [ %34, %for.body12.i ]
  %28 = load ptr, ptr %0, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %memberidx.i32.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %30, i64 %storemerge35.i
  %31 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx17.i = getelementptr inbounds %Bucket_string_VarId_, ptr %31, i64 0, i32 1
  %32 = load ptr, ptr %memberidx17.i, align 8
  %memberidx18.i = getelementptr inbounds %Bucket_string_VarId_, ptr %31, i64 0, i32 2
  %33 = load ptr, ptr %memberidx18.i, align 8
  tail call void %29(ptr nonnull %0, ptr %32, ptr %33)
  %34 = add nuw nsw i64 %storemerge35.i, 1
  %35 = load i64, ptr %memberidx15.i, align 4
  %36 = icmp slt i64 %34, %35
  br i1 %36, label %for.body12.i, label %ifend

ifend:                                            ; preds = %for.body12.i, %for.cond11.preheader.i, %3
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %37 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %37, i64 0, i32 5
  %38 = load ptr, ptr %memberidx.i, align 8
  %39 = tail call ptr %38(ptr nonnull %1)
  %40 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %39)
  %41 = load ptr, ptr %4, align 8
  %42 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %42, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 1
  store ptr %41, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 2
  store i64 %40, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 3
  store i64 %40, ptr %memberidx2.i.i, align 4
  call void @free(ptr %39)
  %43 = load i64, ptr %memberidx1.i.i, align 4
  %44 = icmp sgt i64 %43, 0
  br i1 %44, label %for.body.i, label %Map_string_VarId__hash_fnc.exit

for.body.i:                                       ; preds = %ifend, %for.body.i
  %i.0.i42 = phi i64 [ %51, %for.body.i ], [ 0, %ifend ]
  %hash.0.i41 = phi i64 [ %50, %for.body.i ], [ 0, %ifend ]
  %45 = shl i64 %hash.0.i41, 1
  %46 = load ptr, ptr %42, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i64 0, i32 2
  %47 = load ptr, ptr %memberidx2.i, align 8
  %48 = call i8 %47(ptr nonnull %42, i64 %i.0.i42)
  %49 = sext i8 %48 to i64
  %50 = add i64 %45, %49
  %51 = add nuw nsw i64 %i.0.i42, 1
  %52 = load i64, ptr %memberidx1.i.i, align 4
  %53 = icmp slt i64 %51, %52
  br i1 %53, label %for.body.i, label %Map_string_VarId__hash_fnc.exit

Map_string_VarId__hash_fnc.exit:                  ; preds = %for.body.i, %ifend
  %hash.0.i.lcssa = phi i64 [ 0, %ifend ], [ %50, %for.body.i ]
  %54 = call i64 @llvm.abs.i64(i64 %hash.0.i.lcssa, i1 false)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %55 = load i64, ptr %memberidx1, align 4
  %56 = srem i64 %54, %55
  %memberidx3 = getelementptr inbounds %Map_string_VarId_, ptr %0, i64 0, i32 1
  %57 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %57, i64 %56
  %58 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_VarId_, ptr %58, i64 0, i32 3
  %59 = load i1, ptr %memberidx4, align 1
  br i1 %59, label %while.end, label %while.entry.preheader

while.entry.preheader:                            ; preds = %Map_string_VarId__hash_fnc.exit
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend10
  %60 = phi ptr [ %57, %while.entry.preheader ], [ %78, %ifend10 ]
  %61 = phi i64 [ %55, %while.entry.preheader ], [ %79, %ifend10 ]
  %62 = phi ptr [ %58, %while.entry.preheader ], [ %82, %ifend10 ]
  %63 = phi i64 [ %56, %while.entry.preheader ], [ %81, %ifend10 ]
  %memberidx7 = getelementptr inbounds %Bucket_string_VarId_, ptr %62, i64 0, i32 1
  %64 = load ptr, ptr %memberidx7, align 8
  %memberidx.i33 = getelementptr inbounds %string, ptr %64, i64 0, i32 2
  %65 = load i64, ptr %memberidx.i33, align 4
  %66 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %65, %66
  br i1 %.not.i, label %ifend.i, label %ifend10

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i35 = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %67 = load ptr, ptr %memberidx2.i35, align 8
  %68 = load ptr, ptr %memberidx3.i, align 8
  %69 = call i64 @memcmp(ptr %67, ptr %68, i64 %65)
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %ifend.i.while.end.loopexit_crit_edge, label %ifend.i.ifend10_crit_edge

ifend.i.while.end.loopexit_crit_edge:             ; preds = %ifend.i
  %.pre44.pre = load ptr, ptr %memberidx3, align 8
  br label %while.end

ifend.i.ifend10_crit_edge:                        ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx1, align 4
  %.pre43 = load ptr, ptr %memberidx3, align 8
  br label %ifend10

while.end:                                        ; preds = %ifend10, %ifend.i.while.end.loopexit_crit_edge, %Map_string_VarId__hash_fnc.exit
  %71 = phi ptr [ %57, %Map_string_VarId__hash_fnc.exit ], [ %.pre44.pre, %ifend.i.while.end.loopexit_crit_edge ], [ %78, %ifend10 ]
  %72 = phi i64 [ %56, %Map_string_VarId__hash_fnc.exit ], [ %63, %ifend.i.while.end.loopexit_crit_edge ], [ %81, %ifend10 ]
  %73 = load i64, ptr %memberidx, align 4
  %74 = add i64 %73, 1
  store i64 %74, ptr %memberidx, align 4
  %ptridx18 = getelementptr inbounds ptr, ptr %71, i64 %72
  %75 = load ptr, ptr %ptridx18, align 8
  %76 = load ptr, ptr %75, align 8
  %77 = load ptr, ptr %76, align 8
  call void %77(ptr nonnull %75, ptr nonnull %1, ptr %2)
  ret void

ifend10:                                          ; preds = %ifend.i.ifend10_crit_edge, %while.entry
  %78 = phi ptr [ %.pre43, %ifend.i.ifend10_crit_edge ], [ %60, %while.entry ]
  %79 = phi i64 [ %.pre, %ifend.i.ifend10_crit_edge ], [ %61, %while.entry ]
  %80 = add i64 %63, 1
  %81 = srem i64 %80, %79
  %ptridx13 = getelementptr inbounds ptr, ptr %78, i64 %81
  %82 = load ptr, ptr %ptridx13, align 8
  %memberidx14 = getelementptr inbounds %Bucket_string_VarId_, ptr %82, i64 0, i32 3
  %83 = load i1, ptr %memberidx14, align 1
  br i1 %83, label %while.end, label %while.entry
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind willreturn writeonly
define internal void @Bucket_string_VarId__set(ptr nocapture writeonly %0, ptr %1, ptr %2) #8 {
  %memberidx = getelementptr inbounds %Bucket_string_VarId_, ptr %0, i64 0, i32 3
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %Bucket_string_VarId_, ptr %0, i64 0, i32 1
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_VarId_, ptr %0, i64 0, i32 2
  store ptr %2, ptr %memberidx2, align 8
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Bucket_string_VarId___find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal noalias ptr @Map_string_VarId__get_buckets(ptr nocapture readonly %0) {
for.entry:
  %1 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Bucket_string_VarId__, ptr %1, align 8
  %memberidx.i = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %1, i64 0, i32 2
  %memberidx1.i = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %1, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_Bucket_string_VarId__, ptr %1, i64 0, i32 1
  %2 = tail call ptr @malloc(i32 64)
  store ptr %2, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %memberidx2 = getelementptr inbounds %Map_string_VarId_, ptr %0, i64 0, i32 3
  %3 = load i64, ptr %memberidx2, align 4
  %4 = icmp sgt i64 %3, 0
  br i1 %4, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx3 = getelementptr inbounds %Map_string_VarId_, ptr %0, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %5 = phi i64 [ %3, %for.body.lr.ph ], [ %19, %ifend ]
  %6 = phi ptr [ %2, %for.body.lr.ph ], [ %20, %ifend ]
  %7 = phi ptr [ %2, %for.body.lr.ph ], [ %21, %ifend ]
  %8 = phi i64 [ 8, %for.body.lr.ph ], [ %22, %ifend ]
  %9 = phi i64 [ 0, %for.body.lr.ph ], [ %23, %ifend ]
  %i.011 = phi i64 [ 0, %for.body.lr.ph ], [ %24, %ifend ]
  %10 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %i.011
  %11 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_VarId_, ptr %11, i64 0, i32 3
  %12 = load i1, ptr %memberidx4, align 1
  br i1 %12, label %ifend, label %if.entry

for.end:                                          ; preds = %ifend, %for.entry
  ret ptr %1

if.entry:                                         ; preds = %for.body
  %.not.i = icmp slt i64 %9, %8
  br i1 %.not.i, label %Array_Bucket_string_VarId_____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %if.entry
  %13 = shl i64 %8, 1
  store i64 %13, ptr %memberidx1.i, align 4
  %14 = shl i64 %8, 4
  %15 = tail call ptr @realloc(ptr %7, i64 %14)
  store ptr %15, ptr %memberidx2.i, align 8
  br label %Array_Bucket_string_VarId_____sl__.exit

Array_Bucket_string_VarId_____sl__.exit:          ; preds = %if.entry, %if.entry.i
  %16 = phi ptr [ %6, %if.entry ], [ %15, %if.entry.i ]
  %17 = phi i64 [ %8, %if.entry ], [ %13, %if.entry.i ]
  %18 = add i64 %9, 1
  store i64 %18, ptr %memberidx.i, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %16, i64 %9
  store ptr %11, ptr %ptridx.i, align 8
  %.pre = load i64, ptr %memberidx2, align 4
  br label %ifend

ifend:                                            ; preds = %for.body, %Array_Bucket_string_VarId_____sl__.exit
  %19 = phi i64 [ %5, %for.body ], [ %.pre, %Array_Bucket_string_VarId_____sl__.exit ]
  %20 = phi ptr [ %6, %for.body ], [ %16, %Array_Bucket_string_VarId_____sl__.exit ]
  %21 = phi ptr [ %7, %for.body ], [ %16, %Array_Bucket_string_VarId_____sl__.exit ]
  %22 = phi i64 [ %8, %for.body ], [ %17, %Array_Bucket_string_VarId_____sl__.exit ]
  %23 = phi i64 [ %9, %for.body ], [ %18, %Array_Bucket_string_VarId_____sl__.exit ]
  %24 = add nuw nsw i64 %i.011, 1
  %25 = icmp slt i64 %24, %19
  br i1 %25, label %for.body, label %for.end
}

define internal ptr @Map_string_VarId__get(ptr nocapture readonly %0, ptr %1) {
  %3 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %4 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i64 0, i32 5
  %5 = load ptr, ptr %memberidx.i, align 8
  %6 = tail call ptr %5(ptr nonnull %1)
  %7 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @22, ptr %6)
  %8 = load ptr, ptr %3, align 8
  %9 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %9, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 1
  store ptr %8, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 2
  store i64 %7, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 3
  store i64 %7, ptr %memberidx2.i.i, align 4
  call void @free(ptr %6)
  %10 = load i64, ptr %memberidx1.i.i, align 4
  %11 = icmp sgt i64 %10, 0
  br i1 %11, label %for.body.i, label %Map_string_VarId__hash_fnc.exit

for.body.i:                                       ; preds = %2, %for.body.i
  %i.0.i36 = phi i64 [ %18, %for.body.i ], [ 0, %2 ]
  %hash.0.i35 = phi i64 [ %17, %for.body.i ], [ 0, %2 ]
  %12 = shl i64 %hash.0.i35, 1
  %13 = load ptr, ptr %9, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i64 0, i32 2
  %14 = load ptr, ptr %memberidx2.i, align 8
  %15 = call i8 %14(ptr nonnull %9, i64 %i.0.i36)
  %16 = sext i8 %15 to i64
  %17 = add i64 %12, %16
  %18 = add nuw nsw i64 %i.0.i36, 1
  %19 = load i64, ptr %memberidx1.i.i, align 4
  %20 = icmp slt i64 %18, %19
  br i1 %20, label %for.body.i, label %Map_string_VarId__hash_fnc.exit

Map_string_VarId__hash_fnc.exit:                  ; preds = %for.body.i, %2
  %hash.0.i.lcssa = phi i64 [ 0, %2 ], [ %17, %for.body.i ]
  %21 = call i64 @llvm.abs.i64(i64 %hash.0.i.lcssa, i1 false)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %memberidx = getelementptr inbounds %Map_string_VarId_, ptr %0, i64 0, i32 3
  %22 = load i64, ptr %memberidx, align 4
  %23 = srem i64 %21, %22
  %memberidx1 = getelementptr inbounds %Map_string_VarId_, ptr %0, i64 0, i32 1
  %24 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %24, i64 %23
  %25 = load ptr, ptr %ptridx, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_VarId_, ptr %25, i64 0, i32 3
  %26 = load i1, ptr %memberidx2, align 1
  br i1 %26, label %common.ret, label %while.entry.preheader

while.entry.preheader:                            ; preds = %Map_string_VarId__hash_fnc.exit
  %memberidx1.i33 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %else
  %27 = phi ptr [ %37, %else ], [ %24, %while.entry.preheader ]
  %28 = phi i64 [ %38, %else ], [ %22, %while.entry.preheader ]
  %29 = phi ptr [ %41, %else ], [ %25, %while.entry.preheader ]
  %hash.0 = phi i64 [ %40, %else ], [ %23, %while.entry.preheader ]
  %memberidx5 = getelementptr inbounds %Bucket_string_VarId_, ptr %29, i64 0, i32 1
  %30 = load ptr, ptr %memberidx5, align 8
  %memberidx.i32 = getelementptr inbounds %string, ptr %30, i64 0, i32 2
  %31 = load i64, ptr %memberidx.i32, align 4
  %32 = load i64, ptr %memberidx1.i33, align 4
  %.not.i = icmp eq i64 %31, %32
  br i1 %.not.i, label %ifend.i, label %else

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i34 = getelementptr inbounds %string, ptr %30, i64 0, i32 1
  %33 = load ptr, ptr %memberidx2.i34, align 8
  %34 = load ptr, ptr %memberidx3.i, align 8
  %35 = call i64 @memcmp(ptr %33, ptr %34, i64 %31)
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %while.end, label %ifend.i.else_crit_edge

ifend.i.else_crit_edge:                           ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx, align 4
  %.pre37 = load ptr, ptr %memberidx1, align 8
  br label %else

while.end:                                        ; preds = %ifend.i
  %.pre38.pre = load ptr, ptr %memberidx1, align 8
  %ptridx11.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre38.pre, i64 %hash.0
  %.pre39.pre = load ptr, ptr %ptridx11.phi.trans.insert.phi.trans.insert, align 8
  %memberidx12.phi.trans.insert.phi.trans.insert = getelementptr inbounds %Bucket_string_VarId_, ptr %.pre39.pre, i64 0, i32 3
  %.pre40.pre = load i1, ptr %memberidx12.phi.trans.insert.phi.trans.insert, align 1
  br i1 %.pre40.pre, label %common.ret, label %if.entry13

else:                                             ; preds = %ifend.i.else_crit_edge, %while.entry
  %37 = phi ptr [ %.pre37, %ifend.i.else_crit_edge ], [ %27, %while.entry ]
  %38 = phi i64 [ %.pre, %ifend.i.else_crit_edge ], [ %28, %while.entry ]
  %39 = add i64 %hash.0, 1
  %40 = srem i64 %39, %38
  %ptridx8 = getelementptr inbounds ptr, ptr %37, i64 %40
  %41 = load ptr, ptr %ptridx8, align 8
  %memberidx9 = getelementptr inbounds %Bucket_string_VarId_, ptr %41, i64 0, i32 3
  %42 = load i1, ptr %memberidx9, align 1
  br i1 %42, label %common.ret, label %while.entry

common.ret:                                       ; preds = %else, %Map_string_VarId__hash_fnc.exit, %while.end, %if.entry13
  %common.ret.op = phi ptr [ %43, %if.entry13 ], [ null, %while.end ], [ null, %Map_string_VarId__hash_fnc.exit ], [ null, %else ]
  ret ptr %common.ret.op

if.entry13:                                       ; preds = %while.end
  %memberidx18 = getelementptr inbounds %Bucket_string_VarId_, ptr %.pre39.pre, i64 0, i32 2
  %43 = load ptr, ptr %memberidx18, align 8
  br label %common.ret
}

define internal void @Map_string_EnumId__set(ptr %0, ptr %1, ptr %2) {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Map_string_EnumId_, ptr %0, i64 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = sitofp i64 %5 to double
  %memberidx1 = getelementptr inbounds %Map_string_EnumId_, ptr %0, i64 0, i32 3
  %7 = load i64, ptr %memberidx1, align 4
  %8 = sitofp i64 %7 to double
  %9 = fdiv double %6, %8
  %10 = fcmp ogt double %9, 7.500000e-01
  br i1 %10, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %11 = load ptr, ptr %0, align 8
  %memberidx.i36 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx.i36, align 8
  %13 = tail call ptr %12(ptr nonnull %0)
  %14 = load i64, ptr %memberidx1, align 4
  %15 = shl i64 %14, 1
  store i64 %15, ptr %memberidx1, align 4
  store i64 0, ptr %memberidx, align 4
  %memberidx4.i = getelementptr inbounds %Map_string_EnumId_, ptr %0, i64 0, i32 1
  %16 = load ptr, ptr %memberidx4.i, align 8
  %17 = shl i64 %14, 4
  %18 = tail call ptr @realloc(ptr %16, i64 %17)
  store ptr %18, ptr %memberidx4.i, align 8
  %19 = load i64, ptr %memberidx1, align 4
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %for.body.i40, label %for.cond11.preheader.i

for.cond11.preheader.i:                           ; preds = %for.body.i40, %if.entry
  %memberidx15.i = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %13, i64 0, i32 2
  %21 = load i64, ptr %memberidx15.i, align 4
  %22 = icmp sgt i64 %21, 0
  br i1 %22, label %for.body12.lr.ph.i, label %ifend

for.body12.lr.ph.i:                               ; preds = %for.cond11.preheader.i
  %memberidx.i32.i = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %13, i64 0, i32 1
  br label %for.body12.i

for.body.i40:                                     ; preds = %if.entry, %for.body.i40
  %i.036.i = phi i64 [ %25, %for.body.i40 ], [ 0, %if.entry ]
  %23 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %23, i64 %i.036.i
  %24 = tail call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_EnumId_, ptr %24, align 8
  %memberidx.i.i39 = getelementptr inbounds %Bucket_string_EnumId_, ptr %24, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i39, align 1
  store ptr %24, ptr %ptridx.i, align 8
  %25 = add nuw nsw i64 %i.036.i, 1
  %26 = load i64, ptr %memberidx1, align 4
  %27 = icmp slt i64 %25, %26
  br i1 %27, label %for.body.i40, label %for.cond11.preheader.i

for.body12.i:                                     ; preds = %for.body12.i, %for.body12.lr.ph.i
  %storemerge35.i = phi i64 [ 0, %for.body12.lr.ph.i ], [ %34, %for.body12.i ]
  %28 = load ptr, ptr %0, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %memberidx.i32.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %30, i64 %storemerge35.i
  %31 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx17.i = getelementptr inbounds %Bucket_string_EnumId_, ptr %31, i64 0, i32 1
  %32 = load ptr, ptr %memberidx17.i, align 8
  %memberidx18.i = getelementptr inbounds %Bucket_string_EnumId_, ptr %31, i64 0, i32 2
  %33 = load ptr, ptr %memberidx18.i, align 8
  tail call void %29(ptr nonnull %0, ptr %32, ptr %33)
  %34 = add nuw nsw i64 %storemerge35.i, 1
  %35 = load i64, ptr %memberidx15.i, align 4
  %36 = icmp slt i64 %34, %35
  br i1 %36, label %for.body12.i, label %ifend

ifend:                                            ; preds = %for.body12.i, %for.cond11.preheader.i, %3
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %37 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %37, i64 0, i32 5
  %38 = load ptr, ptr %memberidx.i, align 8
  %39 = tail call ptr %38(ptr nonnull %1)
  %40 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %39)
  %41 = load ptr, ptr %4, align 8
  %42 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %42, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 1
  store ptr %41, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 2
  store i64 %40, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 3
  store i64 %40, ptr %memberidx2.i.i, align 4
  call void @free(ptr %39)
  %43 = load i64, ptr %memberidx1.i.i, align 4
  %44 = icmp sgt i64 %43, 0
  br i1 %44, label %for.body.i, label %Map_string_EnumId__hash_fnc.exit

for.body.i:                                       ; preds = %ifend, %for.body.i
  %i.0.i42 = phi i64 [ %51, %for.body.i ], [ 0, %ifend ]
  %hash.0.i41 = phi i64 [ %50, %for.body.i ], [ 0, %ifend ]
  %45 = shl i64 %hash.0.i41, 1
  %46 = load ptr, ptr %42, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i64 0, i32 2
  %47 = load ptr, ptr %memberidx2.i, align 8
  %48 = call i8 %47(ptr nonnull %42, i64 %i.0.i42)
  %49 = sext i8 %48 to i64
  %50 = add i64 %45, %49
  %51 = add nuw nsw i64 %i.0.i42, 1
  %52 = load i64, ptr %memberidx1.i.i, align 4
  %53 = icmp slt i64 %51, %52
  br i1 %53, label %for.body.i, label %Map_string_EnumId__hash_fnc.exit

Map_string_EnumId__hash_fnc.exit:                 ; preds = %for.body.i, %ifend
  %hash.0.i.lcssa = phi i64 [ 0, %ifend ], [ %50, %for.body.i ]
  %54 = call i64 @llvm.abs.i64(i64 %hash.0.i.lcssa, i1 false)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %55 = load i64, ptr %memberidx1, align 4
  %56 = srem i64 %54, %55
  %memberidx3 = getelementptr inbounds %Map_string_EnumId_, ptr %0, i64 0, i32 1
  %57 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %57, i64 %56
  %58 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_EnumId_, ptr %58, i64 0, i32 3
  %59 = load i1, ptr %memberidx4, align 1
  br i1 %59, label %while.end, label %while.entry.preheader

while.entry.preheader:                            ; preds = %Map_string_EnumId__hash_fnc.exit
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend10
  %60 = phi ptr [ %57, %while.entry.preheader ], [ %78, %ifend10 ]
  %61 = phi i64 [ %55, %while.entry.preheader ], [ %79, %ifend10 ]
  %62 = phi ptr [ %58, %while.entry.preheader ], [ %82, %ifend10 ]
  %63 = phi i64 [ %56, %while.entry.preheader ], [ %81, %ifend10 ]
  %memberidx7 = getelementptr inbounds %Bucket_string_EnumId_, ptr %62, i64 0, i32 1
  %64 = load ptr, ptr %memberidx7, align 8
  %memberidx.i33 = getelementptr inbounds %string, ptr %64, i64 0, i32 2
  %65 = load i64, ptr %memberidx.i33, align 4
  %66 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %65, %66
  br i1 %.not.i, label %ifend.i, label %ifend10

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i35 = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %67 = load ptr, ptr %memberidx2.i35, align 8
  %68 = load ptr, ptr %memberidx3.i, align 8
  %69 = call i64 @memcmp(ptr %67, ptr %68, i64 %65)
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %ifend.i.while.end.loopexit_crit_edge, label %ifend.i.ifend10_crit_edge

ifend.i.while.end.loopexit_crit_edge:             ; preds = %ifend.i
  %.pre44.pre = load ptr, ptr %memberidx3, align 8
  br label %while.end

ifend.i.ifend10_crit_edge:                        ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx1, align 4
  %.pre43 = load ptr, ptr %memberidx3, align 8
  br label %ifend10

while.end:                                        ; preds = %ifend10, %ifend.i.while.end.loopexit_crit_edge, %Map_string_EnumId__hash_fnc.exit
  %71 = phi ptr [ %57, %Map_string_EnumId__hash_fnc.exit ], [ %.pre44.pre, %ifend.i.while.end.loopexit_crit_edge ], [ %78, %ifend10 ]
  %72 = phi i64 [ %56, %Map_string_EnumId__hash_fnc.exit ], [ %63, %ifend.i.while.end.loopexit_crit_edge ], [ %81, %ifend10 ]
  %73 = load i64, ptr %memberidx, align 4
  %74 = add i64 %73, 1
  store i64 %74, ptr %memberidx, align 4
  %ptridx18 = getelementptr inbounds ptr, ptr %71, i64 %72
  %75 = load ptr, ptr %ptridx18, align 8
  %76 = load ptr, ptr %75, align 8
  %77 = load ptr, ptr %76, align 8
  call void %77(ptr nonnull %75, ptr nonnull %1, ptr %2)
  ret void

ifend10:                                          ; preds = %ifend.i.ifend10_crit_edge, %while.entry
  %78 = phi ptr [ %.pre43, %ifend.i.ifend10_crit_edge ], [ %60, %while.entry ]
  %79 = phi i64 [ %.pre, %ifend.i.ifend10_crit_edge ], [ %61, %while.entry ]
  %80 = add i64 %63, 1
  %81 = srem i64 %80, %79
  %ptridx13 = getelementptr inbounds ptr, ptr %78, i64 %81
  %82 = load ptr, ptr %ptridx13, align 8
  %memberidx14 = getelementptr inbounds %Bucket_string_EnumId_, ptr %82, i64 0, i32 3
  %83 = load i1, ptr %memberidx14, align 1
  br i1 %83, label %while.end, label %while.entry
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind willreturn writeonly
define internal void @Bucket_string_EnumId__set(ptr nocapture writeonly %0, ptr %1, ptr %2) #8 {
  %memberidx = getelementptr inbounds %Bucket_string_EnumId_, ptr %0, i64 0, i32 3
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %Bucket_string_EnumId_, ptr %0, i64 0, i32 1
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_EnumId_, ptr %0, i64 0, i32 2
  store ptr %2, ptr %memberidx2, align 8
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Bucket_string_EnumId___find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal noalias ptr @Map_string_EnumId__get_buckets(ptr nocapture readonly %0) {
for.entry:
  %1 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Bucket_string_EnumId__, ptr %1, align 8
  %memberidx.i = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %1, i64 0, i32 2
  %memberidx1.i = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %1, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_Bucket_string_EnumId__, ptr %1, i64 0, i32 1
  %2 = tail call ptr @malloc(i32 64)
  store ptr %2, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %memberidx2 = getelementptr inbounds %Map_string_EnumId_, ptr %0, i64 0, i32 3
  %3 = load i64, ptr %memberidx2, align 4
  %4 = icmp sgt i64 %3, 0
  br i1 %4, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx3 = getelementptr inbounds %Map_string_EnumId_, ptr %0, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %5 = phi i64 [ %3, %for.body.lr.ph ], [ %19, %ifend ]
  %6 = phi ptr [ %2, %for.body.lr.ph ], [ %20, %ifend ]
  %7 = phi ptr [ %2, %for.body.lr.ph ], [ %21, %ifend ]
  %8 = phi i64 [ 8, %for.body.lr.ph ], [ %22, %ifend ]
  %9 = phi i64 [ 0, %for.body.lr.ph ], [ %23, %ifend ]
  %i.011 = phi i64 [ 0, %for.body.lr.ph ], [ %24, %ifend ]
  %10 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %i.011
  %11 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_EnumId_, ptr %11, i64 0, i32 3
  %12 = load i1, ptr %memberidx4, align 1
  br i1 %12, label %ifend, label %if.entry

for.end:                                          ; preds = %ifend, %for.entry
  ret ptr %1

if.entry:                                         ; preds = %for.body
  %.not.i = icmp slt i64 %9, %8
  br i1 %.not.i, label %Array_Bucket_string_EnumId_____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %if.entry
  %13 = shl i64 %8, 1
  store i64 %13, ptr %memberidx1.i, align 4
  %14 = shl i64 %8, 4
  %15 = tail call ptr @realloc(ptr %7, i64 %14)
  store ptr %15, ptr %memberidx2.i, align 8
  br label %Array_Bucket_string_EnumId_____sl__.exit

Array_Bucket_string_EnumId_____sl__.exit:         ; preds = %if.entry, %if.entry.i
  %16 = phi ptr [ %6, %if.entry ], [ %15, %if.entry.i ]
  %17 = phi i64 [ %8, %if.entry ], [ %13, %if.entry.i ]
  %18 = add i64 %9, 1
  store i64 %18, ptr %memberidx.i, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %16, i64 %9
  store ptr %11, ptr %ptridx.i, align 8
  %.pre = load i64, ptr %memberidx2, align 4
  br label %ifend

ifend:                                            ; preds = %for.body, %Array_Bucket_string_EnumId_____sl__.exit
  %19 = phi i64 [ %5, %for.body ], [ %.pre, %Array_Bucket_string_EnumId_____sl__.exit ]
  %20 = phi ptr [ %6, %for.body ], [ %16, %Array_Bucket_string_EnumId_____sl__.exit ]
  %21 = phi ptr [ %7, %for.body ], [ %16, %Array_Bucket_string_EnumId_____sl__.exit ]
  %22 = phi i64 [ %8, %for.body ], [ %17, %Array_Bucket_string_EnumId_____sl__.exit ]
  %23 = phi i64 [ %9, %for.body ], [ %18, %Array_Bucket_string_EnumId_____sl__.exit ]
  %24 = add nuw nsw i64 %i.011, 1
  %25 = icmp slt i64 %24, %19
  br i1 %25, label %for.body, label %for.end
}

define internal ptr @Map_string_EnumId__get(ptr nocapture readonly %0, ptr %1) {
  %3 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %4 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i64 0, i32 5
  %5 = load ptr, ptr %memberidx.i, align 8
  %6 = tail call ptr %5(ptr nonnull %1)
  %7 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @22, ptr %6)
  %8 = load ptr, ptr %3, align 8
  %9 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %9, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 1
  store ptr %8, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 2
  store i64 %7, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 3
  store i64 %7, ptr %memberidx2.i.i, align 4
  call void @free(ptr %6)
  %10 = load i64, ptr %memberidx1.i.i, align 4
  %11 = icmp sgt i64 %10, 0
  br i1 %11, label %for.body.i, label %Map_string_EnumId__hash_fnc.exit

for.body.i:                                       ; preds = %2, %for.body.i
  %i.0.i36 = phi i64 [ %18, %for.body.i ], [ 0, %2 ]
  %hash.0.i35 = phi i64 [ %17, %for.body.i ], [ 0, %2 ]
  %12 = shl i64 %hash.0.i35, 1
  %13 = load ptr, ptr %9, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i64 0, i32 2
  %14 = load ptr, ptr %memberidx2.i, align 8
  %15 = call i8 %14(ptr nonnull %9, i64 %i.0.i36)
  %16 = sext i8 %15 to i64
  %17 = add i64 %12, %16
  %18 = add nuw nsw i64 %i.0.i36, 1
  %19 = load i64, ptr %memberidx1.i.i, align 4
  %20 = icmp slt i64 %18, %19
  br i1 %20, label %for.body.i, label %Map_string_EnumId__hash_fnc.exit

Map_string_EnumId__hash_fnc.exit:                 ; preds = %for.body.i, %2
  %hash.0.i.lcssa = phi i64 [ 0, %2 ], [ %17, %for.body.i ]
  %21 = call i64 @llvm.abs.i64(i64 %hash.0.i.lcssa, i1 false)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %memberidx = getelementptr inbounds %Map_string_EnumId_, ptr %0, i64 0, i32 3
  %22 = load i64, ptr %memberidx, align 4
  %23 = srem i64 %21, %22
  %memberidx1 = getelementptr inbounds %Map_string_EnumId_, ptr %0, i64 0, i32 1
  %24 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %24, i64 %23
  %25 = load ptr, ptr %ptridx, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_EnumId_, ptr %25, i64 0, i32 3
  %26 = load i1, ptr %memberidx2, align 1
  br i1 %26, label %common.ret, label %while.entry.preheader

while.entry.preheader:                            ; preds = %Map_string_EnumId__hash_fnc.exit
  %memberidx1.i33 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %else
  %27 = phi ptr [ %37, %else ], [ %24, %while.entry.preheader ]
  %28 = phi i64 [ %38, %else ], [ %22, %while.entry.preheader ]
  %29 = phi ptr [ %41, %else ], [ %25, %while.entry.preheader ]
  %hash.0 = phi i64 [ %40, %else ], [ %23, %while.entry.preheader ]
  %memberidx5 = getelementptr inbounds %Bucket_string_EnumId_, ptr %29, i64 0, i32 1
  %30 = load ptr, ptr %memberidx5, align 8
  %memberidx.i32 = getelementptr inbounds %string, ptr %30, i64 0, i32 2
  %31 = load i64, ptr %memberidx.i32, align 4
  %32 = load i64, ptr %memberidx1.i33, align 4
  %.not.i = icmp eq i64 %31, %32
  br i1 %.not.i, label %ifend.i, label %else

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i34 = getelementptr inbounds %string, ptr %30, i64 0, i32 1
  %33 = load ptr, ptr %memberidx2.i34, align 8
  %34 = load ptr, ptr %memberidx3.i, align 8
  %35 = call i64 @memcmp(ptr %33, ptr %34, i64 %31)
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %while.end, label %ifend.i.else_crit_edge

ifend.i.else_crit_edge:                           ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx, align 4
  %.pre37 = load ptr, ptr %memberidx1, align 8
  br label %else

while.end:                                        ; preds = %ifend.i
  %.pre38.pre = load ptr, ptr %memberidx1, align 8
  %ptridx11.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre38.pre, i64 %hash.0
  %.pre39.pre = load ptr, ptr %ptridx11.phi.trans.insert.phi.trans.insert, align 8
  %memberidx12.phi.trans.insert.phi.trans.insert = getelementptr inbounds %Bucket_string_EnumId_, ptr %.pre39.pre, i64 0, i32 3
  %.pre40.pre = load i1, ptr %memberidx12.phi.trans.insert.phi.trans.insert, align 1
  br i1 %.pre40.pre, label %common.ret, label %if.entry13

else:                                             ; preds = %ifend.i.else_crit_edge, %while.entry
  %37 = phi ptr [ %.pre37, %ifend.i.else_crit_edge ], [ %27, %while.entry ]
  %38 = phi i64 [ %.pre, %ifend.i.else_crit_edge ], [ %28, %while.entry ]
  %39 = add i64 %hash.0, 1
  %40 = srem i64 %39, %38
  %ptridx8 = getelementptr inbounds ptr, ptr %37, i64 %40
  %41 = load ptr, ptr %ptridx8, align 8
  %memberidx9 = getelementptr inbounds %Bucket_string_EnumId_, ptr %41, i64 0, i32 3
  %42 = load i1, ptr %memberidx9, align 1
  br i1 %42, label %common.ret, label %while.entry

common.ret:                                       ; preds = %else, %Map_string_EnumId__hash_fnc.exit, %while.end, %if.entry13
  %common.ret.op = phi ptr [ %43, %if.entry13 ], [ null, %while.end ], [ null, %Map_string_EnumId__hash_fnc.exit ], [ null, %else ]
  ret ptr %common.ret.op

if.entry13:                                       ; preds = %while.end
  %memberidx18 = getelementptr inbounds %Bucket_string_EnumId_, ptr %.pre39.pre, i64 0, i32 2
  %43 = load ptr, ptr %memberidx18, align 8
  br label %common.ret
}

define internal void @Map_string_Type__set(ptr %0, ptr %1, ptr %2) {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Map_string_Type_, ptr %0, i64 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = sitofp i64 %5 to double
  %memberidx1 = getelementptr inbounds %Map_string_Type_, ptr %0, i64 0, i32 3
  %7 = load i64, ptr %memberidx1, align 4
  %8 = sitofp i64 %7 to double
  %9 = fdiv double %6, %8
  %10 = fcmp ogt double %9, 7.500000e-01
  br i1 %10, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %11 = load ptr, ptr %0, align 8
  %memberidx.i36 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx.i36, align 8
  %13 = tail call ptr %12(ptr nonnull %0)
  %14 = load i64, ptr %memberidx1, align 4
  %15 = shl i64 %14, 1
  store i64 %15, ptr %memberidx1, align 4
  store i64 0, ptr %memberidx, align 4
  %memberidx4.i = getelementptr inbounds %Map_string_Type_, ptr %0, i64 0, i32 1
  %16 = load ptr, ptr %memberidx4.i, align 8
  %17 = shl i64 %14, 4
  %18 = tail call ptr @realloc(ptr %16, i64 %17)
  store ptr %18, ptr %memberidx4.i, align 8
  %19 = load i64, ptr %memberidx1, align 4
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %for.body.i40, label %for.cond11.preheader.i

for.cond11.preheader.i:                           ; preds = %for.body.i40, %if.entry
  %memberidx15.i = getelementptr inbounds %Array_Bucket_string_Type__, ptr %13, i64 0, i32 2
  %21 = load i64, ptr %memberidx15.i, align 4
  %22 = icmp sgt i64 %21, 0
  br i1 %22, label %for.body12.lr.ph.i, label %ifend

for.body12.lr.ph.i:                               ; preds = %for.cond11.preheader.i
  %memberidx.i32.i = getelementptr inbounds %Array_Bucket_string_Type__, ptr %13, i64 0, i32 1
  br label %for.body12.i

for.body.i40:                                     ; preds = %if.entry, %for.body.i40
  %i.036.i = phi i64 [ %25, %for.body.i40 ], [ 0, %if.entry ]
  %23 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %23, i64 %i.036.i
  %24 = tail call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_Type_, ptr %24, align 8
  %memberidx.i.i39 = getelementptr inbounds %Bucket_string_Type_, ptr %24, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i39, align 1
  store ptr %24, ptr %ptridx.i, align 8
  %25 = add nuw nsw i64 %i.036.i, 1
  %26 = load i64, ptr %memberidx1, align 4
  %27 = icmp slt i64 %25, %26
  br i1 %27, label %for.body.i40, label %for.cond11.preheader.i

for.body12.i:                                     ; preds = %for.body12.i, %for.body12.lr.ph.i
  %storemerge35.i = phi i64 [ 0, %for.body12.lr.ph.i ], [ %34, %for.body12.i ]
  %28 = load ptr, ptr %0, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %memberidx.i32.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %30, i64 %storemerge35.i
  %31 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx17.i = getelementptr inbounds %Bucket_string_Type_, ptr %31, i64 0, i32 1
  %32 = load ptr, ptr %memberidx17.i, align 8
  %memberidx18.i = getelementptr inbounds %Bucket_string_Type_, ptr %31, i64 0, i32 2
  %33 = load ptr, ptr %memberidx18.i, align 8
  tail call void %29(ptr nonnull %0, ptr %32, ptr %33)
  %34 = add nuw nsw i64 %storemerge35.i, 1
  %35 = load i64, ptr %memberidx15.i, align 4
  %36 = icmp slt i64 %34, %35
  br i1 %36, label %for.body12.i, label %ifend

ifend:                                            ; preds = %for.body12.i, %for.cond11.preheader.i, %3
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %37 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %37, i64 0, i32 5
  %38 = load ptr, ptr %memberidx.i, align 8
  %39 = tail call ptr %38(ptr nonnull %1)
  %40 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %39)
  %41 = load ptr, ptr %4, align 8
  %42 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %42, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 1
  store ptr %41, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 2
  store i64 %40, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 3
  store i64 %40, ptr %memberidx2.i.i, align 4
  call void @free(ptr %39)
  %43 = load i64, ptr %memberidx1.i.i, align 4
  %44 = icmp sgt i64 %43, 0
  br i1 %44, label %for.body.i, label %Map_string_Type__hash_fnc.exit

for.body.i:                                       ; preds = %ifend, %for.body.i
  %i.0.i42 = phi i64 [ %51, %for.body.i ], [ 0, %ifend ]
  %hash.0.i41 = phi i64 [ %50, %for.body.i ], [ 0, %ifend ]
  %45 = shl i64 %hash.0.i41, 1
  %46 = load ptr, ptr %42, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i64 0, i32 2
  %47 = load ptr, ptr %memberidx2.i, align 8
  %48 = call i8 %47(ptr nonnull %42, i64 %i.0.i42)
  %49 = sext i8 %48 to i64
  %50 = add i64 %45, %49
  %51 = add nuw nsw i64 %i.0.i42, 1
  %52 = load i64, ptr %memberidx1.i.i, align 4
  %53 = icmp slt i64 %51, %52
  br i1 %53, label %for.body.i, label %Map_string_Type__hash_fnc.exit

Map_string_Type__hash_fnc.exit:                   ; preds = %for.body.i, %ifend
  %hash.0.i.lcssa = phi i64 [ 0, %ifend ], [ %50, %for.body.i ]
  %54 = call i64 @llvm.abs.i64(i64 %hash.0.i.lcssa, i1 false)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %55 = load i64, ptr %memberidx1, align 4
  %56 = srem i64 %54, %55
  %memberidx3 = getelementptr inbounds %Map_string_Type_, ptr %0, i64 0, i32 1
  %57 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %57, i64 %56
  %58 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_Type_, ptr %58, i64 0, i32 3
  %59 = load i1, ptr %memberidx4, align 1
  br i1 %59, label %while.end, label %while.entry.preheader

while.entry.preheader:                            ; preds = %Map_string_Type__hash_fnc.exit
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend10
  %60 = phi ptr [ %57, %while.entry.preheader ], [ %78, %ifend10 ]
  %61 = phi i64 [ %55, %while.entry.preheader ], [ %79, %ifend10 ]
  %62 = phi ptr [ %58, %while.entry.preheader ], [ %82, %ifend10 ]
  %63 = phi i64 [ %56, %while.entry.preheader ], [ %81, %ifend10 ]
  %memberidx7 = getelementptr inbounds %Bucket_string_Type_, ptr %62, i64 0, i32 1
  %64 = load ptr, ptr %memberidx7, align 8
  %memberidx.i33 = getelementptr inbounds %string, ptr %64, i64 0, i32 2
  %65 = load i64, ptr %memberidx.i33, align 4
  %66 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %65, %66
  br i1 %.not.i, label %ifend.i, label %ifend10

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i35 = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %67 = load ptr, ptr %memberidx2.i35, align 8
  %68 = load ptr, ptr %memberidx3.i, align 8
  %69 = call i64 @memcmp(ptr %67, ptr %68, i64 %65)
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %ifend.i.while.end.loopexit_crit_edge, label %ifend.i.ifend10_crit_edge

ifend.i.while.end.loopexit_crit_edge:             ; preds = %ifend.i
  %.pre44.pre = load ptr, ptr %memberidx3, align 8
  br label %while.end

ifend.i.ifend10_crit_edge:                        ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx1, align 4
  %.pre43 = load ptr, ptr %memberidx3, align 8
  br label %ifend10

while.end:                                        ; preds = %ifend10, %ifend.i.while.end.loopexit_crit_edge, %Map_string_Type__hash_fnc.exit
  %71 = phi ptr [ %57, %Map_string_Type__hash_fnc.exit ], [ %.pre44.pre, %ifend.i.while.end.loopexit_crit_edge ], [ %78, %ifend10 ]
  %72 = phi i64 [ %56, %Map_string_Type__hash_fnc.exit ], [ %63, %ifend.i.while.end.loopexit_crit_edge ], [ %81, %ifend10 ]
  %73 = load i64, ptr %memberidx, align 4
  %74 = add i64 %73, 1
  store i64 %74, ptr %memberidx, align 4
  %ptridx18 = getelementptr inbounds ptr, ptr %71, i64 %72
  %75 = load ptr, ptr %ptridx18, align 8
  %76 = load ptr, ptr %75, align 8
  %77 = load ptr, ptr %76, align 8
  call void %77(ptr nonnull %75, ptr nonnull %1, ptr %2)
  ret void

ifend10:                                          ; preds = %ifend.i.ifend10_crit_edge, %while.entry
  %78 = phi ptr [ %.pre43, %ifend.i.ifend10_crit_edge ], [ %60, %while.entry ]
  %79 = phi i64 [ %.pre, %ifend.i.ifend10_crit_edge ], [ %61, %while.entry ]
  %80 = add i64 %63, 1
  %81 = srem i64 %80, %79
  %ptridx13 = getelementptr inbounds ptr, ptr %78, i64 %81
  %82 = load ptr, ptr %ptridx13, align 8
  %memberidx14 = getelementptr inbounds %Bucket_string_Type_, ptr %82, i64 0, i32 3
  %83 = load i1, ptr %memberidx14, align 1
  br i1 %83, label %while.end, label %while.entry
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind willreturn writeonly
define internal void @Bucket_string_Type__set(ptr nocapture writeonly %0, ptr %1, ptr %2) #8 {
  %memberidx = getelementptr inbounds %Bucket_string_Type_, ptr %0, i64 0, i32 3
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %Bucket_string_Type_, ptr %0, i64 0, i32 1
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_Type_, ptr %0, i64 0, i32 2
  store ptr %2, ptr %memberidx2, align 8
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Bucket_string_Type___find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Bucket_string_Type__, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_Type__, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_Bucket_string_Type_____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_Bucket_string_Type__, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_Bucket_string_Type__, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_Bucket_string_Type__, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_Bucket_string_Type__, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

define internal noalias ptr @Map_string_Type__get_buckets(ptr nocapture readonly %0) {
for.entry:
  %1 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Bucket_string_Type__, ptr %1, align 8
  %memberidx.i = getelementptr inbounds %Array_Bucket_string_Type__, ptr %1, i64 0, i32 2
  %memberidx1.i = getelementptr inbounds %Array_Bucket_string_Type__, ptr %1, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_Bucket_string_Type__, ptr %1, i64 0, i32 1
  %2 = tail call ptr @malloc(i32 64)
  store ptr %2, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %memberidx2 = getelementptr inbounds %Map_string_Type_, ptr %0, i64 0, i32 3
  %3 = load i64, ptr %memberidx2, align 4
  %4 = icmp sgt i64 %3, 0
  br i1 %4, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx3 = getelementptr inbounds %Map_string_Type_, ptr %0, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %5 = phi i64 [ %3, %for.body.lr.ph ], [ %19, %ifend ]
  %6 = phi ptr [ %2, %for.body.lr.ph ], [ %20, %ifend ]
  %7 = phi ptr [ %2, %for.body.lr.ph ], [ %21, %ifend ]
  %8 = phi i64 [ 8, %for.body.lr.ph ], [ %22, %ifend ]
  %9 = phi i64 [ 0, %for.body.lr.ph ], [ %23, %ifend ]
  %i.011 = phi i64 [ 0, %for.body.lr.ph ], [ %24, %ifend ]
  %10 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %i.011
  %11 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_Type_, ptr %11, i64 0, i32 3
  %12 = load i1, ptr %memberidx4, align 1
  br i1 %12, label %ifend, label %if.entry

for.end:                                          ; preds = %ifend, %for.entry
  ret ptr %1

if.entry:                                         ; preds = %for.body
  %.not.i = icmp slt i64 %9, %8
  br i1 %.not.i, label %Array_Bucket_string_Type_____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %if.entry
  %13 = shl i64 %8, 1
  store i64 %13, ptr %memberidx1.i, align 4
  %14 = shl i64 %8, 4
  %15 = tail call ptr @realloc(ptr %7, i64 %14)
  store ptr %15, ptr %memberidx2.i, align 8
  br label %Array_Bucket_string_Type_____sl__.exit

Array_Bucket_string_Type_____sl__.exit:           ; preds = %if.entry, %if.entry.i
  %16 = phi ptr [ %6, %if.entry ], [ %15, %if.entry.i ]
  %17 = phi i64 [ %8, %if.entry ], [ %13, %if.entry.i ]
  %18 = add i64 %9, 1
  store i64 %18, ptr %memberidx.i, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %16, i64 %9
  store ptr %11, ptr %ptridx.i, align 8
  %.pre = load i64, ptr %memberidx2, align 4
  br label %ifend

ifend:                                            ; preds = %for.body, %Array_Bucket_string_Type_____sl__.exit
  %19 = phi i64 [ %5, %for.body ], [ %.pre, %Array_Bucket_string_Type_____sl__.exit ]
  %20 = phi ptr [ %6, %for.body ], [ %16, %Array_Bucket_string_Type_____sl__.exit ]
  %21 = phi ptr [ %7, %for.body ], [ %16, %Array_Bucket_string_Type_____sl__.exit ]
  %22 = phi i64 [ %8, %for.body ], [ %17, %Array_Bucket_string_Type_____sl__.exit ]
  %23 = phi i64 [ %9, %for.body ], [ %18, %Array_Bucket_string_Type_____sl__.exit ]
  %24 = add nuw nsw i64 %i.011, 1
  %25 = icmp slt i64 %24, %19
  br i1 %25, label %for.body, label %for.end
}

define internal ptr @Map_string_Type__get(ptr nocapture readonly %0, ptr %1) {
  %3 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %4 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i64 0, i32 5
  %5 = load ptr, ptr %memberidx.i, align 8
  %6 = tail call ptr %5(ptr nonnull %1)
  %7 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @22, ptr %6)
  %8 = load ptr, ptr %3, align 8
  %9 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %9, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 1
  store ptr %8, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 2
  store i64 %7, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 3
  store i64 %7, ptr %memberidx2.i.i, align 4
  call void @free(ptr %6)
  %10 = load i64, ptr %memberidx1.i.i, align 4
  %11 = icmp sgt i64 %10, 0
  br i1 %11, label %for.body.i, label %Map_string_Type__hash_fnc.exit

for.body.i:                                       ; preds = %2, %for.body.i
  %i.0.i36 = phi i64 [ %18, %for.body.i ], [ 0, %2 ]
  %hash.0.i35 = phi i64 [ %17, %for.body.i ], [ 0, %2 ]
  %12 = shl i64 %hash.0.i35, 1
  %13 = load ptr, ptr %9, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i64 0, i32 2
  %14 = load ptr, ptr %memberidx2.i, align 8
  %15 = call i8 %14(ptr nonnull %9, i64 %i.0.i36)
  %16 = sext i8 %15 to i64
  %17 = add i64 %12, %16
  %18 = add nuw nsw i64 %i.0.i36, 1
  %19 = load i64, ptr %memberidx1.i.i, align 4
  %20 = icmp slt i64 %18, %19
  br i1 %20, label %for.body.i, label %Map_string_Type__hash_fnc.exit

Map_string_Type__hash_fnc.exit:                   ; preds = %for.body.i, %2
  %hash.0.i.lcssa = phi i64 [ 0, %2 ], [ %17, %for.body.i ]
  %21 = call i64 @llvm.abs.i64(i64 %hash.0.i.lcssa, i1 false)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %memberidx = getelementptr inbounds %Map_string_Type_, ptr %0, i64 0, i32 3
  %22 = load i64, ptr %memberidx, align 4
  %23 = srem i64 %21, %22
  %memberidx1 = getelementptr inbounds %Map_string_Type_, ptr %0, i64 0, i32 1
  %24 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %24, i64 %23
  %25 = load ptr, ptr %ptridx, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_Type_, ptr %25, i64 0, i32 3
  %26 = load i1, ptr %memberidx2, align 1
  br i1 %26, label %common.ret, label %while.entry.preheader

while.entry.preheader:                            ; preds = %Map_string_Type__hash_fnc.exit
  %memberidx1.i33 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %else
  %27 = phi ptr [ %37, %else ], [ %24, %while.entry.preheader ]
  %28 = phi i64 [ %38, %else ], [ %22, %while.entry.preheader ]
  %29 = phi ptr [ %41, %else ], [ %25, %while.entry.preheader ]
  %hash.0 = phi i64 [ %40, %else ], [ %23, %while.entry.preheader ]
  %memberidx5 = getelementptr inbounds %Bucket_string_Type_, ptr %29, i64 0, i32 1
  %30 = load ptr, ptr %memberidx5, align 8
  %memberidx.i32 = getelementptr inbounds %string, ptr %30, i64 0, i32 2
  %31 = load i64, ptr %memberidx.i32, align 4
  %32 = load i64, ptr %memberidx1.i33, align 4
  %.not.i = icmp eq i64 %31, %32
  br i1 %.not.i, label %ifend.i, label %else

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i34 = getelementptr inbounds %string, ptr %30, i64 0, i32 1
  %33 = load ptr, ptr %memberidx2.i34, align 8
  %34 = load ptr, ptr %memberidx3.i, align 8
  %35 = call i64 @memcmp(ptr %33, ptr %34, i64 %31)
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %while.end, label %ifend.i.else_crit_edge

ifend.i.else_crit_edge:                           ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx, align 4
  %.pre37 = load ptr, ptr %memberidx1, align 8
  br label %else

while.end:                                        ; preds = %ifend.i
  %.pre38.pre = load ptr, ptr %memberidx1, align 8
  %ptridx11.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre38.pre, i64 %hash.0
  %.pre39.pre = load ptr, ptr %ptridx11.phi.trans.insert.phi.trans.insert, align 8
  %memberidx12.phi.trans.insert.phi.trans.insert = getelementptr inbounds %Bucket_string_Type_, ptr %.pre39.pre, i64 0, i32 3
  %.pre40.pre = load i1, ptr %memberidx12.phi.trans.insert.phi.trans.insert, align 1
  br i1 %.pre40.pre, label %common.ret, label %if.entry13

else:                                             ; preds = %ifend.i.else_crit_edge, %while.entry
  %37 = phi ptr [ %.pre37, %ifend.i.else_crit_edge ], [ %27, %while.entry ]
  %38 = phi i64 [ %.pre, %ifend.i.else_crit_edge ], [ %28, %while.entry ]
  %39 = add i64 %hash.0, 1
  %40 = srem i64 %39, %38
  %ptridx8 = getelementptr inbounds ptr, ptr %37, i64 %40
  %41 = load ptr, ptr %ptridx8, align 8
  %memberidx9 = getelementptr inbounds %Bucket_string_Type_, ptr %41, i64 0, i32 3
  %42 = load i1, ptr %memberidx9, align 1
  br i1 %42, label %common.ret, label %while.entry

common.ret:                                       ; preds = %else, %Map_string_Type__hash_fnc.exit, %while.end, %if.entry13
  %common.ret.op = phi ptr [ %43, %if.entry13 ], [ null, %while.end ], [ null, %Map_string_Type__hash_fnc.exit ], [ null, %else ]
  ret ptr %common.ret.op

if.entry13:                                       ; preds = %while.end
  %memberidx18 = getelementptr inbounds %Bucket_string_Type_, ptr %.pre39.pre, i64 0, i32 2
  %43 = load ptr, ptr %memberidx18, align 8
  br label %common.ret
}

define internal void @Map_string_ClassId__set(ptr %0, ptr %1, ptr %2) {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Map_string_ClassId_, ptr %0, i64 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = sitofp i64 %5 to double
  %memberidx1 = getelementptr inbounds %Map_string_ClassId_, ptr %0, i64 0, i32 3
  %7 = load i64, ptr %memberidx1, align 4
  %8 = sitofp i64 %7 to double
  %9 = fdiv double %6, %8
  %10 = fcmp ogt double %9, 7.500000e-01
  br i1 %10, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %11 = load ptr, ptr %0, align 8
  %memberidx.i36 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx.i36, align 8
  %13 = tail call ptr %12(ptr nonnull %0)
  %14 = load i64, ptr %memberidx1, align 4
  %15 = shl i64 %14, 1
  store i64 %15, ptr %memberidx1, align 4
  store i64 0, ptr %memberidx, align 4
  %memberidx4.i = getelementptr inbounds %Map_string_ClassId_, ptr %0, i64 0, i32 1
  %16 = load ptr, ptr %memberidx4.i, align 8
  %17 = shl i64 %14, 4
  %18 = tail call ptr @realloc(ptr %16, i64 %17)
  store ptr %18, ptr %memberidx4.i, align 8
  %19 = load i64, ptr %memberidx1, align 4
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %for.body.i40, label %for.cond11.preheader.i

for.cond11.preheader.i:                           ; preds = %for.body.i40, %if.entry
  %memberidx15.i = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %13, i64 0, i32 2
  %21 = load i64, ptr %memberidx15.i, align 4
  %22 = icmp sgt i64 %21, 0
  br i1 %22, label %for.body12.lr.ph.i, label %ifend

for.body12.lr.ph.i:                               ; preds = %for.cond11.preheader.i
  %memberidx.i32.i = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %13, i64 0, i32 1
  br label %for.body12.i

for.body.i40:                                     ; preds = %if.entry, %for.body.i40
  %i.036.i = phi i64 [ %25, %for.body.i40 ], [ 0, %if.entry ]
  %23 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %23, i64 %i.036.i
  %24 = tail call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_ClassId_, ptr %24, align 8
  %memberidx.i.i39 = getelementptr inbounds %Bucket_string_ClassId_, ptr %24, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i39, align 1
  store ptr %24, ptr %ptridx.i, align 8
  %25 = add nuw nsw i64 %i.036.i, 1
  %26 = load i64, ptr %memberidx1, align 4
  %27 = icmp slt i64 %25, %26
  br i1 %27, label %for.body.i40, label %for.cond11.preheader.i

for.body12.i:                                     ; preds = %for.body12.i, %for.body12.lr.ph.i
  %storemerge35.i = phi i64 [ 0, %for.body12.lr.ph.i ], [ %34, %for.body12.i ]
  %28 = load ptr, ptr %0, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %memberidx.i32.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %30, i64 %storemerge35.i
  %31 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx17.i = getelementptr inbounds %Bucket_string_ClassId_, ptr %31, i64 0, i32 1
  %32 = load ptr, ptr %memberidx17.i, align 8
  %memberidx18.i = getelementptr inbounds %Bucket_string_ClassId_, ptr %31, i64 0, i32 2
  %33 = load ptr, ptr %memberidx18.i, align 8
  tail call void %29(ptr nonnull %0, ptr %32, ptr %33)
  %34 = add nuw nsw i64 %storemerge35.i, 1
  %35 = load i64, ptr %memberidx15.i, align 4
  %36 = icmp slt i64 %34, %35
  br i1 %36, label %for.body12.i, label %ifend

ifend:                                            ; preds = %for.body12.i, %for.cond11.preheader.i, %3
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %37 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %37, i64 0, i32 5
  %38 = load ptr, ptr %memberidx.i, align 8
  %39 = tail call ptr %38(ptr nonnull %1)
  %40 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %39)
  %41 = load ptr, ptr %4, align 8
  %42 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %42, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 1
  store ptr %41, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 2
  store i64 %40, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 3
  store i64 %40, ptr %memberidx2.i.i, align 4
  call void @free(ptr %39)
  %43 = load i64, ptr %memberidx1.i.i, align 4
  %44 = icmp sgt i64 %43, 0
  br i1 %44, label %for.body.i, label %Map_string_ClassId__hash_fnc.exit

for.body.i:                                       ; preds = %ifend, %for.body.i
  %i.0.i42 = phi i64 [ %51, %for.body.i ], [ 0, %ifend ]
  %hash.0.i41 = phi i64 [ %50, %for.body.i ], [ 0, %ifend ]
  %45 = shl i64 %hash.0.i41, 1
  %46 = load ptr, ptr %42, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i64 0, i32 2
  %47 = load ptr, ptr %memberidx2.i, align 8
  %48 = call i8 %47(ptr nonnull %42, i64 %i.0.i42)
  %49 = sext i8 %48 to i64
  %50 = add i64 %45, %49
  %51 = add nuw nsw i64 %i.0.i42, 1
  %52 = load i64, ptr %memberidx1.i.i, align 4
  %53 = icmp slt i64 %51, %52
  br i1 %53, label %for.body.i, label %Map_string_ClassId__hash_fnc.exit

Map_string_ClassId__hash_fnc.exit:                ; preds = %for.body.i, %ifend
  %hash.0.i.lcssa = phi i64 [ 0, %ifend ], [ %50, %for.body.i ]
  %54 = call i64 @llvm.abs.i64(i64 %hash.0.i.lcssa, i1 false)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %55 = load i64, ptr %memberidx1, align 4
  %56 = srem i64 %54, %55
  %memberidx3 = getelementptr inbounds %Map_string_ClassId_, ptr %0, i64 0, i32 1
  %57 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %57, i64 %56
  %58 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_ClassId_, ptr %58, i64 0, i32 3
  %59 = load i1, ptr %memberidx4, align 1
  br i1 %59, label %while.end, label %while.entry.preheader

while.entry.preheader:                            ; preds = %Map_string_ClassId__hash_fnc.exit
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend10
  %60 = phi ptr [ %57, %while.entry.preheader ], [ %78, %ifend10 ]
  %61 = phi i64 [ %55, %while.entry.preheader ], [ %79, %ifend10 ]
  %62 = phi ptr [ %58, %while.entry.preheader ], [ %82, %ifend10 ]
  %63 = phi i64 [ %56, %while.entry.preheader ], [ %81, %ifend10 ]
  %memberidx7 = getelementptr inbounds %Bucket_string_ClassId_, ptr %62, i64 0, i32 1
  %64 = load ptr, ptr %memberidx7, align 8
  %memberidx.i33 = getelementptr inbounds %string, ptr %64, i64 0, i32 2
  %65 = load i64, ptr %memberidx.i33, align 4
  %66 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %65, %66
  br i1 %.not.i, label %ifend.i, label %ifend10

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i35 = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %67 = load ptr, ptr %memberidx2.i35, align 8
  %68 = load ptr, ptr %memberidx3.i, align 8
  %69 = call i64 @memcmp(ptr %67, ptr %68, i64 %65)
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %ifend.i.while.end.loopexit_crit_edge, label %ifend.i.ifend10_crit_edge

ifend.i.while.end.loopexit_crit_edge:             ; preds = %ifend.i
  %.pre44.pre = load ptr, ptr %memberidx3, align 8
  br label %while.end

ifend.i.ifend10_crit_edge:                        ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx1, align 4
  %.pre43 = load ptr, ptr %memberidx3, align 8
  br label %ifend10

while.end:                                        ; preds = %ifend10, %ifend.i.while.end.loopexit_crit_edge, %Map_string_ClassId__hash_fnc.exit
  %71 = phi ptr [ %57, %Map_string_ClassId__hash_fnc.exit ], [ %.pre44.pre, %ifend.i.while.end.loopexit_crit_edge ], [ %78, %ifend10 ]
  %72 = phi i64 [ %56, %Map_string_ClassId__hash_fnc.exit ], [ %63, %ifend.i.while.end.loopexit_crit_edge ], [ %81, %ifend10 ]
  %73 = load i64, ptr %memberidx, align 4
  %74 = add i64 %73, 1
  store i64 %74, ptr %memberidx, align 4
  %ptridx18 = getelementptr inbounds ptr, ptr %71, i64 %72
  %75 = load ptr, ptr %ptridx18, align 8
  %76 = load ptr, ptr %75, align 8
  %77 = load ptr, ptr %76, align 8
  call void %77(ptr nonnull %75, ptr nonnull %1, ptr %2)
  ret void

ifend10:                                          ; preds = %ifend.i.ifend10_crit_edge, %while.entry
  %78 = phi ptr [ %.pre43, %ifend.i.ifend10_crit_edge ], [ %60, %while.entry ]
  %79 = phi i64 [ %.pre, %ifend.i.ifend10_crit_edge ], [ %61, %while.entry ]
  %80 = add i64 %63, 1
  %81 = srem i64 %80, %79
  %ptridx13 = getelementptr inbounds ptr, ptr %78, i64 %81
  %82 = load ptr, ptr %ptridx13, align 8
  %memberidx14 = getelementptr inbounds %Bucket_string_ClassId_, ptr %82, i64 0, i32 3
  %83 = load i1, ptr %memberidx14, align 1
  br i1 %83, label %while.end, label %while.entry
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind willreturn writeonly
define internal void @Bucket_string_ClassId__set(ptr nocapture writeonly %0, ptr %1, ptr %2) #8 {
  %memberidx = getelementptr inbounds %Bucket_string_ClassId_, ptr %0, i64 0, i32 3
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %Bucket_string_ClassId_, ptr %0, i64 0, i32 1
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_ClassId_, ptr %0, i64 0, i32 2
  store ptr %2, ptr %memberidx2, align 8
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Bucket_string_ClassId___find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal noalias ptr @Map_string_ClassId__get_buckets(ptr nocapture readonly %0) {
for.entry:
  %1 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Bucket_string_ClassId__, ptr %1, align 8
  %memberidx.i = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %1, i64 0, i32 2
  %memberidx1.i = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %1, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_Bucket_string_ClassId__, ptr %1, i64 0, i32 1
  %2 = tail call ptr @malloc(i32 64)
  store ptr %2, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %memberidx2 = getelementptr inbounds %Map_string_ClassId_, ptr %0, i64 0, i32 3
  %3 = load i64, ptr %memberidx2, align 4
  %4 = icmp sgt i64 %3, 0
  br i1 %4, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx3 = getelementptr inbounds %Map_string_ClassId_, ptr %0, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %5 = phi i64 [ %3, %for.body.lr.ph ], [ %19, %ifend ]
  %6 = phi ptr [ %2, %for.body.lr.ph ], [ %20, %ifend ]
  %7 = phi ptr [ %2, %for.body.lr.ph ], [ %21, %ifend ]
  %8 = phi i64 [ 8, %for.body.lr.ph ], [ %22, %ifend ]
  %9 = phi i64 [ 0, %for.body.lr.ph ], [ %23, %ifend ]
  %i.011 = phi i64 [ 0, %for.body.lr.ph ], [ %24, %ifend ]
  %10 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %i.011
  %11 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_ClassId_, ptr %11, i64 0, i32 3
  %12 = load i1, ptr %memberidx4, align 1
  br i1 %12, label %ifend, label %if.entry

for.end:                                          ; preds = %ifend, %for.entry
  ret ptr %1

if.entry:                                         ; preds = %for.body
  %.not.i = icmp slt i64 %9, %8
  br i1 %.not.i, label %Array_Bucket_string_ClassId_____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %if.entry
  %13 = shl i64 %8, 1
  store i64 %13, ptr %memberidx1.i, align 4
  %14 = shl i64 %8, 4
  %15 = tail call ptr @realloc(ptr %7, i64 %14)
  store ptr %15, ptr %memberidx2.i, align 8
  br label %Array_Bucket_string_ClassId_____sl__.exit

Array_Bucket_string_ClassId_____sl__.exit:        ; preds = %if.entry, %if.entry.i
  %16 = phi ptr [ %6, %if.entry ], [ %15, %if.entry.i ]
  %17 = phi i64 [ %8, %if.entry ], [ %13, %if.entry.i ]
  %18 = add i64 %9, 1
  store i64 %18, ptr %memberidx.i, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %16, i64 %9
  store ptr %11, ptr %ptridx.i, align 8
  %.pre = load i64, ptr %memberidx2, align 4
  br label %ifend

ifend:                                            ; preds = %for.body, %Array_Bucket_string_ClassId_____sl__.exit
  %19 = phi i64 [ %5, %for.body ], [ %.pre, %Array_Bucket_string_ClassId_____sl__.exit ]
  %20 = phi ptr [ %6, %for.body ], [ %16, %Array_Bucket_string_ClassId_____sl__.exit ]
  %21 = phi ptr [ %7, %for.body ], [ %16, %Array_Bucket_string_ClassId_____sl__.exit ]
  %22 = phi i64 [ %8, %for.body ], [ %17, %Array_Bucket_string_ClassId_____sl__.exit ]
  %23 = phi i64 [ %9, %for.body ], [ %18, %Array_Bucket_string_ClassId_____sl__.exit ]
  %24 = add nuw nsw i64 %i.011, 1
  %25 = icmp slt i64 %24, %19
  br i1 %25, label %for.body, label %for.end
}

define internal ptr @Map_string_ClassId__get(ptr nocapture readonly %0, ptr %1) {
  %3 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %4 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i64 0, i32 5
  %5 = load ptr, ptr %memberidx.i, align 8
  %6 = tail call ptr %5(ptr nonnull %1)
  %7 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @22, ptr %6)
  %8 = load ptr, ptr %3, align 8
  %9 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %9, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 1
  store ptr %8, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 2
  store i64 %7, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 3
  store i64 %7, ptr %memberidx2.i.i, align 4
  call void @free(ptr %6)
  %10 = load i64, ptr %memberidx1.i.i, align 4
  %11 = icmp sgt i64 %10, 0
  br i1 %11, label %for.body.i, label %Map_string_ClassId__hash_fnc.exit

for.body.i:                                       ; preds = %2, %for.body.i
  %i.0.i36 = phi i64 [ %18, %for.body.i ], [ 0, %2 ]
  %hash.0.i35 = phi i64 [ %17, %for.body.i ], [ 0, %2 ]
  %12 = shl i64 %hash.0.i35, 1
  %13 = load ptr, ptr %9, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i64 0, i32 2
  %14 = load ptr, ptr %memberidx2.i, align 8
  %15 = call i8 %14(ptr nonnull %9, i64 %i.0.i36)
  %16 = sext i8 %15 to i64
  %17 = add i64 %12, %16
  %18 = add nuw nsw i64 %i.0.i36, 1
  %19 = load i64, ptr %memberidx1.i.i, align 4
  %20 = icmp slt i64 %18, %19
  br i1 %20, label %for.body.i, label %Map_string_ClassId__hash_fnc.exit

Map_string_ClassId__hash_fnc.exit:                ; preds = %for.body.i, %2
  %hash.0.i.lcssa = phi i64 [ 0, %2 ], [ %17, %for.body.i ]
  %21 = call i64 @llvm.abs.i64(i64 %hash.0.i.lcssa, i1 false)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %memberidx = getelementptr inbounds %Map_string_ClassId_, ptr %0, i64 0, i32 3
  %22 = load i64, ptr %memberidx, align 4
  %23 = srem i64 %21, %22
  %memberidx1 = getelementptr inbounds %Map_string_ClassId_, ptr %0, i64 0, i32 1
  %24 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %24, i64 %23
  %25 = load ptr, ptr %ptridx, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_ClassId_, ptr %25, i64 0, i32 3
  %26 = load i1, ptr %memberidx2, align 1
  br i1 %26, label %common.ret, label %while.entry.preheader

while.entry.preheader:                            ; preds = %Map_string_ClassId__hash_fnc.exit
  %memberidx1.i33 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %else
  %27 = phi ptr [ %37, %else ], [ %24, %while.entry.preheader ]
  %28 = phi i64 [ %38, %else ], [ %22, %while.entry.preheader ]
  %29 = phi ptr [ %41, %else ], [ %25, %while.entry.preheader ]
  %hash.0 = phi i64 [ %40, %else ], [ %23, %while.entry.preheader ]
  %memberidx5 = getelementptr inbounds %Bucket_string_ClassId_, ptr %29, i64 0, i32 1
  %30 = load ptr, ptr %memberidx5, align 8
  %memberidx.i32 = getelementptr inbounds %string, ptr %30, i64 0, i32 2
  %31 = load i64, ptr %memberidx.i32, align 4
  %32 = load i64, ptr %memberidx1.i33, align 4
  %.not.i = icmp eq i64 %31, %32
  br i1 %.not.i, label %ifend.i, label %else

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i34 = getelementptr inbounds %string, ptr %30, i64 0, i32 1
  %33 = load ptr, ptr %memberidx2.i34, align 8
  %34 = load ptr, ptr %memberidx3.i, align 8
  %35 = call i64 @memcmp(ptr %33, ptr %34, i64 %31)
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %while.end, label %ifend.i.else_crit_edge

ifend.i.else_crit_edge:                           ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx, align 4
  %.pre37 = load ptr, ptr %memberidx1, align 8
  br label %else

while.end:                                        ; preds = %ifend.i
  %.pre38.pre = load ptr, ptr %memberidx1, align 8
  %ptridx11.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre38.pre, i64 %hash.0
  %.pre39.pre = load ptr, ptr %ptridx11.phi.trans.insert.phi.trans.insert, align 8
  %memberidx12.phi.trans.insert.phi.trans.insert = getelementptr inbounds %Bucket_string_ClassId_, ptr %.pre39.pre, i64 0, i32 3
  %.pre40.pre = load i1, ptr %memberidx12.phi.trans.insert.phi.trans.insert, align 1
  br i1 %.pre40.pre, label %common.ret, label %if.entry13

else:                                             ; preds = %ifend.i.else_crit_edge, %while.entry
  %37 = phi ptr [ %.pre37, %ifend.i.else_crit_edge ], [ %27, %while.entry ]
  %38 = phi i64 [ %.pre, %ifend.i.else_crit_edge ], [ %28, %while.entry ]
  %39 = add i64 %hash.0, 1
  %40 = srem i64 %39, %38
  %ptridx8 = getelementptr inbounds ptr, ptr %37, i64 %40
  %41 = load ptr, ptr %ptridx8, align 8
  %memberidx9 = getelementptr inbounds %Bucket_string_ClassId_, ptr %41, i64 0, i32 3
  %42 = load i1, ptr %memberidx9, align 1
  br i1 %42, label %common.ret, label %while.entry

common.ret:                                       ; preds = %else, %Map_string_ClassId__hash_fnc.exit, %while.end, %if.entry13
  %common.ret.op = phi ptr [ %43, %if.entry13 ], [ null, %while.end ], [ null, %Map_string_ClassId__hash_fnc.exit ], [ null, %else ]
  ret ptr %common.ret.op

if.entry13:                                       ; preds = %while.end
  %memberidx18 = getelementptr inbounds %Bucket_string_ClassId_, ptr %.pre39.pre, i64 0, i32 2
  %43 = load ptr, ptr %memberidx18, align 8
  br label %common.ret
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Scope__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Scope_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Scope_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_VarDeclaration__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_VarDeclaration_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_VarDeclaration____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_VarDeclaration_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Var__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Var_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Var_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ConstDeclaration__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ConstDeclaration_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_ConstDeclaration____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_ConstDeclaration_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

define internal void @Map_string_PropId__set(ptr %0, ptr %1, ptr %2) {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Map_string_PropId_, ptr %0, i64 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = sitofp i64 %5 to double
  %memberidx1 = getelementptr inbounds %Map_string_PropId_, ptr %0, i64 0, i32 3
  %7 = load i64, ptr %memberidx1, align 4
  %8 = sitofp i64 %7 to double
  %9 = fdiv double %6, %8
  %10 = fcmp ogt double %9, 7.500000e-01
  br i1 %10, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %11 = load ptr, ptr %0, align 8
  %memberidx.i36 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx.i36, align 8
  %13 = tail call ptr %12(ptr nonnull %0)
  %14 = load i64, ptr %memberidx1, align 4
  %15 = shl i64 %14, 1
  store i64 %15, ptr %memberidx1, align 4
  store i64 0, ptr %memberidx, align 4
  %memberidx4.i = getelementptr inbounds %Map_string_PropId_, ptr %0, i64 0, i32 1
  %16 = load ptr, ptr %memberidx4.i, align 8
  %17 = shl i64 %14, 4
  %18 = tail call ptr @realloc(ptr %16, i64 %17)
  store ptr %18, ptr %memberidx4.i, align 8
  %19 = load i64, ptr %memberidx1, align 4
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %for.body.i40, label %for.cond11.preheader.i

for.cond11.preheader.i:                           ; preds = %for.body.i40, %if.entry
  %memberidx15.i = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %13, i64 0, i32 2
  %21 = load i64, ptr %memberidx15.i, align 4
  %22 = icmp sgt i64 %21, 0
  br i1 %22, label %for.body12.lr.ph.i, label %ifend

for.body12.lr.ph.i:                               ; preds = %for.cond11.preheader.i
  %memberidx.i32.i = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %13, i64 0, i32 1
  br label %for.body12.i

for.body.i40:                                     ; preds = %if.entry, %for.body.i40
  %i.036.i = phi i64 [ %25, %for.body.i40 ], [ 0, %if.entry ]
  %23 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %23, i64 %i.036.i
  %24 = tail call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_PropId_, ptr %24, align 8
  %memberidx.i.i39 = getelementptr inbounds %Bucket_string_PropId_, ptr %24, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i39, align 1
  store ptr %24, ptr %ptridx.i, align 8
  %25 = add nuw nsw i64 %i.036.i, 1
  %26 = load i64, ptr %memberidx1, align 4
  %27 = icmp slt i64 %25, %26
  br i1 %27, label %for.body.i40, label %for.cond11.preheader.i

for.body12.i:                                     ; preds = %for.body12.i, %for.body12.lr.ph.i
  %storemerge35.i = phi i64 [ 0, %for.body12.lr.ph.i ], [ %34, %for.body12.i ]
  %28 = load ptr, ptr %0, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %memberidx.i32.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %30, i64 %storemerge35.i
  %31 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx17.i = getelementptr inbounds %Bucket_string_PropId_, ptr %31, i64 0, i32 1
  %32 = load ptr, ptr %memberidx17.i, align 8
  %memberidx18.i = getelementptr inbounds %Bucket_string_PropId_, ptr %31, i64 0, i32 2
  %33 = load ptr, ptr %memberidx18.i, align 8
  tail call void %29(ptr nonnull %0, ptr %32, ptr %33)
  %34 = add nuw nsw i64 %storemerge35.i, 1
  %35 = load i64, ptr %memberidx15.i, align 4
  %36 = icmp slt i64 %34, %35
  br i1 %36, label %for.body12.i, label %ifend

ifend:                                            ; preds = %for.body12.i, %for.cond11.preheader.i, %3
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %37 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %37, i64 0, i32 5
  %38 = load ptr, ptr %memberidx.i, align 8
  %39 = tail call ptr %38(ptr nonnull %1)
  %40 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %39)
  %41 = load ptr, ptr %4, align 8
  %42 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %42, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 1
  store ptr %41, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 2
  store i64 %40, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 3
  store i64 %40, ptr %memberidx2.i.i, align 4
  call void @free(ptr %39)
  %43 = load i64, ptr %memberidx1.i.i, align 4
  %44 = icmp sgt i64 %43, 0
  br i1 %44, label %for.body.i, label %Map_string_PropId__hash_fnc.exit

for.body.i:                                       ; preds = %ifend, %for.body.i
  %i.0.i42 = phi i64 [ %51, %for.body.i ], [ 0, %ifend ]
  %hash.0.i41 = phi i64 [ %50, %for.body.i ], [ 0, %ifend ]
  %45 = shl i64 %hash.0.i41, 1
  %46 = load ptr, ptr %42, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i64 0, i32 2
  %47 = load ptr, ptr %memberidx2.i, align 8
  %48 = call i8 %47(ptr nonnull %42, i64 %i.0.i42)
  %49 = sext i8 %48 to i64
  %50 = add i64 %45, %49
  %51 = add nuw nsw i64 %i.0.i42, 1
  %52 = load i64, ptr %memberidx1.i.i, align 4
  %53 = icmp slt i64 %51, %52
  br i1 %53, label %for.body.i, label %Map_string_PropId__hash_fnc.exit

Map_string_PropId__hash_fnc.exit:                 ; preds = %for.body.i, %ifend
  %hash.0.i.lcssa = phi i64 [ 0, %ifend ], [ %50, %for.body.i ]
  %54 = call i64 @llvm.abs.i64(i64 %hash.0.i.lcssa, i1 false)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %55 = load i64, ptr %memberidx1, align 4
  %56 = srem i64 %54, %55
  %memberidx3 = getelementptr inbounds %Map_string_PropId_, ptr %0, i64 0, i32 1
  %57 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %57, i64 %56
  %58 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_PropId_, ptr %58, i64 0, i32 3
  %59 = load i1, ptr %memberidx4, align 1
  br i1 %59, label %while.end, label %while.entry.preheader

while.entry.preheader:                            ; preds = %Map_string_PropId__hash_fnc.exit
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend10
  %60 = phi ptr [ %57, %while.entry.preheader ], [ %78, %ifend10 ]
  %61 = phi i64 [ %55, %while.entry.preheader ], [ %79, %ifend10 ]
  %62 = phi ptr [ %58, %while.entry.preheader ], [ %82, %ifend10 ]
  %63 = phi i64 [ %56, %while.entry.preheader ], [ %81, %ifend10 ]
  %memberidx7 = getelementptr inbounds %Bucket_string_PropId_, ptr %62, i64 0, i32 1
  %64 = load ptr, ptr %memberidx7, align 8
  %memberidx.i33 = getelementptr inbounds %string, ptr %64, i64 0, i32 2
  %65 = load i64, ptr %memberidx.i33, align 4
  %66 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %65, %66
  br i1 %.not.i, label %ifend.i, label %ifend10

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i35 = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %67 = load ptr, ptr %memberidx2.i35, align 8
  %68 = load ptr, ptr %memberidx3.i, align 8
  %69 = call i64 @memcmp(ptr %67, ptr %68, i64 %65)
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %ifend.i.while.end.loopexit_crit_edge, label %ifend.i.ifend10_crit_edge

ifend.i.while.end.loopexit_crit_edge:             ; preds = %ifend.i
  %.pre44.pre = load ptr, ptr %memberidx3, align 8
  br label %while.end

ifend.i.ifend10_crit_edge:                        ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx1, align 4
  %.pre43 = load ptr, ptr %memberidx3, align 8
  br label %ifend10

while.end:                                        ; preds = %ifend10, %ifend.i.while.end.loopexit_crit_edge, %Map_string_PropId__hash_fnc.exit
  %71 = phi ptr [ %57, %Map_string_PropId__hash_fnc.exit ], [ %.pre44.pre, %ifend.i.while.end.loopexit_crit_edge ], [ %78, %ifend10 ]
  %72 = phi i64 [ %56, %Map_string_PropId__hash_fnc.exit ], [ %63, %ifend.i.while.end.loopexit_crit_edge ], [ %81, %ifend10 ]
  %73 = load i64, ptr %memberidx, align 4
  %74 = add i64 %73, 1
  store i64 %74, ptr %memberidx, align 4
  %ptridx18 = getelementptr inbounds ptr, ptr %71, i64 %72
  %75 = load ptr, ptr %ptridx18, align 8
  %76 = load ptr, ptr %75, align 8
  %77 = load ptr, ptr %76, align 8
  call void %77(ptr nonnull %75, ptr nonnull %1, ptr %2)
  ret void

ifend10:                                          ; preds = %ifend.i.ifend10_crit_edge, %while.entry
  %78 = phi ptr [ %.pre43, %ifend.i.ifend10_crit_edge ], [ %60, %while.entry ]
  %79 = phi i64 [ %.pre, %ifend.i.ifend10_crit_edge ], [ %61, %while.entry ]
  %80 = add i64 %63, 1
  %81 = srem i64 %80, %79
  %ptridx13 = getelementptr inbounds ptr, ptr %78, i64 %81
  %82 = load ptr, ptr %ptridx13, align 8
  %memberidx14 = getelementptr inbounds %Bucket_string_PropId_, ptr %82, i64 0, i32 3
  %83 = load i1, ptr %memberidx14, align 1
  br i1 %83, label %while.end, label %while.entry
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind willreturn writeonly
define internal void @Bucket_string_PropId__set(ptr nocapture writeonly %0, ptr %1, ptr %2) #8 {
  %memberidx = getelementptr inbounds %Bucket_string_PropId_, ptr %0, i64 0, i32 3
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %Bucket_string_PropId_, ptr %0, i64 0, i32 1
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_PropId_, ptr %0, i64 0, i32 2
  store ptr %2, ptr %memberidx2, align 8
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Bucket_string_PropId___find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_Bucket_string_PropId_____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_Bucket_string_PropId__, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_Bucket_string_PropId__, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_Bucket_string_PropId__, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_Bucket_string_PropId__, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

define internal noalias ptr @Map_string_PropId__get_buckets(ptr nocapture readonly %0) {
for.entry:
  %1 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Bucket_string_PropId__, ptr %1, align 8
  %memberidx.i = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %1, i64 0, i32 2
  %memberidx1.i = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %1, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %1, i64 0, i32 1
  %2 = tail call ptr @malloc(i32 64)
  store ptr %2, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %memberidx2 = getelementptr inbounds %Map_string_PropId_, ptr %0, i64 0, i32 3
  %3 = load i64, ptr %memberidx2, align 4
  %4 = icmp sgt i64 %3, 0
  br i1 %4, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx3 = getelementptr inbounds %Map_string_PropId_, ptr %0, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %5 = phi i64 [ %3, %for.body.lr.ph ], [ %19, %ifend ]
  %6 = phi ptr [ %2, %for.body.lr.ph ], [ %20, %ifend ]
  %7 = phi ptr [ %2, %for.body.lr.ph ], [ %21, %ifend ]
  %8 = phi i64 [ 8, %for.body.lr.ph ], [ %22, %ifend ]
  %9 = phi i64 [ 0, %for.body.lr.ph ], [ %23, %ifend ]
  %i.011 = phi i64 [ 0, %for.body.lr.ph ], [ %24, %ifend ]
  %10 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %i.011
  %11 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_PropId_, ptr %11, i64 0, i32 3
  %12 = load i1, ptr %memberidx4, align 1
  br i1 %12, label %ifend, label %if.entry

for.end:                                          ; preds = %ifend, %for.entry
  ret ptr %1

if.entry:                                         ; preds = %for.body
  %.not.i = icmp slt i64 %9, %8
  br i1 %.not.i, label %Array_Bucket_string_PropId_____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %if.entry
  %13 = shl i64 %8, 1
  store i64 %13, ptr %memberidx1.i, align 4
  %14 = shl i64 %8, 4
  %15 = tail call ptr @realloc(ptr %7, i64 %14)
  store ptr %15, ptr %memberidx2.i, align 8
  br label %Array_Bucket_string_PropId_____sl__.exit

Array_Bucket_string_PropId_____sl__.exit:         ; preds = %if.entry, %if.entry.i
  %16 = phi ptr [ %6, %if.entry ], [ %15, %if.entry.i ]
  %17 = phi i64 [ %8, %if.entry ], [ %13, %if.entry.i ]
  %18 = add i64 %9, 1
  store i64 %18, ptr %memberidx.i, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %16, i64 %9
  store ptr %11, ptr %ptridx.i, align 8
  %.pre = load i64, ptr %memberidx2, align 4
  br label %ifend

ifend:                                            ; preds = %for.body, %Array_Bucket_string_PropId_____sl__.exit
  %19 = phi i64 [ %5, %for.body ], [ %.pre, %Array_Bucket_string_PropId_____sl__.exit ]
  %20 = phi ptr [ %6, %for.body ], [ %16, %Array_Bucket_string_PropId_____sl__.exit ]
  %21 = phi ptr [ %7, %for.body ], [ %16, %Array_Bucket_string_PropId_____sl__.exit ]
  %22 = phi i64 [ %8, %for.body ], [ %17, %Array_Bucket_string_PropId_____sl__.exit ]
  %23 = phi i64 [ %9, %for.body ], [ %18, %Array_Bucket_string_PropId_____sl__.exit ]
  %24 = add nuw nsw i64 %i.011, 1
  %25 = icmp slt i64 %24, %19
  br i1 %25, label %for.body, label %for.end
}

define internal ptr @Map_string_PropId__get(ptr nocapture readonly %0, ptr %1) {
  %3 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %4 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i64 0, i32 5
  %5 = load ptr, ptr %memberidx.i, align 8
  %6 = tail call ptr %5(ptr nonnull %1)
  %7 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @22, ptr %6)
  %8 = load ptr, ptr %3, align 8
  %9 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %9, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 1
  store ptr %8, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 2
  store i64 %7, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 3
  store i64 %7, ptr %memberidx2.i.i, align 4
  call void @free(ptr %6)
  %10 = load i64, ptr %memberidx1.i.i, align 4
  %11 = icmp sgt i64 %10, 0
  br i1 %11, label %for.body.i, label %Map_string_PropId__hash_fnc.exit

for.body.i:                                       ; preds = %2, %for.body.i
  %i.0.i36 = phi i64 [ %18, %for.body.i ], [ 0, %2 ]
  %hash.0.i35 = phi i64 [ %17, %for.body.i ], [ 0, %2 ]
  %12 = shl i64 %hash.0.i35, 1
  %13 = load ptr, ptr %9, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i64 0, i32 2
  %14 = load ptr, ptr %memberidx2.i, align 8
  %15 = call i8 %14(ptr nonnull %9, i64 %i.0.i36)
  %16 = sext i8 %15 to i64
  %17 = add i64 %12, %16
  %18 = add nuw nsw i64 %i.0.i36, 1
  %19 = load i64, ptr %memberidx1.i.i, align 4
  %20 = icmp slt i64 %18, %19
  br i1 %20, label %for.body.i, label %Map_string_PropId__hash_fnc.exit

Map_string_PropId__hash_fnc.exit:                 ; preds = %for.body.i, %2
  %hash.0.i.lcssa = phi i64 [ 0, %2 ], [ %17, %for.body.i ]
  %21 = call i64 @llvm.abs.i64(i64 %hash.0.i.lcssa, i1 false)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %memberidx = getelementptr inbounds %Map_string_PropId_, ptr %0, i64 0, i32 3
  %22 = load i64, ptr %memberidx, align 4
  %23 = srem i64 %21, %22
  %memberidx1 = getelementptr inbounds %Map_string_PropId_, ptr %0, i64 0, i32 1
  %24 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %24, i64 %23
  %25 = load ptr, ptr %ptridx, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_PropId_, ptr %25, i64 0, i32 3
  %26 = load i1, ptr %memberidx2, align 1
  br i1 %26, label %common.ret, label %while.entry.preheader

while.entry.preheader:                            ; preds = %Map_string_PropId__hash_fnc.exit
  %memberidx1.i33 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %else
  %27 = phi ptr [ %37, %else ], [ %24, %while.entry.preheader ]
  %28 = phi i64 [ %38, %else ], [ %22, %while.entry.preheader ]
  %29 = phi ptr [ %41, %else ], [ %25, %while.entry.preheader ]
  %hash.0 = phi i64 [ %40, %else ], [ %23, %while.entry.preheader ]
  %memberidx5 = getelementptr inbounds %Bucket_string_PropId_, ptr %29, i64 0, i32 1
  %30 = load ptr, ptr %memberidx5, align 8
  %memberidx.i32 = getelementptr inbounds %string, ptr %30, i64 0, i32 2
  %31 = load i64, ptr %memberidx.i32, align 4
  %32 = load i64, ptr %memberidx1.i33, align 4
  %.not.i = icmp eq i64 %31, %32
  br i1 %.not.i, label %ifend.i, label %else

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i34 = getelementptr inbounds %string, ptr %30, i64 0, i32 1
  %33 = load ptr, ptr %memberidx2.i34, align 8
  %34 = load ptr, ptr %memberidx3.i, align 8
  %35 = call i64 @memcmp(ptr %33, ptr %34, i64 %31)
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %while.end, label %ifend.i.else_crit_edge

ifend.i.else_crit_edge:                           ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx, align 4
  %.pre37 = load ptr, ptr %memberidx1, align 8
  br label %else

while.end:                                        ; preds = %ifend.i
  %.pre38.pre = load ptr, ptr %memberidx1, align 8
  %ptridx11.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre38.pre, i64 %hash.0
  %.pre39.pre = load ptr, ptr %ptridx11.phi.trans.insert.phi.trans.insert, align 8
  %memberidx12.phi.trans.insert.phi.trans.insert = getelementptr inbounds %Bucket_string_PropId_, ptr %.pre39.pre, i64 0, i32 3
  %.pre40.pre = load i1, ptr %memberidx12.phi.trans.insert.phi.trans.insert, align 1
  br i1 %.pre40.pre, label %common.ret, label %if.entry13

else:                                             ; preds = %ifend.i.else_crit_edge, %while.entry
  %37 = phi ptr [ %.pre37, %ifend.i.else_crit_edge ], [ %27, %while.entry ]
  %38 = phi i64 [ %.pre, %ifend.i.else_crit_edge ], [ %28, %while.entry ]
  %39 = add i64 %hash.0, 1
  %40 = srem i64 %39, %38
  %ptridx8 = getelementptr inbounds ptr, ptr %37, i64 %40
  %41 = load ptr, ptr %ptridx8, align 8
  %memberidx9 = getelementptr inbounds %Bucket_string_PropId_, ptr %41, i64 0, i32 3
  %42 = load i1, ptr %memberidx9, align 1
  br i1 %42, label %common.ret, label %while.entry

common.ret:                                       ; preds = %else, %Map_string_PropId__hash_fnc.exit, %while.end, %if.entry13
  %common.ret.op = phi ptr [ %43, %if.entry13 ], [ null, %while.end ], [ null, %Map_string_PropId__hash_fnc.exit ], [ null, %else ]
  ret ptr %common.ret.op

if.entry13:                                       ; preds = %while.end
  %memberidx18 = getelementptr inbounds %Bucket_string_PropId_, ptr %.pre39.pre, i64 0, i32 2
  %43 = load ptr, ptr %memberidx18, align 8
  br label %common.ret
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_EnumField__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_EnumField_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_EnumField_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_EnumField____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_EnumField_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_EnumField_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_EnumField_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_EnumField_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Enum__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Enum_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Enum_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_Enum____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_Enum_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_Enum_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_Enum_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_Enum_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Const__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Const_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Const_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_FunctionArg__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_FunctionArg_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_FunctionArg_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Statement__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Statement_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Statement_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_Statement____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_Statement_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_Statement_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_Statement_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_Statement_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Type__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Type_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Type_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_Type____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_Type_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_Type_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_Type_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_Type_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ClassMethod__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ClassMethod_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ClassMethod_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_ClassMethod____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_ClassMethod_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_ClassField__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_ClassField_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_ClassField_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Class__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Class_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Class_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_Class____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_Class_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_Class_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_Class_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_Class_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Function__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Function_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Function_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_Function____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_Function_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_Function_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_Function_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_Function_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Module__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Module_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Module_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal fastcc ptr @TypeChecker_check_module(ptr %0, ptr nocapture readonly %1, ptr %2) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 8
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %3 = load i64, ptr %memberidx1, align 4
  %memberidx2 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %4 = load ptr, ptr %memberidx2, align 8
  %5 = tail call ptr @malloc(i32 80)
  %memberidx.i204 = getelementptr inbounds %Module, ptr %5, i64 0, i32 1
  store ptr %2, ptr %memberidx.i204, align 8
  %memberidx1.i205 = getelementptr inbounds %Module, ptr %5, i64 0, i32 5
  %6 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Function_, ptr %6, align 8
  %memberidx.i.i = getelementptr inbounds %Array_Function_, ptr %6, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Array_Function_, ptr %6, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_Function_, ptr %6, i64 0, i32 1
  %7 = tail call ptr @malloc(i32 64)
  store ptr %7, ptr %memberidx2.i.i, align 8
  store i64 0, ptr %memberidx.i.i, align 4
  store ptr %6, ptr %memberidx1.i205, align 8
  %memberidx4.i = getelementptr inbounds %Module, ptr %5, i64 0, i32 2
  %8 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Var_, ptr %8, align 8
  %memberidx.i37.i = getelementptr inbounds %Array_Var_, ptr %8, i64 0, i32 2
  store i64 0, ptr %memberidx.i37.i, align 4
  %memberidx1.i38.i = getelementptr inbounds %Array_Var_, ptr %8, i64 0, i32 3
  store i64 8, ptr %memberidx1.i38.i, align 4
  %memberidx2.i39.i = getelementptr inbounds %Array_Var_, ptr %8, i64 0, i32 1
  %9 = tail call ptr @malloc(i32 64)
  store ptr %9, ptr %memberidx2.i39.i, align 8
  store i64 0, ptr %memberidx.i37.i, align 4
  store ptr %8, ptr %memberidx4.i, align 8
  %memberidx7.i = getelementptr inbounds %Module, ptr %5, i64 0, i32 4
  %10 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Class_, ptr %10, align 8
  %memberidx.i40.i = getelementptr inbounds %Array_Class_, ptr %10, i64 0, i32 2
  store i64 0, ptr %memberidx.i40.i, align 4
  %memberidx1.i41.i = getelementptr inbounds %Array_Class_, ptr %10, i64 0, i32 3
  store i64 8, ptr %memberidx1.i41.i, align 4
  %memberidx2.i42.i = getelementptr inbounds %Array_Class_, ptr %10, i64 0, i32 1
  %11 = tail call ptr @malloc(i32 64)
  store ptr %11, ptr %memberidx2.i42.i, align 8
  store i64 0, ptr %memberidx.i40.i, align 4
  store ptr %10, ptr %memberidx7.i, align 8
  %12 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Function_, ptr %12, align 8
  %memberidx.i43.i = getelementptr inbounds %Array_Function_, ptr %12, i64 0, i32 2
  store i64 0, ptr %memberidx.i43.i, align 4
  %memberidx1.i44.i = getelementptr inbounds %Array_Function_, ptr %12, i64 0, i32 3
  store i64 8, ptr %memberidx1.i44.i, align 4
  %memberidx2.i45.i = getelementptr inbounds %Array_Function_, ptr %12, i64 0, i32 1
  %13 = tail call ptr @malloc(i32 64)
  store ptr %13, ptr %memberidx2.i45.i, align 8
  store i64 0, ptr %memberidx.i43.i, align 4
  store ptr %12, ptr %memberidx1.i205, align 8
  %memberidx13.i = getelementptr inbounds %Module, ptr %5, i64 0, i32 6
  %14 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Enum_, ptr %14, align 8
  %memberidx.i46.i = getelementptr inbounds %Array_Enum_, ptr %14, i64 0, i32 2
  store i64 0, ptr %memberidx.i46.i, align 4
  %memberidx1.i47.i = getelementptr inbounds %Array_Enum_, ptr %14, i64 0, i32 3
  store i64 8, ptr %memberidx1.i47.i, align 4
  %memberidx2.i48.i = getelementptr inbounds %Array_Enum_, ptr %14, i64 0, i32 1
  %15 = tail call ptr @malloc(i32 64)
  store ptr %15, ptr %memberidx2.i48.i, align 8
  store i64 0, ptr %memberidx.i46.i, align 4
  store ptr %14, ptr %memberidx13.i, align 8
  %memberidx16.i = getelementptr inbounds %Module, ptr %5, i64 0, i32 7
  %16 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Scope_, ptr %16, align 8
  %memberidx.i49.i = getelementptr inbounds %Array_Scope_, ptr %16, i64 0, i32 2
  store i64 0, ptr %memberidx.i49.i, align 4
  %memberidx1.i50.i = getelementptr inbounds %Array_Scope_, ptr %16, i64 0, i32 3
  store i64 8, ptr %memberidx1.i50.i, align 4
  %memberidx2.i51.i = getelementptr inbounds %Array_Scope_, ptr %16, i64 0, i32 1
  %17 = tail call ptr @malloc(i32 64)
  store ptr %17, ptr %memberidx2.i51.i, align 8
  store i64 0, ptr %memberidx.i49.i, align 4
  store ptr %16, ptr %memberidx16.i, align 8
  %memberidx19.i = getelementptr inbounds %Module, ptr %5, i64 0, i32 8
  %18 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ConstDeclaration_, ptr %18, align 8
  %memberidx.i52.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %18, i64 0, i32 2
  store i64 0, ptr %memberidx.i52.i, align 4
  %memberidx1.i53.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %18, i64 0, i32 3
  store i64 8, ptr %memberidx1.i53.i, align 4
  %memberidx2.i54.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %18, i64 0, i32 1
  %19 = tail call ptr @malloc(i32 64)
  store ptr %19, ptr %memberidx2.i54.i, align 8
  store i64 0, ptr %memberidx.i52.i, align 4
  store ptr %18, ptr %memberidx19.i, align 8
  %memberidx22.i = getelementptr inbounds %Module, ptr %5, i64 0, i32 9
  %20 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_VarDeclaration_, ptr %20, align 8
  %memberidx.i55.i = getelementptr inbounds %Array_VarDeclaration_, ptr %20, i64 0, i32 2
  store i64 0, ptr %memberidx.i55.i, align 4
  %memberidx1.i56.i = getelementptr inbounds %Array_VarDeclaration_, ptr %20, i64 0, i32 3
  store i64 8, ptr %memberidx1.i56.i, align 4
  %memberidx2.i57.i = getelementptr inbounds %Array_VarDeclaration_, ptr %20, i64 0, i32 1
  %21 = tail call ptr @malloc(i32 64)
  store ptr %21, ptr %memberidx2.i57.i, align 8
  store i64 0, ptr %memberidx.i55.i, align 4
  store ptr %20, ptr %memberidx22.i, align 8
  %memberidx25.i = getelementptr inbounds %Module, ptr %5, i64 0, i32 3
  %22 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Const_, ptr %22, align 8
  %memberidx.i58.i = getelementptr inbounds %Array_Const_, ptr %22, i64 0, i32 2
  store i64 0, ptr %memberidx.i58.i, align 4
  %memberidx1.i59.i = getelementptr inbounds %Array_Const_, ptr %22, i64 0, i32 3
  store i64 8, ptr %memberidx1.i59.i, align 4
  %memberidx2.i60.i = getelementptr inbounds %Array_Const_, ptr %22, i64 0, i32 1
  %23 = tail call ptr @malloc(i32 64)
  store ptr %23, ptr %memberidx2.i60.i, align 8
  store i64 0, ptr %memberidx.i58.i, align 4
  store ptr %22, ptr %memberidx25.i, align 8
  %24 = load ptr, ptr %0, align 8
  %memberidx5 = getelementptr inbounds %Program, ptr %24, i64 0, i32 1
  %25 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %Array_Module_, ptr %25, i64 0, i32 2
  %26 = load i64, ptr %memberidx6, align 4
  store i64 %26, ptr %memberidx1, align 4
  %27 = load ptr, ptr %memberidx5, align 8
  %memberidx.i206 = getelementptr inbounds %Array_Module_, ptr %27, i64 0, i32 2
  %28 = load i64, ptr %memberidx.i206, align 4
  %memberidx1.i207 = getelementptr inbounds %Array_Module_, ptr %27, i64 0, i32 3
  %29 = load i64, ptr %memberidx1.i207, align 4
  %.not.i = icmp slt i64 %28, %29
  br i1 %.not.i, label %for.entry.Array_Module____sl__.exit_crit_edge, label %if.entry.i

for.entry.Array_Module____sl__.exit_crit_edge:    ; preds = %for.entry
  %memberidx4.i210.phi.trans.insert = getelementptr inbounds %Array_Module_, ptr %27, i64 0, i32 1
  %.pre374 = load ptr, ptr %memberidx4.i210.phi.trans.insert, align 8
  br label %Array_Module____sl__.exit

if.entry.i:                                       ; preds = %for.entry
  %30 = shl i64 %29, 1
  store i64 %30, ptr %memberidx1.i207, align 4
  %memberidx2.i.i209 = getelementptr inbounds %Array_Module_, ptr %27, i64 0, i32 1
  %31 = load ptr, ptr %memberidx2.i.i209, align 8
  %32 = shl i64 %29, 4
  %33 = tail call ptr @realloc(ptr %31, i64 %32)
  store ptr %33, ptr %memberidx2.i.i209, align 8
  %.pre = load i64, ptr %memberidx.i206, align 4
  br label %Array_Module____sl__.exit

Array_Module____sl__.exit:                        ; preds = %for.entry.Array_Module____sl__.exit_crit_edge, %if.entry.i
  %34 = phi ptr [ %.pre374, %for.entry.Array_Module____sl__.exit_crit_edge ], [ %33, %if.entry.i ]
  %35 = phi i64 [ %28, %for.entry.Array_Module____sl__.exit_crit_edge ], [ %.pre, %if.entry.i ]
  %36 = add i64 %35, 1
  store i64 %36, ptr %memberidx.i206, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %34, i64 %35
  store ptr %5, ptr %ptridx.i, align 8
  %37 = tail call fastcc ptr @TypeChecker_create_scope(ptr nonnull %0)
  %memberidx9 = getelementptr inbounds %Scope, ptr %37, i64 0, i32 1
  %38 = load ptr, ptr %memberidx9, align 8
  %39 = load ptr, ptr %38, align 8
  %40 = load ptr, ptr %39, align 8
  %41 = tail call ptr @malloc(i32 32)
  store i32 1702195828, ptr %41, align 8
  %42 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %42, align 8
  %memberidx.i.i211 = getelementptr inbounds %string, ptr %42, i64 0, i32 1
  store ptr %41, ptr %memberidx.i.i211, align 8
  %memberidx1.i.i212 = getelementptr inbounds %string, ptr %42, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i212, align 4
  %memberidx2.i.i213 = getelementptr inbounds %string, ptr %42, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i213, align 4
  tail call void %40(ptr nonnull %38, ptr nonnull %42, ptr null)
  %43 = load ptr, ptr %memberidx9, align 8
  %44 = load ptr, ptr %43, align 8
  %45 = load ptr, ptr %44, align 8
  %46 = tail call ptr @malloc(i32 40)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %46, ptr noundef nonnull align 8 dereferenceable(5) @145, i64 5, i1 false)
  %47 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %47, align 8
  %memberidx.i.i214 = getelementptr inbounds %string, ptr %47, i64 0, i32 1
  store ptr %46, ptr %memberidx.i.i214, align 8
  %memberidx1.i.i215 = getelementptr inbounds %string, ptr %47, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i215, align 4
  %memberidx2.i.i216 = getelementptr inbounds %string, ptr %47, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i216, align 4
  tail call void %45(ptr nonnull %43, ptr nonnull %47, ptr null)
  %48 = load ptr, ptr %memberidx9, align 8
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %49, align 8
  %51 = tail call ptr @malloc(i32 32)
  store i32 1819047278, ptr %51, align 8
  %52 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %52, align 8
  %memberidx.i.i217 = getelementptr inbounds %string, ptr %52, i64 0, i32 1
  store ptr %51, ptr %memberidx.i.i217, align 8
  %memberidx1.i.i218 = getelementptr inbounds %string, ptr %52, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i218, align 4
  %memberidx2.i.i219 = getelementptr inbounds %string, ptr %52, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i219, align 4
  tail call void %50(ptr nonnull %48, ptr nonnull %52, ptr null)
  %53 = load ptr, ptr %37, align 8
  store ptr %53, ptr %memberidx2, align 8
  %memberidx18 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 2
  %memberidx19 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 3
  %memberidx20 = getelementptr inbounds %ModuleAST, ptr %1, i64 0, i32 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %memberidx18, i8 0, i64 24, i1 false)
  %54 = load ptr, ptr %memberidx20, align 8
  %55 = tail call ptr @malloc(i32 33)
  %memberidx.i220 = getelementptr inbounds %Array_ImportNode_, ptr %54, i64 0, i32 1
  %56 = load ptr, ptr %memberidx.i220, align 8
  %memberidx1.i221 = getelementptr inbounds %Array_ImportNode_, ptr %54, i64 0, i32 2
  %57 = load i64, ptr %memberidx1.i221, align 4
  store ptr @VTableArrayIterator_ImportNode_, ptr %55, align 8
  %memberidx.i.i222 = getelementptr inbounds %Iterator_ImportNode_, ptr %55, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i222, align 1
  %memberidx1.i.i223 = getelementptr inbounds %ArrayIterator_ImportNode_, ptr %55, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i223, align 4
  %memberidx2.i.i224 = getelementptr inbounds %ArrayIterator_ImportNode_, ptr %55, i64 0, i32 4
  store ptr %56, ptr %memberidx2.i.i224, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_ImportNode_, ptr %55, i64 0, i32 3
  store i64 %57, ptr %memberidx3.i.i, align 4
  %58 = load ptr, ptr @VTableArrayIterator_ImportNode_, align 8
  %59 = tail call ptr %58(ptr nonnull %55)
  %60 = load i1, ptr %memberidx.i.i222, align 1
  br i1 %60, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %Array_Module____sl__.exit
  %memberidx.i230 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %module_import.0371 = phi ptr [ %59, %for.body.lr.ph ], [ %74, %ifend ]
  tail call fastcc void @TypeChecker_check_module_import(ptr nonnull %0, ptr %module_import.0371)
  %61 = load ptr, ptr %memberidx.i230, align 8
  %memberidx1.i231 = getelementptr inbounds %Compiler, ptr %61, i64 0, i32 6
  %62 = load ptr, ptr %memberidx1.i231, align 8
  %memberidx2.i232 = getelementptr inbounds %Array_FloError_, ptr %62, i64 0, i32 2
  %63 = load i64, ptr %memberidx2.i232, align 4
  %64 = icmp sgt i64 %63, 0
  br i1 %64, label %common.ret, label %ifend

for.end:                                          ; preds = %ifend, %Array_Module____sl__.exit
  tail call void @free(ptr nonnull %55)
  %memberidx26 = getelementptr inbounds %ModuleAST, ptr %1, i64 0, i32 2
  %65 = load ptr, ptr %memberidx26, align 8
  %66 = tail call ptr @malloc(i32 33)
  %memberidx.i233 = getelementptr inbounds %Array_EnumNode_, ptr %65, i64 0, i32 1
  %67 = load ptr, ptr %memberidx.i233, align 8
  %memberidx1.i234 = getelementptr inbounds %Array_EnumNode_, ptr %65, i64 0, i32 2
  %68 = load i64, ptr %memberidx1.i234, align 4
  store ptr @VTableArrayIterator_EnumNode_, ptr %66, align 8
  %memberidx.i.i235 = getelementptr inbounds %Iterator_EnumNode_, ptr %66, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i235, align 1
  %memberidx1.i.i236 = getelementptr inbounds %ArrayIterator_EnumNode_, ptr %66, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i236, align 4
  %memberidx2.i.i237 = getelementptr inbounds %ArrayIterator_EnumNode_, ptr %66, i64 0, i32 4
  store ptr %67, ptr %memberidx2.i.i237, align 8
  %memberidx3.i.i238 = getelementptr inbounds %ArrayIterator_EnumNode_, ptr %66, i64 0, i32 3
  store i64 %68, ptr %memberidx3.i.i238, align 4
  %69 = load ptr, ptr @VTableArrayIterator_EnumNode_, align 8
  %70 = tail call ptr %69(ptr nonnull %66)
  %71 = load i1, ptr %memberidx.i.i235, align 1
  br i1 %71, label %for.end31, label %for.body29

common.ret:                                       ; preds = %for.body, %ifend136, %for.end96, %for.end41, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %for.end41 ], [ null, %for.end96 ], [ %spec.select, %ifend136 ], [ null, %for.body ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %for.body
  %72 = load ptr, ptr %55, align 8
  %73 = load ptr, ptr %72, align 8
  %74 = tail call ptr %73(ptr nonnull %55)
  %75 = load i1, ptr %memberidx.i.i222, align 1
  br i1 %75, label %for.end, label %for.body

for.body29:                                       ; preds = %for.end, %for.body29
  %storemerge370 = phi ptr [ %78, %for.body29 ], [ %70, %for.end ]
  tail call fastcc void @TypeChecker_declare_enum_within_module(ptr nonnull %0, ptr %storemerge370)
  %76 = load ptr, ptr %66, align 8
  %77 = load ptr, ptr %76, align 8
  %78 = tail call ptr %77(ptr nonnull %66)
  %79 = load i1, ptr %memberidx.i.i235, align 1
  br i1 %79, label %for.end31, label %for.body29

for.end31:                                        ; preds = %for.body29, %for.end
  tail call void @free(ptr nonnull %66)
  %memberidx36 = getelementptr inbounds %ModuleAST, ptr %1, i64 0, i32 1
  %80 = load ptr, ptr %memberidx36, align 8
  %81 = tail call ptr @malloc(i32 33)
  %memberidx.i239 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %80, i64 0, i32 1
  %82 = load ptr, ptr %memberidx.i239, align 8
  %memberidx1.i240 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %80, i64 0, i32 2
  %83 = load i64, ptr %memberidx1.i240, align 4
  store ptr @VTableArrayIterator_ClassDeclarationNode_, ptr %81, align 8
  %memberidx.i.i241 = getelementptr inbounds %Iterator_ClassDeclarationNode_, ptr %81, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i241, align 1
  %memberidx1.i.i242 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %81, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i242, align 4
  %memberidx2.i.i243 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %81, i64 0, i32 4
  store ptr %82, ptr %memberidx2.i.i243, align 8
  %memberidx3.i.i244 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %81, i64 0, i32 3
  store i64 %83, ptr %memberidx3.i.i244, align 4
  %84 = load ptr, ptr @VTableArrayIterator_ClassDeclarationNode_, align 8
  %85 = tail call ptr %84(ptr nonnull %81)
  %86 = load i1, ptr %memberidx.i.i241, align 1
  br i1 %86, label %for.end41, label %for.body39

for.body39:                                       ; preds = %for.end31, %for.body39
  %storemerge196369 = phi ptr [ %89, %for.body39 ], [ %85, %for.end31 ]
  tail call fastcc void @TypeChecker_declare_class_within_module(ptr nonnull %0, ptr %storemerge196369)
  %87 = load ptr, ptr %81, align 8
  %88 = load ptr, ptr %87, align 8
  %89 = tail call ptr %88(ptr nonnull %81)
  %90 = load i1, ptr %memberidx.i.i241, align 1
  br i1 %90, label %for.end41, label %for.body39

for.end41:                                        ; preds = %for.body39, %for.end31
  tail call void @free(ptr nonnull %81)
  %memberidx.i245 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %91 = load ptr, ptr %memberidx.i245, align 8
  %memberidx1.i246 = getelementptr inbounds %Compiler, ptr %91, i64 0, i32 6
  %92 = load ptr, ptr %memberidx1.i246, align 8
  %memberidx2.i247 = getelementptr inbounds %Array_FloError_, ptr %92, i64 0, i32 2
  %93 = load i64, ptr %memberidx2.i247, align 4
  %94 = icmp sgt i64 %93, 0
  br i1 %94, label %common.ret, label %for.entry47

for.entry47:                                      ; preds = %for.end41
  %memberidx49 = getelementptr inbounds %ModuleAST, ptr %1, i64 0, i32 6
  %95 = load ptr, ptr %memberidx49, align 8
  %96 = tail call ptr @malloc(i32 33)
  %memberidx.i248 = getelementptr inbounds %Array_TypeAliasNode_, ptr %95, i64 0, i32 1
  %97 = load ptr, ptr %memberidx.i248, align 8
  %memberidx1.i249 = getelementptr inbounds %Array_TypeAliasNode_, ptr %95, i64 0, i32 2
  %98 = load i64, ptr %memberidx1.i249, align 4
  store ptr @VTableArrayIterator_TypeAliasNode_, ptr %96, align 8
  %memberidx.i.i250 = getelementptr inbounds %Iterator_TypeAliasNode_, ptr %96, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i250, align 1
  %memberidx1.i.i251 = getelementptr inbounds %ArrayIterator_TypeAliasNode_, ptr %96, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i251, align 4
  %memberidx2.i.i252 = getelementptr inbounds %ArrayIterator_TypeAliasNode_, ptr %96, i64 0, i32 4
  store ptr %97, ptr %memberidx2.i.i252, align 8
  %memberidx3.i.i253 = getelementptr inbounds %ArrayIterator_TypeAliasNode_, ptr %96, i64 0, i32 3
  store i64 %98, ptr %memberidx3.i.i253, align 4
  %99 = load ptr, ptr @VTableArrayIterator_TypeAliasNode_, align 8
  %100 = tail call ptr %99(ptr nonnull %96)
  %101 = load i1, ptr %memberidx.i.i250, align 1
  br i1 %101, label %for.end54, label %for.body52.lr.ph

for.body52.lr.ph:                                 ; preds = %for.entry47
  %memberidx66 = getelementptr inbounds %Scope, ptr %37, i64 0, i32 6
  br label %for.body52

for.body52:                                       ; preds = %for.body52.lr.ph, %ifend62
  %storemerge197368 = phi ptr [ %100, %for.body52.lr.ph ], [ %141, %ifend62 ]
  %memberidx56 = getelementptr inbounds %TypeAliasNode, ptr %storemerge197368, i64 0, i32 1
  %102 = load ptr, ptr %memberidx56, align 8
  %103 = tail call fastcc ptr @TypeChecker_check_type(ptr nonnull %0, ptr %102)
  %104 = load ptr, ptr %storemerge197368, align 8
  %memberidx58 = getelementptr inbounds %IdentifierToken, ptr %104, i64 0, i32 2
  %105 = load ptr, ptr %memberidx58, align 8
  %106 = tail call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr nonnull %0, ptr %105)
  %107 = load i64, ptr %106, align 4
  %.not = icmp eq i64 %107, 21
  br i1 %.not, label %ifend62, label %if.entry60

for.end54:                                        ; preds = %ifend62, %for.entry47
  tail call void @free(ptr nonnull %96)
  %memberidx71 = getelementptr inbounds %ModuleAST, ptr %1, i64 0, i32 4
  %108 = load ptr, ptr %memberidx71, align 8
  %109 = tail call ptr @malloc(i32 33)
  %memberidx.i254 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %108, i64 0, i32 1
  %110 = load ptr, ptr %memberidx.i254, align 8
  %memberidx1.i255 = getelementptr inbounds %Array_ConstDeclarationStatement_, ptr %108, i64 0, i32 2
  %111 = load i64, ptr %memberidx1.i255, align 4
  store ptr @VTableArrayIterator_ConstDeclarationStatement_, ptr %109, align 8
  %memberidx.i.i256 = getelementptr inbounds %Iterator_ConstDeclarationStatement_, ptr %109, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i256, align 1
  %memberidx1.i.i257 = getelementptr inbounds %ArrayIterator_ConstDeclarationStatement_, ptr %109, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i257, align 4
  %memberidx2.i.i258 = getelementptr inbounds %ArrayIterator_ConstDeclarationStatement_, ptr %109, i64 0, i32 4
  store ptr %110, ptr %memberidx2.i.i258, align 8
  %memberidx3.i.i259 = getelementptr inbounds %ArrayIterator_ConstDeclarationStatement_, ptr %109, i64 0, i32 3
  store i64 %111, ptr %memberidx3.i.i259, align 4
  %112 = load ptr, ptr @VTableArrayIterator_ConstDeclarationStatement_, align 8
  %113 = tail call ptr %112(ptr nonnull %109)
  %114 = load i1, ptr %memberidx.i.i256, align 1
  br i1 %114, label %for.end76, label %for.body74

if.entry60:                                       ; preds = %for.body52
  %115 = load ptr, ptr %105, align 8
  %memberidx63 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %115, i64 0, i32 5
  %116 = load ptr, ptr %memberidx63, align 8
  %117 = tail call ptr %116(ptr nonnull %105)
  %118 = alloca ptr, align 8
  %119 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %118, ptr nonnull @146, ptr %117)
  %120 = load ptr, ptr %118, align 8
  %121 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %121, align 8
  %memberidx.i260 = getelementptr inbounds %string, ptr %121, i64 0, i32 1
  store ptr %120, ptr %memberidx.i260, align 8
  %memberidx1.i261 = getelementptr inbounds %string, ptr %121, i64 0, i32 2
  store i64 %119, ptr %memberidx1.i261, align 4
  %memberidx2.i262 = getelementptr inbounds %string, ptr %121, i64 0, i32 3
  store i64 %119, ptr %memberidx2.i262, align 4
  tail call void @free(ptr %117)
  %122 = load ptr, ptr %storemerge197368, align 8
  %memberidx65 = getelementptr inbounds %Token, ptr %122, i64 0, i32 1
  %123 = load ptr, ptr %memberidx65, align 8
  %124 = load ptr, ptr %memberidx.i245, align 8
  %memberidx1.i264 = getelementptr inbounds %Compiler, ptr %124, i64 0, i32 6
  %125 = load ptr, ptr %memberidx1.i264, align 8
  %126 = call ptr @malloc(i32 24)
  store i64 1, ptr %126, align 4
  %memberidx1.i.i265 = getelementptr inbounds %FloError, ptr %126, i64 0, i32 2
  store ptr %123, ptr %memberidx1.i.i265, align 8
  %memberidx2.i.i266 = getelementptr inbounds %FloError, ptr %126, i64 0, i32 1
  store ptr %121, ptr %memberidx2.i.i266, align 8
  %memberidx.i.i267 = getelementptr inbounds %Array_FloError_, ptr %125, i64 0, i32 2
  %127 = load i64, ptr %memberidx.i.i267, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %125, i64 0, i32 3
  %128 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %127, %128
  br i1 %.not.i.i, label %if.entry60.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry60.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry60
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %125, i64 0, i32 1
  %.pre376 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry60
  %129 = shl i64 %128, 1
  store i64 %129, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %125, i64 0, i32 1
  %130 = load ptr, ptr %memberidx2.i.i.i, align 8
  %131 = shl i64 %128, 4
  %132 = call ptr @realloc(ptr %130, i64 %131)
  store ptr %132, ptr %memberidx2.i.i.i, align 8
  %.pre375 = load i64, ptr %memberidx.i.i267, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry60.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %133 = phi ptr [ %.pre376, %if.entry60.TypeChecker_error.exit_crit_edge ], [ %132, %if.entry.i.i ]
  %134 = phi i64 [ %127, %if.entry60.TypeChecker_error.exit_crit_edge ], [ %.pre375, %if.entry.i.i ]
  %135 = add i64 %134, 1
  store i64 %135, ptr %memberidx.i.i267, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %133, i64 %134
  store ptr %126, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend62:                                          ; preds = %for.body52
  %136 = load ptr, ptr %memberidx66, align 8
  %137 = load ptr, ptr %136, align 8
  %138 = load ptr, ptr %137, align 8
  tail call void %138(ptr nonnull %136, ptr %105, ptr %103)
  %139 = load ptr, ptr %96, align 8
  %140 = load ptr, ptr %139, align 8
  %141 = tail call ptr %140(ptr nonnull %96)
  %142 = load i1, ptr %memberidx.i.i250, align 1
  br i1 %142, label %for.end54, label %for.body52

for.body74:                                       ; preds = %for.end54, %TypeChecker_declare_global_const.exit
  %storemerge198367 = phi ptr [ %165, %TypeChecker_declare_global_const.exit ], [ %113, %for.end54 ]
  %143 = tail call fastcc ptr @TypeChecker_check_const_declaration(ptr nonnull %0, ptr %storemerge198367)
  %144 = load ptr, ptr %memberidx.i245, align 8
  %memberidx1.i.i270 = getelementptr inbounds %Compiler, ptr %144, i64 0, i32 6
  %145 = load ptr, ptr %memberidx1.i.i270, align 8
  %memberidx2.i.i271 = getelementptr inbounds %Array_FloError_, ptr %145, i64 0, i32 2
  %146 = load i64, ptr %memberidx2.i.i271, align 4
  %147 = icmp sgt i64 %146, 0
  br i1 %147, label %TypeChecker_declare_global_const.exit, label %ifend.i

ifend.i:                                          ; preds = %for.body74
  %memberidx.i272 = getelementptr inbounds %ConstDeclaration, ptr %143, i64 0, i32 3
  store i1 true, ptr %memberidx.i272, align 1
  %148 = load i64, ptr %memberidx1, align 4
  %149 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i = getelementptr inbounds %Program, ptr %149, i64 0, i32 1
  %150 = load ptr, ptr %memberidx1.i.i.i, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %150, i64 0, i32 1
  %151 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %151, i64 %148
  %152 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx1.i273 = getelementptr inbounds %Module, ptr %152, i64 0, i32 8
  %153 = load ptr, ptr %memberidx1.i273, align 8
  %memberidx.i5.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %153, i64 0, i32 2
  %154 = load i64, ptr %memberidx.i5.i, align 4
  %memberidx1.i6.i = getelementptr inbounds %Array_ConstDeclaration_, ptr %153, i64 0, i32 3
  %155 = load i64, ptr %memberidx1.i6.i, align 4
  %.not.i.i274 = icmp slt i64 %154, %155
  br i1 %.not.i.i274, label %ifend.i.Array_ConstDeclaration____sl__.exit.i_crit_edge, label %if.entry.i.i277

ifend.i.Array_ConstDeclaration____sl__.exit.i_crit_edge: ; preds = %ifend.i
  %memberidx4.i.i278.phi.trans.insert = getelementptr inbounds %Array_ConstDeclaration_, ptr %153, i64 0, i32 1
  %.pre378 = load ptr, ptr %memberidx4.i.i278.phi.trans.insert, align 8
  br label %Array_ConstDeclaration____sl__.exit.i

if.entry.i.i277:                                  ; preds = %ifend.i
  %156 = shl i64 %155, 1
  store i64 %156, ptr %memberidx1.i6.i, align 4
  %memberidx2.i.i.i276 = getelementptr inbounds %Array_ConstDeclaration_, ptr %153, i64 0, i32 1
  %157 = load ptr, ptr %memberidx2.i.i.i276, align 8
  %158 = shl i64 %155, 4
  %159 = tail call ptr @realloc(ptr %157, i64 %158)
  store ptr %159, ptr %memberidx2.i.i.i276, align 8
  %.pre377 = load i64, ptr %memberidx.i5.i, align 4
  br label %Array_ConstDeclaration____sl__.exit.i

Array_ConstDeclaration____sl__.exit.i:            ; preds = %ifend.i.Array_ConstDeclaration____sl__.exit.i_crit_edge, %if.entry.i.i277
  %160 = phi ptr [ %159, %if.entry.i.i277 ], [ %.pre378, %ifend.i.Array_ConstDeclaration____sl__.exit.i_crit_edge ]
  %161 = phi i64 [ %.pre377, %if.entry.i.i277 ], [ %154, %ifend.i.Array_ConstDeclaration____sl__.exit.i_crit_edge ]
  %162 = add i64 %161, 1
  store i64 %162, ptr %memberidx.i5.i, align 4
  %ptridx.i.i279 = getelementptr inbounds ptr, ptr %160, i64 %161
  store ptr %143, ptr %ptridx.i.i279, align 8
  br label %TypeChecker_declare_global_const.exit

TypeChecker_declare_global_const.exit:            ; preds = %for.body74, %Array_ConstDeclaration____sl__.exit.i
  %163 = load ptr, ptr %109, align 8
  %164 = load ptr, ptr %163, align 8
  %165 = tail call ptr %164(ptr nonnull %109)
  %166 = load i1, ptr %memberidx.i.i256, align 1
  br i1 %166, label %for.end76, label %for.body74

for.end76:                                        ; preds = %TypeChecker_declare_global_const.exit, %for.end54
  tail call void @free(ptr nonnull %109)
  %memberidx81 = getelementptr inbounds %ModuleAST, ptr %1, i64 0, i32 5
  %167 = load ptr, ptr %memberidx81, align 8
  %168 = tail call ptr @malloc(i32 33)
  %memberidx.i280 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %167, i64 0, i32 1
  %169 = load ptr, ptr %memberidx.i280, align 8
  %memberidx1.i281 = getelementptr inbounds %Array_VarDeclarationStatement_, ptr %167, i64 0, i32 2
  %170 = load i64, ptr %memberidx1.i281, align 4
  store ptr @VTableArrayIterator_VarDeclarationStatement_, ptr %168, align 8
  %memberidx.i.i282 = getelementptr inbounds %Iterator_VarDeclarationStatement_, ptr %168, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i282, align 1
  %memberidx1.i.i283 = getelementptr inbounds %ArrayIterator_VarDeclarationStatement_, ptr %168, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i283, align 4
  %memberidx2.i.i284 = getelementptr inbounds %ArrayIterator_VarDeclarationStatement_, ptr %168, i64 0, i32 4
  store ptr %169, ptr %memberidx2.i.i284, align 8
  %memberidx3.i.i285 = getelementptr inbounds %ArrayIterator_VarDeclarationStatement_, ptr %168, i64 0, i32 3
  store i64 %170, ptr %memberidx3.i.i285, align 4
  %171 = load ptr, ptr @VTableArrayIterator_VarDeclarationStatement_, align 8
  %172 = tail call ptr %171(ptr nonnull %168)
  %173 = load i1, ptr %memberidx.i.i282, align 1
  br i1 %173, label %for.end86, label %for.body84

for.body84:                                       ; preds = %for.end76, %TypeChecker_declare_global_var.exit
  %storemerge199366 = phi ptr [ %224, %TypeChecker_declare_global_var.exit ], [ %172, %for.end76 ]
  %174 = tail call fastcc ptr @TypeChecker_check_var_declaration(ptr nonnull %0, ptr %storemerge199366)
  %175 = load ptr, ptr %memberidx.i245, align 8
  %memberidx1.i.i287 = getelementptr inbounds %Compiler, ptr %175, i64 0, i32 6
  %176 = load ptr, ptr %memberidx1.i.i287, align 8
  %memberidx2.i.i288 = getelementptr inbounds %Array_FloError_, ptr %176, i64 0, i32 2
  %177 = load i64, ptr %memberidx2.i.i288, align 4
  %178 = icmp sgt i64 %177, 0
  br i1 %178, label %TypeChecker_declare_global_var.exit, label %ifend.i293

ifend.i293:                                       ; preds = %for.body84
  %179 = load ptr, ptr %0, align 8
  %memberidx1.i289 = getelementptr inbounds %VarDeclaration, ptr %174, i64 0, i32 2
  %180 = load ptr, ptr %memberidx1.i289, align 8
  %memberidx.i20.i = getelementptr inbounds %Program, ptr %179, i64 0, i32 1
  %181 = load ptr, ptr %memberidx.i20.i, align 8
  %memberidx1.i21.i = getelementptr inbounds %VarId, ptr %180, i64 0, i32 1
  %182 = load i64, ptr %memberidx1.i21.i, align 4
  %memberidx.i.i22.i = getelementptr inbounds %Array_Module_, ptr %181, i64 0, i32 1
  %183 = load ptr, ptr %memberidx.i.i22.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %183, i64 %182
  %184 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i23.i = getelementptr inbounds %Module, ptr %184, i64 0, i32 2
  %185 = load ptr, ptr %memberidx2.i23.i, align 8
  %memberidx3.i.i290 = getelementptr inbounds %VarId, ptr %180, i64 0, i32 2
  %186 = load i64, ptr %memberidx3.i.i290, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Var_, ptr %185, i64 0, i32 1
  %187 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %187, i64 %186
  %188 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx2.i291 = getelementptr inbounds %Var, ptr %188, i64 0, i32 2
  %189 = load ptr, ptr %memberidx2.i291, align 8
  %memberidx3.i292 = getelementptr inbounds %Expression, ptr %189, i64 0, i32 1
  %190 = load i1, ptr %memberidx3.i292, align 1
  br i1 %190, label %ifend6.i, label %if.entry4.i

if.entry4.i:                                      ; preds = %ifend.i293
  %191 = tail call ptr @malloc(i32 432)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(54) %191, ptr noundef nonnull align 8 dereferenceable(54) @150, i64 54, i1 false)
  %192 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %192, align 8
  %memberidx.i.i32.i = getelementptr inbounds %string, ptr %192, i64 0, i32 1
  store ptr %191, ptr %memberidx.i.i32.i, align 8
  %memberidx1.i.i33.i = getelementptr inbounds %string, ptr %192, i64 0, i32 2
  store i64 54, ptr %memberidx1.i.i33.i, align 4
  %memberidx2.i.i34.i = getelementptr inbounds %string, ptr %192, i64 0, i32 3
  store i64 54, ptr %memberidx2.i.i34.i, align 4
  %memberidx7.i294 = getelementptr inbounds %VarDeclarationStatement, ptr %storemerge199366, i64 0, i32 4
  %193 = load ptr, ptr %memberidx7.i294, align 8
  %194 = load ptr, ptr %193, align 8
  %195 = load ptr, ptr %memberidx.i245, align 8
  %memberidx1.i26.i = getelementptr inbounds %Compiler, ptr %195, i64 0, i32 6
  %196 = load ptr, ptr %memberidx1.i26.i, align 8
  %197 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %197, align 4
  %memberidx1.i.i27.i = getelementptr inbounds %FloError, ptr %197, i64 0, i32 2
  store ptr %194, ptr %memberidx1.i.i27.i, align 8
  %memberidx2.i.i28.i = getelementptr inbounds %FloError, ptr %197, i64 0, i32 1
  store ptr %192, ptr %memberidx2.i.i28.i, align 8
  %memberidx.i.i29.i = getelementptr inbounds %Array_FloError_, ptr %196, i64 0, i32 2
  %198 = load i64, ptr %memberidx.i.i29.i, align 4
  %memberidx1.i2.i.i = getelementptr inbounds %Array_FloError_, ptr %196, i64 0, i32 3
  %199 = load i64, ptr %memberidx1.i2.i.i, align 4
  %.not.i.i.i = icmp slt i64 %198, %199
  br i1 %.not.i.i.i, label %if.entry4.i.TypeChecker_error.exit.i_crit_edge, label %if.entry.i.i.i

if.entry4.i.TypeChecker_error.exit.i_crit_edge:   ; preds = %if.entry4.i
  %memberidx4.i.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %196, i64 0, i32 1
  %.pre380 = load ptr, ptr %memberidx4.i.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit.i

if.entry.i.i.i:                                   ; preds = %if.entry4.i
  %200 = shl i64 %199, 1
  store i64 %200, ptr %memberidx1.i2.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %Array_FloError_, ptr %196, i64 0, i32 1
  %201 = load ptr, ptr %memberidx2.i.i.i.i, align 8
  %202 = shl i64 %199, 4
  %203 = tail call ptr @realloc(ptr %201, i64 %202)
  store ptr %203, ptr %memberidx2.i.i.i.i, align 8
  %.pre379 = load i64, ptr %memberidx.i.i29.i, align 4
  br label %TypeChecker_error.exit.i

TypeChecker_error.exit.i:                         ; preds = %if.entry4.i.TypeChecker_error.exit.i_crit_edge, %if.entry.i.i.i
  %204 = phi ptr [ %203, %if.entry.i.i.i ], [ %.pre380, %if.entry4.i.TypeChecker_error.exit.i_crit_edge ]
  %205 = phi i64 [ %.pre379, %if.entry.i.i.i ], [ %198, %if.entry4.i.TypeChecker_error.exit.i_crit_edge ]
  %206 = add i64 %205, 1
  store i64 %206, ptr %memberidx.i.i29.i, align 4
  %ptridx.i.i31.i = getelementptr inbounds ptr, ptr %204, i64 %205
  store ptr %197, ptr %ptridx.i.i31.i, align 8
  br label %TypeChecker_declare_global_var.exit

ifend6.i:                                         ; preds = %ifend.i293
  %memberidx9.i295 = getelementptr inbounds %VarDeclaration, ptr %174, i64 0, i32 3
  store i1 true, ptr %memberidx9.i295, align 1
  %207 = load i64, ptr %memberidx1, align 4
  %208 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i296 = getelementptr inbounds %Program, ptr %208, i64 0, i32 1
  %209 = load ptr, ptr %memberidx1.i.i.i296, align 8
  %memberidx.i.i.i.i297 = getelementptr inbounds %Array_Module_, ptr %209, i64 0, i32 1
  %210 = load ptr, ptr %memberidx.i.i.i.i297, align 8
  %ptridx.i.i.i.i298 = getelementptr inbounds ptr, ptr %210, i64 %207
  %211 = load ptr, ptr %ptridx.i.i.i.i298, align 8
  %memberidx10.i = getelementptr inbounds %Module, ptr %211, i64 0, i32 9
  %212 = load ptr, ptr %memberidx10.i, align 8
  %memberidx.i18.i = getelementptr inbounds %Array_VarDeclaration_, ptr %212, i64 0, i32 2
  %213 = load i64, ptr %memberidx.i18.i, align 4
  %memberidx1.i19.i = getelementptr inbounds %Array_VarDeclaration_, ptr %212, i64 0, i32 3
  %214 = load i64, ptr %memberidx1.i19.i, align 4
  %.not.i.i299 = icmp slt i64 %213, %214
  br i1 %.not.i.i299, label %ifend6.i.Array_VarDeclaration____sl__.exit.i_crit_edge, label %if.entry.i.i302

ifend6.i.Array_VarDeclaration____sl__.exit.i_crit_edge: ; preds = %ifend6.i
  %memberidx4.i.i303.phi.trans.insert = getelementptr inbounds %Array_VarDeclaration_, ptr %212, i64 0, i32 1
  %.pre382 = load ptr, ptr %memberidx4.i.i303.phi.trans.insert, align 8
  br label %Array_VarDeclaration____sl__.exit.i

if.entry.i.i302:                                  ; preds = %ifend6.i
  %215 = shl i64 %214, 1
  store i64 %215, ptr %memberidx1.i19.i, align 4
  %memberidx2.i.i.i301 = getelementptr inbounds %Array_VarDeclaration_, ptr %212, i64 0, i32 1
  %216 = load ptr, ptr %memberidx2.i.i.i301, align 8
  %217 = shl i64 %214, 4
  %218 = tail call ptr @realloc(ptr %216, i64 %217)
  store ptr %218, ptr %memberidx2.i.i.i301, align 8
  %.pre381 = load i64, ptr %memberidx.i18.i, align 4
  br label %Array_VarDeclaration____sl__.exit.i

Array_VarDeclaration____sl__.exit.i:              ; preds = %ifend6.i.Array_VarDeclaration____sl__.exit.i_crit_edge, %if.entry.i.i302
  %219 = phi ptr [ %218, %if.entry.i.i302 ], [ %.pre382, %ifend6.i.Array_VarDeclaration____sl__.exit.i_crit_edge ]
  %220 = phi i64 [ %.pre381, %if.entry.i.i302 ], [ %213, %ifend6.i.Array_VarDeclaration____sl__.exit.i_crit_edge ]
  %221 = add i64 %220, 1
  store i64 %221, ptr %memberidx.i18.i, align 4
  %ptridx.i.i304 = getelementptr inbounds ptr, ptr %219, i64 %220
  store ptr %174, ptr %ptridx.i.i304, align 8
  br label %TypeChecker_declare_global_var.exit

TypeChecker_declare_global_var.exit:              ; preds = %for.body84, %TypeChecker_error.exit.i, %Array_VarDeclaration____sl__.exit.i
  %222 = load ptr, ptr %168, align 8
  %223 = load ptr, ptr %222, align 8
  %224 = tail call ptr %223(ptr nonnull %168)
  %225 = load i1, ptr %memberidx.i.i282, align 1
  br i1 %225, label %for.end86, label %for.body84

for.end86:                                        ; preds = %TypeChecker_declare_global_var.exit, %for.end76
  tail call void @free(ptr nonnull %168)
  %226 = load ptr, ptr %1, align 8
  %227 = tail call ptr @malloc(i32 33)
  %memberidx.i305 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %226, i64 0, i32 1
  %228 = load ptr, ptr %memberidx.i305, align 8
  %memberidx1.i306 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %226, i64 0, i32 2
  %229 = load i64, ptr %memberidx1.i306, align 4
  store ptr @VTableArrayIterator_FunctionDeclarationNode_, ptr %227, align 8
  %memberidx.i.i307 = getelementptr inbounds %Iterator_FunctionDeclarationNode_, ptr %227, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i307, align 1
  %memberidx1.i.i308 = getelementptr inbounds %ArrayIterator_FunctionDeclarationNode_, ptr %227, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i308, align 4
  %memberidx2.i.i309 = getelementptr inbounds %ArrayIterator_FunctionDeclarationNode_, ptr %227, i64 0, i32 4
  store ptr %228, ptr %memberidx2.i.i309, align 8
  %memberidx3.i.i310 = getelementptr inbounds %ArrayIterator_FunctionDeclarationNode_, ptr %227, i64 0, i32 3
  store i64 %229, ptr %memberidx3.i.i310, align 4
  %230 = load ptr, ptr @VTableArrayIterator_FunctionDeclarationNode_, align 8
  %231 = tail call ptr %230(ptr nonnull %227)
  %232 = load i1, ptr %memberidx.i.i307, align 1
  br i1 %232, label %for.end96, label %for.body94

for.body94:                                       ; preds = %for.end86, %for.body94
  %storemerge200365 = phi ptr [ %235, %for.body94 ], [ %231, %for.end86 ]
  tail call fastcc void @TypeChecker_declare_function_within_module(ptr nonnull %0, ptr %storemerge200365)
  %233 = load ptr, ptr %227, align 8
  %234 = load ptr, ptr %233, align 8
  %235 = tail call ptr %234(ptr nonnull %227)
  %236 = load i1, ptr %memberidx.i.i307, align 1
  br i1 %236, label %for.end96, label %for.body94

for.end96:                                        ; preds = %for.body94, %for.end86
  tail call void @free(ptr nonnull %227)
  %237 = load ptr, ptr %memberidx.i245, align 8
  %memberidx1.i312 = getelementptr inbounds %Compiler, ptr %237, i64 0, i32 6
  %238 = load ptr, ptr %memberidx1.i312, align 8
  %memberidx2.i313 = getelementptr inbounds %Array_FloError_, ptr %238, i64 0, i32 2
  %239 = load i64, ptr %memberidx2.i313, align 4
  %240 = icmp sgt i64 %239, 0
  br i1 %240, label %common.ret, label %for.cond103.preheader

for.cond103.preheader:                            ; preds = %for.end96
  %241 = load ptr, ptr %memberidx26, align 8
  %memberidx108363 = getelementptr inbounds %Array_EnumNode_, ptr %241, i64 0, i32 2
  %242 = load i64, ptr %memberidx108363, align 4
  %243 = icmp sgt i64 %242, 0
  br i1 %243, label %for.body104, label %for.entry111

for.body104:                                      ; preds = %for.cond103.preheader, %for.body104
  %244 = phi ptr [ %251, %for.body104 ], [ %241, %for.cond103.preheader ]
  %storemerge203364 = phi i64 [ %250, %for.body104 ], [ 0, %for.cond103.preheader ]
  %245 = load ptr, ptr %memberidx13.i, align 8
  %memberidx.i314 = getelementptr inbounds %Array_Enum_, ptr %245, i64 0, i32 1
  %246 = load ptr, ptr %memberidx.i314, align 8
  %ptridx.i315 = getelementptr inbounds ptr, ptr %246, i64 %storemerge203364
  %247 = load ptr, ptr %ptridx.i315, align 8
  %memberidx.i316 = getelementptr inbounds %Array_EnumNode_, ptr %244, i64 0, i32 1
  %248 = load ptr, ptr %memberidx.i316, align 8
  %ptridx.i317 = getelementptr inbounds ptr, ptr %248, i64 %storemerge203364
  %249 = load ptr, ptr %ptridx.i317, align 8
  tail call fastcc void @TypeChecker_check_enum_body(ptr nonnull %0, ptr %247, ptr %249)
  %250 = add nuw nsw i64 %storemerge203364, 1
  %251 = load ptr, ptr %memberidx26, align 8
  %memberidx108 = getelementptr inbounds %Array_EnumNode_, ptr %251, i64 0, i32 2
  %252 = load i64, ptr %memberidx108, align 4
  %253 = icmp slt i64 %250, %252
  br i1 %253, label %for.body104, label %for.entry111

for.entry111:                                     ; preds = %for.body104, %for.cond103.preheader
  %254 = load ptr, ptr %memberidx36, align 8
  %255 = tail call ptr @malloc(i32 33)
  %memberidx.i318 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %254, i64 0, i32 1
  %256 = load ptr, ptr %memberidx.i318, align 8
  %memberidx1.i319 = getelementptr inbounds %Array_ClassDeclarationNode_, ptr %254, i64 0, i32 2
  %257 = load i64, ptr %memberidx1.i319, align 4
  store ptr @VTableArrayIterator_ClassDeclarationNode_, ptr %255, align 8
  %memberidx.i.i320 = getelementptr inbounds %Iterator_ClassDeclarationNode_, ptr %255, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i320, align 1
  %memberidx1.i.i321 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %255, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i321, align 4
  %memberidx2.i.i322 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %255, i64 0, i32 4
  store ptr %256, ptr %memberidx2.i.i322, align 8
  %memberidx3.i.i323 = getelementptr inbounds %ArrayIterator_ClassDeclarationNode_, ptr %255, i64 0, i32 3
  store i64 %257, ptr %memberidx3.i.i323, align 4
  %258 = load ptr, ptr @VTableArrayIterator_ClassDeclarationNode_, align 8
  %259 = tail call ptr %258(ptr nonnull %255)
  %260 = load i1, ptr %memberidx.i.i320, align 1
  br i1 %260, label %for.end119, label %for.body117

for.body117:                                      ; preds = %for.entry111, %for.body117
  %storemerge201362 = phi ptr [ %263, %for.body117 ], [ %259, %for.entry111 ]
  tail call fastcc void @TypeChecker_check_class_body(ptr nonnull %0, ptr %storemerge201362)
  %261 = load ptr, ptr %255, align 8
  %262 = load ptr, ptr %261, align 8
  %263 = tail call ptr %262(ptr nonnull %255)
  %264 = load i1, ptr %memberidx.i.i320, align 1
  br i1 %264, label %for.end119, label %for.body117

for.end119:                                       ; preds = %for.body117, %for.entry111
  tail call void @free(ptr nonnull %255)
  %265 = load ptr, ptr %1, align 8
  %memberidx129360 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %265, i64 0, i32 2
  %266 = load i64, ptr %memberidx129360, align 4
  %267 = icmp sgt i64 %266, 0
  br i1 %267, label %for.body125, label %for.end127

for.body125:                                      ; preds = %for.end119, %TypeChecker_check_function_body.exit
  %268 = phi ptr [ %327, %TypeChecker_check_function_body.exit ], [ %265, %for.end119 ]
  %storemerge202361 = phi i64 [ %326, %TypeChecker_check_function_body.exit ], [ 0, %for.end119 ]
  %269 = load ptr, ptr %memberidx1.i205, align 8
  %memberidx.i324 = getelementptr inbounds %Array_Function_, ptr %269, i64 0, i32 1
  %270 = load ptr, ptr %memberidx.i324, align 8
  %ptridx.i325 = getelementptr inbounds ptr, ptr %270, i64 %storemerge202361
  %271 = load ptr, ptr %ptridx.i325, align 8
  %memberidx.i326 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %268, i64 0, i32 1
  %272 = load ptr, ptr %memberidx.i326, align 8
  %ptridx.i327 = getelementptr inbounds ptr, ptr %272, i64 %storemerge202361
  %273 = load ptr, ptr %ptridx.i327, align 8
  %memberidx.i328 = getelementptr inbounds %Function, ptr %271, i64 0, i32 6
  %274 = load i1, ptr %memberidx.i328, align 1
  br i1 %274, label %TypeChecker_check_function_body.exit, label %ifend.i336

ifend.i336:                                       ; preds = %for.body125
  %275 = load ptr, ptr %271, align 8
  store ptr %275, ptr %memberidx19, align 8
  %memberidx6.i331 = getelementptr inbounds %Function, ptr %271, i64 0, i32 5
  %276 = load ptr, ptr %memberidx6.i331, align 8
  store ptr %276, ptr %memberidx2, align 8
  %memberidx7.i332 = getelementptr inbounds %Function, ptr %271, i64 0, i32 3
  %memberidx8.i = getelementptr inbounds %FunctionDeclarationNode, ptr %273, i64 0, i32 2
  %277 = load ptr, ptr %memberidx8.i, align 8
  %278 = tail call fastcc ptr @TypeChecker_check_block(ptr nonnull %0, ptr %277)
  store ptr %278, ptr %memberidx7.i332, align 8
  %279 = load ptr, ptr %memberidx.i245, align 8
  %memberidx1.i.i334 = getelementptr inbounds %Compiler, ptr %279, i64 0, i32 6
  %280 = load ptr, ptr %memberidx1.i.i334, align 8
  %memberidx2.i.i335 = getelementptr inbounds %Array_FloError_, ptr %280, i64 0, i32 2
  %281 = load i64, ptr %memberidx2.i.i335, align 4
  %282 = icmp sgt i64 %281, 0
  br i1 %282, label %TypeChecker_check_function_body.exit, label %ifend11.i

ifend11.i:                                        ; preds = %ifend.i336
  %memberidx13.i337 = getelementptr inbounds %Block, ptr %278, i64 0, i32 1
  %283 = load i1, ptr %memberidx13.i337, align 1
  br i1 %283, label %ifend16.i, label %if.entry14.i

if.entry14.i:                                     ; preds = %ifend11.i
  %memberidx17.i = getelementptr inbounds %Function, ptr %271, i64 0, i32 4
  %284 = load ptr, ptr %memberidx17.i, align 8
  %memberidx18.i338 = getelementptr inbounds %FunctionType, ptr %284, i64 0, i32 2
  %285 = load ptr, ptr %memberidx18.i338, align 8
  %286 = load i64, ptr %285, align 4
  %287 = icmp eq i64 %286, 12
  br i1 %287, label %if.entry20.i, label %else21.i

ifend16.i:                                        ; preds = %Array_Statement____sl__.exit.i, %ifend11.i
  %288 = load ptr, ptr %0, align 8
  %289 = load ptr, ptr %memberidx6.i331, align 8
  %memberidx.i49.i339 = getelementptr inbounds %Program, ptr %288, i64 0, i32 1
  %290 = load ptr, ptr %memberidx.i49.i339, align 8
  %291 = load i64, ptr %289, align 4
  %memberidx.i.i50.i = getelementptr inbounds %Array_Module_, ptr %290, i64 0, i32 1
  %292 = load ptr, ptr %memberidx.i.i50.i, align 8
  %ptridx.i.i51.i = getelementptr inbounds ptr, ptr %292, i64 %291
  %293 = load ptr, ptr %ptridx.i.i51.i, align 8
  %memberidx2.i52.i = getelementptr inbounds %Module, ptr %293, i64 0, i32 7
  %294 = load ptr, ptr %memberidx2.i52.i, align 8
  %memberidx3.i.i340 = getelementptr inbounds %ScopeId, ptr %289, i64 0, i32 1
  %295 = load i64, ptr %memberidx3.i.i340, align 4
  %memberidx.i5.i.i341 = getelementptr inbounds %Array_Scope_, ptr %294, i64 0, i32 1
  %296 = load ptr, ptr %memberidx.i5.i.i341, align 8
  %ptridx.i6.i.i342 = getelementptr inbounds ptr, ptr %296, i64 %295
  %297 = load ptr, ptr %ptridx.i6.i.i342, align 8
  %memberidx30.i = getelementptr inbounds %Scope, ptr %297, i64 0, i32 5
  %298 = load ptr, ptr %memberidx30.i, align 8
  store ptr %298, ptr %memberidx2, align 8
  br label %TypeChecker_check_function_body.exit

if.entry20.i:                                     ; preds = %if.entry14.i
  %299 = load ptr, ptr %278, align 8
  %300 = tail call ptr @malloc(i32 16)
  store i64 7, ptr %300, align 4
  %memberidx.i53.i = getelementptr inbounds %ReturnStatement, ptr %300, i64 0, i32 1
  store ptr null, ptr %memberidx.i53.i, align 8
  %memberidx.i57.i = getelementptr inbounds %Array_Statement_, ptr %299, i64 0, i32 2
  %301 = load i64, ptr %memberidx.i57.i, align 4
  %memberidx1.i58.i = getelementptr inbounds %Array_Statement_, ptr %299, i64 0, i32 3
  %302 = load i64, ptr %memberidx1.i58.i, align 4
  %.not.i.i343 = icmp slt i64 %301, %302
  br i1 %.not.i.i343, label %if.entry20.i.Array_Statement____sl__.exit.i_crit_edge, label %if.entry.i.i344

if.entry20.i.Array_Statement____sl__.exit.i_crit_edge: ; preds = %if.entry20.i
  %memberidx4.i.i345.phi.trans.insert = getelementptr inbounds %Array_Statement_, ptr %299, i64 0, i32 1
  %.pre386 = load ptr, ptr %memberidx4.i.i345.phi.trans.insert, align 8
  br label %Array_Statement____sl__.exit.i

if.entry.i.i344:                                  ; preds = %if.entry20.i
  %303 = shl i64 %302, 1
  store i64 %303, ptr %memberidx1.i58.i, align 4
  %memberidx2.i.i60.i = getelementptr inbounds %Array_Statement_, ptr %299, i64 0, i32 1
  %304 = load ptr, ptr %memberidx2.i.i60.i, align 8
  %305 = shl i64 %302, 4
  %306 = tail call ptr @realloc(ptr %304, i64 %305)
  store ptr %306, ptr %memberidx2.i.i60.i, align 8
  %.pre385 = load i64, ptr %memberidx.i57.i, align 4
  br label %Array_Statement____sl__.exit.i

Array_Statement____sl__.exit.i:                   ; preds = %if.entry20.i.Array_Statement____sl__.exit.i_crit_edge, %if.entry.i.i344
  %307 = phi ptr [ %306, %if.entry.i.i344 ], [ %.pre386, %if.entry20.i.Array_Statement____sl__.exit.i_crit_edge ]
  %308 = phi i64 [ %.pre385, %if.entry.i.i344 ], [ %301, %if.entry20.i.Array_Statement____sl__.exit.i_crit_edge ]
  %309 = add i64 %308, 1
  store i64 %309, ptr %memberidx.i57.i, align 4
  %ptridx.i.i346 = getelementptr inbounds ptr, ptr %307, i64 %308
  store ptr %300, ptr %ptridx.i.i346, align 8
  br label %ifend16.i

else21.i:                                         ; preds = %if.entry14.i
  %310 = tail call ptr @malloc(i32 320)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %310, ptr noundef nonnull align 8 dereferenceable(40) @200, i64 40, i1 false)
  %311 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %311, align 8
  %memberidx.i.i54.i = getelementptr inbounds %string, ptr %311, i64 0, i32 1
  store ptr %310, ptr %memberidx.i.i54.i, align 8
  %memberidx1.i.i55.i = getelementptr inbounds %string, ptr %311, i64 0, i32 2
  store i64 40, ptr %memberidx1.i.i55.i, align 4
  %memberidx2.i.i56.i = getelementptr inbounds %string, ptr %311, i64 0, i32 3
  store i64 40, ptr %memberidx2.i.i56.i, align 4
  %memberidx25.i347 = getelementptr inbounds %FunctionDeclarationNode, ptr %273, i64 0, i32 3
  %312 = load ptr, ptr %memberidx25.i347, align 8
  %313 = load ptr, ptr %312, align 8
  %314 = load ptr, ptr %memberidx.i245, align 8
  %memberidx1.i48.i = getelementptr inbounds %Compiler, ptr %314, i64 0, i32 6
  %315 = load ptr, ptr %memberidx1.i48.i, align 8
  %316 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %316, align 4
  %memberidx1.i.i.i348 = getelementptr inbounds %FloError, ptr %316, i64 0, i32 2
  store ptr %313, ptr %memberidx1.i.i.i348, align 8
  %memberidx2.i.i.i349 = getelementptr inbounds %FloError, ptr %316, i64 0, i32 1
  store ptr %311, ptr %memberidx2.i.i.i349, align 8
  %memberidx.i.i.i350 = getelementptr inbounds %Array_FloError_, ptr %315, i64 0, i32 2
  %317 = load i64, ptr %memberidx.i.i.i350, align 4
  %memberidx1.i2.i.i351 = getelementptr inbounds %Array_FloError_, ptr %315, i64 0, i32 3
  %318 = load i64, ptr %memberidx1.i2.i.i351, align 4
  %.not.i.i.i352 = icmp slt i64 %317, %318
  br i1 %.not.i.i.i352, label %else21.i.TypeChecker_error.exit.i358_crit_edge, label %if.entry.i.i.i355

else21.i.TypeChecker_error.exit.i358_crit_edge:   ; preds = %else21.i
  %memberidx4.i.i.i356.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %315, i64 0, i32 1
  %.pre384 = load ptr, ptr %memberidx4.i.i.i356.phi.trans.insert, align 8
  br label %TypeChecker_error.exit.i358

if.entry.i.i.i355:                                ; preds = %else21.i
  %319 = shl i64 %318, 1
  store i64 %319, ptr %memberidx1.i2.i.i351, align 4
  %memberidx2.i.i.i.i354 = getelementptr inbounds %Array_FloError_, ptr %315, i64 0, i32 1
  %320 = load ptr, ptr %memberidx2.i.i.i.i354, align 8
  %321 = shl i64 %318, 4
  %322 = tail call ptr @realloc(ptr %320, i64 %321)
  store ptr %322, ptr %memberidx2.i.i.i.i354, align 8
  %.pre383 = load i64, ptr %memberidx.i.i.i350, align 4
  br label %TypeChecker_error.exit.i358

TypeChecker_error.exit.i358:                      ; preds = %else21.i.TypeChecker_error.exit.i358_crit_edge, %if.entry.i.i.i355
  %323 = phi ptr [ %322, %if.entry.i.i.i355 ], [ %.pre384, %else21.i.TypeChecker_error.exit.i358_crit_edge ]
  %324 = phi i64 [ %.pre383, %if.entry.i.i.i355 ], [ %317, %else21.i.TypeChecker_error.exit.i358_crit_edge ]
  %325 = add i64 %324, 1
  store i64 %325, ptr %memberidx.i.i.i350, align 4
  %ptridx.i.i.i357 = getelementptr inbounds ptr, ptr %323, i64 %324
  store ptr %316, ptr %ptridx.i.i.i357, align 8
  br label %TypeChecker_check_function_body.exit

TypeChecker_check_function_body.exit:             ; preds = %for.body125, %ifend.i336, %ifend16.i, %TypeChecker_error.exit.i358
  %326 = add nuw nsw i64 %storemerge202361, 1
  %327 = load ptr, ptr %1, align 8
  %memberidx129 = getelementptr inbounds %Array_FunctionDeclarationNode_, ptr %327, i64 0, i32 2
  %328 = load i64, ptr %memberidx129, align 4
  %329 = icmp slt i64 %326, %328
  br i1 %329, label %for.body125, label %for.end127

for.end127:                                       ; preds = %TypeChecker_check_function_body.exit, %for.end119
  %330 = load i1, ptr %memberidx, align 1
  %331 = load i64, ptr %memberidx1, align 4
  %332 = icmp ne i64 %331, 0
  %333 = and i1 %330, %332
  br i1 %333, label %if.entry134, label %ifend136

if.entry134:                                      ; preds = %for.end127
  store i64 0, ptr %memberidx1, align 4
  %334 = load ptr, ptr %0, align 8
  %memberidx1.i.i227 = getelementptr inbounds %Program, ptr %334, i64 0, i32 1
  %335 = load ptr, ptr %memberidx1.i.i227, align 8
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %335, i64 0, i32 1
  %336 = load ptr, ptr %memberidx.i.i.i, align 8
  %337 = load ptr, ptr %336, align 8
  %memberidx2.i228 = getelementptr inbounds %Module, ptr %337, i64 0, i32 7
  %338 = load ptr, ptr %memberidx2.i228, align 8
  %memberidx.i.i229 = getelementptr inbounds %Array_Scope_, ptr %338, i64 0, i32 1
  %339 = load ptr, ptr %memberidx.i.i229, align 8
  %340 = load ptr, ptr %339, align 8
  %341 = load ptr, ptr %340, align 8
  store ptr %341, ptr %memberidx2, align 8
  tail call fastcc void @TypeChecker_import_all_from_module(ptr nonnull %0, ptr %5)
  br label %ifend136

ifend136:                                         ; preds = %for.end127, %if.entry134
  store ptr %4, ptr %memberidx2, align 8
  store i64 %3, ptr %memberidx1, align 4
  %342 = load ptr, ptr %memberidx.i245, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %342, i64 0, i32 6
  %343 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %343, i64 0, i32 2
  %344 = load i64, ptr %memberidx2.i, align 4
  %345 = icmp sgt i64 %344, 0
  %spec.select = select i1 %345, ptr null, ptr %5
  br label %common.ret
}

define internal fastcc void @TypeChecker_import_all_from_module(ptr nocapture readonly %0, ptr nocapture readonly %1) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %Module, ptr %1, i64 0, i32 7
  %2 = load ptr, ptr %memberidx, align 8
  %memberidx.i = getelementptr inbounds %Array_Scope_, ptr %2, i64 0, i32 1
  %3 = load ptr, ptr %memberidx.i, align 8
  %4 = load ptr, ptr %3, align 8
  %memberidx1 = getelementptr inbounds %Module, ptr %1, i64 0, i32 9
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = tail call ptr @malloc(i32 33)
  %memberidx.i86 = getelementptr inbounds %Array_VarDeclaration_, ptr %5, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i86, align 8
  %memberidx1.i = getelementptr inbounds %Array_VarDeclaration_, ptr %5, i64 0, i32 2
  %8 = load i64, ptr %memberidx1.i, align 4
  store ptr @VTableArrayIterator_VarDeclaration_, ptr %6, align 8
  %memberidx.i.i = getelementptr inbounds %Iterator_VarDeclaration_, ptr %6, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i, align 1
  %memberidx1.i.i = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %6, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %6, i64 0, i32 4
  store ptr %7, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %6, i64 0, i32 3
  store i64 %8, ptr %memberidx3.i.i, align 4
  %9 = load ptr, ptr @VTableArrayIterator_VarDeclaration_, align 8
  %10 = tail call ptr %9(ptr nonnull %6)
  %11 = load i1, ptr %memberidx.i.i, align 1
  br i1 %11, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx.i.i.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %var_.0164 = phi ptr [ %10, %for.body.lr.ph ], [ %27, %for.body ]
  %memberidx4 = getelementptr inbounds %VarDeclaration, ptr %var_.0164, i64 0, i32 1
  %12 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %VarDeclaration, ptr %var_.0164, i64 0, i32 2
  %13 = load ptr, ptr %memberidx5, align 8
  %14 = load i64, ptr %memberidx.i.i.i, align 4
  %15 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i.i = getelementptr inbounds %Program, ptr %15, i64 0, i32 1
  %16 = load ptr, ptr %memberidx1.i.i.i.i, align 8
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %16, i64 0, i32 1
  %17 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %17, i64 %14
  %18 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  %memberidx.i.i87 = getelementptr inbounds %Module, ptr %18, i64 0, i32 7
  %19 = load ptr, ptr %memberidx.i.i87, align 8
  %memberidx.i1.i.i = getelementptr inbounds %Array_Scope_, ptr %19, i64 0, i32 1
  %20 = load ptr, ptr %memberidx.i1.i.i, align 8
  %21 = load ptr, ptr %20, align 8
  %memberidx.i88 = getelementptr inbounds %Scope, ptr %21, i64 0, i32 1
  %22 = load ptr, ptr %memberidx.i88, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  tail call void %24(ptr nonnull %22, ptr %12, ptr %13)
  %25 = load ptr, ptr %6, align 8
  %26 = load ptr, ptr %25, align 8
  %27 = tail call ptr %26(ptr nonnull %6)
  %28 = load i1, ptr %memberidx.i.i, align 1
  br i1 %28, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %for.entry
  tail call void @free(ptr nonnull %6)
  %memberidx9 = getelementptr inbounds %Module, ptr %1, i64 0, i32 8
  %29 = load ptr, ptr %memberidx9, align 8
  %30 = tail call ptr @malloc(i32 33)
  %memberidx.i89 = getelementptr inbounds %Array_ConstDeclaration_, ptr %29, i64 0, i32 1
  %31 = load ptr, ptr %memberidx.i89, align 8
  %memberidx1.i90 = getelementptr inbounds %Array_ConstDeclaration_, ptr %29, i64 0, i32 2
  %32 = load i64, ptr %memberidx1.i90, align 4
  store ptr @VTableArrayIterator_ConstDeclaration_, ptr %30, align 8
  %memberidx.i.i91 = getelementptr inbounds %Iterator_ConstDeclaration_, ptr %30, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i91, align 1
  %memberidx1.i.i92 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %30, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i92, align 4
  %memberidx2.i.i93 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %30, i64 0, i32 4
  store ptr %31, ptr %memberidx2.i.i93, align 8
  %memberidx3.i.i94 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %30, i64 0, i32 3
  store i64 %32, ptr %memberidx3.i.i94, align 4
  %33 = load ptr, ptr @VTableArrayIterator_ConstDeclaration_, align 8
  %34 = tail call ptr %33(ptr nonnull %30)
  %35 = load i1, ptr %memberidx.i.i91, align 1
  br i1 %35, label %for.end14, label %for.body12.lr.ph

for.body12.lr.ph:                                 ; preds = %for.end
  %memberidx.i.i.i95 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  br label %for.body12

for.body12:                                       ; preds = %for.body12.lr.ph, %for.body12
  %storemerge163 = phi ptr [ %34, %for.body12.lr.ph ], [ %51, %for.body12 ]
  %memberidx16 = getelementptr inbounds %ConstDeclaration, ptr %storemerge163, i64 0, i32 1
  %36 = load ptr, ptr %memberidx16, align 8
  %memberidx17 = getelementptr inbounds %ConstDeclaration, ptr %storemerge163, i64 0, i32 2
  %37 = load ptr, ptr %memberidx17, align 8
  %38 = load i64, ptr %memberidx.i.i.i95, align 4
  %39 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i.i96 = getelementptr inbounds %Program, ptr %39, i64 0, i32 1
  %40 = load ptr, ptr %memberidx1.i.i.i.i96, align 8
  %memberidx.i.i.i.i.i97 = getelementptr inbounds %Array_Module_, ptr %40, i64 0, i32 1
  %41 = load ptr, ptr %memberidx.i.i.i.i.i97, align 8
  %ptridx.i.i.i.i.i98 = getelementptr inbounds ptr, ptr %41, i64 %38
  %42 = load ptr, ptr %ptridx.i.i.i.i.i98, align 8
  %memberidx.i.i99 = getelementptr inbounds %Module, ptr %42, i64 0, i32 7
  %43 = load ptr, ptr %memberidx.i.i99, align 8
  %memberidx.i1.i.i100 = getelementptr inbounds %Array_Scope_, ptr %43, i64 0, i32 1
  %44 = load ptr, ptr %memberidx.i1.i.i100, align 8
  %45 = load ptr, ptr %44, align 8
  %memberidx.i101 = getelementptr inbounds %Scope, ptr %45, i64 0, i32 1
  %46 = load ptr, ptr %memberidx.i101, align 8
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  tail call void %48(ptr nonnull %46, ptr %36, ptr %37)
  %49 = load ptr, ptr %30, align 8
  %50 = load ptr, ptr %49, align 8
  %51 = tail call ptr %50(ptr nonnull %30)
  %52 = load i1, ptr %memberidx.i.i91, align 1
  br i1 %52, label %for.end14, label %for.body12

for.end14:                                        ; preds = %for.body12, %for.end
  tail call void @free(ptr nonnull %30)
  %memberidx21 = getelementptr inbounds %Module, ptr %1, i64 0, i32 5
  %53 = load ptr, ptr %memberidx21, align 8
  %54 = tail call ptr @malloc(i32 33)
  %memberidx.i102 = getelementptr inbounds %Array_Function_, ptr %53, i64 0, i32 1
  %55 = load ptr, ptr %memberidx.i102, align 8
  %memberidx1.i103 = getelementptr inbounds %Array_Function_, ptr %53, i64 0, i32 2
  %56 = load i64, ptr %memberidx1.i103, align 4
  store ptr @VTableArrayIterator_Function_, ptr %54, align 8
  %memberidx.i.i104 = getelementptr inbounds %Iterator_Function_, ptr %54, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i104, align 1
  %memberidx1.i.i105 = getelementptr inbounds %ArrayIterator_Function_, ptr %54, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i105, align 4
  %memberidx2.i.i106 = getelementptr inbounds %ArrayIterator_Function_, ptr %54, i64 0, i32 4
  store ptr %55, ptr %memberidx2.i.i106, align 8
  %memberidx3.i.i107 = getelementptr inbounds %ArrayIterator_Function_, ptr %54, i64 0, i32 3
  store i64 %56, ptr %memberidx3.i.i107, align 4
  %57 = load ptr, ptr @VTableArrayIterator_Function_, align 8
  %58 = tail call ptr %57(ptr nonnull %54)
  %59 = load i1, ptr %memberidx.i.i104, align 1
  br i1 %59, label %for.end26, label %for.body24.lr.ph

for.body24.lr.ph:                                 ; preds = %for.end14
  %memberidx.i.i.i108 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  br label %for.body24

for.body24:                                       ; preds = %for.body24.lr.ph, %for.body24
  %storemerge82162 = phi ptr [ %58, %for.body24.lr.ph ], [ %75, %for.body24 ]
  %memberidx28 = getelementptr inbounds %Function, ptr %storemerge82162, i64 0, i32 1
  %60 = load ptr, ptr %memberidx28, align 8
  %61 = load ptr, ptr %storemerge82162, align 8
  %62 = load i64, ptr %memberidx.i.i.i108, align 4
  %63 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i.i109 = getelementptr inbounds %Program, ptr %63, i64 0, i32 1
  %64 = load ptr, ptr %memberidx1.i.i.i.i109, align 8
  %memberidx.i.i.i.i.i110 = getelementptr inbounds %Array_Module_, ptr %64, i64 0, i32 1
  %65 = load ptr, ptr %memberidx.i.i.i.i.i110, align 8
  %ptridx.i.i.i.i.i111 = getelementptr inbounds ptr, ptr %65, i64 %62
  %66 = load ptr, ptr %ptridx.i.i.i.i.i111, align 8
  %memberidx.i.i112 = getelementptr inbounds %Module, ptr %66, i64 0, i32 7
  %67 = load ptr, ptr %memberidx.i.i112, align 8
  %memberidx.i1.i.i113 = getelementptr inbounds %Array_Scope_, ptr %67, i64 0, i32 1
  %68 = load ptr, ptr %memberidx.i1.i.i113, align 8
  %69 = load ptr, ptr %68, align 8
  %memberidx.i114 = getelementptr inbounds %Scope, ptr %69, i64 0, i32 3
  %70 = load ptr, ptr %memberidx.i114, align 8
  %71 = load ptr, ptr %70, align 8
  %72 = load ptr, ptr %71, align 8
  tail call void %72(ptr nonnull %70, ptr %60, ptr %61)
  %73 = load ptr, ptr %54, align 8
  %74 = load ptr, ptr %73, align 8
  %75 = tail call ptr %74(ptr nonnull %54)
  %76 = load i1, ptr %memberidx.i.i104, align 1
  br i1 %76, label %for.end26, label %for.body24

for.end26:                                        ; preds = %for.body24, %for.end14
  tail call void @free(ptr nonnull %54)
  %memberidx33 = getelementptr inbounds %Module, ptr %1, i64 0, i32 4
  %77 = load ptr, ptr %memberidx33, align 8
  %78 = tail call ptr @malloc(i32 33)
  %memberidx.i115 = getelementptr inbounds %Array_Class_, ptr %77, i64 0, i32 1
  %79 = load ptr, ptr %memberidx.i115, align 8
  %memberidx1.i116 = getelementptr inbounds %Array_Class_, ptr %77, i64 0, i32 2
  %80 = load i64, ptr %memberidx1.i116, align 4
  store ptr @VTableArrayIterator_Class_, ptr %78, align 8
  %memberidx.i.i117 = getelementptr inbounds %Iterator_Class_, ptr %78, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i117, align 1
  %memberidx1.i.i118 = getelementptr inbounds %ArrayIterator_Class_, ptr %78, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i118, align 4
  %memberidx2.i.i119 = getelementptr inbounds %ArrayIterator_Class_, ptr %78, i64 0, i32 4
  store ptr %79, ptr %memberidx2.i.i119, align 8
  %memberidx3.i.i120 = getelementptr inbounds %ArrayIterator_Class_, ptr %78, i64 0, i32 3
  store i64 %80, ptr %memberidx3.i.i120, align 4
  %81 = load ptr, ptr @VTableArrayIterator_Class_, align 8
  %82 = tail call ptr %81(ptr nonnull %78)
  %83 = load i1, ptr %memberidx.i.i117, align 1
  br i1 %83, label %for.end38, label %for.body36.lr.ph

for.body36.lr.ph:                                 ; preds = %for.end26
  %memberidx.i.i.i121 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  br label %for.body36

for.body36:                                       ; preds = %for.body36.lr.ph, %for.body36
  %storemerge83161 = phi ptr [ %82, %for.body36.lr.ph ], [ %105, %for.body36 ]
  %memberidx40 = getelementptr inbounds %Class, ptr %storemerge83161, i64 0, i32 1
  %84 = load ptr, ptr %memberidx40, align 8
  %85 = load ptr, ptr %storemerge83161, align 8
  %86 = load i64, ptr %memberidx.i.i.i121, align 4
  %87 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i.i122 = getelementptr inbounds %Program, ptr %87, i64 0, i32 1
  %88 = load ptr, ptr %memberidx1.i.i.i.i122, align 8
  %memberidx.i.i.i.i.i123 = getelementptr inbounds %Array_Module_, ptr %88, i64 0, i32 1
  %89 = load ptr, ptr %memberidx.i.i.i.i.i123, align 8
  %ptridx.i.i.i.i.i124 = getelementptr inbounds ptr, ptr %89, i64 %86
  %90 = load ptr, ptr %ptridx.i.i.i.i.i124, align 8
  %memberidx.i.i125 = getelementptr inbounds %Module, ptr %90, i64 0, i32 7
  %91 = load ptr, ptr %memberidx.i.i125, align 8
  %memberidx.i1.i.i126 = getelementptr inbounds %Array_Scope_, ptr %91, i64 0, i32 1
  %92 = load ptr, ptr %memberidx.i1.i.i126, align 8
  %93 = load ptr, ptr %92, align 8
  %memberidx.i127 = getelementptr inbounds %Scope, ptr %93, i64 0, i32 2
  %94 = load ptr, ptr %memberidx.i127, align 8
  %95 = load ptr, ptr %94, align 8
  %96 = load ptr, ptr %95, align 8
  tail call void %96(ptr nonnull %94, ptr %84, ptr %85)
  %memberidx2.i = getelementptr inbounds %Scope, ptr %93, i64 0, i32 1
  %97 = load ptr, ptr %memberidx2.i, align 8
  %98 = load ptr, ptr %97, align 8
  %99 = load ptr, ptr %98, align 8
  %100 = tail call ptr @malloc(i32 24)
  %101 = load i64, ptr %85, align 4
  %memberidx1.i.i128 = getelementptr inbounds %TypeId, ptr %85, i64 0, i32 2
  %102 = load i64, ptr %memberidx1.i.i128, align 4
  store i64 3, ptr %100, align 4
  %memberidx1.i.i.i = getelementptr inbounds %VarId, ptr %100, i64 0, i32 1
  store i64 %101, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %VarId, ptr %100, i64 0, i32 2
  store i64 %102, ptr %memberidx2.i.i.i, align 4
  tail call void %99(ptr nonnull %97, ptr %84, ptr nonnull %100)
  %103 = load ptr, ptr %78, align 8
  %104 = load ptr, ptr %103, align 8
  %105 = tail call ptr %104(ptr nonnull %78)
  %106 = load i1, ptr %memberidx.i.i117, align 1
  br i1 %106, label %for.end38, label %for.body36

for.end38:                                        ; preds = %for.body36, %for.end26
  tail call void @free(ptr nonnull %78)
  %memberidx45 = getelementptr inbounds %Module, ptr %1, i64 0, i32 6
  %107 = load ptr, ptr %memberidx45, align 8
  %108 = tail call ptr @malloc(i32 33)
  %memberidx.i129 = getelementptr inbounds %Array_Enum_, ptr %107, i64 0, i32 1
  %109 = load ptr, ptr %memberidx.i129, align 8
  %memberidx1.i130 = getelementptr inbounds %Array_Enum_, ptr %107, i64 0, i32 2
  %110 = load i64, ptr %memberidx1.i130, align 4
  store ptr @VTableArrayIterator_Enum_, ptr %108, align 8
  %memberidx.i.i131 = getelementptr inbounds %Iterator_Enum_, ptr %108, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i131, align 1
  %memberidx1.i.i132 = getelementptr inbounds %ArrayIterator_Enum_, ptr %108, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i132, align 4
  %memberidx2.i.i133 = getelementptr inbounds %ArrayIterator_Enum_, ptr %108, i64 0, i32 4
  store ptr %109, ptr %memberidx2.i.i133, align 8
  %memberidx3.i.i134 = getelementptr inbounds %ArrayIterator_Enum_, ptr %108, i64 0, i32 3
  store i64 %110, ptr %memberidx3.i.i134, align 4
  %111 = load ptr, ptr @VTableArrayIterator_Enum_, align 8
  %112 = tail call ptr %111(ptr nonnull %108)
  %113 = load i1, ptr %memberidx.i.i131, align 1
  br i1 %113, label %for.end50, label %for.body48.lr.ph

for.body48.lr.ph:                                 ; preds = %for.end38
  %memberidx.i.i.i135 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  br label %for.body48

for.body48:                                       ; preds = %for.body48.lr.ph, %for.body48
  %storemerge84160 = phi ptr [ %112, %for.body48.lr.ph ], [ %135, %for.body48 ]
  %memberidx52 = getelementptr inbounds %Enum, ptr %storemerge84160, i64 0, i32 1
  %114 = load ptr, ptr %memberidx52, align 8
  %115 = load ptr, ptr %storemerge84160, align 8
  %116 = load i64, ptr %memberidx.i.i.i135, align 4
  %117 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i.i136 = getelementptr inbounds %Program, ptr %117, i64 0, i32 1
  %118 = load ptr, ptr %memberidx1.i.i.i.i136, align 8
  %memberidx.i.i.i.i.i137 = getelementptr inbounds %Array_Module_, ptr %118, i64 0, i32 1
  %119 = load ptr, ptr %memberidx.i.i.i.i.i137, align 8
  %ptridx.i.i.i.i.i138 = getelementptr inbounds ptr, ptr %119, i64 %116
  %120 = load ptr, ptr %ptridx.i.i.i.i.i138, align 8
  %memberidx.i.i139 = getelementptr inbounds %Module, ptr %120, i64 0, i32 7
  %121 = load ptr, ptr %memberidx.i.i139, align 8
  %memberidx.i1.i.i140 = getelementptr inbounds %Array_Scope_, ptr %121, i64 0, i32 1
  %122 = load ptr, ptr %memberidx.i1.i.i140, align 8
  %123 = load ptr, ptr %122, align 8
  %memberidx.i141 = getelementptr inbounds %Scope, ptr %123, i64 0, i32 4
  %124 = load ptr, ptr %memberidx.i141, align 8
  %125 = load ptr, ptr %124, align 8
  %126 = load ptr, ptr %125, align 8
  tail call void %126(ptr nonnull %124, ptr %114, ptr %115)
  %memberidx2.i142 = getelementptr inbounds %Scope, ptr %123, i64 0, i32 1
  %127 = load ptr, ptr %memberidx2.i142, align 8
  %128 = load ptr, ptr %127, align 8
  %129 = load ptr, ptr %128, align 8
  %130 = tail call ptr @malloc(i32 24)
  %131 = load i64, ptr %115, align 4
  %memberidx1.i.i143 = getelementptr inbounds %TypeId, ptr %115, i64 0, i32 2
  %132 = load i64, ptr %memberidx1.i.i143, align 4
  store i64 4, ptr %130, align 4
  %memberidx1.i.i.i144 = getelementptr inbounds %VarId, ptr %130, i64 0, i32 1
  store i64 %131, ptr %memberidx1.i.i.i144, align 4
  %memberidx2.i.i.i145 = getelementptr inbounds %VarId, ptr %130, i64 0, i32 2
  store i64 %132, ptr %memberidx2.i.i.i145, align 4
  tail call void %129(ptr nonnull %127, ptr %114, ptr nonnull %130)
  %133 = load ptr, ptr %108, align 8
  %134 = load ptr, ptr %133, align 8
  %135 = tail call ptr %134(ptr nonnull %108)
  %136 = load i1, ptr %memberidx.i.i131, align 1
  br i1 %136, label %for.end50, label %for.body48

for.end50:                                        ; preds = %for.body48, %for.end38
  tail call void @free(ptr nonnull %108)
  %memberidx57 = getelementptr inbounds %Scope, ptr %4, i64 0, i32 6
  %137 = load ptr, ptr %memberidx57, align 8
  %138 = load ptr, ptr %137, align 8
  %memberidx58 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %138, i64 0, i32 2
  %139 = load ptr, ptr %memberidx58, align 8
  %140 = tail call ptr %139(ptr nonnull %137)
  %141 = tail call ptr @malloc(i32 33)
  %memberidx.i146 = getelementptr inbounds %Array_Bucket_string_Type__, ptr %140, i64 0, i32 1
  %142 = load ptr, ptr %memberidx.i146, align 8
  %memberidx1.i147 = getelementptr inbounds %Array_Bucket_string_Type__, ptr %140, i64 0, i32 2
  %143 = load i64, ptr %memberidx1.i147, align 4
  store ptr @VTableArrayIterator_Bucket_string_Type__, ptr %141, align 8
  %memberidx.i.i148 = getelementptr inbounds %Iterator_Bucket_string_Type__, ptr %141, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i148, align 1
  %memberidx1.i.i149 = getelementptr inbounds %ArrayIterator_Bucket_string_Type__, ptr %141, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i149, align 4
  %memberidx2.i.i150 = getelementptr inbounds %ArrayIterator_Bucket_string_Type__, ptr %141, i64 0, i32 4
  store ptr %142, ptr %memberidx2.i.i150, align 8
  %memberidx3.i.i151 = getelementptr inbounds %ArrayIterator_Bucket_string_Type__, ptr %141, i64 0, i32 3
  store i64 %143, ptr %memberidx3.i.i151, align 4
  %144 = load ptr, ptr @VTableArrayIterator_Bucket_string_Type__, align 8
  %145 = tail call ptr %144(ptr nonnull %141)
  %146 = load i1, ptr %memberidx.i.i148, align 1
  br i1 %146, label %for.end63, label %for.body61.lr.ph

for.body61.lr.ph:                                 ; preds = %for.end50
  %memberidx.i.i.i152 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  br label %for.body61

for.body61:                                       ; preds = %for.body61.lr.ph, %for.body61
  %storemerge85159 = phi ptr [ %145, %for.body61.lr.ph ], [ %162, %for.body61 ]
  %memberidx65 = getelementptr inbounds %Bucket_string_Type_, ptr %storemerge85159, i64 0, i32 1
  %147 = load ptr, ptr %memberidx65, align 8
  %memberidx66 = getelementptr inbounds %Bucket_string_Type_, ptr %storemerge85159, i64 0, i32 2
  %148 = load ptr, ptr %memberidx66, align 8
  %149 = load i64, ptr %memberidx.i.i.i152, align 4
  %150 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i.i153 = getelementptr inbounds %Program, ptr %150, i64 0, i32 1
  %151 = load ptr, ptr %memberidx1.i.i.i.i153, align 8
  %memberidx.i.i.i.i.i154 = getelementptr inbounds %Array_Module_, ptr %151, i64 0, i32 1
  %152 = load ptr, ptr %memberidx.i.i.i.i.i154, align 8
  %ptridx.i.i.i.i.i155 = getelementptr inbounds ptr, ptr %152, i64 %149
  %153 = load ptr, ptr %ptridx.i.i.i.i.i155, align 8
  %memberidx.i.i156 = getelementptr inbounds %Module, ptr %153, i64 0, i32 7
  %154 = load ptr, ptr %memberidx.i.i156, align 8
  %memberidx.i1.i.i157 = getelementptr inbounds %Array_Scope_, ptr %154, i64 0, i32 1
  %155 = load ptr, ptr %memberidx.i1.i.i157, align 8
  %156 = load ptr, ptr %155, align 8
  %memberidx.i158 = getelementptr inbounds %Scope, ptr %156, i64 0, i32 6
  %157 = load ptr, ptr %memberidx.i158, align 8
  %158 = load ptr, ptr %157, align 8
  %159 = load ptr, ptr %158, align 8
  tail call void %159(ptr nonnull %157, ptr %147, ptr %148)
  %160 = load ptr, ptr %141, align 8
  %161 = load ptr, ptr %160, align 8
  %162 = tail call ptr %161(ptr nonnull %141)
  %163 = load i1, ptr %memberidx.i.i148, align 1
  br i1 %163, label %for.end63, label %for.body61

for.end63:                                        ; preds = %for.body61, %for.end50
  tail call void @free(ptr nonnull %141)
  ret void
}

define internal fastcc ptr @TypeChecker_check_typecast_expr(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %3, align 4
  %memberidx = getelementptr inbounds %TypeCastExpressionNode, ptr %1, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %3, ptr %4)
  %memberidx1 = getelementptr inbounds %TypeCastExpressionNode, ptr %1, i64 0, i32 4
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = tail call fastcc ptr @TypeChecker_check_type(ptr %0, ptr %6)
  %memberidx2 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 3
  %8 = load ptr, ptr %memberidx2, align 8
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %9 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %9, i64 0, i32 6
  %10 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %10, i64 0, i32 2
  %11 = load i64, ptr %memberidx2.i, align 4
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %common.ret, label %ifend

common.ret:                                       ; preds = %2, %ifend45, %TypeChecker_error.exit, %if.entry4
  %common.ret.op = phi ptr [ %41, %if.entry4 ], [ null, %TypeChecker_error.exit ], [ %150, %ifend45 ], [ null, %2 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %2
  %13 = load ptr, ptr %0, align 8
  %14 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %14, ptr noundef nonnull align 8 dereferenceable(6) @224, i64 6, i1 false)
  %15 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %15, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %15, i64 0, i32 1
  store ptr %14, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %15, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %15, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i, align 4
  %16 = load i64, ptr %7, align 4
  %17 = icmp eq i64 %16, 20
  br i1 %17, label %if.entry.i, label %is_object.exit.thread

if.entry.i:                                       ; preds = %ifend, %if.entry.i
  %.tr5.i = phi ptr [ %18, %if.entry.i ], [ %7, %ifend ]
  %memberidx1.i158 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %18 = load ptr, ptr %memberidx1.i158, align 8
  %19 = load i64, ptr %18, align 4
  switch i64 %19, label %ifend6 [
    i64 20, label %if.entry.i
    i64 13, label %tailrecurse.i.preheader
  ]

is_object.exit.thread:                            ; preds = %ifend
  %20 = icmp eq i64 %16, 13
  br i1 %20, label %if.entry3.i, label %ifend6

tailrecurse.i.preheader:                          ; preds = %if.entry.i
  br i1 %17, label %if.entry.i161, label %if.entry3.i

if.entry.i161:                                    ; preds = %tailrecurse.i.preheader, %if.entry.i161
  %.tr11.i212 = phi ptr [ %21, %if.entry.i161 ], [ %7, %tailrecurse.i.preheader ]
  %memberidx1.i160 = getelementptr inbounds %GenericType, ptr %.tr11.i212, i64 0, i32 3
  %21 = load ptr, ptr %memberidx1.i160, align 8
  %22 = load i64, ptr %21, align 4
  %switch = icmp eq i64 %22, 20
  br i1 %switch, label %if.entry.i161, label %if.entry3.i

if.entry3.i:                                      ; preds = %if.entry.i161, %is_object.exit.thread, %tailrecurse.i.preheader
  %.tr11.i.lcssa = phi ptr [ %7, %tailrecurse.i.preheader ], [ %7, %is_object.exit.thread ], [ %21, %if.entry.i161 ]
  %memberidx6.i = getelementptr inbounds %ObjectType, ptr %.tr11.i.lcssa, i64 0, i32 1
  %23 = load ptr, ptr %memberidx6.i, align 8
  %memberidx.i.i162 = getelementptr inbounds %Program, ptr %13, i64 0, i32 1
  %24 = load ptr, ptr %memberidx.i.i162, align 8
  %25 = load i64, ptr %23, align 4
  %memberidx.i.i.i163 = getelementptr inbounds %Array_Module_, ptr %24, i64 0, i32 1
  %26 = load ptr, ptr %memberidx.i.i.i163, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %26, i64 %25
  %27 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i164 = getelementptr inbounds %Module, ptr %27, i64 0, i32 4
  %28 = load ptr, ptr %memberidx2.i.i164, align 8
  %memberidx3.i.i165 = getelementptr inbounds %TypeId, ptr %23, i64 0, i32 2
  %29 = load i64, ptr %memberidx3.i.i165, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %28, i64 0, i32 1
  %30 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %30, i64 %29
  %31 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx.i79 = getelementptr inbounds %Class, ptr %31, i64 0, i32 1
  %32 = load ptr, ptr %memberidx.i79, align 8
  %memberidx.i.i80 = getelementptr inbounds %string, ptr %32, i64 0, i32 2
  %33 = load i64, ptr %memberidx.i.i80, align 4
  %.not.i.i = icmp eq i64 %33, 6
  br i1 %.not.i.i, label %string___eq__.exit.i, label %ifend6

string___eq__.exit.i:                             ; preds = %if.entry3.i
  %memberidx2.i.i82 = getelementptr inbounds %string, ptr %32, i64 0, i32 1
  %34 = load ptr, ptr %memberidx2.i.i82, align 8
  %35 = tail call i64 @memcmp(ptr %34, ptr %14, i64 6)
  %36 = icmp eq i64 %35, 0
  %37 = load ptr, ptr %31, align 8
  %38 = load i64, ptr %37, align 4
  %39 = icmp eq i64 %38, 1
  %40 = and i1 %36, %39
  br i1 %40, label %if.entry4, label %string___eq__.exit.i.ifend6_crit_edge

string___eq__.exit.i.ifend6_crit_edge:            ; preds = %string___eq__.exit.i
  %.pre = load i64, ptr %7, align 4
  br label %ifend6

if.entry4:                                        ; preds = %string___eq__.exit.i
  %41 = tail call ptr @malloc(i32 49)
  %42 = tail call ptr @malloc(i32 0)
  %43 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %43, align 8
  %memberidx.i.i83 = getelementptr inbounds %string, ptr %43, i64 0, i32 1
  store ptr %42, ptr %memberidx.i.i83, align 8
  %memberidx1.i.i84 = getelementptr inbounds %string, ptr %43, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i84, i8 0, i64 16, i1 false)
  %44 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_int_, ptr %44, align 8
  %memberidx.i86 = getelementptr inbounds %Array_int_, ptr %44, i64 0, i32 2
  store i64 0, ptr %memberidx.i86, align 4
  %memberidx1.i87 = getelementptr inbounds %Array_int_, ptr %44, i64 0, i32 3
  store i64 8, ptr %memberidx1.i87, align 4
  %memberidx2.i88 = getelementptr inbounds %Array_int_, ptr %44, i64 0, i32 1
  %45 = tail call ptr @malloc(i32 64)
  store ptr %45, ptr %memberidx2.i88, align 8
  store i64 0, ptr %45, align 4
  store i64 1, ptr %memberidx.i86, align 4
  %46 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %46, align 8
  %memberidx.i89 = getelementptr inbounds %Array_Expression_, ptr %46, i64 0, i32 2
  store i64 0, ptr %memberidx.i89, align 4
  %memberidx1.i90 = getelementptr inbounds %Array_Expression_, ptr %46, i64 0, i32 3
  store i64 8, ptr %memberidx1.i90, align 4
  %memberidx2.i91 = getelementptr inbounds %Array_Expression_, ptr %46, i64 0, i32 1
  %47 = tail call ptr @malloc(i32 64)
  store ptr %47, ptr %memberidx2.i91, align 8
  store ptr %5, ptr %47, align 8
  store i64 1, ptr %memberidx.i89, align 4
  store i64 8, ptr %41, align 4
  %memberidx.i.i92 = getelementptr inbounds %Expression, ptr %41, i64 0, i32 2
  store i64 2, ptr %memberidx.i.i92, align 4
  %memberidx1.i.i93 = getelementptr inbounds %Expression, ptr %41, i64 0, i32 1
  %memberidx.i94 = getelementptr inbounds %StringExpression, ptr %41, i64 0, i32 6
  store ptr %46, ptr %memberidx.i94, align 8
  %memberidx1.i95 = getelementptr inbounds %StringExpression, ptr %41, i64 0, i32 5
  store ptr %44, ptr %memberidx1.i95, align 8
  %memberidx2.i96 = getelementptr inbounds %Expression, ptr %41, i64 0, i32 3
  store ptr %7, ptr %memberidx2.i96, align 8
  %memberidx3.i = getelementptr inbounds %StringExpression, ptr %41, i64 0, i32 4
  store ptr %43, ptr %memberidx3.i, align 8
  store i1 true, ptr %memberidx1.i.i93, align 1
  br label %common.ret

ifend6:                                           ; preds = %if.entry.i, %is_object.exit.thread, %string___eq__.exit.i.ifend6_crit_edge, %if.entry3.i
  %48 = phi i64 [ %.pre, %string___eq__.exit.i.ifend6_crit_edge ], [ %16, %if.entry3.i ], [ %16, %is_object.exit.thread ], [ %16, %if.entry.i ]
  %49 = add i64 %48, -1
  %50 = icmp ult i64 %49, 11
  %51 = load i64, ptr %8, align 4
  %52 = add i64 %51, -1
  %53 = icmp ult i64 %52, 11
  %54 = and i1 %50, %53
  %55 = icmp ult i64 %49, 7
  %56 = icmp eq i64 %51, 14
  %57 = and i1 %55, %56
  %58 = icmp ult i64 %52, 7
  %59 = icmp eq i64 %48, 14
  %60 = and i1 %59, %58
  %61 = select i1 %60, i1 true, i1 %57
  %spec.store.select157 = select i1 %61, i1 true, i1 %54
  %62 = load ptr, ptr %0, align 8
  %63 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %63, ptr noundef nonnull align 8 dereferenceable(6) @224, i64 6, i1 false)
  %64 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %64, align 8
  %memberidx.i.i97 = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  store ptr %63, ptr %memberidx.i.i97, align 8
  %memberidx1.i.i98 = getelementptr inbounds %string, ptr %64, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i98, align 4
  %memberidx2.i.i99 = getelementptr inbounds %string, ptr %64, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i99, align 4
  %65 = load i64, ptr %8, align 4
  %66 = icmp eq i64 %65, 20
  br i1 %66, label %if.entry.i168, label %is_object.exit171.thread

if.entry.i168:                                    ; preds = %ifend6, %if.entry.i168
  %.tr5.i166 = phi ptr [ %67, %if.entry.i168 ], [ %8, %ifend6 ]
  %memberidx1.i167 = getelementptr inbounds %GenericType, ptr %.tr5.i166, i64 0, i32 3
  %67 = load ptr, ptr %memberidx1.i167, align 8
  %68 = load i64, ptr %67, align 4
  switch i64 %68, label %ifend25 [
    i64 20, label %if.entry.i168
    i64 13, label %tailrecurse.i173.preheader
  ]

is_object.exit171.thread:                         ; preds = %ifend6
  %69 = icmp eq i64 %65, 13
  br i1 %69, label %if.entry3.i185, label %ifend25

tailrecurse.i173.preheader:                       ; preds = %if.entry.i168
  br i1 %66, label %if.entry.i176, label %if.entry3.i185

if.entry.i176:                                    ; preds = %tailrecurse.i173.preheader, %if.entry.i176
  %.tr11.i172210 = phi ptr [ %70, %if.entry.i176 ], [ %8, %tailrecurse.i173.preheader ]
  %memberidx1.i175 = getelementptr inbounds %GenericType, ptr %.tr11.i172210, i64 0, i32 3
  %70 = load ptr, ptr %memberidx1.i175, align 8
  %71 = load i64, ptr %70, align 4
  %switch205 = icmp eq i64 %71, 20
  br i1 %switch205, label %if.entry.i176, label %if.entry3.i185

if.entry3.i185:                                   ; preds = %if.entry.i176, %is_object.exit171.thread, %tailrecurse.i173.preheader
  %.tr11.i172.lcssa = phi ptr [ %8, %tailrecurse.i173.preheader ], [ %8, %is_object.exit171.thread ], [ %70, %if.entry.i176 ]
  %memberidx6.i177 = getelementptr inbounds %ObjectType, ptr %.tr11.i172.lcssa, i64 0, i32 1
  %72 = load ptr, ptr %memberidx6.i177, align 8
  %memberidx.i.i178 = getelementptr inbounds %Program, ptr %62, i64 0, i32 1
  %73 = load ptr, ptr %memberidx.i.i178, align 8
  %74 = load i64, ptr %72, align 4
  %memberidx.i.i.i179 = getelementptr inbounds %Array_Module_, ptr %73, i64 0, i32 1
  %75 = load ptr, ptr %memberidx.i.i.i179, align 8
  %ptridx.i.i.i180 = getelementptr inbounds ptr, ptr %75, i64 %74
  %76 = load ptr, ptr %ptridx.i.i.i180, align 8
  %memberidx2.i.i181 = getelementptr inbounds %Module, ptr %76, i64 0, i32 4
  %77 = load ptr, ptr %memberidx2.i.i181, align 8
  %memberidx3.i.i182 = getelementptr inbounds %TypeId, ptr %72, i64 0, i32 2
  %78 = load i64, ptr %memberidx3.i.i182, align 4
  %memberidx.i5.i.i183 = getelementptr inbounds %Array_Class_, ptr %77, i64 0, i32 1
  %79 = load ptr, ptr %memberidx.i5.i.i183, align 8
  %ptridx.i6.i.i184 = getelementptr inbounds ptr, ptr %79, i64 %78
  %80 = load ptr, ptr %ptridx.i6.i.i184, align 8
  %memberidx.i101 = getelementptr inbounds %Class, ptr %80, i64 0, i32 1
  %81 = load ptr, ptr %memberidx.i101, align 8
  %memberidx.i.i102 = getelementptr inbounds %string, ptr %81, i64 0, i32 2
  %82 = load i64, ptr %memberidx.i.i102, align 4
  %.not.i.i104 = icmp eq i64 %82, 6
  br i1 %.not.i.i104, label %is_buitin.exit111, label %ifend25

is_buitin.exit111:                                ; preds = %if.entry3.i185
  %memberidx2.i.i106 = getelementptr inbounds %string, ptr %81, i64 0, i32 1
  %83 = load ptr, ptr %memberidx2.i.i106, align 8
  %84 = tail call i64 @memcmp(ptr %83, ptr %63, i64 6)
  %85 = icmp eq i64 %84, 0
  %86 = load ptr, ptr %80, align 8
  %87 = load i64, ptr %86, align 4
  %88 = icmp eq i64 %87, 1
  %89 = and i1 %85, %88
  %90 = and i1 %50, %89
  br i1 %90, label %if.entry23, label %ifend25

if.entry23:                                       ; preds = %is_buitin.exit111
  %91 = load i64, ptr %7, align 4
  %92 = and i64 %91, -4
  %93 = icmp eq i64 %92, 8
  br i1 %93, label %if.entry26, label %else27

ifend25:                                          ; preds = %if.entry.i168, %is_object.exit171.thread, %if.entry3.i185, %is_buitin.exit111, %ifend28
  %.pr220 = phi i1 [ true, %ifend28 ], [ %spec.store.select157, %is_buitin.exit111 ], [ %spec.store.select157, %if.entry3.i185 ], [ %spec.store.select157, %is_object.exit171.thread ], [ %spec.store.select157, %if.entry.i168 ]
  %exp.0 = phi ptr [ %113, %ifend28 ], [ %5, %is_buitin.exit111 ], [ %5, %if.entry3.i185 ], [ %5, %is_object.exit171.thread ], [ %5, %if.entry.i168 ]
  %94 = load i64, ptr %7, align 4
  %95 = icmp eq i64 %94, 20
  br i1 %95, label %if.entry.i189, label %is_object.exit192

if.entry.i189:                                    ; preds = %ifend25, %if.entry.i189
  %.tr5.i187 = phi ptr [ %96, %if.entry.i189 ], [ %7, %ifend25 ]
  %memberidx1.i188 = getelementptr inbounds %GenericType, ptr %.tr5.i187, i64 0, i32 3
  %96 = load ptr, ptr %memberidx1.i188, align 8
  %97 = load i64, ptr %96, align 4
  %98 = icmp eq i64 %97, 20
  br i1 %98, label %if.entry.i189, label %is_object.exit192

is_object.exit192:                                ; preds = %if.entry.i189, %ifend25
  %.lcssa.i190 = phi i64 [ %94, %ifend25 ], [ %97, %if.entry.i189 ]
  %99 = icmp eq i64 %.lcssa.i190, 13
  %100 = load i64, ptr %8, align 4
  %101 = icmp eq i64 %100, 20
  br i1 %101, label %if.entry.i195, label %is_object.exit198

if.entry.i195:                                    ; preds = %is_object.exit192, %if.entry.i195
  %.tr5.i193 = phi ptr [ %102, %if.entry.i195 ], [ %8, %is_object.exit192 ]
  %memberidx1.i194 = getelementptr inbounds %GenericType, ptr %.tr5.i193, i64 0, i32 3
  %102 = load ptr, ptr %memberidx1.i194, align 8
  %103 = load i64, ptr %102, align 4
  %104 = icmp eq i64 %103, 20
  br i1 %104, label %if.entry.i195, label %is_object.exit198

is_object.exit198:                                ; preds = %if.entry.i195, %is_object.exit192
  %.lcssa.i196 = phi i64 [ %100, %is_object.exit192 ], [ %103, %if.entry.i195 ]
  %105 = icmp eq i64 %.lcssa.i196, 13
  %106 = and i1 %99, %105
  br i1 %106, label %ifend45, label %ifend39

if.entry26:                                       ; preds = %if.entry23
  %107 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %107, align 4
  %memberidx.i.i112 = getelementptr inbounds %Expression, ptr %107, i64 0, i32 2
  store i64 16, ptr %memberidx.i.i112, align 4
  %memberidx1.i.i113 = getelementptr inbounds %Expression, ptr %107, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i113, align 1
  %memberidx.i114 = getelementptr inbounds %IntrinsicCall, ptr %107, i64 0, i32 4
  store i64 0, ptr %memberidx.i114, align 4
  %memberidx1.i115 = getelementptr inbounds %IntrinsicCall, ptr %107, i64 0, i32 5
  %108 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %108, align 8
  %memberidx.i7.i = getelementptr inbounds %Array_Expression_, ptr %108, i64 0, i32 2
  store i64 0, ptr %memberidx.i7.i, align 4
  %memberidx1.i8.i = getelementptr inbounds %Array_Expression_, ptr %108, i64 0, i32 3
  store i64 8, ptr %memberidx1.i8.i, align 4
  %memberidx2.i.i116 = getelementptr inbounds %Array_Expression_, ptr %108, i64 0, i32 1
  %109 = tail call ptr @malloc(i32 64)
  store ptr %109, ptr %memberidx2.i.i116, align 8
  store i64 0, ptr %memberidx.i7.i, align 4
  store ptr %108, ptr %memberidx1.i115, align 8
  %memberidx4.i118 = getelementptr inbounds %Expression, ptr %107, i64 0, i32 3
  %110 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %110, align 4
  store ptr %110, ptr %memberidx4.i118, align 8
  br label %ifend28

else27:                                           ; preds = %if.entry23
  %111 = icmp slt i64 %91, 5
  %112 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %112, align 4
  %memberidx.i.i122 = getelementptr inbounds %Expression, ptr %112, i64 0, i32 2
  store i64 16, ptr %memberidx.i.i122, align 4
  %memberidx1.i.i123 = getelementptr inbounds %Expression, ptr %112, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i123, align 1
  %memberidx.i124 = getelementptr inbounds %IntrinsicCall, ptr %112, i64 0, i32 4
  br i1 %111, label %if.entry31, label %else32

ifend28:                                          ; preds = %if.entry31, %else32, %if.entry26
  %113 = phi ptr [ %112, %if.entry31 ], [ %112, %else32 ], [ %107, %if.entry26 ]
  %memberidx34 = getelementptr inbounds %IntrinsicCall, ptr %113, i64 0, i32 5
  %114 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %114, align 8
  %memberidx.i119 = getelementptr inbounds %Array_Expression_, ptr %114, i64 0, i32 2
  store i64 0, ptr %memberidx.i119, align 4
  %memberidx1.i120 = getelementptr inbounds %Array_Expression_, ptr %114, i64 0, i32 3
  store i64 8, ptr %memberidx1.i120, align 4
  %memberidx2.i121 = getelementptr inbounds %Array_Expression_, ptr %114, i64 0, i32 1
  %115 = tail call ptr @malloc(i32 64)
  store ptr %115, ptr %memberidx2.i121, align 8
  store ptr %5, ptr %115, align 8
  store i64 1, ptr %memberidx.i119, align 4
  store ptr %114, ptr %memberidx34, align 8
  br label %ifend25

if.entry31:                                       ; preds = %else27
  store i64 1, ptr %memberidx.i124, align 4
  %memberidx1.i125 = getelementptr inbounds %IntrinsicCall, ptr %112, i64 0, i32 5
  %116 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %116, align 8
  %memberidx.i7.i126 = getelementptr inbounds %Array_Expression_, ptr %116, i64 0, i32 2
  store i64 0, ptr %memberidx.i7.i126, align 4
  %memberidx1.i8.i127 = getelementptr inbounds %Array_Expression_, ptr %116, i64 0, i32 3
  store i64 8, ptr %memberidx1.i8.i127, align 4
  %memberidx2.i.i128 = getelementptr inbounds %Array_Expression_, ptr %116, i64 0, i32 1
  %117 = tail call ptr @malloc(i32 64)
  store ptr %117, ptr %memberidx2.i.i128, align 8
  store i64 0, ptr %memberidx.i7.i126, align 4
  store ptr %116, ptr %memberidx1.i125, align 8
  %memberidx4.i130 = getelementptr inbounds %Expression, ptr %112, i64 0, i32 3
  %118 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %118, align 4
  store ptr %118, ptr %memberidx4.i130, align 8
  br label %ifend28

else32:                                           ; preds = %else27
  store i64 2, ptr %memberidx.i124, align 4
  %memberidx1.i134 = getelementptr inbounds %IntrinsicCall, ptr %112, i64 0, i32 5
  %119 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %119, align 8
  %memberidx.i7.i135 = getelementptr inbounds %Array_Expression_, ptr %119, i64 0, i32 2
  store i64 0, ptr %memberidx.i7.i135, align 4
  %memberidx1.i8.i136 = getelementptr inbounds %Array_Expression_, ptr %119, i64 0, i32 3
  store i64 8, ptr %memberidx1.i8.i136, align 4
  %memberidx2.i.i137 = getelementptr inbounds %Array_Expression_, ptr %119, i64 0, i32 1
  %120 = tail call ptr @malloc(i32 64)
  store ptr %120, ptr %memberidx2.i.i137, align 8
  store i64 0, ptr %memberidx.i7.i135, align 4
  store ptr %119, ptr %memberidx1.i134, align 8
  %memberidx4.i139 = getelementptr inbounds %Expression, ptr %112, i64 0, i32 3
  %121 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %121, align 4
  store ptr %121, ptr %memberidx4.i139, align 8
  br label %ifend28

ifend39:                                          ; preds = %is_object.exit198
  %122 = icmp eq i64 %94, 15
  %123 = icmp eq i64 %100, 15
  %124 = and i1 %122, %123
  %brmerge = select i1 %124, i1 true, i1 %.pr220
  br i1 %brmerge, label %ifend45, label %if.entry43

if.entry43:                                       ; preds = %ifend39
  %125 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr nonnull %8)
  %126 = load ptr, ptr %125, align 8
  %memberidx46 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %126, i64 0, i32 5
  %127 = load ptr, ptr %memberidx46, align 8
  %128 = tail call ptr %127(ptr nonnull %125)
  %129 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr nonnull %7)
  %130 = load ptr, ptr %129, align 8
  %memberidx47 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %130, i64 0, i32 5
  %131 = load ptr, ptr %memberidx47, align 8
  %132 = tail call ptr %131(ptr nonnull %129)
  %133 = alloca ptr, align 8
  %134 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %133, ptr nonnull @225, ptr %128, ptr %132)
  %135 = load ptr, ptr %133, align 8
  %136 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %136, align 8
  %memberidx.i140 = getelementptr inbounds %string, ptr %136, i64 0, i32 1
  store ptr %135, ptr %memberidx.i140, align 8
  %memberidx1.i141 = getelementptr inbounds %string, ptr %136, i64 0, i32 2
  store i64 %134, ptr %memberidx1.i141, align 4
  %memberidx2.i142 = getelementptr inbounds %string, ptr %136, i64 0, i32 3
  store i64 %134, ptr %memberidx2.i142, align 4
  tail call void @free(ptr %128)
  tail call void @free(ptr %132)
  %137 = load ptr, ptr %1, align 8
  %138 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i144 = getelementptr inbounds %Compiler, ptr %138, i64 0, i32 6
  %139 = load ptr, ptr %memberidx1.i144, align 8
  %140 = call ptr @malloc(i32 24)
  store i64 5, ptr %140, align 4
  %memberidx1.i.i145 = getelementptr inbounds %FloError, ptr %140, i64 0, i32 2
  store ptr %137, ptr %memberidx1.i.i145, align 8
  %memberidx2.i.i146 = getelementptr inbounds %FloError, ptr %140, i64 0, i32 1
  store ptr %136, ptr %memberidx2.i.i146, align 8
  %memberidx.i.i147 = getelementptr inbounds %Array_FloError_, ptr %139, i64 0, i32 2
  %141 = load i64, ptr %memberidx.i.i147, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %139, i64 0, i32 3
  %142 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i148 = icmp slt i64 %141, %142
  br i1 %.not.i.i148, label %if.entry43.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry43.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry43
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %139, i64 0, i32 1
  %.pre222 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry43
  %143 = shl i64 %142, 1
  store i64 %143, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %139, i64 0, i32 1
  %144 = load ptr, ptr %memberidx2.i.i.i, align 8
  %145 = shl i64 %142, 4
  %146 = call ptr @realloc(ptr %144, i64 %145)
  store ptr %146, ptr %memberidx2.i.i.i, align 8
  %.pre221 = load i64, ptr %memberidx.i.i147, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry43.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %147 = phi ptr [ %.pre222, %if.entry43.TypeChecker_error.exit_crit_edge ], [ %146, %if.entry.i.i ]
  %148 = phi i64 [ %141, %if.entry43.TypeChecker_error.exit_crit_edge ], [ %.pre221, %if.entry.i.i ]
  %149 = add i64 %148, 1
  store i64 %149, ptr %memberidx.i.i147, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %147, i64 %148
  store ptr %140, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend45:                                          ; preds = %ifend39, %is_object.exit198
  %150 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %150, align 4
  %memberidx.i.i149 = getelementptr inbounds %Expression, ptr %150, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i149, align 4
  %memberidx1.i.i150 = getelementptr inbounds %Expression, ptr %150, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i150, align 1
  %memberidx.i151 = getelementptr inbounds %TypeCastExpression, ptr %150, i64 0, i32 4
  store ptr %exp.0, ptr %memberidx.i151, align 8
  %memberidx1.i152 = getelementptr inbounds %Expression, ptr %150, i64 0, i32 3
  store ptr %7, ptr %memberidx1.i152, align 8
  %memberidx3.i154 = getelementptr inbounds %Expression, ptr %exp.0, i64 0, i32 1
  %151 = load i1, ptr %memberidx3.i154, align 1
  store i1 %151, ptr %memberidx1.i.i150, align 1
  br label %common.ret
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Expression__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Expression_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Expression_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_Expression____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_Expression_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_Expression_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_Expression_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_Expression_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

define internal fastcc ptr @TypeChecker_fill_in_call_args(ptr %0, ptr nocapture readonly %1, ptr readonly %2, ptr nocapture readonly %3) unnamed_addr {
for.entry:
  %4 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %4, align 8
  %memberidx.i = getelementptr inbounds %Array_Expression_, ptr %4, i64 0, i32 2
  %memberidx1.i = getelementptr inbounds %Array_Expression_, ptr %4, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_Expression_, ptr %4, i64 0, i32 1
  %5 = tail call ptr @malloc(i32 64)
  store ptr %5, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i64 0, i32 2
  %6 = load i64, ptr %memberidx2, align 4
  %7 = icmp sgt i64 %6, 0
  br i1 %7, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx3 = getelementptr inbounds %FunctionType, ptr %1, i64 0, i32 1
  %memberidx.i43 = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %Array_Expression____sl__.exit
  %8 = phi ptr [ %5, %for.body.lr.ph ], [ %32, %Array_Expression____sl__.exit ]
  %9 = phi i64 [ 8, %for.body.lr.ph ], [ %33, %Array_Expression____sl__.exit ]
  %10 = phi i64 [ 0, %for.body.lr.ph ], [ %34, %Array_Expression____sl__.exit ]
  %i.062 = phi i64 [ 0, %for.body.lr.ph ], [ %35, %Array_Expression____sl__.exit ]
  %11 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Array_Type_, ptr %11, i64 0, i32 2
  %12 = load i64, ptr %memberidx4, align 4
  %13 = icmp sgt i64 %12, %i.062
  br i1 %13, label %true_block, label %false_block

for.end:                                          ; preds = %Array_Expression____sl__.exit, %for.entry
  %14 = phi ptr [ %5, %for.entry ], [ %32, %Array_Expression____sl__.exit ]
  %15 = phi i64 [ 8, %for.entry ], [ %33, %Array_Expression____sl__.exit ]
  %16 = phi i64 [ 0, %for.entry ], [ %34, %Array_Expression____sl__.exit ]
  %.lcssa = phi i64 [ %6, %for.entry ], [ %36, %Array_Expression____sl__.exit ]
  %memberidx.i39 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %17 = load ptr, ptr %memberidx.i39, align 8
  %memberidx1.i40 = getelementptr inbounds %Compiler, ptr %17, i64 0, i32 6
  %18 = load ptr, ptr %memberidx1.i40, align 8
  %memberidx2.i41 = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx2.i41, align 4
  %20 = icmp sgt i64 %19, 0
  %21 = icmp eq ptr %2, null
  %22 = or i1 %21, %20
  br i1 %22, label %common.ret, label %ifend

true_block:                                       ; preds = %for.body
  %memberidx.i42 = getelementptr inbounds %Array_Type_, ptr %11, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i42, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %23, i64 %i.062
  %24 = load ptr, ptr %ptridx.i, align 8
  br label %end

false_block:                                      ; preds = %for.body
  %25 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %25, align 4
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %24, %true_block ], [ %25, %false_block ]
  %26 = load ptr, ptr %memberidx.i43, align 8
  %ptridx.i44 = getelementptr inbounds ptr, ptr %26, i64 %i.062
  %27 = load ptr, ptr %ptridx.i44, align 8
  %28 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %ternary, ptr %27)
  %.not.i = icmp slt i64 %10, %9
  br i1 %.not.i, label %Array_Expression____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %end
  %29 = shl i64 %9, 1
  store i64 %29, ptr %memberidx1.i, align 4
  %30 = shl i64 %9, 4
  %31 = tail call ptr @realloc(ptr %8, i64 %30)
  store ptr %31, ptr %memberidx2.i, align 8
  br label %Array_Expression____sl__.exit

Array_Expression____sl__.exit:                    ; preds = %end, %if.entry.i
  %32 = phi ptr [ %8, %end ], [ %31, %if.entry.i ]
  %33 = phi i64 [ %9, %end ], [ %29, %if.entry.i ]
  %34 = add i64 %10, 1
  store i64 %34, ptr %memberidx.i, align 4
  %ptridx.i47 = getelementptr inbounds ptr, ptr %32, i64 %10
  store ptr %28, ptr %ptridx.i47, align 8
  %35 = add nuw nsw i64 %i.062, 1
  %36 = load i64, ptr %memberidx2, align 4
  %37 = icmp slt i64 %35, %36
  br i1 %37, label %for.body, label %for.end

common.ret:                                       ; preds = %ifend22, %ifend, %for.end
  ret ptr %4

ifend:                                            ; preds = %for.end
  %memberidx6 = getelementptr inbounds %Array_FunctionArg_, ptr %2, i64 0, i32 2
  %38 = load i64, ptr %memberidx6, align 4
  %39 = icmp sgt i64 %38, %.lcssa
  br i1 %39, label %for.body15.lr.ph, label %common.ret

for.body15.lr.ph:                                 ; preds = %ifend
  %memberidx.i48 = getelementptr inbounds %Array_FunctionArg_, ptr %2, i64 0, i32 1
  br label %for.body15

for.body15:                                       ; preds = %for.body15.lr.ph, %ifend22
  %40 = phi i64 [ %38, %for.body15.lr.ph ], [ %54, %ifend22 ]
  %41 = phi ptr [ %14, %for.body15.lr.ph ], [ %55, %ifend22 ]
  %42 = phi ptr [ %14, %for.body15.lr.ph ], [ %56, %ifend22 ]
  %43 = phi i64 [ %15, %for.body15.lr.ph ], [ %57, %ifend22 ]
  %44 = phi i64 [ %16, %for.body15.lr.ph ], [ %58, %ifend22 ]
  %storemerge61 = phi i64 [ %.lcssa, %for.body15.lr.ph ], [ %59, %ifend22 ]
  %45 = load ptr, ptr %memberidx.i48, align 8
  %ptridx.i49 = getelementptr inbounds ptr, ptr %45, i64 %storemerge61
  %46 = load ptr, ptr %ptridx.i49, align 8
  %memberidx19 = getelementptr inbounds %FunctionArg, ptr %46, i64 0, i32 6
  %47 = load ptr, ptr %memberidx19, align 8
  %.not = icmp eq ptr %47, null
  br i1 %.not, label %ifend22, label %if.entry20

if.entry20:                                       ; preds = %for.body15
  %.not.i52 = icmp slt i64 %44, %43
  br i1 %.not.i52, label %Array_Expression____sl__.exit58, label %if.entry.i55

if.entry.i55:                                     ; preds = %if.entry20
  %48 = shl i64 %43, 1
  store i64 %48, ptr %memberidx1.i, align 4
  %49 = shl i64 %43, 4
  %50 = tail call ptr @realloc(ptr %42, i64 %49)
  store ptr %50, ptr %memberidx2.i, align 8
  br label %Array_Expression____sl__.exit58

Array_Expression____sl__.exit58:                  ; preds = %if.entry20, %if.entry.i55
  %51 = phi ptr [ %41, %if.entry20 ], [ %50, %if.entry.i55 ]
  %52 = phi i64 [ %43, %if.entry20 ], [ %48, %if.entry.i55 ]
  %53 = add i64 %44, 1
  store i64 %53, ptr %memberidx.i, align 4
  %ptridx.i57 = getelementptr inbounds ptr, ptr %51, i64 %44
  store ptr %47, ptr %ptridx.i57, align 8
  %.pre = load i64, ptr %memberidx6, align 4
  br label %ifend22

ifend22:                                          ; preds = %for.body15, %Array_Expression____sl__.exit58
  %54 = phi i64 [ %40, %for.body15 ], [ %.pre, %Array_Expression____sl__.exit58 ]
  %55 = phi ptr [ %41, %for.body15 ], [ %51, %Array_Expression____sl__.exit58 ]
  %56 = phi ptr [ %42, %for.body15 ], [ %51, %Array_Expression____sl__.exit58 ]
  %57 = phi i64 [ %43, %for.body15 ], [ %52, %Array_Expression____sl__.exit58 ]
  %58 = phi i64 [ %44, %for.body15 ], [ %53, %Array_Expression____sl__.exit58 ]
  %59 = add nsw i64 %storemerge61, 1
  %60 = icmp slt i64 %59, %54
  br i1 %60, label %for.body15, label %common.ret
}

define internal fastcc void @TypeChecker_add_inherited_props_to_class(ptr %0, ptr nocapture %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Class, ptr %1, i64 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load i64, ptr %4, align 4
  %6 = icmp eq i64 %5, 20
  br i1 %6, label %if.entry.i113, label %is_object.exit

if.entry.i113:                                    ; preds = %3, %if.entry.i113
  %.tr5.i = phi ptr [ %7, %if.entry.i113 ], [ %4, %3 ]
  %memberidx1.i112 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %7 = load ptr, ptr %memberidx1.i112, align 8
  %8 = load i64, ptr %7, align 4
  %9 = icmp eq i64 %8, 20
  br i1 %9, label %if.entry.i113, label %is_object.exit

is_object.exit:                                   ; preds = %if.entry.i113, %3
  %.lcssa.i = phi i64 [ %5, %3 ], [ %8, %if.entry.i113 ]
  %10 = icmp eq i64 %.lcssa.i, 13
  br i1 %10, label %ifend, label %if.entry

if.entry:                                         ; preds = %is_object.exit
  %11 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %4)
  %12 = load ptr, ptr %11, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %12, i64 0, i32 5
  %13 = load ptr, ptr %memberidx1, align 8
  %14 = tail call ptr %13(ptr nonnull %11)
  %15 = alloca ptr, align 8
  %16 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %15, ptr nonnull @197, ptr %14)
  %17 = load ptr, ptr %15, align 8
  %18 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %18, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %18, i64 0, i32 1
  store ptr %17, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %18, i64 0, i32 2
  store i64 %16, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %18, i64 0, i32 3
  store i64 %16, ptr %memberidx2.i, align 4
  tail call void @free(ptr %14)
  %memberidx2 = getelementptr inbounds %ClassDeclarationNode, ptr %2, i64 0, i32 2
  %19 = load ptr, ptr %memberidx2, align 8
  %20 = load ptr, ptr %19, align 8
  %memberidx.i55 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %21 = load ptr, ptr %memberidx.i55, align 8
  %memberidx1.i56 = getelementptr inbounds %Compiler, ptr %21, i64 0, i32 6
  %22 = load ptr, ptr %memberidx1.i56, align 8
  %23 = call ptr @malloc(i32 24)
  store i64 5, ptr %23, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %23, i64 0, i32 2
  store ptr %20, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %23, i64 0, i32 1
  store ptr %18, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %22, i64 0, i32 2
  %24 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %22, i64 0, i32 3
  %25 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %24, %25
  br i1 %.not.i.i, label %if.entry.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry.TypeChecker_error.exit_crit_edge:        ; preds = %if.entry
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %22, i64 0, i32 1
  %.pre131 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry
  %26 = shl i64 %25, 1
  store i64 %26, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %22, i64 0, i32 1
  %27 = load ptr, ptr %memberidx2.i.i.i, align 8
  %28 = shl i64 %25, 4
  %29 = call ptr @realloc(ptr %27, i64 %28)
  store ptr %29, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %30 = phi ptr [ %.pre131, %if.entry.TypeChecker_error.exit_crit_edge ], [ %29, %if.entry.i.i ]
  %31 = phi i64 [ %24, %if.entry.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %32 = add i64 %31, 1
  store i64 %32, ptr %memberidx.i.i, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %30, i64 %31
  store ptr %23, ptr %ptridx.i.i, align 8
  %.pre132 = load i64, ptr %4, align 4
  br label %ifend

ifend:                                            ; preds = %is_object.exit, %TypeChecker_error.exit
  %33 = phi i64 [ %5, %is_object.exit ], [ %.pre132, %TypeChecker_error.exit ]
  %34 = load ptr, ptr %0, align 8
  %switch128 = icmp eq i64 %33, 20
  br i1 %switch128, label %if.entry.i117, label %if.entry3.i

if.entry.i117:                                    ; preds = %ifend, %if.entry.i117
  %.tr11.i129 = phi ptr [ %35, %if.entry.i117 ], [ %4, %ifend ]
  %memberidx1.i116 = getelementptr inbounds %GenericType, ptr %.tr11.i129, i64 0, i32 3
  %35 = load ptr, ptr %memberidx1.i116, align 8
  %36 = load i64, ptr %35, align 4
  %switch = icmp eq i64 %36, 20
  br i1 %switch, label %if.entry.i117, label %if.entry3.i

if.entry3.i:                                      ; preds = %if.entry.i117, %ifend
  %.tr11.i.lcssa = phi ptr [ %4, %ifend ], [ %35, %if.entry.i117 ]
  %memberidx6.i118 = getelementptr inbounds %ObjectType, ptr %.tr11.i.lcssa, i64 0, i32 1
  %37 = load ptr, ptr %memberidx6.i118, align 8
  %memberidx.i.i119 = getelementptr inbounds %Program, ptr %34, i64 0, i32 1
  %38 = load ptr, ptr %memberidx.i.i119, align 8
  %39 = load i64, ptr %37, align 4
  %memberidx.i.i.i120 = getelementptr inbounds %Array_Module_, ptr %38, i64 0, i32 1
  %40 = load ptr, ptr %memberidx.i.i.i120, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %40, i64 %39
  %41 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i121 = getelementptr inbounds %Module, ptr %41, i64 0, i32 4
  %42 = load ptr, ptr %memberidx2.i.i121, align 8
  %memberidx3.i.i122 = getelementptr inbounds %TypeId, ptr %37, i64 0, i32 2
  %43 = load i64, ptr %memberidx3.i.i122, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %42, i64 0, i32 1
  %44 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %44, i64 %43
  %45 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx5 = getelementptr inbounds %Class, ptr %45, i64 0, i32 6
  %46 = load ptr, ptr %memberidx5, align 8
  %47 = load ptr, ptr %46, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %47, i64 0, i32 2
  %48 = load ptr, ptr %memberidx6, align 8
  %49 = call ptr %48(ptr nonnull %46)
  %50 = call ptr @malloc(i32 33)
  %memberidx.i57 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %49, i64 0, i32 1
  %51 = load ptr, ptr %memberidx.i57, align 8
  %memberidx1.i58 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %49, i64 0, i32 2
  %52 = load i64, ptr %memberidx1.i58, align 4
  store ptr @VTableArrayIterator_Bucket_string_PropId__, ptr %50, align 8
  %memberidx.i.i59 = getelementptr inbounds %Iterator_Bucket_string_PropId__, ptr %50, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i59, align 1
  %memberidx1.i.i60 = getelementptr inbounds %ArrayIterator_Bucket_string_PropId__, ptr %50, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i60, align 4
  %memberidx2.i.i61 = getelementptr inbounds %ArrayIterator_Bucket_string_PropId__, ptr %50, i64 0, i32 4
  store ptr %51, ptr %memberidx2.i.i61, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_Bucket_string_PropId__, ptr %50, i64 0, i32 3
  store i64 %52, ptr %memberidx3.i.i, align 4
  %53 = load ptr, ptr @VTableArrayIterator_Bucket_string_PropId__, align 8
  %54 = call ptr %53(ptr nonnull %50)
  %55 = load i1, ptr %memberidx.i.i59, align 1
  br i1 %55, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.entry3.i
  %memberidx12 = getelementptr inbounds %Class, ptr %1, i64 0, i32 6
  %memberidx30 = getelementptr inbounds %Class, ptr %1, i64 0, i32 9
  %memberidx36 = getelementptr inbounds %Class, ptr %1, i64 0, i32 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.incr
  %storemerge127 = phi ptr [ %54, %for.body.lr.ph ], [ %104, %for.incr ]
  %memberidx9 = getelementptr inbounds %Bucket_string_PropId_, ptr %storemerge127, i64 0, i32 1
  %56 = load ptr, ptr %memberidx9, align 8
  %memberidx10 = getelementptr inbounds %Bucket_string_PropId_, ptr %storemerge127, i64 0, i32 2
  %57 = load ptr, ptr %memberidx10, align 8
  %58 = load ptr, ptr %0, align 8
  %memberidx.i.i62 = getelementptr inbounds %PropId, ptr %57, i64 0, i32 1
  %59 = load ptr, ptr %memberidx.i.i62, align 8
  %memberidx.i.i.i63 = getelementptr inbounds %Program, ptr %58, i64 0, i32 1
  %60 = load ptr, ptr %memberidx.i.i.i63, align 8
  %61 = load i64, ptr %59, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %60, i64 0, i32 1
  %62 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %62, i64 %61
  %63 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i64 = getelementptr inbounds %Module, ptr %63, i64 0, i32 4
  %64 = load ptr, ptr %memberidx2.i.i.i64, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %59, i64 0, i32 2
  %65 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %64, i64 0, i32 1
  %66 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %66, i64 %65
  %67 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %68 = load i64, ptr %57, align 4
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %for.body
  %memberidx1.i65 = getelementptr inbounds %Class, ptr %67, i64 0, i32 5
  %70 = load ptr, ptr %memberidx1.i65, align 8
  %memberidx2.i66 = getelementptr inbounds %PropId, ptr %57, i64 0, i32 2
  %71 = load i64, ptr %memberidx2.i66, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %70, i64 0, i32 1
  %72 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %72, i64 %71
  %73 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %73, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %for.body
  %memberidx4.i = getelementptr inbounds %Class, ptr %67, i64 0, i32 4
  %74 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %57, i64 0, i32 2
  %75 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %74, i64 0, i32 1
  %76 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i67 = getelementptr inbounds ptr, ptr %76, i64 %75
  %77 = load ptr, ptr %ptridx.i.i67, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %77, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i = load ptr, ptr %common.ret.op.in.i, align 8
  %78 = load ptr, ptr %memberidx12, align 8
  %79 = load ptr, ptr %78, align 8
  %memberidx13 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %79, i64 0, i32 1
  %80 = load ptr, ptr %memberidx13, align 8
  %81 = call ptr %80(ptr nonnull %78, ptr %56)
  %82 = load ptr, ptr %0, align 8
  %83 = load ptr, ptr %memberidx.i.i62, align 8
  %memberidx.i.i.i69 = getelementptr inbounds %Program, ptr %82, i64 0, i32 1
  %84 = load ptr, ptr %memberidx.i.i.i69, align 8
  %85 = load i64, ptr %83, align 4
  %memberidx.i.i.i.i70 = getelementptr inbounds %Array_Module_, ptr %84, i64 0, i32 1
  %86 = load ptr, ptr %memberidx.i.i.i.i70, align 8
  %ptridx.i.i.i.i71 = getelementptr inbounds ptr, ptr %86, i64 %85
  %87 = load ptr, ptr %ptridx.i.i.i.i71, align 8
  %memberidx2.i.i.i72 = getelementptr inbounds %Module, ptr %87, i64 0, i32 4
  %88 = load ptr, ptr %memberidx2.i.i.i72, align 8
  %memberidx3.i.i.i73 = getelementptr inbounds %TypeId, ptr %83, i64 0, i32 2
  %89 = load i64, ptr %memberidx3.i.i.i73, align 4
  %memberidx.i5.i.i.i74 = getelementptr inbounds %Array_Class_, ptr %88, i64 0, i32 1
  %90 = load ptr, ptr %memberidx.i5.i.i.i74, align 8
  %ptridx.i6.i.i.i75 = getelementptr inbounds ptr, ptr %90, i64 %89
  %91 = load ptr, ptr %ptridx.i6.i.i.i75, align 8
  %92 = load i64, ptr %57, align 4
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %if.entry.i105, label %ifend.i111

if.entry.i105:                                    ; preds = %get_class_prop_type.exit
  %memberidx1.i78 = getelementptr inbounds %Class, ptr %91, i64 0, i32 5
  %94 = load ptr, ptr %memberidx1.i78, align 8
  %memberidx2.i79 = getelementptr inbounds %PropId, ptr %57, i64 0, i32 2
  %95 = load i64, ptr %memberidx2.i79, align 4
  %memberidx.i12.i80 = getelementptr inbounds %Array_ClassMethod_, ptr %94, i64 0, i32 1
  %96 = load ptr, ptr %memberidx.i12.i80, align 8
  %ptridx.i13.i81 = getelementptr inbounds ptr, ptr %96, i64 %95
  %97 = load ptr, ptr %ptridx.i13.i81, align 8
  %memberidx3.i82 = getelementptr inbounds %ClassMethod, ptr %97, i64 0, i32 2
  %memberidx3.i104 = getelementptr inbounds %ClassMethod, ptr %97, i64 0, i32 1
  br label %is_class_prop_static.exit

ifend.i111:                                       ; preds = %get_class_prop_type.exit
  %memberidx4.i84 = getelementptr inbounds %Class, ptr %91, i64 0, i32 4
  %98 = load ptr, ptr %memberidx4.i84, align 8
  %memberidx5.i85 = getelementptr inbounds %PropId, ptr %57, i64 0, i32 2
  %99 = load i64, ptr %memberidx5.i85, align 4
  %memberidx.i11.i86 = getelementptr inbounds %Array_ClassField_, ptr %98, i64 0, i32 1
  %100 = load ptr, ptr %memberidx.i11.i86, align 8
  %ptridx.i.i87 = getelementptr inbounds ptr, ptr %100, i64 %99
  %101 = load ptr, ptr %ptridx.i.i87, align 8
  %memberidx6.i88 = getelementptr inbounds %ClassField, ptr %101, i64 0, i32 2
  %memberidx6.i110 = getelementptr inbounds %ClassField, ptr %101, i64 0, i32 1
  br label %is_class_prop_static.exit

is_class_prop_static.exit:                        ; preds = %if.entry.i105, %ifend.i111
  %common.ret.op.i77125.in = phi ptr [ %memberidx3.i82, %if.entry.i105 ], [ %memberidx6.i88, %ifend.i111 ]
  %common.ret.op.in.i98 = phi ptr [ %memberidx3.i104, %if.entry.i105 ], [ %memberidx6.i110, %ifend.i111 ]
  %common.ret.op.i99 = load i1, ptr %common.ret.op.in.i98, align 1
  br i1 %common.ret.op.i99, label %for.incr, label %ifend18

for.incr:                                         ; preds = %ifend35, %ifend18, %is_class_prop_static.exit
  %102 = load ptr, ptr %50, align 8
  %103 = load ptr, ptr %102, align 8
  %104 = call ptr %103(ptr nonnull %50)
  %105 = load i1, ptr %memberidx.i.i59, align 1
  br i1 %105, label %for.end, label %for.body

for.end:                                          ; preds = %for.incr, %if.entry3.i
  tail call void @free(ptr nonnull %50)
  ret void

ifend18:                                          ; preds = %is_class_prop_static.exit
  %common.ret.op.i77125 = load i64, ptr %common.ret.op.i77125.in, align 4
  %106 = icmp ne i64 %common.ret.op.i77125, 1
  %107 = load i64, ptr %common.ret.op.i, align 4
  %108 = icmp ne i64 %107, 17
  %.not = or i1 %106, %108
  %109 = icmp eq ptr %81, null
  %or.cond = select i1 %.not, i1 %109, i1 false
  br i1 %or.cond, label %if.entry23, label %for.incr

if.entry23:                                       ; preds = %ifend18
  %110 = icmp eq i64 %92, 1
  br i1 %110, label %if.entry27, label %ifend29

if.entry27:                                       ; preds = %if.entry23
  %111 = load i64, ptr %memberidx30, align 4
  %112 = add i64 %111, 1
  store i64 %112, ptr %memberidx30, align 4
  %.pre133 = load i64, ptr %57, align 4
  br label %ifend29

ifend29:                                          ; preds = %if.entry23, %if.entry27
  %113 = phi i64 [ %92, %if.entry23 ], [ %.pre133, %if.entry27 ]
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %if.entry33, label %ifend35

if.entry33:                                       ; preds = %ifend29
  %115 = load i64, ptr %memberidx36, align 4
  %116 = add i64 %115, 1
  store i64 %116, ptr %memberidx36, align 4
  br label %ifend35

ifend35:                                          ; preds = %ifend29, %if.entry33
  %117 = load ptr, ptr %memberidx12, align 8
  %118 = load ptr, ptr %117, align 8
  %119 = load ptr, ptr %118, align 8
  call void %119(ptr nonnull %117, ptr %56, ptr nonnull %57)
  br label %for.incr
}

define internal fastcc ptr @TypeChecker_check_member_access(ptr nocapture readonly %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = load ptr, ptr %0, align 8
  %memberidx.i = getelementptr inbounds %PropId, ptr %1, i64 0, i32 1
  %4 = load ptr, ptr %memberidx.i, align 8
  %memberidx.i.i = getelementptr inbounds %Program, ptr %3, i64 0, i32 1
  %5 = load ptr, ptr %memberidx.i.i, align 8
  %6 = load i64, ptr %4, align 4
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %5, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %7, i64 %6
  %8 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %Module, ptr %8, i64 0, i32 4
  %9 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %TypeId, ptr %4, i64 0, i32 2
  %10 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %9, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %11, i64 %10
  %12 = load ptr, ptr %ptridx.i6.i.i, align 8
  %13 = tail call ptr @malloc(i32 0)
  %14 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %14, align 8
  %memberidx.i.i55 = getelementptr inbounds %string, ptr %14, i64 0, i32 1
  store ptr %13, ptr %memberidx.i.i55, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %14, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i, i8 0, i64 16, i1 false)
  %15 = load i64, ptr %1, align 4
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %memberidx2 = getelementptr inbounds %Class, ptr %12, i64 0, i32 5
  %17 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %PropId, ptr %1, i64 0, i32 2
  %18 = load i64, ptr %memberidx3, align 4
  %memberidx.i57 = getelementptr inbounds %Array_ClassMethod_, ptr %17, i64 0, i32 1
  %19 = load ptr, ptr %memberidx.i57, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %19, i64 %18
  %20 = load ptr, ptr %ptridx.i, align 8
  %memberidx4 = getelementptr inbounds %ClassMethod, ptr %20, i64 0, i32 2
  %memberidx5 = getelementptr inbounds %ClassMethod, ptr %20, i64 0, i32 3
  br label %ifend

else:                                             ; preds = %2
  %memberidx6 = getelementptr inbounds %Class, ptr %12, i64 0, i32 4
  %21 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %PropId, ptr %1, i64 0, i32 2
  %22 = load i64, ptr %memberidx7, align 4
  %memberidx.i58 = getelementptr inbounds %Array_ClassField_, ptr %21, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i58, align 8
  %ptridx.i59 = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx.i59, align 8
  %memberidx8 = getelementptr inbounds %ClassField, ptr %24, i64 0, i32 2
  %memberidx9 = getelementptr inbounds %ClassField, ptr %24, i64 0, i32 3
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %visibility.0.in = phi ptr [ %memberidx4, %if.entry ], [ %memberidx8, %else ]
  %member_name.0.in = phi ptr [ %memberidx5, %if.entry ], [ %memberidx9, %else ]
  %member_name.0 = load ptr, ptr %member_name.0.in, align 8
  %visibility.0 = load i64, ptr %visibility.0.in, align 4
  %memberidx10 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 2
  %25 = load ptr, ptr %memberidx10, align 8
  %.not = icmp eq ptr %25, null
  br i1 %.not, label %else12, label %if.entry11

if.entry11:                                       ; preds = %ifend
  %26 = load i64, ptr %25, align 4
  %27 = load ptr, ptr %12, align 8
  %28 = load i64, ptr %27, align 4
  %29 = icmp ne i64 %26, %28
  %memberidx19 = getelementptr inbounds %TypeId, ptr %27, i64 0, i32 2
  %30 = load i64, ptr %memberidx19, align 4
  %memberidx21 = getelementptr inbounds %TypeId, ptr %25, i64 0, i32 2
  %31 = load i64, ptr %memberidx21, align 4
  %32 = icmp ne i64 %30, %31
  %33 = or i1 %29, %32
  %34 = icmp eq i64 %visibility.0, 1
  %or.cond = select i1 %33, i1 %34, i1 false
  br i1 %or.cond, label %if.entry25, label %common.ret

else12:                                           ; preds = %ifend
  %.not53 = icmp eq i64 %visibility.0, 2
  br i1 %.not53, label %common.ret, label %if.entry31

common.ret.sink.split:                            ; preds = %if.entry25, %dump_access.exit
  %.sink67 = phi ptr [ %54, %dump_access.exit ], [ %37, %if.entry25 ]
  %.sink = phi ptr [ %58, %dump_access.exit ], [ %41, %if.entry25 ]
  %common.ret.op.ph = phi ptr [ %62, %dump_access.exit ], [ %45, %if.entry25 ]
  tail call void @free(ptr %.sink67)
  tail call void @free(ptr %.sink)
  br label %common.ret

common.ret:                                       ; preds = %common.ret.sink.split, %else12, %if.entry11
  %common.ret.op = phi ptr [ null, %if.entry11 ], [ null, %else12 ], [ %common.ret.op.ph, %common.ret.sink.split ]
  ret ptr %common.ret.op

if.entry25:                                       ; preds = %if.entry11
  %35 = load ptr, ptr %member_name.0, align 8
  %memberidx28 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %35, i64 0, i32 5
  %36 = load ptr, ptr %memberidx28, align 8
  %37 = tail call ptr %36(ptr nonnull %member_name.0)
  %memberidx29 = getelementptr inbounds %Class, ptr %12, i64 0, i32 1
  %38 = load ptr, ptr %memberidx29, align 8
  %39 = load ptr, ptr %38, align 8
  %memberidx30 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %39, i64 0, i32 5
  %40 = load ptr, ptr %memberidx30, align 8
  %41 = tail call ptr %40(ptr nonnull %38)
  %42 = alloca ptr, align 8
  %43 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %42, ptr nonnull @233, ptr %37, ptr %41)
  %44 = load ptr, ptr %42, align 8
  %45 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %45, align 8
  %memberidx.i60 = getelementptr inbounds %string, ptr %45, i64 0, i32 1
  store ptr %44, ptr %memberidx.i60, align 8
  %memberidx1.i61 = getelementptr inbounds %string, ptr %45, i64 0, i32 2
  store i64 %43, ptr %memberidx1.i61, align 4
  %memberidx2.i62 = getelementptr inbounds %string, ptr %45, i64 0, i32 3
  store i64 %43, ptr %memberidx2.i62, align 4
  br label %common.ret.sink.split

if.entry31:                                       ; preds = %else12
  %46 = load ptr, ptr %member_name.0, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i64 0, i32 5
  %47 = load ptr, ptr %memberidx34, align 8
  %48 = tail call ptr %47(ptr nonnull %member_name.0)
  %49 = icmp eq i64 %visibility.0, 1
  br i1 %49, label %if.entry.i, label %ifend3.i

if.entry.i:                                       ; preds = %if.entry31
  %50 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %50, ptr noundef nonnull align 8 dereferenceable(7) @48, i64 7, i1 false)
  br label %dump_access.exit

ifend3.i:                                         ; preds = %if.entry31
  %51 = tail call ptr @malloc(i32 72)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %51, ptr noundef nonnull align 8 dereferenceable(9) @50, i64 9, i1 false)
  br label %dump_access.exit

dump_access.exit:                                 ; preds = %if.entry.i, %ifend3.i
  %.sink72 = phi ptr [ %50, %if.entry.i ], [ %51, %ifend3.i ]
  %.sink70 = phi i64 [ 7, %if.entry.i ], [ 9, %ifend3.i ]
  %52 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %52, align 8
  %memberidx.i.i.i63 = getelementptr inbounds %string, ptr %52, i64 0, i32 1
  store ptr %.sink72, ptr %memberidx.i.i.i63, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %52, i64 0, i32 2
  store i64 %.sink70, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %52, i64 0, i32 3
  store i64 %.sink70, ptr %memberidx2.i.i.i, align 4
  %53 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %54 = tail call ptr %53(ptr nonnull %52)
  %memberidx36 = getelementptr inbounds %Class, ptr %12, i64 0, i32 1
  %55 = load ptr, ptr %memberidx36, align 8
  %56 = load ptr, ptr %55, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %56, i64 0, i32 5
  %57 = load ptr, ptr %memberidx37, align 8
  %58 = tail call ptr %57(ptr nonnull %55)
  %59 = alloca ptr, align 8
  %60 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %59, ptr nonnull @234, ptr %48, ptr %54, ptr %58)
  %61 = load ptr, ptr %59, align 8
  %62 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %62, align 8
  %memberidx.i54 = getelementptr inbounds %string, ptr %62, i64 0, i32 1
  store ptr %61, ptr %memberidx.i54, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %62, i64 0, i32 2
  store i64 %60, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %62, i64 0, i32 3
  store i64 %60, ptr %memberidx2.i, align 4
  tail call void @free(ptr %48)
  br label %common.ret.sink.split
}

define internal fastcc ptr @TypeChecker_check_can_return(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %memberidx = getelementptr inbounds %ReturnStatementNode, ptr %1, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx.i, align 8
  %.not.i = icmp eq ptr %4, null
  br i1 %.not.i, label %ifend.i, label %if.entry.i

if.entry.i:                                       ; preds = %2
  %5 = load ptr, ptr %0, align 8
  %memberidx.i.i.i = getelementptr inbounds %PropId, ptr %4, i64 0, i32 1
  %6 = load ptr, ptr %memberidx.i.i.i, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Program, ptr %5, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %8 = load i64, ptr %6, align 4
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %7, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %9, i64 %8
  %10 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  %memberidx2.i.i.i.i = getelementptr inbounds %Module, ptr %10, i64 0, i32 4
  %11 = load ptr, ptr %memberidx2.i.i.i.i, align 8
  %memberidx3.i.i.i.i = getelementptr inbounds %TypeId, ptr %6, i64 0, i32 2
  %12 = load i64, ptr %memberidx3.i.i.i.i, align 4
  %memberidx.i5.i.i.i.i = getelementptr inbounds %Array_Class_, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i5.i.i.i.i, align 8
  %ptridx.i6.i.i.i.i = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i6.i.i.i.i, align 8
  %15 = load i64, ptr %4, align 4
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %if.entry.i.i, label %ifend.i.i

if.entry.i.i:                                     ; preds = %if.entry.i
  %memberidx1.i.i = getelementptr inbounds %Class, ptr %14, i64 0, i32 5
  %17 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %PropId, ptr %4, i64 0, i32 2
  %18 = load i64, ptr %memberidx2.i.i, align 4
  %memberidx.i12.i.i = getelementptr inbounds %Array_ClassMethod_, ptr %17, i64 0, i32 1
  %19 = load ptr, ptr %memberidx.i12.i.i, align 8
  %ptridx.i13.i.i = getelementptr inbounds ptr, ptr %19, i64 %18
  %20 = load ptr, ptr %ptridx.i13.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ClassMethod, ptr %20, i64 0, i32 4
  br label %TypeChecker_get_current_function_type.exit

ifend.i.i:                                        ; preds = %if.entry.i
  %memberidx4.i.i = getelementptr inbounds %Class, ptr %14, i64 0, i32 4
  %21 = load ptr, ptr %memberidx4.i.i, align 8
  %memberidx5.i.i = getelementptr inbounds %PropId, ptr %4, i64 0, i32 2
  %22 = load i64, ptr %memberidx5.i.i, align 4
  %memberidx.i11.i.i = getelementptr inbounds %Array_ClassField_, ptr %21, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i11.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx6.i.i = getelementptr inbounds %ClassField, ptr %24, i64 0, i32 4
  br label %TypeChecker_get_current_function_type.exit

ifend.i:                                          ; preds = %2
  %memberidx.i.i7.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %25 = load i64, ptr %memberidx.i.i7.i, align 4
  %26 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i.i = getelementptr inbounds %Program, ptr %26, i64 0, i32 1
  %27 = load ptr, ptr %memberidx1.i.i.i.i, align 8
  %memberidx.i.i.i.i8.i = getelementptr inbounds %Array_Module_, ptr %27, i64 0, i32 1
  %28 = load ptr, ptr %memberidx.i.i.i.i8.i, align 8
  %ptridx.i.i.i.i9.i = getelementptr inbounds ptr, ptr %28, i64 %25
  %29 = load ptr, ptr %ptridx.i.i.i.i9.i, align 8
  %memberidx.i.i = getelementptr inbounds %Module, ptr %29, i64 0, i32 5
  %30 = load ptr, ptr %memberidx.i.i, align 8
  %memberidx1.i10.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 3
  %31 = load ptr, ptr %memberidx1.i10.i, align 8
  %memberidx2.i11.i = getelementptr inbounds %VarId, ptr %31, i64 0, i32 2
  %32 = load i64, ptr %memberidx2.i11.i, align 4
  %memberidx.i4.i.i = getelementptr inbounds %Array_Function_, ptr %30, i64 0, i32 1
  %33 = load ptr, ptr %memberidx.i4.i.i, align 8
  %ptridx.i.i12.i = getelementptr inbounds ptr, ptr %33, i64 %32
  %34 = load ptr, ptr %ptridx.i.i12.i, align 8
  %memberidx3.i = getelementptr inbounds %Function, ptr %34, i64 0, i32 4
  br label %TypeChecker_get_current_function_type.exit

TypeChecker_get_current_function_type.exit:       ; preds = %if.entry.i.i, %ifend.i.i, %ifend.i
  %common.ret.op.i.in = phi ptr [ %memberidx3.i, %ifend.i ], [ %memberidx3.i.i, %if.entry.i.i ], [ %memberidx6.i.i, %ifend.i.i ]
  %common.ret.op.i = load ptr, ptr %common.ret.op.i.in, align 8
  %memberidx1 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i, i64 0, i32 2
  %35 = load ptr, ptr %memberidx1, align 8
  %36 = tail call ptr @malloc(i32 16)
  store i64 7, ptr %36, align 4
  %memberidx.i42 = getelementptr inbounds %ReturnStatement, ptr %36, i64 0, i32 1
  store ptr null, ptr %memberidx.i42, align 8
  %.not = icmp eq ptr %3, null
  br i1 %.not, label %else, label %if.entry

if.entry:                                         ; preds = %TypeChecker_get_current_function_type.exit
  %37 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %35, ptr nonnull %3)
  %memberidx.i43 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %38 = load ptr, ptr %memberidx.i43, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %38, i64 0, i32 6
  %39 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %39, i64 0, i32 2
  %40 = load i64, ptr %memberidx2.i, align 4
  %41 = icmp sgt i64 %40, 0
  br i1 %41, label %common.ret, label %ifend4

else:                                             ; preds = %TypeChecker_get_current_function_type.exit
  %42 = load i64, ptr %35, align 4
  %.not41 = icmp eq i64 %42, 12
  br i1 %.not41, label %common.ret, label %if.entry20

common.ret:                                       ; preds = %ifend13, %else, %if.entry, %TypeChecker_error.exit86, %TypeChecker_error.exit70, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit70 ], [ null, %TypeChecker_error.exit86 ], [ null, %if.entry ], [ %36, %else ], [ %36, %ifend13 ]
  ret ptr %common.ret.op

ifend4:                                           ; preds = %if.entry
  %43 = load i64, ptr %35, align 4
  %44 = icmp eq i64 %43, 12
  br i1 %44, label %if.entry6, label %ifend8

if.entry6:                                        ; preds = %ifend4
  %45 = tail call ptr @malloc(i32 432)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(54) %45, ptr noundef nonnull align 8 dereferenceable(54) @267, i64 54, i1 false)
  %46 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %46, align 8
  %memberidx.i.i44 = getelementptr inbounds %string, ptr %46, i64 0, i32 1
  store ptr %45, ptr %memberidx.i.i44, align 8
  %memberidx1.i.i45 = getelementptr inbounds %string, ptr %46, i64 0, i32 2
  store i64 54, ptr %memberidx1.i.i45, align 4
  %memberidx2.i.i46 = getelementptr inbounds %string, ptr %46, i64 0, i32 3
  store i64 54, ptr %memberidx2.i.i46, align 4
  %47 = load ptr, ptr %3, align 8
  %48 = load ptr, ptr %memberidx.i43, align 8
  %memberidx1.i48 = getelementptr inbounds %Compiler, ptr %48, i64 0, i32 6
  %49 = load ptr, ptr %memberidx1.i48, align 8
  %50 = tail call ptr @malloc(i32 24)
  store i64 5, ptr %50, align 4
  %memberidx1.i.i49 = getelementptr inbounds %FloError, ptr %50, i64 0, i32 2
  store ptr %47, ptr %memberidx1.i.i49, align 8
  %memberidx2.i.i50 = getelementptr inbounds %FloError, ptr %50, i64 0, i32 1
  store ptr %46, ptr %memberidx2.i.i50, align 8
  %memberidx.i.i51 = getelementptr inbounds %Array_FloError_, ptr %49, i64 0, i32 2
  %51 = load i64, ptr %memberidx.i.i51, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %49, i64 0, i32 3
  %52 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %51, %52
  br i1 %.not.i.i, label %if.entry6.TypeChecker_error.exit_crit_edge, label %if.entry.i.i53

if.entry6.TypeChecker_error.exit_crit_edge:       ; preds = %if.entry6
  %memberidx4.i.i54.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %49, i64 0, i32 1
  %.pre90 = load ptr, ptr %memberidx4.i.i54.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i53:                                   ; preds = %if.entry6
  %53 = shl i64 %52, 1
  store i64 %53, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %49, i64 0, i32 1
  %54 = load ptr, ptr %memberidx2.i.i.i, align 8
  %55 = shl i64 %52, 4
  %56 = tail call ptr @realloc(ptr %54, i64 %55)
  store ptr %56, ptr %memberidx2.i.i.i, align 8
  %.pre89 = load i64, ptr %memberidx.i.i51, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry6.TypeChecker_error.exit_crit_edge, %if.entry.i.i53
  %57 = phi ptr [ %.pre90, %if.entry6.TypeChecker_error.exit_crit_edge ], [ %56, %if.entry.i.i53 ]
  %58 = phi i64 [ %51, %if.entry6.TypeChecker_error.exit_crit_edge ], [ %.pre89, %if.entry.i.i53 ]
  %59 = add i64 %58, 1
  store i64 %59, ptr %memberidx.i.i51, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %57, i64 %58
  store ptr %50, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend8:                                           ; preds = %ifend4
  %memberidx10 = getelementptr inbounds %Expression, ptr %37, i64 0, i32 3
  %60 = load ptr, ptr %memberidx10, align 8
  %61 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr nonnull %35, ptr %60)
  br i1 %61, label %ifend13, label %if.entry11

if.entry11:                                       ; preds = %ifend8
  %62 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr nonnull %35)
  %63 = load ptr, ptr %62, align 8
  %memberidx14 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %63, i64 0, i32 5
  %64 = load ptr, ptr %memberidx14, align 8
  %65 = tail call ptr %64(ptr nonnull %62)
  %66 = load ptr, ptr %memberidx10, align 8
  %67 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %66)
  %68 = load ptr, ptr %67, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %68, i64 0, i32 5
  %69 = load ptr, ptr %memberidx16, align 8
  %70 = tail call ptr %69(ptr nonnull %67)
  %71 = alloca ptr, align 8
  %72 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %71, ptr nonnull @268, ptr %65, ptr %70)
  %73 = load ptr, ptr %71, align 8
  %74 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %74, align 8
  %memberidx.i55 = getelementptr inbounds %string, ptr %74, i64 0, i32 1
  store ptr %73, ptr %memberidx.i55, align 8
  %memberidx1.i56 = getelementptr inbounds %string, ptr %74, i64 0, i32 2
  store i64 %72, ptr %memberidx1.i56, align 4
  %memberidx2.i57 = getelementptr inbounds %string, ptr %74, i64 0, i32 3
  store i64 %72, ptr %memberidx2.i57, align 4
  tail call void @free(ptr %65)
  tail call void @free(ptr %70)
  %75 = load ptr, ptr %3, align 8
  %76 = load ptr, ptr %memberidx.i43, align 8
  %memberidx1.i59 = getelementptr inbounds %Compiler, ptr %76, i64 0, i32 6
  %77 = load ptr, ptr %memberidx1.i59, align 8
  %78 = call ptr @malloc(i32 24)
  store i64 5, ptr %78, align 4
  %memberidx1.i.i60 = getelementptr inbounds %FloError, ptr %78, i64 0, i32 2
  store ptr %75, ptr %memberidx1.i.i60, align 8
  %memberidx2.i.i61 = getelementptr inbounds %FloError, ptr %78, i64 0, i32 1
  store ptr %74, ptr %memberidx2.i.i61, align 8
  %memberidx.i.i62 = getelementptr inbounds %Array_FloError_, ptr %77, i64 0, i32 2
  %79 = load i64, ptr %memberidx.i.i62, align 4
  %memberidx1.i2.i63 = getelementptr inbounds %Array_FloError_, ptr %77, i64 0, i32 3
  %80 = load i64, ptr %memberidx1.i2.i63, align 4
  %.not.i.i64 = icmp slt i64 %79, %80
  br i1 %.not.i.i64, label %if.entry11.TypeChecker_error.exit70_crit_edge, label %if.entry.i.i67

if.entry11.TypeChecker_error.exit70_crit_edge:    ; preds = %if.entry11
  %memberidx4.i.i68.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %77, i64 0, i32 1
  %.pre88 = load ptr, ptr %memberidx4.i.i68.phi.trans.insert, align 8
  br label %TypeChecker_error.exit70

if.entry.i.i67:                                   ; preds = %if.entry11
  %81 = shl i64 %80, 1
  store i64 %81, ptr %memberidx1.i2.i63, align 4
  %memberidx2.i.i.i66 = getelementptr inbounds %Array_FloError_, ptr %77, i64 0, i32 1
  %82 = load ptr, ptr %memberidx2.i.i.i66, align 8
  %83 = shl i64 %80, 4
  %84 = call ptr @realloc(ptr %82, i64 %83)
  store ptr %84, ptr %memberidx2.i.i.i66, align 8
  %.pre = load i64, ptr %memberidx.i.i62, align 4
  br label %TypeChecker_error.exit70

TypeChecker_error.exit70:                         ; preds = %if.entry11.TypeChecker_error.exit70_crit_edge, %if.entry.i.i67
  %85 = phi ptr [ %.pre88, %if.entry11.TypeChecker_error.exit70_crit_edge ], [ %84, %if.entry.i.i67 ]
  %86 = phi i64 [ %79, %if.entry11.TypeChecker_error.exit70_crit_edge ], [ %.pre, %if.entry.i.i67 ]
  %87 = add i64 %86, 1
  store i64 %87, ptr %memberidx.i.i62, align 4
  %ptridx.i.i69 = getelementptr inbounds ptr, ptr %85, i64 %86
  store ptr %78, ptr %ptridx.i.i69, align 8
  br label %common.ret

ifend13:                                          ; preds = %ifend8
  store ptr %37, ptr %memberidx.i42, align 8
  br label %common.ret

if.entry20:                                       ; preds = %else
  %88 = tail call ptr @malloc(i32 256)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %88, ptr noundef nonnull align 8 dereferenceable(32) @269, i64 32, i1 false)
  %89 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %89, align 8
  %memberidx.i.i71 = getelementptr inbounds %string, ptr %89, i64 0, i32 1
  store ptr %88, ptr %memberidx.i.i71, align 8
  %memberidx1.i.i72 = getelementptr inbounds %string, ptr %89, i64 0, i32 2
  store i64 32, ptr %memberidx1.i.i72, align 4
  %memberidx2.i.i73 = getelementptr inbounds %string, ptr %89, i64 0, i32 3
  store i64 32, ptr %memberidx2.i.i73, align 4
  %90 = load ptr, ptr %1, align 8
  %memberidx.i74 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %91 = load ptr, ptr %memberidx.i74, align 8
  %memberidx1.i75 = getelementptr inbounds %Compiler, ptr %91, i64 0, i32 6
  %92 = load ptr, ptr %memberidx1.i75, align 8
  %93 = tail call ptr @malloc(i32 24)
  store i64 5, ptr %93, align 4
  %memberidx1.i.i76 = getelementptr inbounds %FloError, ptr %93, i64 0, i32 2
  store ptr %90, ptr %memberidx1.i.i76, align 8
  %memberidx2.i.i77 = getelementptr inbounds %FloError, ptr %93, i64 0, i32 1
  store ptr %89, ptr %memberidx2.i.i77, align 8
  %memberidx.i.i78 = getelementptr inbounds %Array_FloError_, ptr %92, i64 0, i32 2
  %94 = load i64, ptr %memberidx.i.i78, align 4
  %memberidx1.i2.i79 = getelementptr inbounds %Array_FloError_, ptr %92, i64 0, i32 3
  %95 = load i64, ptr %memberidx1.i2.i79, align 4
  %.not.i.i80 = icmp slt i64 %94, %95
  br i1 %.not.i.i80, label %if.entry20.TypeChecker_error.exit86_crit_edge, label %if.entry.i.i83

if.entry20.TypeChecker_error.exit86_crit_edge:    ; preds = %if.entry20
  %memberidx4.i.i84.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %92, i64 0, i32 1
  %.pre92 = load ptr, ptr %memberidx4.i.i84.phi.trans.insert, align 8
  br label %TypeChecker_error.exit86

if.entry.i.i83:                                   ; preds = %if.entry20
  %96 = shl i64 %95, 1
  store i64 %96, ptr %memberidx1.i2.i79, align 4
  %memberidx2.i.i.i82 = getelementptr inbounds %Array_FloError_, ptr %92, i64 0, i32 1
  %97 = load ptr, ptr %memberidx2.i.i.i82, align 8
  %98 = shl i64 %95, 4
  %99 = tail call ptr @realloc(ptr %97, i64 %98)
  store ptr %99, ptr %memberidx2.i.i.i82, align 8
  %.pre91 = load i64, ptr %memberidx.i.i78, align 4
  br label %TypeChecker_error.exit86

TypeChecker_error.exit86:                         ; preds = %if.entry20.TypeChecker_error.exit86_crit_edge, %if.entry.i.i83
  %100 = phi ptr [ %.pre92, %if.entry20.TypeChecker_error.exit86_crit_edge ], [ %99, %if.entry.i.i83 ]
  %101 = phi i64 [ %94, %if.entry20.TypeChecker_error.exit86_crit_edge ], [ %.pre91, %if.entry.i.i83 ]
  %102 = add i64 %101, 1
  store i64 %102, ptr %memberidx.i.i78, align 4
  %ptridx.i.i85 = getelementptr inbounds ptr, ptr %100, i64 %101
  store ptr %93, ptr %ptridx.i.i85, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_var_declaration(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %memberidx = getelementptr inbounds %VarDeclarationStatement, ptr %1, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %3, i64 0, i32 2
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = tail call fastcc ptr @TypeChecker_get_var_from_current_scope(ptr %0, ptr %4)
  %.not.i = icmp eq ptr %5, null
  br i1 %.not.i, label %ifend, label %if.entry.i

if.entry.i:                                       ; preds = %2
  %6 = load i64, ptr %5, align 4
  %7 = icmp eq i64 %6, 2
  br i1 %7, label %if.entry, label %ifend

common.ret:                                       ; preds = %end20, %end, %ifend54, %TypeChecker_error.exit170, %TypeChecker_error.exit154, %TypeChecker_error.exit138, %TypeChecker_error.exit118, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit118 ], [ null, %TypeChecker_error.exit138 ], [ null, %TypeChecker_error.exit154 ], [ null, %TypeChecker_error.exit170 ], [ %155, %ifend54 ], [ null, %end ], [ null, %end20 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %if.entry.i
  %8 = load ptr, ptr %4, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i64 0, i32 5
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = tail call ptr %9(ptr nonnull %4)
  %11 = alloca ptr, align 8
  %12 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %11, ptr nonnull @154, ptr %10)
  %13 = load ptr, ptr %11, align 8
  %14 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %14, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %14, i64 0, i32 1
  store ptr %13, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %14, i64 0, i32 2
  store i64 %12, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %14, i64 0, i32 3
  store i64 %12, ptr %memberidx2.i, align 4
  tail call void @free(ptr %10)
  %15 = load ptr, ptr %memberidx, align 8
  %memberidx4 = getelementptr inbounds %Token, ptr %15, i64 0, i32 1
  %16 = load ptr, ptr %memberidx4, align 8
  %memberidx.i94 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %17 = load ptr, ptr %memberidx.i94, align 8
  %memberidx1.i95 = getelementptr inbounds %Compiler, ptr %17, i64 0, i32 6
  %18 = load ptr, ptr %memberidx1.i95, align 8
  %19 = call ptr @malloc(i32 24)
  store i64 1, ptr %19, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %19, i64 0, i32 2
  store ptr %16, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %19, i64 0, i32 1
  store ptr %14, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 2
  %20 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 3
  %21 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %20, %21
  br i1 %.not.i.i, label %if.entry.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry.TypeChecker_error.exit_crit_edge:        ; preds = %if.entry
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 1
  %.pre177 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry
  %22 = shl i64 %21, 1
  store i64 %22, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 1
  %23 = load ptr, ptr %memberidx2.i.i.i, align 8
  %24 = shl i64 %21, 4
  %25 = call ptr @realloc(ptr %23, i64 %24)
  store ptr %25, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %26 = phi ptr [ %.pre177, %if.entry.TypeChecker_error.exit_crit_edge ], [ %25, %if.entry.i.i ]
  %27 = phi i64 [ %20, %if.entry.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %28 = add i64 %27, 1
  store i64 %28, ptr %memberidx.i.i, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %26, i64 %27
  store ptr %19, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend:                                            ; preds = %2, %if.entry.i
  %29 = load ptr, ptr %0, align 8
  %memberidx1.i96 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %30 = load ptr, ptr %memberidx1.i96, align 8
  %memberidx.i.i97 = getelementptr inbounds %Program, ptr %29, i64 0, i32 1
  %31 = load ptr, ptr %memberidx.i.i97, align 8
  %32 = load i64, ptr %30, align 4
  %memberidx.i.i.i98 = getelementptr inbounds %Array_Module_, ptr %31, i64 0, i32 1
  %33 = load ptr, ptr %memberidx.i.i.i98, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %33, i64 %32
  %34 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i99 = getelementptr inbounds %Module, ptr %34, i64 0, i32 7
  %35 = load ptr, ptr %memberidx2.i.i99, align 8
  %memberidx3.i.i = getelementptr inbounds %ScopeId, ptr %30, i64 0, i32 1
  %36 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %35, i64 0, i32 1
  %37 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %37, i64 %36
  %38 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx5 = getelementptr inbounds %VarDeclarationStatement, ptr %1, i64 0, i32 3
  %39 = load ptr, ptr %memberidx5, align 8
  %.not = icmp eq ptr %39, null
  br i1 %.not, label %false_block, label %true_block

true_block:                                       ; preds = %ifend
  %40 = tail call fastcc ptr @TypeChecker_check_type(ptr nonnull %0, ptr nonnull %39)
  br label %end

false_block:                                      ; preds = %ifend
  %41 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %41, align 4
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %40, %true_block ], [ %41, %false_block ]
  %memberidx.i100 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %42 = load ptr, ptr %memberidx.i100, align 8
  %memberidx1.i101 = getelementptr inbounds %Compiler, ptr %42, i64 0, i32 6
  %43 = load ptr, ptr %memberidx1.i101, align 8
  %memberidx2.i102 = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 2
  %44 = load i64, ptr %memberidx2.i102, align 4
  %45 = icmp sgt i64 %44, 0
  br i1 %45, label %common.ret, label %ifend9

ifend9:                                           ; preds = %end
  %memberidx10 = getelementptr inbounds %VarDeclarationStatement, ptr %1, i64 0, i32 4
  %46 = load ptr, ptr %memberidx10, align 8
  %47 = icmp eq ptr %46, null
  %48 = load i64, ptr %ternary, align 4
  %49 = icmp eq i64 %48, 21
  %50 = and i1 %47, %49
  br i1 %50, label %if.entry12, label %ifend14

if.entry12:                                       ; preds = %ifend9
  %51 = load ptr, ptr %4, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %51, i64 0, i32 5
  %52 = load ptr, ptr %memberidx15, align 8
  %53 = tail call ptr %52(ptr nonnull %4)
  %54 = alloca ptr, align 8
  %55 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %54, ptr nonnull @257, ptr %53)
  %56 = load ptr, ptr %54, align 8
  %57 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %57, align 8
  %memberidx.i103 = getelementptr inbounds %string, ptr %57, i64 0, i32 1
  store ptr %56, ptr %memberidx.i103, align 8
  %memberidx1.i104 = getelementptr inbounds %string, ptr %57, i64 0, i32 2
  store i64 %55, ptr %memberidx1.i104, align 4
  %memberidx2.i105 = getelementptr inbounds %string, ptr %57, i64 0, i32 3
  store i64 %55, ptr %memberidx2.i105, align 4
  tail call void @free(ptr %53)
  %58 = load ptr, ptr %memberidx, align 8
  %memberidx17 = getelementptr inbounds %Token, ptr %58, i64 0, i32 1
  %59 = load ptr, ptr %memberidx17, align 8
  %60 = load ptr, ptr %memberidx.i100, align 8
  %memberidx1.i107 = getelementptr inbounds %Compiler, ptr %60, i64 0, i32 6
  %61 = load ptr, ptr %memberidx1.i107, align 8
  %62 = call ptr @malloc(i32 24)
  store i64 4, ptr %62, align 4
  %memberidx1.i.i108 = getelementptr inbounds %FloError, ptr %62, i64 0, i32 2
  store ptr %59, ptr %memberidx1.i.i108, align 8
  %memberidx2.i.i109 = getelementptr inbounds %FloError, ptr %62, i64 0, i32 1
  store ptr %57, ptr %memberidx2.i.i109, align 8
  %memberidx.i.i110 = getelementptr inbounds %Array_FloError_, ptr %61, i64 0, i32 2
  %63 = load i64, ptr %memberidx.i.i110, align 4
  %memberidx1.i2.i111 = getelementptr inbounds %Array_FloError_, ptr %61, i64 0, i32 3
  %64 = load i64, ptr %memberidx1.i2.i111, align 4
  %.not.i.i112 = icmp slt i64 %63, %64
  br i1 %.not.i.i112, label %if.entry12.TypeChecker_error.exit118_crit_edge, label %if.entry.i.i115

if.entry12.TypeChecker_error.exit118_crit_edge:   ; preds = %if.entry12
  %memberidx4.i.i116.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %61, i64 0, i32 1
  %.pre188 = load ptr, ptr %memberidx4.i.i116.phi.trans.insert, align 8
  br label %TypeChecker_error.exit118

if.entry.i.i115:                                  ; preds = %if.entry12
  %65 = shl i64 %64, 1
  store i64 %65, ptr %memberidx1.i2.i111, align 4
  %memberidx2.i.i.i114 = getelementptr inbounds %Array_FloError_, ptr %61, i64 0, i32 1
  %66 = load ptr, ptr %memberidx2.i.i.i114, align 8
  %67 = shl i64 %64, 4
  %68 = call ptr @realloc(ptr %66, i64 %67)
  store ptr %68, ptr %memberidx2.i.i.i114, align 8
  %.pre187 = load i64, ptr %memberidx.i.i110, align 4
  br label %TypeChecker_error.exit118

TypeChecker_error.exit118:                        ; preds = %if.entry12.TypeChecker_error.exit118_crit_edge, %if.entry.i.i115
  %69 = phi ptr [ %.pre188, %if.entry12.TypeChecker_error.exit118_crit_edge ], [ %68, %if.entry.i.i115 ]
  %70 = phi i64 [ %63, %if.entry12.TypeChecker_error.exit118_crit_edge ], [ %.pre187, %if.entry.i.i115 ]
  %71 = add i64 %70, 1
  store i64 %71, ptr %memberidx.i.i110, align 4
  %ptridx.i.i117 = getelementptr inbounds ptr, ptr %69, i64 %70
  store ptr %62, ptr %ptridx.i.i117, align 8
  br label %common.ret

ifend14:                                          ; preds = %ifend9
  br i1 %47, label %ifend29, label %end20

end20:                                            ; preds = %ifend14
  %72 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr nonnull %ternary, ptr nonnull %46)
  %.pre178 = load ptr, ptr %memberidx.i100, align 8
  %memberidx1.i120.phi.trans.insert = getelementptr inbounds %Compiler, ptr %.pre178, i64 0, i32 6
  %.pre179 = load ptr, ptr %memberidx1.i120.phi.trans.insert, align 8
  %memberidx2.i121.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %.pre179, i64 0, i32 2
  %.pre180 = load i64, ptr %memberidx2.i121.phi.trans.insert, align 4
  %73 = icmp sgt i64 %.pre180, 0
  br i1 %73, label %common.ret, label %ifend26

ifend26:                                          ; preds = %end20
  %.not90 = icmp eq ptr %72, null
  br i1 %.not90, label %ifend29, label %if.entry27

if.entry27:                                       ; preds = %ifend26
  %memberidx.i122 = getelementptr inbounds %Expression, ptr %72, i64 0, i32 2
  %74 = load i64, ptr %memberidx.i122, align 4
  %75 = icmp eq i64 %74, 5
  %memberidx30 = getelementptr inbounds %Expression, ptr %72, i64 0, i32 3
  %76 = load ptr, ptr %memberidx30, align 8
  %77 = load i64, ptr %76, align 4
  %78 = icmp eq i64 %77, 21
  %79 = and i1 %75, %78
  br i1 %79, label %if.entry32, label %ifend34

ifend29:                                          ; preds = %ifend14, %if.entry46, %ifend40, %ifend26
  %ternary23190193 = phi ptr [ %72, %if.entry46 ], [ %72, %ifend40 ], [ null, %ifend26 ], [ null, %ifend14 ]
  %80 = phi ptr [ %132, %if.entry46 ], [ %ternary, %ifend40 ], [ %ternary, %ifend26 ], [ %ternary, %ifend14 ]
  %memberidx50 = getelementptr inbounds %Scope, ptr %38, i64 0, i32 1
  %81 = load ptr, ptr %memberidx50, align 8
  %82 = load ptr, ptr %81, align 8
  %memberidx51 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %82, i64 0, i32 1
  %83 = load ptr, ptr %memberidx51, align 8
  %84 = tail call ptr %83(ptr nonnull %81, ptr %4)
  %.not91 = icmp eq ptr %84, null
  br i1 %.not91, label %ifend54, label %if.entry52

if.entry32:                                       ; preds = %if.entry27
  %85 = tail call ptr @malloc(i32 552)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(69) %85, ptr noundef nonnull align 8 dereferenceable(69) @258, i64 69, i1 false)
  %86 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %86, align 8
  %memberidx.i.i123 = getelementptr inbounds %string, ptr %86, i64 0, i32 1
  store ptr %85, ptr %memberidx.i.i123, align 8
  %memberidx1.i.i124 = getelementptr inbounds %string, ptr %86, i64 0, i32 2
  store i64 69, ptr %memberidx1.i.i124, align 4
  %memberidx2.i.i125 = getelementptr inbounds %string, ptr %86, i64 0, i32 3
  store i64 69, ptr %memberidx2.i.i125, align 4
  %87 = load ptr, ptr %1, align 8
  %88 = load ptr, ptr %memberidx.i100, align 8
  %memberidx1.i127 = getelementptr inbounds %Compiler, ptr %88, i64 0, i32 6
  %89 = load ptr, ptr %memberidx1.i127, align 8
  %90 = tail call ptr @malloc(i32 24)
  store i64 5, ptr %90, align 4
  %memberidx1.i.i128 = getelementptr inbounds %FloError, ptr %90, i64 0, i32 2
  store ptr %87, ptr %memberidx1.i.i128, align 8
  %memberidx2.i.i129 = getelementptr inbounds %FloError, ptr %90, i64 0, i32 1
  store ptr %86, ptr %memberidx2.i.i129, align 8
  %memberidx.i.i130 = getelementptr inbounds %Array_FloError_, ptr %89, i64 0, i32 2
  %91 = load i64, ptr %memberidx.i.i130, align 4
  %memberidx1.i2.i131 = getelementptr inbounds %Array_FloError_, ptr %89, i64 0, i32 3
  %92 = load i64, ptr %memberidx1.i2.i131, align 4
  %.not.i.i132 = icmp slt i64 %91, %92
  br i1 %.not.i.i132, label %if.entry32.TypeChecker_error.exit138_crit_edge, label %if.entry.i.i135

if.entry32.TypeChecker_error.exit138_crit_edge:   ; preds = %if.entry32
  %memberidx4.i.i136.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %89, i64 0, i32 1
  %.pre184 = load ptr, ptr %memberidx4.i.i136.phi.trans.insert, align 8
  br label %TypeChecker_error.exit138

if.entry.i.i135:                                  ; preds = %if.entry32
  %93 = shl i64 %92, 1
  store i64 %93, ptr %memberidx1.i2.i131, align 4
  %memberidx2.i.i.i134 = getelementptr inbounds %Array_FloError_, ptr %89, i64 0, i32 1
  %94 = load ptr, ptr %memberidx2.i.i.i134, align 8
  %95 = shl i64 %92, 4
  %96 = tail call ptr @realloc(ptr %94, i64 %95)
  store ptr %96, ptr %memberidx2.i.i.i134, align 8
  %.pre183 = load i64, ptr %memberidx.i.i130, align 4
  br label %TypeChecker_error.exit138

TypeChecker_error.exit138:                        ; preds = %if.entry32.TypeChecker_error.exit138_crit_edge, %if.entry.i.i135
  %97 = phi ptr [ %.pre184, %if.entry32.TypeChecker_error.exit138_crit_edge ], [ %96, %if.entry.i.i135 ]
  %98 = phi i64 [ %91, %if.entry32.TypeChecker_error.exit138_crit_edge ], [ %.pre183, %if.entry.i.i135 ]
  %99 = add i64 %98, 1
  store i64 %99, ptr %memberidx.i.i130, align 4
  %ptridx.i.i137 = getelementptr inbounds ptr, ptr %97, i64 %98
  store ptr %90, ptr %ptridx.i.i137, align 8
  br label %common.ret

ifend34:                                          ; preds = %if.entry27
  %100 = load i64, ptr %ternary, align 4
  %101 = icmp eq i64 %100, 21
  %102 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr nonnull %ternary, ptr nonnull %76)
  %103 = or i1 %102, %101
  br i1 %103, label %ifend40, label %if.entry38

if.entry38:                                       ; preds = %ifend34
  %104 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr nonnull %ternary)
  %105 = load ptr, ptr %104, align 8
  %memberidx41 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %105, i64 0, i32 5
  %106 = load ptr, ptr %memberidx41, align 8
  %107 = tail call ptr %106(ptr nonnull %104)
  %108 = load ptr, ptr %memberidx30, align 8
  %109 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %108)
  %110 = load ptr, ptr %109, align 8
  %memberidx43 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %110, i64 0, i32 5
  %111 = load ptr, ptr %memberidx43, align 8
  %112 = tail call ptr %111(ptr nonnull %109)
  %113 = alloca ptr, align 8
  %114 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %113, ptr nonnull @259, ptr %107, ptr %112)
  %115 = load ptr, ptr %113, align 8
  %116 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %116, align 8
  %memberidx.i139 = getelementptr inbounds %string, ptr %116, i64 0, i32 1
  store ptr %115, ptr %memberidx.i139, align 8
  %memberidx1.i140 = getelementptr inbounds %string, ptr %116, i64 0, i32 2
  store i64 %114, ptr %memberidx1.i140, align 4
  %memberidx2.i141 = getelementptr inbounds %string, ptr %116, i64 0, i32 3
  store i64 %114, ptr %memberidx2.i141, align 4
  tail call void @free(ptr %107)
  tail call void @free(ptr %112)
  %117 = load ptr, ptr %1, align 8
  %118 = load ptr, ptr %memberidx.i100, align 8
  %memberidx1.i143 = getelementptr inbounds %Compiler, ptr %118, i64 0, i32 6
  %119 = load ptr, ptr %memberidx1.i143, align 8
  %120 = call ptr @malloc(i32 24)
  store i64 5, ptr %120, align 4
  %memberidx1.i.i144 = getelementptr inbounds %FloError, ptr %120, i64 0, i32 2
  store ptr %117, ptr %memberidx1.i.i144, align 8
  %memberidx2.i.i145 = getelementptr inbounds %FloError, ptr %120, i64 0, i32 1
  store ptr %116, ptr %memberidx2.i.i145, align 8
  %memberidx.i.i146 = getelementptr inbounds %Array_FloError_, ptr %119, i64 0, i32 2
  %121 = load i64, ptr %memberidx.i.i146, align 4
  %memberidx1.i2.i147 = getelementptr inbounds %Array_FloError_, ptr %119, i64 0, i32 3
  %122 = load i64, ptr %memberidx1.i2.i147, align 4
  %.not.i.i148 = icmp slt i64 %121, %122
  br i1 %.not.i.i148, label %if.entry38.TypeChecker_error.exit154_crit_edge, label %if.entry.i.i151

if.entry38.TypeChecker_error.exit154_crit_edge:   ; preds = %if.entry38
  %memberidx4.i.i152.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %119, i64 0, i32 1
  %.pre182 = load ptr, ptr %memberidx4.i.i152.phi.trans.insert, align 8
  br label %TypeChecker_error.exit154

if.entry.i.i151:                                  ; preds = %if.entry38
  %123 = shl i64 %122, 1
  store i64 %123, ptr %memberidx1.i2.i147, align 4
  %memberidx2.i.i.i150 = getelementptr inbounds %Array_FloError_, ptr %119, i64 0, i32 1
  %124 = load ptr, ptr %memberidx2.i.i.i150, align 8
  %125 = shl i64 %122, 4
  %126 = call ptr @realloc(ptr %124, i64 %125)
  store ptr %126, ptr %memberidx2.i.i.i150, align 8
  %.pre181 = load i64, ptr %memberidx.i.i146, align 4
  br label %TypeChecker_error.exit154

TypeChecker_error.exit154:                        ; preds = %if.entry38.TypeChecker_error.exit154_crit_edge, %if.entry.i.i151
  %127 = phi ptr [ %.pre182, %if.entry38.TypeChecker_error.exit154_crit_edge ], [ %126, %if.entry.i.i151 ]
  %128 = phi i64 [ %121, %if.entry38.TypeChecker_error.exit154_crit_edge ], [ %.pre181, %if.entry.i.i151 ]
  %129 = add i64 %128, 1
  store i64 %129, ptr %memberidx.i.i146, align 4
  %ptridx.i.i153 = getelementptr inbounds ptr, ptr %127, i64 %128
  store ptr %120, ptr %ptridx.i.i153, align 8
  br label %common.ret

ifend40:                                          ; preds = %ifend34
  %130 = load i64, ptr %ternary, align 4
  %131 = icmp eq i64 %130, 21
  br i1 %131, label %if.entry46, label %ifend29

if.entry46:                                       ; preds = %ifend40
  %132 = load ptr, ptr %memberidx30, align 8
  br label %ifend29

if.entry52:                                       ; preds = %ifend29
  %133 = load ptr, ptr %4, align 8
  %memberidx55 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %133, i64 0, i32 5
  %134 = load ptr, ptr %memberidx55, align 8
  %135 = tail call ptr %134(ptr nonnull %4)
  %136 = alloca ptr, align 8
  %137 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %136, ptr nonnull @260, ptr %135)
  %138 = load ptr, ptr %136, align 8
  %139 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %139, align 8
  %memberidx.i155 = getelementptr inbounds %string, ptr %139, i64 0, i32 1
  store ptr %138, ptr %memberidx.i155, align 8
  %memberidx1.i156 = getelementptr inbounds %string, ptr %139, i64 0, i32 2
  store i64 %137, ptr %memberidx1.i156, align 4
  %memberidx2.i157 = getelementptr inbounds %string, ptr %139, i64 0, i32 3
  store i64 %137, ptr %memberidx2.i157, align 4
  tail call void @free(ptr %135)
  %140 = load ptr, ptr %memberidx, align 8
  %memberidx57 = getelementptr inbounds %Token, ptr %140, i64 0, i32 1
  %141 = load ptr, ptr %memberidx57, align 8
  %142 = load ptr, ptr %memberidx.i100, align 8
  %memberidx1.i159 = getelementptr inbounds %Compiler, ptr %142, i64 0, i32 6
  %143 = load ptr, ptr %memberidx1.i159, align 8
  %144 = call ptr @malloc(i32 24)
  store i64 1, ptr %144, align 4
  %memberidx1.i.i160 = getelementptr inbounds %FloError, ptr %144, i64 0, i32 2
  store ptr %141, ptr %memberidx1.i.i160, align 8
  %memberidx2.i.i161 = getelementptr inbounds %FloError, ptr %144, i64 0, i32 1
  store ptr %139, ptr %memberidx2.i.i161, align 8
  %memberidx.i.i162 = getelementptr inbounds %Array_FloError_, ptr %143, i64 0, i32 2
  %145 = load i64, ptr %memberidx.i.i162, align 4
  %memberidx1.i2.i163 = getelementptr inbounds %Array_FloError_, ptr %143, i64 0, i32 3
  %146 = load i64, ptr %memberidx1.i2.i163, align 4
  %.not.i.i164 = icmp slt i64 %145, %146
  br i1 %.not.i.i164, label %if.entry52.TypeChecker_error.exit170_crit_edge, label %if.entry.i.i167

if.entry52.TypeChecker_error.exit170_crit_edge:   ; preds = %if.entry52
  %memberidx4.i.i168.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %143, i64 0, i32 1
  %.pre186 = load ptr, ptr %memberidx4.i.i168.phi.trans.insert, align 8
  br label %TypeChecker_error.exit170

if.entry.i.i167:                                  ; preds = %if.entry52
  %147 = shl i64 %146, 1
  store i64 %147, ptr %memberidx1.i2.i163, align 4
  %memberidx2.i.i.i166 = getelementptr inbounds %Array_FloError_, ptr %143, i64 0, i32 1
  %148 = load ptr, ptr %memberidx2.i.i.i166, align 8
  %149 = shl i64 %146, 4
  %150 = call ptr @realloc(ptr %148, i64 %149)
  store ptr %150, ptr %memberidx2.i.i.i166, align 8
  %.pre185 = load i64, ptr %memberidx.i.i162, align 4
  br label %TypeChecker_error.exit170

TypeChecker_error.exit170:                        ; preds = %if.entry52.TypeChecker_error.exit170_crit_edge, %if.entry.i.i167
  %151 = phi ptr [ %.pre186, %if.entry52.TypeChecker_error.exit170_crit_edge ], [ %150, %if.entry.i.i167 ]
  %152 = phi i64 [ %145, %if.entry52.TypeChecker_error.exit170_crit_edge ], [ %.pre185, %if.entry.i.i167 ]
  %153 = add i64 %152, 1
  store i64 %153, ptr %memberidx.i.i162, align 4
  %ptridx.i.i169 = getelementptr inbounds ptr, ptr %151, i64 %152
  store ptr %144, ptr %ptridx.i.i169, align 8
  br label %common.ret

ifend54:                                          ; preds = %ifend29
  %154 = tail call fastcc ptr @TypeChecker_declare_var_within_current_scope(ptr nonnull %0, ptr %4, ptr %ternary23190193, ptr %80)
  %155 = tail call ptr @malloc(i32 25)
  %memberidx58 = getelementptr inbounds %Var, ptr %154, i64 0, i32 1
  %156 = load ptr, ptr %memberidx58, align 8
  store i64 1, ptr %155, align 4
  %memberidx.i171 = getelementptr inbounds %VarDeclaration, ptr %155, i64 0, i32 2
  store ptr %156, ptr %memberidx.i171, align 8
  %memberidx1.i172 = getelementptr inbounds %VarDeclaration, ptr %155, i64 0, i32 1
  store ptr %4, ptr %memberidx1.i172, align 8
  %memberidx2.i173 = getelementptr inbounds %VarDeclaration, ptr %155, i64 0, i32 3
  store i1 false, ptr %memberidx2.i173, align 1
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_const_declaration(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %memberidx = getelementptr inbounds %ConstDeclarationStatement, ptr %1, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %3, i64 0, i32 2
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = load ptr, ptr %0, align 8
  %memberidx1.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %6 = load ptr, ptr %memberidx1.i, align 8
  %memberidx.i.i = getelementptr inbounds %Program, ptr %5, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i.i, align 8
  %8 = load i64, ptr %6, align 4
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %7, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %9, i64 %8
  %10 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %Module, ptr %10, i64 0, i32 7
  %11 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ScopeId, ptr %6, i64 0, i32 1
  %12 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i6.i.i, align 8
  %15 = tail call fastcc ptr @TypeChecker_get_var_from_current_scope(ptr nonnull %0, ptr %4)
  %.not.i = icmp eq ptr %15, null
  br i1 %.not.i, label %TypeChecker_is_constant_in_scope.exit, label %if.entry.i

if.entry.i:                                       ; preds = %2
  %16 = load i64, ptr %15, align 4
  %17 = icmp eq i64 %16, 2
  br label %TypeChecker_is_constant_in_scope.exit

TypeChecker_is_constant_in_scope.exit:            ; preds = %2, %if.entry.i
  %is_constant.0.i = phi i1 [ %17, %if.entry.i ], [ false, %2 ]
  %memberidx2 = getelementptr inbounds %Scope, ptr %14, i64 0, i32 1
  %18 = load ptr, ptr %memberidx2, align 8
  %19 = load ptr, ptr %18, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %19, i64 0, i32 1
  %20 = load ptr, ptr %memberidx3, align 8
  %21 = tail call ptr %20(ptr nonnull %18, ptr %4)
  %22 = icmp ne ptr %21, null
  %23 = or i1 %is_constant.0.i, %22
  br i1 %23, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend11, %end, %ifend31, %TypeChecker_error.exit121, %TypeChecker_error.exit105, %TypeChecker_error.exit88, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit88 ], [ null, %TypeChecker_error.exit105 ], [ null, %TypeChecker_error.exit121 ], [ %126, %ifend31 ], [ null, %end ], [ null, %ifend11 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %TypeChecker_is_constant_in_scope.exit
  %24 = load ptr, ptr %4, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %24, i64 0, i32 5
  %25 = load ptr, ptr %memberidx4, align 8
  %26 = tail call ptr %25(ptr nonnull %4)
  %27 = alloca ptr, align 8
  %28 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %27, ptr nonnull @154, ptr %26)
  %29 = load ptr, ptr %27, align 8
  %30 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %30, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %30, i64 0, i32 1
  store ptr %29, ptr %memberidx.i, align 8
  %memberidx1.i61 = getelementptr inbounds %string, ptr %30, i64 0, i32 2
  store i64 %28, ptr %memberidx1.i61, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %30, i64 0, i32 3
  store i64 %28, ptr %memberidx2.i, align 4
  tail call void @free(ptr %26)
  %31 = load ptr, ptr %memberidx, align 8
  %memberidx6 = getelementptr inbounds %Token, ptr %31, i64 0, i32 1
  %32 = load ptr, ptr %memberidx6, align 8
  %memberidx.i62 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %33 = load ptr, ptr %memberidx.i62, align 8
  %memberidx1.i63 = getelementptr inbounds %Compiler, ptr %33, i64 0, i32 6
  %34 = load ptr, ptr %memberidx1.i63, align 8
  %35 = call ptr @malloc(i32 24)
  store i64 1, ptr %35, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %35, i64 0, i32 2
  store ptr %32, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i64 = getelementptr inbounds %FloError, ptr %35, i64 0, i32 1
  store ptr %30, ptr %memberidx2.i.i64, align 8
  %memberidx.i.i65 = getelementptr inbounds %Array_FloError_, ptr %34, i64 0, i32 2
  %36 = load i64, ptr %memberidx.i.i65, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %34, i64 0, i32 3
  %37 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %36, %37
  br i1 %.not.i.i, label %if.entry.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry.TypeChecker_error.exit_crit_edge:        ; preds = %if.entry
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %34, i64 0, i32 1
  %.pre133 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry
  %38 = shl i64 %37, 1
  store i64 %38, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %34, i64 0, i32 1
  %39 = load ptr, ptr %memberidx2.i.i.i, align 8
  %40 = shl i64 %37, 4
  %41 = call ptr @realloc(ptr %39, i64 %40)
  store ptr %41, ptr %memberidx2.i.i.i, align 8
  %.pre132 = load i64, ptr %memberidx.i.i65, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %42 = phi ptr [ %.pre133, %if.entry.TypeChecker_error.exit_crit_edge ], [ %41, %if.entry.i.i ]
  %43 = phi i64 [ %36, %if.entry.TypeChecker_error.exit_crit_edge ], [ %.pre132, %if.entry.i.i ]
  %44 = add i64 %43, 1
  store i64 %44, ptr %memberidx.i.i65, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %42, i64 %43
  store ptr %35, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend:                                            ; preds = %TypeChecker_is_constant_in_scope.exit
  %memberidx7 = getelementptr inbounds %ConstDeclarationStatement, ptr %1, i64 0, i32 3
  %45 = load ptr, ptr %memberidx7, align 8
  %.not = icmp eq ptr %45, null
  br i1 %.not, label %false_block, label %true_block

true_block:                                       ; preds = %ifend
  %46 = tail call fastcc ptr @TypeChecker_check_type(ptr nonnull %0, ptr nonnull %45)
  br label %end

false_block:                                      ; preds = %ifend
  %47 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %47, align 4
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %46, %true_block ], [ %47, %false_block ]
  %memberidx.i67 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %48 = load ptr, ptr %memberidx.i67, align 8
  %memberidx1.i68 = getelementptr inbounds %Compiler, ptr %48, i64 0, i32 6
  %49 = load ptr, ptr %memberidx1.i68, align 8
  %memberidx2.i69 = getelementptr inbounds %Array_FloError_, ptr %49, i64 0, i32 2
  %50 = load i64, ptr %memberidx2.i69, align 4
  %51 = icmp sgt i64 %50, 0
  br i1 %51, label %common.ret, label %ifend11

ifend11:                                          ; preds = %end
  %memberidx12 = getelementptr inbounds %ConstDeclarationStatement, ptr %1, i64 0, i32 4
  %52 = load ptr, ptr %memberidx12, align 8
  %53 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %ternary, ptr %52)
  %54 = load ptr, ptr %memberidx.i67, align 8
  %memberidx1.i71 = getelementptr inbounds %Compiler, ptr %54, i64 0, i32 6
  %55 = load ptr, ptr %memberidx1.i71, align 8
  %memberidx2.i72 = getelementptr inbounds %Array_FloError_, ptr %55, i64 0, i32 2
  %56 = load i64, ptr %memberidx2.i72, align 4
  %57 = icmp sgt i64 %56, 0
  br i1 %57, label %common.ret, label %ifend15

ifend15:                                          ; preds = %ifend11
  %memberidx16 = getelementptr inbounds %Expression, ptr %53, i64 0, i32 1
  %58 = load i1, ptr %memberidx16, align 1
  br i1 %58, label %ifend19, label %if.entry17

if.entry17:                                       ; preds = %ifend15
  %59 = tail call ptr @malloc(i32 384)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %59, ptr noundef nonnull align 8 dereferenceable(48) @261, i64 48, i1 false)
  %60 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %60, align 8
  %memberidx.i.i73 = getelementptr inbounds %string, ptr %60, i64 0, i32 1
  store ptr %59, ptr %memberidx.i.i73, align 8
  %memberidx1.i.i74 = getelementptr inbounds %string, ptr %60, i64 0, i32 2
  store i64 48, ptr %memberidx1.i.i74, align 4
  %memberidx2.i.i75 = getelementptr inbounds %string, ptr %60, i64 0, i32 3
  store i64 48, ptr %memberidx2.i.i75, align 4
  %61 = load ptr, ptr %memberidx12, align 8
  %62 = load ptr, ptr %61, align 8
  %63 = load ptr, ptr %memberidx.i67, align 8
  %memberidx1.i77 = getelementptr inbounds %Compiler, ptr %63, i64 0, i32 6
  %64 = load ptr, ptr %memberidx1.i77, align 8
  %65 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %65, align 4
  %memberidx1.i.i78 = getelementptr inbounds %FloError, ptr %65, i64 0, i32 2
  store ptr %62, ptr %memberidx1.i.i78, align 8
  %memberidx2.i.i79 = getelementptr inbounds %FloError, ptr %65, i64 0, i32 1
  store ptr %60, ptr %memberidx2.i.i79, align 8
  %memberidx.i.i80 = getelementptr inbounds %Array_FloError_, ptr %64, i64 0, i32 2
  %66 = load i64, ptr %memberidx.i.i80, align 4
  %memberidx1.i2.i81 = getelementptr inbounds %Array_FloError_, ptr %64, i64 0, i32 3
  %67 = load i64, ptr %memberidx1.i2.i81, align 4
  %.not.i.i82 = icmp slt i64 %66, %67
  br i1 %.not.i.i82, label %if.entry17.TypeChecker_error.exit88_crit_edge, label %if.entry.i.i85

if.entry17.TypeChecker_error.exit88_crit_edge:    ; preds = %if.entry17
  %memberidx4.i.i86.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %64, i64 0, i32 1
  %.pre127 = load ptr, ptr %memberidx4.i.i86.phi.trans.insert, align 8
  br label %TypeChecker_error.exit88

if.entry.i.i85:                                   ; preds = %if.entry17
  %68 = shl i64 %67, 1
  store i64 %68, ptr %memberidx1.i2.i81, align 4
  %memberidx2.i.i.i84 = getelementptr inbounds %Array_FloError_, ptr %64, i64 0, i32 1
  %69 = load ptr, ptr %memberidx2.i.i.i84, align 8
  %70 = shl i64 %67, 4
  %71 = tail call ptr @realloc(ptr %69, i64 %70)
  store ptr %71, ptr %memberidx2.i.i.i84, align 8
  %.pre = load i64, ptr %memberidx.i.i80, align 4
  br label %TypeChecker_error.exit88

TypeChecker_error.exit88:                         ; preds = %if.entry17.TypeChecker_error.exit88_crit_edge, %if.entry.i.i85
  %72 = phi ptr [ %.pre127, %if.entry17.TypeChecker_error.exit88_crit_edge ], [ %71, %if.entry.i.i85 ]
  %73 = phi i64 [ %66, %if.entry17.TypeChecker_error.exit88_crit_edge ], [ %.pre, %if.entry.i.i85 ]
  %74 = add i64 %73, 1
  store i64 %74, ptr %memberidx.i.i80, align 4
  %ptridx.i.i87 = getelementptr inbounds ptr, ptr %72, i64 %73
  store ptr %65, ptr %ptridx.i.i87, align 8
  br label %common.ret

ifend19:                                          ; preds = %ifend15
  %memberidx.i89 = getelementptr inbounds %Expression, ptr %53, i64 0, i32 2
  %75 = load i64, ptr %memberidx.i89, align 4
  %76 = icmp eq i64 %75, 5
  %77 = load i64, ptr %ternary, align 4
  %78 = icmp eq i64 %77, 21
  %79 = and i1 %76, %78
  br i1 %79, label %if.entry23, label %ifend25

if.entry23:                                       ; preds = %ifend19
  %80 = tail call ptr @malloc(i32 552)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(69) %80, ptr noundef nonnull align 8 dereferenceable(69) @258, i64 69, i1 false)
  %81 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %81, align 8
  %memberidx.i.i90 = getelementptr inbounds %string, ptr %81, i64 0, i32 1
  store ptr %80, ptr %memberidx.i.i90, align 8
  %memberidx1.i.i91 = getelementptr inbounds %string, ptr %81, i64 0, i32 2
  store i64 69, ptr %memberidx1.i.i91, align 4
  %memberidx2.i.i92 = getelementptr inbounds %string, ptr %81, i64 0, i32 3
  store i64 69, ptr %memberidx2.i.i92, align 4
  %82 = load ptr, ptr %1, align 8
  %83 = load ptr, ptr %memberidx.i67, align 8
  %memberidx1.i94 = getelementptr inbounds %Compiler, ptr %83, i64 0, i32 6
  %84 = load ptr, ptr %memberidx1.i94, align 8
  %85 = tail call ptr @malloc(i32 24)
  store i64 5, ptr %85, align 4
  %memberidx1.i.i95 = getelementptr inbounds %FloError, ptr %85, i64 0, i32 2
  store ptr %82, ptr %memberidx1.i.i95, align 8
  %memberidx2.i.i96 = getelementptr inbounds %FloError, ptr %85, i64 0, i32 1
  store ptr %81, ptr %memberidx2.i.i96, align 8
  %memberidx.i.i97 = getelementptr inbounds %Array_FloError_, ptr %84, i64 0, i32 2
  %86 = load i64, ptr %memberidx.i.i97, align 4
  %memberidx1.i2.i98 = getelementptr inbounds %Array_FloError_, ptr %84, i64 0, i32 3
  %87 = load i64, ptr %memberidx1.i2.i98, align 4
  %.not.i.i99 = icmp slt i64 %86, %87
  br i1 %.not.i.i99, label %if.entry23.TypeChecker_error.exit105_crit_edge, label %if.entry.i.i102

if.entry23.TypeChecker_error.exit105_crit_edge:   ; preds = %if.entry23
  %memberidx4.i.i103.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %84, i64 0, i32 1
  %.pre131 = load ptr, ptr %memberidx4.i.i103.phi.trans.insert, align 8
  br label %TypeChecker_error.exit105

if.entry.i.i102:                                  ; preds = %if.entry23
  %88 = shl i64 %87, 1
  store i64 %88, ptr %memberidx1.i2.i98, align 4
  %memberidx2.i.i.i101 = getelementptr inbounds %Array_FloError_, ptr %84, i64 0, i32 1
  %89 = load ptr, ptr %memberidx2.i.i.i101, align 8
  %90 = shl i64 %87, 4
  %91 = tail call ptr @realloc(ptr %89, i64 %90)
  store ptr %91, ptr %memberidx2.i.i.i101, align 8
  %.pre130 = load i64, ptr %memberidx.i.i97, align 4
  br label %TypeChecker_error.exit105

TypeChecker_error.exit105:                        ; preds = %if.entry23.TypeChecker_error.exit105_crit_edge, %if.entry.i.i102
  %92 = phi ptr [ %.pre131, %if.entry23.TypeChecker_error.exit105_crit_edge ], [ %91, %if.entry.i.i102 ]
  %93 = phi i64 [ %86, %if.entry23.TypeChecker_error.exit105_crit_edge ], [ %.pre130, %if.entry.i.i102 ]
  %94 = add i64 %93, 1
  store i64 %94, ptr %memberidx.i.i97, align 4
  %ptridx.i.i104 = getelementptr inbounds ptr, ptr %92, i64 %93
  store ptr %85, ptr %ptridx.i.i104, align 8
  br label %common.ret

ifend25:                                          ; preds = %ifend19
  %95 = icmp ne i64 %77, 21
  %memberidx28 = getelementptr inbounds %Expression, ptr %53, i64 0, i32 3
  %96 = load ptr, ptr %memberidx28, align 8
  %97 = icmp ne ptr %ternary, %96
  %98 = and i1 %95, %97
  br i1 %98, label %if.entry29, label %ifend31

if.entry29:                                       ; preds = %ifend25
  %99 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr nonnull %ternary)
  %100 = load ptr, ptr %99, align 8
  %memberidx32 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %100, i64 0, i32 5
  %101 = load ptr, ptr %memberidx32, align 8
  %102 = tail call ptr %101(ptr nonnull %99)
  %103 = load ptr, ptr %memberidx28, align 8
  %104 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %103)
  %105 = load ptr, ptr %104, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %105, i64 0, i32 5
  %106 = load ptr, ptr %memberidx34, align 8
  %107 = tail call ptr %106(ptr nonnull %104)
  %108 = alloca ptr, align 8
  %109 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %108, ptr nonnull @259, ptr %102, ptr %107)
  %110 = load ptr, ptr %108, align 8
  %111 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %111, align 8
  %memberidx.i106 = getelementptr inbounds %string, ptr %111, i64 0, i32 1
  store ptr %110, ptr %memberidx.i106, align 8
  %memberidx1.i107 = getelementptr inbounds %string, ptr %111, i64 0, i32 2
  store i64 %109, ptr %memberidx1.i107, align 4
  %memberidx2.i108 = getelementptr inbounds %string, ptr %111, i64 0, i32 3
  store i64 %109, ptr %memberidx2.i108, align 4
  tail call void @free(ptr %102)
  tail call void @free(ptr %107)
  %112 = load ptr, ptr %1, align 8
  %113 = load ptr, ptr %memberidx.i67, align 8
  %memberidx1.i110 = getelementptr inbounds %Compiler, ptr %113, i64 0, i32 6
  %114 = load ptr, ptr %memberidx1.i110, align 8
  %115 = call ptr @malloc(i32 24)
  store i64 5, ptr %115, align 4
  %memberidx1.i.i111 = getelementptr inbounds %FloError, ptr %115, i64 0, i32 2
  store ptr %112, ptr %memberidx1.i.i111, align 8
  %memberidx2.i.i112 = getelementptr inbounds %FloError, ptr %115, i64 0, i32 1
  store ptr %111, ptr %memberidx2.i.i112, align 8
  %memberidx.i.i113 = getelementptr inbounds %Array_FloError_, ptr %114, i64 0, i32 2
  %116 = load i64, ptr %memberidx.i.i113, align 4
  %memberidx1.i2.i114 = getelementptr inbounds %Array_FloError_, ptr %114, i64 0, i32 3
  %117 = load i64, ptr %memberidx1.i2.i114, align 4
  %.not.i.i115 = icmp slt i64 %116, %117
  br i1 %.not.i.i115, label %if.entry29.TypeChecker_error.exit121_crit_edge, label %if.entry.i.i118

if.entry29.TypeChecker_error.exit121_crit_edge:   ; preds = %if.entry29
  %memberidx4.i.i119.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %114, i64 0, i32 1
  %.pre129 = load ptr, ptr %memberidx4.i.i119.phi.trans.insert, align 8
  br label %TypeChecker_error.exit121

if.entry.i.i118:                                  ; preds = %if.entry29
  %118 = shl i64 %117, 1
  store i64 %118, ptr %memberidx1.i2.i114, align 4
  %memberidx2.i.i.i117 = getelementptr inbounds %Array_FloError_, ptr %114, i64 0, i32 1
  %119 = load ptr, ptr %memberidx2.i.i.i117, align 8
  %120 = shl i64 %117, 4
  %121 = call ptr @realloc(ptr %119, i64 %120)
  store ptr %121, ptr %memberidx2.i.i.i117, align 8
  %.pre128 = load i64, ptr %memberidx.i.i113, align 4
  br label %TypeChecker_error.exit121

TypeChecker_error.exit121:                        ; preds = %if.entry29.TypeChecker_error.exit121_crit_edge, %if.entry.i.i118
  %122 = phi ptr [ %.pre129, %if.entry29.TypeChecker_error.exit121_crit_edge ], [ %121, %if.entry.i.i118 ]
  %123 = phi i64 [ %116, %if.entry29.TypeChecker_error.exit121_crit_edge ], [ %.pre128, %if.entry.i.i118 ]
  %124 = add i64 %123, 1
  store i64 %124, ptr %memberidx.i.i113, align 4
  %ptridx.i.i120 = getelementptr inbounds ptr, ptr %122, i64 %123
  store ptr %115, ptr %ptridx.i.i120, align 8
  br label %common.ret

ifend31:                                          ; preds = %ifend25
  %125 = tail call fastcc ptr @TypeChecker_declare_const_within_current_scope(ptr nonnull %0, ptr %4, ptr nonnull %53, ptr %96)
  %126 = tail call ptr @malloc(i32 25)
  %memberidx37 = getelementptr inbounds %Const, ptr %125, i64 0, i32 1
  %127 = load ptr, ptr %memberidx37, align 8
  store i64 2, ptr %126, align 4
  %memberidx.i122 = getelementptr inbounds %ConstDeclaration, ptr %126, i64 0, i32 2
  store ptr %127, ptr %memberidx.i122, align 8
  %memberidx1.i123 = getelementptr inbounds %ConstDeclaration, ptr %126, i64 0, i32 1
  store ptr %4, ptr %memberidx1.i123, align 8
  %memberidx2.i124 = getelementptr inbounds %ConstDeclaration, ptr %126, i64 0, i32 3
  store i1 false, ptr %memberidx2.i124, align 1
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_get_var_from_current_scope(ptr nocapture %0, ptr %1) unnamed_addr {
  %3 = load ptr, ptr %0, align 8
  %memberidx1.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %4 = load ptr, ptr %memberidx1.i, align 8
  %memberidx.i.i = getelementptr inbounds %Program, ptr %3, i64 0, i32 1
  %5 = load ptr, ptr %memberidx.i.i, align 8
  %6 = load i64, ptr %4, align 4
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %5, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %7, i64 %6
  %8 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %Module, ptr %8, i64 0, i32 7
  %9 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ScopeId, ptr %4, i64 0, i32 1
  %10 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %9, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %11, i64 %10
  %current_scope.0128 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx129 = getelementptr inbounds %Scope, ptr %current_scope.0128, i64 0, i32 1
  %12 = load ptr, ptr %memberidx129, align 8
  %13 = load ptr, ptr %12, align 8
  %memberidx1130 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %13, i64 0, i32 1
  %14 = load ptr, ptr %memberidx1130, align 8
  %15 = tail call ptr %14(ptr nonnull %12, ptr %1)
  %16 = icmp eq ptr %15, null
  br i1 %16, label %ifend, label %ifend14

while.end:                                        ; preds = %ifend
  %17 = icmp eq ptr %25, null
  %18 = load ptr, ptr %memberidx1.i, align 8
  %19 = load i64, ptr %18, align 4
  %20 = icmp ne i64 %19, 0
  %21 = and i1 %17, %20
  br i1 %21, label %if.entry12, label %ifend14

ifend:                                            ; preds = %2, %ifend7
  %current_scope.0131 = phi ptr [ %current_scope.0, %ifend7 ], [ %current_scope.0128, %2 ]
  %memberidx2 = getelementptr inbounds %Scope, ptr %current_scope.0131, i64 0, i32 3
  %22 = load ptr, ptr %memberidx2, align 8
  %23 = load ptr, ptr %22, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %23, i64 0, i32 1
  %24 = load ptr, ptr %memberidx3, align 8
  %25 = tail call ptr %24(ptr nonnull %22, ptr %1)
  %memberidx4 = getelementptr inbounds %Scope, ptr %current_scope.0131, i64 0, i32 5
  %26 = load ptr, ptr %memberidx4, align 8
  %27 = icmp eq ptr %26, null
  %28 = icmp ne ptr %25, null
  %29 = or i1 %28, %27
  br i1 %29, label %while.end, label %ifend7

ifend7:                                           ; preds = %ifend
  %30 = load ptr, ptr %0, align 8
  %memberidx.i = getelementptr inbounds %Program, ptr %30, i64 0, i32 1
  %31 = load ptr, ptr %memberidx.i, align 8
  %32 = load i64, ptr %26, align 4
  %memberidx.i.i80 = getelementptr inbounds %Array_Module_, ptr %31, i64 0, i32 1
  %33 = load ptr, ptr %memberidx.i.i80, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %33, i64 %32
  %34 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %34, i64 0, i32 7
  %35 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %ScopeId, ptr %26, i64 0, i32 1
  %36 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Scope_, ptr %35, i64 0, i32 1
  %37 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %37, i64 %36
  %current_scope.0 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx = getelementptr inbounds %Scope, ptr %current_scope.0, i64 0, i32 1
  %38 = load ptr, ptr %memberidx, align 8
  %39 = load ptr, ptr %38, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %39, i64 0, i32 1
  %40 = load ptr, ptr %memberidx1, align 8
  %41 = tail call ptr %40(ptr nonnull %38, ptr %1)
  %42 = icmp eq ptr %41, null
  br i1 %42, label %ifend, label %ifend14

if.entry12:                                       ; preds = %while.end
  %43 = load ptr, ptr %0, align 8
  %memberidx18 = getelementptr inbounds %Program, ptr %43, i64 0, i32 1
  %44 = load ptr, ptr %memberidx18, align 8
  %memberidx.i83 = getelementptr inbounds %Array_Module_, ptr %44, i64 0, i32 1
  %45 = load ptr, ptr %memberidx.i83, align 8
  %46 = load ptr, ptr %45, align 8
  %memberidx19 = getelementptr inbounds %Module, ptr %46, i64 0, i32 7
  %47 = load ptr, ptr %memberidx19, align 8
  %memberidx.i90 = getelementptr inbounds %Array_Scope_, ptr %47, i64 0, i32 1
  %48 = load ptr, ptr %memberidx.i90, align 8
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %49, align 8
  store ptr %50, ptr %memberidx1.i, align 8
  %51 = tail call fastcc ptr @TypeChecker_get_var_from_current_scope(ptr nonnull %0, ptr %1)
  store ptr %18, ptr %memberidx1.i, align 8
  %.not = icmp eq ptr %51, null
  br i1 %.not, label %ifend14, label %if.entry22

ifend14:                                          ; preds = %ifend7, %2, %if.entry41, %ifend39, %if.entry12, %while.end
  %value.2 = phi ptr [ %51, %if.entry41 ], [ %51, %ifend39 ], [ null, %if.entry12 ], [ %25, %while.end ], [ %15, %2 ], [ %41, %ifend7 ]
  ret ptr %value.2

if.entry22:                                       ; preds = %if.entry12
  %52 = load ptr, ptr %0, align 8
  store i1 true, ptr %52, align 1
  %53 = load i64, ptr %51, align 4
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %if.entry28, label %ifend30

if.entry28:                                       ; preds = %if.entry22
  %memberidx.i.i.i102 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %55 = load i64, ptr %memberidx.i.i.i102, align 4
  %56 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i.i103 = getelementptr inbounds %Program, ptr %56, i64 0, i32 1
  %57 = load ptr, ptr %memberidx1.i.i.i.i103, align 8
  %memberidx.i.i.i.i.i104 = getelementptr inbounds %Array_Module_, ptr %57, i64 0, i32 1
  %58 = load ptr, ptr %memberidx.i.i.i.i.i104, align 8
  %ptridx.i.i.i.i.i105 = getelementptr inbounds ptr, ptr %58, i64 %55
  %59 = load ptr, ptr %ptridx.i.i.i.i.i105, align 8
  %memberidx.i.i106 = getelementptr inbounds %Module, ptr %59, i64 0, i32 7
  %60 = load ptr, ptr %memberidx.i.i106, align 8
  %memberidx.i1.i.i107 = getelementptr inbounds %Array_Scope_, ptr %60, i64 0, i32 1
  %61 = load ptr, ptr %memberidx.i1.i.i107, align 8
  %62 = load ptr, ptr %61, align 8
  %memberidx.i108 = getelementptr inbounds %Scope, ptr %62, i64 0, i32 3
  %63 = load ptr, ptr %memberidx.i108, align 8
  %64 = load ptr, ptr %63, align 8
  %65 = load ptr, ptr %64, align 8
  tail call void %65(ptr nonnull %63, ptr %1, ptr nonnull %51)
  %.pre = load i64, ptr %51, align 4
  br label %ifend30

ifend30:                                          ; preds = %if.entry22, %if.entry28
  %66 = phi i64 [ %53, %if.entry22 ], [ %.pre, %if.entry28 ]
  %67 = add i64 %66, -1
  %68 = icmp ult i64 %67, 2
  br i1 %68, label %if.entry33, label %ifend35

if.entry33:                                       ; preds = %ifend30
  %memberidx.i.i.i109 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %69 = load i64, ptr %memberidx.i.i.i109, align 4
  %70 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i.i110 = getelementptr inbounds %Program, ptr %70, i64 0, i32 1
  %71 = load ptr, ptr %memberidx1.i.i.i.i110, align 8
  %memberidx.i.i.i.i.i111 = getelementptr inbounds %Array_Module_, ptr %71, i64 0, i32 1
  %72 = load ptr, ptr %memberidx.i.i.i.i.i111, align 8
  %ptridx.i.i.i.i.i112 = getelementptr inbounds ptr, ptr %72, i64 %69
  %73 = load ptr, ptr %ptridx.i.i.i.i.i112, align 8
  %memberidx.i.i113 = getelementptr inbounds %Module, ptr %73, i64 0, i32 7
  %74 = load ptr, ptr %memberidx.i.i113, align 8
  %memberidx.i1.i.i114 = getelementptr inbounds %Array_Scope_, ptr %74, i64 0, i32 1
  %75 = load ptr, ptr %memberidx.i1.i.i114, align 8
  %76 = load ptr, ptr %75, align 8
  %memberidx.i115 = getelementptr inbounds %Scope, ptr %76, i64 0, i32 1
  %77 = load ptr, ptr %memberidx.i115, align 8
  %78 = load ptr, ptr %77, align 8
  %79 = load ptr, ptr %78, align 8
  tail call void %79(ptr nonnull %77, ptr %1, ptr nonnull %51)
  %.pr = load i64, ptr %51, align 4
  br label %ifend35

ifend35:                                          ; preds = %ifend30, %if.entry33
  %80 = phi i64 [ %66, %ifend30 ], [ %.pr, %if.entry33 ]
  %81 = icmp eq i64 %80, 3
  br i1 %81, label %if.entry37, label %ifend39

if.entry37:                                       ; preds = %ifend35
  %82 = tail call ptr @malloc(i32 24)
  %memberidx.i116 = getelementptr inbounds %VarId, ptr %51, i64 0, i32 1
  %83 = load i64, ptr %memberidx.i116, align 4
  %memberidx1.i117 = getelementptr inbounds %VarId, ptr %51, i64 0, i32 2
  %84 = load i64, ptr %memberidx1.i117, align 4
  store i64 %83, ptr %82, align 4
  %memberidx1.i.i.i118 = getelementptr inbounds %TypeId, ptr %82, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i.i118, align 4
  %memberidx2.i.i.i119 = getelementptr inbounds %TypeId, ptr %82, i64 0, i32 2
  store i64 %84, ptr %memberidx2.i.i.i119, align 4
  %memberidx.i.i.i84 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %85 = load i64, ptr %memberidx.i.i.i84, align 4
  %86 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i.i = getelementptr inbounds %Program, ptr %86, i64 0, i32 1
  %87 = load ptr, ptr %memberidx1.i.i.i.i, align 8
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %87, i64 0, i32 1
  %88 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %88, i64 %85
  %89 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  %memberidx.i.i85 = getelementptr inbounds %Module, ptr %89, i64 0, i32 7
  %90 = load ptr, ptr %memberidx.i.i85, align 8
  %memberidx.i1.i.i = getelementptr inbounds %Array_Scope_, ptr %90, i64 0, i32 1
  %91 = load ptr, ptr %memberidx.i1.i.i, align 8
  %92 = load ptr, ptr %91, align 8
  %memberidx.i86 = getelementptr inbounds %Scope, ptr %92, i64 0, i32 2
  %93 = load ptr, ptr %memberidx.i86, align 8
  %94 = load ptr, ptr %93, align 8
  %95 = load ptr, ptr %94, align 8
  tail call void %95(ptr nonnull %93, ptr %1, ptr nonnull %82)
  %memberidx2.i87 = getelementptr inbounds %Scope, ptr %92, i64 0, i32 1
  %96 = load ptr, ptr %memberidx2.i87, align 8
  %97 = load ptr, ptr %96, align 8
  %98 = load ptr, ptr %97, align 8
  %99 = tail call ptr @malloc(i32 24)
  %100 = load i64, ptr %82, align 4
  %101 = load i64, ptr %memberidx2.i.i.i119, align 4
  store i64 3, ptr %99, align 4
  %memberidx1.i.i.i88 = getelementptr inbounds %VarId, ptr %99, i64 0, i32 1
  store i64 %100, ptr %memberidx1.i.i.i88, align 4
  %memberidx2.i.i.i89 = getelementptr inbounds %VarId, ptr %99, i64 0, i32 2
  store i64 %101, ptr %memberidx2.i.i.i89, align 4
  tail call void %98(ptr nonnull %96, ptr %1, ptr nonnull %99)
  %.pre134 = load i64, ptr %51, align 4
  br label %ifend39

ifend39:                                          ; preds = %ifend35, %if.entry37
  %102 = phi i64 [ %80, %ifend35 ], [ %.pre134, %if.entry37 ]
  %103 = icmp eq i64 %102, 4
  br i1 %103, label %if.entry41, label %ifend14

if.entry41:                                       ; preds = %ifend39
  %104 = tail call ptr @malloc(i32 24)
  %memberidx.i81 = getelementptr inbounds %VarId, ptr %51, i64 0, i32 1
  %105 = load i64, ptr %memberidx.i81, align 4
  %memberidx1.i82 = getelementptr inbounds %VarId, ptr %51, i64 0, i32 2
  %106 = load i64, ptr %memberidx1.i82, align 4
  store i64 %105, ptr %104, align 4
  %memberidx1.i.i.i = getelementptr inbounds %TypeId, ptr %104, i64 0, i32 1
  store i64 1, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %TypeId, ptr %104, i64 0, i32 2
  store i64 %106, ptr %memberidx2.i.i.i, align 4
  %memberidx.i.i.i91 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %107 = load i64, ptr %memberidx.i.i.i91, align 4
  %108 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i.i92 = getelementptr inbounds %Program, ptr %108, i64 0, i32 1
  %109 = load ptr, ptr %memberidx1.i.i.i.i92, align 8
  %memberidx.i.i.i.i.i93 = getelementptr inbounds %Array_Module_, ptr %109, i64 0, i32 1
  %110 = load ptr, ptr %memberidx.i.i.i.i.i93, align 8
  %ptridx.i.i.i.i.i94 = getelementptr inbounds ptr, ptr %110, i64 %107
  %111 = load ptr, ptr %ptridx.i.i.i.i.i94, align 8
  %memberidx.i.i95 = getelementptr inbounds %Module, ptr %111, i64 0, i32 7
  %112 = load ptr, ptr %memberidx.i.i95, align 8
  %memberidx.i1.i.i96 = getelementptr inbounds %Array_Scope_, ptr %112, i64 0, i32 1
  %113 = load ptr, ptr %memberidx.i1.i.i96, align 8
  %114 = load ptr, ptr %113, align 8
  %memberidx.i97 = getelementptr inbounds %Scope, ptr %114, i64 0, i32 4
  %115 = load ptr, ptr %memberidx.i97, align 8
  %116 = load ptr, ptr %115, align 8
  %117 = load ptr, ptr %116, align 8
  tail call void %117(ptr nonnull %115, ptr %1, ptr nonnull %104)
  %memberidx2.i98 = getelementptr inbounds %Scope, ptr %114, i64 0, i32 1
  %118 = load ptr, ptr %memberidx2.i98, align 8
  %119 = load ptr, ptr %118, align 8
  %120 = load ptr, ptr %119, align 8
  %121 = tail call ptr @malloc(i32 24)
  %122 = load i64, ptr %104, align 4
  %123 = load i64, ptr %memberidx2.i.i.i, align 4
  store i64 4, ptr %121, align 4
  %memberidx1.i.i.i100 = getelementptr inbounds %VarId, ptr %121, i64 0, i32 1
  store i64 %122, ptr %memberidx1.i.i.i100, align 4
  %memberidx2.i.i.i101 = getelementptr inbounds %VarId, ptr %121, i64 0, i32 2
  store i64 %123, ptr %memberidx2.i.i.i101, align 4
  tail call void %120(ptr nonnull %118, ptr %1, ptr nonnull %121)
  br label %ifend14
}

define internal fastcc ptr @TypeChecker_get_type_from_current_scope(ptr nocapture %0, ptr %1) unnamed_addr {
  %3 = load ptr, ptr %0, align 8
  %memberidx1.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %4 = load ptr, ptr %memberidx1.i, align 8
  %memberidx.i.i = getelementptr inbounds %Program, ptr %3, i64 0, i32 1
  %5 = load ptr, ptr %memberidx.i.i, align 8
  %6 = load i64, ptr %4, align 4
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %5, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %7, i64 %6
  %8 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %Module, ptr %8, i64 0, i32 7
  %9 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ScopeId, ptr %4, i64 0, i32 1
  %10 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %9, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %11, i64 %10
  %current_scope.094 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx95 = getelementptr inbounds %Scope, ptr %current_scope.094, i64 0, i32 6
  %12 = load ptr, ptr %memberidx95, align 8
  %13 = load ptr, ptr %12, align 8
  %memberidx196 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %13, i64 0, i32 1
  %14 = load ptr, ptr %memberidx196, align 8
  %15 = tail call ptr %14(ptr nonnull %12, ptr %1)
  %.not97 = icmp eq ptr %15, null
  br i1 %.not97, label %ifend, label %common.ret

common.ret:                                       ; preds = %ifend15, %2, %ifend32, %ifend22, %if.entry9, %if.entry4
  %common.ret.op = phi ptr [ %20, %if.entry4 ], [ %25, %if.entry9 ], [ %52, %ifend22 ], [ %50, %ifend32 ], [ %15, %2 ], [ %41, %ifend15 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %2, %ifend15
  %current_scope.098 = phi ptr [ %current_scope.0, %ifend15 ], [ %current_scope.094, %2 ]
  %memberidx2 = getelementptr inbounds %Scope, ptr %current_scope.098, i64 0, i32 2
  %16 = load ptr, ptr %memberidx2, align 8
  %17 = load ptr, ptr %16, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %17, i64 0, i32 1
  %18 = load ptr, ptr %memberidx3, align 8
  %19 = tail call ptr %18(ptr nonnull %16, ptr %1)
  %.not61 = icmp eq ptr %19, null
  br i1 %.not61, label %ifend6, label %if.entry4

if.entry4:                                        ; preds = %ifend
  %20 = tail call ptr @malloc(i32 16)
  store i64 13, ptr %20, align 4
  %memberidx.i = getelementptr inbounds %ObjectType, ptr %20, i64 0, i32 1
  store ptr %19, ptr %memberidx.i, align 8
  br label %common.ret

ifend6:                                           ; preds = %ifend
  %memberidx7 = getelementptr inbounds %Scope, ptr %current_scope.098, i64 0, i32 4
  %21 = load ptr, ptr %memberidx7, align 8
  %22 = load ptr, ptr %21, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %22, i64 0, i32 1
  %23 = load ptr, ptr %memberidx8, align 8
  %24 = tail call ptr %23(ptr nonnull %21, ptr %1)
  %.not62 = icmp eq ptr %24, null
  br i1 %.not62, label %ifend11, label %if.entry9

if.entry9:                                        ; preds = %ifend6
  %25 = tail call ptr @malloc(i32 16)
  store i64 14, ptr %25, align 4
  %memberidx.i68 = getelementptr inbounds %EnumType, ptr %25, i64 0, i32 1
  store ptr %24, ptr %memberidx.i68, align 8
  br label %common.ret

ifend11:                                          ; preds = %ifend6
  %memberidx12 = getelementptr inbounds %Scope, ptr %current_scope.098, i64 0, i32 5
  %26 = load ptr, ptr %memberidx12, align 8
  %27 = icmp eq ptr %26, null
  br i1 %27, label %if.entry13, label %ifend15

if.entry13:                                       ; preds = %ifend11
  %28 = load ptr, ptr %memberidx1.i, align 8
  %29 = load i64, ptr %28, align 4
  %.not63 = icmp eq i64 %29, 0
  br i1 %.not63, label %ifend22, label %if.entry20

ifend15:                                          ; preds = %ifend11
  %30 = load ptr, ptr %0, align 8
  %memberidx.i69 = getelementptr inbounds %Program, ptr %30, i64 0, i32 1
  %31 = load ptr, ptr %memberidx.i69, align 8
  %32 = load i64, ptr %26, align 4
  %memberidx.i.i70 = getelementptr inbounds %Array_Module_, ptr %31, i64 0, i32 1
  %33 = load ptr, ptr %memberidx.i.i70, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %33, i64 %32
  %34 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i71 = getelementptr inbounds %Module, ptr %34, i64 0, i32 7
  %35 = load ptr, ptr %memberidx2.i71, align 8
  %memberidx3.i = getelementptr inbounds %ScopeId, ptr %26, i64 0, i32 1
  %36 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Scope_, ptr %35, i64 0, i32 1
  %37 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %37, i64 %36
  %current_scope.0 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx = getelementptr inbounds %Scope, ptr %current_scope.0, i64 0, i32 6
  %38 = load ptr, ptr %memberidx, align 8
  %39 = load ptr, ptr %38, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %39, i64 0, i32 1
  %40 = load ptr, ptr %memberidx1, align 8
  %41 = tail call ptr %40(ptr nonnull %38, ptr %1)
  %.not = icmp eq ptr %41, null
  br i1 %.not, label %ifend, label %common.ret

if.entry20:                                       ; preds = %if.entry13
  %42 = load ptr, ptr %0, align 8
  %memberidx26 = getelementptr inbounds %Program, ptr %42, i64 0, i32 1
  %43 = load ptr, ptr %memberidx26, align 8
  %memberidx.i72 = getelementptr inbounds %Array_Module_, ptr %43, i64 0, i32 1
  %44 = load ptr, ptr %memberidx.i72, align 8
  %45 = load ptr, ptr %44, align 8
  %memberidx27 = getelementptr inbounds %Module, ptr %45, i64 0, i32 7
  %46 = load ptr, ptr %memberidx27, align 8
  %memberidx.i73 = getelementptr inbounds %Array_Scope_, ptr %46, i64 0, i32 1
  %47 = load ptr, ptr %memberidx.i73, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = load ptr, ptr %48, align 8
  store ptr %49, ptr %memberidx1.i, align 8
  %50 = tail call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr nonnull %0, ptr %1)
  %51 = load i64, ptr %50, align 4
  %.not64 = icmp eq i64 %51, 21
  br i1 %.not64, label %ifend32, label %if.entry30

ifend22:                                          ; preds = %if.entry13
  %52 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %52, align 4
  br label %common.ret

if.entry30:                                       ; preds = %if.entry20
  %53 = load ptr, ptr %0, align 8
  store i1 true, ptr %53, align 1
  %54 = load i64, ptr %50, align 4
  %55 = icmp eq i64 %54, 13
  br i1 %55, label %if.entry36, label %else37

ifend32:                                          ; preds = %if.entry36, %else37, %if.entry20
  store ptr %28, ptr %memberidx1.i, align 8
  br label %common.ret

if.entry36:                                       ; preds = %if.entry30
  %memberidx39 = getelementptr inbounds %ObjectType, ptr %50, i64 0, i32 1
  %56 = load ptr, ptr %memberidx39, align 8
  %memberidx.i.i.i65 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %57 = load i64, ptr %memberidx.i.i.i65, align 4
  %58 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i.i = getelementptr inbounds %Program, ptr %58, i64 0, i32 1
  %59 = load ptr, ptr %memberidx1.i.i.i.i, align 8
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %59, i64 0, i32 1
  %60 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %60, i64 %57
  %61 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  %memberidx.i.i66 = getelementptr inbounds %Module, ptr %61, i64 0, i32 7
  %62 = load ptr, ptr %memberidx.i.i66, align 8
  %memberidx.i1.i.i = getelementptr inbounds %Array_Scope_, ptr %62, i64 0, i32 1
  %63 = load ptr, ptr %memberidx.i1.i.i, align 8
  %64 = load ptr, ptr %63, align 8
  %memberidx.i67 = getelementptr inbounds %Scope, ptr %64, i64 0, i32 2
  %65 = load ptr, ptr %memberidx.i67, align 8
  %66 = load ptr, ptr %65, align 8
  %67 = load ptr, ptr %66, align 8
  tail call void %67(ptr nonnull %65, ptr %1, ptr %56)
  %memberidx2.i = getelementptr inbounds %Scope, ptr %64, i64 0, i32 1
  %68 = load ptr, ptr %memberidx2.i, align 8
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %69, align 8
  %71 = tail call ptr @malloc(i32 24)
  %72 = load i64, ptr %56, align 4
  %memberidx1.i.i = getelementptr inbounds %TypeId, ptr %56, i64 0, i32 2
  %73 = load i64, ptr %memberidx1.i.i, align 4
  store i64 3, ptr %71, align 4
  %memberidx1.i.i.i = getelementptr inbounds %VarId, ptr %71, i64 0, i32 1
  store i64 %72, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %VarId, ptr %71, i64 0, i32 2
  store i64 %73, ptr %memberidx2.i.i.i, align 4
  tail call void %70(ptr nonnull %68, ptr %1, ptr nonnull %71)
  br label %ifend32

else37:                                           ; preds = %if.entry30
  %memberidx40 = getelementptr inbounds %EnumType, ptr %50, i64 0, i32 1
  %74 = load ptr, ptr %memberidx40, align 8
  %memberidx.i.i.i74 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %75 = load i64, ptr %memberidx.i.i.i74, align 4
  %76 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i.i75 = getelementptr inbounds %Program, ptr %76, i64 0, i32 1
  %77 = load ptr, ptr %memberidx1.i.i.i.i75, align 8
  %memberidx.i.i.i.i.i76 = getelementptr inbounds %Array_Module_, ptr %77, i64 0, i32 1
  %78 = load ptr, ptr %memberidx.i.i.i.i.i76, align 8
  %ptridx.i.i.i.i.i77 = getelementptr inbounds ptr, ptr %78, i64 %75
  %79 = load ptr, ptr %ptridx.i.i.i.i.i77, align 8
  %memberidx.i.i78 = getelementptr inbounds %Module, ptr %79, i64 0, i32 7
  %80 = load ptr, ptr %memberidx.i.i78, align 8
  %memberidx.i1.i.i79 = getelementptr inbounds %Array_Scope_, ptr %80, i64 0, i32 1
  %81 = load ptr, ptr %memberidx.i1.i.i79, align 8
  %82 = load ptr, ptr %81, align 8
  %memberidx.i80 = getelementptr inbounds %Scope, ptr %82, i64 0, i32 4
  %83 = load ptr, ptr %memberidx.i80, align 8
  %84 = load ptr, ptr %83, align 8
  %85 = load ptr, ptr %84, align 8
  tail call void %85(ptr nonnull %83, ptr %1, ptr %74)
  %memberidx2.i81 = getelementptr inbounds %Scope, ptr %82, i64 0, i32 1
  %86 = load ptr, ptr %memberidx2.i81, align 8
  %87 = load ptr, ptr %86, align 8
  %88 = load ptr, ptr %87, align 8
  %89 = tail call ptr @malloc(i32 24)
  %90 = load i64, ptr %74, align 4
  %memberidx1.i.i82 = getelementptr inbounds %TypeId, ptr %74, i64 0, i32 2
  %91 = load i64, ptr %memberidx1.i.i82, align 4
  store i64 4, ptr %89, align 4
  %memberidx1.i.i.i83 = getelementptr inbounds %VarId, ptr %89, i64 0, i32 1
  store i64 %90, ptr %memberidx1.i.i.i83, align 4
  %memberidx2.i.i.i84 = getelementptr inbounds %VarId, ptr %89, i64 0, i32 2
  store i64 %91, ptr %memberidx2.i.i.i84, align 4
  tail call void %88(ptr nonnull %86, ptr %1, ptr nonnull %89)
  br label %ifend32
}

define internal fastcc ptr @TypeChecker_declare_var_within_current_scope(ptr nocapture readonly %0, ptr %1, ptr %2, ptr %3) unnamed_addr {
  %5 = tail call ptr @malloc(i32 24)
  %memberidx.i = getelementptr inbounds %Var, ptr %5, i64 0, i32 2
  store ptr %2, ptr %memberidx.i, align 8
  store ptr %3, ptr %5, align 8
  %memberidx.i13 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx.i13, align 4
  %7 = load ptr, ptr %0, align 8
  %memberidx1.i.i = getelementptr inbounds %Program, ptr %7, i64 0, i32 1
  %8 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %8, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %9, i64 %6
  %10 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx1.i15 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %11 = load ptr, ptr %memberidx1.i15, align 8
  %12 = load i64, ptr %11, align 4
  %ptridx.i.i.i18 = getelementptr inbounds ptr, ptr %9, i64 %12
  %13 = load ptr, ptr %ptridx.i.i.i18, align 8
  %memberidx2.i.i19 = getelementptr inbounds %Module, ptr %13, i64 0, i32 7
  %14 = load ptr, ptr %memberidx2.i.i19, align 8
  %memberidx3.i.i = getelementptr inbounds %ScopeId, ptr %11, i64 0, i32 1
  %15 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %14, i64 0, i32 1
  %16 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %16, i64 %15
  %17 = load ptr, ptr %ptridx.i6.i.i, align 8
  %18 = tail call ptr @malloc(i32 24)
  %19 = load i64, ptr %memberidx.i13, align 4
  %memberidx1 = getelementptr inbounds %Module, ptr %10, i64 0, i32 2
  %20 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Var_, ptr %20, i64 0, i32 2
  %21 = load i64, ptr %memberidx2, align 4
  store i64 1, ptr %18, align 4
  %memberidx1.i20 = getelementptr inbounds %VarId, ptr %18, i64 0, i32 1
  store i64 %19, ptr %memberidx1.i20, align 4
  %memberidx2.i = getelementptr inbounds %VarId, ptr %18, i64 0, i32 2
  store i64 %21, ptr %memberidx2.i, align 4
  %memberidx3 = getelementptr inbounds %Var, ptr %5, i64 0, i32 1
  store ptr %18, ptr %memberidx3, align 8
  %22 = load ptr, ptr %memberidx1, align 8
  %memberidx.i14 = getelementptr inbounds %Array_Var_, ptr %22, i64 0, i32 2
  %23 = load i64, ptr %memberidx.i14, align 4
  %memberidx1.i = getelementptr inbounds %Array_Var_, ptr %22, i64 0, i32 3
  %24 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp slt i64 %23, %24
  br i1 %.not.i, label %.Array_Var____sl__.exit_crit_edge, label %if.entry.i

.Array_Var____sl__.exit_crit_edge:                ; preds = %4
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_Var_, ptr %22, i64 0, i32 1
  %.pre21 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_Var____sl__.exit

if.entry.i:                                       ; preds = %4
  %25 = shl i64 %24, 1
  store i64 %25, ptr %memberidx1.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_Var_, ptr %22, i64 0, i32 1
  %26 = load ptr, ptr %memberidx2.i.i, align 8
  %27 = shl i64 %24, 4
  %28 = tail call ptr @realloc(ptr %26, i64 %27)
  store ptr %28, ptr %memberidx2.i.i, align 8
  %.pre = load i64, ptr %memberidx.i14, align 4
  br label %Array_Var____sl__.exit

Array_Var____sl__.exit:                           ; preds = %.Array_Var____sl__.exit_crit_edge, %if.entry.i
  %29 = phi ptr [ %.pre21, %.Array_Var____sl__.exit_crit_edge ], [ %28, %if.entry.i ]
  %30 = phi i64 [ %23, %.Array_Var____sl__.exit_crit_edge ], [ %.pre, %if.entry.i ]
  %31 = add i64 %30, 1
  store i64 %31, ptr %memberidx.i14, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %29, i64 %30
  store ptr %5, ptr %ptridx.i, align 8
  %memberidx5 = getelementptr inbounds %Scope, ptr %17, i64 0, i32 1
  %32 = load ptr, ptr %memberidx5, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %33, align 8
  tail call void %34(ptr nonnull %32, ptr %1, ptr nonnull %18)
  ret ptr %5
}

define internal fastcc ptr @TypeChecker_declare_const_within_current_scope(ptr nocapture readonly %0, ptr %1, ptr %2, ptr %3) unnamed_addr {
  %5 = tail call ptr @malloc(i32 24)
  %memberidx.i = getelementptr inbounds %Const, ptr %5, i64 0, i32 2
  store ptr %2, ptr %memberidx.i, align 8
  store ptr %3, ptr %5, align 8
  %memberidx.i13 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %6 = load i64, ptr %memberidx.i13, align 4
  %7 = load ptr, ptr %0, align 8
  %memberidx1.i.i = getelementptr inbounds %Program, ptr %7, i64 0, i32 1
  %8 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %8, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %9, i64 %6
  %10 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx1.i15 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %11 = load ptr, ptr %memberidx1.i15, align 8
  %12 = load i64, ptr %11, align 4
  %ptridx.i.i.i18 = getelementptr inbounds ptr, ptr %9, i64 %12
  %13 = load ptr, ptr %ptridx.i.i.i18, align 8
  %memberidx2.i.i19 = getelementptr inbounds %Module, ptr %13, i64 0, i32 7
  %14 = load ptr, ptr %memberidx2.i.i19, align 8
  %memberidx3.i.i = getelementptr inbounds %ScopeId, ptr %11, i64 0, i32 1
  %15 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Scope_, ptr %14, i64 0, i32 1
  %16 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %16, i64 %15
  %17 = load ptr, ptr %ptridx.i6.i.i, align 8
  %18 = tail call ptr @malloc(i32 24)
  %19 = load i64, ptr %memberidx.i13, align 4
  %memberidx1 = getelementptr inbounds %Module, ptr %10, i64 0, i32 3
  %20 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Const_, ptr %20, i64 0, i32 2
  %21 = load i64, ptr %memberidx2, align 4
  store i64 2, ptr %18, align 4
  %memberidx1.i.i20 = getelementptr inbounds %VarId, ptr %18, i64 0, i32 1
  store i64 %19, ptr %memberidx1.i.i20, align 4
  %memberidx2.i.i21 = getelementptr inbounds %VarId, ptr %18, i64 0, i32 2
  store i64 %21, ptr %memberidx2.i.i21, align 4
  %memberidx3 = getelementptr inbounds %Const, ptr %5, i64 0, i32 1
  store ptr %18, ptr %memberidx3, align 8
  %22 = load ptr, ptr %memberidx1, align 8
  %memberidx.i14 = getelementptr inbounds %Array_Const_, ptr %22, i64 0, i32 2
  %23 = load i64, ptr %memberidx.i14, align 4
  %memberidx1.i = getelementptr inbounds %Array_Const_, ptr %22, i64 0, i32 3
  %24 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp slt i64 %23, %24
  br i1 %.not.i, label %.Array_Const____sl__.exit_crit_edge, label %if.entry.i

.Array_Const____sl__.exit_crit_edge:              ; preds = %4
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_Const_, ptr %22, i64 0, i32 1
  %.pre22 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_Const____sl__.exit

if.entry.i:                                       ; preds = %4
  %25 = shl i64 %24, 1
  store i64 %25, ptr %memberidx1.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_Const_, ptr %22, i64 0, i32 1
  %26 = load ptr, ptr %memberidx2.i.i, align 8
  %27 = shl i64 %24, 4
  %28 = tail call ptr @realloc(ptr %26, i64 %27)
  store ptr %28, ptr %memberidx2.i.i, align 8
  %.pre = load i64, ptr %memberidx.i14, align 4
  br label %Array_Const____sl__.exit

Array_Const____sl__.exit:                         ; preds = %.Array_Const____sl__.exit_crit_edge, %if.entry.i
  %29 = phi ptr [ %.pre22, %.Array_Const____sl__.exit_crit_edge ], [ %28, %if.entry.i ]
  %30 = phi i64 [ %23, %.Array_Const____sl__.exit_crit_edge ], [ %.pre, %if.entry.i ]
  %31 = add i64 %30, 1
  store i64 %31, ptr %memberidx.i14, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %29, i64 %30
  store ptr %5, ptr %ptridx.i, align 8
  %memberidx5 = getelementptr inbounds %Scope, ptr %17, i64 0, i32 1
  %32 = load ptr, ptr %memberidx5, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %33, align 8
  tail call void %34(ptr nonnull %32, ptr %1, ptr nonnull %18)
  ret ptr %5
}

define internal fastcc ptr @TypeChecker_check_object_setitem_expr(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %0, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 3
  br label %tailrecurse.i

tailrecurse.i:                                    ; preds = %if.entry.i128, %3
  %.tr11.i.in = phi ptr [ %memberidx2, %3 ], [ %memberidx1.i127, %if.entry.i128 ]
  %.tr11.i = load ptr, ptr %.tr11.i.in, align 8
  %6 = load i64, ptr %.tr11.i, align 4
  switch i64 %6, label %get_class_from_type.exit [
    i64 20, label %if.entry.i128
    i64 13, label %if.entry3.i
  ]

if.entry.i128:                                    ; preds = %tailrecurse.i
  %memberidx1.i127 = getelementptr inbounds %GenericType, ptr %.tr11.i, i64 0, i32 3
  br label %tailrecurse.i

if.entry3.i:                                      ; preds = %tailrecurse.i
  %memberidx6.i129 = getelementptr inbounds %ObjectType, ptr %.tr11.i, i64 0, i32 1
  %7 = load ptr, ptr %memberidx6.i129, align 8
  %memberidx.i.i130 = getelementptr inbounds %Program, ptr %5, i64 0, i32 1
  %8 = load ptr, ptr %memberidx.i.i130, align 8
  %9 = load i64, ptr %7, align 4
  %memberidx.i.i.i131 = getelementptr inbounds %Array_Module_, ptr %8, i64 0, i32 1
  %10 = load ptr, ptr %memberidx.i.i.i131, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %10, i64 %9
  %11 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i132 = getelementptr inbounds %Module, ptr %11, i64 0, i32 4
  %12 = load ptr, ptr %memberidx2.i.i132, align 8
  %memberidx3.i.i = getelementptr inbounds %TypeId, ptr %7, i64 0, i32 2
  %13 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %12, i64 0, i32 1
  %14 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %14, i64 %13
  %15 = load ptr, ptr %ptridx.i6.i.i, align 8
  br label %get_class_from_type.exit

get_class_from_type.exit:                         ; preds = %tailrecurse.i, %if.entry3.i
  %common.ret.op.i126 = phi ptr [ %15, %if.entry3.i ], [ null, %tailrecurse.i ]
  %memberidx3 = getelementptr inbounds %Class, ptr %common.ret.op.i126, i64 0, i32 6
  %16 = load ptr, ptr %memberidx3, align 8
  %17 = load ptr, ptr %16, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %17, i64 0, i32 1
  %18 = load ptr, ptr %memberidx4, align 8
  %19 = tail call ptr @malloc(i32 88)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %19, ptr noundef nonnull align 8 dereferenceable(11) @167, i64 11, i1 false)
  %20 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %20, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 1
  store ptr %19, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i, align 4
  %21 = tail call ptr %18(ptr nonnull %16, ptr nonnull %20)
  %22 = icmp eq ptr %21, null
  br i1 %22, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend18, %get_class_prop_type.exit, %ifend31, %TypeChecker_error.exit112, %TypeChecker_error.exit93, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit93 ], [ null, %TypeChecker_error.exit112 ], [ %142, %ifend31 ], [ null, %get_class_prop_type.exit ], [ null, %ifend18 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %get_class_from_type.exit
  %memberidx5 = getelementptr inbounds %Class, ptr %common.ret.op.i126, i64 0, i32 1
  %23 = load ptr, ptr %memberidx5, align 8
  %24 = load ptr, ptr %23, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %24, i64 0, i32 5
  %25 = load ptr, ptr %memberidx6, align 8
  %26 = tail call ptr %25(ptr nonnull %23)
  %27 = alloca ptr, align 8
  %28 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %27, ptr nonnull @217, ptr %26)
  %29 = load ptr, ptr %27, align 8
  %30 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %30, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %30, i64 0, i32 1
  store ptr %29, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %30, i64 0, i32 2
  store i64 %28, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %30, i64 0, i32 3
  store i64 %28, ptr %memberidx2.i, align 4
  tail call void @free(ptr %26)
  %31 = load ptr, ptr %4, align 8
  %memberidx.i62 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %32 = load ptr, ptr %memberidx.i62, align 8
  %memberidx1.i63 = getelementptr inbounds %Compiler, ptr %32, i64 0, i32 6
  %33 = load ptr, ptr %memberidx1.i63, align 8
  %34 = call ptr @malloc(i32 24)
  store i64 4, ptr %34, align 4
  %memberidx1.i.i64 = getelementptr inbounds %FloError, ptr %34, i64 0, i32 2
  store ptr %31, ptr %memberidx1.i.i64, align 8
  %memberidx2.i.i65 = getelementptr inbounds %FloError, ptr %34, i64 0, i32 1
  store ptr %30, ptr %memberidx2.i.i65, align 8
  %memberidx.i.i66 = getelementptr inbounds %Array_FloError_, ptr %33, i64 0, i32 2
  %35 = load i64, ptr %memberidx.i.i66, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %33, i64 0, i32 3
  %36 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %35, %36
  br i1 %.not.i.i, label %if.entry.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry.TypeChecker_error.exit_crit_edge:        ; preds = %if.entry
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %33, i64 0, i32 1
  %.pre139 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry
  %37 = shl i64 %36, 1
  store i64 %37, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %33, i64 0, i32 1
  %38 = load ptr, ptr %memberidx2.i.i.i, align 8
  %39 = shl i64 %36, 4
  %40 = call ptr @realloc(ptr %38, i64 %39)
  store ptr %40, ptr %memberidx2.i.i.i, align 8
  %.pre138 = load i64, ptr %memberidx.i.i66, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %41 = phi ptr [ %.pre139, %if.entry.TypeChecker_error.exit_crit_edge ], [ %40, %if.entry.i.i ]
  %42 = phi i64 [ %35, %if.entry.TypeChecker_error.exit_crit_edge ], [ %.pre138, %if.entry.i.i ]
  %43 = add i64 %42, 1
  store i64 %43, ptr %memberidx.i.i66, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %41, i64 %42
  store ptr %34, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend:                                            ; preds = %get_class_from_type.exit
  %44 = load ptr, ptr %0, align 8
  %memberidx.i.i67 = getelementptr inbounds %PropId, ptr %21, i64 0, i32 1
  %45 = load ptr, ptr %memberidx.i.i67, align 8
  %memberidx.i.i.i68 = getelementptr inbounds %Program, ptr %44, i64 0, i32 1
  %46 = load ptr, ptr %memberidx.i.i.i68, align 8
  %47 = load i64, ptr %45, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %46, i64 0, i32 1
  %48 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %48, i64 %47
  %49 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i69 = getelementptr inbounds %Module, ptr %49, i64 0, i32 4
  %50 = load ptr, ptr %memberidx2.i.i.i69, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %45, i64 0, i32 2
  %51 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %50, i64 0, i32 1
  %52 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %52, i64 %51
  %53 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %54 = load i64, ptr %21, align 4
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %ifend
  %memberidx1.i70 = getelementptr inbounds %Class, ptr %53, i64 0, i32 5
  %56 = load ptr, ptr %memberidx1.i70, align 8
  %memberidx2.i71 = getelementptr inbounds %PropId, ptr %21, i64 0, i32 2
  %57 = load i64, ptr %memberidx2.i71, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %56, i64 0, i32 1
  %58 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %58, i64 %57
  %59 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %59, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %ifend
  %memberidx4.i = getelementptr inbounds %Class, ptr %53, i64 0, i32 4
  %60 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %21, i64 0, i32 2
  %61 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %60, i64 0, i32 1
  %62 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i72 = getelementptr inbounds ptr, ptr %62, i64 %61
  %63 = load ptr, ptr %ptridx.i.i72, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %63, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i = load ptr, ptr %common.ret.op.in.i, align 8
  %memberidx9 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i, i64 0, i32 1
  %64 = load ptr, ptr %memberidx9, align 8
  %memberidx.i73 = getelementptr inbounds %Array_Type_, ptr %64, i64 0, i32 1
  %65 = load ptr, ptr %memberidx.i73, align 8
  %66 = load ptr, ptr %65, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %65, i64 1
  %67 = load ptr, ptr %ptridx.i, align 8
  %memberidx.i75 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %68 = load ptr, ptr %memberidx.i75, align 8
  %memberidx1.i76 = getelementptr inbounds %Compiler, ptr %68, i64 0, i32 6
  %69 = load ptr, ptr %memberidx1.i76, align 8
  %memberidx2.i77 = getelementptr inbounds %Array_FloError_, ptr %69, i64 0, i32 2
  %70 = load i64, ptr %memberidx2.i77, align 4
  %71 = icmp sgt i64 %70, 0
  br i1 %71, label %common.ret, label %ifend13

ifend13:                                          ; preds = %get_class_prop_type.exit
  %memberidx14 = getelementptr inbounds %ExpressionIndexNode, ptr %4, i64 0, i32 4
  %72 = load ptr, ptr %memberidx14, align 8
  %73 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %66, ptr %72)
  %memberidx15 = getelementptr inbounds %Expression, ptr %73, i64 0, i32 3
  %74 = load ptr, ptr %memberidx15, align 8
  %75 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %66, ptr %74)
  br i1 %75, label %ifend18, label %if.entry16

if.entry16:                                       ; preds = %ifend13
  %76 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %66)
  %77 = load ptr, ptr %76, align 8
  %memberidx19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %77, i64 0, i32 5
  %78 = load ptr, ptr %memberidx19, align 8
  %79 = tail call ptr %78(ptr nonnull %76)
  %80 = load ptr, ptr %memberidx15, align 8
  %81 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %80)
  %82 = load ptr, ptr %81, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %82, i64 0, i32 5
  %83 = load ptr, ptr %memberidx21, align 8
  %84 = tail call ptr %83(ptr nonnull %81)
  %85 = alloca ptr, align 8
  %86 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %85, ptr nonnull @214, ptr %79, ptr %84)
  %87 = load ptr, ptr %85, align 8
  %88 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %88, align 8
  %memberidx.i78 = getelementptr inbounds %string, ptr %88, i64 0, i32 1
  store ptr %87, ptr %memberidx.i78, align 8
  %memberidx1.i79 = getelementptr inbounds %string, ptr %88, i64 0, i32 2
  store i64 %86, ptr %memberidx1.i79, align 4
  %memberidx2.i80 = getelementptr inbounds %string, ptr %88, i64 0, i32 3
  store i64 %86, ptr %memberidx2.i80, align 4
  tail call void @free(ptr %79)
  tail call void @free(ptr %84)
  %89 = load ptr, ptr %memberidx14, align 8
  %90 = load ptr, ptr %89, align 8
  %91 = load ptr, ptr %memberidx.i75, align 8
  %memberidx1.i82 = getelementptr inbounds %Compiler, ptr %91, i64 0, i32 6
  %92 = load ptr, ptr %memberidx1.i82, align 8
  %93 = call ptr @malloc(i32 24)
  store i64 5, ptr %93, align 4
  %memberidx1.i.i83 = getelementptr inbounds %FloError, ptr %93, i64 0, i32 2
  store ptr %90, ptr %memberidx1.i.i83, align 8
  %memberidx2.i.i84 = getelementptr inbounds %FloError, ptr %93, i64 0, i32 1
  store ptr %88, ptr %memberidx2.i.i84, align 8
  %memberidx.i.i85 = getelementptr inbounds %Array_FloError_, ptr %92, i64 0, i32 2
  %94 = load i64, ptr %memberidx.i.i85, align 4
  %memberidx1.i2.i86 = getelementptr inbounds %Array_FloError_, ptr %92, i64 0, i32 3
  %95 = load i64, ptr %memberidx1.i2.i86, align 4
  %.not.i.i87 = icmp slt i64 %94, %95
  br i1 %.not.i.i87, label %if.entry16.TypeChecker_error.exit93_crit_edge, label %if.entry.i.i90

if.entry16.TypeChecker_error.exit93_crit_edge:    ; preds = %if.entry16
  %memberidx4.i.i91.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %92, i64 0, i32 1
  %.pre135 = load ptr, ptr %memberidx4.i.i91.phi.trans.insert, align 8
  br label %TypeChecker_error.exit93

if.entry.i.i90:                                   ; preds = %if.entry16
  %96 = shl i64 %95, 1
  store i64 %96, ptr %memberidx1.i2.i86, align 4
  %memberidx2.i.i.i89 = getelementptr inbounds %Array_FloError_, ptr %92, i64 0, i32 1
  %97 = load ptr, ptr %memberidx2.i.i.i89, align 8
  %98 = shl i64 %95, 4
  %99 = call ptr @realloc(ptr %97, i64 %98)
  store ptr %99, ptr %memberidx2.i.i.i89, align 8
  %.pre = load i64, ptr %memberidx.i.i85, align 4
  br label %TypeChecker_error.exit93

TypeChecker_error.exit93:                         ; preds = %if.entry16.TypeChecker_error.exit93_crit_edge, %if.entry.i.i90
  %100 = phi ptr [ %.pre135, %if.entry16.TypeChecker_error.exit93_crit_edge ], [ %99, %if.entry.i.i90 ]
  %101 = phi i64 [ %94, %if.entry16.TypeChecker_error.exit93_crit_edge ], [ %.pre, %if.entry.i.i90 ]
  %102 = add i64 %101, 1
  store i64 %102, ptr %memberidx.i.i85, align 4
  %ptridx.i.i92 = getelementptr inbounds ptr, ptr %100, i64 %101
  store ptr %93, ptr %ptridx.i.i92, align 8
  br label %common.ret

ifend18:                                          ; preds = %ifend13
  %memberidx24 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 5
  %103 = load ptr, ptr %memberidx24, align 8
  %104 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %67, ptr %103)
  %105 = load ptr, ptr %memberidx.i75, align 8
  %memberidx1.i95 = getelementptr inbounds %Compiler, ptr %105, i64 0, i32 6
  %106 = load ptr, ptr %memberidx1.i95, align 8
  %memberidx2.i96 = getelementptr inbounds %Array_FloError_, ptr %106, i64 0, i32 2
  %107 = load i64, ptr %memberidx2.i96, align 4
  %108 = icmp sgt i64 %107, 0
  br i1 %108, label %common.ret, label %ifend27

ifend27:                                          ; preds = %ifend18
  %109 = load ptr, ptr %memberidx15, align 8
  %110 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %66, ptr %109)
  br i1 %110, label %ifend31, label %if.entry29

if.entry29:                                       ; preds = %ifend27
  %111 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %67)
  %112 = load ptr, ptr %111, align 8
  %memberidx32 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %112, i64 0, i32 5
  %113 = load ptr, ptr %memberidx32, align 8
  %114 = tail call ptr %113(ptr nonnull %111)
  %memberidx33 = getelementptr inbounds %Expression, ptr %104, i64 0, i32 3
  %115 = load ptr, ptr %memberidx33, align 8
  %116 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %115)
  %117 = load ptr, ptr %116, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %117, i64 0, i32 5
  %118 = load ptr, ptr %memberidx34, align 8
  %119 = tail call ptr %118(ptr nonnull %116)
  %120 = alloca ptr, align 8
  %121 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %120, ptr nonnull @214, ptr %114, ptr %119)
  %122 = load ptr, ptr %120, align 8
  %123 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %123, align 8
  %memberidx.i97 = getelementptr inbounds %string, ptr %123, i64 0, i32 1
  store ptr %122, ptr %memberidx.i97, align 8
  %memberidx1.i98 = getelementptr inbounds %string, ptr %123, i64 0, i32 2
  store i64 %121, ptr %memberidx1.i98, align 4
  %memberidx2.i99 = getelementptr inbounds %string, ptr %123, i64 0, i32 3
  store i64 %121, ptr %memberidx2.i99, align 4
  tail call void @free(ptr %114)
  tail call void @free(ptr %119)
  %124 = load ptr, ptr %memberidx24, align 8
  %125 = load ptr, ptr %124, align 8
  %126 = load ptr, ptr %memberidx.i75, align 8
  %memberidx1.i101 = getelementptr inbounds %Compiler, ptr %126, i64 0, i32 6
  %127 = load ptr, ptr %memberidx1.i101, align 8
  %128 = call ptr @malloc(i32 24)
  store i64 5, ptr %128, align 4
  %memberidx1.i.i102 = getelementptr inbounds %FloError, ptr %128, i64 0, i32 2
  store ptr %125, ptr %memberidx1.i.i102, align 8
  %memberidx2.i.i103 = getelementptr inbounds %FloError, ptr %128, i64 0, i32 1
  store ptr %123, ptr %memberidx2.i.i103, align 8
  %memberidx.i.i104 = getelementptr inbounds %Array_FloError_, ptr %127, i64 0, i32 2
  %129 = load i64, ptr %memberidx.i.i104, align 4
  %memberidx1.i2.i105 = getelementptr inbounds %Array_FloError_, ptr %127, i64 0, i32 3
  %130 = load i64, ptr %memberidx1.i2.i105, align 4
  %.not.i.i106 = icmp slt i64 %129, %130
  br i1 %.not.i.i106, label %if.entry29.TypeChecker_error.exit112_crit_edge, label %if.entry.i.i109

if.entry29.TypeChecker_error.exit112_crit_edge:   ; preds = %if.entry29
  %memberidx4.i.i110.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %127, i64 0, i32 1
  %.pre137 = load ptr, ptr %memberidx4.i.i110.phi.trans.insert, align 8
  br label %TypeChecker_error.exit112

if.entry.i.i109:                                  ; preds = %if.entry29
  %131 = shl i64 %130, 1
  store i64 %131, ptr %memberidx1.i2.i105, align 4
  %memberidx2.i.i.i108 = getelementptr inbounds %Array_FloError_, ptr %127, i64 0, i32 1
  %132 = load ptr, ptr %memberidx2.i.i.i108, align 8
  %133 = shl i64 %130, 4
  %134 = call ptr @realloc(ptr %132, i64 %133)
  store ptr %134, ptr %memberidx2.i.i.i108, align 8
  %.pre136 = load i64, ptr %memberidx.i.i104, align 4
  br label %TypeChecker_error.exit112

TypeChecker_error.exit112:                        ; preds = %if.entry29.TypeChecker_error.exit112_crit_edge, %if.entry.i.i109
  %135 = phi ptr [ %.pre137, %if.entry29.TypeChecker_error.exit112_crit_edge ], [ %134, %if.entry.i.i109 ]
  %136 = phi i64 [ %129, %if.entry29.TypeChecker_error.exit112_crit_edge ], [ %.pre136, %if.entry.i.i109 ]
  %137 = add i64 %136, 1
  store i64 %137, ptr %memberidx.i.i104, align 4
  %ptridx.i.i111 = getelementptr inbounds ptr, ptr %135, i64 %136
  store ptr %128, ptr %ptridx.i.i111, align 8
  br label %common.ret

ifend31:                                          ; preds = %ifend27
  %138 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %138, align 4
  %memberidx.i.i113 = getelementptr inbounds %Expression, ptr %138, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i113, align 4
  %memberidx1.i.i114 = getelementptr inbounds %Expression, ptr %138, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i114, align 1
  %memberidx.i115 = getelementptr inbounds %MemberExpression, ptr %138, i64 0, i32 4
  store ptr %1, ptr %memberidx.i115, align 8
  %memberidx1.i116 = getelementptr inbounds %MemberExpression, ptr %138, i64 0, i32 5
  store ptr %21, ptr %memberidx1.i116, align 8
  %memberidx2.i117 = getelementptr inbounds %Expression, ptr %138, i64 0, i32 3
  store ptr %common.ret.op.i, ptr %memberidx2.i117, align 8
  %139 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %139, align 8
  %memberidx.i118 = getelementptr inbounds %Array_Expression_, ptr %139, i64 0, i32 2
  store i64 0, ptr %memberidx.i118, align 4
  %memberidx1.i119 = getelementptr inbounds %Array_Expression_, ptr %139, i64 0, i32 3
  store i64 16, ptr %memberidx1.i119, align 4
  %memberidx2.i120 = getelementptr inbounds %Array_Expression_, ptr %139, i64 0, i32 1
  %140 = tail call ptr @malloc(i32 128)
  store ptr %140, ptr %memberidx2.i120, align 8
  store ptr %73, ptr %140, align 8
  %141 = getelementptr inbounds ptr, ptr %140, i64 1
  store ptr %104, ptr %141, align 8
  store i64 2, ptr %memberidx.i118, align 4
  %142 = tail call ptr @malloc(i32 41)
  %memberidx39 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i, i64 0, i32 2
  %143 = load ptr, ptr %memberidx39, align 8
  store i64 8, ptr %142, align 4
  %memberidx.i.i121 = getelementptr inbounds %Expression, ptr %142, i64 0, i32 2
  store i64 14, ptr %memberidx.i.i121, align 4
  %memberidx1.i.i122 = getelementptr inbounds %Expression, ptr %142, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i122, align 1
  %memberidx.i123 = getelementptr inbounds %CallExpression, ptr %142, i64 0, i32 4
  store ptr %138, ptr %memberidx.i123, align 8
  %memberidx1.i124 = getelementptr inbounds %CallExpression, ptr %142, i64 0, i32 5
  store ptr %139, ptr %memberidx1.i124, align 8
  %memberidx2.i125 = getelementptr inbounds %Expression, ptr %142, i64 0, i32 3
  store ptr %143, ptr %memberidx2.i125, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_bin_expr(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 4
  %4 = load i64, ptr %memberidx, align 4
  %5 = add i64 %4, -19
  %6 = icmp ult i64 %5, 12
  %7 = icmp eq i64 %4, 19
  %memberidx1 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 3
  %8 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %ExpressionNode, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx2, align 4
  %10 = icmp eq i64 %9, 13
  %11 = and i1 %7, %10
  br i1 %11, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %12 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %12, align 4
  %13 = load ptr, ptr %memberidx1, align 8
  %memberidx4 = getelementptr inbounds %ExpressionIndexNode, ptr %13, i64 0, i32 3
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %12, ptr %14)
  %memberidx5 = getelementptr inbounds %Expression, ptr %15, i64 0, i32 3
  %16 = load ptr, ptr %memberidx5, align 8
  %17 = load i64, ptr %16, align 4
  %18 = icmp eq i64 %17, 20
  br i1 %18, label %if.entry.i253, label %is_object.exit

if.entry.i253:                                    ; preds = %if.entry, %if.entry.i253
  %.tr5.i = phi ptr [ %19, %if.entry.i253 ], [ %16, %if.entry ]
  %memberidx1.i252 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %19 = load ptr, ptr %memberidx1.i252, align 8
  %20 = load i64, ptr %19, align 4
  %21 = icmp eq i64 %20, 20
  br i1 %21, label %if.entry.i253, label %is_object.exit

is_object.exit:                                   ; preds = %if.entry.i253, %if.entry
  %.lcssa.i = phi i64 [ %17, %if.entry ], [ %20, %if.entry.i253 ]
  %22 = icmp eq i64 %.lcssa.i, 13
  br i1 %22, label %if.entry6, label %is_object.exit.ifend_crit_edge

is_object.exit.ifend_crit_edge:                   ; preds = %is_object.exit
  %.pre = load ptr, ptr %memberidx1, align 8
  br label %ifend

ifend:                                            ; preds = %is_object.exit.ifend_crit_edge, %3
  %23 = phi ptr [ %.pre, %is_object.exit.ifend_crit_edge ], [ %8, %3 ]
  %24 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %1, ptr %23)
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %25 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %25, i64 0, i32 6
  %26 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %26, i64 0, i32 2
  %27 = load i64, ptr %memberidx2.i, align 4
  %28 = icmp sgt i64 %27, 0
  br i1 %28, label %common.ret, label %ifend12

common.ret:                                       ; preds = %ifend16, %ifend, %TypeChecker_error.exit, %if.entry102, %if.entry94, %if.entry88, %if.entry84, %ifend77, %ifend66, %ifend58, %if.entry31, %if.entry23, %if.entry14, %if.entry6
  %common.ret.op = phi ptr [ %29, %if.entry6 ], [ %41, %if.entry14 ], [ %57, %if.entry23 ], [ %61, %if.entry31 ], [ %95, %ifend58 ], [ %120, %ifend66 ], [ %134, %ifend77 ], [ %136, %if.entry84 ], [ %139, %if.entry88 ], [ %146, %if.entry94 ], [ %155, %if.entry102 ], [ null, %TypeChecker_error.exit ], [ null, %ifend ], [ null, %ifend16 ]
  ret ptr %common.ret.op

if.entry6:                                        ; preds = %is_object.exit
  %29 = tail call fastcc ptr @TypeChecker_check_object_setitem_expr(ptr %0, ptr %15, ptr %2)
  br label %common.ret

ifend12:                                          ; preds = %ifend
  %memberidx13 = getelementptr inbounds %Expression, ptr %24, i64 0, i32 3
  %30 = load ptr, ptr %memberidx13, align 8
  %31 = load i64, ptr %30, align 4
  %32 = icmp eq i64 %31, 20
  br i1 %32, label %if.entry.i256, label %is_object.exit258

if.entry.i256:                                    ; preds = %ifend12, %if.entry.i256
  %.tr5.i254 = phi ptr [ %33, %if.entry.i256 ], [ %30, %ifend12 ]
  %memberidx1.i255 = getelementptr inbounds %GenericType, ptr %.tr5.i254, i64 0, i32 3
  %33 = load ptr, ptr %memberidx1.i255, align 8
  %34 = load i64, ptr %33, align 4
  %35 = icmp eq i64 %34, 20
  br i1 %35, label %if.entry.i256, label %is_object.exit258

is_object.exit258:                                ; preds = %if.entry.i256, %ifend12
  %.lcssa.i257 = phi i64 [ %31, %ifend12 ], [ %34, %if.entry.i256 ]
  %36 = icmp eq i64 %.lcssa.i257, 13
  %37 = xor i1 %6, true
  %38 = and i1 %36, %37
  %39 = icmp ne i64 %4, 18
  %40 = and i1 %39, %38
  br i1 %40, label %if.entry14, label %ifend16

if.entry14:                                       ; preds = %is_object.exit258
  %41 = tail call fastcc ptr @TypeChecker_check_object_binary_expr(ptr %0, ptr %24, ptr %2, ptr null)
  br label %common.ret

ifend16:                                          ; preds = %is_object.exit258
  %memberidx18 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 5
  %42 = load ptr, ptr %memberidx18, align 8
  %43 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %30, ptr %42)
  %44 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i162 = getelementptr inbounds %Compiler, ptr %44, i64 0, i32 6
  %45 = load ptr, ptr %memberidx1.i162, align 8
  %memberidx2.i163 = getelementptr inbounds %Array_FloError_, ptr %45, i64 0, i32 2
  %46 = load i64, ptr %memberidx2.i163, align 4
  %47 = icmp sgt i64 %46, 0
  br i1 %47, label %common.ret, label %ifend21

ifend21:                                          ; preds = %ifend16
  %memberidx22 = getelementptr inbounds %Expression, ptr %43, i64 0, i32 3
  %48 = load ptr, ptr %memberidx22, align 8
  %49 = load i64, ptr %48, align 4
  %50 = icmp eq i64 %49, 20
  br i1 %50, label %if.entry.i261, label %is_object.exit263

if.entry.i261:                                    ; preds = %ifend21, %if.entry.i261
  %.tr5.i259 = phi ptr [ %51, %if.entry.i261 ], [ %48, %ifend21 ]
  %memberidx1.i260 = getelementptr inbounds %GenericType, ptr %.tr5.i259, i64 0, i32 3
  %51 = load ptr, ptr %memberidx1.i260, align 8
  %52 = load i64, ptr %51, align 4
  %53 = icmp eq i64 %52, 20
  br i1 %53, label %if.entry.i261, label %is_object.exit263

is_object.exit263:                                ; preds = %if.entry.i261, %ifend21
  %.lcssa.i262 = phi i64 [ %49, %ifend21 ], [ %52, %if.entry.i261 ]
  %54 = icmp eq i64 %.lcssa.i262, 13
  %55 = icmp eq i64 %4, 18
  %56 = and i1 %55, %54
  br i1 %56, label %if.entry23, label %ifend28

if.entry23:                                       ; preds = %is_object.exit263
  %57 = tail call fastcc ptr @TypeChecker_check_object_binary_expr(ptr %0, ptr %43, ptr %2, ptr %24)
  br label %common.ret

ifend28:                                          ; preds = %is_object.exit263
  %memberidx29 = getelementptr inbounds %Expression, ptr %24, i64 0, i32 1
  %58 = load i1, ptr %memberidx29, align 1
  %memberidx30 = getelementptr inbounds %Expression, ptr %43, i64 0, i32 1
  %59 = load i1, ptr %memberidx30, align 1
  %60 = and i1 %58, %59
  br i1 %6, label %if.entry31, label %ifend33

if.entry31:                                       ; preds = %ifend28
  %61 = tail call fastcc ptr @TypeChecker_check_assignment(ptr %0, ptr nonnull %24, ptr nonnull %43, ptr %2)
  br label %common.ret

ifend33:                                          ; preds = %ifend28
  %62 = load ptr, ptr %memberidx13, align 8
  %63 = load i64, ptr %62, align 4
  %64 = icmp eq i64 %63, 21
  %65 = icmp ne i64 %49, 21
  %66 = and i1 %65, %64
  br i1 %66, label %if.entry38, label %ifend40

if.entry38:                                       ; preds = %ifend33
  store ptr %48, ptr %memberidx13, align 8
  %.pre268 = load i64, ptr %48, align 4
  %.pre269 = load ptr, ptr %memberidx22, align 8
  %.pre270 = load i64, ptr %.pre269, align 4
  br label %ifend40

ifend40:                                          ; preds = %ifend33, %if.entry38
  %67 = phi i64 [ %49, %ifend33 ], [ %.pre270, %if.entry38 ]
  %68 = phi ptr [ %48, %ifend33 ], [ %.pre269, %if.entry38 ]
  %69 = phi i64 [ %63, %ifend33 ], [ %.pre268, %if.entry38 ]
  %70 = phi ptr [ %62, %ifend33 ], [ %48, %if.entry38 ]
  %71 = add i64 %69, -1
  %72 = icmp ult i64 %71, 11
  %73 = add i64 %67, -1
  %74 = icmp ult i64 %73, 11
  %75 = and i1 %72, %74
  br i1 %75, label %if.entry45, label %else46

if.entry45:                                       ; preds = %ifend40
  %76 = icmp eq i64 %4, 6
  br i1 %76, label %if.entry48, label %ifend50

else46:                                           ; preds = %ifend40
  %77 = or i64 %67, %69
  %78 = icmp eq i64 %77, 0
  %79 = add i64 %4, -15
  %80 = icmp ult i64 %79, 2
  %or.cond = select i1 %78, i1 %80, i1 false
  br i1 %or.cond, label %if.entry84, label %ifend47

ifend47:                                          ; preds = %else46, %ifend62
  %81 = add i64 %4, -7
  %82 = icmp ult i64 %81, 6
  br i1 %82, label %if.entry88, label %ifend90

if.entry48:                                       ; preds = %if.entry45
  %83 = icmp ult i64 %71, 7
  br i1 %83, label %if.entry52, label %ifend54

ifend50:                                          ; preds = %if.entry45
  %84 = add i64 %4, -1
  %85 = icmp ult i64 %84, 10
  br i1 %85, label %if.entry60, label %ifend62

if.entry52:                                       ; preds = %if.entry48
  %86 = tail call ptr @malloc(i32 8)
  store i64 11, ptr %86, align 4
  %87 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %87, align 4
  %memberidx.i.i.i = getelementptr inbounds %Expression, ptr %87, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i, align 4
  %memberidx1.i.i.i = getelementptr inbounds %Expression, ptr %87, i64 0, i32 1
  %memberidx.i.i = getelementptr inbounds %TypeCastExpression, ptr %87, i64 0, i32 4
  store ptr %24, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %Expression, ptr %87, i64 0, i32 3
  store ptr %86, ptr %memberidx1.i.i, align 8
  %88 = load i1, ptr %memberidx29, align 1
  store i1 %88, ptr %memberidx1.i.i.i, align 1
  %.pre275 = load ptr, ptr %memberidx22, align 8
  %.pre276 = load i64, ptr %.pre275, align 4
  %.pre277 = add i64 %.pre276, -1
  br label %ifend54

ifend54:                                          ; preds = %if.entry48, %if.entry52
  %.pre-phi = phi i64 [ %73, %if.entry48 ], [ %.pre277, %if.entry52 ]
  %89 = phi ptr [ %24, %if.entry48 ], [ %87, %if.entry52 ]
  %90 = icmp ult i64 %.pre-phi, 7
  br i1 %90, label %if.entry56, label %ifend58

if.entry56:                                       ; preds = %ifend54
  %91 = tail call ptr @malloc(i32 8)
  store i64 11, ptr %91, align 4
  %92 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %92, align 4
  %memberidx.i.i.i167 = getelementptr inbounds %Expression, ptr %92, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i167, align 4
  %memberidx1.i.i.i168 = getelementptr inbounds %Expression, ptr %92, i64 0, i32 1
  %memberidx.i.i169 = getelementptr inbounds %TypeCastExpression, ptr %92, i64 0, i32 4
  store ptr %43, ptr %memberidx.i.i169, align 8
  %memberidx1.i.i170 = getelementptr inbounds %Expression, ptr %92, i64 0, i32 3
  store ptr %91, ptr %memberidx1.i.i170, align 8
  %93 = load i1, ptr %memberidx30, align 1
  store i1 %93, ptr %memberidx1.i.i.i168, align 1
  br label %ifend58

ifend58:                                          ; preds = %ifend54, %if.entry56
  %94 = phi ptr [ %43, %ifend54 ], [ %92, %if.entry56 ]
  %95 = tail call ptr @malloc(i32 49)
  %memberidx59 = getelementptr inbounds %Expression, ptr %89, i64 0, i32 3
  %96 = load ptr, ptr %memberidx59, align 8
  store i64 8, ptr %95, align 4
  %memberidx.i.i173 = getelementptr inbounds %Expression, ptr %95, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i173, align 4
  %memberidx1.i.i174 = getelementptr inbounds %Expression, ptr %95, i64 0, i32 1
  %memberidx.i175 = getelementptr inbounds %BinaryExpression, ptr %95, i64 0, i32 4
  store ptr %89, ptr %memberidx.i175, align 8
  %memberidx1.i176 = getelementptr inbounds %BinaryExpression, ptr %95, i64 0, i32 5
  store i64 6, ptr %memberidx1.i176, align 4
  %memberidx2.i177 = getelementptr inbounds %BinaryExpression, ptr %95, i64 0, i32 6
  store ptr %94, ptr %memberidx2.i177, align 8
  %memberidx3.i = getelementptr inbounds %Expression, ptr %95, i64 0, i32 3
  store ptr %96, ptr %memberidx3.i, align 8
  store i1 false, ptr %memberidx1.i.i174, align 1
  br label %common.ret

if.entry60:                                       ; preds = %ifend50
  %.not.i = icmp eq i64 %69, %67
  br i1 %.not.i, label %check_cast_lower_bits.exit, label %if.entry.i

if.entry.i:                                       ; preds = %if.entry60
  %97 = and i64 %69, -4
  %98 = icmp eq i64 %97, 8
  %99 = icmp ult i64 %73, 7
  %100 = and i1 %98, %99
  br i1 %100, label %if.entry5.i, label %else6.i

if.entry5.i:                                      ; preds = %if.entry.i
  %101 = tail call ptr @malloc(i32 33)
  br label %check_cast_lower_bits.exit.sink.split

else6.i:                                          ; preds = %if.entry.i
  %102 = icmp ult i64 %71, 7
  %103 = and i64 %67, -4
  %104 = icmp eq i64 %103, 8
  %105 = and i1 %102, %104
  br i1 %105, label %if.entry10.i, label %else11.i

if.entry10.i:                                     ; preds = %else6.i
  %106 = tail call ptr @malloc(i32 33)
  br label %check_cast_lower_bits.exit.sink.split

else11.i:                                         ; preds = %else6.i
  %107 = icmp ugt i64 %69, %67
  %ternary.i.i = select i1 %107, ptr %70, ptr %68
  %108 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %108, align 4
  %memberidx.i.i.i37.i = getelementptr inbounds %Expression, ptr %108, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i37.i, align 4
  %memberidx1.i.i.i38.i = getelementptr inbounds %Expression, ptr %108, i64 0, i32 1
  %memberidx.i.i39.i = getelementptr inbounds %TypeCastExpression, ptr %108, i64 0, i32 4
  store ptr %24, ptr %memberidx.i.i39.i, align 8
  %memberidx1.i.i40.i = getelementptr inbounds %Expression, ptr %108, i64 0, i32 3
  store ptr %ternary.i.i, ptr %memberidx1.i.i40.i, align 8
  %109 = load i1, ptr %memberidx29, align 1
  store i1 %109, ptr %memberidx1.i.i.i38.i, align 1
  %110 = tail call ptr @malloc(i32 33)
  br label %check_cast_lower_bits.exit.sink.split

check_cast_lower_bits.exit.sink.split:            ; preds = %else11.i, %if.entry10.i, %if.entry5.i
  %.sink286 = phi ptr [ %101, %if.entry5.i ], [ %106, %if.entry10.i ], [ %110, %else11.i ]
  %.sink282 = phi ptr [ %43, %if.entry5.i ], [ %24, %if.entry10.i ], [ %43, %else11.i ]
  %.sink = phi ptr [ %70, %if.entry5.i ], [ %68, %if.entry10.i ], [ %ternary.i.i, %else11.i ]
  %memberidx30.sink = phi ptr [ %memberidx30, %if.entry5.i ], [ %memberidx29, %if.entry10.i ], [ %memberidx30, %else11.i ]
  %.ph = phi ptr [ %101, %if.entry5.i ], [ %43, %if.entry10.i ], [ %110, %else11.i ]
  %.ph280 = phi ptr [ %24, %if.entry5.i ], [ %106, %if.entry10.i ], [ %108, %else11.i ]
  store i64 8, ptr %.sink286, align 4
  %memberidx.i.i.i43.i = getelementptr inbounds %Expression, ptr %.sink286, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i43.i, align 4
  %memberidx1.i.i.i44.i = getelementptr inbounds %Expression, ptr %.sink286, i64 0, i32 1
  %memberidx.i.i45.i = getelementptr inbounds %TypeCastExpression, ptr %.sink286, i64 0, i32 4
  store ptr %.sink282, ptr %memberidx.i.i45.i, align 8
  %memberidx1.i.i46.i = getelementptr inbounds %Expression, ptr %.sink286, i64 0, i32 3
  store ptr %.sink, ptr %memberidx1.i.i46.i, align 8
  %111 = load i1, ptr %memberidx30.sink, align 1
  store i1 %111, ptr %memberidx1.i.i.i44.i, align 1
  br label %check_cast_lower_bits.exit

check_cast_lower_bits.exit:                       ; preds = %check_cast_lower_bits.exit.sink.split, %if.entry60
  %112 = phi ptr [ %43, %if.entry60 ], [ %.ph, %check_cast_lower_bits.exit.sink.split ]
  %113 = phi ptr [ %24, %if.entry60 ], [ %.ph280, %check_cast_lower_bits.exit.sink.split ]
  %memberidx63 = getelementptr inbounds %Expression, ptr %113, i64 0, i32 3
  %114 = load ptr, ptr %memberidx63, align 8
  %115 = icmp ugt i64 %4, 6
  br i1 %115, label %if.entry64, label %ifend66

ifend62:                                          ; preds = %ifend50
  %116 = add i64 %4, -13
  %117 = icmp ult i64 %116, 5
  br i1 %117, label %if.entry67, label %ifend47

if.entry64:                                       ; preds = %check_cast_lower_bits.exit
  %118 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %118, align 4
  br label %ifend66

ifend66:                                          ; preds = %check_cast_lower_bits.exit, %if.entry64
  %119 = phi ptr [ %114, %check_cast_lower_bits.exit ], [ %118, %if.entry64 ]
  %120 = tail call ptr @malloc(i32 49)
  store i64 8, ptr %120, align 4
  %memberidx.i.i182 = getelementptr inbounds %Expression, ptr %120, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i182, align 4
  %memberidx1.i.i183 = getelementptr inbounds %Expression, ptr %120, i64 0, i32 1
  %memberidx.i184 = getelementptr inbounds %BinaryExpression, ptr %120, i64 0, i32 4
  store ptr %113, ptr %memberidx.i184, align 8
  %memberidx1.i185 = getelementptr inbounds %BinaryExpression, ptr %120, i64 0, i32 5
  store i64 %4, ptr %memberidx1.i185, align 4
  %memberidx2.i186 = getelementptr inbounds %BinaryExpression, ptr %120, i64 0, i32 6
  store ptr %112, ptr %memberidx2.i186, align 8
  %memberidx3.i187 = getelementptr inbounds %Expression, ptr %120, i64 0, i32 3
  store ptr %119, ptr %memberidx3.i187, align 8
  store i1 %60, ptr %memberidx1.i.i183, align 1
  br label %common.ret

if.entry67:                                       ; preds = %ifend62
  %121 = and i64 %69, -4
  %122 = icmp eq i64 %121, 8
  br i1 %122, label %if.entry71, label %ifend73

if.entry71:                                       ; preds = %if.entry67
  %123 = tail call ptr @malloc(i32 8)
  store i64 7, ptr %123, align 4
  %124 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %124, align 4
  %memberidx.i.i.i189 = getelementptr inbounds %Expression, ptr %124, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i189, align 4
  %memberidx1.i.i.i190 = getelementptr inbounds %Expression, ptr %124, i64 0, i32 1
  %memberidx.i.i191 = getelementptr inbounds %TypeCastExpression, ptr %124, i64 0, i32 4
  store ptr %24, ptr %memberidx.i.i191, align 8
  %memberidx1.i.i192 = getelementptr inbounds %Expression, ptr %124, i64 0, i32 3
  store ptr %123, ptr %memberidx1.i.i192, align 8
  %125 = load i1, ptr %memberidx29, align 1
  store i1 %125, ptr %memberidx1.i.i.i190, align 1
  %.pre273 = load ptr, ptr %memberidx22, align 8
  %.pre274 = load i64, ptr %.pre273, align 4
  br label %ifend73

ifend73:                                          ; preds = %if.entry67, %if.entry71
  %126 = phi ptr [ %24, %if.entry67 ], [ %124, %if.entry71 ]
  %127 = phi i64 [ %67, %if.entry67 ], [ %.pre274, %if.entry71 ]
  %128 = and i64 %127, -4
  %129 = icmp eq i64 %128, 8
  br i1 %129, label %if.entry75, label %ifend77

if.entry75:                                       ; preds = %ifend73
  %130 = tail call ptr @malloc(i32 8)
  store i64 7, ptr %130, align 4
  %131 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %131, align 4
  %memberidx.i.i.i195 = getelementptr inbounds %Expression, ptr %131, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i195, align 4
  %memberidx1.i.i.i196 = getelementptr inbounds %Expression, ptr %131, i64 0, i32 1
  %memberidx.i.i197 = getelementptr inbounds %TypeCastExpression, ptr %131, i64 0, i32 4
  store ptr %43, ptr %memberidx.i.i197, align 8
  %memberidx1.i.i198 = getelementptr inbounds %Expression, ptr %131, i64 0, i32 3
  store ptr %130, ptr %memberidx1.i.i198, align 8
  %132 = load i1, ptr %memberidx30, align 1
  store i1 %132, ptr %memberidx1.i.i.i196, align 1
  br label %ifend77

ifend77:                                          ; preds = %ifend73, %if.entry75
  %133 = phi ptr [ %43, %ifend73 ], [ %131, %if.entry75 ]
  %134 = tail call ptr @malloc(i32 49)
  %memberidx78 = getelementptr inbounds %Expression, ptr %126, i64 0, i32 3
  %135 = load ptr, ptr %memberidx78, align 8
  store i64 8, ptr %134, align 4
  %memberidx.i.i201 = getelementptr inbounds %Expression, ptr %134, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i201, align 4
  %memberidx1.i.i202 = getelementptr inbounds %Expression, ptr %134, i64 0, i32 1
  %memberidx.i203 = getelementptr inbounds %BinaryExpression, ptr %134, i64 0, i32 4
  store ptr %126, ptr %memberidx.i203, align 8
  %memberidx1.i204 = getelementptr inbounds %BinaryExpression, ptr %134, i64 0, i32 5
  store i64 %4, ptr %memberidx1.i204, align 4
  %memberidx2.i205 = getelementptr inbounds %BinaryExpression, ptr %134, i64 0, i32 6
  store ptr %133, ptr %memberidx2.i205, align 8
  %memberidx3.i206 = getelementptr inbounds %Expression, ptr %134, i64 0, i32 3
  store ptr %135, ptr %memberidx3.i206, align 8
  store i1 %60, ptr %memberidx1.i.i202, align 1
  br label %common.ret

if.entry84:                                       ; preds = %else46
  %136 = tail call ptr @malloc(i32 49)
  %137 = load ptr, ptr %memberidx13, align 8
  store i64 8, ptr %136, align 4
  %memberidx.i.i208 = getelementptr inbounds %Expression, ptr %136, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i208, align 4
  %memberidx1.i.i209 = getelementptr inbounds %Expression, ptr %136, i64 0, i32 1
  %memberidx.i210 = getelementptr inbounds %BinaryExpression, ptr %136, i64 0, i32 4
  store ptr %24, ptr %memberidx.i210, align 8
  %memberidx1.i211 = getelementptr inbounds %BinaryExpression, ptr %136, i64 0, i32 5
  store i64 %4, ptr %memberidx1.i211, align 4
  %memberidx2.i212 = getelementptr inbounds %BinaryExpression, ptr %136, i64 0, i32 6
  store ptr %43, ptr %memberidx2.i212, align 8
  %memberidx3.i213 = getelementptr inbounds %Expression, ptr %136, i64 0, i32 3
  store ptr %137, ptr %memberidx3.i213, align 8
  store i1 %60, ptr %memberidx1.i.i209, align 1
  br label %common.ret

if.entry88:                                       ; preds = %ifend47
  %138 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %138, align 4
  %139 = tail call ptr @malloc(i32 49)
  store i64 8, ptr %139, align 4
  %memberidx.i.i215 = getelementptr inbounds %Expression, ptr %139, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i215, align 4
  %memberidx1.i.i216 = getelementptr inbounds %Expression, ptr %139, i64 0, i32 1
  %memberidx.i217 = getelementptr inbounds %BinaryExpression, ptr %139, i64 0, i32 4
  store ptr %24, ptr %memberidx.i217, align 8
  %memberidx1.i218 = getelementptr inbounds %BinaryExpression, ptr %139, i64 0, i32 5
  store i64 %4, ptr %memberidx1.i218, align 4
  %memberidx2.i219 = getelementptr inbounds %BinaryExpression, ptr %139, i64 0, i32 6
  store ptr %43, ptr %memberidx2.i219, align 8
  %memberidx3.i220 = getelementptr inbounds %Expression, ptr %139, i64 0, i32 3
  store ptr %138, ptr %memberidx3.i220, align 8
  store i1 %60, ptr %memberidx1.i.i216, align 1
  br label %common.ret

ifend90:                                          ; preds = %ifend47
  %140 = add i64 %4, -1
  %141 = icmp ult i64 %140, 2
  %142 = icmp eq i64 %69, 15
  %143 = and i1 %141, %142
  %144 = icmp eq i64 %67, 7
  %145 = and i1 %143, %144
  br i1 %145, label %if.entry94, label %ifend96

if.entry94:                                       ; preds = %ifend90
  %146 = tail call ptr @malloc(i32 49)
  %147 = load ptr, ptr %memberidx13, align 8
  store i64 8, ptr %146, align 4
  %memberidx.i.i222 = getelementptr inbounds %Expression, ptr %146, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i222, align 4
  %memberidx1.i.i223 = getelementptr inbounds %Expression, ptr %146, i64 0, i32 1
  %memberidx.i224 = getelementptr inbounds %BinaryExpression, ptr %146, i64 0, i32 4
  store ptr %24, ptr %memberidx.i224, align 8
  %memberidx1.i225 = getelementptr inbounds %BinaryExpression, ptr %146, i64 0, i32 5
  store i64 %4, ptr %memberidx1.i225, align 4
  %memberidx2.i226 = getelementptr inbounds %BinaryExpression, ptr %146, i64 0, i32 6
  store ptr %43, ptr %memberidx2.i226, align 8
  %memberidx3.i227 = getelementptr inbounds %Expression, ptr %146, i64 0, i32 3
  store ptr %147, ptr %memberidx3.i227, align 8
  store i1 false, ptr %memberidx1.i.i223, align 1
  br label %common.ret

ifend96:                                          ; preds = %ifend90
  %148 = icmp eq i64 %4, 31
  %149 = icmp eq i64 %69, 7
  %150 = and i1 %148, %149
  %151 = and i1 %150, %144
  br i1 %151, label %if.entry102, label %ifend104

if.entry102:                                      ; preds = %ifend96
  %152 = tail call ptr @malloc(i32 40)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %152, ptr noundef nonnull align 8 dereferenceable(5) @218, i64 5, i1 false)
  %153 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %153, align 8
  %memberidx.i.i229 = getelementptr inbounds %string, ptr %153, i64 0, i32 1
  store ptr %152, ptr %memberidx.i.i229, align 8
  %memberidx1.i.i230 = getelementptr inbounds %string, ptr %153, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i230, align 4
  %memberidx2.i.i231 = getelementptr inbounds %string, ptr %153, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i231, align 4
  %154 = tail call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr nonnull %153)
  %155 = tail call ptr @malloc(i32 42)
  %156 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %156, align 8
  %memberidx.i232 = getelementptr inbounds %Array_Expression_, ptr %156, i64 0, i32 2
  store i64 0, ptr %memberidx.i232, align 4
  %memberidx1.i233 = getelementptr inbounds %Array_Expression_, ptr %156, i64 0, i32 3
  store i64 16, ptr %memberidx1.i233, align 4
  %memberidx2.i234 = getelementptr inbounds %Array_Expression_, ptr %156, i64 0, i32 1
  %157 = tail call ptr @malloc(i32 128)
  store ptr %157, ptr %memberidx2.i234, align 8
  store ptr %24, ptr %157, align 8
  %158 = getelementptr inbounds ptr, ptr %157, i64 1
  store ptr %43, ptr %158, align 8
  store i64 2, ptr %memberidx.i232, align 4
  store i64 8, ptr %155, align 4
  %memberidx.i.i235 = getelementptr inbounds %Expression, ptr %155, i64 0, i32 2
  store i64 11, ptr %memberidx.i.i235, align 4
  %memberidx1.i.i236 = getelementptr inbounds %Expression, ptr %155, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i236, align 1
  %memberidx.i237 = getelementptr inbounds %NewExpression, ptr %155, i64 0, i32 6
  store ptr %154, ptr %memberidx.i237, align 8
  %memberidx1.i238 = getelementptr inbounds %NewExpression, ptr %155, i64 0, i32 5
  store i1 true, ptr %memberidx1.i238, align 1
  %memberidx2.i239 = getelementptr inbounds %NewExpression, ptr %155, i64 0, i32 4
  store ptr %156, ptr %memberidx2.i239, align 8
  %memberidx3.i240 = getelementptr inbounds %Expression, ptr %155, i64 0, i32 3
  store ptr %154, ptr %memberidx3.i240, align 8
  br label %common.ret

ifend104:                                         ; preds = %ifend96
  %159 = tail call fastcc ptr @dump_bin_op(i64 %4)
  %160 = load ptr, ptr %159, align 8
  %memberidx107 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %160, i64 0, i32 5
  %161 = load ptr, ptr %memberidx107, align 8
  %162 = tail call ptr %161(ptr nonnull %159)
  %163 = load ptr, ptr %memberidx13, align 8
  %164 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %163)
  %165 = load ptr, ptr %164, align 8
  %memberidx109 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %165, i64 0, i32 5
  %166 = load ptr, ptr %memberidx109, align 8
  %167 = tail call ptr %166(ptr nonnull %164)
  %168 = load ptr, ptr %memberidx22, align 8
  %169 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %168)
  %170 = load ptr, ptr %169, align 8
  %memberidx111 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %170, i64 0, i32 5
  %171 = load ptr, ptr %memberidx111, align 8
  %172 = tail call ptr %171(ptr nonnull %169)
  %173 = alloca ptr, align 8
  %174 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %173, ptr nonnull @219, ptr %162, ptr %167, ptr %172)
  %175 = load ptr, ptr %173, align 8
  %176 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %176, align 8
  %memberidx.i241 = getelementptr inbounds %string, ptr %176, i64 0, i32 1
  store ptr %175, ptr %memberidx.i241, align 8
  %memberidx1.i242 = getelementptr inbounds %string, ptr %176, i64 0, i32 2
  store i64 %174, ptr %memberidx1.i242, align 4
  %memberidx2.i243 = getelementptr inbounds %string, ptr %176, i64 0, i32 3
  store i64 %174, ptr %memberidx2.i243, align 4
  tail call void @free(ptr %162)
  tail call void @free(ptr %167)
  tail call void @free(ptr %172)
  %177 = load ptr, ptr %2, align 8
  %178 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i245 = getelementptr inbounds %Compiler, ptr %178, i64 0, i32 6
  %179 = load ptr, ptr %memberidx1.i245, align 8
  %180 = call ptr @malloc(i32 24)
  store i64 5, ptr %180, align 4
  %memberidx1.i.i246 = getelementptr inbounds %FloError, ptr %180, i64 0, i32 2
  store ptr %177, ptr %memberidx1.i.i246, align 8
  %memberidx2.i.i247 = getelementptr inbounds %FloError, ptr %180, i64 0, i32 1
  store ptr %176, ptr %memberidx2.i.i247, align 8
  %memberidx.i.i248 = getelementptr inbounds %Array_FloError_, ptr %179, i64 0, i32 2
  %181 = load i64, ptr %memberidx.i.i248, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %179, i64 0, i32 3
  %182 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %181, %182
  br i1 %.not.i.i, label %ifend104.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

ifend104.TypeChecker_error.exit_crit_edge:        ; preds = %ifend104
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %179, i64 0, i32 1
  %.pre272 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %ifend104
  %183 = shl i64 %182, 1
  store i64 %183, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i250 = getelementptr inbounds %Array_FloError_, ptr %179, i64 0, i32 1
  %184 = load ptr, ptr %memberidx2.i.i.i250, align 8
  %185 = shl i64 %182, 4
  %186 = call ptr @realloc(ptr %184, i64 %185)
  store ptr %186, ptr %memberidx2.i.i.i250, align 8
  %.pre271 = load i64, ptr %memberidx.i.i248, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %ifend104.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %187 = phi ptr [ %.pre272, %ifend104.TypeChecker_error.exit_crit_edge ], [ %186, %if.entry.i.i ]
  %188 = phi i64 [ %181, %ifend104.TypeChecker_error.exit_crit_edge ], [ %.pre271, %if.entry.i.i ]
  %189 = add i64 %188, 1
  store i64 %189, ptr %memberidx.i.i248, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %187, i64 %188
  store ptr %180, ptr %ptridx.i.i, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_call_expr(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %3, align 4
  %memberidx = getelementptr inbounds %CallExpressionNode, ptr %1, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %3, ptr %4)
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %6 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %6, i64 0, i32 6
  %7 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx2.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %common.ret, label %ifend

common.ret:                                       ; preds = %TypeChecker_error.exit96, %TypeChecker_error.exit117, %TypeChecker_get_func_args_from_expression.exit, %2, %ifend23, %TypeChecker_error.exit, %if.entry4
  %common.ret.op = phi ptr [ %16, %if.entry4 ], [ null, %TypeChecker_error.exit ], [ %87, %ifend23 ], [ null, %2 ], [ null, %TypeChecker_get_func_args_from_expression.exit ], [ null, %TypeChecker_error.exit117 ], [ null, %TypeChecker_error.exit96 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %2
  %memberidx1 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 2
  %10 = load i64, ptr %memberidx1, align 4
  %11 = icmp eq i64 %10, 16
  %memberidx2 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 3
  %12 = load ptr, ptr %memberidx2, align 8
  %13 = load i64, ptr %12, align 4
  %14 = icmp eq i64 %13, 21
  %15 = and i1 %11, %14
  br i1 %15, label %if.entry4, label %ifend6

if.entry4:                                        ; preds = %ifend
  %16 = tail call fastcc ptr @TypeChecker_check_intrinsic_call(ptr nonnull %0, ptr nonnull %5, ptr nonnull %1)
  br label %common.ret

ifend6:                                           ; preds = %ifend
  %.not = icmp eq i64 %13, 17
  br i1 %.not, label %ifend11, label %if.entry9

if.entry9:                                        ; preds = %ifend6
  %17 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr nonnull %12)
  %18 = load ptr, ptr %17, align 8
  %memberidx13 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %18, i64 0, i32 5
  %19 = load ptr, ptr %memberidx13, align 8
  %20 = tail call ptr %19(ptr nonnull %17)
  %21 = alloca ptr, align 8
  %22 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %21, ptr nonnull @249, ptr %20)
  %23 = load ptr, ptr %21, align 8
  %24 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %24, align 8
  %memberidx.i62 = getelementptr inbounds %string, ptr %24, i64 0, i32 1
  store ptr %23, ptr %memberidx.i62, align 8
  %memberidx1.i63 = getelementptr inbounds %string, ptr %24, i64 0, i32 2
  store i64 %22, ptr %memberidx1.i63, align 4
  %memberidx2.i64 = getelementptr inbounds %string, ptr %24, i64 0, i32 3
  store i64 %22, ptr %memberidx2.i64, align 4
  tail call void @free(ptr %20)
  %25 = load ptr, ptr %memberidx, align 8
  %26 = load ptr, ptr %25, align 8
  %27 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i66 = getelementptr inbounds %Compiler, ptr %27, i64 0, i32 6
  %28 = load ptr, ptr %memberidx1.i66, align 8
  %29 = call ptr @malloc(i32 24)
  store i64 5, ptr %29, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %29, i64 0, i32 2
  store ptr %26, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %29, i64 0, i32 1
  store ptr %24, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 2
  %30 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 3
  %31 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %30, %31
  br i1 %.not.i.i, label %if.entry9.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry9.TypeChecker_error.exit_crit_edge:       ; preds = %if.entry9
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 1
  %.pre14 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry9
  %32 = shl i64 %31, 1
  store i64 %32, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 1
  %33 = load ptr, ptr %memberidx2.i.i.i, align 8
  %34 = shl i64 %31, 4
  %35 = call ptr @realloc(ptr %33, i64 %34)
  store ptr %35, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry9.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %36 = phi ptr [ %.pre14, %if.entry9.TypeChecker_error.exit_crit_edge ], [ %35, %if.entry.i.i ]
  %37 = phi i64 [ %30, %if.entry9.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %38 = add i64 %37, 1
  store i64 %38, ptr %memberidx.i.i, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %36, i64 %37
  store ptr %29, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend11:                                          ; preds = %ifend6
  switch i64 %10, label %TypeChecker_get_func_args_from_expression.exit [
    i64 7, label %if.entry.i
    i64 12, label %if.entry9.i
  ]

if.entry.i:                                       ; preds = %ifend11
  %memberidx1.i68 = getelementptr inbounds %VarAccessExpression, ptr %5, i64 0, i32 4
  %39 = load ptr, ptr %memberidx1.i68, align 8
  %40 = load i64, ptr %39, align 4
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %if.entry3.i, label %TypeChecker_get_func_args_from_expression.exit

if.entry3.i:                                      ; preds = %if.entry.i
  %42 = load ptr, ptr %0, align 8
  %memberidx.i.i69 = getelementptr inbounds %Program, ptr %42, i64 0, i32 1
  %43 = load ptr, ptr %memberidx.i.i69, align 8
  %memberidx1.i.i70 = getelementptr inbounds %VarId, ptr %39, i64 0, i32 1
  %44 = load i64, ptr %memberidx1.i.i70, align 4
  %memberidx.i.i.i71 = getelementptr inbounds %Array_Module_, ptr %43, i64 0, i32 1
  %45 = load ptr, ptr %memberidx.i.i.i71, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %45, i64 %44
  %46 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i72 = getelementptr inbounds %Module, ptr %46, i64 0, i32 5
  %47 = load ptr, ptr %memberidx2.i.i72, align 8
  %memberidx3.i.i = getelementptr inbounds %VarId, ptr %39, i64 0, i32 2
  %48 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Function_, ptr %47, i64 0, i32 1
  %49 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %49, i64 %48
  %50 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx7.i = getelementptr inbounds %Function, ptr %50, i64 0, i32 2
  br label %TypeChecker_get_func_args_from_expression.exit.sink.split

if.entry9.i:                                      ; preds = %ifend11
  %memberidx12.i = getelementptr inbounds %MemberExpression, ptr %5, i64 0, i32 5
  %51 = load ptr, ptr %memberidx12.i, align 8
  %52 = load ptr, ptr %0, align 8
  %memberidx.i.i19.i = getelementptr inbounds %PropId, ptr %51, i64 0, i32 1
  %53 = load ptr, ptr %memberidx.i.i19.i, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Program, ptr %52, i64 0, i32 1
  %54 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %55 = load i64, ptr %53, align 4
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %54, i64 0, i32 1
  %56 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %56, i64 %55
  %57 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  %memberidx2.i.i.i.i = getelementptr inbounds %Module, ptr %57, i64 0, i32 4
  %58 = load ptr, ptr %memberidx2.i.i.i.i, align 8
  %memberidx3.i.i.i.i = getelementptr inbounds %TypeId, ptr %53, i64 0, i32 2
  %59 = load i64, ptr %memberidx3.i.i.i.i, align 4
  %memberidx.i5.i.i.i.i = getelementptr inbounds %Array_Class_, ptr %58, i64 0, i32 1
  %60 = load ptr, ptr %memberidx.i5.i.i.i.i, align 8
  %ptridx.i6.i.i.i.i = getelementptr inbounds ptr, ptr %60, i64 %59
  %61 = load ptr, ptr %ptridx.i6.i.i.i.i, align 8
  %memberidx.i20.i = getelementptr inbounds %Class, ptr %61, i64 0, i32 5
  %62 = load ptr, ptr %memberidx.i20.i, align 8
  %memberidx1.i21.i = getelementptr inbounds %PropId, ptr %51, i64 0, i32 2
  %63 = load i64, ptr %memberidx1.i21.i, align 4
  %memberidx.i3.i.i = getelementptr inbounds %Array_ClassMethod_, ptr %62, i64 0, i32 1
  %64 = load ptr, ptr %memberidx.i3.i.i, align 8
  %ptridx.i.i22.i = getelementptr inbounds ptr, ptr %64, i64 %63
  %65 = load ptr, ptr %ptridx.i.i22.i, align 8
  %memberidx14.i = getelementptr inbounds %ClassMethod, ptr %65, i64 0, i32 6
  br label %TypeChecker_get_func_args_from_expression.exit.sink.split

TypeChecker_get_func_args_from_expression.exit.sink.split: ; preds = %if.entry9.i, %if.entry3.i
  %memberidx7.i.sink = phi ptr [ %memberidx7.i, %if.entry3.i ], [ %memberidx14.i, %if.entry9.i ]
  %66 = load ptr, ptr %memberidx7.i.sink, align 8
  br label %TypeChecker_get_func_args_from_expression.exit

TypeChecker_get_func_args_from_expression.exit:   ; preds = %TypeChecker_get_func_args_from_expression.exit.sink.split, %ifend11, %if.entry.i
  %common.ret.op.i = phi ptr [ null, %if.entry.i ], [ null, %ifend11 ], [ %66, %TypeChecker_get_func_args_from_expression.exit.sink.split ]
  %memberidx17 = getelementptr inbounds %CallExpressionNode, ptr %1, i64 0, i32 4
  %67 = load ptr, ptr %memberidx17, align 8
  %68 = tail call fastcc ptr @TypeChecker_fill_in_call_args(ptr nonnull %0, ptr nonnull %12, ptr %common.ret.op.i, ptr %67)
  %69 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i74 = getelementptr inbounds %Compiler, ptr %69, i64 0, i32 6
  %70 = load ptr, ptr %memberidx1.i74, align 8
  %memberidx2.i75 = getelementptr inbounds %Array_FloError_, ptr %70, i64 0, i32 2
  %71 = load i64, ptr %memberidx2.i75, align 4
  %72 = icmp sgt i64 %71, 0
  br i1 %72, label %common.ret, label %ifend20

ifend20:                                          ; preds = %TypeChecker_get_func_args_from_expression.exit
  %memberidx.i1 = getelementptr inbounds %FunctionType, ptr %12, i64 0, i32 1
  %73 = load ptr, ptr %memberidx.i1, align 8
  %memberidx1.i2 = getelementptr inbounds %Array_Type_, ptr %73, i64 0, i32 2
  %74 = load i64, ptr %memberidx1.i2, align 4
  %memberidx2.i3 = getelementptr inbounds %Array_Expression_, ptr %68, i64 0, i32 2
  %75 = load i64, ptr %memberidx2.i3, align 4
  %.not.i = icmp eq i64 %74, %75
  br i1 %.not.i, label %for.cond.preheader.i, label %if.entry24

for.cond.preheader.i:                             ; preds = %ifend20
  %76 = icmp sgt i64 %74, 0
  br i1 %76, label %for.body.lr.ph.i, label %ifend23

for.body.lr.ph.i:                                 ; preds = %for.cond.preheader.i
  %memberidx.i12.i = getelementptr inbounds %Array_Expression_, ptr %68, i64 0, i32 1
  br label %for.body.i

for.body.i:                                       ; preds = %ifend8.i, %for.body.lr.ph.i
  %storemerge14.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %84, %ifend8.i ]
  %77 = load ptr, ptr %memberidx.i1, align 8
  %memberidx.i.i5 = getelementptr inbounds %Array_Type_, ptr %77, i64 0, i32 1
  %78 = load ptr, ptr %memberidx.i.i5, align 8
  %ptridx.i.i6 = getelementptr inbounds ptr, ptr %78, i64 %storemerge14.i
  %79 = load ptr, ptr %ptridx.i.i6, align 8
  %80 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %80, i64 %storemerge14.i
  %81 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx5.i = getelementptr inbounds %Expression, ptr %81, i64 0, i32 3
  %82 = load ptr, ptr %memberidx5.i, align 8
  %83 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr %79, ptr %82)
  br i1 %83, label %ifend8.i, label %else25

ifend8.i:                                         ; preds = %for.body.i
  %84 = add nuw nsw i64 %storemerge14.i, 1
  %85 = load i64, ptr %memberidx2.i3, align 4
  %86 = icmp slt i64 %84, %85
  br i1 %86, label %for.body.i, label %ifend23

ifend23:                                          ; preds = %ifend8.i, %for.cond.preheader.i
  %87 = tail call ptr @malloc(i32 41)
  %memberidx37 = getelementptr inbounds %FunctionType, ptr %12, i64 0, i32 2
  %88 = load ptr, ptr %memberidx37, align 8
  store i64 8, ptr %87, align 4
  %memberidx.i.i76 = getelementptr inbounds %Expression, ptr %87, i64 0, i32 2
  store i64 14, ptr %memberidx.i.i76, align 4
  %memberidx1.i.i77 = getelementptr inbounds %Expression, ptr %87, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i77, align 1
  %memberidx.i78 = getelementptr inbounds %CallExpression, ptr %87, i64 0, i32 4
  store ptr %5, ptr %memberidx.i78, align 8
  %memberidx1.i79 = getelementptr inbounds %CallExpression, ptr %87, i64 0, i32 5
  store ptr %68, ptr %memberidx1.i79, align 8
  %memberidx2.i80 = getelementptr inbounds %Expression, ptr %87, i64 0, i32 3
  store ptr %88, ptr %memberidx2.i80, align 8
  br label %common.ret

if.entry24:                                       ; preds = %ifend20
  %89 = alloca ptr, align 8
  %90 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %89, ptr nonnull @250, i64 %74, i64 %75)
  %91 = load ptr, ptr %89, align 8
  %92 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %92, align 8
  %memberidx.i81 = getelementptr inbounds %string, ptr %92, i64 0, i32 1
  store ptr %91, ptr %memberidx.i81, align 8
  %memberidx1.i82 = getelementptr inbounds %string, ptr %92, i64 0, i32 2
  store i64 %90, ptr %memberidx1.i82, align 4
  %memberidx2.i83 = getelementptr inbounds %string, ptr %92, i64 0, i32 3
  store i64 %90, ptr %memberidx2.i83, align 4
  %93 = load ptr, ptr %1, align 8
  %94 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i85 = getelementptr inbounds %Compiler, ptr %94, i64 0, i32 6
  %95 = load ptr, ptr %memberidx1.i85, align 8
  %96 = call ptr @malloc(i32 24)
  store i64 4, ptr %96, align 4
  %memberidx1.i.i86 = getelementptr inbounds %FloError, ptr %96, i64 0, i32 2
  store ptr %93, ptr %memberidx1.i.i86, align 8
  %memberidx2.i.i87 = getelementptr inbounds %FloError, ptr %96, i64 0, i32 1
  store ptr %92, ptr %memberidx2.i.i87, align 8
  %memberidx.i.i88 = getelementptr inbounds %Array_FloError_, ptr %95, i64 0, i32 2
  %97 = load i64, ptr %memberidx.i.i88, align 4
  %memberidx1.i2.i89 = getelementptr inbounds %Array_FloError_, ptr %95, i64 0, i32 3
  %98 = load i64, ptr %memberidx1.i2.i89, align 4
  %.not.i.i90 = icmp slt i64 %97, %98
  br i1 %.not.i.i90, label %if.entry24.TypeChecker_error.exit96_crit_edge, label %if.entry.i.i93

if.entry24.TypeChecker_error.exit96_crit_edge:    ; preds = %if.entry24
  %memberidx4.i.i94.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %95, i64 0, i32 1
  %.pre16 = load ptr, ptr %memberidx4.i.i94.phi.trans.insert, align 8
  br label %TypeChecker_error.exit96

if.entry.i.i93:                                   ; preds = %if.entry24
  %99 = shl i64 %98, 1
  store i64 %99, ptr %memberidx1.i2.i89, align 4
  %memberidx2.i.i.i92 = getelementptr inbounds %Array_FloError_, ptr %95, i64 0, i32 1
  %100 = load ptr, ptr %memberidx2.i.i.i92, align 8
  %101 = shl i64 %98, 4
  %102 = call ptr @realloc(ptr %100, i64 %101)
  store ptr %102, ptr %memberidx2.i.i.i92, align 8
  %.pre15 = load i64, ptr %memberidx.i.i88, align 4
  br label %TypeChecker_error.exit96

TypeChecker_error.exit96:                         ; preds = %if.entry24.TypeChecker_error.exit96_crit_edge, %if.entry.i.i93
  %103 = phi ptr [ %.pre16, %if.entry24.TypeChecker_error.exit96_crit_edge ], [ %102, %if.entry.i.i93 ]
  %104 = phi i64 [ %97, %if.entry24.TypeChecker_error.exit96_crit_edge ], [ %.pre15, %if.entry.i.i93 ]
  %105 = add i64 %104, 1
  store i64 %105, ptr %memberidx.i.i88, align 4
  %ptridx.i.i95 = getelementptr inbounds ptr, ptr %103, i64 %104
  store ptr %96, ptr %ptridx.i.i95, align 8
  br label %common.ret

else25:                                           ; preds = %for.body.i
  %106 = load ptr, ptr %memberidx.i1, align 8
  %memberidx.i97 = getelementptr inbounds %Array_Type_, ptr %106, i64 0, i32 1
  %107 = load ptr, ptr %memberidx.i97, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %107, i64 %storemerge14.i
  %108 = load ptr, ptr %ptridx.i, align 8
  %109 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %108)
  %110 = load ptr, ptr %109, align 8
  %memberidx32 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %110, i64 0, i32 5
  %111 = load ptr, ptr %memberidx32, align 8
  %112 = tail call ptr %111(ptr nonnull %109)
  %113 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i99 = getelementptr inbounds ptr, ptr %113, i64 %storemerge14.i
  %114 = load ptr, ptr %ptridx.i99, align 8
  %memberidx33 = getelementptr inbounds %Expression, ptr %114, i64 0, i32 3
  %115 = load ptr, ptr %memberidx33, align 8
  %116 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %115)
  %117 = load ptr, ptr %116, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %117, i64 0, i32 5
  %118 = load ptr, ptr %memberidx34, align 8
  %119 = tail call ptr %118(ptr nonnull %116)
  %120 = alloca ptr, align 8
  %121 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %120, ptr nonnull @251, ptr %112, ptr %119)
  %122 = load ptr, ptr %120, align 8
  %123 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %123, align 8
  %memberidx.i100 = getelementptr inbounds %string, ptr %123, i64 0, i32 1
  store ptr %122, ptr %memberidx.i100, align 8
  %memberidx1.i101 = getelementptr inbounds %string, ptr %123, i64 0, i32 2
  store i64 %121, ptr %memberidx1.i101, align 4
  %memberidx2.i102 = getelementptr inbounds %string, ptr %123, i64 0, i32 3
  store i64 %121, ptr %memberidx2.i102, align 4
  tail call void @free(ptr %112)
  tail call void @free(ptr %119)
  %124 = load ptr, ptr %memberidx17, align 8
  %memberidx.i103 = getelementptr inbounds %Array_ExpressionNode_, ptr %124, i64 0, i32 1
  %125 = load ptr, ptr %memberidx.i103, align 8
  %ptridx.i104 = getelementptr inbounds ptr, ptr %125, i64 %storemerge14.i
  %126 = load ptr, ptr %ptridx.i104, align 8
  %127 = load ptr, ptr %126, align 8
  %128 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i106 = getelementptr inbounds %Compiler, ptr %128, i64 0, i32 6
  %129 = load ptr, ptr %memberidx1.i106, align 8
  %130 = call ptr @malloc(i32 24)
  store i64 5, ptr %130, align 4
  %memberidx1.i.i107 = getelementptr inbounds %FloError, ptr %130, i64 0, i32 2
  store ptr %127, ptr %memberidx1.i.i107, align 8
  %memberidx2.i.i108 = getelementptr inbounds %FloError, ptr %130, i64 0, i32 1
  store ptr %123, ptr %memberidx2.i.i108, align 8
  %memberidx.i.i109 = getelementptr inbounds %Array_FloError_, ptr %129, i64 0, i32 2
  %131 = load i64, ptr %memberidx.i.i109, align 4
  %memberidx1.i2.i110 = getelementptr inbounds %Array_FloError_, ptr %129, i64 0, i32 3
  %132 = load i64, ptr %memberidx1.i2.i110, align 4
  %.not.i.i111 = icmp slt i64 %131, %132
  br i1 %.not.i.i111, label %else25.TypeChecker_error.exit117_crit_edge, label %if.entry.i.i114

else25.TypeChecker_error.exit117_crit_edge:       ; preds = %else25
  %memberidx4.i.i115.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %129, i64 0, i32 1
  %.pre18 = load ptr, ptr %memberidx4.i.i115.phi.trans.insert, align 8
  br label %TypeChecker_error.exit117

if.entry.i.i114:                                  ; preds = %else25
  %133 = shl i64 %132, 1
  store i64 %133, ptr %memberidx1.i2.i110, align 4
  %memberidx2.i.i.i113 = getelementptr inbounds %Array_FloError_, ptr %129, i64 0, i32 1
  %134 = load ptr, ptr %memberidx2.i.i.i113, align 8
  %135 = shl i64 %132, 4
  %136 = call ptr @realloc(ptr %134, i64 %135)
  store ptr %136, ptr %memberidx2.i.i.i113, align 8
  %.pre17 = load i64, ptr %memberidx.i.i109, align 4
  br label %TypeChecker_error.exit117

TypeChecker_error.exit117:                        ; preds = %else25.TypeChecker_error.exit117_crit_edge, %if.entry.i.i114
  %137 = phi ptr [ %.pre18, %else25.TypeChecker_error.exit117_crit_edge ], [ %136, %if.entry.i.i114 ]
  %138 = phi i64 [ %131, %else25.TypeChecker_error.exit117_crit_edge ], [ %.pre17, %if.entry.i.i114 ]
  %139 = add i64 %138, 1
  store i64 %139, ptr %memberidx.i.i109, align 4
  %ptridx.i.i116 = getelementptr inbounds ptr, ptr %137, i64 %138
  store ptr %130, ptr %ptridx.i.i116, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_type(ptr %0, ptr %1) unnamed_addr {
  %memberidx = getelementptr inbounds %TypeNode, ptr %1, i64 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend62, %ifend77, %for.end67, %TypeChecker_error.exit, %ifend54, %for.end, %ifend36, %TypeChecker_error.exit173, %TypeChecker_error.exit189, %TypeChecker_error.exit205, %if.entry12, %if.entry8, %if.entry3, %if.entry
  %common.ret.op = phi ptr [ %5, %if.entry ], [ %8, %if.entry3 ], [ %10, %if.entry8 ], [ %11, %if.entry12 ], [ null, %TypeChecker_error.exit205 ], [ null, %TypeChecker_error.exit189 ], [ null, %TypeChecker_error.exit173 ], [ %75, %ifend36 ], [ %101, %for.end ], [ %108, %ifend54 ], [ null, %TypeChecker_error.exit ], [ null, %for.end67 ], [ %135, %ifend77 ], [ %110, %ifend62 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %5 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %5, align 4
  br label %common.ret

ifend:                                            ; preds = %2
  %6 = add i64 %3, -1
  %7 = icmp ult i64 %6, 11
  br i1 %7, label %if.entry3, label %ifend5

if.entry3:                                        ; preds = %ifend
  %8 = tail call ptr @malloc(i32 8)
  %9 = load i64, ptr %memberidx, align 4
  store i64 %9, ptr %8, align 4
  br label %common.ret

ifend5:                                           ; preds = %ifend
  switch i64 %3, label %ifend54 [
    i64 12, label %if.entry8
    i64 15, label %if.entry12
    i64 16, label %if.entry17
    i64 17, label %if.entry41
    i64 18, label %if.entry52
  ]

if.entry8:                                        ; preds = %ifend5
  %10 = tail call ptr @malloc(i32 8)
  store i64 12, ptr %10, align 4
  br label %common.ret

if.entry12:                                       ; preds = %ifend5
  %11 = tail call ptr @malloc(i32 16)
  %memberidx15 = getelementptr inbounds %PointerTypeNode, ptr %1, i64 0, i32 2
  %12 = load ptr, ptr %memberidx15, align 8
  %13 = tail call fastcc ptr @TypeChecker_check_type(ptr %0, ptr %12)
  store i64 15, ptr %11, align 4
  %memberidx.i209 = getelementptr inbounds %PointerType, ptr %11, i64 0, i32 1
  store ptr %13, ptr %memberidx.i209, align 8
  br label %common.ret

if.entry17:                                       ; preds = %ifend5
  %14 = tail call ptr @malloc(i32 8)
  store i64 7, ptr %14, align 4
  %memberidx20 = getelementptr inbounds %ArrayTypeNode, ptr %1, i64 0, i32 3
  %15 = load ptr, ptr %memberidx20, align 8
  %16 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %14, ptr %15)
  %memberidx21 = getelementptr inbounds %Expression, ptr %16, i64 0, i32 3
  %17 = load ptr, ptr %memberidx21, align 8
  %18 = load i64, ptr %17, align 4
  %19 = add i64 %18, -1
  %20 = icmp ult i64 %19, 7
  br i1 %20, label %ifend24, label %if.entry22

if.entry22:                                       ; preds = %if.entry17
  %21 = tail call ptr @malloc(i32 128)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %21, ptr noundef nonnull align 8 dereferenceable(16) @201, i64 16, i1 false)
  %22 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %22, align 8
  %memberidx.i.i206 = getelementptr inbounds %string, ptr %22, i64 0, i32 1
  store ptr %21, ptr %memberidx.i.i206, align 8
  %memberidx1.i.i207 = getelementptr inbounds %string, ptr %22, i64 0, i32 2
  store i64 16, ptr %memberidx1.i.i207, align 4
  %memberidx2.i.i208 = getelementptr inbounds %string, ptr %22, i64 0, i32 3
  store i64 16, ptr %memberidx2.i.i208, align 4
  %23 = load ptr, ptr %memberidx20, align 8
  %24 = load ptr, ptr %23, align 8
  %memberidx.i193 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %25 = load ptr, ptr %memberidx.i193, align 8
  %memberidx1.i194 = getelementptr inbounds %Compiler, ptr %25, i64 0, i32 6
  %26 = load ptr, ptr %memberidx1.i194, align 8
  %27 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %27, align 4
  %memberidx1.i.i195 = getelementptr inbounds %FloError, ptr %27, i64 0, i32 2
  store ptr %24, ptr %memberidx1.i.i195, align 8
  %memberidx2.i.i196 = getelementptr inbounds %FloError, ptr %27, i64 0, i32 1
  store ptr %22, ptr %memberidx2.i.i196, align 8
  %memberidx.i.i197 = getelementptr inbounds %Array_FloError_, ptr %26, i64 0, i32 2
  %28 = load i64, ptr %memberidx.i.i197, align 4
  %memberidx1.i2.i198 = getelementptr inbounds %Array_FloError_, ptr %26, i64 0, i32 3
  %29 = load i64, ptr %memberidx1.i2.i198, align 4
  %.not.i.i199 = icmp slt i64 %28, %29
  br i1 %.not.i.i199, label %if.entry22.TypeChecker_error.exit205_crit_edge, label %if.entry.i.i202

if.entry22.TypeChecker_error.exit205_crit_edge:   ; preds = %if.entry22
  %memberidx4.i.i203.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %26, i64 0, i32 1
  %.pre220 = load ptr, ptr %memberidx4.i.i203.phi.trans.insert, align 8
  br label %TypeChecker_error.exit205

if.entry.i.i202:                                  ; preds = %if.entry22
  %30 = shl i64 %29, 1
  store i64 %30, ptr %memberidx1.i2.i198, align 4
  %memberidx2.i.i.i201 = getelementptr inbounds %Array_FloError_, ptr %26, i64 0, i32 1
  %31 = load ptr, ptr %memberidx2.i.i.i201, align 8
  %32 = shl i64 %29, 4
  %33 = tail call ptr @realloc(ptr %31, i64 %32)
  store ptr %33, ptr %memberidx2.i.i.i201, align 8
  %.pre219 = load i64, ptr %memberidx.i.i197, align 4
  br label %TypeChecker_error.exit205

TypeChecker_error.exit205:                        ; preds = %if.entry22.TypeChecker_error.exit205_crit_edge, %if.entry.i.i202
  %34 = phi ptr [ %.pre220, %if.entry22.TypeChecker_error.exit205_crit_edge ], [ %33, %if.entry.i.i202 ]
  %35 = phi i64 [ %28, %if.entry22.TypeChecker_error.exit205_crit_edge ], [ %.pre219, %if.entry.i.i202 ]
  %36 = add i64 %35, 1
  store i64 %36, ptr %memberidx.i.i197, align 4
  %ptridx.i.i204 = getelementptr inbounds ptr, ptr %34, i64 %35
  store ptr %27, ptr %ptridx.i.i204, align 8
  br label %common.ret

ifend24:                                          ; preds = %if.entry17
  %memberidx27 = getelementptr inbounds %Expression, ptr %16, i64 0, i32 1
  %37 = load i1, ptr %memberidx27, align 1
  br i1 %37, label %ifend30, label %if.entry28

if.entry28:                                       ; preds = %ifend24
  %38 = tail call ptr @malloc(i32 240)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(30) %38, ptr noundef nonnull align 8 dereferenceable(30) @202, i64 30, i1 false)
  %39 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %39, align 8
  %memberidx.i.i190 = getelementptr inbounds %string, ptr %39, i64 0, i32 1
  store ptr %38, ptr %memberidx.i.i190, align 8
  %memberidx1.i.i191 = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  store i64 30, ptr %memberidx1.i.i191, align 4
  %memberidx2.i.i192 = getelementptr inbounds %string, ptr %39, i64 0, i32 3
  store i64 30, ptr %memberidx2.i.i192, align 4
  %40 = load ptr, ptr %memberidx20, align 8
  %41 = load ptr, ptr %40, align 8
  %memberidx.i177 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %42 = load ptr, ptr %memberidx.i177, align 8
  %memberidx1.i178 = getelementptr inbounds %Compiler, ptr %42, i64 0, i32 6
  %43 = load ptr, ptr %memberidx1.i178, align 8
  %44 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %44, align 4
  %memberidx1.i.i179 = getelementptr inbounds %FloError, ptr %44, i64 0, i32 2
  store ptr %41, ptr %memberidx1.i.i179, align 8
  %memberidx2.i.i180 = getelementptr inbounds %FloError, ptr %44, i64 0, i32 1
  store ptr %39, ptr %memberidx2.i.i180, align 8
  %memberidx.i.i181 = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 2
  %45 = load i64, ptr %memberidx.i.i181, align 4
  %memberidx1.i2.i182 = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 3
  %46 = load i64, ptr %memberidx1.i2.i182, align 4
  %.not.i.i183 = icmp slt i64 %45, %46
  br i1 %.not.i.i183, label %if.entry28.TypeChecker_error.exit189_crit_edge, label %if.entry.i.i186

if.entry28.TypeChecker_error.exit189_crit_edge:   ; preds = %if.entry28
  %memberidx4.i.i187.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 1
  %.pre222 = load ptr, ptr %memberidx4.i.i187.phi.trans.insert, align 8
  br label %TypeChecker_error.exit189

if.entry.i.i186:                                  ; preds = %if.entry28
  %47 = shl i64 %46, 1
  store i64 %47, ptr %memberidx1.i2.i182, align 4
  %memberidx2.i.i.i185 = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 1
  %48 = load ptr, ptr %memberidx2.i.i.i185, align 8
  %49 = shl i64 %46, 4
  %50 = tail call ptr @realloc(ptr %48, i64 %49)
  store ptr %50, ptr %memberidx2.i.i.i185, align 8
  %.pre221 = load i64, ptr %memberidx.i.i181, align 4
  br label %TypeChecker_error.exit189

TypeChecker_error.exit189:                        ; preds = %if.entry28.TypeChecker_error.exit189_crit_edge, %if.entry.i.i186
  %51 = phi ptr [ %.pre222, %if.entry28.TypeChecker_error.exit189_crit_edge ], [ %50, %if.entry.i.i186 ]
  %52 = phi i64 [ %45, %if.entry28.TypeChecker_error.exit189_crit_edge ], [ %.pre221, %if.entry.i.i186 ]
  %53 = add i64 %52, 1
  store i64 %53, ptr %memberidx.i.i181, align 4
  %ptridx.i.i188 = getelementptr inbounds ptr, ptr %51, i64 %52
  store ptr %44, ptr %ptridx.i.i188, align 8
  br label %common.ret

ifend30:                                          ; preds = %ifend24
  %54 = load ptr, ptr %0, align 8
  %55 = tail call fastcc i64 @evaluate_const_int_expression(ptr %54, ptr nonnull %16)
  %56 = icmp slt i64 %55, 0
  br i1 %56, label %if.entry34, label %ifend36

if.entry34:                                       ; preds = %ifend30
  %57 = tail call ptr @malloc(i32 248)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(31) %57, ptr noundef nonnull align 8 dereferenceable(31) @203, i64 31, i1 false)
  %58 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %58, align 8
  %memberidx.i.i174 = getelementptr inbounds %string, ptr %58, i64 0, i32 1
  store ptr %57, ptr %memberidx.i.i174, align 8
  %memberidx1.i.i175 = getelementptr inbounds %string, ptr %58, i64 0, i32 2
  store i64 31, ptr %memberidx1.i.i175, align 4
  %memberidx2.i.i176 = getelementptr inbounds %string, ptr %58, i64 0, i32 3
  store i64 31, ptr %memberidx2.i.i176, align 4
  %59 = load ptr, ptr %memberidx20, align 8
  %60 = load ptr, ptr %59, align 8
  %memberidx.i161 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %61 = load ptr, ptr %memberidx.i161, align 8
  %memberidx1.i162 = getelementptr inbounds %Compiler, ptr %61, i64 0, i32 6
  %62 = load ptr, ptr %memberidx1.i162, align 8
  %63 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %63, align 4
  %memberidx1.i.i163 = getelementptr inbounds %FloError, ptr %63, i64 0, i32 2
  store ptr %60, ptr %memberidx1.i.i163, align 8
  %memberidx2.i.i164 = getelementptr inbounds %FloError, ptr %63, i64 0, i32 1
  store ptr %58, ptr %memberidx2.i.i164, align 8
  %memberidx.i.i165 = getelementptr inbounds %Array_FloError_, ptr %62, i64 0, i32 2
  %64 = load i64, ptr %memberidx.i.i165, align 4
  %memberidx1.i2.i166 = getelementptr inbounds %Array_FloError_, ptr %62, i64 0, i32 3
  %65 = load i64, ptr %memberidx1.i2.i166, align 4
  %.not.i.i167 = icmp slt i64 %64, %65
  br i1 %.not.i.i167, label %if.entry34.TypeChecker_error.exit173_crit_edge, label %if.entry.i.i170

if.entry34.TypeChecker_error.exit173_crit_edge:   ; preds = %if.entry34
  %memberidx4.i.i171.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %62, i64 0, i32 1
  %.pre224 = load ptr, ptr %memberidx4.i.i171.phi.trans.insert, align 8
  br label %TypeChecker_error.exit173

if.entry.i.i170:                                  ; preds = %if.entry34
  %66 = shl i64 %65, 1
  store i64 %66, ptr %memberidx1.i2.i166, align 4
  %memberidx2.i.i.i169 = getelementptr inbounds %Array_FloError_, ptr %62, i64 0, i32 1
  %67 = load ptr, ptr %memberidx2.i.i.i169, align 8
  %68 = shl i64 %65, 4
  %69 = tail call ptr @realloc(ptr %67, i64 %68)
  store ptr %69, ptr %memberidx2.i.i.i169, align 8
  %.pre223 = load i64, ptr %memberidx.i.i165, align 4
  br label %TypeChecker_error.exit173

TypeChecker_error.exit173:                        ; preds = %if.entry34.TypeChecker_error.exit173_crit_edge, %if.entry.i.i170
  %70 = phi ptr [ %.pre224, %if.entry34.TypeChecker_error.exit173_crit_edge ], [ %69, %if.entry.i.i170 ]
  %71 = phi i64 [ %64, %if.entry34.TypeChecker_error.exit173_crit_edge ], [ %.pre223, %if.entry.i.i170 ]
  %72 = add i64 %71, 1
  store i64 %72, ptr %memberidx.i.i165, align 4
  %ptridx.i.i172 = getelementptr inbounds ptr, ptr %70, i64 %71
  store ptr %63, ptr %ptridx.i.i172, align 8
  br label %common.ret

ifend36:                                          ; preds = %ifend30
  %memberidx39 = getelementptr inbounds %ArrayTypeNode, ptr %1, i64 0, i32 2
  %73 = load ptr, ptr %memberidx39, align 8
  %74 = tail call fastcc ptr @TypeChecker_check_type(ptr nonnull %0, ptr %73)
  %75 = tail call ptr @malloc(i32 24)
  store i64 16, ptr %75, align 4
  %memberidx.i159 = getelementptr inbounds %ArrayType, ptr %75, i64 0, i32 1
  store ptr %74, ptr %memberidx.i159, align 8
  %memberidx1.i160 = getelementptr inbounds %ArrayType, ptr %75, i64 0, i32 2
  store i64 %55, ptr %memberidx1.i160, align 4
  br label %common.ret

if.entry41:                                       ; preds = %ifend5
  %76 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Type_, ptr %76, align 8
  %memberidx.i156 = getelementptr inbounds %Array_Type_, ptr %76, i64 0, i32 2
  store i64 0, ptr %memberidx.i156, align 4
  %memberidx1.i157 = getelementptr inbounds %Array_Type_, ptr %76, i64 0, i32 3
  store i64 8, ptr %memberidx1.i157, align 4
  %memberidx2.i158 = getelementptr inbounds %Array_Type_, ptr %76, i64 0, i32 1
  %77 = tail call ptr @malloc(i32 64)
  store ptr %77, ptr %memberidx2.i158, align 8
  store i64 0, ptr %memberidx.i156, align 4
  %memberidx46 = getelementptr inbounds %FunctionTypeNode, ptr %1, i64 0, i32 2
  %78 = load ptr, ptr %memberidx46, align 8
  %79 = tail call ptr @malloc(i32 33)
  %memberidx.i151 = getelementptr inbounds %Array_TypeNode_, ptr %78, i64 0, i32 1
  %80 = load ptr, ptr %memberidx.i151, align 8
  %memberidx1.i152 = getelementptr inbounds %Array_TypeNode_, ptr %78, i64 0, i32 2
  %81 = load i64, ptr %memberidx1.i152, align 4
  store ptr @VTableArrayIterator_TypeNode_, ptr %79, align 8
  %memberidx.i.i153 = getelementptr inbounds %Iterator_TypeNode_, ptr %79, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i153, align 1
  %memberidx1.i.i154 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %79, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i154, align 4
  %memberidx2.i.i155 = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %79, i64 0, i32 4
  store ptr %80, ptr %memberidx2.i.i155, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_TypeNode_, ptr %79, i64 0, i32 3
  store i64 %81, ptr %memberidx3.i.i, align 4
  %82 = load ptr, ptr @VTableArrayIterator_TypeNode_, align 8
  %83 = tail call ptr %82(ptr nonnull %79)
  %84 = load i1, ptr %memberidx.i.i153, align 1
  br i1 %84, label %for.end, label %for.body

for.body:                                         ; preds = %if.entry41, %Array_Type____sl__.exit150
  %storemerge121211 = phi ptr [ %97, %Array_Type____sl__.exit150 ], [ %83, %if.entry41 ]
  %85 = tail call fastcc ptr @TypeChecker_check_type(ptr %0, ptr %storemerge121211)
  %86 = load i64, ptr %memberidx.i156, align 4
  %87 = load i64, ptr %memberidx1.i157, align 4
  %.not.i144 = icmp slt i64 %86, %87
  br i1 %.not.i144, label %for.body.Array_Type____sl__.exit150_crit_edge, label %if.entry.i147

for.body.Array_Type____sl__.exit150_crit_edge:    ; preds = %for.body
  %.pre218 = load ptr, ptr %memberidx2.i158, align 8
  br label %Array_Type____sl__.exit150

if.entry.i147:                                    ; preds = %for.body
  %88 = shl i64 %87, 1
  store i64 %88, ptr %memberidx1.i157, align 4
  %89 = load ptr, ptr %memberidx2.i158, align 8
  %90 = shl i64 %87, 4
  %91 = tail call ptr @realloc(ptr %89, i64 %90)
  store ptr %91, ptr %memberidx2.i158, align 8
  %.pre217 = load i64, ptr %memberidx.i156, align 4
  br label %Array_Type____sl__.exit150

Array_Type____sl__.exit150:                       ; preds = %for.body.Array_Type____sl__.exit150_crit_edge, %if.entry.i147
  %92 = phi ptr [ %.pre218, %for.body.Array_Type____sl__.exit150_crit_edge ], [ %91, %if.entry.i147 ]
  %93 = phi i64 [ %86, %for.body.Array_Type____sl__.exit150_crit_edge ], [ %.pre217, %if.entry.i147 ]
  %94 = add i64 %93, 1
  store i64 %94, ptr %memberidx.i156, align 4
  %ptridx.i149 = getelementptr inbounds ptr, ptr %92, i64 %93
  store ptr %85, ptr %ptridx.i149, align 8
  %95 = load ptr, ptr %79, align 8
  %96 = load ptr, ptr %95, align 8
  %97 = tail call ptr %96(ptr nonnull %79)
  %98 = load i1, ptr %memberidx.i.i153, align 1
  br i1 %98, label %for.end, label %for.body

for.end:                                          ; preds = %Array_Type____sl__.exit150, %if.entry41
  tail call void @free(ptr nonnull %79)
  %memberidx50 = getelementptr inbounds %FunctionTypeNode, ptr %1, i64 0, i32 3
  %99 = load ptr, ptr %memberidx50, align 8
  %100 = tail call fastcc ptr @TypeChecker_check_type(ptr %0, ptr %99)
  %101 = tail call ptr @malloc(i32 25)
  store i64 17, ptr %101, align 4
  %memberidx.i140 = getelementptr inbounds %FunctionType, ptr %101, i64 0, i32 1
  store ptr %76, ptr %memberidx.i140, align 8
  %memberidx1.i141 = getelementptr inbounds %FunctionType, ptr %101, i64 0, i32 2
  store ptr %100, ptr %memberidx1.i141, align 8
  br label %common.ret

if.entry52:                                       ; preds = %ifend5
  %102 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Type_, ptr %102, align 8
  %memberidx.i137 = getelementptr inbounds %Array_Type_, ptr %102, i64 0, i32 2
  store i64 0, ptr %memberidx.i137, align 4
  %memberidx1.i138 = getelementptr inbounds %Array_Type_, ptr %102, i64 0, i32 3
  store i64 8, ptr %memberidx1.i138, align 4
  %memberidx2.i139 = getelementptr inbounds %Array_Type_, ptr %102, i64 0, i32 1
  %103 = tail call ptr @malloc(i32 64)
  store ptr %103, ptr %memberidx2.i139, align 8
  store i64 0, ptr %memberidx.i137, align 4
  %memberidx57 = getelementptr inbounds %RecordTypeNode, ptr %1, i64 0, i32 2
  %104 = load ptr, ptr %memberidx57, align 8
  %memberidx58 = getelementptr inbounds %RecordTypeNode, ptr %1, i64 0, i32 3
  %105 = load ptr, ptr %memberidx58, align 8
  %memberidx59 = getelementptr inbounds %Array_TypeNode_, ptr %105, i64 0, i32 2
  %106 = load i64, ptr %memberidx59, align 4
  %107 = icmp sgt i64 %106, 0
  br i1 %107, label %for.body65, label %ifend62

ifend54:                                          ; preds = %ifend5
  %108 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %108, align 4
  br label %common.ret

ifend62:                                          ; preds = %ifend77, %if.entry52
  %memberidx85 = getelementptr inbounds %IdentifierToken, ptr %104, i64 0, i32 2
  %109 = load ptr, ptr %memberidx85, align 8
  %110 = tail call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %109)
  %111 = load i64, ptr %110, align 4
  %112 = icmp eq i64 %111, 21
  br i1 %112, label %if.entry87, label %common.ret

for.body65:                                       ; preds = %if.entry52, %Array_Type____sl__.exit
  %113 = phi ptr [ %127, %Array_Type____sl__.exit ], [ %105, %if.entry52 ]
  %storemerge213 = phi i64 [ %126, %Array_Type____sl__.exit ], [ 0, %if.entry52 ]
  %memberidx.i135 = getelementptr inbounds %Array_TypeNode_, ptr %113, i64 0, i32 1
  %114 = load ptr, ptr %memberidx.i135, align 8
  %ptridx.i136 = getelementptr inbounds ptr, ptr %114, i64 %storemerge213
  %115 = load ptr, ptr %ptridx.i136, align 8
  %116 = tail call fastcc ptr @TypeChecker_check_type(ptr %0, ptr %115)
  %117 = load i64, ptr %memberidx.i137, align 4
  %118 = load i64, ptr %memberidx1.i138, align 4
  %.not.i = icmp slt i64 %117, %118
  br i1 %.not.i, label %for.body65.Array_Type____sl__.exit_crit_edge, label %if.entry.i

for.body65.Array_Type____sl__.exit_crit_edge:     ; preds = %for.body65
  %.pre214 = load ptr, ptr %memberidx2.i139, align 8
  br label %Array_Type____sl__.exit

if.entry.i:                                       ; preds = %for.body65
  %119 = shl i64 %118, 1
  store i64 %119, ptr %memberidx1.i138, align 4
  %120 = load ptr, ptr %memberidx2.i139, align 8
  %121 = shl i64 %118, 4
  %122 = tail call ptr @realloc(ptr %120, i64 %121)
  store ptr %122, ptr %memberidx2.i139, align 8
  %.pre = load i64, ptr %memberidx.i137, align 4
  br label %Array_Type____sl__.exit

Array_Type____sl__.exit:                          ; preds = %for.body65.Array_Type____sl__.exit_crit_edge, %if.entry.i
  %123 = phi ptr [ %.pre214, %for.body65.Array_Type____sl__.exit_crit_edge ], [ %122, %if.entry.i ]
  %124 = phi i64 [ %117, %for.body65.Array_Type____sl__.exit_crit_edge ], [ %.pre, %if.entry.i ]
  %125 = add i64 %124, 1
  store i64 %125, ptr %memberidx.i137, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %123, i64 %124
  store ptr %116, ptr %ptridx.i, align 8
  %126 = add nuw nsw i64 %storemerge213, 1
  %127 = load ptr, ptr %memberidx58, align 8
  %memberidx69 = getelementptr inbounds %Array_TypeNode_, ptr %127, i64 0, i32 2
  %128 = load i64, ptr %memberidx69, align 4
  %129 = icmp slt i64 %126, %128
  br i1 %129, label %for.body65, label %for.end67

for.end67:                                        ; preds = %Array_Type____sl__.exit
  %memberidx.i128 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %130 = load ptr, ptr %memberidx.i128, align 8
  %memberidx1.i129 = getelementptr inbounds %Compiler, ptr %130, i64 0, i32 6
  %131 = load ptr, ptr %memberidx1.i129, align 8
  %memberidx2.i130 = getelementptr inbounds %Array_FloError_, ptr %131, i64 0, i32 2
  %132 = load i64, ptr %memberidx2.i130, align 4
  %133 = icmp sgt i64 %132, 0
  br i1 %133, label %common.ret, label %ifend73

ifend73:                                          ; preds = %for.end67
  %memberidx74 = getelementptr inbounds %IdentifierToken, ptr %104, i64 0, i32 2
  %134 = load ptr, ptr %memberidx74, align 8
  %135 = tail call fastcc ptr @TypeChecker_create_generic_instance_in_module(ptr nonnull %0, ptr %134, ptr nonnull %102)
  %136 = load ptr, ptr %memberidx.i128, align 8
  %memberidx1.i126 = getelementptr inbounds %Compiler, ptr %136, i64 0, i32 6
  %137 = load ptr, ptr %memberidx1.i126, align 8
  %memberidx2.i127 = getelementptr inbounds %Array_FloError_, ptr %137, i64 0, i32 2
  %138 = load i64, ptr %memberidx2.i127, align 4
  %139 = icmp sgt i64 %138, 0
  br i1 %139, label %if.entry75, label %ifend77

if.entry75:                                       ; preds = %ifend73
  %memberidx.i124 = getelementptr inbounds %Array_FloError_, ptr %137, i64 0, i32 1
  %140 = load ptr, ptr %memberidx.i124, align 8
  %141 = load ptr, ptr %140, align 8
  %memberidx80 = getelementptr inbounds %FloError, ptr %141, i64 0, i32 2
  %142 = load ptr, ptr %1, align 8
  store ptr %142, ptr %memberidx80, align 8
  br label %ifend77

ifend77:                                          ; preds = %ifend73, %if.entry75
  %.not = icmp eq ptr %135, null
  br i1 %.not, label %ifend62, label %common.ret

if.entry87:                                       ; preds = %ifend62
  %143 = load ptr, ptr %memberidx85, align 8
  %144 = load ptr, ptr %143, align 8
  %memberidx91 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %144, i64 0, i32 5
  %145 = load ptr, ptr %memberidx91, align 8
  %146 = tail call ptr %145(ptr nonnull %143)
  %147 = alloca ptr, align 8
  %148 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %147, ptr nonnull @204, ptr %146)
  %149 = load ptr, ptr %147, align 8
  %150 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %150, align 8
  %memberidx.i122 = getelementptr inbounds %string, ptr %150, i64 0, i32 1
  store ptr %149, ptr %memberidx.i122, align 8
  %memberidx1.i123 = getelementptr inbounds %string, ptr %150, i64 0, i32 2
  store i64 %148, ptr %memberidx1.i123, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %150, i64 0, i32 3
  store i64 %148, ptr %memberidx2.i, align 4
  tail call void @free(ptr %146)
  %memberidx92 = getelementptr inbounds %Token, ptr %104, i64 0, i32 1
  %151 = load ptr, ptr %memberidx92, align 8
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %152 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %152, i64 0, i32 6
  %153 = load ptr, ptr %memberidx1.i, align 8
  %154 = call ptr @malloc(i32 24)
  store i64 5, ptr %154, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %154, i64 0, i32 2
  store ptr %151, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %154, i64 0, i32 1
  store ptr %150, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %153, i64 0, i32 2
  %155 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %153, i64 0, i32 3
  %156 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %155, %156
  br i1 %.not.i.i, label %if.entry87.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry87.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry87
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %153, i64 0, i32 1
  %.pre216 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry87
  %157 = shl i64 %156, 1
  store i64 %157, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %153, i64 0, i32 1
  %158 = load ptr, ptr %memberidx2.i.i.i, align 8
  %159 = shl i64 %156, 4
  %160 = call ptr @realloc(ptr %158, i64 %159)
  store ptr %160, ptr %memberidx2.i.i.i, align 8
  %.pre215 = load i64, ptr %memberidx.i.i, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry87.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %161 = phi ptr [ %.pre216, %if.entry87.TypeChecker_error.exit_crit_edge ], [ %160, %if.entry.i.i ]
  %162 = phi i64 [ %155, %if.entry87.TypeChecker_error.exit_crit_edge ], [ %.pre215, %if.entry.i.i ]
  %163 = add i64 %162, 1
  store i64 %163, ptr %memberidx.i.i, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %161, i64 %162
  store ptr %154, ptr %ptridx.i.i, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_for_statement(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = tail call ptr @malloc(i32 48)
  store i64 3, ptr %3, align 4
  %memberidx.i = getelementptr inbounds %ForStatement, ptr %3, i64 0, i32 1
  %memberidx1.i = getelementptr inbounds %ForStatement, ptr %3, i64 0, i32 2
  %memberidx2.i = getelementptr inbounds %ForStatement, ptr %3, i64 0, i32 3
  %memberidx3.i = getelementptr inbounds %ForStatement, ptr %3, i64 0, i32 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %memberidx.i, i8 0, i64 32, i1 false)
  %4 = tail call fastcc ptr @TypeChecker_create_scope(ptr %0)
  %memberidx.i113 = getelementptr inbounds %Scope, ptr %4, i64 0, i32 5
  %memberidx1.i114 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %5 = load ptr, ptr %memberidx1.i114, align 8
  store ptr %5, ptr %memberidx.i113, align 8
  %6 = load ptr, ptr %4, align 8
  store ptr %6, ptr %memberidx1.i114, align 8
  %memberidx2 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 7
  %7 = load i1, ptr %memberidx2, align 1
  %memberidx3 = getelementptr inbounds %ForStatementNode, ptr %1, i64 0, i32 6
  %8 = load i64, ptr %memberidx3, align 4
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %if.entry, label %else

if.entry:                                         ; preds = %2
  %memberidx4 = getelementptr inbounds %ForStatementNode, ptr %1, i64 0, i32 2
  %10 = load ptr, ptr %memberidx4, align 8
  %.not = icmp eq ptr %10, null
  br i1 %.not, label %ifend7, label %if.entry5

else:                                             ; preds = %2
  %11 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %11, align 4
  %memberidx22 = getelementptr inbounds %ForStatementNode, ptr %1, i64 0, i32 5
  %12 = load ptr, ptr %memberidx22, align 8
  %13 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr nonnull %11, ptr %12)
  %memberidx.i115 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %14 = load ptr, ptr %memberidx.i115, align 8
  %memberidx1.i116 = getelementptr inbounds %Compiler, ptr %14, i64 0, i32 6
  %15 = load ptr, ptr %memberidx1.i116, align 8
  %memberidx2.i117 = getelementptr inbounds %Array_FloError_, ptr %15, i64 0, i32 2
  %16 = load i64, ptr %memberidx2.i117, align 4
  %17 = icmp sgt i64 %16, 0
  br i1 %17, label %common.ret, label %ifend25

ifend.sink.split:                                 ; preds = %get_class_prop_type.exit215, %if.entry17
  %.sink = phi ptr [ %37, %if.entry17 ], [ %187, %get_class_prop_type.exit215 ]
  store ptr %.sink, ptr %memberidx3.i, align 8
  br label %ifend

ifend:                                            ; preds = %ifend.sink.split, %ifend13
  %memberidx.i118 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %18 = load ptr, ptr %memberidx.i118, align 8
  %memberidx1.i119 = getelementptr inbounds %Compiler, ptr %18, i64 0, i32 6
  %19 = load ptr, ptr %memberidx1.i119, align 8
  %memberidx2.i120 = getelementptr inbounds %Array_FloError_, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx2.i120, align 4
  %21 = icmp sgt i64 %20, 0
  br i1 %21, label %common.ret, label %ifend64

if.entry5:                                        ; preds = %if.entry
  %22 = tail call fastcc ptr @TypeChecker_check_statement(ptr nonnull %0, ptr nonnull %10)
  store ptr %22, ptr %memberidx1.i, align 8
  br label %ifend7

ifend7:                                           ; preds = %if.entry, %if.entry5
  %memberidx10 = getelementptr inbounds %ForStatementNode, ptr %1, i64 0, i32 3
  %23 = load ptr, ptr %memberidx10, align 8
  %.not111 = icmp eq ptr %23, null
  br i1 %.not111, label %ifend13, label %if.entry11

if.entry11:                                       ; preds = %ifend7
  %24 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %24, align 4
  %25 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr nonnull %24, ptr nonnull %23)
  %memberidx.i.i244 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %26 = load ptr, ptr %memberidx.i.i244, align 8
  %memberidx1.i.i245 = getelementptr inbounds %Compiler, ptr %26, i64 0, i32 6
  %27 = load ptr, ptr %memberidx1.i.i245, align 8
  %memberidx2.i.i246 = getelementptr inbounds %Array_FloError_, ptr %27, i64 0, i32 2
  %28 = load i64, ptr %memberidx2.i.i246, align 4
  %29 = icmp sgt i64 %28, 0
  br i1 %29, label %TypeChecker_check_condition.exit, label %ifend.i249

ifend.i249:                                       ; preds = %if.entry11
  %memberidx.i248 = getelementptr inbounds %Expression, ptr %25, i64 0, i32 3
  %30 = load ptr, ptr %memberidx.i248, align 8
  %31 = load i64, ptr %30, align 4
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %TypeChecker_check_condition.exit, label %true_block.i

true_block.i:                                     ; preds = %ifend.i249
  %33 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %33, align 4
  %34 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %34, align 4
  %memberidx.i.i.i.i250 = getelementptr inbounds %Expression, ptr %34, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i.i250, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %Expression, ptr %34, i64 0, i32 1
  %memberidx.i.i.i251 = getelementptr inbounds %TypeCastExpression, ptr %34, i64 0, i32 4
  store ptr %25, ptr %memberidx.i.i.i251, align 8
  %memberidx1.i.i.i = getelementptr inbounds %Expression, ptr %34, i64 0, i32 3
  store ptr %33, ptr %memberidx1.i.i.i, align 8
  %memberidx3.i.i.i253 = getelementptr inbounds %Expression, ptr %25, i64 0, i32 1
  %35 = load i1, ptr %memberidx3.i.i.i253, align 1
  store i1 %35, ptr %memberidx1.i.i.i.i, align 1
  br label %TypeChecker_check_condition.exit

TypeChecker_check_condition.exit:                 ; preds = %ifend.i249, %if.entry11, %true_block.i
  %common.ret.op.i247 = phi ptr [ null, %if.entry11 ], [ %34, %true_block.i ], [ %25, %ifend.i249 ]
  store ptr %common.ret.op.i247, ptr %memberidx2.i, align 8
  br label %ifend13

ifend13:                                          ; preds = %ifend7, %TypeChecker_check_condition.exit
  %memberidx16 = getelementptr inbounds %ForStatementNode, ptr %1, i64 0, i32 4
  %36 = load ptr, ptr %memberidx16, align 8
  %.not112 = icmp eq ptr %36, null
  br i1 %.not112, label %ifend, label %if.entry17

if.entry17:                                       ; preds = %ifend13
  %37 = tail call fastcc ptr @TypeChecker_check_statement(ptr nonnull %0, ptr nonnull %36)
  br label %ifend.sink.split

common.ret:                                       ; preds = %ifend, %else, %ifend64, %TypeChecker_error.exit144, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit144 ], [ %3, %ifend64 ], [ null, %else ], [ null, %ifend ]
  ret ptr %common.ret.op

ifend25:                                          ; preds = %else
  %memberidx26 = getelementptr inbounds %Expression, ptr %13, i64 0, i32 3
  %38 = load ptr, ptr %memberidx26, align 8
  %39 = load i64, ptr %38, align 4
  %40 = icmp eq i64 %39, 20
  br i1 %40, label %if.entry.i258, label %is_object.exit.thread

if.entry.i258:                                    ; preds = %ifend25, %if.entry.i258
  %.tr5.i = phi ptr [ %41, %if.entry.i258 ], [ %38, %ifend25 ]
  %memberidx1.i257 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %41 = load ptr, ptr %memberidx1.i257, align 8
  %42 = load i64, ptr %41, align 4
  switch i64 %42, label %if.entry27 [
    i64 20, label %if.entry.i258
    i64 13, label %ifend29
  ]

is_object.exit.thread:                            ; preds = %ifend25
  %43 = icmp eq i64 %39, 13
  br i1 %43, label %ifend29.thread, label %if.entry27

ifend29.thread:                                   ; preds = %is_object.exit.thread
  %44 = load ptr, ptr %0, align 8
  br label %if.entry3.i

if.entry27:                                       ; preds = %if.entry.i258, %is_object.exit.thread
  %45 = tail call ptr @malloc(i32 224)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(28) %45, ptr noundef nonnull align 8 dereferenceable(28) @262, i64 28, i1 false)
  %46 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %46, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %46, i64 0, i32 1
  store ptr %45, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %46, i64 0, i32 2
  store i64 28, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %46, i64 0, i32 3
  store i64 28, ptr %memberidx2.i.i, align 4
  %47 = load ptr, ptr %memberidx22, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = load ptr, ptr %memberidx.i115, align 8
  %memberidx1.i122 = getelementptr inbounds %Compiler, ptr %49, i64 0, i32 6
  %50 = load ptr, ptr %memberidx1.i122, align 8
  %51 = tail call ptr @malloc(i32 24)
  store i64 5, ptr %51, align 4
  %memberidx1.i.i123 = getelementptr inbounds %FloError, ptr %51, i64 0, i32 2
  store ptr %48, ptr %memberidx1.i.i123, align 8
  %memberidx2.i.i124 = getelementptr inbounds %FloError, ptr %51, i64 0, i32 1
  store ptr %46, ptr %memberidx2.i.i124, align 8
  %memberidx.i.i125 = getelementptr inbounds %Array_FloError_, ptr %50, i64 0, i32 2
  %52 = load i64, ptr %memberidx.i.i125, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %50, i64 0, i32 3
  %53 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %52, %53
  br i1 %.not.i.i, label %if.entry27.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry27.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry27
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %50, i64 0, i32 1
  %.pre287 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry27
  %54 = shl i64 %53, 1
  store i64 %54, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %50, i64 0, i32 1
  %55 = load ptr, ptr %memberidx2.i.i.i, align 8
  %56 = shl i64 %53, 4
  %57 = tail call ptr @realloc(ptr %55, i64 %56)
  store ptr %57, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i125, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry27.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %58 = phi ptr [ %.pre287, %if.entry27.TypeChecker_error.exit_crit_edge ], [ %57, %if.entry.i.i ]
  %59 = phi i64 [ %52, %if.entry27.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %60 = add i64 %59, 1
  store i64 %60, ptr %memberidx.i.i125, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %58, i64 %59
  store ptr %51, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend29:                                          ; preds = %if.entry.i258
  %61 = load ptr, ptr %0, align 8
  br i1 %40, label %if.entry.i262, label %if.entry3.i

if.entry.i262:                                    ; preds = %ifend29, %if.entry.i262
  %.tr11.i284 = phi ptr [ %62, %if.entry.i262 ], [ %38, %ifend29 ]
  %memberidx1.i261 = getelementptr inbounds %GenericType, ptr %.tr11.i284, i64 0, i32 3
  %62 = load ptr, ptr %memberidx1.i261, align 8
  %63 = load i64, ptr %62, align 4
  %switch = icmp eq i64 %63, 20
  br i1 %switch, label %if.entry.i262, label %if.entry3.i

if.entry3.i:                                      ; preds = %if.entry.i262, %ifend29.thread, %ifend29
  %64 = phi ptr [ %61, %ifend29 ], [ %44, %ifend29.thread ], [ %61, %if.entry.i262 ]
  %.tr11.i.lcssa = phi ptr [ %38, %ifend29 ], [ %38, %ifend29.thread ], [ %62, %if.entry.i262 ]
  %memberidx6.i263 = getelementptr inbounds %ObjectType, ptr %.tr11.i.lcssa, i64 0, i32 1
  %65 = load ptr, ptr %memberidx6.i263, align 8
  %memberidx.i.i264 = getelementptr inbounds %Program, ptr %64, i64 0, i32 1
  %66 = load ptr, ptr %memberidx.i.i264, align 8
  %67 = load i64, ptr %65, align 4
  %memberidx.i.i.i265 = getelementptr inbounds %Array_Module_, ptr %66, i64 0, i32 1
  %68 = load ptr, ptr %memberidx.i.i.i265, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %68, i64 %67
  %69 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i266 = getelementptr inbounds %Module, ptr %69, i64 0, i32 4
  %70 = load ptr, ptr %memberidx2.i.i266, align 8
  %memberidx3.i.i = getelementptr inbounds %TypeId, ptr %65, i64 0, i32 2
  %71 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %70, i64 0, i32 1
  %72 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %72, i64 %71
  %73 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx34 = getelementptr inbounds %Class, ptr %73, i64 0, i32 6
  %74 = load ptr, ptr %memberidx34, align 8
  %75 = load ptr, ptr %74, align 8
  %memberidx35 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %75, i64 0, i32 1
  %76 = load ptr, ptr %memberidx35, align 8
  %77 = tail call ptr @malloc(i32 64)
  store i64 6872337336460992351, ptr %77, align 8
  %78 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %78, align 8
  %memberidx.i.i126 = getelementptr inbounds %string, ptr %78, i64 0, i32 1
  store ptr %77, ptr %memberidx.i.i126, align 8
  %memberidx1.i.i127 = getelementptr inbounds %string, ptr %78, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i127, align 4
  %memberidx2.i.i128 = getelementptr inbounds %string, ptr %78, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i128, align 4
  %79 = tail call ptr %76(ptr nonnull %74, ptr nonnull %78)
  %80 = icmp eq ptr %79, null
  br i1 %80, label %if.entry36, label %ifend38

if.entry36:                                       ; preds = %if.entry3.i
  %81 = tail call ptr @malloc(i32 368)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(46) %81, ptr noundef nonnull align 8 dereferenceable(46) @263, i64 46, i1 false)
  %82 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %82, align 8
  %memberidx.i.i129 = getelementptr inbounds %string, ptr %82, i64 0, i32 1
  store ptr %81, ptr %memberidx.i.i129, align 8
  %memberidx1.i.i130 = getelementptr inbounds %string, ptr %82, i64 0, i32 2
  store i64 46, ptr %memberidx1.i.i130, align 4
  %memberidx2.i.i131 = getelementptr inbounds %string, ptr %82, i64 0, i32 3
  store i64 46, ptr %memberidx2.i.i131, align 4
  %83 = load ptr, ptr %memberidx22, align 8
  %84 = load ptr, ptr %83, align 8
  %85 = load ptr, ptr %memberidx.i115, align 8
  %memberidx1.i133 = getelementptr inbounds %Compiler, ptr %85, i64 0, i32 6
  %86 = load ptr, ptr %memberidx1.i133, align 8
  %87 = tail call ptr @malloc(i32 24)
  store i64 5, ptr %87, align 4
  %memberidx1.i.i134 = getelementptr inbounds %FloError, ptr %87, i64 0, i32 2
  store ptr %84, ptr %memberidx1.i.i134, align 8
  %memberidx2.i.i135 = getelementptr inbounds %FloError, ptr %87, i64 0, i32 1
  store ptr %82, ptr %memberidx2.i.i135, align 8
  %memberidx.i.i136 = getelementptr inbounds %Array_FloError_, ptr %86, i64 0, i32 2
  %88 = load i64, ptr %memberidx.i.i136, align 4
  %memberidx1.i2.i137 = getelementptr inbounds %Array_FloError_, ptr %86, i64 0, i32 3
  %89 = load i64, ptr %memberidx1.i2.i137, align 4
  %.not.i.i138 = icmp slt i64 %88, %89
  br i1 %.not.i.i138, label %if.entry36.TypeChecker_error.exit144_crit_edge, label %if.entry.i.i141

if.entry36.TypeChecker_error.exit144_crit_edge:   ; preds = %if.entry36
  %memberidx4.i.i142.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %86, i64 0, i32 1
  %.pre289 = load ptr, ptr %memberidx4.i.i142.phi.trans.insert, align 8
  br label %TypeChecker_error.exit144

if.entry.i.i141:                                  ; preds = %if.entry36
  %90 = shl i64 %89, 1
  store i64 %90, ptr %memberidx1.i2.i137, align 4
  %memberidx2.i.i.i140 = getelementptr inbounds %Array_FloError_, ptr %86, i64 0, i32 1
  %91 = load ptr, ptr %memberidx2.i.i.i140, align 8
  %92 = shl i64 %89, 4
  %93 = tail call ptr @realloc(ptr %91, i64 %92)
  store ptr %93, ptr %memberidx2.i.i.i140, align 8
  %.pre288 = load i64, ptr %memberidx.i.i136, align 4
  br label %TypeChecker_error.exit144

TypeChecker_error.exit144:                        ; preds = %if.entry36.TypeChecker_error.exit144_crit_edge, %if.entry.i.i141
  %94 = phi ptr [ %.pre289, %if.entry36.TypeChecker_error.exit144_crit_edge ], [ %93, %if.entry.i.i141 ]
  %95 = phi i64 [ %88, %if.entry36.TypeChecker_error.exit144_crit_edge ], [ %.pre288, %if.entry.i.i141 ]
  %96 = add i64 %95, 1
  store i64 %96, ptr %memberidx.i.i136, align 4
  %ptridx.i.i143 = getelementptr inbounds ptr, ptr %94, i64 %95
  store ptr %87, ptr %ptridx.i.i143, align 8
  br label %common.ret

ifend38:                                          ; preds = %if.entry3.i
  %97 = load ptr, ptr %0, align 8
  %memberidx.i.i145 = getelementptr inbounds %PropId, ptr %79, i64 0, i32 1
  %98 = load ptr, ptr %memberidx.i.i145, align 8
  %memberidx.i.i.i146 = getelementptr inbounds %Program, ptr %97, i64 0, i32 1
  %99 = load ptr, ptr %memberidx.i.i.i146, align 8
  %100 = load i64, ptr %98, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %99, i64 0, i32 1
  %101 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %101, i64 %100
  %102 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i147 = getelementptr inbounds %Module, ptr %102, i64 0, i32 4
  %103 = load ptr, ptr %memberidx2.i.i.i147, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %98, i64 0, i32 2
  %104 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %103, i64 0, i32 1
  %105 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %105, i64 %104
  %106 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %107 = load i64, ptr %79, align 4
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %ifend38
  %memberidx1.i148 = getelementptr inbounds %Class, ptr %106, i64 0, i32 5
  %109 = load ptr, ptr %memberidx1.i148, align 8
  %memberidx2.i149 = getelementptr inbounds %PropId, ptr %79, i64 0, i32 2
  %110 = load i64, ptr %memberidx2.i149, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %109, i64 0, i32 1
  %111 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %111, i64 %110
  %112 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i150 = getelementptr inbounds %ClassMethod, ptr %112, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %ifend38
  %memberidx4.i = getelementptr inbounds %Class, ptr %106, i64 0, i32 4
  %113 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %79, i64 0, i32 2
  %114 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %113, i64 0, i32 1
  %115 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i151 = getelementptr inbounds ptr, ptr %115, i64 %114
  %116 = load ptr, ptr %ptridx.i.i151, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %116, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i150, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i = load ptr, ptr %common.ret.op.in.i, align 8
  %memberidx42 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i, i64 0, i32 2
  %117 = load ptr, ptr %memberidx42, align 8
  %118 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %118, ptr noundef nonnull align 8 dereferenceable(6) @264, i64 6, i1 false)
  %119 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %119, align 8
  %memberidx.i.i152 = getelementptr inbounds %string, ptr %119, i64 0, i32 1
  store ptr %118, ptr %memberidx.i.i152, align 8
  %memberidx1.i.i153 = getelementptr inbounds %string, ptr %119, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i153, align 4
  %memberidx2.i.i154 = getelementptr inbounds %string, ptr %119, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i154, align 4
  %120 = tail call ptr @malloc(i32 41)
  %121 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %121, align 4
  %memberidx.i.i155 = getelementptr inbounds %Expression, ptr %121, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i155, align 4
  %memberidx1.i.i156 = getelementptr inbounds %Expression, ptr %121, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i156, align 1
  %memberidx.i157 = getelementptr inbounds %MemberExpression, ptr %121, i64 0, i32 4
  store ptr %13, ptr %memberidx.i157, align 8
  %memberidx1.i158 = getelementptr inbounds %MemberExpression, ptr %121, i64 0, i32 5
  store ptr %79, ptr %memberidx1.i158, align 8
  %memberidx2.i159 = getelementptr inbounds %Expression, ptr %121, i64 0, i32 3
  store ptr %common.ret.op.i, ptr %memberidx2.i159, align 8
  %122 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %122, align 8
  %memberidx.i160 = getelementptr inbounds %Array_Expression_, ptr %122, i64 0, i32 2
  store i64 0, ptr %memberidx.i160, align 4
  %memberidx1.i161 = getelementptr inbounds %Array_Expression_, ptr %122, i64 0, i32 3
  store i64 8, ptr %memberidx1.i161, align 4
  %memberidx2.i162 = getelementptr inbounds %Array_Expression_, ptr %122, i64 0, i32 1
  %123 = tail call ptr @malloc(i32 64)
  store ptr %123, ptr %memberidx2.i162, align 8
  store i64 0, ptr %memberidx.i160, align 4
  store i64 8, ptr %120, align 4
  %memberidx.i.i163 = getelementptr inbounds %Expression, ptr %120, i64 0, i32 2
  store i64 14, ptr %memberidx.i.i163, align 4
  %memberidx1.i.i164 = getelementptr inbounds %Expression, ptr %120, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i164, align 1
  %memberidx.i165 = getelementptr inbounds %CallExpression, ptr %120, i64 0, i32 4
  store ptr %121, ptr %memberidx.i165, align 8
  %memberidx1.i166 = getelementptr inbounds %CallExpression, ptr %120, i64 0, i32 5
  store ptr %122, ptr %memberidx1.i166, align 8
  %memberidx2.i167 = getelementptr inbounds %Expression, ptr %120, i64 0, i32 3
  store ptr %117, ptr %memberidx2.i167, align 8
  %124 = tail call fastcc ptr @TypeChecker_declare_var_within_current_scope(ptr nonnull %0, ptr nonnull %119, ptr nonnull %120, ptr %117)
  %memberidx45 = getelementptr inbounds %Var, ptr %124, i64 0, i32 1
  %125 = load ptr, ptr %memberidx45, align 8
  %126 = tail call ptr @malloc(i32 25)
  store i64 1, ptr %126, align 4
  %memberidx.i168 = getelementptr inbounds %VarDeclaration, ptr %126, i64 0, i32 2
  store ptr %125, ptr %memberidx.i168, align 8
  %memberidx1.i169 = getelementptr inbounds %VarDeclaration, ptr %126, i64 0, i32 1
  store ptr %119, ptr %memberidx1.i169, align 8
  %memberidx2.i170 = getelementptr inbounds %VarDeclaration, ptr %126, i64 0, i32 3
  store i1 false, ptr %memberidx2.i170, align 1
  store ptr %126, ptr %memberidx.i, align 8
  %127 = load ptr, ptr %0, align 8
  br label %tailrecurse.i268

tailrecurse.i268:                                 ; preds = %if.entry.i271, %get_class_prop_type.exit
  %.tr11.i267 = phi ptr [ %117, %get_class_prop_type.exit ], [ %129, %if.entry.i271 ]
  %128 = load i64, ptr %.tr11.i267, align 4
  switch i64 %128, label %get_class_from_type.exit281 [
    i64 20, label %if.entry.i271
    i64 13, label %if.entry3.i280
  ]

if.entry.i271:                                    ; preds = %tailrecurse.i268
  %memberidx1.i270 = getelementptr inbounds %GenericType, ptr %.tr11.i267, i64 0, i32 3
  %129 = load ptr, ptr %memberidx1.i270, align 8
  br label %tailrecurse.i268

if.entry3.i280:                                   ; preds = %tailrecurse.i268
  %memberidx6.i272 = getelementptr inbounds %ObjectType, ptr %.tr11.i267, i64 0, i32 1
  %130 = load ptr, ptr %memberidx6.i272, align 8
  %memberidx.i.i273 = getelementptr inbounds %Program, ptr %127, i64 0, i32 1
  %131 = load ptr, ptr %memberidx.i.i273, align 8
  %132 = load i64, ptr %130, align 4
  %memberidx.i.i.i274 = getelementptr inbounds %Array_Module_, ptr %131, i64 0, i32 1
  %133 = load ptr, ptr %memberidx.i.i.i274, align 8
  %ptridx.i.i.i275 = getelementptr inbounds ptr, ptr %133, i64 %132
  %134 = load ptr, ptr %ptridx.i.i.i275, align 8
  %memberidx2.i.i276 = getelementptr inbounds %Module, ptr %134, i64 0, i32 4
  %135 = load ptr, ptr %memberidx2.i.i276, align 8
  %memberidx3.i.i277 = getelementptr inbounds %TypeId, ptr %130, i64 0, i32 2
  %136 = load i64, ptr %memberidx3.i.i277, align 4
  %memberidx.i5.i.i278 = getelementptr inbounds %Array_Class_, ptr %135, i64 0, i32 1
  %137 = load ptr, ptr %memberidx.i5.i.i278, align 8
  %ptridx.i6.i.i279 = getelementptr inbounds ptr, ptr %137, i64 %136
  %138 = load ptr, ptr %ptridx.i6.i.i279, align 8
  br label %get_class_from_type.exit281

get_class_from_type.exit281:                      ; preds = %tailrecurse.i268, %if.entry3.i280
  %common.ret.op.i269 = phi ptr [ %138, %if.entry3.i280 ], [ null, %tailrecurse.i268 ]
  %memberidx48 = getelementptr inbounds %Class, ptr %common.ret.op.i269, i64 0, i32 6
  %139 = load ptr, ptr %memberidx48, align 8
  %140 = load ptr, ptr %139, align 8
  %memberidx49 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %140, i64 0, i32 1
  %141 = load ptr, ptr %memberidx49, align 8
  %142 = tail call ptr @malloc(i32 32)
  store i32 1701736292, ptr %142, align 8
  %143 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %143, align 8
  %memberidx.i.i171 = getelementptr inbounds %string, ptr %143, i64 0, i32 1
  store ptr %142, ptr %memberidx.i.i171, align 8
  %memberidx1.i.i172 = getelementptr inbounds %string, ptr %143, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i172, align 4
  %memberidx2.i.i173 = getelementptr inbounds %string, ptr %143, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i173, align 4
  %144 = tail call ptr %141(ptr nonnull %139, ptr nonnull %143)
  %145 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %145, align 4
  %memberidx.i.i174 = getelementptr inbounds %Expression, ptr %145, i64 0, i32 2
  store i64 7, ptr %memberidx.i.i174, align 4
  %memberidx1.i.i175 = getelementptr inbounds %Expression, ptr %145, i64 0, i32 1
  %memberidx.i176 = getelementptr inbounds %VarAccessExpression, ptr %145, i64 0, i32 4
  store ptr %125, ptr %memberidx.i176, align 8
  %memberidx1.i177 = getelementptr inbounds %Expression, ptr %145, i64 0, i32 3
  store ptr %117, ptr %memberidx1.i177, align 8
  %146 = load i64, ptr %125, align 4
  %147 = icmp eq i64 %146, 2
  store i1 %147, ptr %memberidx1.i.i175, align 1
  %148 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %148, align 4
  %149 = tail call ptr @malloc(i32 41)
  %150 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %150, align 4
  %memberidx.i.i179 = getelementptr inbounds %Expression, ptr %150, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i179, align 4
  %memberidx1.i.i180 = getelementptr inbounds %Expression, ptr %150, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i180, align 1
  %memberidx.i181 = getelementptr inbounds %MemberExpression, ptr %150, i64 0, i32 4
  store ptr %145, ptr %memberidx.i181, align 8
  %memberidx1.i182 = getelementptr inbounds %MemberExpression, ptr %150, i64 0, i32 5
  store ptr %144, ptr %memberidx1.i182, align 8
  %memberidx2.i183 = getelementptr inbounds %Expression, ptr %150, i64 0, i32 3
  store ptr %148, ptr %memberidx2.i183, align 8
  store i64 8, ptr %149, align 4
  %memberidx.i.i184 = getelementptr inbounds %Expression, ptr %149, i64 0, i32 2
  store i64 9, ptr %memberidx.i.i184, align 4
  %memberidx1.i.i185 = getelementptr inbounds %Expression, ptr %149, i64 0, i32 1
  %memberidx.i186 = getelementptr inbounds %UnaryExpression, ptr %149, i64 0, i32 4
  store i64 6, ptr %memberidx.i186, align 4
  %memberidx1.i187 = getelementptr inbounds %UnaryExpression, ptr %149, i64 0, i32 5
  store ptr %150, ptr %memberidx1.i187, align 8
  %memberidx2.i188 = getelementptr inbounds %Expression, ptr %149, i64 0, i32 3
  store ptr %148, ptr %memberidx2.i188, align 8
  store i1 false, ptr %memberidx1.i.i185, align 1
  store ptr %149, ptr %memberidx2.i, align 8
  %memberidx51 = getelementptr inbounds %ForStatementNode, ptr %1, i64 0, i32 7
  %151 = load ptr, ptr %memberidx51, align 8
  %memberidx52 = getelementptr inbounds %IdentifierToken, ptr %151, i64 0, i32 2
  %152 = load ptr, ptr %memberidx52, align 8
  %153 = load ptr, ptr %memberidx48, align 8
  %154 = load ptr, ptr %153, align 8
  %memberidx54 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %154, i64 0, i32 1
  %155 = load ptr, ptr %memberidx54, align 8
  %156 = tail call ptr @malloc(i32 64)
  store i64 6872339616837295967, ptr %156, align 8
  %157 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %157, align 8
  %memberidx.i.i190 = getelementptr inbounds %string, ptr %157, i64 0, i32 1
  store ptr %156, ptr %memberidx.i.i190, align 8
  %memberidx1.i.i191 = getelementptr inbounds %string, ptr %157, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i191, align 4
  %memberidx2.i.i192 = getelementptr inbounds %string, ptr %157, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i192, align 4
  %158 = tail call ptr %155(ptr nonnull %153, ptr nonnull %157)
  %159 = load ptr, ptr %0, align 8
  %memberidx.i.i193 = getelementptr inbounds %PropId, ptr %158, i64 0, i32 1
  %160 = load ptr, ptr %memberidx.i.i193, align 8
  %memberidx.i.i.i194 = getelementptr inbounds %Program, ptr %159, i64 0, i32 1
  %161 = load ptr, ptr %memberidx.i.i.i194, align 8
  %162 = load i64, ptr %160, align 4
  %memberidx.i.i.i.i195 = getelementptr inbounds %Array_Module_, ptr %161, i64 0, i32 1
  %163 = load ptr, ptr %memberidx.i.i.i.i195, align 8
  %ptridx.i.i.i.i196 = getelementptr inbounds ptr, ptr %163, i64 %162
  %164 = load ptr, ptr %ptridx.i.i.i.i196, align 8
  %memberidx2.i.i.i197 = getelementptr inbounds %Module, ptr %164, i64 0, i32 4
  %165 = load ptr, ptr %memberidx2.i.i.i197, align 8
  %memberidx3.i.i.i198 = getelementptr inbounds %TypeId, ptr %160, i64 0, i32 2
  %166 = load i64, ptr %memberidx3.i.i.i198, align 4
  %memberidx.i5.i.i.i199 = getelementptr inbounds %Array_Class_, ptr %165, i64 0, i32 1
  %167 = load ptr, ptr %memberidx.i5.i.i.i199, align 8
  %ptridx.i6.i.i.i200 = getelementptr inbounds ptr, ptr %167, i64 %166
  %168 = load ptr, ptr %ptridx.i6.i.i.i200, align 8
  %169 = load i64, ptr %158, align 4
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %if.entry.i208, label %ifend.i214

if.entry.i208:                                    ; preds = %get_class_from_type.exit281
  %memberidx1.i203 = getelementptr inbounds %Class, ptr %168, i64 0, i32 5
  %171 = load ptr, ptr %memberidx1.i203, align 8
  %memberidx2.i204 = getelementptr inbounds %PropId, ptr %158, i64 0, i32 2
  %172 = load i64, ptr %memberidx2.i204, align 4
  %memberidx.i12.i205 = getelementptr inbounds %Array_ClassMethod_, ptr %171, i64 0, i32 1
  %173 = load ptr, ptr %memberidx.i12.i205, align 8
  %ptridx.i13.i206 = getelementptr inbounds ptr, ptr %173, i64 %172
  %174 = load ptr, ptr %ptridx.i13.i206, align 8
  %memberidx3.i207 = getelementptr inbounds %ClassMethod, ptr %174, i64 0, i32 4
  br label %get_class_prop_type.exit215

ifend.i214:                                       ; preds = %get_class_from_type.exit281
  %memberidx4.i209 = getelementptr inbounds %Class, ptr %168, i64 0, i32 4
  %175 = load ptr, ptr %memberidx4.i209, align 8
  %memberidx5.i210 = getelementptr inbounds %PropId, ptr %158, i64 0, i32 2
  %176 = load i64, ptr %memberidx5.i210, align 4
  %memberidx.i11.i211 = getelementptr inbounds %Array_ClassField_, ptr %175, i64 0, i32 1
  %177 = load ptr, ptr %memberidx.i11.i211, align 8
  %ptridx.i.i212 = getelementptr inbounds ptr, ptr %177, i64 %176
  %178 = load ptr, ptr %ptridx.i.i212, align 8
  %memberidx6.i213 = getelementptr inbounds %ClassField, ptr %178, i64 0, i32 4
  br label %get_class_prop_type.exit215

get_class_prop_type.exit215:                      ; preds = %if.entry.i208, %ifend.i214
  %common.ret.op.in.i201 = phi ptr [ %memberidx3.i207, %if.entry.i208 ], [ %memberidx6.i213, %ifend.i214 ]
  %common.ret.op.i202 = load ptr, ptr %common.ret.op.in.i201, align 8
  %memberidx56 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i202, i64 0, i32 2
  %179 = load ptr, ptr %memberidx56, align 8
  %180 = tail call ptr @malloc(i32 41)
  %181 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %181, align 4
  %memberidx.i.i216 = getelementptr inbounds %Expression, ptr %181, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i216, align 4
  %memberidx1.i.i217 = getelementptr inbounds %Expression, ptr %181, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i217, align 1
  %memberidx.i218 = getelementptr inbounds %MemberExpression, ptr %181, i64 0, i32 4
  store ptr %145, ptr %memberidx.i218, align 8
  %memberidx1.i219 = getelementptr inbounds %MemberExpression, ptr %181, i64 0, i32 5
  store ptr %158, ptr %memberidx1.i219, align 8
  %memberidx2.i220 = getelementptr inbounds %Expression, ptr %181, i64 0, i32 3
  store ptr %common.ret.op.i202, ptr %memberidx2.i220, align 8
  %182 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %182, align 8
  %memberidx.i221 = getelementptr inbounds %Array_Expression_, ptr %182, i64 0, i32 2
  store i64 0, ptr %memberidx.i221, align 4
  %memberidx1.i222 = getelementptr inbounds %Array_Expression_, ptr %182, i64 0, i32 3
  store i64 8, ptr %memberidx1.i222, align 4
  %memberidx2.i223 = getelementptr inbounds %Array_Expression_, ptr %182, i64 0, i32 1
  %183 = tail call ptr @malloc(i32 64)
  store ptr %183, ptr %memberidx2.i223, align 8
  store i64 0, ptr %memberidx.i221, align 4
  store i64 8, ptr %180, align 4
  %memberidx.i.i224 = getelementptr inbounds %Expression, ptr %180, i64 0, i32 2
  store i64 14, ptr %memberidx.i.i224, align 4
  %memberidx1.i.i225 = getelementptr inbounds %Expression, ptr %180, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i225, align 1
  %memberidx.i226 = getelementptr inbounds %CallExpression, ptr %180, i64 0, i32 4
  store ptr %181, ptr %memberidx.i226, align 8
  %memberidx1.i227 = getelementptr inbounds %CallExpression, ptr %180, i64 0, i32 5
  store ptr %182, ptr %memberidx1.i227, align 8
  %memberidx2.i228 = getelementptr inbounds %Expression, ptr %180, i64 0, i32 3
  store ptr %179, ptr %memberidx2.i228, align 8
  %184 = tail call fastcc ptr @TypeChecker_declare_var_within_current_scope(ptr nonnull %0, ptr %152, ptr nonnull %180, ptr %179)
  %memberidx59 = getelementptr inbounds %Var, ptr %184, i64 0, i32 1
  %185 = load ptr, ptr %memberidx59, align 8
  %186 = tail call ptr @malloc(i32 25)
  store i64 1, ptr %186, align 4
  %memberidx.i229 = getelementptr inbounds %VarDeclaration, ptr %186, i64 0, i32 2
  store ptr %185, ptr %memberidx.i229, align 8
  %memberidx1.i230 = getelementptr inbounds %VarDeclaration, ptr %186, i64 0, i32 1
  store ptr %152, ptr %memberidx1.i230, align 8
  %memberidx2.i231 = getelementptr inbounds %VarDeclaration, ptr %186, i64 0, i32 3
  store i1 false, ptr %memberidx2.i231, align 1
  store ptr %186, ptr %memberidx1.i, align 8
  %187 = tail call ptr @malloc(i32 49)
  %188 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %188, align 4
  %memberidx.i.i232 = getelementptr inbounds %Expression, ptr %188, i64 0, i32 2
  store i64 7, ptr %memberidx.i.i232, align 4
  %memberidx1.i.i233 = getelementptr inbounds %Expression, ptr %188, i64 0, i32 1
  %memberidx.i234 = getelementptr inbounds %VarAccessExpression, ptr %188, i64 0, i32 4
  store ptr %185, ptr %memberidx.i234, align 8
  %memberidx1.i235 = getelementptr inbounds %Expression, ptr %188, i64 0, i32 3
  store ptr %179, ptr %memberidx1.i235, align 8
  %189 = load i64, ptr %185, align 4
  %190 = icmp eq i64 %189, 2
  store i1 %190, ptr %memberidx1.i.i233, align 1
  store i64 8, ptr %187, align 4
  %memberidx.i.i237 = getelementptr inbounds %Expression, ptr %187, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i237, align 4
  %memberidx1.i.i238 = getelementptr inbounds %Expression, ptr %187, i64 0, i32 1
  %memberidx.i239 = getelementptr inbounds %BinaryExpression, ptr %187, i64 0, i32 4
  store ptr %188, ptr %memberidx.i239, align 8
  %memberidx1.i240 = getelementptr inbounds %BinaryExpression, ptr %187, i64 0, i32 5
  store i64 19, ptr %memberidx1.i240, align 4
  %memberidx2.i241 = getelementptr inbounds %BinaryExpression, ptr %187, i64 0, i32 6
  store ptr %180, ptr %memberidx2.i241, align 8
  %memberidx3.i242 = getelementptr inbounds %Expression, ptr %187, i64 0, i32 3
  store ptr %179, ptr %memberidx3.i242, align 8
  store i1 false, ptr %memberidx1.i.i238, align 1
  br label %ifend.sink.split

ifend64:                                          ; preds = %ifend
  store i1 true, ptr %memberidx2, align 1
  %memberidx66 = getelementptr inbounds %ForStatement, ptr %3, i64 0, i32 5
  %memberidx67 = getelementptr inbounds %ForStatementNode, ptr %1, i64 0, i32 8
  %191 = load ptr, ptr %memberidx67, align 8
  %192 = tail call fastcc ptr @TypeChecker_check_block(ptr nonnull %0, ptr %191)
  store ptr %192, ptr %memberidx66, align 8
  store i1 %7, ptr %memberidx2, align 1
  %193 = load ptr, ptr %memberidx.i113, align 8
  store ptr %193, ptr %memberidx1.i114, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_statement(ptr %0, ptr %1) unnamed_addr {
  %memberidx = getelementptr inbounds %StatementNode, ptr %1, i64 0, i32 1
  %3 = load i64, ptr %memberidx, align 4
  switch i64 %3, label %common.ret [
    i64 0, label %if.entry
    i64 1, label %if.entry2
    i64 2, label %if.entry6
    i64 3, label %if.entry10
    i64 4, label %if.entry14
    i64 5, label %if.entry18
    i64 6, label %if.entry22
    i64 7, label %if.entry26
    i64 8, label %if.entry30
  ]

common.ret:                                       ; preds = %2, %ifend.i77, %TypeChecker_error.exit.i76, %ifend.i, %TypeChecker_error.exit.i, %if.entry30, %if.entry26, %TypeChecker_check_condition.exit, %if.entry10, %if.entry6, %if.entry2, %TypeChecker_check_if_stamement.exit
  %common.ret.op = phi ptr [ %21, %TypeChecker_check_if_stamement.exit ], [ %22, %if.entry2 ], [ %23, %if.entry6 ], [ %24, %if.entry10 ], [ %41, %TypeChecker_check_condition.exit ], [ %76, %if.entry26 ], [ %78, %if.entry30 ], [ null, %TypeChecker_error.exit.i ], [ %58, %ifend.i ], [ null, %TypeChecker_error.exit.i76 ], [ %75, %ifend.i77 ], [ null, %2 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %2
  %memberidx.i81 = getelementptr inbounds %IfStatementNode, ptr %1, i64 0, i32 2
  %4 = load ptr, ptr %memberidx.i81, align 8
  %5 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %5, align 4
  %6 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %5, ptr %4)
  %memberidx.i.i96 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %7 = load ptr, ptr %memberidx.i.i96, align 8
  %memberidx1.i.i97 = getelementptr inbounds %Compiler, ptr %7, i64 0, i32 6
  %8 = load ptr, ptr %memberidx1.i.i97, align 8
  %memberidx2.i.i98 = getelementptr inbounds %Array_FloError_, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx2.i.i98, align 4
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %TypeChecker_check_condition.exit110, label %ifend.i101

ifend.i101:                                       ; preds = %if.entry
  %memberidx.i100 = getelementptr inbounds %Expression, ptr %6, i64 0, i32 3
  %11 = load ptr, ptr %memberidx.i100, align 8
  %12 = load i64, ptr %11, align 4
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %TypeChecker_check_condition.exit110, label %true_block.i108

true_block.i108:                                  ; preds = %ifend.i101
  %14 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %14, align 4
  %15 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %15, align 4
  %memberidx.i.i.i.i102 = getelementptr inbounds %Expression, ptr %15, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i.i102, align 4
  %memberidx1.i.i.i.i103 = getelementptr inbounds %Expression, ptr %15, i64 0, i32 1
  %memberidx.i.i.i104 = getelementptr inbounds %TypeCastExpression, ptr %15, i64 0, i32 4
  store ptr %6, ptr %memberidx.i.i.i104, align 8
  %memberidx1.i.i.i105 = getelementptr inbounds %Expression, ptr %15, i64 0, i32 3
  store ptr %14, ptr %memberidx1.i.i.i105, align 8
  %memberidx3.i.i.i107 = getelementptr inbounds %Expression, ptr %6, i64 0, i32 1
  %16 = load i1, ptr %memberidx3.i.i.i107, align 1
  store i1 %16, ptr %memberidx1.i.i.i.i103, align 1
  br label %TypeChecker_check_condition.exit110

TypeChecker_check_condition.exit110:              ; preds = %ifend.i101, %if.entry, %true_block.i108
  %common.ret.op.i99 = phi ptr [ null, %if.entry ], [ %15, %true_block.i108 ], [ %6, %ifend.i101 ]
  %memberidx1.i82 = getelementptr inbounds %IfStatementNode, ptr %1, i64 0, i32 3
  %17 = load ptr, ptr %memberidx1.i82, align 8
  %18 = tail call fastcc ptr @TypeChecker_check_block(ptr nonnull %0, ptr %17)
  %memberidx2.i = getelementptr inbounds %IfStatementNode, ptr %1, i64 0, i32 4
  %19 = load ptr, ptr %memberidx2.i, align 8
  %.not.i = icmp eq ptr %19, null
  br i1 %.not.i, label %TypeChecker_check_if_stamement.exit, label %true_block.i

true_block.i:                                     ; preds = %TypeChecker_check_condition.exit110
  %20 = tail call fastcc ptr @TypeChecker_check_block(ptr nonnull %0, ptr nonnull %19)
  br label %TypeChecker_check_if_stamement.exit

TypeChecker_check_if_stamement.exit:              ; preds = %TypeChecker_check_condition.exit110, %true_block.i
  %ternary.i = phi ptr [ %20, %true_block.i ], [ null, %TypeChecker_check_condition.exit110 ]
  %21 = tail call ptr @malloc(i32 32)
  store i64 0, ptr %21, align 4
  %memberidx.i.i83 = getelementptr inbounds %IfStatement, ptr %21, i64 0, i32 1
  store ptr %common.ret.op.i99, ptr %memberidx.i.i83, align 8
  %memberidx1.i.i84 = getelementptr inbounds %IfStatement, ptr %21, i64 0, i32 2
  store ptr %18, ptr %memberidx1.i.i84, align 8
  %memberidx2.i.i = getelementptr inbounds %IfStatement, ptr %21, i64 0, i32 3
  store ptr %ternary.i, ptr %memberidx2.i.i, align 8
  br label %common.ret

if.entry2:                                        ; preds = %2
  %22 = tail call fastcc ptr @TypeChecker_check_var_declaration(ptr %0, ptr nonnull %1)
  br label %common.ret

if.entry6:                                        ; preds = %2
  %23 = tail call fastcc ptr @TypeChecker_check_const_declaration(ptr %0, ptr nonnull %1)
  br label %common.ret

if.entry10:                                       ; preds = %2
  %24 = tail call fastcc ptr @TypeChecker_check_for_statement(ptr %0, ptr nonnull %1)
  br label %common.ret

if.entry14:                                       ; preds = %2
  %memberidx.i78 = getelementptr inbounds %WhileStatementNode, ptr %1, i64 0, i32 2
  %25 = load ptr, ptr %memberidx.i78, align 8
  %26 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %26, align 4
  %27 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %26, ptr %25)
  %memberidx.i.i85 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %28 = load ptr, ptr %memberidx.i.i85, align 8
  %memberidx1.i.i86 = getelementptr inbounds %Compiler, ptr %28, i64 0, i32 6
  %29 = load ptr, ptr %memberidx1.i.i86, align 8
  %memberidx2.i.i87 = getelementptr inbounds %Array_FloError_, ptr %29, i64 0, i32 2
  %30 = load i64, ptr %memberidx2.i.i87, align 4
  %31 = icmp sgt i64 %30, 0
  br i1 %31, label %TypeChecker_check_condition.exit, label %ifend.i90

ifend.i90:                                        ; preds = %if.entry14
  %memberidx.i89 = getelementptr inbounds %Expression, ptr %27, i64 0, i32 3
  %32 = load ptr, ptr %memberidx.i89, align 8
  %33 = load i64, ptr %32, align 4
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %TypeChecker_check_condition.exit, label %true_block.i95

true_block.i95:                                   ; preds = %ifend.i90
  %35 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %35, align 4
  %36 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %36, align 4
  %memberidx.i.i.i.i91 = getelementptr inbounds %Expression, ptr %36, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i.i91, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %Expression, ptr %36, i64 0, i32 1
  %memberidx.i.i.i92 = getelementptr inbounds %TypeCastExpression, ptr %36, i64 0, i32 4
  store ptr %27, ptr %memberidx.i.i.i92, align 8
  %memberidx1.i.i.i93 = getelementptr inbounds %Expression, ptr %36, i64 0, i32 3
  store ptr %35, ptr %memberidx1.i.i.i93, align 8
  %memberidx3.i.i.i = getelementptr inbounds %Expression, ptr %27, i64 0, i32 1
  %37 = load i1, ptr %memberidx3.i.i.i, align 1
  store i1 %37, ptr %memberidx1.i.i.i.i, align 1
  br label %TypeChecker_check_condition.exit

TypeChecker_check_condition.exit:                 ; preds = %ifend.i90, %if.entry14, %true_block.i95
  %common.ret.op.i88 = phi ptr [ null, %if.entry14 ], [ %36, %true_block.i95 ], [ %27, %ifend.i90 ]
  %memberidx1.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 7
  %38 = load i1, ptr %memberidx1.i, align 1
  store i1 true, ptr %memberidx1.i, align 1
  %memberidx3.i = getelementptr inbounds %WhileStatementNode, ptr %1, i64 0, i32 3
  %39 = load ptr, ptr %memberidx3.i, align 8
  %40 = tail call fastcc ptr @TypeChecker_check_block(ptr nonnull %0, ptr %39)
  store i1 %38, ptr %memberidx1.i, align 1
  %41 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %41, align 4
  %memberidx.i.i79 = getelementptr inbounds %WhileStatement, ptr %41, i64 0, i32 1
  store ptr %common.ret.op.i88, ptr %memberidx.i.i79, align 8
  %memberidx1.i.i80 = getelementptr inbounds %WhileStatement, ptr %41, i64 0, i32 2
  store ptr %40, ptr %memberidx1.i.i80, align 8
  br label %common.ret

if.entry18:                                       ; preds = %2
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 7
  %42 = load i1, ptr %memberidx.i, align 1
  br i1 %42, label %ifend.i, label %if.entry.i

if.entry.i:                                       ; preds = %if.entry18
  %43 = tail call ptr @malloc(i32 256)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %43, ptr noundef nonnull align 8 dereferenceable(32) @266, i64 32, i1 false)
  %44 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %44, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %44, i64 0, i32 1
  store ptr %43, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %44, i64 0, i32 2
  store i64 32, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %44, i64 0, i32 3
  store i64 32, ptr %memberidx2.i.i.i, align 4
  %45 = load ptr, ptr %1, align 8
  %memberidx.i.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %46 = load ptr, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %Compiler, ptr %46, i64 0, i32 6
  %47 = load ptr, ptr %memberidx1.i.i, align 8
  %48 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %48, align 4
  %memberidx1.i.i3.i = getelementptr inbounds %FloError, ptr %48, i64 0, i32 2
  store ptr %45, ptr %memberidx1.i.i3.i, align 8
  %memberidx2.i.i4.i = getelementptr inbounds %FloError, ptr %48, i64 0, i32 1
  store ptr %44, ptr %memberidx2.i.i4.i, align 8
  %memberidx.i.i5.i = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 2
  %49 = load i64, ptr %memberidx.i.i5.i, align 4
  %memberidx1.i2.i.i = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 3
  %50 = load i64, ptr %memberidx1.i2.i.i, align 4
  %.not.i.i.i = icmp slt i64 %49, %50
  br i1 %.not.i.i.i, label %if.entry.i.TypeChecker_error.exit.i_crit_edge, label %if.entry.i.i.i

if.entry.i.TypeChecker_error.exit.i_crit_edge:    ; preds = %if.entry.i
  %memberidx4.i.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 1
  %.pre114 = load ptr, ptr %memberidx4.i.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit.i

if.entry.i.i.i:                                   ; preds = %if.entry.i
  %51 = shl i64 %50, 1
  store i64 %51, ptr %memberidx1.i2.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 1
  %52 = load ptr, ptr %memberidx2.i.i.i.i, align 8
  %53 = shl i64 %50, 4
  %54 = tail call ptr @realloc(ptr %52, i64 %53)
  store ptr %54, ptr %memberidx2.i.i.i.i, align 8
  %.pre113 = load i64, ptr %memberidx.i.i5.i, align 4
  br label %TypeChecker_error.exit.i

TypeChecker_error.exit.i:                         ; preds = %if.entry.i.TypeChecker_error.exit.i_crit_edge, %if.entry.i.i.i
  %55 = phi ptr [ %54, %if.entry.i.i.i ], [ %.pre114, %if.entry.i.TypeChecker_error.exit.i_crit_edge ]
  %56 = phi i64 [ %.pre113, %if.entry.i.i.i ], [ %49, %if.entry.i.TypeChecker_error.exit.i_crit_edge ]
  %57 = add i64 %56, 1
  store i64 %57, ptr %memberidx.i.i5.i, align 4
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %55, i64 %56
  store ptr %48, ptr %ptridx.i.i.i, align 8
  br label %common.ret

ifend.i:                                          ; preds = %if.entry18
  %58 = tail call ptr @malloc(i32 8)
  store i64 5, ptr %58, align 4
  br label %common.ret

if.entry22:                                       ; preds = %2
  %memberidx.i58 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 7
  %59 = load i1, ptr %memberidx.i58, align 1
  br i1 %59, label %ifend.i77, label %if.entry.i70

if.entry.i70:                                     ; preds = %if.entry22
  %60 = tail call ptr @malloc(i32 232)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(29) %60, ptr noundef nonnull align 8 dereferenceable(29) @265, i64 29, i1 false)
  %61 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %61, align 8
  %memberidx.i.i.i60 = getelementptr inbounds %string, ptr %61, i64 0, i32 1
  store ptr %60, ptr %memberidx.i.i.i60, align 8
  %memberidx1.i.i.i61 = getelementptr inbounds %string, ptr %61, i64 0, i32 2
  store i64 29, ptr %memberidx1.i.i.i61, align 4
  %memberidx2.i.i.i62 = getelementptr inbounds %string, ptr %61, i64 0, i32 3
  store i64 29, ptr %memberidx2.i.i.i62, align 4
  %62 = load ptr, ptr %1, align 8
  %memberidx.i.i63 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %63 = load ptr, ptr %memberidx.i.i63, align 8
  %memberidx1.i.i64 = getelementptr inbounds %Compiler, ptr %63, i64 0, i32 6
  %64 = load ptr, ptr %memberidx1.i.i64, align 8
  %65 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %65, align 4
  %memberidx1.i.i3.i65 = getelementptr inbounds %FloError, ptr %65, i64 0, i32 2
  store ptr %62, ptr %memberidx1.i.i3.i65, align 8
  %memberidx2.i.i4.i66 = getelementptr inbounds %FloError, ptr %65, i64 0, i32 1
  store ptr %61, ptr %memberidx2.i.i4.i66, align 8
  %memberidx.i.i5.i67 = getelementptr inbounds %Array_FloError_, ptr %64, i64 0, i32 2
  %66 = load i64, ptr %memberidx.i.i5.i67, align 4
  %memberidx1.i2.i.i68 = getelementptr inbounds %Array_FloError_, ptr %64, i64 0, i32 3
  %67 = load i64, ptr %memberidx1.i2.i.i68, align 4
  %.not.i.i.i69 = icmp slt i64 %66, %67
  br i1 %.not.i.i.i69, label %if.entry.i70.TypeChecker_error.exit.i76_crit_edge, label %if.entry.i.i.i73

if.entry.i70.TypeChecker_error.exit.i76_crit_edge: ; preds = %if.entry.i70
  %memberidx4.i.i.i74.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %64, i64 0, i32 1
  %.pre112 = load ptr, ptr %memberidx4.i.i.i74.phi.trans.insert, align 8
  br label %TypeChecker_error.exit.i76

if.entry.i.i.i73:                                 ; preds = %if.entry.i70
  %68 = shl i64 %67, 1
  store i64 %68, ptr %memberidx1.i2.i.i68, align 4
  %memberidx2.i.i.i.i72 = getelementptr inbounds %Array_FloError_, ptr %64, i64 0, i32 1
  %69 = load ptr, ptr %memberidx2.i.i.i.i72, align 8
  %70 = shl i64 %67, 4
  %71 = tail call ptr @realloc(ptr %69, i64 %70)
  store ptr %71, ptr %memberidx2.i.i.i.i72, align 8
  %.pre = load i64, ptr %memberidx.i.i5.i67, align 4
  br label %TypeChecker_error.exit.i76

TypeChecker_error.exit.i76:                       ; preds = %if.entry.i70.TypeChecker_error.exit.i76_crit_edge, %if.entry.i.i.i73
  %72 = phi ptr [ %71, %if.entry.i.i.i73 ], [ %.pre112, %if.entry.i70.TypeChecker_error.exit.i76_crit_edge ]
  %73 = phi i64 [ %.pre, %if.entry.i.i.i73 ], [ %66, %if.entry.i70.TypeChecker_error.exit.i76_crit_edge ]
  %74 = add i64 %73, 1
  store i64 %74, ptr %memberidx.i.i5.i67, align 4
  %ptridx.i.i.i75 = getelementptr inbounds ptr, ptr %72, i64 %73
  store ptr %65, ptr %ptridx.i.i.i75, align 8
  br label %common.ret

ifend.i77:                                        ; preds = %if.entry22
  %75 = tail call ptr @malloc(i32 8)
  store i64 6, ptr %75, align 4
  br label %common.ret

if.entry26:                                       ; preds = %2
  %76 = tail call fastcc ptr @TypeChecker_check_can_return(ptr %0, ptr nonnull %1)
  br label %common.ret

if.entry30:                                       ; preds = %2
  %77 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %77, align 4
  %78 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %77, ptr nonnull %1)
  br label %common.ret
}

define internal fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr %1, ptr %2) unnamed_addr {
  br label %tailrecurse.outer

tailrecurse.outer:                                ; preds = %if.entry26, %3
  %accumulator.tr.ph = phi i1 [ %34, %if.entry26 ], [ true, %3 ]
  %.tr134.ph = phi ptr [ %32, %if.entry26 ], [ %1, %3 ]
  %.tr135.ph = phi ptr [ %33, %if.entry26 ], [ %2, %3 ]
  br label %tailrecurse.outer139

tailrecurse.outer139:                             ; preds = %tailrecurse.outer, %if.entry34
  %.tr134.ph140 = phi ptr [ %.tr134.ph, %tailrecurse.outer ], [ %35, %if.entry34 ]
  %.tr135.ph141 = phi ptr [ %.tr135.ph, %tailrecurse.outer ], [ %36, %if.entry34 ]
  %memberidx6 = getelementptr inbounds %FunctionType, ptr %.tr134.ph140, i64 0, i32 1
  %memberidx14 = getelementptr inbounds %FunctionType, ptr %.tr134.ph140, i64 0, i32 2
  %.pre = load i64, ptr %.tr134.ph140, align 4
  br label %tailrecurse

tailrecurse:                                      ; preds = %tailrecurse.outer139, %ifend53
  %4 = phi i64 [ 13, %ifend53 ], [ %.pre, %tailrecurse.outer139 ]
  %.tr135 = phi ptr [ %57, %ifend53 ], [ %.tr135.ph141, %tailrecurse.outer139 ]
  %5 = load i64, ptr %.tr135, align 4
  %.not = icmp eq i64 %4, %5
  br i1 %.not, label %ifend, label %common.ret

common.ret:                                       ; preds = %ifend5, %ifend53, %if.entry40, %ifend12, %if.entry3, %tailrecurse, %for.body, %for.cond83, %for.body84, %for.cond83.preheader, %if.entry67, %ifend74, %ifend.i.i, %if.entry61
  %common.ret.op = phi i1 [ %60, %if.entry61 ], [ false, %ifend.i.i ], [ false, %ifend74 ], [ false, %if.entry67 ], [ true, %for.cond83.preheader ], [ %83, %for.body84 ], [ %83, %for.cond83 ], [ false, %for.body ], [ false, %tailrecurse ], [ false, %if.entry3 ], [ false, %ifend12 ], [ true, %if.entry40 ], [ false, %ifend53 ], [ true, %ifend5 ]
  %accumulator.ret.tr = and i1 %accumulator.tr.ph, %common.ret.op
  ret i1 %accumulator.ret.tr

ifend:                                            ; preds = %tailrecurse
  %6 = icmp eq i64 %4, 17
  br i1 %6, label %if.entry3, label %ifend5

if.entry3:                                        ; preds = %ifend
  %7 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %Array_Type_, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx7, align 4
  %memberidx8 = getelementptr inbounds %FunctionType, ptr %.tr135, i64 0, i32 1
  %9 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Array_Type_, ptr %9, i64 0, i32 2
  %10 = load i64, ptr %memberidx9, align 4
  %.not120 = icmp eq i64 %8, %10
  br i1 %.not120, label %ifend12, label %common.ret

ifend5thread-pre-split:                           ; preds = %for.cond, %for.cond.preheader
  %.pr = load i64, ptr %.tr134.ph140, align 4
  br label %ifend5

ifend5:                                           ; preds = %ifend5thread-pre-split, %ifend
  %11 = phi i64 [ %.pr, %ifend5thread-pre-split ], [ %4, %ifend ]
  switch i64 %11, label %common.ret [
    i64 16, label %if.entry26
    i64 15, label %if.entry34
    i64 13, label %if.entry40
    i64 14, label %if.entry61
    i64 20, label %if.entry67
  ]

ifend12:                                          ; preds = %if.entry3
  %memberidx13 = getelementptr inbounds %FunctionType, ptr %.tr135, i64 0, i32 2
  %12 = load ptr, ptr %memberidx13, align 8
  %13 = load ptr, ptr %memberidx14, align 8
  %14 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr %12, ptr %13)
  br i1 %14, label %for.cond.preheader, label %common.ret

for.cond.preheader:                               ; preds = %ifend12
  %15 = load ptr, ptr %memberidx6, align 8
  %memberidx19158 = getelementptr inbounds %Array_Type_, ptr %15, i64 0, i32 2
  %16 = load i64, ptr %memberidx19158, align 4
  %17 = icmp sgt i64 %16, 0
  br i1 %17, label %for.body, label %ifend5thread-pre-split

for.cond:                                         ; preds = %for.body
  %18 = add nuw nsw i64 %storemerge121159, 1
  %19 = load ptr, ptr %memberidx6, align 8
  %memberidx19 = getelementptr inbounds %Array_Type_, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx19, align 4
  %21 = icmp slt i64 %18, %20
  br i1 %21, label %for.body, label %ifend5thread-pre-split

for.body:                                         ; preds = %for.cond.preheader, %for.cond
  %22 = phi ptr [ %19, %for.cond ], [ %15, %for.cond.preheader ]
  %storemerge121159 = phi i64 [ %18, %for.cond ], [ 0, %for.cond.preheader ]
  %memberidx.i122 = getelementptr inbounds %Array_Type_, ptr %22, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i122, align 8
  %ptridx.i123 = getelementptr inbounds ptr, ptr %23, i64 %storemerge121159
  %24 = load ptr, ptr %ptridx.i123, align 8
  %25 = load ptr, ptr %memberidx8, align 8
  %memberidx.i124 = getelementptr inbounds %Array_Type_, ptr %25, i64 0, i32 1
  %26 = load ptr, ptr %memberidx.i124, align 8
  %ptridx.i125 = getelementptr inbounds ptr, ptr %26, i64 %storemerge121159
  %27 = load ptr, ptr %ptridx.i125, align 8
  %28 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr %24, ptr %27)
  br i1 %28, label %for.cond, label %common.ret

if.entry26:                                       ; preds = %ifend5
  %29 = load i64, ptr %memberidx14, align 4
  %memberidx30 = getelementptr inbounds %ArrayType, ptr %.tr135, i64 0, i32 2
  %30 = load i64, ptr %memberidx30, align 4
  %31 = icmp eq i64 %29, %30
  %32 = load ptr, ptr %memberidx6, align 8
  %memberidx32 = getelementptr inbounds %ArrayType, ptr %.tr135, i64 0, i32 1
  %33 = load ptr, ptr %memberidx32, align 8
  %34 = and i1 %accumulator.tr.ph, %31
  br label %tailrecurse.outer

if.entry34:                                       ; preds = %ifend5
  %35 = load ptr, ptr %memberidx6, align 8
  %memberidx38 = getelementptr inbounds %PointerType, ptr %.tr135, i64 0, i32 1
  %36 = load ptr, ptr %memberidx38, align 8
  br label %tailrecurse.outer139

if.entry40:                                       ; preds = %ifend5
  %37 = load ptr, ptr %memberidx6, align 8
  %memberidx44 = getelementptr inbounds %ObjectType, ptr %.tr135, i64 0, i32 1
  %38 = load ptr, ptr %memberidx44, align 8
  %memberidx45 = getelementptr inbounds %TypeId, ptr %37, i64 0, i32 1
  %39 = load i64, ptr %memberidx45, align 4
  %memberidx46 = getelementptr inbounds %TypeId, ptr %38, i64 0, i32 1
  %40 = load i64, ptr %memberidx46, align 4
  %41 = icmp eq i64 %39, %40
  %42 = load i64, ptr %37, align 4
  %43 = load i64, ptr %38, align 4
  %44 = icmp eq i64 %42, %43
  %45 = and i1 %41, %44
  %memberidx49 = getelementptr inbounds %TypeId, ptr %37, i64 0, i32 2
  %46 = load i64, ptr %memberidx49, align 4
  %memberidx50 = getelementptr inbounds %TypeId, ptr %38, i64 0, i32 2
  %47 = load i64, ptr %memberidx50, align 4
  %48 = icmp eq i64 %46, %47
  %49 = and i1 %45, %48
  br i1 %49, label %common.ret, label %ifend53

ifend53:                                          ; preds = %if.entry40
  %50 = load ptr, ptr %0, align 8
  %memberidx.i128 = getelementptr inbounds %Program, ptr %50, i64 0, i32 1
  %51 = load ptr, ptr %memberidx.i128, align 8
  %memberidx.i.i129 = getelementptr inbounds %Array_Module_, ptr %51, i64 0, i32 1
  %52 = load ptr, ptr %memberidx.i.i129, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %52, i64 %43
  %53 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %53, i64 0, i32 4
  %54 = load ptr, ptr %memberidx2.i, align 8
  %memberidx.i5.i = getelementptr inbounds %Array_Class_, ptr %54, i64 0, i32 1
  %55 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %55, i64 %47
  %56 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx55 = getelementptr inbounds %Class, ptr %56, i64 0, i32 2
  %57 = load ptr, ptr %memberidx55, align 8
  %.not119 = icmp eq ptr %57, null
  br i1 %.not119, label %common.ret, label %tailrecurse

if.entry61:                                       ; preds = %ifend5
  %58 = load ptr, ptr %memberidx6, align 8
  %memberidx65 = getelementptr inbounds %EnumType, ptr %.tr135, i64 0, i32 1
  %59 = load ptr, ptr %memberidx65, align 8
  %60 = icmp eq ptr %58, %59
  br label %common.ret

if.entry67:                                       ; preds = %ifend5
  %61 = load ptr, ptr %memberidx6, align 8
  %memberidx71 = getelementptr inbounds %GenericType, ptr %.tr135, i64 0, i32 1
  %62 = load ptr, ptr %memberidx71, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %61, i64 0, i32 2
  %63 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %string, ptr %62, i64 0, i32 2
  %64 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i.i = icmp eq i64 %63, %64
  br i1 %.not.i.i, label %ifend.i.i, label %common.ret

ifend.i.i:                                        ; preds = %if.entry67
  %memberidx2.i.i = getelementptr inbounds %string, ptr %61, i64 0, i32 1
  %65 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %string, ptr %62, i64 0, i32 1
  %66 = load ptr, ptr %memberidx3.i.i, align 8
  %67 = tail call i64 @memcmp(ptr %65, ptr %66, i64 %63)
  %.not133 = icmp eq i64 %67, 0
  br i1 %.not133, label %ifend74, label %common.ret

ifend74:                                          ; preds = %ifend.i.i
  %68 = load ptr, ptr %memberidx14, align 8
  %memberidx76 = getelementptr inbounds %Array_Type_, ptr %68, i64 0, i32 2
  %69 = load i64, ptr %memberidx76, align 4
  %memberidx77 = getelementptr inbounds %GenericType, ptr %.tr135, i64 0, i32 2
  %70 = load ptr, ptr %memberidx77, align 8
  %memberidx78 = getelementptr inbounds %Array_Type_, ptr %70, i64 0, i32 2
  %71 = load i64, ptr %memberidx78, align 4
  %.not118 = icmp eq i64 %69, %71
  br i1 %.not118, label %for.cond83.preheader, label %common.ret

for.cond83.preheader:                             ; preds = %ifend74
  %72 = icmp sgt i64 %69, 0
  br i1 %72, label %for.body84, label %common.ret

for.cond83:                                       ; preds = %for.body84
  %73 = add nuw nsw i64 %storemerge156, 1
  %74 = load ptr, ptr %memberidx14, align 8
  %memberidx88 = getelementptr inbounds %Array_Type_, ptr %74, i64 0, i32 2
  %75 = load i64, ptr %memberidx88, align 4
  %76 = icmp slt i64 %73, %75
  br i1 %76, label %for.body84, label %common.ret

for.body84:                                       ; preds = %for.cond83.preheader, %for.cond83
  %77 = phi ptr [ %74, %for.cond83 ], [ %68, %for.cond83.preheader ]
  %storemerge156 = phi i64 [ %73, %for.cond83 ], [ 0, %for.cond83.preheader ]
  %memberidx.i126 = getelementptr inbounds %Array_Type_, ptr %77, i64 0, i32 1
  %78 = load ptr, ptr %memberidx.i126, align 8
  %ptridx.i127 = getelementptr inbounds ptr, ptr %78, i64 %storemerge156
  %79 = load ptr, ptr %ptridx.i127, align 8
  %80 = load ptr, ptr %memberidx77, align 8
  %memberidx.i = getelementptr inbounds %Array_Type_, ptr %80, i64 0, i32 1
  %81 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %81, i64 %storemerge156
  %82 = load ptr, ptr %ptridx.i, align 8
  %83 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr %79, ptr %82)
  br i1 %83, label %for.cond83, label %common.ret
}

define internal fastcc ptr @TypeChecker_create_scope(ptr nocapture readonly %0) unnamed_addr {
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %2 = load i64, ptr %memberidx.i, align 4
  %3 = load ptr, ptr %0, align 8
  %memberidx1.i.i = getelementptr inbounds %Program, ptr %3, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %4, i64 0, i32 1
  %5 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %5, i64 %2
  %6 = load ptr, ptr %ptridx.i.i.i, align 8
  %7 = tail call ptr @malloc(i32 56)
  %8 = load i64, ptr %memberidx.i, align 4
  %memberidx1 = getelementptr inbounds %Module, ptr %6, i64 0, i32 7
  %9 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Scope_, ptr %9, i64 0, i32 2
  %10 = load i64, ptr %memberidx2, align 4
  %11 = tail call ptr @malloc(i32 16)
  store i64 %8, ptr %11, align 4
  %memberidx1.i.i8 = getelementptr inbounds %ScopeId, ptr %11, i64 0, i32 1
  store i64 %10, ptr %memberidx1.i.i8, align 4
  store ptr %11, ptr %7, align 8
  %12 = tail call ptr @malloc(i32 32)
  store ptr @VTableMap_string_VarId_, ptr %12, align 8
  %memberidx.i13.i = getelementptr inbounds %Map_string_VarId_, ptr %12, i64 0, i32 1
  %13 = tail call ptr @malloc(i32 2048)
  store ptr %13, ptr %memberidx.i13.i, align 8
  br label %for.body.i18.i

for.body.i18.i:                                   ; preds = %1, %for.body.i18.i
  %i.0.i14.i18 = phi i64 [ 0, %1 ], [ %16, %for.body.i18.i ]
  %14 = load ptr, ptr %memberidx.i13.i, align 8
  %ptridx.i16.i = getelementptr inbounds ptr, ptr %14, i64 %i.0.i14.i18
  %15 = tail call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_VarId_, ptr %15, align 8
  %memberidx.i.i17.i = getelementptr inbounds %Bucket_string_VarId_, ptr %15, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i17.i, align 1
  store ptr %15, ptr %ptridx.i16.i, align 8
  %16 = add nuw nsw i64 %i.0.i14.i18, 1
  %17 = icmp ult i64 %i.0.i14.i18, 255
  br i1 %17, label %for.body.i18.i, label %Map_string_VarId__constructor.exit.i

Map_string_VarId__constructor.exit.i:             ; preds = %for.body.i18.i
  %memberidx1.i9 = getelementptr inbounds %Scope, ptr %7, i64 0, i32 1
  %memberidx2.i19.i = getelementptr inbounds %Map_string_VarId_, ptr %12, i64 0, i32 3
  store i64 256, ptr %memberidx2.i19.i, align 4
  %memberidx3.i20.i = getelementptr inbounds %Map_string_VarId_, ptr %12, i64 0, i32 2
  store i64 0, ptr %memberidx3.i20.i, align 4
  store ptr %12, ptr %memberidx1.i9, align 8
  %18 = tail call ptr @malloc(i32 32)
  store ptr @VTableMap_string_ClassId_, ptr %18, align 8
  %memberidx.i21.i = getelementptr inbounds %Map_string_ClassId_, ptr %18, i64 0, i32 1
  %19 = tail call ptr @malloc(i32 2048)
  store ptr %19, ptr %memberidx.i21.i, align 8
  br label %for.body.i26.i

for.body.i26.i:                                   ; preds = %Map_string_VarId__constructor.exit.i, %for.body.i26.i
  %i.0.i22.i17 = phi i64 [ 0, %Map_string_VarId__constructor.exit.i ], [ %22, %for.body.i26.i ]
  %20 = load ptr, ptr %memberidx.i21.i, align 8
  %ptridx.i24.i = getelementptr inbounds ptr, ptr %20, i64 %i.0.i22.i17
  %21 = tail call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_ClassId_, ptr %21, align 8
  %memberidx.i.i25.i = getelementptr inbounds %Bucket_string_ClassId_, ptr %21, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i25.i, align 1
  store ptr %21, ptr %ptridx.i24.i, align 8
  %22 = add nuw nsw i64 %i.0.i22.i17, 1
  %23 = icmp ult i64 %i.0.i22.i17, 255
  br i1 %23, label %for.body.i26.i, label %Map_string_ClassId__constructor.exit.i

Map_string_ClassId__constructor.exit.i:           ; preds = %for.body.i26.i
  %memberidx2.i = getelementptr inbounds %Scope, ptr %7, i64 0, i32 2
  %memberidx2.i27.i = getelementptr inbounds %Map_string_ClassId_, ptr %18, i64 0, i32 3
  store i64 256, ptr %memberidx2.i27.i, align 4
  %memberidx3.i28.i = getelementptr inbounds %Map_string_ClassId_, ptr %18, i64 0, i32 2
  store i64 0, ptr %memberidx3.i28.i, align 4
  store ptr %18, ptr %memberidx2.i, align 8
  %24 = tail call ptr @malloc(i32 32)
  store ptr @VTableMap_string_VarId_, ptr %24, align 8
  %memberidx.i29.i = getelementptr inbounds %Map_string_VarId_, ptr %24, i64 0, i32 1
  %25 = tail call ptr @malloc(i32 2048)
  store ptr %25, ptr %memberidx.i29.i, align 8
  br label %for.body.i34.i

for.body.i34.i:                                   ; preds = %Map_string_ClassId__constructor.exit.i, %for.body.i34.i
  %i.0.i30.i16 = phi i64 [ 0, %Map_string_ClassId__constructor.exit.i ], [ %28, %for.body.i34.i ]
  %26 = load ptr, ptr %memberidx.i29.i, align 8
  %ptridx.i32.i = getelementptr inbounds ptr, ptr %26, i64 %i.0.i30.i16
  %27 = tail call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_VarId_, ptr %27, align 8
  %memberidx.i.i33.i = getelementptr inbounds %Bucket_string_VarId_, ptr %27, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i33.i, align 1
  store ptr %27, ptr %ptridx.i32.i, align 8
  %28 = add nuw nsw i64 %i.0.i30.i16, 1
  %29 = icmp ult i64 %i.0.i30.i16, 255
  br i1 %29, label %for.body.i34.i, label %Map_string_VarId__constructor.exit37.i

Map_string_VarId__constructor.exit37.i:           ; preds = %for.body.i34.i
  %memberidx3.i = getelementptr inbounds %Scope, ptr %7, i64 0, i32 3
  %memberidx2.i35.i = getelementptr inbounds %Map_string_VarId_, ptr %24, i64 0, i32 3
  store i64 256, ptr %memberidx2.i35.i, align 4
  %memberidx3.i36.i = getelementptr inbounds %Map_string_VarId_, ptr %24, i64 0, i32 2
  store i64 0, ptr %memberidx3.i36.i, align 4
  store ptr %24, ptr %memberidx3.i, align 8
  %30 = tail call ptr @malloc(i32 32)
  store ptr @VTableMap_string_EnumId_, ptr %30, align 8
  %memberidx.i38.i = getelementptr inbounds %Map_string_EnumId_, ptr %30, i64 0, i32 1
  %31 = tail call ptr @malloc(i32 2048)
  store ptr %31, ptr %memberidx.i38.i, align 8
  br label %for.body.i43.i

for.body.i43.i:                                   ; preds = %Map_string_VarId__constructor.exit37.i, %for.body.i43.i
  %i.0.i39.i15 = phi i64 [ 0, %Map_string_VarId__constructor.exit37.i ], [ %34, %for.body.i43.i ]
  %32 = load ptr, ptr %memberidx.i38.i, align 8
  %ptridx.i41.i = getelementptr inbounds ptr, ptr %32, i64 %i.0.i39.i15
  %33 = tail call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_EnumId_, ptr %33, align 8
  %memberidx.i.i42.i = getelementptr inbounds %Bucket_string_EnumId_, ptr %33, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i42.i, align 1
  store ptr %33, ptr %ptridx.i41.i, align 8
  %34 = add nuw nsw i64 %i.0.i39.i15, 1
  %35 = icmp ult i64 %i.0.i39.i15, 255
  br i1 %35, label %for.body.i43.i, label %Map_string_EnumId__constructor.exit.i

Map_string_EnumId__constructor.exit.i:            ; preds = %for.body.i43.i
  %memberidx4.i10 = getelementptr inbounds %Scope, ptr %7, i64 0, i32 4
  %memberidx2.i44.i = getelementptr inbounds %Map_string_EnumId_, ptr %30, i64 0, i32 3
  store i64 256, ptr %memberidx2.i44.i, align 4
  %memberidx3.i45.i = getelementptr inbounds %Map_string_EnumId_, ptr %30, i64 0, i32 2
  store i64 0, ptr %memberidx3.i45.i, align 4
  store ptr %30, ptr %memberidx4.i10, align 8
  %36 = tail call ptr @malloc(i32 32)
  store ptr @VTableMap_string_Type_, ptr %36, align 8
  %memberidx.i.i11 = getelementptr inbounds %Map_string_Type_, ptr %36, i64 0, i32 1
  %37 = tail call ptr @malloc(i32 2048)
  store ptr %37, ptr %memberidx.i.i11, align 8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %Map_string_EnumId__constructor.exit.i, %for.body.i.i
  %i.0.i.i14 = phi i64 [ 0, %Map_string_EnumId__constructor.exit.i ], [ %40, %for.body.i.i ]
  %38 = load ptr, ptr %memberidx.i.i11, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %38, i64 %i.0.i.i14
  %39 = tail call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_Type_, ptr %39, align 8
  %memberidx.i.i.i12 = getelementptr inbounds %Bucket_string_Type_, ptr %39, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i.i12, align 1
  store ptr %39, ptr %ptridx.i.i, align 8
  %40 = add nuw nsw i64 %i.0.i.i14, 1
  %41 = icmp ult i64 %i.0.i.i14, 255
  br i1 %41, label %for.body.i.i, label %Scope_constructor.exit

Scope_constructor.exit:                           ; preds = %for.body.i.i
  %memberidx5.i = getelementptr inbounds %Scope, ptr %7, i64 0, i32 6
  %memberidx2.i.i13 = getelementptr inbounds %Map_string_Type_, ptr %36, i64 0, i32 3
  store i64 256, ptr %memberidx2.i.i13, align 4
  %memberidx3.i.i = getelementptr inbounds %Map_string_Type_, ptr %36, i64 0, i32 2
  store i64 0, ptr %memberidx3.i.i, align 4
  store ptr %36, ptr %memberidx5.i, align 8
  %memberidx6.i = getelementptr inbounds %Scope, ptr %7, i64 0, i32 5
  store ptr null, ptr %memberidx6.i, align 8
  %42 = load ptr, ptr %memberidx1, align 8
  %memberidx.i7 = getelementptr inbounds %Array_Scope_, ptr %42, i64 0, i32 2
  %43 = load i64, ptr %memberidx.i7, align 4
  %memberidx1.i = getelementptr inbounds %Array_Scope_, ptr %42, i64 0, i32 3
  %44 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp slt i64 %43, %44
  br i1 %.not.i, label %Scope_constructor.exit.Array_Scope____sl__.exit_crit_edge, label %if.entry.i

Scope_constructor.exit.Array_Scope____sl__.exit_crit_edge: ; preds = %Scope_constructor.exit
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_Scope_, ptr %42, i64 0, i32 1
  %.pre19 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_Scope____sl__.exit

if.entry.i:                                       ; preds = %Scope_constructor.exit
  %45 = shl i64 %44, 1
  store i64 %45, ptr %memberidx1.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_Scope_, ptr %42, i64 0, i32 1
  %46 = load ptr, ptr %memberidx2.i.i, align 8
  %47 = shl i64 %44, 4
  %48 = tail call ptr @realloc(ptr %46, i64 %47)
  store ptr %48, ptr %memberidx2.i.i, align 8
  %.pre = load i64, ptr %memberidx.i7, align 4
  br label %Array_Scope____sl__.exit

Array_Scope____sl__.exit:                         ; preds = %Scope_constructor.exit.Array_Scope____sl__.exit_crit_edge, %if.entry.i
  %49 = phi ptr [ %.pre19, %Scope_constructor.exit.Array_Scope____sl__.exit_crit_edge ], [ %48, %if.entry.i ]
  %50 = phi i64 [ %43, %Scope_constructor.exit.Array_Scope____sl__.exit_crit_edge ], [ %.pre, %if.entry.i ]
  %51 = add i64 %50, 1
  store i64 %51, ptr %memberidx.i7, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %49, i64 %50
  store ptr %7, ptr %ptridx.i, align 8
  ret ptr %7
}

define internal fastcc ptr @TypeChecker_check_object_binary_expr(ptr %0, ptr %1, ptr nocapture readonly %2, ptr %3) unnamed_addr {
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 4
  %5 = load i64, ptr %memberidx, align 4
  %6 = tail call fastcc ptr @bin_op_to_op_overload_name(i64 %5)
  %7 = icmp eq ptr %6, null
  br i1 %7, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend24, %ifend35, %TypeChecker_error.exit136, %if.entry29, %TypeChecker_error.exit109, %if.entry10, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ %71, %if.entry10 ], [ null, %TypeChecker_error.exit109 ], [ %115, %if.entry29 ], [ null, %TypeChecker_error.exit136 ], [ %149, %ifend35 ], [ null, %ifend24 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %4
  %8 = tail call fastcc ptr @dump_bin_op(i64 %5)
  %9 = load ptr, ptr %8, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %9, i64 0, i32 5
  %10 = load ptr, ptr %memberidx1, align 8
  %11 = tail call ptr %10(ptr nonnull %8)
  %12 = alloca ptr, align 8
  %13 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %12, ptr nonnull @215, ptr %11)
  %14 = load ptr, ptr %12, align 8
  %15 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %15, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %15, i64 0, i32 1
  store ptr %14, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %15, i64 0, i32 2
  store i64 %13, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %15, i64 0, i32 3
  store i64 %13, ptr %memberidx2.i, align 4
  tail call void @free(ptr %11)
  %16 = load ptr, ptr %2, align 8
  %memberidx.i78 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %17 = load ptr, ptr %memberidx.i78, align 8
  %memberidx1.i79 = getelementptr inbounds %Compiler, ptr %17, i64 0, i32 6
  %18 = load ptr, ptr %memberidx1.i79, align 8
  %19 = call ptr @malloc(i32 24)
  store i64 4, ptr %19, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %19, i64 0, i32 2
  store ptr %16, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %19, i64 0, i32 1
  store ptr %15, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 2
  %20 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 3
  %21 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %20, %21
  br i1 %.not.i.i, label %if.entry.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry.TypeChecker_error.exit_crit_edge:        ; preds = %if.entry
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 1
  %.pre165 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry
  %22 = shl i64 %21, 1
  store i64 %22, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 1
  %23 = load ptr, ptr %memberidx2.i.i.i, align 8
  %24 = shl i64 %21, 4
  %25 = call ptr @realloc(ptr %23, i64 %24)
  store ptr %25, ptr %memberidx2.i.i.i, align 8
  %.pre164 = load i64, ptr %memberidx.i.i, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %26 = phi ptr [ %.pre165, %if.entry.TypeChecker_error.exit_crit_edge ], [ %25, %if.entry.i.i ]
  %27 = phi i64 [ %20, %if.entry.TypeChecker_error.exit_crit_edge ], [ %.pre164, %if.entry.i.i ]
  %28 = add i64 %27, 1
  store i64 %28, ptr %memberidx.i.i, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %26, i64 %27
  store ptr %19, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend:                                            ; preds = %4
  %29 = load ptr, ptr %0, align 8
  %memberidx4 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 3
  br label %tailrecurse.i

tailrecurse.i:                                    ; preds = %if.entry.i154, %ifend
  %.tr11.i.in = phi ptr [ %memberidx4, %ifend ], [ %memberidx1.i153, %if.entry.i154 ]
  %.tr11.i = load ptr, ptr %.tr11.i.in, align 8
  %30 = load i64, ptr %.tr11.i, align 4
  switch i64 %30, label %get_class_from_type.exit [
    i64 20, label %if.entry.i154
    i64 13, label %if.entry3.i
  ]

if.entry.i154:                                    ; preds = %tailrecurse.i
  %memberidx1.i153 = getelementptr inbounds %GenericType, ptr %.tr11.i, i64 0, i32 3
  br label %tailrecurse.i

if.entry3.i:                                      ; preds = %tailrecurse.i
  %memberidx6.i155 = getelementptr inbounds %ObjectType, ptr %.tr11.i, i64 0, i32 1
  %31 = load ptr, ptr %memberidx6.i155, align 8
  %memberidx.i.i156 = getelementptr inbounds %Program, ptr %29, i64 0, i32 1
  %32 = load ptr, ptr %memberidx.i.i156, align 8
  %33 = load i64, ptr %31, align 4
  %memberidx.i.i.i157 = getelementptr inbounds %Array_Module_, ptr %32, i64 0, i32 1
  %34 = load ptr, ptr %memberidx.i.i.i157, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %34, i64 %33
  %35 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i158 = getelementptr inbounds %Module, ptr %35, i64 0, i32 4
  %36 = load ptr, ptr %memberidx2.i.i158, align 8
  %memberidx3.i.i = getelementptr inbounds %TypeId, ptr %31, i64 0, i32 2
  %37 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %36, i64 0, i32 1
  %38 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %38, i64 %37
  %39 = load ptr, ptr %ptridx.i6.i.i, align 8
  br label %get_class_from_type.exit

get_class_from_type.exit:                         ; preds = %tailrecurse.i, %if.entry3.i
  %common.ret.op.i152 = phi ptr [ %39, %if.entry3.i ], [ null, %tailrecurse.i ]
  %memberidx5 = getelementptr inbounds %Class, ptr %common.ret.op.i152, i64 0, i32 6
  %40 = load ptr, ptr %memberidx5, align 8
  %41 = load ptr, ptr %40, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %41, i64 0, i32 1
  %42 = load ptr, ptr %memberidx6, align 8
  %43 = tail call ptr %42(ptr nonnull %40, ptr nonnull %6)
  %44 = icmp eq ptr %43, null
  br i1 %44, label %if.entry7, label %ifend9

if.entry7:                                        ; preds = %get_class_from_type.exit
  %45 = add i64 %5, -11
  %46 = icmp ult i64 %45, 2
  br i1 %46, label %if.entry10, label %ifend12

ifend9:                                           ; preds = %get_class_from_type.exit
  %47 = load ptr, ptr %0, align 8
  %memberidx.i.i80 = getelementptr inbounds %PropId, ptr %43, i64 0, i32 1
  %48 = load ptr, ptr %memberidx.i.i80, align 8
  %memberidx.i.i.i81 = getelementptr inbounds %Program, ptr %47, i64 0, i32 1
  %49 = load ptr, ptr %memberidx.i.i.i81, align 8
  %50 = load i64, ptr %48, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %49, i64 0, i32 1
  %51 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %51, i64 %50
  %52 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i82 = getelementptr inbounds %Module, ptr %52, i64 0, i32 4
  %53 = load ptr, ptr %memberidx2.i.i.i82, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %48, i64 0, i32 2
  %54 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %53, i64 0, i32 1
  %55 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %55, i64 %54
  %56 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %57 = load i64, ptr %43, align 4
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %ifend9
  %memberidx1.i83 = getelementptr inbounds %Class, ptr %56, i64 0, i32 5
  %59 = load ptr, ptr %memberidx1.i83, align 8
  %memberidx2.i84 = getelementptr inbounds %PropId, ptr %43, i64 0, i32 2
  %60 = load i64, ptr %memberidx2.i84, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %59, i64 0, i32 1
  %61 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %61, i64 %60
  %62 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %62, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %ifend9
  %memberidx4.i = getelementptr inbounds %Class, ptr %56, i64 0, i32 4
  %63 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %43, i64 0, i32 2
  %64 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %63, i64 0, i32 1
  %65 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i85 = getelementptr inbounds ptr, ptr %65, i64 %64
  %66 = load ptr, ptr %ptridx.i.i85, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %66, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i = load ptr, ptr %common.ret.op.in.i, align 8
  %memberidx21 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i, i64 0, i32 1
  %67 = load ptr, ptr %memberidx21, align 8
  %memberidx.i86 = getelementptr inbounds %Array_Type_, ptr %67, i64 0, i32 1
  %68 = load ptr, ptr %memberidx.i86, align 8
  %69 = load ptr, ptr %68, align 8
  %70 = icmp eq ptr %3, null
  br i1 %70, label %if.entry22, label %ifend24

if.entry10:                                       ; preds = %if.entry7
  %71 = tail call ptr @malloc(i32 49)
  %72 = load ptr, ptr %memberidx4, align 8
  %memberidx14 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 5
  %73 = load ptr, ptr %memberidx14, align 8
  %74 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %72, ptr %73)
  %75 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %75, align 4
  store i64 8, ptr %71, align 4
  %memberidx.i.i87 = getelementptr inbounds %Expression, ptr %71, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i87, align 4
  %memberidx1.i.i88 = getelementptr inbounds %Expression, ptr %71, i64 0, i32 1
  %memberidx.i89 = getelementptr inbounds %BinaryExpression, ptr %71, i64 0, i32 4
  store ptr %1, ptr %memberidx.i89, align 8
  %memberidx1.i90 = getelementptr inbounds %BinaryExpression, ptr %71, i64 0, i32 5
  store i64 %5, ptr %memberidx1.i90, align 4
  %memberidx2.i91 = getelementptr inbounds %BinaryExpression, ptr %71, i64 0, i32 6
  store ptr %74, ptr %memberidx2.i91, align 8
  %memberidx3.i92 = getelementptr inbounds %Expression, ptr %71, i64 0, i32 3
  store ptr %75, ptr %memberidx3.i92, align 8
  store i1 false, ptr %memberidx1.i.i88, align 1
  br label %common.ret

ifend12:                                          ; preds = %if.entry7
  %76 = tail call fastcc ptr @dump_bin_op(i64 %5)
  %77 = load ptr, ptr %76, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %77, i64 0, i32 5
  %78 = load ptr, ptr %memberidx15, align 8
  %79 = tail call ptr %78(ptr nonnull %76)
  %memberidx16 = getelementptr inbounds %Class, ptr %common.ret.op.i152, i64 0, i32 1
  %80 = load ptr, ptr %memberidx16, align 8
  %81 = load ptr, ptr %80, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %81, i64 0, i32 5
  %82 = load ptr, ptr %memberidx17, align 8
  %83 = tail call ptr %82(ptr nonnull %80)
  %84 = load ptr, ptr %6, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %84, i64 0, i32 5
  %85 = load ptr, ptr %memberidx18, align 8
  %86 = tail call ptr %85(ptr nonnull %6)
  %87 = alloca ptr, align 8
  %88 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %87, ptr nonnull @216, ptr %79, ptr %83, ptr %86)
  %89 = load ptr, ptr %87, align 8
  %90 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %90, align 8
  %memberidx.i94 = getelementptr inbounds %string, ptr %90, i64 0, i32 1
  store ptr %89, ptr %memberidx.i94, align 8
  %memberidx1.i95 = getelementptr inbounds %string, ptr %90, i64 0, i32 2
  store i64 %88, ptr %memberidx1.i95, align 4
  %memberidx2.i96 = getelementptr inbounds %string, ptr %90, i64 0, i32 3
  store i64 %88, ptr %memberidx2.i96, align 4
  tail call void @free(ptr %79)
  tail call void @free(ptr %83)
  tail call void @free(ptr %86)
  %91 = load ptr, ptr %2, align 8
  %memberidx.i97 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %92 = load ptr, ptr %memberidx.i97, align 8
  %memberidx1.i98 = getelementptr inbounds %Compiler, ptr %92, i64 0, i32 6
  %93 = load ptr, ptr %memberidx1.i98, align 8
  %94 = call ptr @malloc(i32 24)
  store i64 1, ptr %94, align 4
  %memberidx1.i.i99 = getelementptr inbounds %FloError, ptr %94, i64 0, i32 2
  store ptr %91, ptr %memberidx1.i.i99, align 8
  %memberidx2.i.i100 = getelementptr inbounds %FloError, ptr %94, i64 0, i32 1
  store ptr %90, ptr %memberidx2.i.i100, align 8
  %memberidx.i.i101 = getelementptr inbounds %Array_FloError_, ptr %93, i64 0, i32 2
  %95 = load i64, ptr %memberidx.i.i101, align 4
  %memberidx1.i2.i102 = getelementptr inbounds %Array_FloError_, ptr %93, i64 0, i32 3
  %96 = load i64, ptr %memberidx1.i2.i102, align 4
  %.not.i.i103 = icmp slt i64 %95, %96
  br i1 %.not.i.i103, label %ifend12.TypeChecker_error.exit109_crit_edge, label %if.entry.i.i106

ifend12.TypeChecker_error.exit109_crit_edge:      ; preds = %ifend12
  %memberidx4.i.i107.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %93, i64 0, i32 1
  %.pre163 = load ptr, ptr %memberidx4.i.i107.phi.trans.insert, align 8
  br label %TypeChecker_error.exit109

if.entry.i.i106:                                  ; preds = %ifend12
  %97 = shl i64 %96, 1
  store i64 %97, ptr %memberidx1.i2.i102, align 4
  %memberidx2.i.i.i105 = getelementptr inbounds %Array_FloError_, ptr %93, i64 0, i32 1
  %98 = load ptr, ptr %memberidx2.i.i.i105, align 8
  %99 = shl i64 %96, 4
  %100 = call ptr @realloc(ptr %98, i64 %99)
  store ptr %100, ptr %memberidx2.i.i.i105, align 8
  %.pre162 = load i64, ptr %memberidx.i.i101, align 4
  br label %TypeChecker_error.exit109

TypeChecker_error.exit109:                        ; preds = %ifend12.TypeChecker_error.exit109_crit_edge, %if.entry.i.i106
  %101 = phi ptr [ %.pre163, %ifend12.TypeChecker_error.exit109_crit_edge ], [ %100, %if.entry.i.i106 ]
  %102 = phi i64 [ %95, %ifend12.TypeChecker_error.exit109_crit_edge ], [ %.pre162, %if.entry.i.i106 ]
  %103 = add i64 %102, 1
  store i64 %103, ptr %memberidx.i.i101, align 4
  %ptridx.i.i108 = getelementptr inbounds ptr, ptr %101, i64 %102
  store ptr %94, ptr %ptridx.i.i108, align 8
  br label %common.ret

if.entry22:                                       ; preds = %get_class_prop_type.exit
  %memberidx25 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 5
  %104 = load ptr, ptr %memberidx25, align 8
  %105 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %69, ptr %104)
  br label %ifend24

ifend24:                                          ; preds = %get_class_prop_type.exit, %if.entry22
  %right.0 = phi ptr [ %105, %if.entry22 ], [ %3, %get_class_prop_type.exit ]
  %memberidx.i110 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %106 = load ptr, ptr %memberidx.i110, align 8
  %memberidx1.i111 = getelementptr inbounds %Compiler, ptr %106, i64 0, i32 6
  %107 = load ptr, ptr %memberidx1.i111, align 8
  %memberidx2.i112 = getelementptr inbounds %Array_FloError_, ptr %107, i64 0, i32 2
  %108 = load i64, ptr %memberidx2.i112, align 4
  %109 = icmp sgt i64 %108, 0
  br i1 %109, label %common.ret, label %ifend28

ifend28:                                          ; preds = %ifend24
  %memberidx.i113 = getelementptr inbounds %Expression, ptr %right.0, i64 0, i32 2
  %110 = load i64, ptr %memberidx.i113, align 4
  %111 = icmp eq i64 %110, 5
  %112 = add i64 %5, -11
  %113 = icmp ult i64 %112, 2
  %114 = and i1 %113, %111
  br i1 %114, label %if.entry29, label %ifend31

if.entry29:                                       ; preds = %ifend28
  %115 = tail call ptr @malloc(i32 49)
  %116 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %116, align 4
  store i64 8, ptr %115, align 4
  %memberidx.i.i114 = getelementptr inbounds %Expression, ptr %115, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i114, align 4
  %memberidx1.i.i115 = getelementptr inbounds %Expression, ptr %115, i64 0, i32 1
  %memberidx.i116 = getelementptr inbounds %BinaryExpression, ptr %115, i64 0, i32 4
  store ptr %1, ptr %memberidx.i116, align 8
  %memberidx1.i117 = getelementptr inbounds %BinaryExpression, ptr %115, i64 0, i32 5
  store i64 %5, ptr %memberidx1.i117, align 4
  %memberidx2.i118 = getelementptr inbounds %BinaryExpression, ptr %115, i64 0, i32 6
  store ptr %right.0, ptr %memberidx2.i118, align 8
  %memberidx3.i119 = getelementptr inbounds %Expression, ptr %115, i64 0, i32 3
  store ptr %116, ptr %memberidx3.i119, align 8
  store i1 false, ptr %memberidx1.i.i115, align 1
  br label %common.ret

ifend31:                                          ; preds = %ifend28
  %memberidx32 = getelementptr inbounds %Expression, ptr %right.0, i64 0, i32 3
  %117 = load ptr, ptr %memberidx32, align 8
  %118 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %69, ptr %117)
  br i1 %118, label %ifend35, label %if.entry33

if.entry33:                                       ; preds = %ifend31
  %119 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %69)
  %120 = load ptr, ptr %119, align 8
  %memberidx36 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %120, i64 0, i32 5
  %121 = load ptr, ptr %memberidx36, align 8
  %122 = tail call ptr %121(ptr nonnull %119)
  %123 = load ptr, ptr %memberidx32, align 8
  %124 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %123)
  %125 = load ptr, ptr %124, align 8
  %memberidx38 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %125, i64 0, i32 5
  %126 = load ptr, ptr %memberidx38, align 8
  %127 = tail call ptr %126(ptr nonnull %124)
  %128 = alloca ptr, align 8
  %129 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %128, ptr nonnull @214, ptr %122, ptr %127)
  %130 = load ptr, ptr %128, align 8
  %131 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %131, align 8
  %memberidx.i121 = getelementptr inbounds %string, ptr %131, i64 0, i32 1
  store ptr %130, ptr %memberidx.i121, align 8
  %memberidx1.i122 = getelementptr inbounds %string, ptr %131, i64 0, i32 2
  store i64 %129, ptr %memberidx1.i122, align 4
  %memberidx2.i123 = getelementptr inbounds %string, ptr %131, i64 0, i32 3
  store i64 %129, ptr %memberidx2.i123, align 4
  tail call void @free(ptr %122)
  tail call void @free(ptr %127)
  %memberidx39 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 5
  %132 = load ptr, ptr %memberidx39, align 8
  %133 = load ptr, ptr %132, align 8
  %134 = load ptr, ptr %memberidx.i110, align 8
  %memberidx1.i125 = getelementptr inbounds %Compiler, ptr %134, i64 0, i32 6
  %135 = load ptr, ptr %memberidx1.i125, align 8
  %136 = call ptr @malloc(i32 24)
  store i64 5, ptr %136, align 4
  %memberidx1.i.i126 = getelementptr inbounds %FloError, ptr %136, i64 0, i32 2
  store ptr %133, ptr %memberidx1.i.i126, align 8
  %memberidx2.i.i127 = getelementptr inbounds %FloError, ptr %136, i64 0, i32 1
  store ptr %131, ptr %memberidx2.i.i127, align 8
  %memberidx.i.i128 = getelementptr inbounds %Array_FloError_, ptr %135, i64 0, i32 2
  %137 = load i64, ptr %memberidx.i.i128, align 4
  %memberidx1.i2.i129 = getelementptr inbounds %Array_FloError_, ptr %135, i64 0, i32 3
  %138 = load i64, ptr %memberidx1.i2.i129, align 4
  %.not.i.i130 = icmp slt i64 %137, %138
  br i1 %.not.i.i130, label %if.entry33.TypeChecker_error.exit136_crit_edge, label %if.entry.i.i133

if.entry33.TypeChecker_error.exit136_crit_edge:   ; preds = %if.entry33
  %memberidx4.i.i134.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %135, i64 0, i32 1
  %.pre161 = load ptr, ptr %memberidx4.i.i134.phi.trans.insert, align 8
  br label %TypeChecker_error.exit136

if.entry.i.i133:                                  ; preds = %if.entry33
  %139 = shl i64 %138, 1
  store i64 %139, ptr %memberidx1.i2.i129, align 4
  %memberidx2.i.i.i132 = getelementptr inbounds %Array_FloError_, ptr %135, i64 0, i32 1
  %140 = load ptr, ptr %memberidx2.i.i.i132, align 8
  %141 = shl i64 %138, 4
  %142 = call ptr @realloc(ptr %140, i64 %141)
  store ptr %142, ptr %memberidx2.i.i.i132, align 8
  %.pre = load i64, ptr %memberidx.i.i128, align 4
  br label %TypeChecker_error.exit136

TypeChecker_error.exit136:                        ; preds = %if.entry33.TypeChecker_error.exit136_crit_edge, %if.entry.i.i133
  %143 = phi ptr [ %.pre161, %if.entry33.TypeChecker_error.exit136_crit_edge ], [ %142, %if.entry.i.i133 ]
  %144 = phi i64 [ %137, %if.entry33.TypeChecker_error.exit136_crit_edge ], [ %.pre, %if.entry.i.i133 ]
  %145 = add i64 %144, 1
  store i64 %145, ptr %memberidx.i.i128, align 4
  %ptridx.i.i135 = getelementptr inbounds ptr, ptr %143, i64 %144
  store ptr %136, ptr %ptridx.i.i135, align 8
  br label %common.ret

ifend35:                                          ; preds = %ifend31
  %146 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %146, align 4
  %memberidx.i.i137 = getelementptr inbounds %Expression, ptr %146, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i137, align 4
  %memberidx1.i.i138 = getelementptr inbounds %Expression, ptr %146, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i138, align 1
  %memberidx.i139 = getelementptr inbounds %MemberExpression, ptr %146, i64 0, i32 4
  store ptr %1, ptr %memberidx.i139, align 8
  %memberidx1.i140 = getelementptr inbounds %MemberExpression, ptr %146, i64 0, i32 5
  store ptr %43, ptr %memberidx1.i140, align 8
  %memberidx2.i141 = getelementptr inbounds %Expression, ptr %146, i64 0, i32 3
  store ptr %common.ret.op.i, ptr %memberidx2.i141, align 8
  %147 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %147, align 8
  %memberidx.i142 = getelementptr inbounds %Array_Expression_, ptr %147, i64 0, i32 2
  store i64 0, ptr %memberidx.i142, align 4
  %memberidx1.i143 = getelementptr inbounds %Array_Expression_, ptr %147, i64 0, i32 3
  store i64 8, ptr %memberidx1.i143, align 4
  %memberidx2.i144 = getelementptr inbounds %Array_Expression_, ptr %147, i64 0, i32 1
  %148 = tail call ptr @malloc(i32 64)
  store ptr %148, ptr %memberidx2.i144, align 8
  store ptr %right.0, ptr %148, align 8
  store i64 1, ptr %memberidx.i142, align 4
  %149 = tail call ptr @malloc(i32 41)
  %memberidx43 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i, i64 0, i32 2
  %150 = load ptr, ptr %memberidx43, align 8
  store i64 8, ptr %149, align 4
  %memberidx.i.i145 = getelementptr inbounds %Expression, ptr %149, i64 0, i32 2
  store i64 14, ptr %memberidx.i.i145, align 4
  %memberidx1.i.i146 = getelementptr inbounds %Expression, ptr %149, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i146, align 1
  %memberidx.i147 = getelementptr inbounds %CallExpression, ptr %149, i64 0, i32 4
  store ptr %146, ptr %memberidx.i147, align 8
  %memberidx1.i148 = getelementptr inbounds %CallExpression, ptr %149, i64 0, i32 5
  store ptr %147, ptr %memberidx1.i148, align 8
  %memberidx2.i149 = getelementptr inbounds %Expression, ptr %149, i64 0, i32 3
  store ptr %150, ptr %memberidx2.i149, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_unary_expr(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %UnaryExpressionNode, ptr %2, i64 0, i32 3
  %4 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %UnaryExpressionNode, ptr %2, i64 0, i32 4
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %1, ptr %5)
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %7 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %7, i64 0, i32 6
  %8 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx2.i, align 4
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %common.ret, label %ifend

common.ret:                                       ; preds = %3, %if.entry31, %TypeChecker_error.exit111, %ifend24, %TypeChecker_error.exit, %if.entry13, %if.entry7
  %common.ret.op = phi ptr [ %16, %if.entry7 ], [ %21, %if.entry13 ], [ null, %TypeChecker_error.exit ], [ %58, %ifend24 ], [ null, %TypeChecker_error.exit111 ], [ %92, %if.entry31 ], [ null, %3 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %3
  %memberidx2 = getelementptr inbounds %Expression, ptr %6, i64 0, i32 3
  %11 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %6, i64 0, i32 1
  %12 = load i1, ptr %memberidx3, align 1
  switch i64 %4, label %ifend12 [
    i64 5, label %if.entry4
    i64 6, label %if.entry10
  ]

if.entry4:                                        ; preds = %ifend
  %13 = load i64, ptr %11, align 4
  %14 = add i64 %13, -1
  %15 = icmp ult i64 %14, 11
  br i1 %15, label %if.entry7, label %ifend18.split

if.entry7:                                        ; preds = %if.entry4
  %16 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %16, align 4
  %memberidx.i.i = getelementptr inbounds %Expression, ptr %16, i64 0, i32 2
  store i64 9, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Expression, ptr %16, i64 0, i32 1
  %memberidx.i63 = getelementptr inbounds %UnaryExpression, ptr %16, i64 0, i32 4
  store i64 5, ptr %memberidx.i63, align 4
  %memberidx1.i64 = getelementptr inbounds %UnaryExpression, ptr %16, i64 0, i32 5
  store ptr %6, ptr %memberidx1.i64, align 8
  %memberidx2.i65 = getelementptr inbounds %Expression, ptr %16, i64 0, i32 3
  store ptr %11, ptr %memberidx2.i65, align 8
  store i1 %12, ptr %memberidx1.i.i, align 1
  br label %common.ret

if.entry10:                                       ; preds = %ifend
  %17 = load i64, ptr %11, align 4
  %18 = icmp ult i64 %17, 12
  br i1 %18, label %if.entry13, label %ifend18.split

ifend12:                                          ; preds = %ifend
  %19 = add i64 %4, -1
  %20 = icmp ult i64 %19, 4
  br i1 %20, label %if.entry16, label %ifend18

if.entry13:                                       ; preds = %if.entry10
  %21 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %21, align 4
  %memberidx.i.i66 = getelementptr inbounds %Expression, ptr %21, i64 0, i32 2
  store i64 9, ptr %memberidx.i.i66, align 4
  %memberidx1.i.i67 = getelementptr inbounds %Expression, ptr %21, i64 0, i32 1
  %memberidx.i68 = getelementptr inbounds %UnaryExpression, ptr %21, i64 0, i32 4
  store i64 6, ptr %memberidx.i68, align 4
  %memberidx1.i69 = getelementptr inbounds %UnaryExpression, ptr %21, i64 0, i32 5
  store ptr %6, ptr %memberidx1.i69, align 8
  %memberidx2.i70 = getelementptr inbounds %Expression, ptr %21, i64 0, i32 3
  store ptr %11, ptr %memberidx2.i70, align 8
  store i1 %12, ptr %memberidx1.i.i67, align 1
  br label %common.ret

if.entry16:                                       ; preds = %ifend12
  %22 = load i64, ptr %11, align 4
  %23 = add i64 %22, -1
  %24 = icmp ult i64 %23, 11
  %25 = icmp eq i64 %22, 15
  %26 = or i1 %25, %24
  br i1 %26, label %if.entry19, label %ifend18.split

ifend18:                                          ; preds = %ifend12
  %27 = icmp eq i64 %4, 7
  br i1 %27, label %if.entry28, label %ifend18.split

ifend18.split:                                    ; preds = %if.entry10, %if.entry4, %if.entry16, %ifend18
  %28 = tail call fastcc ptr @dump_unary_op(i64 %4)
  %.pre = load ptr, ptr %28, align 8
  br label %ifend30

if.entry19:                                       ; preds = %if.entry16
  %memberidx.i72 = getelementptr inbounds %Expression, ptr %6, i64 0, i32 2
  %29 = load i64, ptr %memberidx.i72, align 4
  switch i64 %29, label %if.entry22 [
    i64 7, label %if.entry.i
    i64 12, label %check_is_var.exit
    i64 13, label %ifend24
  ]

if.entry.i:                                       ; preds = %if.entry19
  %memberidx1.i73 = getelementptr inbounds %VarAccessExpression, ptr %6, i64 0, i32 4
  %30 = load ptr, ptr %memberidx1.i73, align 8
  %31 = load i64, ptr %30, align 4
  %32 = icmp eq i64 %31, 1
  br i1 %32, label %ifend24, label %if.entry22

check_is_var.exit:                                ; preds = %if.entry19
  %memberidx7.i = getelementptr inbounds %MemberExpression, ptr %6, i64 0, i32 5
  %33 = load ptr, ptr %memberidx7.i, align 8
  %34 = load i64, ptr %33, align 4
  %35 = icmp eq i64 %34, 1
  br i1 %35, label %ifend24, label %if.entry22

if.entry22:                                       ; preds = %if.entry.i, %if.entry19, %check_is_var.exit
  %36 = tail call fastcc ptr @dump_unary_op(i64 %4)
  %37 = load ptr, ptr %36, align 8
  %memberidx25 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %37, i64 0, i32 5
  %38 = load ptr, ptr %memberidx25, align 8
  %39 = tail call ptr %38(ptr nonnull %36)
  %40 = alloca ptr, align 8
  %41 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %40, ptr nonnull @222, ptr %39)
  %42 = load ptr, ptr %40, align 8
  %43 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %43, align 8
  %memberidx.i74 = getelementptr inbounds %string, ptr %43, i64 0, i32 1
  store ptr %42, ptr %memberidx.i74, align 8
  %memberidx1.i75 = getelementptr inbounds %string, ptr %43, i64 0, i32 2
  store i64 %41, ptr %memberidx1.i75, align 4
  %memberidx2.i76 = getelementptr inbounds %string, ptr %43, i64 0, i32 3
  store i64 %41, ptr %memberidx2.i76, align 4
  tail call void @free(ptr %39)
  %44 = load ptr, ptr %memberidx1, align 8
  %45 = load ptr, ptr %44, align 8
  %46 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i78 = getelementptr inbounds %Compiler, ptr %46, i64 0, i32 6
  %47 = load ptr, ptr %memberidx1.i78, align 8
  %48 = call ptr @malloc(i32 24)
  store i64 4, ptr %48, align 4
  %memberidx1.i.i79 = getelementptr inbounds %FloError, ptr %48, i64 0, i32 2
  store ptr %45, ptr %memberidx1.i.i79, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %48, i64 0, i32 1
  store ptr %43, ptr %memberidx2.i.i, align 8
  %memberidx.i.i80 = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 2
  %49 = load i64, ptr %memberidx.i.i80, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 3
  %50 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %49, %50
  br i1 %.not.i.i, label %if.entry22.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry22.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry22
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 1
  %.pre125 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry22
  %51 = shl i64 %50, 1
  store i64 %51, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 1
  %52 = load ptr, ptr %memberidx2.i.i.i, align 8
  %53 = shl i64 %50, 4
  %54 = call ptr @realloc(ptr %52, i64 %53)
  store ptr %54, ptr %memberidx2.i.i.i, align 8
  %.pre124 = load i64, ptr %memberidx.i.i80, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry22.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %55 = phi ptr [ %.pre125, %if.entry22.TypeChecker_error.exit_crit_edge ], [ %54, %if.entry.i.i ]
  %56 = phi i64 [ %49, %if.entry22.TypeChecker_error.exit_crit_edge ], [ %.pre124, %if.entry.i.i ]
  %57 = add i64 %56, 1
  store i64 %57, ptr %memberidx.i.i80, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %55, i64 %56
  store ptr %48, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend24:                                          ; preds = %if.entry.i, %if.entry19, %check_is_var.exit
  %58 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %58, align 4
  %memberidx.i.i81 = getelementptr inbounds %Expression, ptr %58, i64 0, i32 2
  store i64 9, ptr %memberidx.i.i81, align 4
  %memberidx1.i.i82 = getelementptr inbounds %Expression, ptr %58, i64 0, i32 1
  %memberidx.i83 = getelementptr inbounds %UnaryExpression, ptr %58, i64 0, i32 4
  store i64 %4, ptr %memberidx.i83, align 4
  %memberidx1.i84 = getelementptr inbounds %UnaryExpression, ptr %58, i64 0, i32 5
  store ptr %6, ptr %memberidx1.i84, align 8
  %memberidx2.i85 = getelementptr inbounds %Expression, ptr %58, i64 0, i32 3
  store ptr %11, ptr %memberidx2.i85, align 8
  store i1 false, ptr %memberidx1.i.i82, align 1
  br label %common.ret

if.entry28:                                       ; preds = %ifend18
  %memberidx.i87 = getelementptr inbounds %Expression, ptr %6, i64 0, i32 2
  %59 = load i64, ptr %memberidx.i87, align 4
  switch i64 %59, label %check_is_var.exit95.split [
    i64 7, label %if.entry.i90
    i64 12, label %check_is_var.exit95
    i64 13, label %if.entry31
  ]

if.entry.i90:                                     ; preds = %if.entry28
  %memberidx1.i89 = getelementptr inbounds %VarAccessExpression, ptr %6, i64 0, i32 4
  %60 = load ptr, ptr %memberidx1.i89, align 8
  %61 = load i64, ptr %60, align 4
  %62 = icmp eq i64 %61, 1
  br i1 %62, label %if.entry31, label %check_is_var.exit95.split

check_is_var.exit95:                              ; preds = %if.entry28
  %memberidx7.i92 = getelementptr inbounds %MemberExpression, ptr %6, i64 0, i32 5
  %63 = load ptr, ptr %memberidx7.i92, align 8
  %64 = load i64, ptr %63, align 4
  %65 = icmp eq i64 %64, 1
  br i1 %65, label %if.entry31, label %check_is_var.exit95.split

check_is_var.exit95.split:                        ; preds = %if.entry.i90, %if.entry28, %check_is_var.exit95
  %66 = tail call ptr @malloc(i32 8)
  store i8 38, ptr %66, align 8
  %67 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %67, align 8
  %memberidx.i.i36.i = getelementptr inbounds %string, ptr %67, i64 0, i32 1
  store ptr %66, ptr %memberidx.i.i36.i, align 8
  %memberidx1.i.i37.i = getelementptr inbounds %string, ptr %67, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i37.i, align 4
  %memberidx2.i.i38.i = getelementptr inbounds %string, ptr %67, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i38.i, align 4
  br label %ifend30

ifend30:                                          ; preds = %check_is_var.exit95.split, %ifend18.split
  %68 = phi ptr [ %.pre, %ifend18.split ], [ @VTablestring, %check_is_var.exit95.split ]
  %phi.call = phi ptr [ %28, %ifend18.split ], [ %67, %check_is_var.exit95.split ]
  %memberidx35 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %68, i64 0, i32 5
  %69 = load ptr, ptr %memberidx35, align 8
  %70 = tail call ptr %69(ptr nonnull %phi.call)
  %71 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %11)
  %72 = load ptr, ptr %71, align 8
  %memberidx36 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %72, i64 0, i32 5
  %73 = load ptr, ptr %memberidx36, align 8
  %74 = tail call ptr %73(ptr nonnull %71)
  %75 = alloca ptr, align 8
  %76 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %75, ptr nonnull @223, ptr %70, ptr %74)
  %77 = load ptr, ptr %75, align 8
  %78 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %78, align 8
  %memberidx.i96 = getelementptr inbounds %string, ptr %78, i64 0, i32 1
  store ptr %77, ptr %memberidx.i96, align 8
  %memberidx1.i97 = getelementptr inbounds %string, ptr %78, i64 0, i32 2
  store i64 %76, ptr %memberidx1.i97, align 4
  %memberidx2.i98 = getelementptr inbounds %string, ptr %78, i64 0, i32 3
  store i64 %76, ptr %memberidx2.i98, align 4
  tail call void @free(ptr %70)
  tail call void @free(ptr %74)
  %79 = load ptr, ptr %2, align 8
  %80 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i100 = getelementptr inbounds %Compiler, ptr %80, i64 0, i32 6
  %81 = load ptr, ptr %memberidx1.i100, align 8
  %82 = call ptr @malloc(i32 24)
  store i64 5, ptr %82, align 4
  %memberidx1.i.i101 = getelementptr inbounds %FloError, ptr %82, i64 0, i32 2
  store ptr %79, ptr %memberidx1.i.i101, align 8
  %memberidx2.i.i102 = getelementptr inbounds %FloError, ptr %82, i64 0, i32 1
  store ptr %78, ptr %memberidx2.i.i102, align 8
  %memberidx.i.i103 = getelementptr inbounds %Array_FloError_, ptr %81, i64 0, i32 2
  %83 = load i64, ptr %memberidx.i.i103, align 4
  %memberidx1.i2.i104 = getelementptr inbounds %Array_FloError_, ptr %81, i64 0, i32 3
  %84 = load i64, ptr %memberidx1.i2.i104, align 4
  %.not.i.i105 = icmp slt i64 %83, %84
  br i1 %.not.i.i105, label %ifend30.TypeChecker_error.exit111_crit_edge, label %if.entry.i.i108

ifend30.TypeChecker_error.exit111_crit_edge:      ; preds = %ifend30
  %memberidx4.i.i109.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %81, i64 0, i32 1
  %.pre123 = load ptr, ptr %memberidx4.i.i109.phi.trans.insert, align 8
  br label %TypeChecker_error.exit111

if.entry.i.i108:                                  ; preds = %ifend30
  %85 = shl i64 %84, 1
  store i64 %85, ptr %memberidx1.i2.i104, align 4
  %memberidx2.i.i.i107 = getelementptr inbounds %Array_FloError_, ptr %81, i64 0, i32 1
  %86 = load ptr, ptr %memberidx2.i.i.i107, align 8
  %87 = shl i64 %84, 4
  %88 = call ptr @realloc(ptr %86, i64 %87)
  store ptr %88, ptr %memberidx2.i.i.i107, align 8
  %.pre122 = load i64, ptr %memberidx.i.i103, align 4
  br label %TypeChecker_error.exit111

TypeChecker_error.exit111:                        ; preds = %ifend30.TypeChecker_error.exit111_crit_edge, %if.entry.i.i108
  %89 = phi ptr [ %.pre123, %ifend30.TypeChecker_error.exit111_crit_edge ], [ %88, %if.entry.i.i108 ]
  %90 = phi i64 [ %83, %ifend30.TypeChecker_error.exit111_crit_edge ], [ %.pre122, %if.entry.i.i108 ]
  %91 = add i64 %90, 1
  store i64 %91, ptr %memberidx.i.i103, align 4
  %ptridx.i.i110 = getelementptr inbounds ptr, ptr %89, i64 %90
  store ptr %82, ptr %ptridx.i.i110, align 8
  br label %common.ret

if.entry31:                                       ; preds = %if.entry.i90, %if.entry28, %check_is_var.exit95
  %92 = tail call ptr @malloc(i32 41)
  %93 = tail call ptr @malloc(i32 16)
  %94 = load ptr, ptr %memberidx2, align 8
  store i64 15, ptr %93, align 4
  %memberidx.i112 = getelementptr inbounds %PointerType, ptr %93, i64 0, i32 1
  store ptr %94, ptr %memberidx.i112, align 8
  store i64 8, ptr %92, align 4
  %memberidx.i.i113 = getelementptr inbounds %Expression, ptr %92, i64 0, i32 2
  store i64 9, ptr %memberidx.i.i113, align 4
  %memberidx1.i.i114 = getelementptr inbounds %Expression, ptr %92, i64 0, i32 1
  %memberidx.i115 = getelementptr inbounds %UnaryExpression, ptr %92, i64 0, i32 4
  store i64 7, ptr %memberidx.i115, align 4
  %memberidx1.i116 = getelementptr inbounds %UnaryExpression, ptr %92, i64 0, i32 5
  store ptr %6, ptr %memberidx1.i116, align 8
  %memberidx2.i117 = getelementptr inbounds %Expression, ptr %92, i64 0, i32 3
  store ptr %93, ptr %memberidx2.i117, align 8
  store i1 false, ptr %memberidx1.i.i114, align 1
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_new_expr(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %memberidx = getelementptr inbounds %NewExpressionNode, ptr %1, i64 0, i32 3
  %3 = load ptr, ptr %memberidx, align 8
  %4 = tail call fastcc ptr @TypeChecker_check_type(ptr %0, ptr %3)
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %5 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %5, i64 0, i32 6
  %6 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %6, i64 0, i32 2
  %7 = load i64, ptr %memberidx2.i, align 4
  %8 = icmp sgt i64 %7, 0
  br i1 %8, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend4, %2, %TypeChecker_error.exit132, %TypeChecker_error.exit114, %TypeChecker_error.exit98, %TypeChecker_error.exit, %ifend13
  %common.ret.op = phi ptr [ %42, %ifend13 ], [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit98 ], [ null, %TypeChecker_error.exit114 ], [ null, %TypeChecker_error.exit132 ], [ null, %2 ], [ null, %ifend4 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %2
  %9 = load i64, ptr %4, align 4
  %10 = icmp eq i64 %9, 20
  br i1 %10, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend
  %memberidx5 = getelementptr inbounds %GenericType, ptr %4, i64 0, i32 3
  %11 = load ptr, ptr %memberidx5, align 8
  br label %ifend4

ifend4:                                           ; preds = %ifend, %if.entry2
  %12 = phi ptr [ %4, %ifend ], [ %11, %if.entry2 ]
  %args = alloca ptr, align 8
  %13 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %13, align 8
  %memberidx.i70 = getelementptr inbounds %Array_Expression_, ptr %13, i64 0, i32 2
  store i64 0, ptr %memberidx.i70, align 4
  %memberidx1.i71 = getelementptr inbounds %Array_Expression_, ptr %13, i64 0, i32 3
  store i64 8, ptr %memberidx1.i71, align 4
  %memberidx2.i72 = getelementptr inbounds %Array_Expression_, ptr %13, i64 0, i32 1
  %14 = tail call ptr @malloc(i32 64)
  store ptr %14, ptr %memberidx2.i72, align 8
  store i64 0, ptr %memberidx.i70, align 4
  store ptr %13, ptr %args, align 8
  %15 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i74 = getelementptr inbounds %Compiler, ptr %15, i64 0, i32 6
  %16 = load ptr, ptr %memberidx1.i74, align 8
  %memberidx2.i75 = getelementptr inbounds %Array_FloError_, ptr %16, i64 0, i32 2
  %17 = load i64, ptr %memberidx2.i75, align 4
  %18 = icmp sgt i64 %17, 0
  br i1 %18, label %common.ret, label %ifend10

ifend10:                                          ; preds = %ifend4
  %19 = load i64, ptr %4, align 4
  %20 = icmp eq i64 %19, 20
  br i1 %20, label %if.entry.i139, label %is_object.exit.thread

if.entry.i139:                                    ; preds = %ifend10, %if.entry.i139
  %.tr5.i = phi ptr [ %21, %if.entry.i139 ], [ %4, %ifend10 ]
  %memberidx1.i138 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %21 = load ptr, ptr %memberidx1.i138, align 8
  %22 = load i64, ptr %21, align 4
  switch i64 %22, label %else12 [
    i64 20, label %if.entry.i139
    i64 13, label %if.entry11
  ]

is_object.exit.thread:                            ; preds = %ifend10
  switch i64 %19, label %else23 [
    i64 13, label %if.entry11.thread
    i64 15, label %if.entry22
  ]

if.entry11.thread:                                ; preds = %is_object.exit.thread
  %23 = load ptr, ptr %0, align 8
  br label %if.entry3.i

if.entry11:                                       ; preds = %if.entry.i139
  %24 = load ptr, ptr %0, align 8
  br i1 %20, label %if.entry.i141, label %if.entry3.i

if.entry.i141:                                    ; preds = %if.entry11, %if.entry.i141
  %.tr11.i146 = phi ptr [ %25, %if.entry.i141 ], [ %4, %if.entry11 ]
  %memberidx1.i140 = getelementptr inbounds %GenericType, ptr %.tr11.i146, i64 0, i32 3
  %25 = load ptr, ptr %memberidx1.i140, align 8
  %26 = load i64, ptr %25, align 4
  %switch = icmp eq i64 %26, 20
  br i1 %switch, label %if.entry.i141, label %if.entry3.i

if.entry3.i:                                      ; preds = %if.entry.i141, %if.entry11.thread, %if.entry11
  %27 = phi ptr [ %24, %if.entry11 ], [ %23, %if.entry11.thread ], [ %24, %if.entry.i141 ]
  %.tr11.i.lcssa = phi ptr [ %4, %if.entry11 ], [ %4, %if.entry11.thread ], [ %25, %if.entry.i141 ]
  %memberidx6.i = getelementptr inbounds %ObjectType, ptr %.tr11.i.lcssa, i64 0, i32 1
  %28 = load ptr, ptr %memberidx6.i, align 8
  %memberidx.i.i142 = getelementptr inbounds %Program, ptr %27, i64 0, i32 1
  %29 = load ptr, ptr %memberidx.i.i142, align 8
  %30 = load i64, ptr %28, align 4
  %memberidx.i.i.i143 = getelementptr inbounds %Array_Module_, ptr %29, i64 0, i32 1
  %31 = load ptr, ptr %memberidx.i.i.i143, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %31, i64 %30
  %32 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i144 = getelementptr inbounds %Module, ptr %32, i64 0, i32 4
  %33 = load ptr, ptr %memberidx2.i.i144, align 8
  %memberidx3.i.i = getelementptr inbounds %TypeId, ptr %28, i64 0, i32 2
  %34 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %33, i64 0, i32 1
  %35 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %35, i64 %34
  %36 = load ptr, ptr %ptridx.i6.i.i, align 8
  %37 = load ptr, ptr %36, align 8
  %memberidx16 = getelementptr inbounds %NewExpressionNode, ptr %1, i64 0, i32 5
  %38 = load ptr, ptr %memberidx16, align 8
  %39 = call fastcc ptr @TypeChecker_check_constructor_call(ptr nonnull %0, ptr %37, ptr %38, ptr nonnull %args)
  %.not69 = icmp eq ptr %39, null
  br i1 %.not69, label %if.entry3.i.ifend13_crit_edge, label %if.entry17

if.entry3.i.ifend13_crit_edge:                    ; preds = %if.entry3.i
  %.pre157 = load ptr, ptr %args, align 8
  br label %ifend13

else12:                                           ; preds = %if.entry.i139
  %40 = icmp eq i64 %19, 15
  br i1 %40, label %if.entry22, label %else23

ifend13:                                          ; preds = %if.entry3.i.ifend13_crit_edge, %Array_Expression____sl__.exit
  %41 = phi ptr [ %.pre157, %if.entry3.i.ifend13_crit_edge ], [ %13, %Array_Expression____sl__.exit ]
  %42 = tail call ptr @malloc(i32 42)
  %memberidx43 = getelementptr inbounds %NewExpressionNode, ptr %1, i64 0, i32 4
  %43 = load i1, ptr %memberidx43, align 1
  store i64 8, ptr %42, align 4
  %memberidx.i.i = getelementptr inbounds %Expression, ptr %42, i64 0, i32 2
  store i64 11, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Expression, ptr %42, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i, align 1
  %memberidx.i76 = getelementptr inbounds %NewExpression, ptr %42, i64 0, i32 6
  store ptr %12, ptr %memberidx.i76, align 8
  %memberidx1.i77 = getelementptr inbounds %NewExpression, ptr %42, i64 0, i32 5
  store i1 %43, ptr %memberidx1.i77, align 1
  %memberidx2.i78 = getelementptr inbounds %NewExpression, ptr %42, i64 0, i32 4
  store ptr %41, ptr %memberidx2.i78, align 8
  %memberidx3.i = getelementptr inbounds %Expression, ptr %42, i64 0, i32 3
  store ptr %4, ptr %memberidx3.i, align 8
  br label %common.ret

if.entry17:                                       ; preds = %if.entry3.i
  %44 = load ptr, ptr %1, align 8
  %45 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i80 = getelementptr inbounds %Compiler, ptr %45, i64 0, i32 6
  %46 = load ptr, ptr %memberidx1.i80, align 8
  %47 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %47, align 4
  %memberidx1.i.i81 = getelementptr inbounds %FloError, ptr %47, i64 0, i32 2
  store ptr %44, ptr %memberidx1.i.i81, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %47, i64 0, i32 1
  store ptr %39, ptr %memberidx2.i.i, align 8
  %memberidx.i.i82 = getelementptr inbounds %Array_FloError_, ptr %46, i64 0, i32 2
  %48 = load i64, ptr %memberidx.i.i82, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %46, i64 0, i32 3
  %49 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %48, %49
  br i1 %.not.i.i, label %if.entry17.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry17.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry17
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %46, i64 0, i32 1
  %.pre156 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry17
  %50 = shl i64 %49, 1
  store i64 %50, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %46, i64 0, i32 1
  %51 = load ptr, ptr %memberidx2.i.i.i, align 8
  %52 = shl i64 %49, 4
  %53 = tail call ptr @realloc(ptr %51, i64 %52)
  store ptr %53, ptr %memberidx2.i.i.i, align 8
  %.pre155 = load i64, ptr %memberidx.i.i82, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry17.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %54 = phi ptr [ %.pre156, %if.entry17.TypeChecker_error.exit_crit_edge ], [ %53, %if.entry.i.i ]
  %55 = phi i64 [ %48, %if.entry17.TypeChecker_error.exit_crit_edge ], [ %.pre155, %if.entry.i.i ]
  %56 = add i64 %55, 1
  store i64 %56, ptr %memberidx.i.i82, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %54, i64 %55
  store ptr %47, ptr %ptridx.i.i, align 8
  br label %common.ret

if.entry22:                                       ; preds = %is_object.exit.thread, %else12
  %memberidx25 = getelementptr inbounds %NewExpressionNode, ptr %1, i64 0, i32 5
  %57 = load ptr, ptr %memberidx25, align 8
  %memberidx26 = getelementptr inbounds %Array_ExpressionNode_, ptr %57, i64 0, i32 2
  %58 = load i64, ptr %memberidx26, align 4
  %.not = icmp eq i64 %58, 1
  br i1 %.not, label %ifend29, label %if.entry27

else23:                                           ; preds = %is_object.exit.thread, %else12
  %59 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %4)
  %60 = load ptr, ptr %59, align 8
  %memberidx41 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %60, i64 0, i32 5
  %61 = load ptr, ptr %memberidx41, align 8
  %62 = tail call ptr %61(ptr nonnull %59)
  %63 = alloca ptr, align 8
  %64 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %63, ptr nonnull @232, ptr %62)
  %65 = load ptr, ptr %63, align 8
  %66 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %66, align 8
  %memberidx.i83 = getelementptr inbounds %string, ptr %66, i64 0, i32 1
  store ptr %65, ptr %memberidx.i83, align 8
  %memberidx1.i84 = getelementptr inbounds %string, ptr %66, i64 0, i32 2
  store i64 %64, ptr %memberidx1.i84, align 4
  %memberidx2.i85 = getelementptr inbounds %string, ptr %66, i64 0, i32 3
  store i64 %64, ptr %memberidx2.i85, align 4
  tail call void @free(ptr %62)
  %67 = load ptr, ptr %1, align 8
  %68 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i87 = getelementptr inbounds %Compiler, ptr %68, i64 0, i32 6
  %69 = load ptr, ptr %memberidx1.i87, align 8
  %70 = call ptr @malloc(i32 24)
  store i64 5, ptr %70, align 4
  %memberidx1.i.i88 = getelementptr inbounds %FloError, ptr %70, i64 0, i32 2
  store ptr %67, ptr %memberidx1.i.i88, align 8
  %memberidx2.i.i89 = getelementptr inbounds %FloError, ptr %70, i64 0, i32 1
  store ptr %66, ptr %memberidx2.i.i89, align 8
  %memberidx.i.i90 = getelementptr inbounds %Array_FloError_, ptr %69, i64 0, i32 2
  %71 = load i64, ptr %memberidx.i.i90, align 4
  %memberidx1.i2.i91 = getelementptr inbounds %Array_FloError_, ptr %69, i64 0, i32 3
  %72 = load i64, ptr %memberidx1.i2.i91, align 4
  %.not.i.i92 = icmp slt i64 %71, %72
  br i1 %.not.i.i92, label %else23.TypeChecker_error.exit98_crit_edge, label %if.entry.i.i95

else23.TypeChecker_error.exit98_crit_edge:        ; preds = %else23
  %memberidx4.i.i96.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %69, i64 0, i32 1
  %.pre148 = load ptr, ptr %memberidx4.i.i96.phi.trans.insert, align 8
  br label %TypeChecker_error.exit98

if.entry.i.i95:                                   ; preds = %else23
  %73 = shl i64 %72, 1
  store i64 %73, ptr %memberidx1.i2.i91, align 4
  %memberidx2.i.i.i94 = getelementptr inbounds %Array_FloError_, ptr %69, i64 0, i32 1
  %74 = load ptr, ptr %memberidx2.i.i.i94, align 8
  %75 = shl i64 %72, 4
  %76 = call ptr @realloc(ptr %74, i64 %75)
  store ptr %76, ptr %memberidx2.i.i.i94, align 8
  %.pre = load i64, ptr %memberidx.i.i90, align 4
  br label %TypeChecker_error.exit98

TypeChecker_error.exit98:                         ; preds = %else23.TypeChecker_error.exit98_crit_edge, %if.entry.i.i95
  %77 = phi ptr [ %.pre148, %else23.TypeChecker_error.exit98_crit_edge ], [ %76, %if.entry.i.i95 ]
  %78 = phi i64 [ %71, %else23.TypeChecker_error.exit98_crit_edge ], [ %.pre, %if.entry.i.i95 ]
  %79 = add i64 %78, 1
  store i64 %79, ptr %memberidx.i.i90, align 4
  %ptridx.i.i97 = getelementptr inbounds ptr, ptr %77, i64 %78
  store ptr %70, ptr %ptridx.i.i97, align 8
  br label %common.ret

if.entry27:                                       ; preds = %if.entry22
  %80 = alloca ptr, align 8
  %81 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %80, ptr nonnull @229, i64 %58)
  %82 = load ptr, ptr %80, align 8
  %83 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %83, align 8
  %memberidx.i99 = getelementptr inbounds %string, ptr %83, i64 0, i32 1
  store ptr %82, ptr %memberidx.i99, align 8
  %memberidx1.i100 = getelementptr inbounds %string, ptr %83, i64 0, i32 2
  store i64 %81, ptr %memberidx1.i100, align 4
  %memberidx2.i101 = getelementptr inbounds %string, ptr %83, i64 0, i32 3
  store i64 %81, ptr %memberidx2.i101, align 4
  %84 = load ptr, ptr %1, align 8
  %85 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i103 = getelementptr inbounds %Compiler, ptr %85, i64 0, i32 6
  %86 = load ptr, ptr %memberidx1.i103, align 8
  %87 = call ptr @malloc(i32 24)
  store i64 4, ptr %87, align 4
  %memberidx1.i.i104 = getelementptr inbounds %FloError, ptr %87, i64 0, i32 2
  store ptr %84, ptr %memberidx1.i.i104, align 8
  %memberidx2.i.i105 = getelementptr inbounds %FloError, ptr %87, i64 0, i32 1
  store ptr %83, ptr %memberidx2.i.i105, align 8
  %memberidx.i.i106 = getelementptr inbounds %Array_FloError_, ptr %86, i64 0, i32 2
  %88 = load i64, ptr %memberidx.i.i106, align 4
  %memberidx1.i2.i107 = getelementptr inbounds %Array_FloError_, ptr %86, i64 0, i32 3
  %89 = load i64, ptr %memberidx1.i2.i107, align 4
  %.not.i.i108 = icmp slt i64 %88, %89
  br i1 %.not.i.i108, label %if.entry27.TypeChecker_error.exit114_crit_edge, label %if.entry.i.i111

if.entry27.TypeChecker_error.exit114_crit_edge:   ; preds = %if.entry27
  %memberidx4.i.i112.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %86, i64 0, i32 1
  %.pre150 = load ptr, ptr %memberidx4.i.i112.phi.trans.insert, align 8
  br label %TypeChecker_error.exit114

if.entry.i.i111:                                  ; preds = %if.entry27
  %90 = shl i64 %89, 1
  store i64 %90, ptr %memberidx1.i2.i107, align 4
  %memberidx2.i.i.i110 = getelementptr inbounds %Array_FloError_, ptr %86, i64 0, i32 1
  %91 = load ptr, ptr %memberidx2.i.i.i110, align 8
  %92 = shl i64 %89, 4
  %93 = call ptr @realloc(ptr %91, i64 %92)
  store ptr %93, ptr %memberidx2.i.i.i110, align 8
  %.pre149 = load i64, ptr %memberidx.i.i106, align 4
  br label %TypeChecker_error.exit114

TypeChecker_error.exit114:                        ; preds = %if.entry27.TypeChecker_error.exit114_crit_edge, %if.entry.i.i111
  %94 = phi ptr [ %.pre150, %if.entry27.TypeChecker_error.exit114_crit_edge ], [ %93, %if.entry.i.i111 ]
  %95 = phi i64 [ %88, %if.entry27.TypeChecker_error.exit114_crit_edge ], [ %.pre149, %if.entry.i.i111 ]
  %96 = add i64 %95, 1
  store i64 %96, ptr %memberidx.i.i106, align 4
  %ptridx.i.i113 = getelementptr inbounds ptr, ptr %94, i64 %95
  store ptr %87, ptr %ptridx.i.i113, align 8
  br label %common.ret

ifend29:                                          ; preds = %if.entry22
  %97 = tail call ptr @malloc(i32 8)
  store i64 7, ptr %97, align 4
  %98 = load ptr, ptr %memberidx25, align 8
  %memberidx.i115 = getelementptr inbounds %Array_ExpressionNode_, ptr %98, i64 0, i32 1
  %99 = load ptr, ptr %memberidx.i115, align 8
  %100 = load ptr, ptr %99, align 8
  %101 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %97, ptr %100)
  %memberidx32 = getelementptr inbounds %Expression, ptr %101, i64 0, i32 3
  %102 = load ptr, ptr %memberidx32, align 8
  %103 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr nonnull %97, ptr %102)
  br i1 %103, label %ifend35, label %if.entry33

if.entry33:                                       ; preds = %ifend29
  %104 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %97)
  %105 = load ptr, ptr %104, align 8
  %memberidx36 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %105, i64 0, i32 5
  %106 = load ptr, ptr %memberidx36, align 8
  %107 = tail call ptr %106(ptr nonnull %104)
  %108 = load ptr, ptr %memberidx32, align 8
  %109 = load i64, ptr %108, align 4
  %110 = alloca ptr, align 8
  %111 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %110, ptr nonnull @230, i64 %109)
  %112 = load ptr, ptr %110, align 8
  %113 = alloca ptr, align 8
  %114 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %113, ptr nonnull @231, ptr %107, ptr %112)
  %115 = load ptr, ptr %113, align 8
  %116 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %116, align 8
  %memberidx.i116 = getelementptr inbounds %string, ptr %116, i64 0, i32 1
  store ptr %115, ptr %memberidx.i116, align 8
  %memberidx1.i117 = getelementptr inbounds %string, ptr %116, i64 0, i32 2
  store i64 %114, ptr %memberidx1.i117, align 4
  %memberidx2.i118 = getelementptr inbounds %string, ptr %116, i64 0, i32 3
  store i64 %114, ptr %memberidx2.i118, align 4
  tail call void @free(ptr %107)
  tail call void @free(ptr %112)
  %117 = load ptr, ptr %memberidx25, align 8
  %memberidx.i119 = getelementptr inbounds %Array_ExpressionNode_, ptr %117, i64 0, i32 1
  %118 = load ptr, ptr %memberidx.i119, align 8
  %119 = load ptr, ptr %118, align 8
  %120 = load ptr, ptr %119, align 8
  %121 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i121 = getelementptr inbounds %Compiler, ptr %121, i64 0, i32 6
  %122 = load ptr, ptr %memberidx1.i121, align 8
  %123 = call ptr @malloc(i32 24)
  store i64 4, ptr %123, align 4
  %memberidx1.i.i122 = getelementptr inbounds %FloError, ptr %123, i64 0, i32 2
  store ptr %120, ptr %memberidx1.i.i122, align 8
  %memberidx2.i.i123 = getelementptr inbounds %FloError, ptr %123, i64 0, i32 1
  store ptr %116, ptr %memberidx2.i.i123, align 8
  %memberidx.i.i124 = getelementptr inbounds %Array_FloError_, ptr %122, i64 0, i32 2
  %124 = load i64, ptr %memberidx.i.i124, align 4
  %memberidx1.i2.i125 = getelementptr inbounds %Array_FloError_, ptr %122, i64 0, i32 3
  %125 = load i64, ptr %memberidx1.i2.i125, align 4
  %.not.i.i126 = icmp slt i64 %124, %125
  br i1 %.not.i.i126, label %if.entry33.TypeChecker_error.exit132_crit_edge, label %if.entry.i.i129

if.entry33.TypeChecker_error.exit132_crit_edge:   ; preds = %if.entry33
  %memberidx4.i.i130.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %122, i64 0, i32 1
  %.pre152 = load ptr, ptr %memberidx4.i.i130.phi.trans.insert, align 8
  br label %TypeChecker_error.exit132

if.entry.i.i129:                                  ; preds = %if.entry33
  %126 = shl i64 %125, 1
  store i64 %126, ptr %memberidx1.i2.i125, align 4
  %memberidx2.i.i.i128 = getelementptr inbounds %Array_FloError_, ptr %122, i64 0, i32 1
  %127 = load ptr, ptr %memberidx2.i.i.i128, align 8
  %128 = shl i64 %125, 4
  %129 = call ptr @realloc(ptr %127, i64 %128)
  store ptr %129, ptr %memberidx2.i.i.i128, align 8
  %.pre151 = load i64, ptr %memberidx.i.i124, align 4
  br label %TypeChecker_error.exit132

TypeChecker_error.exit132:                        ; preds = %if.entry33.TypeChecker_error.exit132_crit_edge, %if.entry.i.i129
  %130 = phi ptr [ %.pre152, %if.entry33.TypeChecker_error.exit132_crit_edge ], [ %129, %if.entry.i.i129 ]
  %131 = phi i64 [ %124, %if.entry33.TypeChecker_error.exit132_crit_edge ], [ %.pre151, %if.entry.i.i129 ]
  %132 = add i64 %131, 1
  store i64 %132, ptr %memberidx.i.i124, align 4
  %ptridx.i.i131 = getelementptr inbounds ptr, ptr %130, i64 %131
  store ptr %123, ptr %ptridx.i.i131, align 8
  br label %common.ret

ifend35:                                          ; preds = %ifend29
  %133 = load i64, ptr %memberidx.i70, align 4
  %134 = load i64, ptr %memberidx1.i71, align 4
  %.not.i = icmp slt i64 %133, %134
  br i1 %.not.i, label %ifend35.Array_Expression____sl__.exit_crit_edge, label %if.entry.i

ifend35.Array_Expression____sl__.exit_crit_edge:  ; preds = %ifend35
  %.pre154 = load ptr, ptr %memberidx2.i72, align 8
  br label %Array_Expression____sl__.exit

if.entry.i:                                       ; preds = %ifend35
  %135 = shl i64 %134, 1
  store i64 %135, ptr %memberidx1.i71, align 4
  %136 = load ptr, ptr %memberidx2.i72, align 8
  %137 = shl i64 %134, 4
  %138 = tail call ptr @realloc(ptr %136, i64 %137)
  store ptr %138, ptr %memberidx2.i72, align 8
  %.pre153 = load i64, ptr %memberidx.i70, align 4
  br label %Array_Expression____sl__.exit

Array_Expression____sl__.exit:                    ; preds = %ifend35.Array_Expression____sl__.exit_crit_edge, %if.entry.i
  %139 = phi ptr [ %.pre154, %ifend35.Array_Expression____sl__.exit_crit_edge ], [ %138, %if.entry.i ]
  %140 = phi i64 [ %133, %ifend35.Array_Expression____sl__.exit_crit_edge ], [ %.pre153, %if.entry.i ]
  %141 = add i64 %140, 1
  store i64 %141, ptr %memberidx.i70, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %139, i64 %140
  store ptr %101, ptr %ptridx.i, align 8
  br label %ifend13
}

define internal fastcc ptr @TypeChecker_check_ternary_expr(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %TernaryExpressionNode, ptr %2, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %5, align 4
  %6 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %5, ptr %4)
  %memberidx.i.i45 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %7 = load ptr, ptr %memberidx.i.i45, align 8
  %memberidx1.i.i46 = getelementptr inbounds %Compiler, ptr %7, i64 0, i32 6
  %8 = load ptr, ptr %memberidx1.i.i46, align 8
  %memberidx2.i.i47 = getelementptr inbounds %Array_FloError_, ptr %8, i64 0, i32 2
  %9 = load i64, ptr %memberidx2.i.i47, align 4
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %common.ret, label %ifend.i

ifend.i:                                          ; preds = %3
  %memberidx.i48 = getelementptr inbounds %Expression, ptr %6, i64 0, i32 3
  %11 = load ptr, ptr %memberidx.i48, align 8
  %12 = load i64, ptr %11, align 4
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %ifend, label %TypeChecker_check_condition.exit

TypeChecker_check_condition.exit:                 ; preds = %ifend.i
  %14 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %14, align 4
  %15 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %15, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Expression, ptr %15, i64 0, i32 2
  store i64 10, ptr %memberidx.i.i.i.i, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %Expression, ptr %15, i64 0, i32 1
  %memberidx.i.i.i49 = getelementptr inbounds %TypeCastExpression, ptr %15, i64 0, i32 4
  store ptr %6, ptr %memberidx.i.i.i49, align 8
  %memberidx1.i.i.i = getelementptr inbounds %Expression, ptr %15, i64 0, i32 3
  store ptr %14, ptr %memberidx1.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %Expression, ptr %6, i64 0, i32 1
  %16 = load i1, ptr %memberidx3.i.i.i, align 1
  store i1 %16, ptr %memberidx1.i.i.i.i, align 1
  %.pre = load ptr, ptr %memberidx.i.i45, align 8
  %memberidx1.i.phi.trans.insert = getelementptr inbounds %Compiler, ptr %.pre, i64 0, i32 6
  %.pre51 = load ptr, ptr %memberidx1.i.phi.trans.insert, align 8
  %memberidx2.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %.pre51, i64 0, i32 2
  %.pre52 = load i64, ptr %memberidx2.i.phi.trans.insert, align 4
  %17 = icmp sgt i64 %.pre52, 0
  br i1 %17, label %common.ret, label %ifend

common.ret:                                       ; preds = %3, %ifend4, %ifend, %TypeChecker_check_condition.exit, %ifend13, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ %58, %ifend13 ], [ null, %TypeChecker_check_condition.exit ], [ null, %ifend ], [ null, %ifend4 ], [ null, %3 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %ifend.i, %TypeChecker_check_condition.exit
  %common.ret.op.i58 = phi ptr [ %15, %TypeChecker_check_condition.exit ], [ %6, %ifend.i ]
  %memberidx1 = getelementptr inbounds %TernaryExpressionNode, ptr %2, i64 0, i32 4
  %18 = load ptr, ptr %memberidx1, align 8
  %19 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %1, ptr %18)
  %20 = load ptr, ptr %memberidx.i.i45, align 8
  %memberidx1.i30 = getelementptr inbounds %Compiler, ptr %20, i64 0, i32 6
  %21 = load ptr, ptr %memberidx1.i30, align 8
  %memberidx2.i31 = getelementptr inbounds %Array_FloError_, ptr %21, i64 0, i32 2
  %22 = load i64, ptr %memberidx2.i31, align 4
  %23 = icmp sgt i64 %22, 0
  br i1 %23, label %common.ret, label %ifend4

ifend4:                                           ; preds = %ifend
  %memberidx5 = getelementptr inbounds %Expression, ptr %19, i64 0, i32 3
  %24 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %TernaryExpressionNode, ptr %2, i64 0, i32 5
  %25 = load ptr, ptr %memberidx6, align 8
  %26 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %24, ptr %25)
  %27 = load ptr, ptr %memberidx.i.i45, align 8
  %memberidx1.i33 = getelementptr inbounds %Compiler, ptr %27, i64 0, i32 6
  %28 = load ptr, ptr %memberidx1.i33, align 8
  %memberidx2.i34 = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 2
  %29 = load i64, ptr %memberidx2.i34, align 4
  %30 = icmp sgt i64 %29, 0
  br i1 %30, label %common.ret, label %ifend9

ifend9:                                           ; preds = %ifend4
  %memberidx10 = getelementptr inbounds %Expression, ptr %26, i64 0, i32 3
  %31 = load ptr, ptr %memberidx10, align 8
  %32 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %24, ptr %31)
  br i1 %32, label %ifend13, label %if.entry11

if.entry11:                                       ; preds = %ifend9
  %33 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %24)
  %34 = load ptr, ptr %33, align 8
  %memberidx14 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %34, i64 0, i32 5
  %35 = load ptr, ptr %memberidx14, align 8
  %36 = tail call ptr %35(ptr nonnull %33)
  %37 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %31)
  %38 = load ptr, ptr %37, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %38, i64 0, i32 5
  %39 = load ptr, ptr %memberidx15, align 8
  %40 = tail call ptr %39(ptr nonnull %37)
  %41 = alloca ptr, align 8
  %42 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %41, ptr nonnull @245, ptr %36, ptr %40)
  %43 = load ptr, ptr %41, align 8
  %44 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %44, align 8
  %memberidx.i35 = getelementptr inbounds %string, ptr %44, i64 0, i32 1
  store ptr %43, ptr %memberidx.i35, align 8
  %memberidx1.i36 = getelementptr inbounds %string, ptr %44, i64 0, i32 2
  store i64 %42, ptr %memberidx1.i36, align 4
  %memberidx2.i37 = getelementptr inbounds %string, ptr %44, i64 0, i32 3
  store i64 %42, ptr %memberidx2.i37, align 4
  tail call void @free(ptr %36)
  tail call void @free(ptr %40)
  %45 = load ptr, ptr %2, align 8
  %46 = load ptr, ptr %memberidx.i.i45, align 8
  %memberidx1.i39 = getelementptr inbounds %Compiler, ptr %46, i64 0, i32 6
  %47 = load ptr, ptr %memberidx1.i39, align 8
  %48 = call ptr @malloc(i32 24)
  store i64 5, ptr %48, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %48, i64 0, i32 2
  store ptr %45, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %48, i64 0, i32 1
  store ptr %44, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 2
  %49 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 3
  %50 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %49, %50
  br i1 %.not.i.i, label %if.entry11.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry11.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry11
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 1
  %.pre54 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry11
  %51 = shl i64 %50, 1
  store i64 %51, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %47, i64 0, i32 1
  %52 = load ptr, ptr %memberidx2.i.i.i, align 8
  %53 = shl i64 %50, 4
  %54 = call ptr @realloc(ptr %52, i64 %53)
  store ptr %54, ptr %memberidx2.i.i.i, align 8
  %.pre53 = load i64, ptr %memberidx.i.i, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry11.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %55 = phi ptr [ %.pre54, %if.entry11.TypeChecker_error.exit_crit_edge ], [ %54, %if.entry.i.i ]
  %56 = phi i64 [ %49, %if.entry11.TypeChecker_error.exit_crit_edge ], [ %.pre53, %if.entry.i.i ]
  %57 = add i64 %56, 1
  store i64 %57, ptr %memberidx.i.i, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %55, i64 %56
  store ptr %48, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend13:                                          ; preds = %ifend9
  %58 = tail call ptr @malloc(i32 49)
  store i64 8, ptr %58, align 4
  %memberidx.i.i40 = getelementptr inbounds %Expression, ptr %58, i64 0, i32 2
  store i64 15, ptr %memberidx.i.i40, align 4
  %memberidx1.i.i41 = getelementptr inbounds %Expression, ptr %58, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i41, align 1
  %memberidx.i42 = getelementptr inbounds %TernaryExpression, ptr %58, i64 0, i32 4
  store ptr %common.ret.op.i58, ptr %memberidx.i42, align 8
  %memberidx1.i43 = getelementptr inbounds %TernaryExpression, ptr %58, i64 0, i32 5
  store ptr %19, ptr %memberidx1.i43, align 8
  %memberidx2.i44 = getelementptr inbounds %TernaryExpression, ptr %58, i64 0, i32 6
  store ptr %26, ptr %memberidx2.i44, align 8
  %memberidx3.i = getelementptr inbounds %Expression, ptr %58, i64 0, i32 3
  %59 = load ptr, ptr %memberidx5, align 8
  store ptr %59, ptr %memberidx3.i, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %1) unnamed_addr {
  %3 = load i64, ptr %1, align 4
  switch i64 %3, label %ifend41 [
    i64 17, label %if.entry
    i64 15, label %if.entry13
    i64 13, label %if.entry19
    i64 14, label %if.entry25
    i64 16, label %if.entry32
    i64 20, label %if.entry39
  ]

if.entry:                                         ; preds = %2
  %4 = tail call ptr @malloc(i32 0)
  %5 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %5, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 1
  store ptr %4, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %5, i64 0, i32 2
  %memberidx1 = getelementptr inbounds %FunctionType, ptr %1, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i, i8 0, i64 16, i1 false)
  %6 = load ptr, ptr %memberidx1, align 8
  %memberidx2120 = getelementptr inbounds %Array_Type_, ptr %6, i64 0, i32 2
  %7 = load i64, ptr %memberidx2120, align 4
  %8 = icmp sgt i64 %7, 0
  br i1 %8, label %for.body, label %for.end

for.body:                                         ; preds = %if.entry, %ifend8
  %9 = phi ptr [ %46, %ifend8 ], [ %4, %if.entry ]
  %10 = phi i64 [ %47, %ifend8 ], [ 0, %if.entry ]
  %11 = phi ptr [ %45, %ifend8 ], [ %6, %if.entry ]
  %storemerge69121 = phi i64 [ %48, %ifend8 ], [ 0, %if.entry ]
  %memberidx.i = getelementptr inbounds %Array_Type_, ptr %11, i64 0, i32 1
  %12 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %12, i64 %storemerge69121
  %13 = load ptr, ptr %ptridx.i, align 8
  %14 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %13)
  %memberidx1.i75 = getelementptr inbounds %string, ptr %14, i64 0, i32 2
  %15 = load i64, ptr %memberidx1.i75, align 4
  %16 = add i64 %15, %10
  %17 = tail call ptr @realloc(ptr %9, i64 %16)
  store ptr %17, ptr %memberidx.i.i, align 8
  %18 = load i64, ptr %memberidx1.i.i, align 4
  %19 = getelementptr inbounds i8, ptr %17, i64 %18
  %memberidx6.i = getelementptr inbounds %string, ptr %14, i64 0, i32 1
  %20 = load ptr, ptr %memberidx6.i, align 8
  %21 = load i64, ptr %memberidx1.i75, align 4
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %19, ptr align 8 %20, i64 %21, i1 false)
  store i64 %16, ptr %memberidx1.i.i, align 4
  %22 = load ptr, ptr %memberidx1, align 8
  %memberidx5 = getelementptr inbounds %Array_Type_, ptr %22, i64 0, i32 2
  %23 = load i64, ptr %memberidx5, align 4
  %24 = add i64 %23, -1
  %25 = icmp slt i64 %storemerge69121, %24
  br i1 %25, label %if.entry6, label %ifend8

common.ret:                                       ; preds = %for.end47, %ifend41, %if.entry32, %if.entry25, %if.entry19, %if.entry13, %for.end
  %common.ret.op = phi ptr [ %37, %for.end ], [ %58, %if.entry13 ], [ %69, %if.entry19 ], [ %80, %if.entry25 ], [ %90, %if.entry32 ], [ %106, %ifend41 ], [ %132, %for.end47 ]
  ret ptr %common.ret.op

for.end.loopexit:                                 ; preds = %ifend8
  %.pre126 = load ptr, ptr %5, align 8
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %if.entry
  %26 = phi ptr [ %.pre126, %for.end.loopexit ], [ @VTablestring, %if.entry ]
  %memberidx9 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %26, i64 0, i32 5
  %27 = load ptr, ptr %memberidx9, align 8
  %28 = tail call ptr %27(ptr nonnull %5)
  %memberidx10 = getelementptr inbounds %FunctionType, ptr %1, i64 0, i32 2
  %29 = load ptr, ptr %memberidx10, align 8
  %30 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %29)
  %31 = load ptr, ptr %30, align 8
  %memberidx11 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %31, i64 0, i32 5
  %32 = load ptr, ptr %memberidx11, align 8
  %33 = tail call ptr %32(ptr nonnull %30)
  %34 = alloca ptr, align 8
  %35 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %34, ptr nonnull @137, ptr %28, ptr %33)
  %36 = load ptr, ptr %34, align 8
  %37 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %37, align 8
  %memberidx.i80 = getelementptr inbounds %string, ptr %37, i64 0, i32 1
  store ptr %36, ptr %memberidx.i80, align 8
  %memberidx1.i81 = getelementptr inbounds %string, ptr %37, i64 0, i32 2
  store i64 %35, ptr %memberidx1.i81, align 4
  %memberidx2.i82 = getelementptr inbounds %string, ptr %37, i64 0, i32 3
  store i64 %35, ptr %memberidx2.i82, align 4
  tail call void @free(ptr %28)
  tail call void @free(ptr %33)
  br label %common.ret

if.entry6:                                        ; preds = %for.body
  %38 = tail call ptr @malloc(i32 16)
  store i16 8236, ptr %38, align 8
  %39 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %39, align 8
  %memberidx.i.i83 = getelementptr inbounds %string, ptr %39, i64 0, i32 1
  store ptr %38, ptr %memberidx.i.i83, align 8
  %memberidx1.i.i84 = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  store i64 2, ptr %memberidx1.i.i84, align 4
  %memberidx2.i.i85 = getelementptr inbounds %string, ptr %39, i64 0, i32 3
  store i64 2, ptr %memberidx2.i.i85, align 4
  %40 = add i64 %16, 2
  %41 = tail call ptr @realloc(ptr %17, i64 %40)
  store ptr %41, ptr %memberidx.i.i, align 8
  %42 = getelementptr inbounds i8, ptr %41, i64 %16
  %43 = load i16, ptr %38, align 8
  store i16 %43, ptr %42, align 2147483648
  store i64 %40, ptr %memberidx1.i.i, align 4
  %.pre = load ptr, ptr %memberidx1, align 8
  %memberidx2.phi.trans.insert = getelementptr inbounds %Array_Type_, ptr %.pre, i64 0, i32 2
  %.pre125 = load i64, ptr %memberidx2.phi.trans.insert, align 4
  br label %ifend8

ifend8:                                           ; preds = %for.body, %if.entry6
  %44 = phi i64 [ %23, %for.body ], [ %.pre125, %if.entry6 ]
  %45 = phi ptr [ %22, %for.body ], [ %.pre, %if.entry6 ]
  %46 = phi ptr [ %17, %for.body ], [ %41, %if.entry6 ]
  %47 = phi i64 [ %16, %for.body ], [ %40, %if.entry6 ]
  %48 = add nuw nsw i64 %storemerge69121, 1
  %49 = icmp slt i64 %48, %44
  br i1 %49, label %for.body, label %for.end.loopexit

if.entry13:                                       ; preds = %2
  %memberidx16 = getelementptr inbounds %PointerType, ptr %1, i64 0, i32 1
  %50 = load ptr, ptr %memberidx16, align 8
  %51 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %50)
  %52 = load ptr, ptr %51, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %52, i64 0, i32 5
  %53 = load ptr, ptr %memberidx17, align 8
  %54 = tail call ptr %53(ptr nonnull %51)
  %55 = alloca ptr, align 8
  %56 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %55, ptr nonnull @138, ptr %54)
  %57 = load ptr, ptr %55, align 8
  %58 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %58, align 8
  %memberidx.i94 = getelementptr inbounds %string, ptr %58, i64 0, i32 1
  store ptr %57, ptr %memberidx.i94, align 8
  %memberidx1.i95 = getelementptr inbounds %string, ptr %58, i64 0, i32 2
  store i64 %56, ptr %memberidx1.i95, align 4
  %memberidx2.i96 = getelementptr inbounds %string, ptr %58, i64 0, i32 3
  store i64 %56, ptr %memberidx2.i96, align 4
  tail call void @free(ptr %54)
  br label %common.ret

if.entry19:                                       ; preds = %2
  %59 = load ptr, ptr %0, align 8
  %memberidx6.i117 = getelementptr inbounds %ObjectType, ptr %1, i64 0, i32 1
  %60 = load ptr, ptr %memberidx6.i117, align 8
  %memberidx.i.i118 = getelementptr inbounds %Program, ptr %59, i64 0, i32 1
  %61 = load ptr, ptr %memberidx.i.i118, align 8
  %62 = load i64, ptr %60, align 4
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %61, i64 0, i32 1
  %63 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %63, i64 %62
  %64 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i119 = getelementptr inbounds %Module, ptr %64, i64 0, i32 4
  %65 = load ptr, ptr %memberidx2.i.i119, align 8
  %memberidx3.i.i = getelementptr inbounds %TypeId, ptr %60, i64 0, i32 2
  %66 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %65, i64 0, i32 1
  %67 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %67, i64 %66
  %68 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx23 = getelementptr inbounds %Class, ptr %68, i64 0, i32 1
  %69 = load ptr, ptr %memberidx23, align 8
  br label %common.ret

if.entry25:                                       ; preds = %2
  %70 = load ptr, ptr %0, align 8
  %memberidx29 = getelementptr inbounds %EnumType, ptr %1, i64 0, i32 1
  %71 = load ptr, ptr %memberidx29, align 8
  %memberidx.i97 = getelementptr inbounds %Program, ptr %70, i64 0, i32 1
  %72 = load ptr, ptr %memberidx.i97, align 8
  %73 = load i64, ptr %71, align 4
  %memberidx.i.i98 = getelementptr inbounds %Array_Module_, ptr %72, i64 0, i32 1
  %74 = load ptr, ptr %memberidx.i.i98, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %74, i64 %73
  %75 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i99 = getelementptr inbounds %Module, ptr %75, i64 0, i32 6
  %76 = load ptr, ptr %memberidx2.i99, align 8
  %memberidx3.i = getelementptr inbounds %TypeId, ptr %71, i64 0, i32 2
  %77 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Enum_, ptr %76, i64 0, i32 1
  %78 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %78, i64 %77
  %79 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx30 = getelementptr inbounds %Enum, ptr %79, i64 0, i32 1
  %80 = load ptr, ptr %memberidx30, align 8
  br label %common.ret

if.entry32:                                       ; preds = %2
  %memberidx35 = getelementptr inbounds %ArrayType, ptr %1, i64 0, i32 1
  %81 = load ptr, ptr %memberidx35, align 8
  %82 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %81)
  %83 = load ptr, ptr %82, align 8
  %memberidx36 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %83, i64 0, i32 5
  %84 = load ptr, ptr %memberidx36, align 8
  %85 = tail call ptr %84(ptr nonnull %82)
  %memberidx37 = getelementptr inbounds %ArrayType, ptr %1, i64 0, i32 2
  %86 = load i64, ptr %memberidx37, align 4
  %87 = alloca ptr, align 8
  %88 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %87, ptr nonnull @139, ptr %85, i64 %86)
  %89 = load ptr, ptr %87, align 8
  %90 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %90, align 8
  %memberidx.i102 = getelementptr inbounds %string, ptr %90, i64 0, i32 1
  store ptr %89, ptr %memberidx.i102, align 8
  %memberidx1.i103 = getelementptr inbounds %string, ptr %90, i64 0, i32 2
  store i64 %88, ptr %memberidx1.i103, align 4
  %memberidx2.i104 = getelementptr inbounds %string, ptr %90, i64 0, i32 3
  store i64 %88, ptr %memberidx2.i104, align 4
  tail call void @free(ptr %85)
  br label %common.ret

if.entry39:                                       ; preds = %2
  %memberidx42 = getelementptr inbounds %GenericType, ptr %1, i64 0, i32 1
  %91 = load ptr, ptr %memberidx42, align 8
  %92 = tail call ptr @malloc(i32 8)
  store i8 60, ptr %92, align 8
  %93 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %93, align 8
  %memberidx.i.i105 = getelementptr inbounds %string, ptr %93, i64 0, i32 1
  store ptr %92, ptr %memberidx.i.i105, align 8
  %memberidx1.i.i106 = getelementptr inbounds %string, ptr %93, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i106, align 4
  %memberidx2.i.i107 = getelementptr inbounds %string, ptr %93, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i107, align 4
  %memberidx.i108 = getelementptr inbounds %string, ptr %91, i64 0, i32 2
  %94 = load i64, ptr %memberidx.i108, align 4
  %95 = add i64 %94, 1
  %96 = trunc i64 %95 to i32
  %mallocsize.i110 = shl i32 %96, 3
  %97 = tail call ptr @malloc(i32 %mallocsize.i110)
  %memberidx2.i111 = getelementptr inbounds %string, ptr %91, i64 0, i32 1
  %98 = load ptr, ptr %memberidx2.i111, align 8
  %99 = load i64, ptr %memberidx.i108, align 4
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 8 %97, ptr align 8 %98, i64 %99, i1 false)
  %100 = getelementptr inbounds i8, ptr %97, i64 %99
  %101 = load i8, ptr %92, align 8
  store i8 %101, ptr %100, align 8
  %102 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %102, align 8
  %memberidx.i.i113 = getelementptr inbounds %string, ptr %102, i64 0, i32 1
  store ptr %97, ptr %memberidx.i.i113, align 8
  %memberidx1.i.i114 = getelementptr inbounds %string, ptr %102, i64 0, i32 2
  store i64 %95, ptr %memberidx1.i.i114, align 4
  %memberidx2.i.i115 = getelementptr inbounds %string, ptr %102, i64 0, i32 3
  store i64 %95, ptr %memberidx2.i.i115, align 4
  %memberidx48 = getelementptr inbounds %GenericType, ptr %1, i64 0, i32 2
  %103 = load ptr, ptr %memberidx48, align 8
  %memberidx49123 = getelementptr inbounds %Array_Type_, ptr %103, i64 0, i32 2
  %104 = load i64, ptr %memberidx49123, align 4
  %105 = icmp sgt i64 %104, 0
  br i1 %105, label %for.body45, label %for.end47

ifend41:                                          ; preds = %2
  %106 = tail call fastcc ptr @dump_type(ptr nonnull %1, i1 false)
  br label %common.ret

for.body45:                                       ; preds = %if.entry39, %for.body45
  %107 = phi ptr [ %115, %for.body45 ], [ %97, %if.entry39 ]
  %108 = phi i64 [ %114, %for.body45 ], [ %95, %if.entry39 ]
  %109 = phi ptr [ %120, %for.body45 ], [ %103, %if.entry39 ]
  %storemerge124 = phi i64 [ %119, %for.body45 ], [ 0, %if.entry39 ]
  %memberidx.i100 = getelementptr inbounds %Array_Type_, ptr %109, i64 0, i32 1
  %110 = load ptr, ptr %memberidx.i100, align 8
  %ptridx.i101 = getelementptr inbounds ptr, ptr %110, i64 %storemerge124
  %111 = load ptr, ptr %ptridx.i101, align 8
  %112 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %111)
  %memberidx1.i91 = getelementptr inbounds %string, ptr %112, i64 0, i32 2
  %113 = load i64, ptr %memberidx1.i91, align 4
  %114 = add i64 %113, %108
  %115 = tail call ptr @realloc(ptr %107, i64 %114)
  store ptr %115, ptr %memberidx.i.i113, align 8
  %116 = getelementptr inbounds i8, ptr %115, i64 %108
  %memberidx6.i93 = getelementptr inbounds %string, ptr %112, i64 0, i32 1
  %117 = load ptr, ptr %memberidx6.i93, align 8
  %118 = load i64, ptr %memberidx1.i91, align 4
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %116, ptr align 8 %117, i64 %118, i1 false)
  store i64 %114, ptr %memberidx1.i.i114, align 4
  %119 = add nuw nsw i64 %storemerge124, 1
  %120 = load ptr, ptr %memberidx48, align 8
  %memberidx49 = getelementptr inbounds %Array_Type_, ptr %120, i64 0, i32 2
  %121 = load i64, ptr %memberidx49, align 4
  %122 = icmp slt i64 %119, %121
  br i1 %122, label %for.body45, label %for.end47

for.end47:                                        ; preds = %for.body45, %if.entry39
  %123 = phi ptr [ %97, %if.entry39 ], [ %115, %for.body45 ]
  %124 = phi i64 [ %95, %if.entry39 ], [ %114, %for.body45 ]
  %125 = tail call ptr @malloc(i32 8)
  store i8 62, ptr %125, align 8
  %126 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %126, align 8
  %memberidx.i.i77 = getelementptr inbounds %string, ptr %126, i64 0, i32 1
  store ptr %125, ptr %memberidx.i.i77, align 8
  %memberidx1.i.i78 = getelementptr inbounds %string, ptr %126, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i78, align 4
  %memberidx2.i.i79 = getelementptr inbounds %string, ptr %126, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i79, align 4
  %127 = add i64 %124, 1
  %128 = trunc i64 %127 to i32
  %mallocsize.i = shl i32 %128, 3
  %129 = tail call ptr @malloc(i32 %mallocsize.i)
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 8 %129, ptr align 8 %123, i64 %124, i1 false)
  %130 = getelementptr inbounds i8, ptr %129, i64 %124
  %131 = load i8, ptr %125, align 8
  store i8 %131, ptr %130, align 8
  %132 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %132, align 8
  %memberidx.i.i71 = getelementptr inbounds %string, ptr %132, i64 0, i32 1
  store ptr %129, ptr %memberidx.i.i71, align 8
  %memberidx1.i.i72 = getelementptr inbounds %string, ptr %132, i64 0, i32 2
  store i64 %127, ptr %memberidx1.i.i72, align 4
  %memberidx2.i.i73 = getelementptr inbounds %string, ptr %132, i64 0, i32 3
  store i64 %127, ptr %memberidx2.i.i73, align 4
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_create_generic_instance_in_module(ptr %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 9
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load ptr, ptr %4, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %5, i64 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = tail call ptr %6(ptr nonnull %4, ptr %1)
  %8 = icmp eq ptr %7, null
  br i1 %8, label %common.ret, label %ifend

common.ret:                                       ; preds = %3, %ifend28, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ %114, %ifend28 ], [ null, %3 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %3
  %memberidx2 = getelementptr inbounds %Generic, ptr %7, i64 0, i32 1
  %9 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %ClassDeclarationNode, ptr %9, i64 0, i32 1
  %10 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Array_GenericParameterNode_, ptr %10, i64 0, i32 2
  %11 = load i64, ptr %memberidx4, align 4
  %memberidx5 = getelementptr inbounds %Array_Type_, ptr %2, i64 0, i32 2
  %12 = load i64, ptr %memberidx5, align 4
  %.not = icmp eq i64 %11, %12
  br i1 %.not, label %ifend8, label %if.entry6

if.entry6:                                        ; preds = %ifend
  %13 = load ptr, ptr %memberidx, align 8
  %14 = load ptr, ptr %13, align 8
  %memberidx10 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %14, i64 0, i32 2
  %15 = load ptr, ptr %memberidx10, align 8
  %16 = tail call ptr %15(ptr nonnull %13)
  %17 = load i64, ptr %memberidx4, align 4
  %18 = load i64, ptr %memberidx5, align 4
  %19 = alloca ptr, align 8
  %20 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %19, ptr nonnull @147, i64 %17, i64 %18)
  %21 = load ptr, ptr %19, align 8
  %22 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %22, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %22, i64 0, i32 1
  store ptr %21, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %22, i64 0, i32 2
  store i64 %20, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %22, i64 0, i32 3
  store i64 %20, ptr %memberidx2.i, align 4
  %memberidx.i72 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %23 = load ptr, ptr %memberidx.i72, align 8
  %memberidx1.i73 = getelementptr inbounds %Compiler, ptr %23, i64 0, i32 6
  %24 = load ptr, ptr %memberidx1.i73, align 8
  %25 = call ptr @malloc(i32 24)
  store i64 5, ptr %25, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %25, i64 0, i32 2
  store ptr null, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %25, i64 0, i32 1
  store ptr %22, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %24, i64 0, i32 2
  %26 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %24, i64 0, i32 3
  %27 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %26, %27
  br i1 %.not.i.i, label %if.entry6.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry6.TypeChecker_error.exit_crit_edge:       ; preds = %if.entry6
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %24, i64 0, i32 1
  %.pre114 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry6
  %28 = shl i64 %27, 1
  store i64 %28, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %24, i64 0, i32 1
  %29 = load ptr, ptr %memberidx2.i.i.i, align 8
  %30 = shl i64 %27, 4
  %31 = call ptr @realloc(ptr %29, i64 %30)
  store ptr %31, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry6.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %32 = phi ptr [ %.pre114, %if.entry6.TypeChecker_error.exit_crit_edge ], [ %31, %if.entry.i.i ]
  %33 = phi i64 [ %26, %if.entry6.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %34 = add i64 %33, 1
  store i64 %34, ptr %memberidx.i.i, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %32, i64 %33
  store ptr %25, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend8:                                           ; preds = %ifend
  %memberidx13 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %35 = load i64, ptr %memberidx13, align 4
  %memberidx14 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %36 = load ptr, ptr %memberidx14, align 8
  store i64 0, ptr %memberidx13, align 4
  %37 = load ptr, ptr %0, align 8
  %memberidx1.i.i76 = getelementptr inbounds %Program, ptr %37, i64 0, i32 1
  %38 = load ptr, ptr %memberidx1.i.i76, align 8
  %memberidx.i.i.i77 = getelementptr inbounds %Array_Module_, ptr %38, i64 0, i32 1
  %39 = load ptr, ptr %memberidx.i.i.i77, align 8
  %40 = load ptr, ptr %39, align 8
  %memberidx2.i78 = getelementptr inbounds %Module, ptr %40, i64 0, i32 7
  %41 = load ptr, ptr %memberidx2.i78, align 8
  %memberidx.i.i79 = getelementptr inbounds %Array_Scope_, ptr %41, i64 0, i32 1
  %42 = load ptr, ptr %memberidx.i.i79, align 8
  %43 = load ptr, ptr %42, align 8
  %44 = load ptr, ptr %43, align 8
  store ptr %44, ptr %memberidx14, align 8
  %45 = tail call fastcc ptr @TypeChecker_create_scope(ptr nonnull %0)
  %memberidx.i80 = getelementptr inbounds %Scope, ptr %45, i64 0, i32 5
  %46 = load ptr, ptr %memberidx14, align 8
  store ptr %46, ptr %memberidx.i80, align 8
  %47 = tail call ptr @malloc(i32 0)
  %48 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %48, align 8
  %memberidx.i.i82 = getelementptr inbounds %string, ptr %48, i64 0, i32 1
  store ptr %47, ptr %memberidx.i.i82, align 8
  %memberidx1.i.i83 = getelementptr inbounds %string, ptr %48, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i83, i8 0, i64 16, i1 false)
  %49 = load i64, ptr %memberidx4, align 4
  %50 = icmp sgt i64 %49, 0
  br i1 %50, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %ifend8
  %memberidx.i85 = getelementptr inbounds %Array_GenericParameterNode_, ptr %10, i64 0, i32 1
  %memberidx.i86 = getelementptr inbounds %Array_Type_, ptr %2, i64 0, i32 1
  %memberidx21 = getelementptr inbounds %Scope, ptr %45, i64 0, i32 6
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %storemerge113 = phi i64 [ 0, %for.body.lr.ph ], [ %78, %for.body ]
  %51 = load ptr, ptr %memberidx.i85, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %51, i64 %storemerge113
  %52 = load ptr, ptr %ptridx.i, align 8
  %53 = load ptr, ptr %52, align 8
  %memberidx17 = getelementptr inbounds %IdentifierToken, ptr %53, i64 0, i32 2
  %54 = load ptr, ptr %memberidx17, align 8
  %55 = load ptr, ptr %memberidx.i86, align 8
  %ptridx.i87 = getelementptr inbounds ptr, ptr %55, i64 %storemerge113
  %56 = load ptr, ptr %ptridx.i87, align 8
  %57 = load i64, ptr %56, align 4
  %58 = icmp eq i64 %57, 20
  %memberidx19 = getelementptr inbounds %GenericType, ptr %56, i64 0, i32 3
  %spec.select = select i1 %58, ptr %memberidx19, ptr %ptridx.i87
  %ternary = load ptr, ptr %spec.select, align 8
  %59 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %ternary)
  %60 = load ptr, ptr %59, align 8
  %memberidx20 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %60, i64 0, i32 5
  %61 = load ptr, ptr %memberidx20, align 8
  %62 = call ptr %61(ptr nonnull %59)
  %63 = alloca ptr, align 8
  %64 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %63, ptr nonnull @148, ptr %62)
  %65 = load ptr, ptr %63, align 8
  %66 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %66, align 8
  %memberidx.i95 = getelementptr inbounds %string, ptr %66, i64 0, i32 1
  store ptr %65, ptr %memberidx.i95, align 8
  %memberidx1.i96 = getelementptr inbounds %string, ptr %66, i64 0, i32 2
  store i64 %64, ptr %memberidx1.i96, align 4
  %memberidx2.i97 = getelementptr inbounds %string, ptr %66, i64 0, i32 3
  store i64 %64, ptr %memberidx2.i97, align 4
  tail call void @free(ptr %62)
  %67 = load i64, ptr %memberidx1.i.i83, align 4
  %68 = add i64 %67, %64
  %69 = load ptr, ptr %memberidx.i.i82, align 8
  %70 = call ptr @realloc(ptr %69, i64 %68)
  store ptr %70, ptr %memberidx.i.i82, align 8
  %71 = load i64, ptr %memberidx1.i.i83, align 4
  %72 = getelementptr inbounds i8, ptr %70, i64 %71
  call void @llvm.memcpy.p0.p0.i64(ptr align 2147483648 %72, ptr align 8 %65, i64 %64, i1 false)
  store i64 %68, ptr %memberidx1.i.i83, align 4
  %73 = load ptr, ptr %memberidx21, align 8
  %74 = load ptr, ptr %73, align 8
  %75 = load ptr, ptr %74, align 8
  %76 = load ptr, ptr %memberidx.i86, align 8
  %ptridx.i102 = getelementptr inbounds ptr, ptr %76, i64 %storemerge113
  %77 = load ptr, ptr %ptridx.i102, align 8
  call void %75(ptr nonnull %73, ptr %54, ptr %77)
  %78 = add nuw nsw i64 %storemerge113, 1
  %79 = load i64, ptr %memberidx4, align 4
  %80 = icmp slt i64 %78, %79
  br i1 %80, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %ifend8
  %81 = load ptr, ptr %1, align 8
  %memberidx23 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %81, i64 0, i32 5
  %82 = load ptr, ptr %memberidx23, align 8
  %83 = call ptr %82(ptr nonnull %1)
  %84 = load ptr, ptr %48, align 8
  %memberidx24 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %84, i64 0, i32 5
  %85 = load ptr, ptr %memberidx24, align 8
  %86 = call ptr %85(ptr nonnull %48)
  %87 = alloca ptr, align 8
  %88 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %87, ptr nonnull @149, ptr %83, ptr %86)
  %89 = load ptr, ptr %87, align 8
  %90 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %90, align 8
  %memberidx.i88 = getelementptr inbounds %string, ptr %90, i64 0, i32 1
  store ptr %89, ptr %memberidx.i88, align 8
  %memberidx1.i89 = getelementptr inbounds %string, ptr %90, i64 0, i32 2
  store i64 %88, ptr %memberidx1.i89, align 4
  %memberidx2.i90 = getelementptr inbounds %string, ptr %90, i64 0, i32 3
  store i64 %88, ptr %memberidx2.i90, align 4
  tail call void @free(ptr %83)
  tail call void @free(ptr %86)
  %91 = call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr nonnull %0, ptr nonnull %90)
  %92 = load i64, ptr %91, align 4
  %93 = icmp eq i64 %92, 21
  br i1 %93, label %if.entry26, label %ifend28

if.entry26:                                       ; preds = %for.end
  %94 = alloca %IdentifierToken, align 8
  %95 = load ptr, ptr %memberidx2, align 8
  %96 = load ptr, ptr %95, align 8
  %memberidx31 = getelementptr inbounds %Token, ptr %96, i64 0, i32 1
  %97 = load ptr, ptr %memberidx31, align 8
  store i64 51, ptr %94, align 8
  %memberidx1.i.i103 = getelementptr inbounds %Token, ptr %94, i64 0, i32 1
  store ptr %97, ptr %memberidx1.i.i103, align 8
  %memberidx.i104 = getelementptr inbounds %IdentifierToken, ptr %94, i64 0, i32 2
  store ptr %90, ptr %memberidx.i104, align 8
  %98 = alloca %ClassDeclarationNode, align 8
  store ptr %94, ptr %98, align 8
  %memberidx1.i105 = getelementptr inbounds %ClassDeclarationNode, ptr %98, i64 0, i32 3
  %99 = call ptr @malloc(i32 32)
  store ptr @VTableArray_FieldNode_, ptr %99, align 8
  %memberidx.i.i106 = getelementptr inbounds %Array_FieldNode_, ptr %99, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i106, align 4
  %memberidx1.i.i107 = getelementptr inbounds %Array_FieldNode_, ptr %99, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i107, align 4
  %memberidx2.i.i108 = getelementptr inbounds %Array_FieldNode_, ptr %99, i64 0, i32 1
  %100 = call ptr @malloc(i32 64)
  store ptr %100, ptr %memberidx2.i.i108, align 8
  store i64 0, ptr %memberidx.i.i106, align 4
  %memberidx4.i = getelementptr inbounds %ClassDeclarationNode, ptr %98, i64 0, i32 4
  %101 = call ptr @malloc(i32 32)
  store ptr @VTableArray_MethodNode_, ptr %101, align 8
  %memberidx.i15.i = getelementptr inbounds %Array_MethodNode_, ptr %101, i64 0, i32 2
  store i64 0, ptr %memberidx.i15.i, align 4
  %memberidx1.i16.i = getelementptr inbounds %Array_MethodNode_, ptr %101, i64 0, i32 3
  store i64 8, ptr %memberidx1.i16.i, align 4
  %memberidx2.i17.i = getelementptr inbounds %Array_MethodNode_, ptr %101, i64 0, i32 1
  %102 = call ptr @malloc(i32 64)
  store ptr %102, ptr %memberidx2.i17.i, align 8
  store i64 0, ptr %memberidx.i15.i, align 4
  %memberidx7.i = getelementptr inbounds %ClassDeclarationNode, ptr %98, i64 0, i32 1
  %103 = call ptr @malloc(i32 32)
  store ptr @VTableArray_GenericParameterNode_, ptr %103, align 8
  %memberidx.i18.i = getelementptr inbounds %Array_GenericParameterNode_, ptr %103, i64 0, i32 2
  store i64 0, ptr %memberidx.i18.i, align 4
  %memberidx1.i19.i = getelementptr inbounds %Array_GenericParameterNode_, ptr %103, i64 0, i32 3
  store i64 8, ptr %memberidx1.i19.i, align 4
  %memberidx2.i20.i = getelementptr inbounds %Array_GenericParameterNode_, ptr %103, i64 0, i32 1
  %104 = call ptr @malloc(i32 64)
  store ptr %104, ptr %memberidx2.i20.i, align 8
  store i64 0, ptr %memberidx.i18.i, align 4
  store ptr %103, ptr %memberidx7.i, align 8
  %memberidx10.i = getelementptr inbounds %ClassDeclarationNode, ptr %98, i64 0, i32 2
  %105 = load ptr, ptr %memberidx2, align 8
  %memberidx34 = getelementptr inbounds %ClassDeclarationNode, ptr %105, i64 0, i32 2
  %106 = load ptr, ptr %memberidx34, align 8
  store ptr %106, ptr %memberidx10.i, align 8
  %107 = load ptr, ptr %memberidx2, align 8
  %memberidx37 = getelementptr inbounds %ClassDeclarationNode, ptr %107, i64 0, i32 3
  %108 = load ptr, ptr %memberidx37, align 8
  store ptr %108, ptr %memberidx1.i105, align 8
  %109 = load ptr, ptr %memberidx2, align 8
  %memberidx40 = getelementptr inbounds %ClassDeclarationNode, ptr %109, i64 0, i32 4
  %110 = load ptr, ptr %memberidx40, align 8
  store ptr %110, ptr %memberidx4.i, align 8
  %111 = load ptr, ptr %45, align 8
  store ptr %111, ptr %memberidx14, align 8
  call fastcc void @TypeChecker_declare_class_within_module(ptr nonnull %0, ptr nonnull %98)
  call fastcc void @TypeChecker_check_class_body(ptr nonnull %0, ptr nonnull %98)
  %112 = call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr nonnull %0, ptr nonnull %90)
  br label %ifend28

ifend28:                                          ; preds = %for.end, %if.entry26
  %113 = phi ptr [ %91, %for.end ], [ %112, %if.entry26 ]
  store i64 %35, ptr %memberidx13, align 4
  store ptr %36, ptr %memberidx14, align 8
  %114 = tail call ptr @malloc(i32 32)
  store i64 20, ptr %114, align 4
  %memberidx.i110 = getelementptr inbounds %GenericType, ptr %114, i64 0, i32 1
  store ptr %1, ptr %memberidx.i110, align 8
  %memberidx1.i111 = getelementptr inbounds %GenericType, ptr %114, i64 0, i32 2
  store ptr %2, ptr %memberidx1.i111, align 8
  %memberidx2.i112 = getelementptr inbounds %GenericType, ptr %114, i64 0, i32 3
  store ptr %113, ptr %memberidx2.i112, align 8
  br label %common.ret
}

define internal fastcc void @TypeChecker_declare_enum_within_module(ptr nocapture %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = tail call ptr @malloc(i32 32)
  %memberidx.i = getelementptr inbounds %Enum, ptr %3, i64 0, i32 2
  %4 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_EnumField_, ptr %4, align 8
  %memberidx.i.i = getelementptr inbounds %Array_EnumField_, ptr %4, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Array_EnumField_, ptr %4, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_EnumField_, ptr %4, i64 0, i32 1
  %5 = tail call ptr @malloc(i32 64)
  store ptr %5, ptr %memberidx2.i.i, align 8
  store i64 0, ptr %memberidx.i.i, align 4
  store ptr %4, ptr %memberidx.i, align 8
  %6 = load ptr, ptr %1, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %6, i64 0, i32 2
  %7 = load ptr, ptr %memberidx1, align 8
  %memberidx.i.i41 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %8 = load i64, ptr %memberidx.i.i41, align 4
  %9 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i = getelementptr inbounds %Program, ptr %9, i64 0, i32 1
  %10 = load ptr, ptr %memberidx1.i.i.i, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %10, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %11, i64 %8
  %12 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx.i42 = getelementptr inbounds %Module, ptr %12, i64 0, i32 7
  %13 = load ptr, ptr %memberidx.i42, align 8
  %memberidx.i1.i = getelementptr inbounds %Array_Scope_, ptr %13, i64 0, i32 1
  %14 = load ptr, ptr %memberidx.i1.i, align 8
  %15 = load ptr, ptr %14, align 8
  %memberidx2 = getelementptr inbounds %Enum, ptr %3, i64 0, i32 1
  store ptr %7, ptr %memberidx2, align 8
  %16 = tail call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr nonnull %0, ptr %7)
  %17 = load i64, ptr %16, align 4
  %.not = icmp eq i64 %17, 21
  br i1 %.not, label %ifend, label %if.entry

common.ret:                                       ; preds = %Array_Enum____sl__.exit, %TypeChecker_error.exit
  ret void

if.entry:                                         ; preds = %2
  %18 = load ptr, ptr %7, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %18, i64 0, i32 5
  %19 = load ptr, ptr %memberidx4, align 8
  %20 = tail call ptr %19(ptr nonnull %7)
  %21 = alloca ptr, align 8
  %22 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %21, ptr nonnull @146, ptr %20)
  %23 = load ptr, ptr %21, align 8
  %24 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %24, align 8
  %memberidx.i43 = getelementptr inbounds %string, ptr %24, i64 0, i32 1
  store ptr %23, ptr %memberidx.i43, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %24, i64 0, i32 2
  store i64 %22, ptr %memberidx1.i, align 4
  %memberidx2.i44 = getelementptr inbounds %string, ptr %24, i64 0, i32 3
  store i64 %22, ptr %memberidx2.i44, align 4
  tail call void @free(ptr %20)
  %25 = load ptr, ptr %1, align 8
  %memberidx6 = getelementptr inbounds %Token, ptr %25, i64 0, i32 1
  %26 = load ptr, ptr %memberidx6, align 8
  %memberidx.i45 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %27 = load ptr, ptr %memberidx.i45, align 8
  %memberidx1.i46 = getelementptr inbounds %Compiler, ptr %27, i64 0, i32 6
  %28 = load ptr, ptr %memberidx1.i46, align 8
  %29 = call ptr @malloc(i32 24)
  store i64 1, ptr %29, align 4
  %memberidx1.i.i47 = getelementptr inbounds %FloError, ptr %29, i64 0, i32 2
  store ptr %26, ptr %memberidx1.i.i47, align 8
  %memberidx2.i.i48 = getelementptr inbounds %FloError, ptr %29, i64 0, i32 1
  store ptr %24, ptr %memberidx2.i.i48, align 8
  %memberidx.i.i49 = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 2
  %30 = load i64, ptr %memberidx.i.i49, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 3
  %31 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %30, %31
  br i1 %.not.i.i, label %if.entry.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry.TypeChecker_error.exit_crit_edge:        ; preds = %if.entry
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 1
  %.pre74 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry
  %32 = shl i64 %31, 1
  store i64 %32, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 1
  %33 = load ptr, ptr %memberidx2.i.i.i, align 8
  %34 = shl i64 %31, 4
  %35 = call ptr @realloc(ptr %33, i64 %34)
  store ptr %35, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i49, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %36 = phi ptr [ %.pre74, %if.entry.TypeChecker_error.exit_crit_edge ], [ %35, %if.entry.i.i ]
  %37 = phi i64 [ %30, %if.entry.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %38 = add i64 %37, 1
  store i64 %38, ptr %memberidx.i.i49, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %36, i64 %37
  store ptr %29, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend:                                            ; preds = %2
  %39 = tail call ptr @malloc(i32 32)
  store ptr @VTableMap_string_PropId_, ptr %39, align 8
  %memberidx.i50 = getelementptr inbounds %Map_string_PropId_, ptr %39, i64 0, i32 1
  %40 = tail call ptr @malloc(i32 2048)
  store ptr %40, ptr %memberidx.i50, align 8
  br label %for.body.i

for.body.i:                                       ; preds = %ifend, %for.body.i
  %i.0.i73 = phi i64 [ 0, %ifend ], [ %43, %for.body.i ]
  %41 = load ptr, ptr %memberidx.i50, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %41, i64 %i.0.i73
  %42 = tail call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_PropId_, ptr %42, align 8
  %memberidx.i.i51 = getelementptr inbounds %Bucket_string_PropId_, ptr %42, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i51, align 1
  store ptr %42, ptr %ptridx.i, align 8
  %43 = add nuw nsw i64 %i.0.i73, 1
  %44 = icmp ult i64 %i.0.i73, 255
  br i1 %44, label %for.body.i, label %Map_string_PropId__constructor.exit

Map_string_PropId__constructor.exit:              ; preds = %for.body.i
  %memberidx7 = getelementptr inbounds %Enum, ptr %3, i64 0, i32 3
  %memberidx2.i52 = getelementptr inbounds %Map_string_PropId_, ptr %39, i64 0, i32 3
  store i64 256, ptr %memberidx2.i52, align 4
  %memberidx3.i = getelementptr inbounds %Map_string_PropId_, ptr %39, i64 0, i32 2
  store i64 0, ptr %memberidx3.i, align 4
  store ptr %39, ptr %memberidx7, align 8
  %45 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_EnumField_, ptr %45, align 8
  %memberidx.i53 = getelementptr inbounds %Array_EnumField_, ptr %45, i64 0, i32 2
  store i64 0, ptr %memberidx.i53, align 4
  %memberidx1.i54 = getelementptr inbounds %Array_EnumField_, ptr %45, i64 0, i32 3
  store i64 8, ptr %memberidx1.i54, align 4
  %memberidx2.i55 = getelementptr inbounds %Array_EnumField_, ptr %45, i64 0, i32 1
  %46 = tail call ptr @malloc(i32 64)
  store ptr %46, ptr %memberidx2.i55, align 8
  store i64 0, ptr %memberidx.i53, align 4
  store ptr %45, ptr %memberidx.i, align 8
  %47 = tail call ptr @malloc(i32 24)
  %48 = load i64, ptr %memberidx.i.i41, align 4
  %49 = load ptr, ptr %0, align 8
  %memberidx1.i.i57 = getelementptr inbounds %Program, ptr %49, i64 0, i32 1
  %50 = load ptr, ptr %memberidx1.i.i57, align 8
  %memberidx.i.i.i58 = getelementptr inbounds %Array_Module_, ptr %50, i64 0, i32 1
  %51 = load ptr, ptr %memberidx.i.i.i58, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %51, i64 %48
  %52 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx13 = getelementptr inbounds %Module, ptr %52, i64 0, i32 6
  %53 = load ptr, ptr %memberidx13, align 8
  %memberidx14 = getelementptr inbounds %Array_Enum_, ptr %53, i64 0, i32 2
  %54 = load i64, ptr %memberidx14, align 4
  store i64 %48, ptr %47, align 4
  %memberidx1.i.i59 = getelementptr inbounds %TypeId, ptr %47, i64 0, i32 1
  store i64 1, ptr %memberidx1.i.i59, align 4
  %memberidx2.i.i60 = getelementptr inbounds %TypeId, ptr %47, i64 0, i32 2
  store i64 %54, ptr %memberidx2.i.i60, align 4
  store ptr %47, ptr %3, align 8
  %55 = load ptr, ptr %memberidx1.i.i57, align 8
  %memberidx.i.i.i63 = getelementptr inbounds %Array_Module_, ptr %55, i64 0, i32 1
  %56 = load ptr, ptr %memberidx.i.i.i63, align 8
  %ptridx.i.i.i64 = getelementptr inbounds ptr, ptr %56, i64 %48
  %57 = load ptr, ptr %ptridx.i.i.i64, align 8
  %memberidx15 = getelementptr inbounds %Module, ptr %57, i64 0, i32 6
  %58 = load ptr, ptr %memberidx15, align 8
  %memberidx.i68 = getelementptr inbounds %Array_Enum_, ptr %58, i64 0, i32 2
  %59 = load i64, ptr %memberidx.i68, align 4
  %memberidx1.i69 = getelementptr inbounds %Array_Enum_, ptr %58, i64 0, i32 3
  %60 = load i64, ptr %memberidx1.i69, align 4
  %.not.i = icmp slt i64 %59, %60
  br i1 %.not.i, label %Map_string_PropId__constructor.exit.Array_Enum____sl__.exit_crit_edge, label %if.entry.i

Map_string_PropId__constructor.exit.Array_Enum____sl__.exit_crit_edge: ; preds = %Map_string_PropId__constructor.exit
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_Enum_, ptr %58, i64 0, i32 1
  %.pre76 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_Enum____sl__.exit

if.entry.i:                                       ; preds = %Map_string_PropId__constructor.exit
  %61 = shl i64 %60, 1
  store i64 %61, ptr %memberidx1.i69, align 4
  %memberidx2.i.i71 = getelementptr inbounds %Array_Enum_, ptr %58, i64 0, i32 1
  %62 = load ptr, ptr %memberidx2.i.i71, align 8
  %63 = shl i64 %60, 4
  %64 = tail call ptr @realloc(ptr %62, i64 %63)
  store ptr %64, ptr %memberidx2.i.i71, align 8
  %.pre75 = load i64, ptr %memberidx.i68, align 4
  br label %Array_Enum____sl__.exit

Array_Enum____sl__.exit:                          ; preds = %Map_string_PropId__constructor.exit.Array_Enum____sl__.exit_crit_edge, %if.entry.i
  %65 = phi ptr [ %.pre76, %Map_string_PropId__constructor.exit.Array_Enum____sl__.exit_crit_edge ], [ %64, %if.entry.i ]
  %66 = phi i64 [ %59, %Map_string_PropId__constructor.exit.Array_Enum____sl__.exit_crit_edge ], [ %.pre75, %if.entry.i ]
  %67 = add i64 %66, 1
  store i64 %67, ptr %memberidx.i68, align 4
  %ptridx.i72 = getelementptr inbounds ptr, ptr %65, i64 %66
  store ptr %3, ptr %ptridx.i72, align 8
  %memberidx16 = getelementptr inbounds %Scope, ptr %15, i64 0, i32 4
  %68 = load ptr, ptr %memberidx16, align 8
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %69, align 8
  %71 = load ptr, ptr %memberidx2, align 8
  %72 = load ptr, ptr %3, align 8
  tail call void %70(ptr nonnull %68, ptr %71, ptr %72)
  %memberidx20 = getelementptr inbounds %Scope, ptr %15, i64 0, i32 1
  %73 = load ptr, ptr %memberidx20, align 8
  %74 = load ptr, ptr %73, align 8
  %75 = load ptr, ptr %74, align 8
  %76 = load ptr, ptr %memberidx2, align 8
  %77 = tail call ptr @malloc(i32 24)
  %78 = load ptr, ptr %3, align 8
  %79 = load i64, ptr %78, align 4
  %memberidx1.i65 = getelementptr inbounds %TypeId, ptr %78, i64 0, i32 2
  %80 = load i64, ptr %memberidx1.i65, align 4
  store i64 4, ptr %77, align 4
  %memberidx1.i.i66 = getelementptr inbounds %VarId, ptr %77, i64 0, i32 1
  store i64 %79, ptr %memberidx1.i.i66, align 4
  %memberidx2.i.i67 = getelementptr inbounds %VarId, ptr %77, i64 0, i32 2
  store i64 %80, ptr %memberidx2.i.i67, align 4
  tail call void %75(ptr nonnull %73, ptr %76, ptr nonnull %77)
  br label %common.ret
}

define internal fastcc void @TypeChecker_declare_class_within_module(ptr %0, ptr %1) unnamed_addr {
  %3 = load ptr, ptr %1, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %3, i64 0, i32 2
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = tail call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %4)
  %6 = load i64, ptr %5, align 4
  %7 = icmp ne i64 %6, 21
  %memberidx3 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 9
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = load ptr, ptr %8, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %9, i64 0, i32 1
  %10 = load ptr, ptr %memberidx4, align 8
  %11 = tail call ptr %10(ptr nonnull %8, ptr %4)
  %12 = icmp ne ptr %11, null
  %13 = or i1 %7, %12
  br i1 %13, label %if.entry, label %ifend

common.ret:                                       ; preds = %if.entry18, %Array_Class____sl__.exit, %if.entry10, %TypeChecker_error.exit
  ret void

if.entry:                                         ; preds = %2
  %14 = load ptr, ptr %4, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %14, i64 0, i32 5
  %15 = load ptr, ptr %memberidx5, align 8
  %16 = tail call ptr %15(ptr nonnull %4)
  %17 = alloca ptr, align 8
  %18 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %17, ptr nonnull @146, ptr %16)
  %19 = load ptr, ptr %17, align 8
  %20 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %20, align 8
  %memberidx.i104 = getelementptr inbounds %string, ptr %20, i64 0, i32 1
  store ptr %19, ptr %memberidx.i104, align 8
  %memberidx1.i105 = getelementptr inbounds %string, ptr %20, i64 0, i32 2
  store i64 %18, ptr %memberidx1.i105, align 4
  %memberidx2.i106 = getelementptr inbounds %string, ptr %20, i64 0, i32 3
  store i64 %18, ptr %memberidx2.i106, align 4
  tail call void @free(ptr %16)
  %21 = load ptr, ptr %1, align 8
  %memberidx7 = getelementptr inbounds %Token, ptr %21, i64 0, i32 1
  %22 = load ptr, ptr %memberidx7, align 8
  %memberidx.i98 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %23 = load ptr, ptr %memberidx.i98, align 8
  %memberidx1.i99 = getelementptr inbounds %Compiler, ptr %23, i64 0, i32 6
  %24 = load ptr, ptr %memberidx1.i99, align 8
  %25 = call ptr @malloc(i32 24)
  store i64 1, ptr %25, align 4
  %memberidx1.i.i100 = getelementptr inbounds %FloError, ptr %25, i64 0, i32 2
  store ptr %22, ptr %memberidx1.i.i100, align 8
  %memberidx2.i.i101 = getelementptr inbounds %FloError, ptr %25, i64 0, i32 1
  store ptr %20, ptr %memberidx2.i.i101, align 8
  %memberidx.i.i102 = getelementptr inbounds %Array_FloError_, ptr %24, i64 0, i32 2
  %26 = load i64, ptr %memberidx.i.i102, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %24, i64 0, i32 3
  %27 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %26, %27
  br i1 %.not.i.i, label %if.entry.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry.TypeChecker_error.exit_crit_edge:        ; preds = %if.entry
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %24, i64 0, i32 1
  %.pre111 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry
  %28 = shl i64 %27, 1
  store i64 %28, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %24, i64 0, i32 1
  %29 = load ptr, ptr %memberidx2.i.i.i, align 8
  %30 = shl i64 %27, 4
  %31 = call ptr @realloc(ptr %29, i64 %30)
  store ptr %31, ptr %memberidx2.i.i.i, align 8
  %.pre110 = load i64, ptr %memberidx.i.i102, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %32 = phi ptr [ %.pre111, %if.entry.TypeChecker_error.exit_crit_edge ], [ %31, %if.entry.i.i ]
  %33 = phi i64 [ %26, %if.entry.TypeChecker_error.exit_crit_edge ], [ %.pre110, %if.entry.i.i ]
  %34 = add i64 %33, 1
  store i64 %34, ptr %memberidx.i.i102, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %32, i64 %33
  store ptr %25, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend:                                            ; preds = %2
  %memberidx8 = getelementptr inbounds %ClassDeclarationNode, ptr %1, i64 0, i32 1
  %35 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Array_GenericParameterNode_, ptr %35, i64 0, i32 2
  %36 = load i64, ptr %memberidx9, align 4
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %if.entry10, label %ifend12

if.entry10:                                       ; preds = %ifend
  %memberidx13 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 8
  store i1 true, ptr %memberidx13, align 1
  %38 = load ptr, ptr %memberidx3, align 8
  %39 = load ptr, ptr %38, align 8
  %40 = load ptr, ptr %39, align 8
  %41 = tail call ptr @malloc(i32 16)
  %memberidx16 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %42 = load i64, ptr %memberidx16, align 4
  store i64 %42, ptr %41, align 4
  %memberidx1.i97 = getelementptr inbounds %Generic, ptr %41, i64 0, i32 1
  store ptr %1, ptr %memberidx1.i97, align 8
  tail call void %40(ptr nonnull %38, ptr %4, ptr nonnull %41)
  br label %common.ret

ifend12:                                          ; preds = %ifend
  %43 = tail call ptr @malloc(i32 81)
  %memberidx.i90 = getelementptr inbounds %Class, ptr %43, i64 0, i32 3
  store ptr null, ptr %memberidx.i90, align 8
  %memberidx2.i92 = getelementptr inbounds %Class, ptr %43, i64 0, i32 8
  %memberidx3.i93 = getelementptr inbounds %Class, ptr %43, i64 0, i32 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx2.i92, i8 0, i64 16, i1 false)
  %44 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ClassField_, ptr %44, align 8
  %memberidx.i.i94 = getelementptr inbounds %Array_ClassField_, ptr %44, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i94, align 4
  %memberidx1.i.i95 = getelementptr inbounds %Array_ClassField_, ptr %44, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i95, align 4
  %memberidx2.i.i96 = getelementptr inbounds %Array_ClassField_, ptr %44, i64 0, i32 1
  %45 = tail call ptr @malloc(i32 64)
  store ptr %45, ptr %memberidx2.i.i96, align 8
  store i64 0, ptr %memberidx.i.i94, align 4
  store ptr %44, ptr %memberidx3.i93, align 8
  %memberidx6.i = getelementptr inbounds %Class, ptr %43, i64 0, i32 5
  %46 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_ClassMethod_, ptr %46, align 8
  %memberidx.i15.i = getelementptr inbounds %Array_ClassMethod_, ptr %46, i64 0, i32 2
  store i64 0, ptr %memberidx.i15.i, align 4
  %memberidx1.i16.i = getelementptr inbounds %Array_ClassMethod_, ptr %46, i64 0, i32 3
  store i64 8, ptr %memberidx1.i16.i, align 4
  %memberidx2.i17.i = getelementptr inbounds %Array_ClassMethod_, ptr %46, i64 0, i32 1
  %47 = tail call ptr @malloc(i32 64)
  store ptr %47, ptr %memberidx2.i17.i, align 8
  store i64 0, ptr %memberidx.i15.i, align 4
  store ptr %46, ptr %memberidx6.i, align 8
  %memberidx9.i = getelementptr inbounds %Class, ptr %43, i64 0, i32 10
  store i1 false, ptr %memberidx9.i, align 1
  %memberidx.i.i88 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %48 = load i64, ptr %memberidx.i.i88, align 4
  %49 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i = getelementptr inbounds %Program, ptr %49, i64 0, i32 1
  %50 = load ptr, ptr %memberidx1.i.i.i, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %50, i64 0, i32 1
  %51 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %51, i64 %48
  %52 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx.i89 = getelementptr inbounds %Module, ptr %52, i64 0, i32 7
  %53 = load ptr, ptr %memberidx.i89, align 8
  %memberidx.i1.i = getelementptr inbounds %Array_Scope_, ptr %53, i64 0, i32 1
  %54 = load ptr, ptr %memberidx.i1.i, align 8
  %55 = load ptr, ptr %54, align 8
  %memberidx17 = getelementptr inbounds %ClassDeclarationNode, ptr %1, i64 0, i32 2
  %56 = load ptr, ptr %memberidx17, align 8
  %.not = icmp eq ptr %56, null
  %memberidx26 = getelementptr inbounds %Class, ptr %43, i64 0, i32 2
  br i1 %.not, label %else19, label %if.entry18

if.entry18:                                       ; preds = %ifend12
  %57 = tail call fastcc ptr @TypeChecker_check_type(ptr nonnull %0, ptr nonnull %56)
  store ptr %57, ptr %memberidx26, align 8
  %memberidx.i85 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %58 = load ptr, ptr %memberidx.i85, align 8
  %memberidx1.i86 = getelementptr inbounds %Compiler, ptr %58, i64 0, i32 6
  %59 = load ptr, ptr %memberidx1.i86, align 8
  %memberidx2.i87 = getelementptr inbounds %Array_FloError_, ptr %59, i64 0, i32 2
  %60 = load i64, ptr %memberidx2.i87, align 4
  %61 = icmp sgt i64 %60, 0
  br i1 %61, label %common.ret, label %ifend20

else19:                                           ; preds = %ifend12
  store ptr null, ptr %memberidx26, align 8
  br label %ifend20

ifend20:                                          ; preds = %if.entry18, %else19
  %62 = tail call ptr @malloc(i32 32)
  store ptr @VTableMap_string_PropId_, ptr %62, align 8
  %memberidx.i76 = getelementptr inbounds %Map_string_PropId_, ptr %62, i64 0, i32 1
  %63 = tail call ptr @malloc(i32 2048)
  store ptr %63, ptr %memberidx.i76, align 8
  br label %for.body.i81

for.body.i81:                                     ; preds = %ifend20, %for.body.i81
  %i.0.i77108 = phi i64 [ 0, %ifend20 ], [ %66, %for.body.i81 ]
  %64 = load ptr, ptr %memberidx.i76, align 8
  %ptridx.i79 = getelementptr inbounds ptr, ptr %64, i64 %i.0.i77108
  %65 = tail call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_PropId_, ptr %65, align 8
  %memberidx.i.i80 = getelementptr inbounds %Bucket_string_PropId_, ptr %65, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i80, align 1
  store ptr %65, ptr %ptridx.i79, align 8
  %66 = add nuw nsw i64 %i.0.i77108, 1
  %67 = icmp ult i64 %i.0.i77108, 255
  br i1 %67, label %for.body.i81, label %Map_string_PropId__constructor.exit84

Map_string_PropId__constructor.exit84:            ; preds = %for.body.i81
  %memberidx27 = getelementptr inbounds %Class, ptr %43, i64 0, i32 6
  %memberidx2.i82 = getelementptr inbounds %Map_string_PropId_, ptr %62, i64 0, i32 3
  store i64 256, ptr %memberidx2.i82, align 4
  %memberidx3.i83 = getelementptr inbounds %Map_string_PropId_, ptr %62, i64 0, i32 2
  store i64 0, ptr %memberidx3.i83, align 4
  store ptr %62, ptr %memberidx27, align 8
  %68 = tail call ptr @malloc(i32 32)
  store ptr @VTableMap_string_PropId_, ptr %68, align 8
  %memberidx.i73 = getelementptr inbounds %Map_string_PropId_, ptr %68, i64 0, i32 1
  %69 = tail call ptr @malloc(i32 2048)
  store ptr %69, ptr %memberidx.i73, align 8
  br label %for.body.i

for.body.i:                                       ; preds = %Map_string_PropId__constructor.exit84, %for.body.i
  %i.0.i107 = phi i64 [ 0, %Map_string_PropId__constructor.exit84 ], [ %72, %for.body.i ]
  %70 = load ptr, ptr %memberidx.i73, align 8
  %ptridx.i74 = getelementptr inbounds ptr, ptr %70, i64 %i.0.i107
  %71 = tail call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_PropId_, ptr %71, align 8
  %memberidx.i.i75 = getelementptr inbounds %Bucket_string_PropId_, ptr %71, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i75, align 1
  store ptr %71, ptr %ptridx.i74, align 8
  %72 = add nuw nsw i64 %i.0.i107, 1
  %73 = icmp ult i64 %i.0.i107, 255
  br i1 %73, label %for.body.i, label %Map_string_PropId__constructor.exit

Map_string_PropId__constructor.exit:              ; preds = %for.body.i
  %memberidx28 = getelementptr inbounds %Class, ptr %43, i64 0, i32 7
  %memberidx2.i = getelementptr inbounds %Map_string_PropId_, ptr %68, i64 0, i32 3
  store i64 256, ptr %memberidx2.i, align 4
  %memberidx3.i = getelementptr inbounds %Map_string_PropId_, ptr %68, i64 0, i32 2
  store i64 0, ptr %memberidx3.i, align 4
  store ptr %68, ptr %memberidx28, align 8
  %memberidx29 = getelementptr inbounds %Class, ptr %43, i64 0, i32 1
  store ptr %4, ptr %memberidx29, align 8
  %74 = tail call ptr @malloc(i32 24)
  %75 = load i64, ptr %memberidx.i.i88, align 4
  %76 = load ptr, ptr %0, align 8
  %memberidx1.i.i70 = getelementptr inbounds %Program, ptr %76, i64 0, i32 1
  %77 = load ptr, ptr %memberidx1.i.i70, align 8
  %memberidx.i.i.i71 = getelementptr inbounds %Array_Module_, ptr %77, i64 0, i32 1
  %78 = load ptr, ptr %memberidx.i.i.i71, align 8
  %ptridx.i.i.i72 = getelementptr inbounds ptr, ptr %78, i64 %75
  %79 = load ptr, ptr %ptridx.i.i.i72, align 8
  %memberidx32 = getelementptr inbounds %Module, ptr %79, i64 0, i32 4
  %80 = load ptr, ptr %memberidx32, align 8
  %memberidx33 = getelementptr inbounds %Array_Class_, ptr %80, i64 0, i32 2
  %81 = load i64, ptr %memberidx33, align 4
  store i64 %75, ptr %74, align 4
  %memberidx1.i.i67 = getelementptr inbounds %TypeId, ptr %74, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i67, align 4
  %memberidx2.i.i68 = getelementptr inbounds %TypeId, ptr %74, i64 0, i32 2
  store i64 %81, ptr %memberidx2.i.i68, align 4
  store ptr %74, ptr %43, align 8
  %82 = load ptr, ptr %memberidx1.i.i70, align 8
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %82, i64 0, i32 1
  %83 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %83, i64 %75
  %84 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx34 = getelementptr inbounds %Module, ptr %84, i64 0, i32 4
  %85 = load ptr, ptr %memberidx34, align 8
  %memberidx.i = getelementptr inbounds %Array_Class_, ptr %85, i64 0, i32 2
  %86 = load i64, ptr %memberidx.i, align 4
  %memberidx1.i63 = getelementptr inbounds %Array_Class_, ptr %85, i64 0, i32 3
  %87 = load i64, ptr %memberidx1.i63, align 4
  %.not.i = icmp slt i64 %86, %87
  br i1 %.not.i, label %Map_string_PropId__constructor.exit.Array_Class____sl__.exit_crit_edge, label %if.entry.i

Map_string_PropId__constructor.exit.Array_Class____sl__.exit_crit_edge: ; preds = %Map_string_PropId__constructor.exit
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_Class_, ptr %85, i64 0, i32 1
  %.pre109 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_Class____sl__.exit

if.entry.i:                                       ; preds = %Map_string_PropId__constructor.exit
  %88 = shl i64 %87, 1
  store i64 %88, ptr %memberidx1.i63, align 4
  %memberidx2.i.i64 = getelementptr inbounds %Array_Class_, ptr %85, i64 0, i32 1
  %89 = load ptr, ptr %memberidx2.i.i64, align 8
  %90 = shl i64 %87, 4
  %91 = tail call ptr @realloc(ptr %89, i64 %90)
  store ptr %91, ptr %memberidx2.i.i64, align 8
  %.pre = load i64, ptr %memberidx.i, align 4
  br label %Array_Class____sl__.exit

Array_Class____sl__.exit:                         ; preds = %Map_string_PropId__constructor.exit.Array_Class____sl__.exit_crit_edge, %if.entry.i
  %92 = phi ptr [ %.pre109, %Map_string_PropId__constructor.exit.Array_Class____sl__.exit_crit_edge ], [ %91, %if.entry.i ]
  %93 = phi i64 [ %86, %Map_string_PropId__constructor.exit.Array_Class____sl__.exit_crit_edge ], [ %.pre, %if.entry.i ]
  %94 = add i64 %93, 1
  store i64 %94, ptr %memberidx.i, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %92, i64 %93
  store ptr %43, ptr %ptridx.i, align 8
  %memberidx35 = getelementptr inbounds %Scope, ptr %55, i64 0, i32 2
  %95 = load ptr, ptr %memberidx35, align 8
  %96 = load ptr, ptr %95, align 8
  %97 = load ptr, ptr %96, align 8
  %98 = load ptr, ptr %43, align 8
  tail call void %97(ptr nonnull %95, ptr %4, ptr %98)
  %memberidx38 = getelementptr inbounds %Scope, ptr %55, i64 0, i32 1
  %99 = load ptr, ptr %memberidx38, align 8
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %100, align 8
  %102 = tail call ptr @malloc(i32 24)
  %103 = load ptr, ptr %43, align 8
  %104 = load i64, ptr %103, align 4
  %memberidx1.i = getelementptr inbounds %TypeId, ptr %103, i64 0, i32 2
  %105 = load i64, ptr %memberidx1.i, align 4
  store i64 3, ptr %102, align 4
  %memberidx1.i.i = getelementptr inbounds %VarId, ptr %102, i64 0, i32 1
  store i64 %104, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %VarId, ptr %102, i64 0, i32 2
  store i64 %105, ptr %memberidx2.i.i, align 4
  tail call void %101(ptr nonnull %99, ptr %4, ptr nonnull %102)
  br label %common.ret
}

define internal fastcc void @TypeChecker_declare_function_within_module(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = tail call ptr @malloc(i32 49)
  %memberidx.i = getelementptr inbounds %Function, ptr %3, i64 0, i32 6
  %memberidx1 = getelementptr inbounds %FunctionDeclarationNode, ptr %1, i64 0, i32 4
  %4 = load i1, ptr %memberidx1, align 1
  store i1 %4, ptr %memberidx.i, align 1
  %5 = load ptr, ptr %1, align 8
  %memberidx3 = getelementptr inbounds %IdentifierToken, ptr %5, i64 0, i32 2
  %6 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Function, ptr %3, i64 0, i32 1
  store ptr %6, ptr %memberidx4, align 8
  %7 = tail call fastcc ptr @TypeChecker_get_var_from_current_scope(ptr %0, ptr %6)
  %.not.i = icmp eq ptr %7, null
  br i1 %.not.i, label %ifend, label %if.entry.i

if.entry.i:                                       ; preds = %2
  %8 = load i64, ptr %7, align 4
  %9 = icmp eq i64 %8, 2
  br i1 %9, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend11, %Array_Function____sl__.exit, %TypeChecker_error.exit94, %TypeChecker_error.exit
  ret void

if.entry:                                         ; preds = %if.entry.i
  %10 = load ptr, ptr %6, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %10, i64 0, i32 5
  %11 = load ptr, ptr %memberidx5, align 8
  %12 = tail call ptr %11(ptr nonnull %6)
  %13 = alloca ptr, align 8
  %14 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %13, ptr nonnull @154, ptr %12)
  %15 = load ptr, ptr %13, align 8
  %16 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %16, align 8
  %memberidx.i70 = getelementptr inbounds %string, ptr %16, i64 0, i32 1
  store ptr %15, ptr %memberidx.i70, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %16, i64 0, i32 2
  store i64 %14, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %16, i64 0, i32 3
  store i64 %14, ptr %memberidx2.i, align 4
  tail call void @free(ptr %12)
  %17 = load ptr, ptr %1, align 8
  %memberidx7 = getelementptr inbounds %Token, ptr %17, i64 0, i32 1
  %18 = load ptr, ptr %memberidx7, align 8
  %memberidx.i75 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %19 = load ptr, ptr %memberidx.i75, align 8
  %memberidx1.i76 = getelementptr inbounds %Compiler, ptr %19, i64 0, i32 6
  %20 = load ptr, ptr %memberidx1.i76, align 8
  %21 = call ptr @malloc(i32 24)
  store i64 1, ptr %21, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %21, i64 0, i32 2
  store ptr %18, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i77 = getelementptr inbounds %FloError, ptr %21, i64 0, i32 1
  store ptr %16, ptr %memberidx2.i.i77, align 8
  %memberidx.i.i78 = getelementptr inbounds %Array_FloError_, ptr %20, i64 0, i32 2
  %22 = load i64, ptr %memberidx.i.i78, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %20, i64 0, i32 3
  %23 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %22, %23
  br i1 %.not.i.i, label %if.entry.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry.TypeChecker_error.exit_crit_edge:        ; preds = %if.entry
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %20, i64 0, i32 1
  %.pre114 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry
  %24 = shl i64 %23, 1
  store i64 %24, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %20, i64 0, i32 1
  %25 = load ptr, ptr %memberidx2.i.i.i, align 8
  %26 = shl i64 %23, 4
  %27 = call ptr @realloc(ptr %25, i64 %26)
  store ptr %27, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i78, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %28 = phi ptr [ %.pre114, %if.entry.TypeChecker_error.exit_crit_edge ], [ %27, %if.entry.i.i ]
  %29 = phi i64 [ %22, %if.entry.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %30 = add i64 %29, 1
  store i64 %30, ptr %memberidx.i.i78, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %28, i64 %29
  store ptr %21, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend:                                            ; preds = %2, %if.entry.i
  %31 = tail call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %6)
  %32 = load i64, ptr %31, align 4
  %.not = icmp eq i64 %32, 21
  br i1 %.not, label %ifend11, label %if.entry9

if.entry9:                                        ; preds = %ifend
  %33 = load ptr, ptr %6, align 8
  %memberidx12 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %33, i64 0, i32 5
  %34 = load ptr, ptr %memberidx12, align 8
  %35 = tail call ptr %34(ptr nonnull %6)
  %36 = alloca ptr, align 8
  %37 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %36, ptr nonnull @155, ptr %35)
  %38 = load ptr, ptr %36, align 8
  %39 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %39, align 8
  %memberidx.i79 = getelementptr inbounds %string, ptr %39, i64 0, i32 1
  store ptr %38, ptr %memberidx.i79, align 8
  %memberidx1.i80 = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  store i64 %37, ptr %memberidx1.i80, align 4
  %memberidx2.i81 = getelementptr inbounds %string, ptr %39, i64 0, i32 3
  store i64 %37, ptr %memberidx2.i81, align 4
  tail call void @free(ptr %35)
  %40 = load ptr, ptr %1, align 8
  %memberidx14 = getelementptr inbounds %Token, ptr %40, i64 0, i32 1
  %41 = load ptr, ptr %memberidx14, align 8
  %memberidx.i82 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %42 = load ptr, ptr %memberidx.i82, align 8
  %memberidx1.i83 = getelementptr inbounds %Compiler, ptr %42, i64 0, i32 6
  %43 = load ptr, ptr %memberidx1.i83, align 8
  %44 = call ptr @malloc(i32 24)
  store i64 1, ptr %44, align 4
  %memberidx1.i.i84 = getelementptr inbounds %FloError, ptr %44, i64 0, i32 2
  store ptr %41, ptr %memberidx1.i.i84, align 8
  %memberidx2.i.i85 = getelementptr inbounds %FloError, ptr %44, i64 0, i32 1
  store ptr %39, ptr %memberidx2.i.i85, align 8
  %memberidx.i.i86 = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 2
  %45 = load i64, ptr %memberidx.i.i86, align 4
  %memberidx1.i2.i87 = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 3
  %46 = load i64, ptr %memberidx1.i2.i87, align 4
  %.not.i.i88 = icmp slt i64 %45, %46
  br i1 %.not.i.i88, label %if.entry9.TypeChecker_error.exit94_crit_edge, label %if.entry.i.i91

if.entry9.TypeChecker_error.exit94_crit_edge:     ; preds = %if.entry9
  %memberidx4.i.i92.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 1
  %.pre116 = load ptr, ptr %memberidx4.i.i92.phi.trans.insert, align 8
  br label %TypeChecker_error.exit94

if.entry.i.i91:                                   ; preds = %if.entry9
  %47 = shl i64 %46, 1
  store i64 %47, ptr %memberidx1.i2.i87, align 4
  %memberidx2.i.i.i90 = getelementptr inbounds %Array_FloError_, ptr %43, i64 0, i32 1
  %48 = load ptr, ptr %memberidx2.i.i.i90, align 8
  %49 = shl i64 %46, 4
  %50 = call ptr @realloc(ptr %48, i64 %49)
  store ptr %50, ptr %memberidx2.i.i.i90, align 8
  %.pre115 = load i64, ptr %memberidx.i.i86, align 4
  br label %TypeChecker_error.exit94

TypeChecker_error.exit94:                         ; preds = %if.entry9.TypeChecker_error.exit94_crit_edge, %if.entry.i.i91
  %51 = phi ptr [ %.pre116, %if.entry9.TypeChecker_error.exit94_crit_edge ], [ %50, %if.entry.i.i91 ]
  %52 = phi i64 [ %45, %if.entry9.TypeChecker_error.exit94_crit_edge ], [ %.pre115, %if.entry.i.i91 ]
  %53 = add i64 %52, 1
  store i64 %53, ptr %memberidx.i.i86, align 4
  %ptridx.i.i93 = getelementptr inbounds ptr, ptr %51, i64 %52
  store ptr %44, ptr %ptridx.i.i93, align 8
  br label %common.ret

ifend11:                                          ; preds = %ifend
  %54 = tail call fastcc ptr @TypeChecker_create_scope(ptr %0)
  %memberidx.i95 = getelementptr inbounds %Scope, ptr %54, i64 0, i32 5
  %memberidx1.i96 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %55 = load ptr, ptr %memberidx1.i96, align 8
  store ptr %55, ptr %memberidx.i95, align 8
  %56 = load ptr, ptr %54, align 8
  store ptr %56, ptr %memberidx1.i96, align 8
  %memberidx17 = getelementptr inbounds %Function, ptr %3, i64 0, i32 2
  %57 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_FunctionArg_, ptr %57, align 8
  %memberidx.i97 = getelementptr inbounds %Array_FunctionArg_, ptr %57, i64 0, i32 2
  store i64 0, ptr %memberidx.i97, align 4
  %memberidx1.i98 = getelementptr inbounds %Array_FunctionArg_, ptr %57, i64 0, i32 3
  store i64 8, ptr %memberidx1.i98, align 4
  %memberidx2.i99 = getelementptr inbounds %Array_FunctionArg_, ptr %57, i64 0, i32 1
  %58 = tail call ptr @malloc(i32 64)
  store ptr %58, ptr %memberidx2.i99, align 8
  store i64 0, ptr %memberidx.i97, align 4
  store ptr %57, ptr %memberidx17, align 8
  %memberidx20 = getelementptr inbounds %Function, ptr %3, i64 0, i32 4
  %memberidx21 = getelementptr inbounds %FunctionDeclarationNode, ptr %1, i64 0, i32 1
  %59 = load ptr, ptr %memberidx21, align 8
  %memberidx22 = getelementptr inbounds %FunctionDeclarationNode, ptr %1, i64 0, i32 3
  %60 = load ptr, ptr %memberidx22, align 8
  %61 = tail call fastcc ptr @TypeChecker_init_function_signature(ptr %0, ptr %59, ptr %60, ptr nonnull %57)
  store ptr %61, ptr %memberidx20, align 8
  %memberidx.i100 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %62 = load ptr, ptr %memberidx.i100, align 8
  %memberidx1.i101 = getelementptr inbounds %Compiler, ptr %62, i64 0, i32 6
  %63 = load ptr, ptr %memberidx1.i101, align 8
  %memberidx2.i102 = getelementptr inbounds %Array_FloError_, ptr %63, i64 0, i32 2
  %64 = load i64, ptr %memberidx2.i102, align 4
  %65 = icmp sgt i64 %64, 0
  br i1 %65, label %common.ret, label %ifend26

ifend26:                                          ; preds = %ifend11
  %66 = tail call ptr @malloc(i32 24)
  %memberidx28 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %67 = load i64, ptr %memberidx28, align 4
  %68 = load ptr, ptr %0, align 8
  %memberidx1.i.i104 = getelementptr inbounds %Program, ptr %68, i64 0, i32 1
  %69 = load ptr, ptr %memberidx1.i.i104, align 8
  %memberidx.i.i.i105 = getelementptr inbounds %Array_Module_, ptr %69, i64 0, i32 1
  %70 = load ptr, ptr %memberidx.i.i.i105, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %70, i64 %67
  %71 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx29 = getelementptr inbounds %Module, ptr %71, i64 0, i32 5
  %72 = load ptr, ptr %memberidx29, align 8
  %memberidx30 = getelementptr inbounds %Array_Function_, ptr %72, i64 0, i32 2
  %73 = load i64, ptr %memberidx30, align 4
  store i64 0, ptr %66, align 4
  %memberidx1.i112 = getelementptr inbounds %VarId, ptr %66, i64 0, i32 1
  store i64 %67, ptr %memberidx1.i112, align 4
  %memberidx2.i113 = getelementptr inbounds %VarId, ptr %66, i64 0, i32 2
  store i64 %73, ptr %memberidx2.i113, align 4
  store ptr %66, ptr %3, align 8
  %74 = load ptr, ptr %memberidx.i95, align 8
  store ptr %74, ptr %memberidx1.i96, align 8
  %memberidx33 = getelementptr inbounds %Function, ptr %3, i64 0, i32 5
  %75 = load ptr, ptr %54, align 8
  store ptr %75, ptr %memberidx33, align 8
  %76 = load ptr, ptr %memberidx1.i.i104, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %76, i64 0, i32 1
  %77 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %77, i64 %67
  %78 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx.i111 = getelementptr inbounds %Module, ptr %78, i64 0, i32 7
  %79 = load ptr, ptr %memberidx.i111, align 8
  %memberidx.i1.i = getelementptr inbounds %Array_Scope_, ptr %79, i64 0, i32 1
  %80 = load ptr, ptr %memberidx.i1.i, align 8
  %81 = load ptr, ptr %80, align 8
  %memberidx35 = getelementptr inbounds %Module, ptr %78, i64 0, i32 5
  %82 = load ptr, ptr %memberidx35, align 8
  %memberidx.i71 = getelementptr inbounds %Array_Function_, ptr %82, i64 0, i32 2
  %83 = load i64, ptr %memberidx.i71, align 4
  %memberidx1.i72 = getelementptr inbounds %Array_Function_, ptr %82, i64 0, i32 3
  %84 = load i64, ptr %memberidx1.i72, align 4
  %.not.i73 = icmp slt i64 %83, %84
  br i1 %.not.i73, label %ifend26.Array_Function____sl__.exit_crit_edge, label %if.entry.i74

ifend26.Array_Function____sl__.exit_crit_edge:    ; preds = %ifend26
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_Function_, ptr %82, i64 0, i32 1
  %.pre118 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_Function____sl__.exit

if.entry.i74:                                     ; preds = %ifend26
  %85 = shl i64 %84, 1
  store i64 %85, ptr %memberidx1.i72, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_Function_, ptr %82, i64 0, i32 1
  %86 = load ptr, ptr %memberidx2.i.i, align 8
  %87 = shl i64 %84, 4
  %88 = tail call ptr @realloc(ptr %86, i64 %87)
  store ptr %88, ptr %memberidx2.i.i, align 8
  %.pre117 = load i64, ptr %memberidx.i71, align 4
  br label %Array_Function____sl__.exit

Array_Function____sl__.exit:                      ; preds = %ifend26.Array_Function____sl__.exit_crit_edge, %if.entry.i74
  %89 = phi ptr [ %.pre118, %ifend26.Array_Function____sl__.exit_crit_edge ], [ %88, %if.entry.i74 ]
  %90 = phi i64 [ %83, %ifend26.Array_Function____sl__.exit_crit_edge ], [ %.pre117, %if.entry.i74 ]
  %91 = add i64 %90, 1
  store i64 %91, ptr %memberidx.i71, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %89, i64 %90
  store ptr %3, ptr %ptridx.i, align 8
  %memberidx36 = getelementptr inbounds %Scope, ptr %81, i64 0, i32 3
  %92 = load ptr, ptr %memberidx36, align 8
  %93 = load ptr, ptr %92, align 8
  %94 = load ptr, ptr %93, align 8
  %95 = load ptr, ptr %memberidx4, align 8
  %96 = load ptr, ptr %3, align 8
  tail call void %94(ptr nonnull %92, ptr %95, ptr %96)
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_object_bin_assign(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 4
  %4 = load i64, ptr %memberidx, align 4
  %5 = tail call fastcc ptr @bin_op_to_op_overload_name(i64 %4)
  %6 = load ptr, ptr %0, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 3
  br label %tailrecurse.i

tailrecurse.i:                                    ; preds = %tailrecurse.i, %3
  %.tr11.i.in = phi ptr [ %memberidx2, %3 ], [ %memberidx1.i61, %tailrecurse.i ]
  %.tr11.i = load ptr, ptr %.tr11.i.in, align 8
  %7 = load i64, ptr %.tr11.i, align 4
  %switch = icmp eq i64 %7, 20
  %memberidx1.i61 = getelementptr inbounds %GenericType, ptr %.tr11.i, i64 0, i32 3
  br i1 %switch, label %tailrecurse.i, label %if.entry3.i

if.entry3.i:                                      ; preds = %tailrecurse.i
  %memberidx6.i63 = getelementptr inbounds %ObjectType, ptr %.tr11.i, i64 0, i32 1
  %8 = load ptr, ptr %memberidx6.i63, align 8
  %memberidx.i.i64 = getelementptr inbounds %Program, ptr %6, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i64, align 8
  %10 = load i64, ptr %8, align 4
  %memberidx.i.i.i65 = getelementptr inbounds %Array_Module_, ptr %9, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i.i.i65, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %11, i64 %10
  %12 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i66 = getelementptr inbounds %Module, ptr %12, i64 0, i32 4
  %13 = load ptr, ptr %memberidx2.i.i66, align 8
  %memberidx3.i.i = getelementptr inbounds %TypeId, ptr %8, i64 0, i32 2
  %14 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %13, i64 0, i32 1
  %15 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %15, i64 %14
  %16 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx3 = getelementptr inbounds %Class, ptr %16, i64 0, i32 6
  %17 = load ptr, ptr %memberidx3, align 8
  %18 = load ptr, ptr %17, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %18, i64 0, i32 1
  %19 = load ptr, ptr %memberidx4, align 8
  %20 = tail call ptr %19(ptr nonnull %17, ptr %5)
  %21 = icmp eq ptr %20, null
  br i1 %21, label %common.ret, label %ifend

common.ret:                                       ; preds = %get_class_prop_type.exit, %if.entry3.i, %ifend14, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ %83, %ifend14 ], [ null, %if.entry3.i ], [ null, %get_class_prop_type.exit ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %if.entry3.i
  %22 = load ptr, ptr %0, align 8
  %memberidx.i.i = getelementptr inbounds %PropId, ptr %20, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i.i, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %22, i64 0, i32 1
  %24 = load ptr, ptr %memberidx.i.i.i, align 8
  %25 = load i64, ptr %23, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %24, i64 0, i32 1
  %26 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %26, i64 %25
  %27 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %27, i64 0, i32 4
  %28 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %23, i64 0, i32 2
  %29 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %28, i64 0, i32 1
  %30 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %30, i64 %29
  %31 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %32 = load i64, ptr %20, align 4
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %ifend
  %memberidx1.i = getelementptr inbounds %Class, ptr %31, i64 0, i32 5
  %34 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %PropId, ptr %20, i64 0, i32 2
  %35 = load i64, ptr %memberidx2.i, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %34, i64 0, i32 1
  %36 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %36, i64 %35
  %37 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %37, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %ifend
  %memberidx4.i = getelementptr inbounds %Class, ptr %31, i64 0, i32 4
  %38 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %20, i64 0, i32 2
  %39 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %38, i64 0, i32 1
  %40 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %40, i64 %39
  %41 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %41, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i = load ptr, ptr %common.ret.op.in.i, align 8
  %memberidx6 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i, i64 0, i32 1
  %42 = load ptr, ptr %memberidx6, align 8
  %memberidx.i = getelementptr inbounds %Array_Type_, ptr %42, i64 0, i32 1
  %43 = load ptr, ptr %memberidx.i, align 8
  %44 = load ptr, ptr %43, align 8
  %memberidx7 = getelementptr inbounds %BinaryExpressionNode, ptr %2, i64 0, i32 5
  %45 = load ptr, ptr %memberidx7, align 8
  %46 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %44, ptr %45)
  %memberidx.i35 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %47 = load ptr, ptr %memberidx.i35, align 8
  %memberidx1.i36 = getelementptr inbounds %Compiler, ptr %47, i64 0, i32 6
  %48 = load ptr, ptr %memberidx1.i36, align 8
  %memberidx2.i37 = getelementptr inbounds %Array_FloError_, ptr %48, i64 0, i32 2
  %49 = load i64, ptr %memberidx2.i37, align 4
  %50 = icmp sgt i64 %49, 0
  br i1 %50, label %common.ret, label %ifend10

ifend10:                                          ; preds = %get_class_prop_type.exit
  %memberidx11 = getelementptr inbounds %Expression, ptr %46, i64 0, i32 3
  %51 = load ptr, ptr %memberidx11, align 8
  %52 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %44, ptr %51)
  br i1 %52, label %ifend14, label %if.entry12

if.entry12:                                       ; preds = %ifend10
  %53 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %44)
  %54 = load ptr, ptr %53, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %54, i64 0, i32 5
  %55 = load ptr, ptr %memberidx15, align 8
  %56 = tail call ptr %55(ptr nonnull %53)
  %57 = load ptr, ptr %memberidx11, align 8
  %58 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %57)
  %59 = load ptr, ptr %58, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %59, i64 0, i32 5
  %60 = load ptr, ptr %memberidx17, align 8
  %61 = tail call ptr %60(ptr nonnull %58)
  %62 = alloca ptr, align 8
  %63 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %62, ptr nonnull @214, ptr %56, ptr %61)
  %64 = load ptr, ptr %62, align 8
  %65 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %65, align 8
  %memberidx.i38 = getelementptr inbounds %string, ptr %65, i64 0, i32 1
  store ptr %64, ptr %memberidx.i38, align 8
  %memberidx1.i39 = getelementptr inbounds %string, ptr %65, i64 0, i32 2
  store i64 %63, ptr %memberidx1.i39, align 4
  %memberidx2.i40 = getelementptr inbounds %string, ptr %65, i64 0, i32 3
  store i64 %63, ptr %memberidx2.i40, align 4
  tail call void @free(ptr %56)
  tail call void @free(ptr %61)
  %66 = load ptr, ptr %memberidx7, align 8
  %67 = load ptr, ptr %66, align 8
  %68 = load ptr, ptr %memberidx.i35, align 8
  %memberidx1.i42 = getelementptr inbounds %Compiler, ptr %68, i64 0, i32 6
  %69 = load ptr, ptr %memberidx1.i42, align 8
  %70 = call ptr @malloc(i32 24)
  store i64 5, ptr %70, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %70, i64 0, i32 2
  store ptr %67, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %70, i64 0, i32 1
  store ptr %65, ptr %memberidx2.i.i, align 8
  %memberidx.i.i43 = getelementptr inbounds %Array_FloError_, ptr %69, i64 0, i32 2
  %71 = load i64, ptr %memberidx.i.i43, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %69, i64 0, i32 3
  %72 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %71, %72
  br i1 %.not.i.i, label %if.entry12.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry12.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry12
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %69, i64 0, i32 1
  %.pre67 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry12
  %73 = shl i64 %72, 1
  store i64 %73, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i45 = getelementptr inbounds %Array_FloError_, ptr %69, i64 0, i32 1
  %74 = load ptr, ptr %memberidx2.i.i.i45, align 8
  %75 = shl i64 %72, 4
  %76 = call ptr @realloc(ptr %74, i64 %75)
  store ptr %76, ptr %memberidx2.i.i.i45, align 8
  %.pre = load i64, ptr %memberidx.i.i43, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry12.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %77 = phi ptr [ %.pre67, %if.entry12.TypeChecker_error.exit_crit_edge ], [ %76, %if.entry.i.i ]
  %78 = phi i64 [ %71, %if.entry12.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %79 = add i64 %78, 1
  store i64 %79, ptr %memberidx.i.i43, align 4
  %ptridx.i.i46 = getelementptr inbounds ptr, ptr %77, i64 %78
  store ptr %70, ptr %ptridx.i.i46, align 8
  br label %common.ret

ifend14:                                          ; preds = %ifend10
  %80 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %80, align 4
  %memberidx.i.i47 = getelementptr inbounds %Expression, ptr %80, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i47, align 4
  %memberidx1.i.i48 = getelementptr inbounds %Expression, ptr %80, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i48, align 1
  %memberidx.i49 = getelementptr inbounds %MemberExpression, ptr %80, i64 0, i32 4
  store ptr %1, ptr %memberidx.i49, align 8
  %memberidx1.i50 = getelementptr inbounds %MemberExpression, ptr %80, i64 0, i32 5
  store ptr %20, ptr %memberidx1.i50, align 8
  %memberidx2.i51 = getelementptr inbounds %Expression, ptr %80, i64 0, i32 3
  store ptr %common.ret.op.i, ptr %memberidx2.i51, align 8
  %81 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %81, align 8
  %memberidx.i52 = getelementptr inbounds %Array_Expression_, ptr %81, i64 0, i32 2
  store i64 0, ptr %memberidx.i52, align 4
  %memberidx1.i53 = getelementptr inbounds %Array_Expression_, ptr %81, i64 0, i32 3
  store i64 8, ptr %memberidx1.i53, align 4
  %memberidx2.i54 = getelementptr inbounds %Array_Expression_, ptr %81, i64 0, i32 1
  %82 = tail call ptr @malloc(i32 64)
  store ptr %82, ptr %memberidx2.i54, align 8
  store ptr %46, ptr %82, align 8
  store i64 1, ptr %memberidx.i52, align 4
  %83 = tail call ptr @malloc(i32 41)
  %memberidx22 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i, i64 0, i32 2
  %84 = load ptr, ptr %memberidx22, align 8
  store i64 8, ptr %83, align 4
  %memberidx.i.i55 = getelementptr inbounds %Expression, ptr %83, i64 0, i32 2
  store i64 14, ptr %memberidx.i.i55, align 4
  %memberidx1.i.i56 = getelementptr inbounds %Expression, ptr %83, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i56, align 1
  %memberidx.i57 = getelementptr inbounds %CallExpression, ptr %83, i64 0, i32 4
  store ptr %80, ptr %memberidx.i57, align 8
  %memberidx1.i58 = getelementptr inbounds %CallExpression, ptr %83, i64 0, i32 5
  store ptr %81, ptr %memberidx1.i58, align 8
  %memberidx2.i59 = getelementptr inbounds %Expression, ptr %83, i64 0, i32 3
  store ptr %84, ptr %memberidx2.i59, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_object_index_expr(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %4 = load ptr, ptr %0, align 8
  %memberidx1 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 3
  br label %tailrecurse.i

tailrecurse.i:                                    ; preds = %if.entry.i85, %3
  %.tr11.i.in = phi ptr [ %memberidx1, %3 ], [ %memberidx1.i84, %if.entry.i85 ]
  %.tr11.i = load ptr, ptr %.tr11.i.in, align 8
  %5 = load i64, ptr %.tr11.i, align 4
  switch i64 %5, label %get_class_from_type.exit [
    i64 20, label %if.entry.i85
    i64 13, label %if.entry3.i
  ]

if.entry.i85:                                     ; preds = %tailrecurse.i
  %memberidx1.i84 = getelementptr inbounds %GenericType, ptr %.tr11.i, i64 0, i32 3
  br label %tailrecurse.i

if.entry3.i:                                      ; preds = %tailrecurse.i
  %memberidx6.i86 = getelementptr inbounds %ObjectType, ptr %.tr11.i, i64 0, i32 1
  %6 = load ptr, ptr %memberidx6.i86, align 8
  %memberidx.i.i87 = getelementptr inbounds %Program, ptr %4, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i.i87, align 8
  %8 = load i64, ptr %6, align 4
  %memberidx.i.i.i88 = getelementptr inbounds %Array_Module_, ptr %7, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i.i88, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %9, i64 %8
  %10 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i89 = getelementptr inbounds %Module, ptr %10, i64 0, i32 4
  %11 = load ptr, ptr %memberidx2.i.i89, align 8
  %memberidx3.i.i = getelementptr inbounds %TypeId, ptr %6, i64 0, i32 2
  %12 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i6.i.i, align 8
  br label %get_class_from_type.exit

get_class_from_type.exit:                         ; preds = %tailrecurse.i, %if.entry3.i
  %common.ret.op.i83 = phi ptr [ %14, %if.entry3.i ], [ null, %tailrecurse.i ]
  %memberidx2 = getelementptr inbounds %Class, ptr %common.ret.op.i83, i64 0, i32 6
  %15 = load ptr, ptr %memberidx2, align 8
  %16 = load ptr, ptr %15, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %16, i64 0, i32 1
  %17 = load ptr, ptr %memberidx3, align 8
  %18 = tail call ptr @malloc(i32 88)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %18, ptr noundef nonnull align 8 dereferenceable(11) @166, i64 11, i1 false)
  %19 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %19, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %19, i64 0, i32 1
  store ptr %18, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %19, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %19, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i, align 4
  %20 = tail call ptr %17(ptr nonnull %15, ptr nonnull %19)
  %21 = icmp eq ptr %20, null
  br i1 %21, label %if.entry, label %ifend

common.ret:                                       ; preds = %get_class_prop_type.exit, %ifend16, %TypeChecker_error.exit69, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit69 ], [ %102, %ifend16 ], [ null, %get_class_prop_type.exit ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %get_class_from_type.exit
  %memberidx4 = getelementptr inbounds %Class, ptr %common.ret.op.i83, i64 0, i32 1
  %22 = load ptr, ptr %memberidx4, align 8
  %23 = load ptr, ptr %22, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %23, i64 0, i32 5
  %24 = load ptr, ptr %memberidx5, align 8
  %25 = tail call ptr %24(ptr nonnull %22)
  %26 = alloca ptr, align 8
  %27 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %26, ptr nonnull @246, ptr %25)
  %28 = load ptr, ptr %26, align 8
  %29 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %29, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %29, i64 0, i32 1
  store ptr %28, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %29, i64 0, i32 2
  store i64 %27, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %29, i64 0, i32 3
  store i64 %27, ptr %memberidx2.i, align 4
  tail call void @free(ptr %25)
  %30 = load ptr, ptr %2, align 8
  %memberidx.i39 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %31 = load ptr, ptr %memberidx.i39, align 8
  %memberidx1.i40 = getelementptr inbounds %Compiler, ptr %31, i64 0, i32 6
  %32 = load ptr, ptr %memberidx1.i40, align 8
  %33 = call ptr @malloc(i32 24)
  store i64 4, ptr %33, align 4
  %memberidx1.i.i41 = getelementptr inbounds %FloError, ptr %33, i64 0, i32 2
  store ptr %30, ptr %memberidx1.i.i41, align 8
  %memberidx2.i.i42 = getelementptr inbounds %FloError, ptr %33, i64 0, i32 1
  store ptr %29, ptr %memberidx2.i.i42, align 8
  %memberidx.i.i43 = getelementptr inbounds %Array_FloError_, ptr %32, i64 0, i32 2
  %34 = load i64, ptr %memberidx.i.i43, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %32, i64 0, i32 3
  %35 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %34, %35
  br i1 %.not.i.i, label %if.entry.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry.TypeChecker_error.exit_crit_edge:        ; preds = %if.entry
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %32, i64 0, i32 1
  %.pre94 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry
  %36 = shl i64 %35, 1
  store i64 %36, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %32, i64 0, i32 1
  %37 = load ptr, ptr %memberidx2.i.i.i, align 8
  %38 = shl i64 %35, 4
  %39 = call ptr @realloc(ptr %37, i64 %38)
  store ptr %39, ptr %memberidx2.i.i.i, align 8
  %.pre93 = load i64, ptr %memberidx.i.i43, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %40 = phi ptr [ %.pre94, %if.entry.TypeChecker_error.exit_crit_edge ], [ %39, %if.entry.i.i ]
  %41 = phi i64 [ %34, %if.entry.TypeChecker_error.exit_crit_edge ], [ %.pre93, %if.entry.i.i ]
  %42 = add i64 %41, 1
  store i64 %42, ptr %memberidx.i.i43, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %40, i64 %41
  store ptr %33, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend:                                            ; preds = %get_class_from_type.exit
  %43 = load ptr, ptr %0, align 8
  %memberidx.i.i44 = getelementptr inbounds %PropId, ptr %20, i64 0, i32 1
  %44 = load ptr, ptr %memberidx.i.i44, align 8
  %memberidx.i.i.i45 = getelementptr inbounds %Program, ptr %43, i64 0, i32 1
  %45 = load ptr, ptr %memberidx.i.i.i45, align 8
  %46 = load i64, ptr %44, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %45, i64 0, i32 1
  %47 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %47, i64 %46
  %48 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i46 = getelementptr inbounds %Module, ptr %48, i64 0, i32 4
  %49 = load ptr, ptr %memberidx2.i.i.i46, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %44, i64 0, i32 2
  %50 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %49, i64 0, i32 1
  %51 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %51, i64 %50
  %52 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %53 = load i64, ptr %20, align 4
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %ifend
  %memberidx1.i47 = getelementptr inbounds %Class, ptr %52, i64 0, i32 5
  %55 = load ptr, ptr %memberidx1.i47, align 8
  %memberidx2.i48 = getelementptr inbounds %PropId, ptr %20, i64 0, i32 2
  %56 = load i64, ptr %memberidx2.i48, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %55, i64 0, i32 1
  %57 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %57, i64 %56
  %58 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %58, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %ifend
  %memberidx4.i = getelementptr inbounds %Class, ptr %52, i64 0, i32 4
  %59 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %20, i64 0, i32 2
  %60 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %59, i64 0, i32 1
  %61 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i49 = getelementptr inbounds ptr, ptr %61, i64 %60
  %62 = load ptr, ptr %ptridx.i.i49, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %62, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i = load ptr, ptr %common.ret.op.in.i, align 8
  %memberidx8 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i, i64 0, i32 1
  %63 = load ptr, ptr %memberidx8, align 8
  %memberidx.i50 = getelementptr inbounds %Array_Type_, ptr %63, i64 0, i32 1
  %64 = load ptr, ptr %memberidx.i50, align 8
  %65 = load ptr, ptr %64, align 8
  %memberidx9 = getelementptr inbounds %ExpressionIndexNode, ptr %2, i64 0, i32 4
  %66 = load ptr, ptr %memberidx9, align 8
  %67 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %65, ptr %66)
  %memberidx.i51 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %68 = load ptr, ptr %memberidx.i51, align 8
  %memberidx1.i52 = getelementptr inbounds %Compiler, ptr %68, i64 0, i32 6
  %69 = load ptr, ptr %memberidx1.i52, align 8
  %memberidx2.i53 = getelementptr inbounds %Array_FloError_, ptr %69, i64 0, i32 2
  %70 = load i64, ptr %memberidx2.i53, align 4
  %71 = icmp sgt i64 %70, 0
  br i1 %71, label %common.ret, label %ifend12

ifend12:                                          ; preds = %get_class_prop_type.exit
  %memberidx13 = getelementptr inbounds %Expression, ptr %67, i64 0, i32 3
  %72 = load ptr, ptr %memberidx13, align 8
  %73 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %65, ptr %72)
  br i1 %73, label %ifend16, label %if.entry14

if.entry14:                                       ; preds = %ifend12
  %74 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %65)
  %75 = load ptr, ptr %74, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %75, i64 0, i32 5
  %76 = load ptr, ptr %memberidx17, align 8
  %77 = tail call ptr %76(ptr nonnull %74)
  %78 = load ptr, ptr %memberidx13, align 8
  %79 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %78)
  %80 = load ptr, ptr %79, align 8
  %memberidx19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %80, i64 0, i32 5
  %81 = load ptr, ptr %memberidx19, align 8
  %82 = tail call ptr %81(ptr nonnull %79)
  %83 = alloca ptr, align 8
  %84 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %83, ptr nonnull @214, ptr %77, ptr %82)
  %85 = load ptr, ptr %83, align 8
  %86 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %86, align 8
  %memberidx.i54 = getelementptr inbounds %string, ptr %86, i64 0, i32 1
  store ptr %85, ptr %memberidx.i54, align 8
  %memberidx1.i55 = getelementptr inbounds %string, ptr %86, i64 0, i32 2
  store i64 %84, ptr %memberidx1.i55, align 4
  %memberidx2.i56 = getelementptr inbounds %string, ptr %86, i64 0, i32 3
  store i64 %84, ptr %memberidx2.i56, align 4
  tail call void @free(ptr %77)
  tail call void @free(ptr %82)
  %87 = load ptr, ptr %memberidx9, align 8
  %88 = load ptr, ptr %87, align 8
  %89 = load ptr, ptr %memberidx.i51, align 8
  %memberidx1.i58 = getelementptr inbounds %Compiler, ptr %89, i64 0, i32 6
  %90 = load ptr, ptr %memberidx1.i58, align 8
  %91 = call ptr @malloc(i32 24)
  store i64 5, ptr %91, align 4
  %memberidx1.i.i59 = getelementptr inbounds %FloError, ptr %91, i64 0, i32 2
  store ptr %88, ptr %memberidx1.i.i59, align 8
  %memberidx2.i.i60 = getelementptr inbounds %FloError, ptr %91, i64 0, i32 1
  store ptr %86, ptr %memberidx2.i.i60, align 8
  %memberidx.i.i61 = getelementptr inbounds %Array_FloError_, ptr %90, i64 0, i32 2
  %92 = load i64, ptr %memberidx.i.i61, align 4
  %memberidx1.i2.i62 = getelementptr inbounds %Array_FloError_, ptr %90, i64 0, i32 3
  %93 = load i64, ptr %memberidx1.i2.i62, align 4
  %.not.i.i63 = icmp slt i64 %92, %93
  br i1 %.not.i.i63, label %if.entry14.TypeChecker_error.exit69_crit_edge, label %if.entry.i.i66

if.entry14.TypeChecker_error.exit69_crit_edge:    ; preds = %if.entry14
  %memberidx4.i.i67.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %90, i64 0, i32 1
  %.pre92 = load ptr, ptr %memberidx4.i.i67.phi.trans.insert, align 8
  br label %TypeChecker_error.exit69

if.entry.i.i66:                                   ; preds = %if.entry14
  %94 = shl i64 %93, 1
  store i64 %94, ptr %memberidx1.i2.i62, align 4
  %memberidx2.i.i.i65 = getelementptr inbounds %Array_FloError_, ptr %90, i64 0, i32 1
  %95 = load ptr, ptr %memberidx2.i.i.i65, align 8
  %96 = shl i64 %93, 4
  %97 = call ptr @realloc(ptr %95, i64 %96)
  store ptr %97, ptr %memberidx2.i.i.i65, align 8
  %.pre = load i64, ptr %memberidx.i.i61, align 4
  br label %TypeChecker_error.exit69

TypeChecker_error.exit69:                         ; preds = %if.entry14.TypeChecker_error.exit69_crit_edge, %if.entry.i.i66
  %98 = phi ptr [ %.pre92, %if.entry14.TypeChecker_error.exit69_crit_edge ], [ %97, %if.entry.i.i66 ]
  %99 = phi i64 [ %92, %if.entry14.TypeChecker_error.exit69_crit_edge ], [ %.pre, %if.entry.i.i66 ]
  %100 = add i64 %99, 1
  store i64 %100, ptr %memberidx.i.i61, align 4
  %ptridx.i.i68 = getelementptr inbounds ptr, ptr %98, i64 %99
  store ptr %91, ptr %ptridx.i.i68, align 8
  br label %common.ret

ifend16:                                          ; preds = %ifend12
  %101 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %101, align 4
  %memberidx.i.i70 = getelementptr inbounds %Expression, ptr %101, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i70, align 4
  %memberidx1.i.i71 = getelementptr inbounds %Expression, ptr %101, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i71, align 1
  %memberidx.i72 = getelementptr inbounds %MemberExpression, ptr %101, i64 0, i32 4
  store ptr %1, ptr %memberidx.i72, align 8
  %memberidx1.i73 = getelementptr inbounds %MemberExpression, ptr %101, i64 0, i32 5
  store ptr %20, ptr %memberidx1.i73, align 8
  %memberidx2.i74 = getelementptr inbounds %Expression, ptr %101, i64 0, i32 3
  store ptr %common.ret.op.i, ptr %memberidx2.i74, align 8
  %102 = tail call ptr @malloc(i32 41)
  %103 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %103, align 8
  %memberidx.i75 = getelementptr inbounds %Array_Expression_, ptr %103, i64 0, i32 2
  store i64 0, ptr %memberidx.i75, align 4
  %memberidx1.i76 = getelementptr inbounds %Array_Expression_, ptr %103, i64 0, i32 3
  store i64 8, ptr %memberidx1.i76, align 4
  %memberidx2.i77 = getelementptr inbounds %Array_Expression_, ptr %103, i64 0, i32 1
  %104 = tail call ptr @malloc(i32 64)
  store ptr %104, ptr %memberidx2.i77, align 8
  store ptr %67, ptr %104, align 8
  store i64 1, ptr %memberidx.i75, align 4
  %memberidx24 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i, i64 0, i32 2
  %105 = load ptr, ptr %memberidx24, align 8
  store i64 8, ptr %102, align 4
  %memberidx.i.i78 = getelementptr inbounds %Expression, ptr %102, i64 0, i32 2
  store i64 14, ptr %memberidx.i.i78, align 4
  %memberidx1.i.i79 = getelementptr inbounds %Expression, ptr %102, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i79, align 1
  %memberidx.i80 = getelementptr inbounds %CallExpression, ptr %102, i64 0, i32 4
  store ptr %101, ptr %memberidx.i80, align 8
  %memberidx1.i81 = getelementptr inbounds %CallExpression, ptr %102, i64 0, i32 5
  store ptr %103, ptr %memberidx1.i81, align 8
  %memberidx2.i82 = getelementptr inbounds %Expression, ptr %102, i64 0, i32 3
  store ptr %105, ptr %memberidx2.i82, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_index_expr(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %3, align 4
  %memberidx = getelementptr inbounds %ExpressionIndexNode, ptr %1, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %3, ptr %4)
  %memberidx1 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 3
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = load i64, ptr %6, align 4
  %8 = icmp eq i64 %7, 20
  br i1 %8, label %if.entry.i, label %is_object.exit

if.entry.i:                                       ; preds = %2, %if.entry.i
  %.tr5.i = phi ptr [ %9, %if.entry.i ], [ %6, %2 ]
  %memberidx1.i1 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %9 = load ptr, ptr %memberidx1.i1, align 8
  %10 = load i64, ptr %9, align 4
  %11 = icmp eq i64 %10, 20
  br i1 %11, label %if.entry.i, label %is_object.exit

is_object.exit:                                   ; preds = %if.entry.i, %2
  %.lcssa.i = phi i64 [ %7, %2 ], [ %10, %if.entry.i ]
  %12 = icmp eq i64 %.lcssa.i, 13
  br i1 %12, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %TypeChecker_error.exit63, %ifend16, %TypeChecker_error.exit, %if.entry
  %common.ret.op = phi ptr [ %13, %if.entry ], [ null, %TypeChecker_error.exit ], [ %44, %ifend16 ], [ null, %TypeChecker_error.exit63 ], [ null, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %is_object.exit
  %13 = tail call fastcc ptr @TypeChecker_check_object_index_expr(ptr %0, ptr %5, ptr %1)
  br label %common.ret

ifend:                                            ; preds = %is_object.exit
  %14 = tail call ptr @malloc(i32 8)
  store i64 7, ptr %14, align 4
  %memberidx2 = getelementptr inbounds %ExpressionIndexNode, ptr %1, i64 0, i32 4
  %15 = load ptr, ptr %memberidx2, align 8
  %16 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %14, ptr %15)
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %17 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %17, i64 0, i32 6
  %18 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx2.i, align 4
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %common.ret, label %ifend5

ifend5:                                           ; preds = %ifend
  %memberidx6 = getelementptr inbounds %Expression, ptr %16, i64 0, i32 3
  %21 = load ptr, ptr %memberidx6, align 8
  %22 = load i64, ptr %21, align 4
  %23 = add i64 %22, -1
  %24 = icmp ult i64 %23, 7
  br i1 %24, label %ifend9, label %if.entry7

if.entry7:                                        ; preds = %ifend5
  %25 = tail call ptr @malloc(i32 272)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(34) %25, ptr noundef nonnull align 8 dereferenceable(34) @247, i64 34, i1 false)
  %26 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %26, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %26, i64 0, i32 1
  store ptr %25, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %26, i64 0, i32 2
  store i64 34, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %26, i64 0, i32 3
  store i64 34, ptr %memberidx2.i.i, align 4
  %27 = load ptr, ptr %memberidx2, align 8
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i39 = getelementptr inbounds %Compiler, ptr %29, i64 0, i32 6
  %30 = load ptr, ptr %memberidx1.i39, align 8
  %31 = tail call ptr @malloc(i32 24)
  store i64 5, ptr %31, align 4
  %memberidx1.i.i40 = getelementptr inbounds %FloError, ptr %31, i64 0, i32 2
  store ptr %28, ptr %memberidx1.i.i40, align 8
  %memberidx2.i.i41 = getelementptr inbounds %FloError, ptr %31, i64 0, i32 1
  store ptr %26, ptr %memberidx2.i.i41, align 8
  %memberidx.i.i42 = getelementptr inbounds %Array_FloError_, ptr %30, i64 0, i32 2
  %32 = load i64, ptr %memberidx.i.i42, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %30, i64 0, i32 3
  %33 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %32, %33
  br i1 %.not.i.i, label %if.entry7.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry7.TypeChecker_error.exit_crit_edge:       ; preds = %if.entry7
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %30, i64 0, i32 1
  %.pre2 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry7
  %34 = shl i64 %33, 1
  store i64 %34, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %30, i64 0, i32 1
  %35 = load ptr, ptr %memberidx2.i.i.i, align 8
  %36 = shl i64 %33, 4
  %37 = tail call ptr @realloc(ptr %35, i64 %36)
  store ptr %37, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i42, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry7.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %38 = phi ptr [ %.pre2, %if.entry7.TypeChecker_error.exit_crit_edge ], [ %37, %if.entry.i.i ]
  %39 = phi i64 [ %32, %if.entry7.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %40 = add i64 %39, 1
  store i64 %40, ptr %memberidx.i.i42, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %38, i64 %39
  store ptr %31, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend9:                                           ; preds = %ifend5
  %41 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %41, align 4
  %42 = load ptr, ptr %memberidx1, align 8
  %43 = load i64, ptr %42, align 4
  switch i64 %43, label %else20 [
    i64 15, label %if.entry14
    i64 16, label %if.entry19
  ]

if.entry14:                                       ; preds = %ifend9
  %memberidx17 = getelementptr inbounds %PointerType, ptr %42, i64 0, i32 1
  br label %ifend16

ifend16:                                          ; preds = %if.entry19, %if.entry14
  %storemerge.in = phi ptr [ %memberidx22, %if.entry19 ], [ %memberidx17, %if.entry14 ]
  %storemerge = load ptr, ptr %storemerge.in, align 8
  %44 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %44, align 4
  %memberidx.i.i43 = getelementptr inbounds %Expression, ptr %44, i64 0, i32 2
  store i64 13, ptr %memberidx.i.i43, align 4
  %memberidx1.i.i44 = getelementptr inbounds %Expression, ptr %44, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i44, align 1
  %memberidx.i45 = getelementptr inbounds %IndexExpression, ptr %44, i64 0, i32 4
  store ptr %5, ptr %memberidx.i45, align 8
  %memberidx1.i46 = getelementptr inbounds %IndexExpression, ptr %44, i64 0, i32 5
  store ptr %16, ptr %memberidx1.i46, align 8
  %memberidx2.i47 = getelementptr inbounds %Expression, ptr %44, i64 0, i32 3
  store ptr %storemerge, ptr %memberidx2.i47, align 8
  br label %common.ret

if.entry19:                                       ; preds = %ifend9
  %memberidx22 = getelementptr inbounds %ArrayType, ptr %42, i64 0, i32 1
  br label %ifend16

else20:                                           ; preds = %ifend9
  %45 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr nonnull %42)
  %46 = load ptr, ptr %45, align 8
  %memberidx23 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i64 0, i32 5
  %47 = load ptr, ptr %memberidx23, align 8
  %48 = tail call ptr %47(ptr nonnull %45)
  %49 = alloca ptr, align 8
  %50 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %49, ptr nonnull @248, ptr %48)
  %51 = load ptr, ptr %49, align 8
  %52 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %52, align 8
  %memberidx.i48 = getelementptr inbounds %string, ptr %52, i64 0, i32 1
  store ptr %51, ptr %memberidx.i48, align 8
  %memberidx1.i49 = getelementptr inbounds %string, ptr %52, i64 0, i32 2
  store i64 %50, ptr %memberidx1.i49, align 4
  %memberidx2.i50 = getelementptr inbounds %string, ptr %52, i64 0, i32 3
  store i64 %50, ptr %memberidx2.i50, align 4
  tail call void @free(ptr %48)
  %53 = load ptr, ptr %1, align 8
  %54 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i52 = getelementptr inbounds %Compiler, ptr %54, i64 0, i32 6
  %55 = load ptr, ptr %memberidx1.i52, align 8
  %56 = call ptr @malloc(i32 24)
  store i64 5, ptr %56, align 4
  %memberidx1.i.i53 = getelementptr inbounds %FloError, ptr %56, i64 0, i32 2
  store ptr %53, ptr %memberidx1.i.i53, align 8
  %memberidx2.i.i54 = getelementptr inbounds %FloError, ptr %56, i64 0, i32 1
  store ptr %52, ptr %memberidx2.i.i54, align 8
  %memberidx.i.i55 = getelementptr inbounds %Array_FloError_, ptr %55, i64 0, i32 2
  %57 = load i64, ptr %memberidx.i.i55, align 4
  %memberidx1.i2.i56 = getelementptr inbounds %Array_FloError_, ptr %55, i64 0, i32 3
  %58 = load i64, ptr %memberidx1.i2.i56, align 4
  %.not.i.i57 = icmp slt i64 %57, %58
  br i1 %.not.i.i57, label %else20.TypeChecker_error.exit63_crit_edge, label %if.entry.i.i60

else20.TypeChecker_error.exit63_crit_edge:        ; preds = %else20
  %memberidx4.i.i61.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %55, i64 0, i32 1
  %.pre4 = load ptr, ptr %memberidx4.i.i61.phi.trans.insert, align 8
  br label %TypeChecker_error.exit63

if.entry.i.i60:                                   ; preds = %else20
  %59 = shl i64 %58, 1
  store i64 %59, ptr %memberidx1.i2.i56, align 4
  %memberidx2.i.i.i59 = getelementptr inbounds %Array_FloError_, ptr %55, i64 0, i32 1
  %60 = load ptr, ptr %memberidx2.i.i.i59, align 8
  %61 = shl i64 %58, 4
  %62 = call ptr @realloc(ptr %60, i64 %61)
  store ptr %62, ptr %memberidx2.i.i.i59, align 8
  %.pre3 = load i64, ptr %memberidx.i.i55, align 4
  br label %TypeChecker_error.exit63

TypeChecker_error.exit63:                         ; preds = %else20.TypeChecker_error.exit63_crit_edge, %if.entry.i.i60
  %63 = phi ptr [ %.pre4, %else20.TypeChecker_error.exit63_crit_edge ], [ %62, %if.entry.i.i60 ]
  %64 = phi i64 [ %57, %else20.TypeChecker_error.exit63_crit_edge ], [ %.pre3, %if.entry.i.i60 ]
  %65 = add i64 %64, 1
  store i64 %65, ptr %memberidx.i.i55, align 4
  %ptridx.i.i62 = getelementptr inbounds ptr, ptr %63, i64 %64
  store ptr %56, ptr %ptridx.i.i62, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_block(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %3 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %3, i64 0, i32 6
  %4 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %4, i64 0, i32 2
  %5 = load i64, ptr %memberidx2.i, align 4
  %6 = icmp sgt i64 %5, 0
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %2, %for.end
  %common.ret.op = phi ptr [ %7, %for.end ], [ null, %2 ], [ null, %for.body ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %2
  %7 = tail call ptr @malloc(i32 11)
  %8 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Statement_, ptr %8, align 8
  %memberidx.i.i = getelementptr inbounds %Array_Statement_, ptr %8, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Array_Statement_, ptr %8, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_Statement_, ptr %8, i64 0, i32 1
  %9 = tail call ptr @malloc(i32 64)
  store ptr %9, ptr %memberidx2.i.i, align 8
  store i64 0, ptr %memberidx.i.i, align 4
  store ptr %8, ptr %7, align 8
  %memberidx3.i = getelementptr inbounds %Block, ptr %7, i64 0, i32 1
  store i1 false, ptr %memberidx3.i, align 1
  %memberidx4.i = getelementptr inbounds %Block, ptr %7, i64 0, i32 2
  store i1 false, ptr %memberidx4.i, align 1
  %memberidx5.i = getelementptr inbounds %Block, ptr %7, i64 0, i32 3
  store i1 false, ptr %memberidx5.i, align 1
  %10 = tail call fastcc ptr @TypeChecker_create_scope(ptr nonnull %0)
  %memberidx.i49 = getelementptr inbounds %Scope, ptr %10, i64 0, i32 5
  %memberidx1.i50 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %11 = load ptr, ptr %memberidx1.i50, align 8
  store ptr %11, ptr %memberidx.i49, align 8
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %memberidx1.i50, align 8
  %memberidx2 = getelementptr inbounds %BlockNode, ptr %1, i64 0, i32 1
  %13 = load ptr, ptr %memberidx2, align 8
  %14 = tail call ptr @malloc(i32 33)
  %memberidx.i51 = getelementptr inbounds %Array_StatementNode_, ptr %13, i64 0, i32 1
  %15 = load ptr, ptr %memberidx.i51, align 8
  %memberidx1.i52 = getelementptr inbounds %Array_StatementNode_, ptr %13, i64 0, i32 2
  %16 = load i64, ptr %memberidx1.i52, align 4
  store ptr @VTableArrayIterator_StatementNode_, ptr %14, align 8
  %memberidx.i.i53 = getelementptr inbounds %Iterator_StatementNode_, ptr %14, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i53, align 1
  %memberidx1.i.i54 = getelementptr inbounds %ArrayIterator_StatementNode_, ptr %14, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i54, align 4
  %memberidx2.i.i55 = getelementptr inbounds %ArrayIterator_StatementNode_, ptr %14, i64 0, i32 4
  store ptr %15, ptr %memberidx2.i.i55, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_StatementNode_, ptr %14, i64 0, i32 3
  store i64 %16, ptr %memberidx3.i.i, align 4
  %17 = load ptr, ptr @VTableArrayIterator_StatementNode_, align 8
  %18 = tail call ptr %17(ptr nonnull %14)
  %19 = load i1, ptr %memberidx.i.i53, align 1
  br i1 %19, label %for.end, label %for.body

for.body:                                         ; preds = %ifend, %ifend38
  %storemerge66 = phi ptr [ %43, %ifend38 ], [ %18, %ifend ]
  %20 = tail call fastcc ptr @TypeChecker_check_statement(ptr nonnull %0, ptr %storemerge66)
  %21 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i57 = getelementptr inbounds %Compiler, ptr %21, i64 0, i32 6
  %22 = load ptr, ptr %memberidx1.i57, align 8
  %memberidx2.i58 = getelementptr inbounds %Array_FloError_, ptr %22, i64 0, i32 2
  %23 = load i64, ptr %memberidx2.i58, align 4
  %24 = icmp sgt i64 %23, 0
  br i1 %24, label %common.ret, label %ifend7

for.end.sink.split:                               ; preds = %if.entry19, %Array_Statement____sl__.exit, %if.entry31, %if.entry36
  %memberidx5.i.sink = phi ptr [ %memberidx5.i, %if.entry36 ], [ %memberidx4.i, %if.entry31 ], [ %memberidx3.i, %Array_Statement____sl__.exit ], [ %memberidx3.i, %if.entry19 ]
  store i1 true, ptr %memberidx5.i.sink, align 1
  br label %for.end

for.end:                                          ; preds = %ifend38, %for.end.sink.split, %ifend
  tail call void @free(ptr %14)
  %25 = load ptr, ptr %memberidx.i49, align 8
  store ptr %25, ptr %memberidx1.i50, align 8
  br label %common.ret

ifend7:                                           ; preds = %for.body
  %26 = load i64, ptr %memberidx.i.i, align 4
  %27 = load i64, ptr %memberidx1.i.i, align 4
  %.not.i = icmp slt i64 %26, %27
  br i1 %.not.i, label %ifend7.Array_Statement____sl__.exit_crit_edge, label %if.entry.i

ifend7.Array_Statement____sl__.exit_crit_edge:    ; preds = %ifend7
  %.pre67 = load ptr, ptr %memberidx2.i.i, align 8
  br label %Array_Statement____sl__.exit

if.entry.i:                                       ; preds = %ifend7
  %28 = shl i64 %27, 1
  store i64 %28, ptr %memberidx1.i.i, align 4
  %29 = load ptr, ptr %memberidx2.i.i, align 8
  %30 = shl i64 %27, 4
  %31 = tail call ptr @realloc(ptr %29, i64 %30)
  store ptr %31, ptr %memberidx2.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i, align 4
  br label %Array_Statement____sl__.exit

Array_Statement____sl__.exit:                     ; preds = %ifend7.Array_Statement____sl__.exit_crit_edge, %if.entry.i
  %32 = phi ptr [ %.pre67, %ifend7.Array_Statement____sl__.exit_crit_edge ], [ %31, %if.entry.i ]
  %33 = phi i64 [ %26, %ifend7.Array_Statement____sl__.exit_crit_edge ], [ %.pre, %if.entry.i ]
  %34 = add i64 %33, 1
  store i64 %34, ptr %memberidx.i.i, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %32, i64 %33
  store ptr %20, ptr %ptridx.i, align 8
  %35 = load i64, ptr %20, align 4
  switch i64 %35, label %ifend38 [
    i64 7, label %for.end.sink.split
    i64 0, label %if.entry15
    i64 5, label %if.entry31
    i64 6, label %if.entry36
  ]

if.entry15:                                       ; preds = %Array_Statement____sl__.exit
  %memberidx18 = getelementptr inbounds %IfStatement, ptr %20, i64 0, i32 3
  %36 = load ptr, ptr %memberidx18, align 8
  %.not = icmp eq ptr %36, null
  br i1 %.not, label %ifend38, label %if.entry19

if.entry19:                                       ; preds = %if.entry15
  %memberidx22 = getelementptr inbounds %IfStatement, ptr %20, i64 0, i32 2
  %37 = load ptr, ptr %memberidx22, align 8
  %memberidx23 = getelementptr inbounds %Block, ptr %37, i64 0, i32 1
  %38 = load i1, ptr %memberidx23, align 1
  %memberidx25 = getelementptr inbounds %Block, ptr %36, i64 0, i32 1
  %39 = load i1, ptr %memberidx25, align 1
  %40 = and i1 %38, %39
  br i1 %40, label %for.end.sink.split, label %ifend38

if.entry31:                                       ; preds = %Array_Statement____sl__.exit
  br label %for.end.sink.split

if.entry36:                                       ; preds = %Array_Statement____sl__.exit
  br label %for.end.sink.split

ifend38:                                          ; preds = %Array_Statement____sl__.exit, %if.entry15, %if.entry19
  %41 = load ptr, ptr %14, align 8
  %42 = load ptr, ptr %41, align 8
  %43 = tail call ptr %42(ptr nonnull %14)
  %44 = load i1, ptr %memberidx.i.i53, align 1
  br i1 %44, label %for.end, label %for.body
}

define internal void @Map_string_Generic__set(ptr %0, ptr %1, ptr %2) {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Map_string_Generic_, ptr %0, i64 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = sitofp i64 %5 to double
  %memberidx1 = getelementptr inbounds %Map_string_Generic_, ptr %0, i64 0, i32 3
  %7 = load i64, ptr %memberidx1, align 4
  %8 = sitofp i64 %7 to double
  %9 = fdiv double %6, %8
  %10 = fcmp ogt double %9, 7.500000e-01
  br i1 %10, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %11 = load ptr, ptr %0, align 8
  %memberidx.i36 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx.i36, align 8
  %13 = tail call ptr %12(ptr nonnull %0)
  %14 = load i64, ptr %memberidx1, align 4
  %15 = shl i64 %14, 1
  store i64 %15, ptr %memberidx1, align 4
  store i64 0, ptr %memberidx, align 4
  %memberidx4.i = getelementptr inbounds %Map_string_Generic_, ptr %0, i64 0, i32 1
  %16 = load ptr, ptr %memberidx4.i, align 8
  %17 = shl i64 %14, 4
  %18 = tail call ptr @realloc(ptr %16, i64 %17)
  store ptr %18, ptr %memberidx4.i, align 8
  %19 = load i64, ptr %memberidx1, align 4
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %for.body.i40, label %for.cond11.preheader.i

for.cond11.preheader.i:                           ; preds = %for.body.i40, %if.entry
  %memberidx15.i = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %13, i64 0, i32 2
  %21 = load i64, ptr %memberidx15.i, align 4
  %22 = icmp sgt i64 %21, 0
  br i1 %22, label %for.body12.lr.ph.i, label %ifend

for.body12.lr.ph.i:                               ; preds = %for.cond11.preheader.i
  %memberidx.i32.i = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %13, i64 0, i32 1
  br label %for.body12.i

for.body.i40:                                     ; preds = %if.entry, %for.body.i40
  %i.036.i = phi i64 [ %25, %for.body.i40 ], [ 0, %if.entry ]
  %23 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %23, i64 %i.036.i
  %24 = tail call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_Generic_, ptr %24, align 8
  %memberidx.i.i39 = getelementptr inbounds %Bucket_string_Generic_, ptr %24, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i39, align 1
  store ptr %24, ptr %ptridx.i, align 8
  %25 = add nuw nsw i64 %i.036.i, 1
  %26 = load i64, ptr %memberidx1, align 4
  %27 = icmp slt i64 %25, %26
  br i1 %27, label %for.body.i40, label %for.cond11.preheader.i

for.body12.i:                                     ; preds = %for.body12.i, %for.body12.lr.ph.i
  %storemerge35.i = phi i64 [ 0, %for.body12.lr.ph.i ], [ %34, %for.body12.i ]
  %28 = load ptr, ptr %0, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %memberidx.i32.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %30, i64 %storemerge35.i
  %31 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx17.i = getelementptr inbounds %Bucket_string_Generic_, ptr %31, i64 0, i32 1
  %32 = load ptr, ptr %memberidx17.i, align 8
  %memberidx18.i = getelementptr inbounds %Bucket_string_Generic_, ptr %31, i64 0, i32 2
  %33 = load ptr, ptr %memberidx18.i, align 8
  tail call void %29(ptr nonnull %0, ptr %32, ptr %33)
  %34 = add nuw nsw i64 %storemerge35.i, 1
  %35 = load i64, ptr %memberidx15.i, align 4
  %36 = icmp slt i64 %34, %35
  br i1 %36, label %for.body12.i, label %ifend

ifend:                                            ; preds = %for.body12.i, %for.cond11.preheader.i, %3
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %37 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %37, i64 0, i32 5
  %38 = load ptr, ptr %memberidx.i, align 8
  %39 = tail call ptr %38(ptr nonnull %1)
  %40 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %39)
  %41 = load ptr, ptr %4, align 8
  %42 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %42, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 1
  store ptr %41, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 2
  store i64 %40, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 3
  store i64 %40, ptr %memberidx2.i.i, align 4
  call void @free(ptr %39)
  %43 = load i64, ptr %memberidx1.i.i, align 4
  %44 = icmp sgt i64 %43, 0
  br i1 %44, label %for.body.i, label %Map_string_Generic__hash_fnc.exit

for.body.i:                                       ; preds = %ifend, %for.body.i
  %i.0.i42 = phi i64 [ %51, %for.body.i ], [ 0, %ifend ]
  %hash.0.i41 = phi i64 [ %50, %for.body.i ], [ 0, %ifend ]
  %45 = shl i64 %hash.0.i41, 1
  %46 = load ptr, ptr %42, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i64 0, i32 2
  %47 = load ptr, ptr %memberidx2.i, align 8
  %48 = call i8 %47(ptr nonnull %42, i64 %i.0.i42)
  %49 = sext i8 %48 to i64
  %50 = add i64 %45, %49
  %51 = add nuw nsw i64 %i.0.i42, 1
  %52 = load i64, ptr %memberidx1.i.i, align 4
  %53 = icmp slt i64 %51, %52
  br i1 %53, label %for.body.i, label %Map_string_Generic__hash_fnc.exit

Map_string_Generic__hash_fnc.exit:                ; preds = %for.body.i, %ifend
  %hash.0.i.lcssa = phi i64 [ 0, %ifend ], [ %50, %for.body.i ]
  %54 = call i64 @llvm.abs.i64(i64 %hash.0.i.lcssa, i1 false)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %55 = load i64, ptr %memberidx1, align 4
  %56 = srem i64 %54, %55
  %memberidx3 = getelementptr inbounds %Map_string_Generic_, ptr %0, i64 0, i32 1
  %57 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %57, i64 %56
  %58 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_Generic_, ptr %58, i64 0, i32 3
  %59 = load i1, ptr %memberidx4, align 1
  br i1 %59, label %while.end, label %while.entry.preheader

while.entry.preheader:                            ; preds = %Map_string_Generic__hash_fnc.exit
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend10
  %60 = phi ptr [ %57, %while.entry.preheader ], [ %78, %ifend10 ]
  %61 = phi i64 [ %55, %while.entry.preheader ], [ %79, %ifend10 ]
  %62 = phi ptr [ %58, %while.entry.preheader ], [ %82, %ifend10 ]
  %63 = phi i64 [ %56, %while.entry.preheader ], [ %81, %ifend10 ]
  %memberidx7 = getelementptr inbounds %Bucket_string_Generic_, ptr %62, i64 0, i32 1
  %64 = load ptr, ptr %memberidx7, align 8
  %memberidx.i33 = getelementptr inbounds %string, ptr %64, i64 0, i32 2
  %65 = load i64, ptr %memberidx.i33, align 4
  %66 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %65, %66
  br i1 %.not.i, label %ifend.i, label %ifend10

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i35 = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %67 = load ptr, ptr %memberidx2.i35, align 8
  %68 = load ptr, ptr %memberidx3.i, align 8
  %69 = call i64 @memcmp(ptr %67, ptr %68, i64 %65)
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %ifend.i.while.end.loopexit_crit_edge, label %ifend.i.ifend10_crit_edge

ifend.i.while.end.loopexit_crit_edge:             ; preds = %ifend.i
  %.pre44.pre = load ptr, ptr %memberidx3, align 8
  br label %while.end

ifend.i.ifend10_crit_edge:                        ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx1, align 4
  %.pre43 = load ptr, ptr %memberidx3, align 8
  br label %ifend10

while.end:                                        ; preds = %ifend10, %ifend.i.while.end.loopexit_crit_edge, %Map_string_Generic__hash_fnc.exit
  %71 = phi ptr [ %57, %Map_string_Generic__hash_fnc.exit ], [ %.pre44.pre, %ifend.i.while.end.loopexit_crit_edge ], [ %78, %ifend10 ]
  %72 = phi i64 [ %56, %Map_string_Generic__hash_fnc.exit ], [ %63, %ifend.i.while.end.loopexit_crit_edge ], [ %81, %ifend10 ]
  %73 = load i64, ptr %memberidx, align 4
  %74 = add i64 %73, 1
  store i64 %74, ptr %memberidx, align 4
  %ptridx18 = getelementptr inbounds ptr, ptr %71, i64 %72
  %75 = load ptr, ptr %ptridx18, align 8
  %76 = load ptr, ptr %75, align 8
  %77 = load ptr, ptr %76, align 8
  call void %77(ptr nonnull %75, ptr nonnull %1, ptr %2)
  ret void

ifend10:                                          ; preds = %ifend.i.ifend10_crit_edge, %while.entry
  %78 = phi ptr [ %.pre43, %ifend.i.ifend10_crit_edge ], [ %60, %while.entry ]
  %79 = phi i64 [ %.pre, %ifend.i.ifend10_crit_edge ], [ %61, %while.entry ]
  %80 = add i64 %63, 1
  %81 = srem i64 %80, %79
  %ptridx13 = getelementptr inbounds ptr, ptr %78, i64 %81
  %82 = load ptr, ptr %ptridx13, align 8
  %memberidx14 = getelementptr inbounds %Bucket_string_Generic_, ptr %82, i64 0, i32 3
  %83 = load i1, ptr %memberidx14, align 1
  br i1 %83, label %while.end, label %while.entry
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind willreturn writeonly
define internal void @Bucket_string_Generic__set(ptr nocapture writeonly %0, ptr %1, ptr %2) #8 {
  %memberidx = getelementptr inbounds %Bucket_string_Generic_, ptr %0, i64 0, i32 3
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %Bucket_string_Generic_, ptr %0, i64 0, i32 1
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_Generic_, ptr %0, i64 0, i32 2
  store ptr %2, ptr %memberidx2, align 8
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Bucket_string_Generic___find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal noalias ptr @Map_string_Generic__get_buckets(ptr nocapture readonly %0) {
for.entry:
  %1 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Bucket_string_Generic__, ptr %1, align 8
  %memberidx.i = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %1, i64 0, i32 2
  %memberidx1.i = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %1, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_Bucket_string_Generic__, ptr %1, i64 0, i32 1
  %2 = tail call ptr @malloc(i32 64)
  store ptr %2, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %memberidx2 = getelementptr inbounds %Map_string_Generic_, ptr %0, i64 0, i32 3
  %3 = load i64, ptr %memberidx2, align 4
  %4 = icmp sgt i64 %3, 0
  br i1 %4, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx3 = getelementptr inbounds %Map_string_Generic_, ptr %0, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %5 = phi i64 [ %3, %for.body.lr.ph ], [ %19, %ifend ]
  %6 = phi ptr [ %2, %for.body.lr.ph ], [ %20, %ifend ]
  %7 = phi ptr [ %2, %for.body.lr.ph ], [ %21, %ifend ]
  %8 = phi i64 [ 8, %for.body.lr.ph ], [ %22, %ifend ]
  %9 = phi i64 [ 0, %for.body.lr.ph ], [ %23, %ifend ]
  %i.011 = phi i64 [ 0, %for.body.lr.ph ], [ %24, %ifend ]
  %10 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %i.011
  %11 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_Generic_, ptr %11, i64 0, i32 3
  %12 = load i1, ptr %memberidx4, align 1
  br i1 %12, label %ifend, label %if.entry

for.end:                                          ; preds = %ifend, %for.entry
  ret ptr %1

if.entry:                                         ; preds = %for.body
  %.not.i = icmp slt i64 %9, %8
  br i1 %.not.i, label %Array_Bucket_string_Generic_____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %if.entry
  %13 = shl i64 %8, 1
  store i64 %13, ptr %memberidx1.i, align 4
  %14 = shl i64 %8, 4
  %15 = tail call ptr @realloc(ptr %7, i64 %14)
  store ptr %15, ptr %memberidx2.i, align 8
  br label %Array_Bucket_string_Generic_____sl__.exit

Array_Bucket_string_Generic_____sl__.exit:        ; preds = %if.entry, %if.entry.i
  %16 = phi ptr [ %6, %if.entry ], [ %15, %if.entry.i ]
  %17 = phi i64 [ %8, %if.entry ], [ %13, %if.entry.i ]
  %18 = add i64 %9, 1
  store i64 %18, ptr %memberidx.i, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %16, i64 %9
  store ptr %11, ptr %ptridx.i, align 8
  %.pre = load i64, ptr %memberidx2, align 4
  br label %ifend

ifend:                                            ; preds = %for.body, %Array_Bucket_string_Generic_____sl__.exit
  %19 = phi i64 [ %5, %for.body ], [ %.pre, %Array_Bucket_string_Generic_____sl__.exit ]
  %20 = phi ptr [ %6, %for.body ], [ %16, %Array_Bucket_string_Generic_____sl__.exit ]
  %21 = phi ptr [ %7, %for.body ], [ %16, %Array_Bucket_string_Generic_____sl__.exit ]
  %22 = phi i64 [ %8, %for.body ], [ %17, %Array_Bucket_string_Generic_____sl__.exit ]
  %23 = phi i64 [ %9, %for.body ], [ %18, %Array_Bucket_string_Generic_____sl__.exit ]
  %24 = add nuw nsw i64 %i.011, 1
  %25 = icmp slt i64 %24, %19
  br i1 %25, label %for.body, label %for.end
}

define internal ptr @Map_string_Generic__get(ptr nocapture readonly %0, ptr %1) {
  %3 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %4 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i64 0, i32 5
  %5 = load ptr, ptr %memberidx.i, align 8
  %6 = tail call ptr %5(ptr nonnull %1)
  %7 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @22, ptr %6)
  %8 = load ptr, ptr %3, align 8
  %9 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %9, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 1
  store ptr %8, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 2
  store i64 %7, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 3
  store i64 %7, ptr %memberidx2.i.i, align 4
  call void @free(ptr %6)
  %10 = load i64, ptr %memberidx1.i.i, align 4
  %11 = icmp sgt i64 %10, 0
  br i1 %11, label %for.body.i, label %Map_string_Generic__hash_fnc.exit

for.body.i:                                       ; preds = %2, %for.body.i
  %i.0.i36 = phi i64 [ %18, %for.body.i ], [ 0, %2 ]
  %hash.0.i35 = phi i64 [ %17, %for.body.i ], [ 0, %2 ]
  %12 = shl i64 %hash.0.i35, 1
  %13 = load ptr, ptr %9, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i64 0, i32 2
  %14 = load ptr, ptr %memberidx2.i, align 8
  %15 = call i8 %14(ptr nonnull %9, i64 %i.0.i36)
  %16 = sext i8 %15 to i64
  %17 = add i64 %12, %16
  %18 = add nuw nsw i64 %i.0.i36, 1
  %19 = load i64, ptr %memberidx1.i.i, align 4
  %20 = icmp slt i64 %18, %19
  br i1 %20, label %for.body.i, label %Map_string_Generic__hash_fnc.exit

Map_string_Generic__hash_fnc.exit:                ; preds = %for.body.i, %2
  %hash.0.i.lcssa = phi i64 [ 0, %2 ], [ %17, %for.body.i ]
  %21 = call i64 @llvm.abs.i64(i64 %hash.0.i.lcssa, i1 false)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %memberidx = getelementptr inbounds %Map_string_Generic_, ptr %0, i64 0, i32 3
  %22 = load i64, ptr %memberidx, align 4
  %23 = srem i64 %21, %22
  %memberidx1 = getelementptr inbounds %Map_string_Generic_, ptr %0, i64 0, i32 1
  %24 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %24, i64 %23
  %25 = load ptr, ptr %ptridx, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_Generic_, ptr %25, i64 0, i32 3
  %26 = load i1, ptr %memberidx2, align 1
  br i1 %26, label %common.ret, label %while.entry.preheader

while.entry.preheader:                            ; preds = %Map_string_Generic__hash_fnc.exit
  %memberidx1.i33 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %else
  %27 = phi ptr [ %37, %else ], [ %24, %while.entry.preheader ]
  %28 = phi i64 [ %38, %else ], [ %22, %while.entry.preheader ]
  %29 = phi ptr [ %41, %else ], [ %25, %while.entry.preheader ]
  %hash.0 = phi i64 [ %40, %else ], [ %23, %while.entry.preheader ]
  %memberidx5 = getelementptr inbounds %Bucket_string_Generic_, ptr %29, i64 0, i32 1
  %30 = load ptr, ptr %memberidx5, align 8
  %memberidx.i32 = getelementptr inbounds %string, ptr %30, i64 0, i32 2
  %31 = load i64, ptr %memberidx.i32, align 4
  %32 = load i64, ptr %memberidx1.i33, align 4
  %.not.i = icmp eq i64 %31, %32
  br i1 %.not.i, label %ifend.i, label %else

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i34 = getelementptr inbounds %string, ptr %30, i64 0, i32 1
  %33 = load ptr, ptr %memberidx2.i34, align 8
  %34 = load ptr, ptr %memberidx3.i, align 8
  %35 = call i64 @memcmp(ptr %33, ptr %34, i64 %31)
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %while.end, label %ifend.i.else_crit_edge

ifend.i.else_crit_edge:                           ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx, align 4
  %.pre37 = load ptr, ptr %memberidx1, align 8
  br label %else

while.end:                                        ; preds = %ifend.i
  %.pre38.pre = load ptr, ptr %memberidx1, align 8
  %ptridx11.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre38.pre, i64 %hash.0
  %.pre39.pre = load ptr, ptr %ptridx11.phi.trans.insert.phi.trans.insert, align 8
  %memberidx12.phi.trans.insert.phi.trans.insert = getelementptr inbounds %Bucket_string_Generic_, ptr %.pre39.pre, i64 0, i32 3
  %.pre40.pre = load i1, ptr %memberidx12.phi.trans.insert.phi.trans.insert, align 1
  br i1 %.pre40.pre, label %common.ret, label %if.entry13

else:                                             ; preds = %ifend.i.else_crit_edge, %while.entry
  %37 = phi ptr [ %.pre37, %ifend.i.else_crit_edge ], [ %27, %while.entry ]
  %38 = phi i64 [ %.pre, %ifend.i.else_crit_edge ], [ %28, %while.entry ]
  %39 = add i64 %hash.0, 1
  %40 = srem i64 %39, %38
  %ptridx8 = getelementptr inbounds ptr, ptr %37, i64 %40
  %41 = load ptr, ptr %ptridx8, align 8
  %memberidx9 = getelementptr inbounds %Bucket_string_Generic_, ptr %41, i64 0, i32 3
  %42 = load i1, ptr %memberidx9, align 1
  br i1 %42, label %common.ret, label %while.entry

common.ret:                                       ; preds = %else, %Map_string_Generic__hash_fnc.exit, %while.end, %if.entry13
  %common.ret.op = phi ptr [ %43, %if.entry13 ], [ null, %while.end ], [ null, %Map_string_Generic__hash_fnc.exit ], [ null, %else ]
  ret ptr %common.ret.op

if.entry13:                                       ; preds = %while.end
  %memberidx18 = getelementptr inbounds %Bucket_string_Generic_, ptr %.pre39.pre, i64 0, i32 2
  %43 = load ptr, ptr %memberidx18, align 8
  br label %common.ret
}

define internal fastcc void @TypeChecker_check_class_body(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = load ptr, ptr %1, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %3, i64 0, i32 2
  %4 = load ptr, ptr %memberidx1, align 8
  %5 = tail call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr %4)
  %6 = load i64, ptr %5, align 4
  %7 = icmp eq i64 %6, 21
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend57, %ifend13, %ifend10, %2, %TypeChecker_error.exit161, %for.end45, %TypeChecker_error.exit
  ret void

ifend:                                            ; preds = %2
  %8 = load ptr, ptr %0, align 8
  br label %tailrecurse.i

tailrecurse.i:                                    ; preds = %if.entry.i163, %ifend
  %9 = phi i64 [ %.pr, %if.entry.i163 ], [ %6, %ifend ]
  %.tr11.i = phi ptr [ %10, %if.entry.i163 ], [ %5, %ifend ]
  switch i64 %9, label %get_class_from_type.exit [
    i64 20, label %if.entry.i163
    i64 13, label %if.entry3.i
  ]

if.entry.i163:                                    ; preds = %tailrecurse.i
  %memberidx1.i162 = getelementptr inbounds %GenericType, ptr %.tr11.i, i64 0, i32 3
  %10 = load ptr, ptr %memberidx1.i162, align 8
  %.pr = load i64, ptr %10, align 4
  br label %tailrecurse.i

if.entry3.i:                                      ; preds = %tailrecurse.i
  %memberidx6.i = getelementptr inbounds %ObjectType, ptr %.tr11.i, i64 0, i32 1
  %11 = load ptr, ptr %memberidx6.i, align 8
  %memberidx.i.i164 = getelementptr inbounds %Program, ptr %8, i64 0, i32 1
  %12 = load ptr, ptr %memberidx.i.i164, align 8
  %13 = load i64, ptr %11, align 4
  %memberidx.i.i.i165 = getelementptr inbounds %Array_Module_, ptr %12, i64 0, i32 1
  %14 = load ptr, ptr %memberidx.i.i.i165, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %14, i64 %13
  %15 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i166 = getelementptr inbounds %Module, ptr %15, i64 0, i32 4
  %16 = load ptr, ptr %memberidx2.i.i166, align 8
  %memberidx3.i.i167 = getelementptr inbounds %TypeId, ptr %11, i64 0, i32 2
  %17 = load i64, ptr %memberidx3.i.i167, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %16, i64 0, i32 1
  %18 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx.i6.i.i, align 8
  br label %get_class_from_type.exit

get_class_from_type.exit:                         ; preds = %tailrecurse.i, %if.entry3.i
  %common.ret.op.i = phi ptr [ %19, %if.entry3.i ], [ null, %tailrecurse.i ]
  %memberidx4 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 2
  %20 = load ptr, ptr %memberidx4, align 8
  %21 = load ptr, ptr %common.ret.op.i, align 8
  store ptr %21, ptr %memberidx4, align 8
  %memberidx7 = getelementptr inbounds %Class, ptr %common.ret.op.i, i64 0, i32 2
  %22 = load ptr, ptr %memberidx7, align 8
  %.not = icmp eq ptr %22, null
  br i1 %.not, label %ifend10, label %if.entry8

if.entry8:                                        ; preds = %get_class_from_type.exit
  tail call fastcc void @TypeChecker_add_inherited_props_to_class(ptr nonnull %0, ptr nonnull %common.ret.op.i, ptr nonnull %1)
  br label %ifend10

ifend10:                                          ; preds = %get_class_from_type.exit, %if.entry8
  tail call fastcc void @TypeChecker_declare_class_fields(ptr nonnull %0, ptr nonnull %common.ret.op.i, ptr nonnull %1)
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %23 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %23, i64 0, i32 6
  %24 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %24, i64 0, i32 2
  %25 = load i64, ptr %memberidx2.i, align 4
  %26 = icmp sgt i64 %25, 0
  br i1 %26, label %common.ret, label %ifend13

ifend13:                                          ; preds = %ifend10
  tail call fastcc void @TypeChecker_declare_class_methods(ptr nonnull %0, ptr nonnull %common.ret.op.i, ptr nonnull %1)
  %27 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i112 = getelementptr inbounds %Compiler, ptr %27, i64 0, i32 6
  %28 = load ptr, ptr %memberidx1.i112, align 8
  %memberidx2.i113 = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 2
  %29 = load i64, ptr %memberidx2.i113, align 4
  %30 = icmp sgt i64 %29, 0
  br i1 %30, label %common.ret, label %for.entry

for.entry:                                        ; preds = %ifend13
  %memberidx17 = getelementptr inbounds %Class, ptr %common.ret.op.i, i64 0, i32 6
  %31 = load ptr, ptr %memberidx17, align 8
  %32 = load ptr, ptr %31, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %32, i64 0, i32 2
  %33 = load ptr, ptr %memberidx18, align 8
  %34 = tail call ptr %33(ptr nonnull %31)
  %35 = tail call ptr @malloc(i32 33)
  %memberidx.i114 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %34, i64 0, i32 1
  %36 = load ptr, ptr %memberidx.i114, align 8
  %memberidx1.i115 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %34, i64 0, i32 2
  %37 = load i64, ptr %memberidx1.i115, align 4
  store ptr @VTableArrayIterator_Bucket_string_PropId__, ptr %35, align 8
  %memberidx.i.i = getelementptr inbounds %Iterator_Bucket_string_PropId__, ptr %35, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i, align 1
  %memberidx1.i.i = getelementptr inbounds %ArrayIterator_Bucket_string_PropId__, ptr %35, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %ArrayIterator_Bucket_string_PropId__, ptr %35, i64 0, i32 4
  store ptr %36, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_Bucket_string_PropId__, ptr %35, i64 0, i32 3
  store i64 %37, ptr %memberidx3.i.i, align 4
  %38 = load ptr, ptr @VTableArrayIterator_Bucket_string_PropId__, align 8
  %39 = tail call ptr %38(ptr nonnull %35)
  %40 = load i1, ptr %memberidx.i.i, align 1
  br i1 %40, label %for.end, label %for.body

for.body:                                         ; preds = %for.entry, %ifend26
  %storemerge172 = phi ptr [ %65, %ifend26 ], [ %39, %for.entry ]
  %memberidx21 = getelementptr inbounds %Bucket_string_PropId_, ptr %storemerge172, i64 0, i32 2
  %41 = load ptr, ptr %memberidx21, align 8
  %42 = load i64, ptr %41, align 4
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %if.entry24, label %ifend26

for.end:                                          ; preds = %ifend26, %for.entry, %ifend35
  tail call void @free(ptr nonnull %35)
  %memberidx46 = getelementptr inbounds %Class, ptr %common.ret.op.i, i64 0, i32 5
  %44 = load ptr, ptr %memberidx46, align 8
  %memberidx47170 = getelementptr inbounds %Array_ClassMethod_, ptr %44, i64 0, i32 2
  %45 = load i64, ptr %memberidx47170, align 4
  %46 = icmp sgt i64 %45, 0
  br i1 %46, label %for.body43.lr.ph, label %for.end45

for.body43.lr.ph:                                 ; preds = %for.end
  %memberidx49 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 4
  %memberidx51 = getelementptr inbounds %ClassDeclarationNode, ptr %1, i64 0, i32 4
  %memberidx52 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  br label %for.body43

if.entry24:                                       ; preds = %for.body
  %memberidx22 = getelementptr inbounds %Bucket_string_PropId_, ptr %storemerge172, i64 0, i32 1
  %47 = load ptr, ptr %memberidx22, align 8
  %48 = load ptr, ptr %0, align 8
  %memberidx.i.i116 = getelementptr inbounds %PropId, ptr %41, i64 0, i32 1
  %49 = load ptr, ptr %memberidx.i.i116, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %48, i64 0, i32 1
  %50 = load ptr, ptr %memberidx.i.i.i, align 8
  %51 = load i64, ptr %49, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %50, i64 0, i32 1
  %52 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %52, i64 %51
  %53 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %53, i64 0, i32 4
  %54 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %49, i64 0, i32 2
  %55 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %54, i64 0, i32 1
  %56 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %56, i64 %55
  %57 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %memberidx.i117 = getelementptr inbounds %Class, ptr %57, i64 0, i32 5
  %58 = load ptr, ptr %memberidx.i117, align 8
  %memberidx1.i118 = getelementptr inbounds %PropId, ptr %41, i64 0, i32 2
  %59 = load i64, ptr %memberidx1.i118, align 4
  %memberidx.i3.i = getelementptr inbounds %Array_ClassMethod_, ptr %58, i64 0, i32 1
  %60 = load ptr, ptr %memberidx.i3.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %60, i64 %59
  %61 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx28 = getelementptr inbounds %ClassMethod, ptr %61, i64 0, i32 7
  %62 = load i1, ptr %memberidx28, align 1
  br i1 %62, label %if.entry29, label %ifend26

ifend26:                                          ; preds = %if.entry24, %for.body
  %63 = load ptr, ptr %35, align 8
  %64 = load ptr, ptr %63, align 8
  %65 = tail call ptr %64(ptr nonnull %35)
  %66 = load i1, ptr %memberidx.i.i, align 1
  br i1 %66, label %for.end, label %for.body

if.entry29:                                       ; preds = %if.entry24
  %memberidx32 = getelementptr inbounds %Class, ptr %common.ret.op.i, i64 0, i32 3
  %67 = load ptr, ptr %memberidx32, align 8
  %.not110 = icmp eq ptr %67, null
  br i1 %.not110, label %ifend35, label %if.entry33

if.entry33:                                       ; preds = %if.entry29
  %68 = load ptr, ptr %47, align 8
  %memberidx36 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %68, i64 0, i32 5
  %69 = load ptr, ptr %memberidx36, align 8
  %70 = tail call ptr %69(ptr nonnull %47)
  %71 = alloca ptr, align 8
  %72 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %71, ptr nonnull @198, ptr %70)
  %73 = load ptr, ptr %71, align 8
  %74 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %74, align 8
  %memberidx.i119 = getelementptr inbounds %string, ptr %74, i64 0, i32 1
  store ptr %73, ptr %memberidx.i119, align 8
  %memberidx1.i120 = getelementptr inbounds %string, ptr %74, i64 0, i32 2
  store i64 %72, ptr %memberidx1.i120, align 4
  %memberidx2.i121 = getelementptr inbounds %string, ptr %74, i64 0, i32 3
  store i64 %72, ptr %memberidx2.i121, align 4
  tail call void @free(ptr %70)
  %75 = load ptr, ptr %1, align 8
  %memberidx38 = getelementptr inbounds %Token, ptr %75, i64 0, i32 1
  %76 = load ptr, ptr %memberidx38, align 8
  %77 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i123 = getelementptr inbounds %Compiler, ptr %77, i64 0, i32 6
  %78 = load ptr, ptr %memberidx1.i123, align 8
  %79 = call ptr @malloc(i32 24)
  store i64 4, ptr %79, align 4
  %memberidx1.i.i124 = getelementptr inbounds %FloError, ptr %79, i64 0, i32 2
  store ptr %76, ptr %memberidx1.i.i124, align 8
  %memberidx2.i.i125 = getelementptr inbounds %FloError, ptr %79, i64 0, i32 1
  store ptr %74, ptr %memberidx2.i.i125, align 8
  %memberidx.i.i126 = getelementptr inbounds %Array_FloError_, ptr %78, i64 0, i32 2
  %80 = load i64, ptr %memberidx.i.i126, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %78, i64 0, i32 3
  %81 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %80, %81
  br i1 %.not.i.i, label %if.entry33.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry33.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry33
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %78, i64 0, i32 1
  %.pre176 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry33
  %82 = shl i64 %81, 1
  store i64 %82, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i128 = getelementptr inbounds %Array_FloError_, ptr %78, i64 0, i32 1
  %83 = load ptr, ptr %memberidx2.i.i.i128, align 8
  %84 = shl i64 %81, 4
  %85 = call ptr @realloc(ptr %83, i64 %84)
  store ptr %85, ptr %memberidx2.i.i.i128, align 8
  %.pre = load i64, ptr %memberidx.i.i126, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry33.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %86 = phi ptr [ %.pre176, %if.entry33.TypeChecker_error.exit_crit_edge ], [ %85, %if.entry.i.i ]
  %87 = phi i64 [ %80, %if.entry33.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %88 = add i64 %87, 1
  store i64 %88, ptr %memberidx.i.i126, align 4
  %ptridx.i.i129 = getelementptr inbounds ptr, ptr %86, i64 %87
  store ptr %79, ptr %ptridx.i.i129, align 8
  br label %common.ret

ifend35:                                          ; preds = %if.entry29
  %memberidx39 = getelementptr inbounds %Class, ptr %common.ret.op.i, i64 0, i32 10
  store i1 true, ptr %memberidx39, align 1
  br label %for.end

for.body43:                                       ; preds = %for.body43.lr.ph, %for.incr44
  %89 = phi ptr [ %44, %for.body43.lr.ph ], [ %99, %for.incr44 ]
  %storemerge109171 = phi i64 [ 0, %for.body43.lr.ph ], [ %98, %for.incr44 ]
  %memberidx.i130 = getelementptr inbounds %Array_ClassMethod_, ptr %89, i64 0, i32 1
  %90 = load ptr, ptr %memberidx.i130, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %90, i64 %storemerge109171
  %91 = load ptr, ptr %ptridx.i, align 8
  %92 = load ptr, ptr %91, align 8
  store ptr %92, ptr %memberidx49, align 8
  %93 = load ptr, ptr %memberidx51, align 8
  %memberidx.i131 = getelementptr inbounds %Array_MethodNode_, ptr %93, i64 0, i32 1
  %94 = load ptr, ptr %memberidx.i131, align 8
  %ptridx.i132 = getelementptr inbounds ptr, ptr %94, i64 %storemerge109171
  %95 = load ptr, ptr %ptridx.i132, align 8
  %memberidx53 = getelementptr inbounds %ClassMethod, ptr %91, i64 0, i32 8
  %96 = load ptr, ptr %memberidx53, align 8
  store ptr %96, ptr %memberidx52, align 8
  %memberidx54 = getelementptr inbounds %ClassMethod, ptr %91, i64 0, i32 7
  %97 = load i1, ptr %memberidx54, align 1
  br i1 %97, label %for.incr44, label %ifend57

for.incr44:                                       ; preds = %for.body43, %ifend67
  %98 = add nuw nsw i64 %storemerge109171, 1
  %99 = load ptr, ptr %memberidx46, align 8
  %memberidx47 = getelementptr inbounds %Array_ClassMethod_, ptr %99, i64 0, i32 2
  %100 = load i64, ptr %memberidx47, align 4
  %101 = icmp slt i64 %98, %100
  br i1 %101, label %for.body43, label %for.end45

for.end45:                                        ; preds = %for.incr44, %for.end
  store ptr %20, ptr %memberidx4, align 8
  br label %common.ret

ifend57:                                          ; preds = %for.body43
  %memberidx58 = getelementptr inbounds %ClassMethod, ptr %91, i64 0, i32 5
  %memberidx59 = getelementptr inbounds %MethodNode, ptr %95, i64 0, i32 2
  %102 = load ptr, ptr %memberidx59, align 8
  %103 = tail call fastcc ptr @TypeChecker_check_block(ptr nonnull %0, ptr %102)
  store ptr %103, ptr %memberidx58, align 8
  %104 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i134 = getelementptr inbounds %Compiler, ptr %104, i64 0, i32 6
  %105 = load ptr, ptr %memberidx1.i134, align 8
  %memberidx2.i135 = getelementptr inbounds %Array_FloError_, ptr %105, i64 0, i32 2
  %106 = load i64, ptr %memberidx2.i135, align 4
  %107 = icmp sgt i64 %106, 0
  br i1 %107, label %common.ret, label %ifend62

ifend62:                                          ; preds = %ifend57
  %memberidx64 = getelementptr inbounds %Block, ptr %103, i64 0, i32 1
  %108 = load i1, ptr %memberidx64, align 1
  br i1 %108, label %ifend67, label %if.entry65

if.entry65:                                       ; preds = %ifend62
  %memberidx68 = getelementptr inbounds %ClassMethod, ptr %91, i64 0, i32 4
  %109 = load ptr, ptr %memberidx68, align 8
  %memberidx69 = getelementptr inbounds %FunctionType, ptr %109, i64 0, i32 2
  %110 = load ptr, ptr %memberidx69, align 8
  %111 = load i64, ptr %110, align 4
  %112 = icmp eq i64 %111, 12
  br i1 %112, label %if.entry71, label %else72

ifend67:                                          ; preds = %ifend62, %Array_Statement____sl__.exit
  store ptr null, ptr %memberidx49, align 8
  %113 = load ptr, ptr %0, align 8
  %114 = load ptr, ptr %memberidx53, align 8
  %memberidx.i136 = getelementptr inbounds %Program, ptr %113, i64 0, i32 1
  %115 = load ptr, ptr %memberidx.i136, align 8
  %116 = load i64, ptr %114, align 4
  %memberidx.i.i137 = getelementptr inbounds %Array_Module_, ptr %115, i64 0, i32 1
  %117 = load ptr, ptr %memberidx.i.i137, align 8
  %ptridx.i.i138 = getelementptr inbounds ptr, ptr %117, i64 %116
  %118 = load ptr, ptr %ptridx.i.i138, align 8
  %memberidx2.i139 = getelementptr inbounds %Module, ptr %118, i64 0, i32 7
  %119 = load ptr, ptr %memberidx2.i139, align 8
  %memberidx3.i = getelementptr inbounds %ScopeId, ptr %114, i64 0, i32 1
  %120 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Scope_, ptr %119, i64 0, i32 1
  %121 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %121, i64 %120
  %122 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx82 = getelementptr inbounds %Scope, ptr %122, i64 0, i32 5
  %123 = load ptr, ptr %memberidx82, align 8
  store ptr %123, ptr %memberidx52, align 8
  br label %for.incr44

if.entry71:                                       ; preds = %if.entry65
  %124 = load ptr, ptr %103, align 8
  %125 = tail call ptr @malloc(i32 16)
  store i64 7, ptr %125, align 4
  %memberidx.i140 = getelementptr inbounds %ReturnStatement, ptr %125, i64 0, i32 1
  store ptr null, ptr %memberidx.i140, align 8
  %memberidx.i141 = getelementptr inbounds %Array_Statement_, ptr %124, i64 0, i32 2
  %126 = load i64, ptr %memberidx.i141, align 4
  %memberidx1.i142 = getelementptr inbounds %Array_Statement_, ptr %124, i64 0, i32 3
  %127 = load i64, ptr %memberidx1.i142, align 4
  %.not.i = icmp slt i64 %126, %127
  br i1 %.not.i, label %if.entry71.Array_Statement____sl__.exit_crit_edge, label %if.entry.i

if.entry71.Array_Statement____sl__.exit_crit_edge: ; preds = %if.entry71
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_Statement_, ptr %124, i64 0, i32 1
  %.pre180 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_Statement____sl__.exit

if.entry.i:                                       ; preds = %if.entry71
  %128 = shl i64 %127, 1
  store i64 %128, ptr %memberidx1.i142, align 4
  %memberidx2.i.i144 = getelementptr inbounds %Array_Statement_, ptr %124, i64 0, i32 1
  %129 = load ptr, ptr %memberidx2.i.i144, align 8
  %130 = shl i64 %127, 4
  %131 = tail call ptr @realloc(ptr %129, i64 %130)
  store ptr %131, ptr %memberidx2.i.i144, align 8
  %.pre179 = load i64, ptr %memberidx.i141, align 4
  br label %Array_Statement____sl__.exit

Array_Statement____sl__.exit:                     ; preds = %if.entry71.Array_Statement____sl__.exit_crit_edge, %if.entry.i
  %132 = phi ptr [ %.pre180, %if.entry71.Array_Statement____sl__.exit_crit_edge ], [ %131, %if.entry.i ]
  %133 = phi i64 [ %126, %if.entry71.Array_Statement____sl__.exit_crit_edge ], [ %.pre179, %if.entry.i ]
  %134 = add i64 %133, 1
  store i64 %134, ptr %memberidx.i141, align 4
  %ptridx.i145 = getelementptr inbounds ptr, ptr %132, i64 %133
  store ptr %125, ptr %ptridx.i145, align 8
  br label %ifend67

else72:                                           ; preds = %if.entry65
  %135 = tail call ptr @malloc(i32 304)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(38) %135, ptr noundef nonnull align 8 dereferenceable(38) @199, i64 38, i1 false)
  %136 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %136, align 8
  %memberidx.i.i146 = getelementptr inbounds %string, ptr %136, i64 0, i32 1
  store ptr %135, ptr %memberidx.i.i146, align 8
  %memberidx1.i.i147 = getelementptr inbounds %string, ptr %136, i64 0, i32 2
  store i64 38, ptr %memberidx1.i.i147, align 4
  %memberidx2.i.i148 = getelementptr inbounds %string, ptr %136, i64 0, i32 3
  store i64 38, ptr %memberidx2.i.i148, align 4
  %memberidx76 = getelementptr inbounds %MethodNode, ptr %95, i64 0, i32 4
  %137 = load ptr, ptr %memberidx76, align 8
  %138 = load ptr, ptr %137, align 8
  %139 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i150 = getelementptr inbounds %Compiler, ptr %139, i64 0, i32 6
  %140 = load ptr, ptr %memberidx1.i150, align 8
  %141 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %141, align 4
  %memberidx1.i.i151 = getelementptr inbounds %FloError, ptr %141, i64 0, i32 2
  store ptr %138, ptr %memberidx1.i.i151, align 8
  %memberidx2.i.i152 = getelementptr inbounds %FloError, ptr %141, i64 0, i32 1
  store ptr %136, ptr %memberidx2.i.i152, align 8
  %memberidx.i.i153 = getelementptr inbounds %Array_FloError_, ptr %140, i64 0, i32 2
  %142 = load i64, ptr %memberidx.i.i153, align 4
  %memberidx1.i2.i154 = getelementptr inbounds %Array_FloError_, ptr %140, i64 0, i32 3
  %143 = load i64, ptr %memberidx1.i2.i154, align 4
  %.not.i.i155 = icmp slt i64 %142, %143
  br i1 %.not.i.i155, label %else72.TypeChecker_error.exit161_crit_edge, label %if.entry.i.i158

else72.TypeChecker_error.exit161_crit_edge:       ; preds = %else72
  %memberidx4.i.i159.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %140, i64 0, i32 1
  %.pre178 = load ptr, ptr %memberidx4.i.i159.phi.trans.insert, align 8
  br label %TypeChecker_error.exit161

if.entry.i.i158:                                  ; preds = %else72
  %144 = shl i64 %143, 1
  store i64 %144, ptr %memberidx1.i2.i154, align 4
  %memberidx2.i.i.i157 = getelementptr inbounds %Array_FloError_, ptr %140, i64 0, i32 1
  %145 = load ptr, ptr %memberidx2.i.i.i157, align 8
  %146 = shl i64 %143, 4
  %147 = tail call ptr @realloc(ptr %145, i64 %146)
  store ptr %147, ptr %memberidx2.i.i.i157, align 8
  %.pre177 = load i64, ptr %memberidx.i.i153, align 4
  br label %TypeChecker_error.exit161

TypeChecker_error.exit161:                        ; preds = %else72.TypeChecker_error.exit161_crit_edge, %if.entry.i.i158
  %148 = phi ptr [ %.pre178, %else72.TypeChecker_error.exit161_crit_edge ], [ %147, %if.entry.i.i158 ]
  %149 = phi i64 [ %142, %else72.TypeChecker_error.exit161_crit_edge ], [ %.pre177, %if.entry.i.i158 ]
  %150 = add i64 %149, 1
  store i64 %150, ptr %memberidx.i.i153, align 4
  %ptridx.i.i160 = getelementptr inbounds ptr, ptr %148, i64 %149
  store ptr %141, ptr %ptridx.i.i160, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_lex_and_parse_typecheck_file(ptr %0, ptr %1, ptr %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Compiler, ptr %5, i64 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = icmp eq ptr %2, null
  %8 = load ptr, ptr %1, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %8, i64 0, i32 7
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = tail call ptr @malloc(i32 8)
  store i8 64, ptr %10, align 8
  %11 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %11, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %11, i64 0, i32 1
  store ptr %10, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %11, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %11, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i, align 4
  %12 = tail call i1 %9(ptr nonnull %1, ptr nonnull %11)
  %13 = or i1 %7, %12
  br i1 %13, label %ifend, label %if.entry

if.entry:                                         ; preds = %3
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %14 = load i64, ptr %memberidx.i, align 4
  %15 = load ptr, ptr %0, align 8
  %memberidx1.i.i57 = getelementptr inbounds %Program, ptr %15, i64 0, i32 1
  %16 = load ptr, ptr %memberidx1.i.i57, align 8
  %memberidx.i.i.i = getelementptr inbounds %Array_Module_, ptr %16, i64 0, i32 1
  %17 = load ptr, ptr %memberidx.i.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %17, i64 %14
  %18 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx3 = getelementptr inbounds %Module, ptr %18, i64 0, i32 1
  %19 = load ptr, ptr %memberidx3, align 8
  %20 = load ptr, ptr %19, align 8
  %memberidx.i58 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %20, i64 0, i32 5
  %21 = load ptr, ptr %memberidx.i58, align 8
  %22 = tail call ptr %21(ptr nonnull %19)
  %23 = tail call ptr @dirname(ptr %22)
  %24 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %23)
  %25 = trunc i64 %24 to i32
  %mallocsize.i.i = shl i32 %25, 3
  %26 = tail call ptr @malloc(i32 %mallocsize.i.i)
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 8 %26, ptr align 8 %23, i64 %24, i1 false)
  %27 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %27, align 8
  %memberidx.i.i.i59 = getelementptr inbounds %string, ptr %27, i64 0, i32 1
  store ptr %26, ptr %memberidx.i.i.i59, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %27, i64 0, i32 2
  store i64 %24, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %27, i64 0, i32 3
  store i64 %24, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %28 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %29 = tail call ptr %28(ptr nonnull %27)
  %30 = load ptr, ptr %1, align 8
  %memberidx1.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %30, i64 0, i32 5
  %31 = load ptr, ptr %memberidx1.i, align 8
  %32 = tail call ptr %31(ptr nonnull %1)
  %33 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @23, ptr %29, ptr %32)
  %34 = load ptr, ptr %4, align 8
  %35 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %35, align 8
  %memberidx.i.i61 = getelementptr inbounds %string, ptr %35, i64 0, i32 1
  store ptr %34, ptr %memberidx.i.i61, align 8
  %memberidx1.i.i62 = getelementptr inbounds %string, ptr %35, i64 0, i32 2
  store i64 %33, ptr %memberidx1.i.i62, align 4
  %memberidx2.i.i63 = getelementptr inbounds %string, ptr %35, i64 0, i32 3
  store i64 %33, ptr %memberidx2.i.i63, align 4
  call void @free(ptr %29)
  call void @free(ptr %32)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %filepath.0 = phi ptr [ %35, %if.entry ], [ %1, %3 ]
  %36 = load ptr, ptr %memberidx, align 8
  %37 = load ptr, ptr %36, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %37, i64 0, i32 1
  %38 = load ptr, ptr %memberidx5, align 8
  %39 = call ptr %38(ptr nonnull %36, ptr nonnull %filepath.0)
  %40 = load i64, ptr %39, align 4
  %41 = load ptr, ptr %0, align 8
  %memberidx8 = getelementptr inbounds %Program, ptr %41, i64 0, i32 1
  %42 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Array_Module_, ptr %42, i64 0, i32 2
  %43 = load i64, ptr %memberidx9, align 4
  %44 = icmp slt i64 %40, %43
  br i1 %44, label %if.entry10, label %ifend12

common.ret:                                       ; preds = %ifend31, %ifend26, %ifend18, %ifend34, %TypeChecker_error.exit, %if.entry10
  %common.ret.op = phi ptr [ %46, %if.entry10 ], [ null, %TypeChecker_error.exit ], [ %83, %ifend34 ], [ null, %ifend18 ], [ null, %ifend26 ], [ null, %ifend31 ]
  ret ptr %common.ret.op

if.entry10:                                       ; preds = %ifend
  %memberidx.i.i65 = getelementptr inbounds %Array_Module_, ptr %42, i64 0, i32 1
  %45 = load ptr, ptr %memberidx.i.i65, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %45, i64 %40
  %46 = load ptr, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend12:                                          ; preds = %ifend
  %47 = load ptr, ptr %memberidx, align 8
  %48 = load ptr, ptr %47, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %48, i64 0, i32 2
  %49 = load ptr, ptr %memberidx15, align 8
  %50 = call i1 %49(ptr nonnull %47, ptr nonnull %39)
  br i1 %50, label %ifend18, label %if.entry16

if.entry16:                                       ; preds = %ifend12
  %51 = load ptr, ptr %1, align 8
  %memberidx19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %51, i64 0, i32 5
  %52 = load ptr, ptr %memberidx19, align 8
  %53 = call ptr %52(ptr nonnull %1)
  %54 = alloca ptr, align 8
  %55 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %54, ptr nonnull @28, ptr %53)
  %56 = load ptr, ptr %54, align 8
  %57 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %57, align 8
  %memberidx.i66 = getelementptr inbounds %string, ptr %57, i64 0, i32 1
  store ptr %56, ptr %memberidx.i66, align 8
  %memberidx1.i67 = getelementptr inbounds %string, ptr %57, i64 0, i32 2
  store i64 %55, ptr %memberidx1.i67, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %57, i64 0, i32 3
  store i64 %55, ptr %memberidx2.i, align 4
  tail call void @free(ptr %53)
  %58 = load ptr, ptr %memberidx, align 8
  %memberidx1.i69 = getelementptr inbounds %Compiler, ptr %58, i64 0, i32 6
  %59 = load ptr, ptr %memberidx1.i69, align 8
  %60 = call ptr @malloc(i32 24)
  store i64 3, ptr %60, align 4
  %memberidx1.i.i70 = getelementptr inbounds %FloError, ptr %60, i64 0, i32 2
  store ptr %2, ptr %memberidx1.i.i70, align 8
  %memberidx2.i.i71 = getelementptr inbounds %FloError, ptr %60, i64 0, i32 1
  store ptr %57, ptr %memberidx2.i.i71, align 8
  %memberidx.i.i72 = getelementptr inbounds %Array_FloError_, ptr %59, i64 0, i32 2
  %61 = load i64, ptr %memberidx.i.i72, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %59, i64 0, i32 3
  %62 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %61, %62
  br i1 %.not.i.i, label %if.entry16.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry16.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry16
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %59, i64 0, i32 1
  %.pre85 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry16
  %63 = shl i64 %62, 1
  store i64 %63, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i74 = getelementptr inbounds %Array_FloError_, ptr %59, i64 0, i32 1
  %64 = load ptr, ptr %memberidx2.i.i.i74, align 8
  %65 = shl i64 %62, 4
  %66 = call ptr @realloc(ptr %64, i64 %65)
  store ptr %66, ptr %memberidx2.i.i.i74, align 8
  %.pre = load i64, ptr %memberidx.i.i72, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry16.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %67 = phi ptr [ %.pre85, %if.entry16.TypeChecker_error.exit_crit_edge ], [ %66, %if.entry.i.i ]
  %68 = phi i64 [ %61, %if.entry16.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %69 = add i64 %68, 1
  store i64 %69, ptr %memberidx.i.i72, align 4
  %ptridx.i.i75 = getelementptr inbounds ptr, ptr %67, i64 %68
  store ptr %60, ptr %ptridx.i.i75, align 8
  br label %common.ret

ifend18:                                          ; preds = %ifend12
  %70 = load ptr, ptr %memberidx, align 8
  %memberidx21 = getelementptr inbounds %Compiler, ptr %70, i64 0, i32 3
  %71 = load ptr, ptr %memberidx21, align 8
  %memberidx23 = getelementptr inbounds %Compiler, ptr %70, i64 0, i32 6
  %72 = load ptr, ptr %memberidx23, align 8
  %73 = call fastcc ptr @Lexer_tokenize(ptr %71, ptr %72)
  %74 = load ptr, ptr %memberidx, align 8
  %memberidx1.i77 = getelementptr inbounds %Compiler, ptr %74, i64 0, i32 6
  %75 = load ptr, ptr %memberidx1.i77, align 8
  %memberidx2.i78 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 2
  %76 = load i64, ptr %memberidx2.i78, align 4
  %77 = icmp sgt i64 %76, 0
  br i1 %77, label %common.ret, label %ifend26

ifend26:                                          ; preds = %ifend18
  %78 = call fastcc ptr @Parser_parse(ptr %73, ptr nonnull %75)
  %79 = load ptr, ptr %memberidx, align 8
  %memberidx1.i80 = getelementptr inbounds %Compiler, ptr %79, i64 0, i32 6
  %80 = load ptr, ptr %memberidx1.i80, align 8
  %memberidx2.i81 = getelementptr inbounds %Array_FloError_, ptr %80, i64 0, i32 2
  %81 = load i64, ptr %memberidx2.i81, align 4
  %82 = icmp sgt i64 %81, 0
  br i1 %82, label %common.ret, label %ifend31

ifend31:                                          ; preds = %ifend26
  %83 = call fastcc ptr @TypeChecker_check_module(ptr nonnull %0, ptr %78, ptr nonnull %filepath.0)
  %84 = load ptr, ptr %memberidx, align 8
  %memberidx1.i83 = getelementptr inbounds %Compiler, ptr %84, i64 0, i32 6
  %85 = load ptr, ptr %memberidx1.i83, align 8
  %memberidx2.i84 = getelementptr inbounds %Array_FloError_, ptr %85, i64 0, i32 2
  %86 = load i64, ptr %memberidx2.i84, align 4
  %87 = icmp sgt i64 %86, 0
  br i1 %87, label %common.ret, label %ifend34

ifend34:                                          ; preds = %ifend31
  %88 = load ptr, ptr %84, align 8
  %memberidx36 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr }>, ptr %88, i64 0, i32 2
  %89 = load ptr, ptr %memberidx36, align 8
  %90 = call i1 %89(ptr nonnull %84, ptr %6)
  br label %common.ret
}

define internal fastcc void @TypeChecker_declare_class_fields(ptr %0, ptr nocapture readonly %1, ptr nocapture readonly %2) unnamed_addr {
for.entry:
  %memberidx1 = getelementptr inbounds %ClassDeclarationNode, ptr %2, i64 0, i32 3
  %3 = load ptr, ptr %memberidx1, align 8
  %memberidx2301 = getelementptr inbounds %Array_FieldNode_, ptr %3, i64 0, i32 2
  %4 = load i64, ptr %memberidx2301, align 4
  %5 = icmp sgt i64 %4, 0
  br i1 %5, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx = getelementptr inbounds %Class, ptr %1, i64 0, i32 9
  %6 = load i64, ptr %memberidx, align 4
  %memberidx.i140 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %memberidx21 = getelementptr inbounds %Class, ptr %1, i64 0, i32 6
  %memberidx93 = getelementptr inbounds %Class, ptr %1, i64 0, i32 7
  %memberidx102 = getelementptr inbounds %Class, ptr %1, i64 0, i32 4
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %Array_ClassField____sl__.exit
  %7 = phi ptr [ %3, %for.body.lr.ph ], [ %190, %Array_ClassField____sl__.exit ]
  %i.0303 = phi i64 [ 0, %for.body.lr.ph ], [ %189, %Array_ClassField____sl__.exit ]
  %current_vtable_index.0302 = phi i64 [ %6, %for.body.lr.ph ], [ %current_vtable_index.1, %Array_ClassField____sl__.exit ]
  %memberidx.i = getelementptr inbounds %Array_FieldNode_, ptr %7, i64 0, i32 1
  %8 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %8, i64 %i.0303
  %9 = load ptr, ptr %ptridx.i, align 8
  %10 = tail call ptr @malloc(i32 49)
  %memberidx.i135 = getelementptr inbounds %ClassField, ptr %10, i64 0, i32 1
  store i1 false, ptr %memberidx.i135, align 1
  %memberidx4 = getelementptr inbounds %ClassField, ptr %10, i64 0, i32 3
  %11 = load ptr, ptr %9, align 8
  %memberidx6 = getelementptr inbounds %IdentifierToken, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx6, align 8
  store ptr %12, ptr %memberidx4, align 8
  %13 = call fastcc i1 @is_operator_overload_name(ptr %12)
  br i1 %13, label %if.entry, label %ifend

common.ret:                                       ; preds = %Array_ClassField____sl__.exit, %ifend, %if.entry63, %for.entry, %TypeChecker_error.exit274, %TypeChecker_error.exit231, %TypeChecker_error.exit210, %TypeChecker_error.exit165
  ret void

if.entry:                                         ; preds = %for.body
  %14 = load ptr, ptr %memberidx4, align 8
  %15 = call ptr @malloc(i32 600)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(75) %15, ptr noundef nonnull align 8 dereferenceable(75) @180, i64 75, i1 false)
  %16 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %16, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %16, i64 0, i32 1
  store ptr %15, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %16, i64 0, i32 2
  store i64 75, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %16, i64 0, i32 3
  store i64 75, ptr %memberidx2.i.i, align 4
  %memberidx.i136 = getelementptr inbounds %string, ptr %14, i64 0, i32 2
  %17 = load i64, ptr %memberidx.i136, align 4
  %18 = add i64 %17, 75
  %19 = trunc i64 %18 to i32
  %mallocsize.i = shl i32 %19, 3
  %20 = call ptr @malloc(i32 %mallocsize.i)
  %memberidx2.i = getelementptr inbounds %string, ptr %14, i64 0, i32 1
  %21 = load ptr, ptr %memberidx2.i, align 8
  %22 = load i64, ptr %memberidx.i136, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %20, ptr align 8 %21, i64 %22, i1 false)
  %23 = getelementptr inbounds i8, ptr %20, i64 %22
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(75) %23, ptr noundef nonnull align 8 dereferenceable(75) %15, i64 75, i1 false)
  %24 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %24, align 8
  %memberidx.i.i137 = getelementptr inbounds %string, ptr %24, i64 0, i32 1
  store ptr %20, ptr %memberidx.i.i137, align 8
  %memberidx1.i.i138 = getelementptr inbounds %string, ptr %24, i64 0, i32 2
  store i64 %18, ptr %memberidx1.i.i138, align 4
  %memberidx2.i.i139 = getelementptr inbounds %string, ptr %24, i64 0, i32 3
  store i64 %18, ptr %memberidx2.i.i139, align 4
  %25 = load ptr, ptr %9, align 8
  %memberidx10 = getelementptr inbounds %Token, ptr %25, i64 0, i32 1
  %26 = load ptr, ptr %memberidx10, align 8
  %27 = load ptr, ptr %memberidx.i140, align 8
  %memberidx1.i141 = getelementptr inbounds %Compiler, ptr %27, i64 0, i32 6
  %28 = load ptr, ptr %memberidx1.i141, align 8
  %29 = call ptr @malloc(i32 24)
  store i64 1, ptr %29, align 4
  %memberidx1.i.i142 = getelementptr inbounds %FloError, ptr %29, i64 0, i32 2
  store ptr %26, ptr %memberidx1.i.i142, align 8
  %memberidx2.i.i143 = getelementptr inbounds %FloError, ptr %29, i64 0, i32 1
  store ptr %24, ptr %memberidx2.i.i143, align 8
  %memberidx.i.i144 = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 2
  %30 = load i64, ptr %memberidx.i.i144, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 3
  %31 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %30, %31
  br i1 %.not.i.i, label %if.entry.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry.TypeChecker_error.exit_crit_edge:        ; preds = %if.entry
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 1
  %.pre318 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry
  %32 = shl i64 %31, 1
  store i64 %32, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %28, i64 0, i32 1
  %33 = load ptr, ptr %memberidx2.i.i.i, align 8
  %34 = shl i64 %31, 4
  %35 = call ptr @realloc(ptr %33, i64 %34)
  store ptr %35, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i144, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %36 = phi ptr [ %.pre318, %if.entry.TypeChecker_error.exit_crit_edge ], [ %35, %if.entry.i.i ]
  %37 = phi i64 [ %30, %if.entry.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %38 = add i64 %37, 1
  store i64 %38, ptr %memberidx.i.i144, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %36, i64 %37
  store ptr %29, ptr %ptridx.i.i, align 8
  br label %ifend

ifend:                                            ; preds = %for.body, %TypeChecker_error.exit
  %memberidx11 = getelementptr inbounds %ClassField, ptr %10, i64 0, i32 2
  %memberidx12 = getelementptr inbounds %FieldNode, ptr %9, i64 0, i32 1
  %39 = load i64, ptr %memberidx12, align 4
  store i64 %39, ptr %memberidx11, align 4
  %40 = tail call ptr @malloc(i32 24)
  %41 = load ptr, ptr %1, align 8
  store i64 1, ptr %40, align 4
  %memberidx1.i145 = getelementptr inbounds %PropId, ptr %40, i64 0, i32 1
  store ptr %41, ptr %memberidx1.i145, align 8
  %memberidx2.i146 = getelementptr inbounds %PropId, ptr %40, i64 0, i32 2
  store i64 %i.0303, ptr %memberidx2.i146, align 4
  store ptr %40, ptr %10, align 8
  %memberidx15 = getelementptr inbounds %ClassField, ptr %10, i64 0, i32 4
  %memberidx16 = getelementptr inbounds %FieldNode, ptr %9, i64 0, i32 3
  %42 = load ptr, ptr %memberidx16, align 8
  %43 = call fastcc ptr @TypeChecker_check_type(ptr %0, ptr %42)
  store ptr %43, ptr %memberidx15, align 8
  %memberidx17 = getelementptr inbounds %ClassField, ptr %10, i64 0, i32 6
  store i64 %current_vtable_index.0302, ptr %memberidx17, align 4
  %44 = load ptr, ptr %memberidx.i140, align 8
  %memberidx1.i148 = getelementptr inbounds %Compiler, ptr %44, i64 0, i32 6
  %45 = load ptr, ptr %memberidx1.i148, align 8
  %memberidx2.i149 = getelementptr inbounds %Array_FloError_, ptr %45, i64 0, i32 2
  %46 = load i64, ptr %memberidx2.i149, align 4
  %47 = icmp sgt i64 %46, 0
  br i1 %47, label %common.ret, label %ifend20

ifend20:                                          ; preds = %ifend
  %48 = load ptr, ptr %memberidx21, align 8
  %49 = load ptr, ptr %48, align 8
  %memberidx22 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %49, i64 0, i32 1
  %50 = load ptr, ptr %memberidx22, align 8
  %51 = load ptr, ptr %memberidx4, align 8
  %52 = call ptr %50(ptr nonnull %48, ptr %51)
  %.not = icmp eq ptr %52, null
  br i1 %.not, label %ifend26, label %if.entry24

if.entry24:                                       ; preds = %ifend20
  %memberidx27 = getelementptr inbounds %PropId, ptr %52, i64 0, i32 1
  %53 = load ptr, ptr %memberidx27, align 8
  %54 = load ptr, ptr %1, align 8
  %55 = icmp eq ptr %53, %54
  br i1 %55, label %if.entry29, label %ifend31

ifend26:                                          ; preds = %ifend43, %ifend20
  %memberidx62 = getelementptr inbounds %FieldNode, ptr %9, i64 0, i32 2
  %56 = load ptr, ptr %memberidx62, align 8
  %.not133 = icmp eq ptr %56, null
  br i1 %.not133, label %else64, label %if.entry63

if.entry29:                                       ; preds = %if.entry24
  %57 = load ptr, ptr %memberidx4, align 8
  %58 = load ptr, ptr %57, align 8
  %memberidx33 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %58, i64 0, i32 5
  %59 = load ptr, ptr %memberidx33, align 8
  %60 = call ptr %59(ptr nonnull %57)
  %memberidx34 = getelementptr inbounds %Class, ptr %1, i64 0, i32 1
  %61 = load ptr, ptr %memberidx34, align 8
  %62 = load ptr, ptr %61, align 8
  %memberidx35 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %62, i64 0, i32 5
  %63 = load ptr, ptr %memberidx35, align 8
  %64 = call ptr %63(ptr nonnull %61)
  %65 = alloca ptr, align 8
  %66 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %65, ptr nonnull @181, ptr %60, ptr %64)
  %67 = load ptr, ptr %65, align 8
  %68 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %68, align 8
  %memberidx.i150 = getelementptr inbounds %string, ptr %68, i64 0, i32 1
  store ptr %67, ptr %memberidx.i150, align 8
  %memberidx1.i151 = getelementptr inbounds %string, ptr %68, i64 0, i32 2
  store i64 %66, ptr %memberidx1.i151, align 4
  %memberidx2.i152 = getelementptr inbounds %string, ptr %68, i64 0, i32 3
  store i64 %66, ptr %memberidx2.i152, align 4
  tail call void @free(ptr %60)
  tail call void @free(ptr %64)
  %69 = load ptr, ptr %9, align 8
  %memberidx37 = getelementptr inbounds %Token, ptr %69, i64 0, i32 1
  %70 = load ptr, ptr %memberidx37, align 8
  %71 = load ptr, ptr %memberidx.i140, align 8
  %memberidx1.i154 = getelementptr inbounds %Compiler, ptr %71, i64 0, i32 6
  %72 = load ptr, ptr %memberidx1.i154, align 8
  %73 = call ptr @malloc(i32 24)
  store i64 1, ptr %73, align 4
  %memberidx1.i.i155 = getelementptr inbounds %FloError, ptr %73, i64 0, i32 2
  store ptr %70, ptr %memberidx1.i.i155, align 8
  %memberidx2.i.i156 = getelementptr inbounds %FloError, ptr %73, i64 0, i32 1
  store ptr %68, ptr %memberidx2.i.i156, align 8
  %memberidx.i.i157 = getelementptr inbounds %Array_FloError_, ptr %72, i64 0, i32 2
  %74 = load i64, ptr %memberidx.i.i157, align 4
  %memberidx1.i2.i158 = getelementptr inbounds %Array_FloError_, ptr %72, i64 0, i32 3
  %75 = load i64, ptr %memberidx1.i2.i158, align 4
  %.not.i.i159 = icmp slt i64 %74, %75
  br i1 %.not.i.i159, label %if.entry29.TypeChecker_error.exit165_crit_edge, label %if.entry.i.i162

if.entry29.TypeChecker_error.exit165_crit_edge:   ; preds = %if.entry29
  %memberidx4.i.i163.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %72, i64 0, i32 1
  %.pre324 = load ptr, ptr %memberidx4.i.i163.phi.trans.insert, align 8
  br label %TypeChecker_error.exit165

if.entry.i.i162:                                  ; preds = %if.entry29
  %76 = shl i64 %75, 1
  store i64 %76, ptr %memberidx1.i2.i158, align 4
  %memberidx2.i.i.i161 = getelementptr inbounds %Array_FloError_, ptr %72, i64 0, i32 1
  %77 = load ptr, ptr %memberidx2.i.i.i161, align 8
  %78 = shl i64 %75, 4
  %79 = call ptr @realloc(ptr %77, i64 %78)
  store ptr %79, ptr %memberidx2.i.i.i161, align 8
  %.pre323 = load i64, ptr %memberidx.i.i157, align 4
  br label %TypeChecker_error.exit165

TypeChecker_error.exit165:                        ; preds = %if.entry29.TypeChecker_error.exit165_crit_edge, %if.entry.i.i162
  %80 = phi ptr [ %.pre324, %if.entry29.TypeChecker_error.exit165_crit_edge ], [ %79, %if.entry.i.i162 ]
  %81 = phi i64 [ %74, %if.entry29.TypeChecker_error.exit165_crit_edge ], [ %.pre323, %if.entry.i.i162 ]
  %82 = add i64 %81, 1
  store i64 %82, ptr %memberidx.i.i157, align 4
  %ptridx.i.i164 = getelementptr inbounds ptr, ptr %80, i64 %81
  store ptr %73, ptr %ptridx.i.i164, align 8
  br label %common.ret

ifend31:                                          ; preds = %if.entry24
  %83 = load ptr, ptr %0, align 8
  %memberidx.i.i.i167 = getelementptr inbounds %Program, ptr %83, i64 0, i32 1
  %84 = load ptr, ptr %memberidx.i.i.i167, align 8
  %85 = load i64, ptr %53, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %84, i64 0, i32 1
  %86 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %86, i64 %85
  %87 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i168 = getelementptr inbounds %Module, ptr %87, i64 0, i32 4
  %88 = load ptr, ptr %memberidx2.i.i.i168, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %53, i64 0, i32 2
  %89 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %88, i64 0, i32 1
  %90 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %90, i64 %89
  %91 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %92 = load i64, ptr %52, align 4
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %if.entry.i188, label %ifend.i194

if.entry.i188:                                    ; preds = %ifend31
  %memberidx1.i169 = getelementptr inbounds %Class, ptr %91, i64 0, i32 5
  %94 = load ptr, ptr %memberidx1.i169, align 8
  %memberidx2.i170 = getelementptr inbounds %PropId, ptr %52, i64 0, i32 2
  %95 = load i64, ptr %memberidx2.i170, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %94, i64 0, i32 1
  %96 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %96, i64 %95
  %97 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %97, i64 0, i32 4
  %parent_prop_visibility282 = alloca i64, align 8
  %memberidx3.i187 = getelementptr inbounds %ClassMethod, ptr %97, i64 0, i32 2
  br label %get_class_prop_visibility.exit

ifend.i194:                                       ; preds = %ifend31
  %memberidx4.i = getelementptr inbounds %Class, ptr %91, i64 0, i32 4
  %98 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i171 = getelementptr inbounds %PropId, ptr %52, i64 0, i32 2
  %99 = load i64, ptr %memberidx5.i171, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %98, i64 0, i32 1
  %100 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i172 = getelementptr inbounds ptr, ptr %100, i64 %99
  %101 = load ptr, ptr %ptridx.i.i172, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %101, i64 0, i32 4
  %parent_prop_visibility = alloca i64, align 8
  %memberidx6.i193 = getelementptr inbounds %ClassField, ptr %101, i64 0, i32 2
  br label %get_class_prop_visibility.exit

get_class_prop_visibility.exit:                   ; preds = %if.entry.i188, %ifend.i194
  %parent_prop_visibility285 = phi ptr [ %parent_prop_visibility282, %if.entry.i188 ], [ %parent_prop_visibility, %ifend.i194 ]
  %common.ret.op.i283.in = phi ptr [ %memberidx3.i, %if.entry.i188 ], [ %memberidx6.i, %ifend.i194 ]
  %common.ret.op.in.i181 = phi ptr [ %memberidx3.i187, %if.entry.i188 ], [ %memberidx6.i193, %ifend.i194 ]
  %common.ret.op.i283 = load ptr, ptr %common.ret.op.i283.in, align 8
  %common.ret.op.i182 = load i64, ptr %common.ret.op.in.i181, align 4
  store i64 %common.ret.op.i182, ptr %parent_prop_visibility285, align 8
  %102 = load ptr, ptr %memberidx15, align 8
  %103 = call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %common.ret.op.i283, ptr %102)
  br i1 %103, label %ifend43, label %if.entry41

if.entry41:                                       ; preds = %get_class_prop_visibility.exit
  %104 = load ptr, ptr %memberidx4, align 8
  %105 = load ptr, ptr %104, align 8
  %memberidx45 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %105, i64 0, i32 5
  %106 = load ptr, ptr %memberidx45, align 8
  %107 = call ptr %106(ptr nonnull %104)
  %memberidx46 = getelementptr inbounds %Class, ptr %1, i64 0, i32 1
  %108 = load ptr, ptr %memberidx46, align 8
  %109 = load ptr, ptr %108, align 8
  %memberidx47 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %109, i64 0, i32 5
  %110 = load ptr, ptr %memberidx47, align 8
  %111 = call ptr %110(ptr nonnull %108)
  %112 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %common.ret.op.i283)
  %113 = load ptr, ptr %112, align 8
  %memberidx48 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %113, i64 0, i32 5
  %114 = load ptr, ptr %memberidx48, align 8
  %115 = call ptr %114(ptr nonnull %112)
  %116 = alloca ptr, align 8
  %117 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %116, ptr nonnull @182, ptr %107, ptr %111, ptr %115)
  %118 = load ptr, ptr %116, align 8
  %119 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %119, align 8
  %memberidx.i195 = getelementptr inbounds %string, ptr %119, i64 0, i32 1
  store ptr %118, ptr %memberidx.i195, align 8
  %memberidx1.i196 = getelementptr inbounds %string, ptr %119, i64 0, i32 2
  store i64 %117, ptr %memberidx1.i196, align 4
  %memberidx2.i197 = getelementptr inbounds %string, ptr %119, i64 0, i32 3
  store i64 %117, ptr %memberidx2.i197, align 4
  tail call void @free(ptr %107)
  tail call void @free(ptr %111)
  tail call void @free(ptr %115)
  %120 = load ptr, ptr %9, align 8
  %memberidx50 = getelementptr inbounds %Token, ptr %120, i64 0, i32 1
  %121 = load ptr, ptr %memberidx50, align 8
  %122 = load ptr, ptr %memberidx.i140, align 8
  %memberidx1.i199 = getelementptr inbounds %Compiler, ptr %122, i64 0, i32 6
  %123 = load ptr, ptr %memberidx1.i199, align 8
  %124 = call ptr @malloc(i32 24)
  store i64 5, ptr %124, align 4
  %memberidx1.i.i200 = getelementptr inbounds %FloError, ptr %124, i64 0, i32 2
  store ptr %121, ptr %memberidx1.i.i200, align 8
  %memberidx2.i.i201 = getelementptr inbounds %FloError, ptr %124, i64 0, i32 1
  store ptr %119, ptr %memberidx2.i.i201, align 8
  %memberidx.i.i202 = getelementptr inbounds %Array_FloError_, ptr %123, i64 0, i32 2
  %125 = load i64, ptr %memberidx.i.i202, align 4
  %memberidx1.i2.i203 = getelementptr inbounds %Array_FloError_, ptr %123, i64 0, i32 3
  %126 = load i64, ptr %memberidx1.i2.i203, align 4
  %.not.i.i204 = icmp slt i64 %125, %126
  br i1 %.not.i.i204, label %if.entry41.TypeChecker_error.exit210_crit_edge, label %if.entry.i.i207

if.entry41.TypeChecker_error.exit210_crit_edge:   ; preds = %if.entry41
  %memberidx4.i.i208.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %123, i64 0, i32 1
  %.pre320 = load ptr, ptr %memberidx4.i.i208.phi.trans.insert, align 8
  br label %TypeChecker_error.exit210

if.entry.i.i207:                                  ; preds = %if.entry41
  %127 = shl i64 %126, 1
  store i64 %127, ptr %memberidx1.i2.i203, align 4
  %memberidx2.i.i.i206 = getelementptr inbounds %Array_FloError_, ptr %123, i64 0, i32 1
  %128 = load ptr, ptr %memberidx2.i.i.i206, align 8
  %129 = shl i64 %126, 4
  %130 = call ptr @realloc(ptr %128, i64 %129)
  store ptr %130, ptr %memberidx2.i.i.i206, align 8
  %.pre319 = load i64, ptr %memberidx.i.i202, align 4
  br label %TypeChecker_error.exit210

TypeChecker_error.exit210:                        ; preds = %if.entry41.TypeChecker_error.exit210_crit_edge, %if.entry.i.i207
  %131 = phi ptr [ %.pre320, %if.entry41.TypeChecker_error.exit210_crit_edge ], [ %130, %if.entry.i.i207 ]
  %132 = phi i64 [ %125, %if.entry41.TypeChecker_error.exit210_crit_edge ], [ %.pre319, %if.entry.i.i207 ]
  %133 = add i64 %132, 1
  store i64 %133, ptr %memberidx.i.i202, align 4
  %ptridx.i.i209 = getelementptr inbounds ptr, ptr %131, i64 %132
  store ptr %124, ptr %ptridx.i.i209, align 8
  br label %common.ret

ifend43:                                          ; preds = %get_class_prop_visibility.exit
  %134 = load i64, ptr %memberidx11, align 4
  %.not134 = icmp eq i64 %134, %common.ret.op.i182
  br i1 %.not134, label %ifend26, label %if.entry52

if.entry52:                                       ; preds = %ifend43
  %135 = load ptr, ptr %memberidx4, align 8
  %136 = load ptr, ptr %135, align 8
  %memberidx56 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %136, i64 0, i32 5
  %137 = load ptr, ptr %memberidx56, align 8
  %138 = call ptr %137(ptr nonnull %135)
  %memberidx57 = getelementptr inbounds %Class, ptr %1, i64 0, i32 1
  %139 = load ptr, ptr %memberidx57, align 8
  %140 = load ptr, ptr %139, align 8
  %memberidx58 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %140, i64 0, i32 5
  %141 = load ptr, ptr %memberidx58, align 8
  %142 = call ptr %141(ptr nonnull %139)
  switch i64 %common.ret.op.i182, label %ifend3.i [
    i64 1, label %if.entry.i214
    i64 2, label %if.entry1.i
  ]

if.entry.i214:                                    ; preds = %if.entry52
  %143 = call ptr @malloc(i32 56)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %143, ptr noundef nonnull align 8 dereferenceable(7) @48, i64 7, i1 false)
  br label %dump_access.exit

if.entry1.i:                                      ; preds = %if.entry52
  %144 = call ptr @malloc(i32 48)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %144, ptr noundef nonnull align 8 dereferenceable(6) @49, i64 6, i1 false)
  br label %dump_access.exit

ifend3.i:                                         ; preds = %if.entry52
  %145 = call ptr @malloc(i32 72)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %145, ptr noundef nonnull align 8 dereferenceable(9) @50, i64 9, i1 false)
  br label %dump_access.exit

dump_access.exit:                                 ; preds = %if.entry.i214, %if.entry1.i, %ifend3.i
  %.sink344 = phi ptr [ %143, %if.entry.i214 ], [ %144, %if.entry1.i ], [ %145, %ifend3.i ]
  %.sink342 = phi i64 [ 7, %if.entry.i214 ], [ 6, %if.entry1.i ], [ 9, %ifend3.i ]
  %146 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %146, align 8
  %memberidx.i.i.i212 = getelementptr inbounds %string, ptr %146, i64 0, i32 1
  store ptr %.sink344, ptr %memberidx.i.i.i212, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %146, i64 0, i32 2
  store i64 %.sink342, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i213 = getelementptr inbounds %string, ptr %146, i64 0, i32 3
  store i64 %.sink342, ptr %memberidx2.i.i.i213, align 4
  %147 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %148 = call ptr %147(ptr nonnull %146)
  %149 = alloca ptr, align 8
  %150 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %149, ptr nonnull @183, ptr %138, ptr %142, ptr %148)
  %151 = load ptr, ptr %149, align 8
  %152 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %152, align 8
  %memberidx.i216 = getelementptr inbounds %string, ptr %152, i64 0, i32 1
  store ptr %151, ptr %memberidx.i216, align 8
  %memberidx1.i217 = getelementptr inbounds %string, ptr %152, i64 0, i32 2
  store i64 %150, ptr %memberidx1.i217, align 4
  %memberidx2.i218 = getelementptr inbounds %string, ptr %152, i64 0, i32 3
  store i64 %150, ptr %memberidx2.i218, align 4
  tail call void @free(ptr %138)
  tail call void @free(ptr %142)
  tail call void @free(ptr %148)
  %153 = load ptr, ptr %9, align 8
  %memberidx61 = getelementptr inbounds %Token, ptr %153, i64 0, i32 1
  %154 = load ptr, ptr %memberidx61, align 8
  %155 = load ptr, ptr %memberidx.i140, align 8
  %memberidx1.i220 = getelementptr inbounds %Compiler, ptr %155, i64 0, i32 6
  %156 = load ptr, ptr %memberidx1.i220, align 8
  %157 = call ptr @malloc(i32 24)
  store i64 4, ptr %157, align 4
  %memberidx1.i.i221 = getelementptr inbounds %FloError, ptr %157, i64 0, i32 2
  store ptr %154, ptr %memberidx1.i.i221, align 8
  %memberidx2.i.i222 = getelementptr inbounds %FloError, ptr %157, i64 0, i32 1
  store ptr %152, ptr %memberidx2.i.i222, align 8
  %memberidx.i.i223 = getelementptr inbounds %Array_FloError_, ptr %156, i64 0, i32 2
  %158 = load i64, ptr %memberidx.i.i223, align 4
  %memberidx1.i2.i224 = getelementptr inbounds %Array_FloError_, ptr %156, i64 0, i32 3
  %159 = load i64, ptr %memberidx1.i2.i224, align 4
  %.not.i.i225 = icmp slt i64 %158, %159
  br i1 %.not.i.i225, label %dump_access.exit.TypeChecker_error.exit231_crit_edge, label %if.entry.i.i228

dump_access.exit.TypeChecker_error.exit231_crit_edge: ; preds = %dump_access.exit
  %memberidx4.i.i229.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %156, i64 0, i32 1
  %.pre322 = load ptr, ptr %memberidx4.i.i229.phi.trans.insert, align 8
  br label %TypeChecker_error.exit231

if.entry.i.i228:                                  ; preds = %dump_access.exit
  %160 = shl i64 %159, 1
  store i64 %160, ptr %memberidx1.i2.i224, align 4
  %memberidx2.i.i.i227 = getelementptr inbounds %Array_FloError_, ptr %156, i64 0, i32 1
  %161 = load ptr, ptr %memberidx2.i.i.i227, align 8
  %162 = shl i64 %159, 4
  %163 = call ptr @realloc(ptr %161, i64 %162)
  store ptr %163, ptr %memberidx2.i.i.i227, align 8
  %.pre321 = load i64, ptr %memberidx.i.i223, align 4
  br label %TypeChecker_error.exit231

TypeChecker_error.exit231:                        ; preds = %dump_access.exit.TypeChecker_error.exit231_crit_edge, %if.entry.i.i228
  %164 = phi ptr [ %.pre322, %dump_access.exit.TypeChecker_error.exit231_crit_edge ], [ %163, %if.entry.i.i228 ]
  %165 = phi i64 [ %158, %dump_access.exit.TypeChecker_error.exit231_crit_edge ], [ %.pre321, %if.entry.i.i228 ]
  %166 = add i64 %165, 1
  store i64 %166, ptr %memberidx.i.i223, align 4
  %ptridx.i.i230 = getelementptr inbounds ptr, ptr %164, i64 %165
  store ptr %157, ptr %ptridx.i.i230, align 8
  br label %common.ret

if.entry63:                                       ; preds = %ifend26
  %memberidx66 = getelementptr inbounds %ClassField, ptr %10, i64 0, i32 5
  %167 = load ptr, ptr %memberidx15, align 8
  %168 = call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %167, ptr nonnull %56)
  store ptr %168, ptr %memberidx66, align 8
  %169 = load ptr, ptr %memberidx.i140, align 8
  %memberidx1.i233 = getelementptr inbounds %Compiler, ptr %169, i64 0, i32 6
  %170 = load ptr, ptr %memberidx1.i233, align 8
  %memberidx2.i234 = getelementptr inbounds %Array_FloError_, ptr %170, i64 0, i32 2
  %171 = load i64, ptr %memberidx2.i234, align 4
  %172 = icmp sgt i64 %171, 0
  br i1 %172, label %common.ret, label %ifend71

else64:                                           ; preds = %ifend26
  store i1 false, ptr %memberidx.i135, align 1
  %173 = load ptr, ptr %memberidx21, align 8
  %174 = load ptr, ptr %173, align 8
  %175 = load ptr, ptr %174, align 8
  %176 = load ptr, ptr %memberidx4, align 8
  %177 = load ptr, ptr %10, align 8
  call void %175(ptr nonnull %173, ptr %176, ptr %177)
  %178 = add i64 %current_vtable_index.0302, 1
  br label %ifend65

ifend65:                                          ; preds = %else64, %ifend89
  %current_vtable_index.1 = phi i64 [ %current_vtable_index.0302, %ifend89 ], [ %178, %else64 ]
  %179 = load ptr, ptr %memberidx102, align 8
  %memberidx.i235 = getelementptr inbounds %Array_ClassField_, ptr %179, i64 0, i32 2
  %180 = load i64, ptr %memberidx.i235, align 4
  %memberidx1.i236 = getelementptr inbounds %Array_ClassField_, ptr %179, i64 0, i32 3
  %181 = load i64, ptr %memberidx1.i236, align 4
  %.not.i = icmp slt i64 %180, %181
  br i1 %.not.i, label %ifend65.Array_ClassField____sl__.exit_crit_edge, label %if.entry.i239

ifend65.Array_ClassField____sl__.exit_crit_edge:  ; preds = %ifend65
  %memberidx4.i240.phi.trans.insert = getelementptr inbounds %Array_ClassField_, ptr %179, i64 0, i32 1
  %.pre330 = load ptr, ptr %memberidx4.i240.phi.trans.insert, align 8
  br label %Array_ClassField____sl__.exit

if.entry.i239:                                    ; preds = %ifend65
  %182 = shl i64 %181, 1
  store i64 %182, ptr %memberidx1.i236, align 4
  %memberidx2.i.i238 = getelementptr inbounds %Array_ClassField_, ptr %179, i64 0, i32 1
  %183 = load ptr, ptr %memberidx2.i.i238, align 8
  %184 = shl i64 %181, 4
  %185 = call ptr @realloc(ptr %183, i64 %184)
  store ptr %185, ptr %memberidx2.i.i238, align 8
  %.pre329 = load i64, ptr %memberidx.i235, align 4
  br label %Array_ClassField____sl__.exit

Array_ClassField____sl__.exit:                    ; preds = %ifend65.Array_ClassField____sl__.exit_crit_edge, %if.entry.i239
  %186 = phi ptr [ %.pre330, %ifend65.Array_ClassField____sl__.exit_crit_edge ], [ %185, %if.entry.i239 ]
  %187 = phi i64 [ %180, %ifend65.Array_ClassField____sl__.exit_crit_edge ], [ %.pre329, %if.entry.i239 ]
  %188 = add i64 %187, 1
  store i64 %188, ptr %memberidx.i235, align 4
  %ptridx.i241 = getelementptr inbounds ptr, ptr %186, i64 %187
  store ptr %10, ptr %ptridx.i241, align 8
  %189 = add nuw nsw i64 %i.0303, 1
  %190 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_FieldNode_, ptr %190, i64 0, i32 2
  %191 = load i64, ptr %memberidx2, align 4
  %192 = icmp slt i64 %189, %191
  br i1 %192, label %for.body, label %common.ret

ifend71:                                          ; preds = %if.entry63
  %193 = load ptr, ptr %memberidx15, align 8
  %memberidx74 = getelementptr inbounds %Expression, ptr %168, i64 0, i32 3
  %194 = load ptr, ptr %memberidx74, align 8
  %195 = call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %193, ptr %194)
  br i1 %195, label %ifend77, label %if.entry75

if.entry75:                                       ; preds = %ifend71
  %196 = load ptr, ptr %memberidx15, align 8
  %197 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %196)
  %198 = load ptr, ptr %197, align 8
  %memberidx79 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %198, i64 0, i32 5
  %199 = load ptr, ptr %memberidx79, align 8
  %200 = call ptr %199(ptr nonnull %197)
  %201 = load ptr, ptr %memberidx66, align 8
  %memberidx81 = getelementptr inbounds %Expression, ptr %201, i64 0, i32 3
  %202 = load ptr, ptr %memberidx81, align 8
  %203 = call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %202)
  %204 = load ptr, ptr %203, align 8
  %memberidx82 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %204, i64 0, i32 5
  %205 = load ptr, ptr %memberidx82, align 8
  %206 = call ptr %205(ptr nonnull %203)
  %207 = alloca ptr, align 8
  %208 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %207, ptr nonnull @184, ptr %200, ptr %206)
  %209 = load ptr, ptr %207, align 8
  %210 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %210, align 8
  %memberidx.i243 = getelementptr inbounds %string, ptr %210, i64 0, i32 1
  store ptr %209, ptr %memberidx.i243, align 8
  %memberidx1.i244 = getelementptr inbounds %string, ptr %210, i64 0, i32 2
  store i64 %208, ptr %memberidx1.i244, align 4
  %memberidx2.i245 = getelementptr inbounds %string, ptr %210, i64 0, i32 3
  store i64 %208, ptr %memberidx2.i245, align 4
  tail call void @free(ptr %200)
  tail call void @free(ptr %206)
  %211 = load ptr, ptr %memberidx62, align 8
  %212 = load ptr, ptr %211, align 8
  %213 = load ptr, ptr %memberidx.i140, align 8
  %memberidx1.i247 = getelementptr inbounds %Compiler, ptr %213, i64 0, i32 6
  %214 = load ptr, ptr %memberidx1.i247, align 8
  %215 = call ptr @malloc(i32 24)
  store i64 5, ptr %215, align 4
  %memberidx1.i.i248 = getelementptr inbounds %FloError, ptr %215, i64 0, i32 2
  store ptr %212, ptr %memberidx1.i.i248, align 8
  %memberidx2.i.i249 = getelementptr inbounds %FloError, ptr %215, i64 0, i32 1
  store ptr %210, ptr %memberidx2.i.i249, align 8
  %memberidx.i.i250 = getelementptr inbounds %Array_FloError_, ptr %214, i64 0, i32 2
  %216 = load i64, ptr %memberidx.i.i250, align 4
  %memberidx1.i2.i251 = getelementptr inbounds %Array_FloError_, ptr %214, i64 0, i32 3
  %217 = load i64, ptr %memberidx1.i2.i251, align 4
  %.not.i.i252 = icmp slt i64 %216, %217
  br i1 %.not.i.i252, label %if.entry75.TypeChecker_error.exit258_crit_edge, label %if.entry.i.i255

if.entry75.TypeChecker_error.exit258_crit_edge:   ; preds = %if.entry75
  %memberidx4.i.i256.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %214, i64 0, i32 1
  %.pre326 = load ptr, ptr %memberidx4.i.i256.phi.trans.insert, align 8
  br label %TypeChecker_error.exit258

if.entry.i.i255:                                  ; preds = %if.entry75
  %218 = shl i64 %217, 1
  store i64 %218, ptr %memberidx1.i2.i251, align 4
  %memberidx2.i.i.i254 = getelementptr inbounds %Array_FloError_, ptr %214, i64 0, i32 1
  %219 = load ptr, ptr %memberidx2.i.i.i254, align 8
  %220 = shl i64 %217, 4
  %221 = call ptr @realloc(ptr %219, i64 %220)
  store ptr %221, ptr %memberidx2.i.i.i254, align 8
  %.pre325 = load i64, ptr %memberidx.i.i250, align 4
  br label %TypeChecker_error.exit258

TypeChecker_error.exit258:                        ; preds = %if.entry75.TypeChecker_error.exit258_crit_edge, %if.entry.i.i255
  %222 = phi ptr [ %.pre326, %if.entry75.TypeChecker_error.exit258_crit_edge ], [ %221, %if.entry.i.i255 ]
  %223 = phi i64 [ %216, %if.entry75.TypeChecker_error.exit258_crit_edge ], [ %.pre325, %if.entry.i.i255 ]
  %224 = add i64 %223, 1
  store i64 %224, ptr %memberidx.i.i250, align 4
  %ptridx.i.i257 = getelementptr inbounds ptr, ptr %222, i64 %223
  store ptr %215, ptr %ptridx.i.i257, align 8
  br label %ifend77

ifend77:                                          ; preds = %ifend71, %TypeChecker_error.exit258
  %225 = load ptr, ptr %memberidx66, align 8
  %memberidx86 = getelementptr inbounds %Expression, ptr %225, i64 0, i32 1
  %226 = load i1, ptr %memberidx86, align 1
  br i1 %226, label %ifend89, label %if.entry87

if.entry87:                                       ; preds = %ifend77
  %227 = call ptr @malloc(i32 360)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(45) %227, ptr noundef nonnull align 8 dereferenceable(45) @185, i64 45, i1 false)
  %228 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %228, align 8
  %memberidx.i.i259 = getelementptr inbounds %string, ptr %228, i64 0, i32 1
  store ptr %227, ptr %memberidx.i.i259, align 8
  %memberidx1.i.i260 = getelementptr inbounds %string, ptr %228, i64 0, i32 2
  store i64 45, ptr %memberidx1.i.i260, align 4
  %memberidx2.i.i261 = getelementptr inbounds %string, ptr %228, i64 0, i32 3
  store i64 45, ptr %memberidx2.i.i261, align 4
  %229 = load ptr, ptr %memberidx62, align 8
  %230 = load ptr, ptr %229, align 8
  %231 = load ptr, ptr %memberidx.i140, align 8
  %memberidx1.i263 = getelementptr inbounds %Compiler, ptr %231, i64 0, i32 6
  %232 = load ptr, ptr %memberidx1.i263, align 8
  %233 = call ptr @malloc(i32 24)
  store i64 4, ptr %233, align 4
  %memberidx1.i.i264 = getelementptr inbounds %FloError, ptr %233, i64 0, i32 2
  store ptr %230, ptr %memberidx1.i.i264, align 8
  %memberidx2.i.i265 = getelementptr inbounds %FloError, ptr %233, i64 0, i32 1
  store ptr %228, ptr %memberidx2.i.i265, align 8
  %memberidx.i.i266 = getelementptr inbounds %Array_FloError_, ptr %232, i64 0, i32 2
  %234 = load i64, ptr %memberidx.i.i266, align 4
  %memberidx1.i2.i267 = getelementptr inbounds %Array_FloError_, ptr %232, i64 0, i32 3
  %235 = load i64, ptr %memberidx1.i2.i267, align 4
  %.not.i.i268 = icmp slt i64 %234, %235
  br i1 %.not.i.i268, label %if.entry87.TypeChecker_error.exit274_crit_edge, label %if.entry.i.i271

if.entry87.TypeChecker_error.exit274_crit_edge:   ; preds = %if.entry87
  %memberidx4.i.i272.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %232, i64 0, i32 1
  %.pre328 = load ptr, ptr %memberidx4.i.i272.phi.trans.insert, align 8
  br label %TypeChecker_error.exit274

if.entry.i.i271:                                  ; preds = %if.entry87
  %236 = shl i64 %235, 1
  store i64 %236, ptr %memberidx1.i2.i267, align 4
  %memberidx2.i.i.i270 = getelementptr inbounds %Array_FloError_, ptr %232, i64 0, i32 1
  %237 = load ptr, ptr %memberidx2.i.i.i270, align 8
  %238 = shl i64 %235, 4
  %239 = call ptr @realloc(ptr %237, i64 %238)
  store ptr %239, ptr %memberidx2.i.i.i270, align 8
  %.pre327 = load i64, ptr %memberidx.i.i266, align 4
  br label %TypeChecker_error.exit274

TypeChecker_error.exit274:                        ; preds = %if.entry87.TypeChecker_error.exit274_crit_edge, %if.entry.i.i271
  %240 = phi ptr [ %.pre328, %if.entry87.TypeChecker_error.exit274_crit_edge ], [ %239, %if.entry.i.i271 ]
  %241 = phi i64 [ %234, %if.entry87.TypeChecker_error.exit274_crit_edge ], [ %.pre327, %if.entry.i.i271 ]
  %242 = add i64 %241, 1
  store i64 %242, ptr %memberidx.i.i266, align 4
  %ptridx.i.i273 = getelementptr inbounds ptr, ptr %240, i64 %241
  store ptr %233, ptr %ptridx.i.i273, align 8
  br label %common.ret

ifend89:                                          ; preds = %ifend77
  store i1 true, ptr %memberidx.i135, align 1
  %243 = load ptr, ptr %memberidx93, align 8
  %244 = load ptr, ptr %243, align 8
  %245 = load ptr, ptr %244, align 8
  %246 = load ptr, ptr %memberidx4, align 8
  %247 = load ptr, ptr %10, align 8
  call void %245(ptr nonnull %243, ptr %246, ptr %247)
  br label %ifend65
}

define internal fastcc void @TypeChecker_check_module_import(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %memberidx = getelementptr inbounds %ImportNode, ptr %1, i64 0, i32 1
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %StrToken, ptr %3, i64 0, i32 4
  %4 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_Array_Token__, ptr %4, i64 0, i32 2
  %5 = load i64, ptr %memberidx2, align 4
  %6 = icmp sgt i64 %5, 0
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.end, %else16, %ifend, %TypeChecker_error.exit140, %TypeChecker_error.exit
  ret void

if.entry:                                         ; preds = %2
  %7 = tail call ptr @malloc(i32 408)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(51) %7, ptr noundef nonnull align 8 dereferenceable(51) @152, i64 51, i1 false)
  %8 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %8, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 1
  store ptr %7, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 2
  store i64 51, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 3
  store i64 51, ptr %memberidx2.i.i, align 4
  %9 = load ptr, ptr %memberidx, align 8
  %memberidx4 = getelementptr inbounds %Token, ptr %9, i64 0, i32 1
  %10 = load ptr, ptr %memberidx4, align 8
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %11 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %11, i64 0, i32 6
  %12 = load ptr, ptr %memberidx1.i, align 8
  %13 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %13, align 4
  %memberidx1.i.i76 = getelementptr inbounds %FloError, ptr %13, i64 0, i32 2
  store ptr %10, ptr %memberidx1.i.i76, align 8
  %memberidx2.i.i77 = getelementptr inbounds %FloError, ptr %13, i64 0, i32 1
  store ptr %8, ptr %memberidx2.i.i77, align 8
  %memberidx.i.i78 = getelementptr inbounds %Array_FloError_, ptr %12, i64 0, i32 2
  %14 = load i64, ptr %memberidx.i.i78, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %12, i64 0, i32 3
  %15 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %14, %15
  br i1 %.not.i.i, label %if.entry.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry.TypeChecker_error.exit_crit_edge:        ; preds = %if.entry
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %12, i64 0, i32 1
  %.pre151 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry
  %16 = shl i64 %15, 1
  store i64 %16, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %12, i64 0, i32 1
  %17 = load ptr, ptr %memberidx2.i.i.i, align 8
  %18 = shl i64 %15, 4
  %19 = tail call ptr @realloc(ptr %17, i64 %18)
  store ptr %19, ptr %memberidx2.i.i.i, align 8
  %.pre150 = load i64, ptr %memberidx.i.i78, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %20 = phi ptr [ %.pre151, %if.entry.TypeChecker_error.exit_crit_edge ], [ %19, %if.entry.i.i ]
  %21 = phi i64 [ %14, %if.entry.TypeChecker_error.exit_crit_edge ], [ %.pre150, %if.entry.i.i ]
  %22 = add i64 %21, 1
  store i64 %22, ptr %memberidx.i.i78, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %20, i64 %21
  store ptr %13, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend:                                            ; preds = %2
  %memberidx6 = getelementptr inbounds %StrToken, ptr %3, i64 0, i32 2
  %23 = load ptr, ptr %memberidx6, align 8
  %memberidx8 = getelementptr inbounds %Token, ptr %3, i64 0, i32 1
  %24 = load ptr, ptr %memberidx8, align 8
  %25 = tail call fastcc ptr @TypeChecker_lex_and_parse_typecheck_file(ptr %0, ptr %23, ptr %24)
  %memberidx.i79 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %26 = load ptr, ptr %memberidx.i79, align 8
  %memberidx1.i80 = getelementptr inbounds %Compiler, ptr %26, i64 0, i32 6
  %27 = load ptr, ptr %memberidx1.i80, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %27, i64 0, i32 2
  %28 = load i64, ptr %memberidx2.i, align 4
  %29 = icmp sgt i64 %28, 0
  br i1 %29, label %common.ret, label %ifend11

ifend11:                                          ; preds = %ifend
  %memberidx12 = getelementptr inbounds %Module, ptr %25, i64 0, i32 7
  %30 = load ptr, ptr %memberidx12, align 8
  %memberidx.i81 = getelementptr inbounds %Array_Scope_, ptr %30, i64 0, i32 1
  %31 = load ptr, ptr %memberidx.i81, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %1, align 8
  %memberidx14 = getelementptr inbounds %Array_IdentifierToken_, ptr %33, i64 0, i32 2
  %34 = load i64, ptr %memberidx14, align 4
  %35 = icmp sgt i64 %34, 0
  br i1 %35, label %for.entry, label %else16

else16:                                           ; preds = %ifend11
  tail call fastcc void @TypeChecker_import_all_from_module(ptr nonnull %0, ptr nonnull %25)
  br label %common.ret

for.entry:                                        ; preds = %ifend11
  %36 = tail call ptr @malloc(i32 33)
  %memberidx.i82 = getelementptr inbounds %Array_IdentifierToken_, ptr %33, i64 0, i32 1
  %37 = load ptr, ptr %memberidx.i82, align 8
  %38 = load i64, ptr %memberidx14, align 4
  store ptr @VTableArrayIterator_IdentifierToken_, ptr %36, align 8
  %memberidx.i.i84 = getelementptr inbounds %Iterator_IdentifierToken_, ptr %36, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i84, align 1
  %memberidx1.i.i85 = getelementptr inbounds %ArrayIterator_IdentifierToken_, ptr %36, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i85, align 4
  %memberidx2.i.i86 = getelementptr inbounds %ArrayIterator_IdentifierToken_, ptr %36, i64 0, i32 4
  store ptr %37, ptr %memberidx2.i.i86, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_IdentifierToken_, ptr %36, i64 0, i32 3
  store i64 %38, ptr %memberidx3.i.i, align 4
  %39 = load ptr, ptr @VTableArrayIterator_IdentifierToken_, align 8
  %40 = tail call ptr %39(ptr nonnull %36)
  %41 = load i1, ptr %memberidx.i.i84, align 1
  br i1 %41, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx22 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 9
  %memberidx27 = getelementptr inbounds %Scope, ptr %32, i64 0, i32 2
  %memberidx.i.i.i87 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 1
  %memberidx32 = getelementptr inbounds %Scope, ptr %32, i64 0, i32 4
  %memberidx37 = getelementptr inbounds %Scope, ptr %32, i64 0, i32 1
  %memberidx42 = getelementptr inbounds %Scope, ptr %32, i64 0, i32 3
  %memberidx47 = getelementptr inbounds %Scope, ptr %32, i64 0, i32 6
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.incr
  %storemerge146 = phi ptr [ %40, %for.body.lr.ph ], [ %49, %for.incr ]
  %memberidx21 = getelementptr inbounds %IdentifierToken, ptr %storemerge146, i64 0, i32 2
  %42 = load ptr, ptr %memberidx21, align 8
  %43 = load ptr, ptr %memberidx22, align 8
  %44 = load ptr, ptr %43, align 8
  %memberidx23 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %44, i64 0, i32 1
  %45 = load ptr, ptr %memberidx23, align 8
  %46 = tail call ptr %45(ptr nonnull %43, ptr %42)
  %.not = icmp eq ptr %46, null
  br i1 %.not, label %ifend26, label %for.incr

for.incr:                                         ; preds = %for.body, %if.entry49, %if.entry44, %if.entry39, %if.entry34, %if.entry29
  %47 = load ptr, ptr %36, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = tail call ptr %48(ptr nonnull %36)
  %50 = load i1, ptr %memberidx.i.i84, align 1
  br i1 %50, label %for.end, label %for.body

for.end:                                          ; preds = %for.incr, %for.entry
  tail call void @free(ptr nonnull %36)
  br label %common.ret

ifend26:                                          ; preds = %for.body
  %51 = load ptr, ptr %memberidx27, align 8
  %52 = load ptr, ptr %51, align 8
  %memberidx28 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %52, i64 0, i32 1
  %53 = load ptr, ptr %memberidx28, align 8
  %54 = tail call ptr %53(ptr nonnull %51, ptr %42)
  %.not71 = icmp eq ptr %54, null
  br i1 %.not71, label %ifend31, label %if.entry29

if.entry29:                                       ; preds = %ifend26
  %55 = load i64, ptr %memberidx.i.i.i87, align 4
  %56 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i.i = getelementptr inbounds %Program, ptr %56, i64 0, i32 1
  %57 = load ptr, ptr %memberidx1.i.i.i.i, align 8
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %57, i64 0, i32 1
  %58 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %58, i64 %55
  %59 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  %memberidx.i.i88 = getelementptr inbounds %Module, ptr %59, i64 0, i32 7
  %60 = load ptr, ptr %memberidx.i.i88, align 8
  %memberidx.i1.i.i = getelementptr inbounds %Array_Scope_, ptr %60, i64 0, i32 1
  %61 = load ptr, ptr %memberidx.i1.i.i, align 8
  %62 = load ptr, ptr %61, align 8
  %memberidx.i89 = getelementptr inbounds %Scope, ptr %62, i64 0, i32 2
  %63 = load ptr, ptr %memberidx.i89, align 8
  %64 = load ptr, ptr %63, align 8
  %65 = load ptr, ptr %64, align 8
  tail call void %65(ptr nonnull %63, ptr %42, ptr nonnull %54)
  %memberidx2.i90 = getelementptr inbounds %Scope, ptr %62, i64 0, i32 1
  %66 = load ptr, ptr %memberidx2.i90, align 8
  %67 = load ptr, ptr %66, align 8
  %68 = load ptr, ptr %67, align 8
  %69 = tail call ptr @malloc(i32 24)
  %70 = load i64, ptr %54, align 4
  %memberidx1.i.i91 = getelementptr inbounds %TypeId, ptr %54, i64 0, i32 2
  %71 = load i64, ptr %memberidx1.i.i91, align 4
  store i64 3, ptr %69, align 4
  %memberidx1.i.i.i = getelementptr inbounds %VarId, ptr %69, i64 0, i32 1
  store i64 %70, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i92 = getelementptr inbounds %VarId, ptr %69, i64 0, i32 2
  store i64 %71, ptr %memberidx2.i.i.i92, align 4
  tail call void %68(ptr nonnull %66, ptr %42, ptr nonnull %69)
  br label %for.incr

ifend31:                                          ; preds = %ifend26
  %72 = load ptr, ptr %memberidx32, align 8
  %73 = load ptr, ptr %72, align 8
  %memberidx33 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %73, i64 0, i32 1
  %74 = load ptr, ptr %memberidx33, align 8
  %75 = tail call ptr %74(ptr nonnull %72, ptr %42)
  %.not72 = icmp eq ptr %75, null
  br i1 %.not72, label %ifend36, label %if.entry34

if.entry34:                                       ; preds = %ifend31
  %76 = load i64, ptr %memberidx.i.i.i87, align 4
  %77 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i.i94 = getelementptr inbounds %Program, ptr %77, i64 0, i32 1
  %78 = load ptr, ptr %memberidx1.i.i.i.i94, align 8
  %memberidx.i.i.i.i.i95 = getelementptr inbounds %Array_Module_, ptr %78, i64 0, i32 1
  %79 = load ptr, ptr %memberidx.i.i.i.i.i95, align 8
  %ptridx.i.i.i.i.i96 = getelementptr inbounds ptr, ptr %79, i64 %76
  %80 = load ptr, ptr %ptridx.i.i.i.i.i96, align 8
  %memberidx.i.i97 = getelementptr inbounds %Module, ptr %80, i64 0, i32 7
  %81 = load ptr, ptr %memberidx.i.i97, align 8
  %memberidx.i1.i.i98 = getelementptr inbounds %Array_Scope_, ptr %81, i64 0, i32 1
  %82 = load ptr, ptr %memberidx.i1.i.i98, align 8
  %83 = load ptr, ptr %82, align 8
  %memberidx.i99 = getelementptr inbounds %Scope, ptr %83, i64 0, i32 4
  %84 = load ptr, ptr %memberidx.i99, align 8
  %85 = load ptr, ptr %84, align 8
  %86 = load ptr, ptr %85, align 8
  tail call void %86(ptr nonnull %84, ptr %42, ptr nonnull %75)
  %memberidx2.i100 = getelementptr inbounds %Scope, ptr %83, i64 0, i32 1
  %87 = load ptr, ptr %memberidx2.i100, align 8
  %88 = load ptr, ptr %87, align 8
  %89 = load ptr, ptr %88, align 8
  %90 = tail call ptr @malloc(i32 24)
  %91 = load i64, ptr %75, align 4
  %memberidx1.i.i101 = getelementptr inbounds %TypeId, ptr %75, i64 0, i32 2
  %92 = load i64, ptr %memberidx1.i.i101, align 4
  store i64 4, ptr %90, align 4
  %memberidx1.i.i.i102 = getelementptr inbounds %VarId, ptr %90, i64 0, i32 1
  store i64 %91, ptr %memberidx1.i.i.i102, align 4
  %memberidx2.i.i.i103 = getelementptr inbounds %VarId, ptr %90, i64 0, i32 2
  store i64 %92, ptr %memberidx2.i.i.i103, align 4
  tail call void %89(ptr nonnull %87, ptr %42, ptr nonnull %90)
  br label %for.incr

ifend36:                                          ; preds = %ifend31
  %93 = load ptr, ptr %memberidx37, align 8
  %94 = load ptr, ptr %93, align 8
  %memberidx38 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %94, i64 0, i32 1
  %95 = load ptr, ptr %memberidx38, align 8
  %96 = tail call ptr %95(ptr nonnull %93, ptr %42)
  %.not73 = icmp eq ptr %96, null
  br i1 %.not73, label %ifend41, label %if.entry39

if.entry39:                                       ; preds = %ifend36
  %97 = load i64, ptr %memberidx.i.i.i87, align 4
  %98 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i.i105 = getelementptr inbounds %Program, ptr %98, i64 0, i32 1
  %99 = load ptr, ptr %memberidx1.i.i.i.i105, align 8
  %memberidx.i.i.i.i.i106 = getelementptr inbounds %Array_Module_, ptr %99, i64 0, i32 1
  %100 = load ptr, ptr %memberidx.i.i.i.i.i106, align 8
  %ptridx.i.i.i.i.i107 = getelementptr inbounds ptr, ptr %100, i64 %97
  %101 = load ptr, ptr %ptridx.i.i.i.i.i107, align 8
  %memberidx.i.i108 = getelementptr inbounds %Module, ptr %101, i64 0, i32 7
  %102 = load ptr, ptr %memberidx.i.i108, align 8
  %memberidx.i1.i.i109 = getelementptr inbounds %Array_Scope_, ptr %102, i64 0, i32 1
  %103 = load ptr, ptr %memberidx.i1.i.i109, align 8
  %104 = load ptr, ptr %103, align 8
  %memberidx.i110 = getelementptr inbounds %Scope, ptr %104, i64 0, i32 1
  %105 = load ptr, ptr %memberidx.i110, align 8
  %106 = load ptr, ptr %105, align 8
  %107 = load ptr, ptr %106, align 8
  tail call void %107(ptr nonnull %105, ptr %42, ptr nonnull %96)
  br label %for.incr

ifend41:                                          ; preds = %ifend36
  %108 = load ptr, ptr %memberidx42, align 8
  %109 = load ptr, ptr %108, align 8
  %memberidx43 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %109, i64 0, i32 1
  %110 = load ptr, ptr %memberidx43, align 8
  %111 = tail call ptr %110(ptr nonnull %108, ptr %42)
  %.not74 = icmp eq ptr %111, null
  br i1 %.not74, label %ifend46, label %if.entry44

if.entry44:                                       ; preds = %ifend41
  %112 = load i64, ptr %memberidx.i.i.i87, align 4
  %113 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i.i112 = getelementptr inbounds %Program, ptr %113, i64 0, i32 1
  %114 = load ptr, ptr %memberidx1.i.i.i.i112, align 8
  %memberidx.i.i.i.i.i113 = getelementptr inbounds %Array_Module_, ptr %114, i64 0, i32 1
  %115 = load ptr, ptr %memberidx.i.i.i.i.i113, align 8
  %ptridx.i.i.i.i.i114 = getelementptr inbounds ptr, ptr %115, i64 %112
  %116 = load ptr, ptr %ptridx.i.i.i.i.i114, align 8
  %memberidx.i.i115 = getelementptr inbounds %Module, ptr %116, i64 0, i32 7
  %117 = load ptr, ptr %memberidx.i.i115, align 8
  %memberidx.i1.i.i116 = getelementptr inbounds %Array_Scope_, ptr %117, i64 0, i32 1
  %118 = load ptr, ptr %memberidx.i1.i.i116, align 8
  %119 = load ptr, ptr %118, align 8
  %memberidx.i117 = getelementptr inbounds %Scope, ptr %119, i64 0, i32 3
  %120 = load ptr, ptr %memberidx.i117, align 8
  %121 = load ptr, ptr %120, align 8
  %122 = load ptr, ptr %121, align 8
  tail call void %122(ptr nonnull %120, ptr %42, ptr nonnull %111)
  br label %for.incr

ifend46:                                          ; preds = %ifend41
  %123 = load ptr, ptr %memberidx47, align 8
  %124 = load ptr, ptr %123, align 8
  %memberidx48 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %124, i64 0, i32 1
  %125 = load ptr, ptr %memberidx48, align 8
  %126 = tail call ptr %125(ptr nonnull %123, ptr %42)
  %.not75 = icmp eq ptr %126, null
  br i1 %.not75, label %else50, label %if.entry49

if.entry49:                                       ; preds = %ifend46
  %127 = load i64, ptr %memberidx.i.i.i87, align 4
  %128 = load ptr, ptr %0, align 8
  %memberidx1.i.i.i.i119 = getelementptr inbounds %Program, ptr %128, i64 0, i32 1
  %129 = load ptr, ptr %memberidx1.i.i.i.i119, align 8
  %memberidx.i.i.i.i.i120 = getelementptr inbounds %Array_Module_, ptr %129, i64 0, i32 1
  %130 = load ptr, ptr %memberidx.i.i.i.i.i120, align 8
  %ptridx.i.i.i.i.i121 = getelementptr inbounds ptr, ptr %130, i64 %127
  %131 = load ptr, ptr %ptridx.i.i.i.i.i121, align 8
  %memberidx.i.i122 = getelementptr inbounds %Module, ptr %131, i64 0, i32 7
  %132 = load ptr, ptr %memberidx.i.i122, align 8
  %memberidx.i1.i.i123 = getelementptr inbounds %Array_Scope_, ptr %132, i64 0, i32 1
  %133 = load ptr, ptr %memberidx.i1.i.i123, align 8
  %134 = load ptr, ptr %133, align 8
  %memberidx.i124 = getelementptr inbounds %Scope, ptr %134, i64 0, i32 6
  %135 = load ptr, ptr %memberidx.i124, align 8
  %136 = load ptr, ptr %135, align 8
  %137 = load ptr, ptr %136, align 8
  tail call void %137(ptr nonnull %135, ptr %42, ptr nonnull %126)
  br label %for.incr

else50:                                           ; preds = %ifend46
  %138 = load ptr, ptr %42, align 8
  %memberidx52 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %138, i64 0, i32 5
  %139 = load ptr, ptr %memberidx52, align 8
  %140 = tail call ptr %139(ptr nonnull %42)
  %141 = load ptr, ptr %23, align 8
  %memberidx53 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %141, i64 0, i32 5
  %142 = load ptr, ptr %memberidx53, align 8
  %143 = tail call ptr %142(ptr nonnull %23)
  %144 = alloca ptr, align 8
  %145 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %144, ptr nonnull @153, ptr %140, ptr %143)
  %146 = load ptr, ptr %144, align 8
  %147 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %147, align 8
  %memberidx.i125 = getelementptr inbounds %string, ptr %147, i64 0, i32 1
  store ptr %146, ptr %memberidx.i125, align 8
  %memberidx1.i126 = getelementptr inbounds %string, ptr %147, i64 0, i32 2
  store i64 %145, ptr %memberidx1.i126, align 4
  %memberidx2.i127 = getelementptr inbounds %string, ptr %147, i64 0, i32 3
  store i64 %145, ptr %memberidx2.i127, align 4
  tail call void @free(ptr %140)
  tail call void @free(ptr %143)
  %memberidx54 = getelementptr inbounds %Token, ptr %storemerge146, i64 0, i32 1
  %148 = load ptr, ptr %memberidx54, align 8
  %149 = load ptr, ptr %memberidx.i79, align 8
  %memberidx1.i129 = getelementptr inbounds %Compiler, ptr %149, i64 0, i32 6
  %150 = load ptr, ptr %memberidx1.i129, align 8
  %151 = call ptr @malloc(i32 24)
  store i64 1, ptr %151, align 4
  %memberidx1.i.i130 = getelementptr inbounds %FloError, ptr %151, i64 0, i32 2
  store ptr %148, ptr %memberidx1.i.i130, align 8
  %memberidx2.i.i131 = getelementptr inbounds %FloError, ptr %151, i64 0, i32 1
  store ptr %147, ptr %memberidx2.i.i131, align 8
  %memberidx.i.i132 = getelementptr inbounds %Array_FloError_, ptr %150, i64 0, i32 2
  %152 = load i64, ptr %memberidx.i.i132, align 4
  %memberidx1.i2.i133 = getelementptr inbounds %Array_FloError_, ptr %150, i64 0, i32 3
  %153 = load i64, ptr %memberidx1.i2.i133, align 4
  %.not.i.i134 = icmp slt i64 %152, %153
  br i1 %.not.i.i134, label %else50.TypeChecker_error.exit140_crit_edge, label %if.entry.i.i137

else50.TypeChecker_error.exit140_crit_edge:       ; preds = %else50
  %memberidx4.i.i138.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %150, i64 0, i32 1
  %.pre149 = load ptr, ptr %memberidx4.i.i138.phi.trans.insert, align 8
  br label %TypeChecker_error.exit140

if.entry.i.i137:                                  ; preds = %else50
  %154 = shl i64 %153, 1
  store i64 %154, ptr %memberidx1.i2.i133, align 4
  %memberidx2.i.i.i136 = getelementptr inbounds %Array_FloError_, ptr %150, i64 0, i32 1
  %155 = load ptr, ptr %memberidx2.i.i.i136, align 8
  %156 = shl i64 %153, 4
  %157 = call ptr @realloc(ptr %155, i64 %156)
  store ptr %157, ptr %memberidx2.i.i.i136, align 8
  %.pre = load i64, ptr %memberidx.i.i132, align 4
  br label %TypeChecker_error.exit140

TypeChecker_error.exit140:                        ; preds = %else50.TypeChecker_error.exit140_crit_edge, %if.entry.i.i137
  %158 = phi ptr [ %.pre149, %else50.TypeChecker_error.exit140_crit_edge ], [ %157, %if.entry.i.i137 ]
  %159 = phi i64 [ %152, %else50.TypeChecker_error.exit140_crit_edge ], [ %.pre, %if.entry.i.i137 ]
  %160 = add i64 %159, 1
  store i64 %160, ptr %memberidx.i.i132, align 4
  %ptridx.i.i139 = getelementptr inbounds ptr, ptr %158, i64 %159
  store ptr %151, ptr %ptridx.i.i139, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_member_expr(ptr %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %3, align 4
  %memberidx = getelementptr inbounds %MemberExpressionNode, ptr %1, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %3, ptr %4)
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %6 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %6, i64 0, i32 6
  %7 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %7, i64 0, i32 2
  %8 = load i64, ptr %memberidx2.i, align 4
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %common.ret, label %ifend

common.ret:                                       ; preds = %2, %TypeChecker_error.exit331, %Array_Expression____sl__.exit, %TypeChecker_error.exit256, %TypeChecker_error.exit230, %TypeChecker_error.exit191, %TypeChecker_error.exit178, %TypeChecker_error.exit141, %TypeChecker_error.exit, %ifend6
  %common.ret.op = phi ptr [ %19, %ifend6 ], [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit141 ], [ null, %TypeChecker_error.exit178 ], [ null, %TypeChecker_error.exit191 ], [ null, %TypeChecker_error.exit230 ], [ null, %TypeChecker_error.exit256 ], [ %253, %Array_Expression____sl__.exit ], [ null, %TypeChecker_error.exit331 ], [ null, %2 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %2
  %memberidx1 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 3
  %10 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %MemberExpressionNode, ptr %1, i64 0, i32 4
  %11 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %IdentifierToken, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx3, align 8
  %13 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %13, align 4
  %14 = load i64, ptr %10, align 4
  switch i64 %14, label %else64 [
    i64 20, label %if.entry.i2
    i64 13, label %while.end
    i64 18, label %if.entry28
    i64 15, label %if.entry63
  ]

if.entry.i2:                                      ; preds = %ifend, %if.entry.i2
  %.tr5.i = phi ptr [ %15, %if.entry.i2 ], [ %10, %ifend ]
  %memberidx1.i1 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %15 = load ptr, ptr %memberidx1.i1, align 8
  %16 = load i64, ptr %15, align 4
  switch i64 %16, label %else64 [
    i64 20, label %if.entry.i2
    i64 13, label %while.entry
  ]

ifend6:                                           ; preds = %get_class_prop_type.exit214, %ifend56, %get_class_prop_type.exit
  %17 = phi ptr [ %common.ret.op.i201, %get_class_prop_type.exit214 ], [ %212, %ifend56 ], [ %common.ret.op.i, %get_class_prop_type.exit ]
  %18 = phi ptr [ %116, %get_class_prop_type.exit214 ], [ %125, %ifend56 ], [ %39, %get_class_prop_type.exit ]
  %19 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %19, align 4
  %memberidx.i.i = getelementptr inbounds %Expression, ptr %19, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Expression, ptr %19, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i, align 1
  %memberidx.i119 = getelementptr inbounds %MemberExpression, ptr %19, i64 0, i32 4
  store ptr %5, ptr %memberidx.i119, align 8
  %memberidx1.i120 = getelementptr inbounds %MemberExpression, ptr %19, i64 0, i32 5
  store ptr %18, ptr %memberidx1.i120, align 8
  %memberidx2.i121 = getelementptr inbounds %Expression, ptr %19, i64 0, i32 3
  store ptr %17, ptr %memberidx2.i121, align 8
  br label %common.ret

while.entry:                                      ; preds = %if.entry.i2, %while.entry
  %20 = phi ptr [ %21, %while.entry ], [ %10, %if.entry.i2 ]
  %memberidx8 = getelementptr inbounds %GenericType, ptr %20, i64 0, i32 3
  %21 = load ptr, ptr %memberidx8, align 8
  %22 = load i64, ptr %21, align 4
  %23 = icmp eq i64 %22, 20
  br i1 %23, label %while.entry, label %while.end

while.end:                                        ; preds = %while.entry, %ifend
  %24 = phi i64 [ %14, %ifend ], [ %22, %while.entry ]
  %.tr11.i16 = phi ptr [ %10, %ifend ], [ %21, %while.entry ]
  %25 = load ptr, ptr %0, align 8
  br label %tailrecurse.i

tailrecurse.i:                                    ; preds = %if.entry.i6, %while.end
  %26 = phi i64 [ %24, %while.end ], [ %.pre, %if.entry.i6 ]
  %.tr11.i = phi ptr [ %.tr11.i16, %while.end ], [ %.tr11.i.pre, %if.entry.i6 ]
  switch i64 %26, label %get_class_from_type.exit [
    i64 20, label %if.entry.i6
    i64 13, label %if.entry3.i
  ]

if.entry.i6:                                      ; preds = %tailrecurse.i
  %memberidx1.i5 = getelementptr inbounds %GenericType, ptr %.tr11.i, i64 0, i32 3
  %.tr11.i.pre = load ptr, ptr %memberidx1.i5, align 8
  %.pre = load i64, ptr %.tr11.i.pre, align 4
  br label %tailrecurse.i

if.entry3.i:                                      ; preds = %tailrecurse.i
  %memberidx6.i7 = getelementptr inbounds %ObjectType, ptr %.tr11.i, i64 0, i32 1
  %27 = load ptr, ptr %memberidx6.i7, align 8
  %memberidx.i.i8 = getelementptr inbounds %Program, ptr %25, i64 0, i32 1
  %28 = load ptr, ptr %memberidx.i.i8, align 8
  %29 = load i64, ptr %27, align 4
  %memberidx.i.i.i9 = getelementptr inbounds %Array_Module_, ptr %28, i64 0, i32 1
  %30 = load ptr, ptr %memberidx.i.i.i9, align 8
  %ptridx.i.i.i10 = getelementptr inbounds ptr, ptr %30, i64 %29
  %31 = load ptr, ptr %ptridx.i.i.i10, align 8
  %memberidx2.i.i11 = getelementptr inbounds %Module, ptr %31, i64 0, i32 4
  %32 = load ptr, ptr %memberidx2.i.i11, align 8
  %memberidx3.i.i = getelementptr inbounds %TypeId, ptr %27, i64 0, i32 2
  %33 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %32, i64 0, i32 1
  %34 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %34, i64 %33
  %35 = load ptr, ptr %ptridx.i6.i.i, align 8
  br label %get_class_from_type.exit

get_class_from_type.exit:                         ; preds = %tailrecurse.i, %if.entry3.i
  %common.ret.op.i4 = phi ptr [ %35, %if.entry3.i ], [ null, %tailrecurse.i ]
  %memberidx11 = getelementptr inbounds %Class, ptr %common.ret.op.i4, i64 0, i32 6
  %36 = load ptr, ptr %memberidx11, align 8
  %37 = load ptr, ptr %36, align 8
  %memberidx12 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %37, i64 0, i32 1
  %38 = load ptr, ptr %memberidx12, align 8
  %39 = tail call ptr %38(ptr nonnull %36, ptr %12)
  %40 = icmp eq ptr %39, null
  br i1 %40, label %if.entry13, label %ifend15

if.entry13:                                       ; preds = %get_class_from_type.exit
  %41 = load ptr, ptr %12, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %41, i64 0, i32 5
  %42 = load ptr, ptr %memberidx16, align 8
  %43 = tail call ptr %42(ptr nonnull %12)
  %memberidx17 = getelementptr inbounds %Class, ptr %common.ret.op.i4, i64 0, i32 1
  %44 = load ptr, ptr %memberidx17, align 8
  %45 = load ptr, ptr %44, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %45, i64 0, i32 5
  %46 = load ptr, ptr %memberidx18, align 8
  %47 = tail call ptr %46(ptr nonnull %44)
  %48 = alloca ptr, align 8
  %49 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %48, ptr nonnull @235, ptr %43, ptr %47)
  %50 = load ptr, ptr %48, align 8
  %51 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %51, align 8
  %memberidx.i122 = getelementptr inbounds %string, ptr %51, i64 0, i32 1
  store ptr %50, ptr %memberidx.i122, align 8
  %memberidx1.i123 = getelementptr inbounds %string, ptr %51, i64 0, i32 2
  store i64 %49, ptr %memberidx1.i123, align 4
  %memberidx2.i124 = getelementptr inbounds %string, ptr %51, i64 0, i32 3
  store i64 %49, ptr %memberidx2.i124, align 4
  tail call void @free(ptr %43)
  tail call void @free(ptr %47)
  %52 = load ptr, ptr %memberidx2, align 8
  %memberidx20 = getelementptr inbounds %Token, ptr %52, i64 0, i32 1
  %53 = load ptr, ptr %memberidx20, align 8
  %54 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i126 = getelementptr inbounds %Compiler, ptr %54, i64 0, i32 6
  %55 = load ptr, ptr %memberidx1.i126, align 8
  %56 = call ptr @malloc(i32 24)
  store i64 1, ptr %56, align 4
  %memberidx1.i.i127 = getelementptr inbounds %FloError, ptr %56, i64 0, i32 2
  store ptr %53, ptr %memberidx1.i.i127, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %56, i64 0, i32 1
  store ptr %51, ptr %memberidx2.i.i, align 8
  %memberidx.i.i128 = getelementptr inbounds %Array_FloError_, ptr %55, i64 0, i32 2
  %57 = load i64, ptr %memberidx.i.i128, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %55, i64 0, i32 3
  %58 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %57, %58
  br i1 %.not.i.i, label %if.entry13.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry13.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry13
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %55, i64 0, i32 1
  %.pre20 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry13
  %59 = shl i64 %58, 1
  store i64 %59, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %55, i64 0, i32 1
  %60 = load ptr, ptr %memberidx2.i.i.i, align 8
  %61 = shl i64 %58, 4
  %62 = call ptr @realloc(ptr %60, i64 %61)
  store ptr %62, ptr %memberidx2.i.i.i, align 8
  %.pre19 = load i64, ptr %memberidx.i.i128, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry13.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %63 = phi ptr [ %.pre20, %if.entry13.TypeChecker_error.exit_crit_edge ], [ %62, %if.entry.i.i ]
  %64 = phi i64 [ %57, %if.entry13.TypeChecker_error.exit_crit_edge ], [ %.pre19, %if.entry.i.i ]
  %65 = add i64 %64, 1
  store i64 %65, ptr %memberidx.i.i128, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %63, i64 %64
  store ptr %56, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend15:                                          ; preds = %get_class_from_type.exit
  %66 = tail call fastcc ptr @TypeChecker_check_member_access(ptr nonnull %0, ptr nonnull %39)
  %.not118 = icmp eq ptr %66, null
  br i1 %.not118, label %ifend23, label %if.entry21

if.entry21:                                       ; preds = %ifend15
  %67 = load ptr, ptr %memberidx2, align 8
  %memberidx25 = getelementptr inbounds %Token, ptr %67, i64 0, i32 1
  %68 = load ptr, ptr %memberidx25, align 8
  %69 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i130 = getelementptr inbounds %Compiler, ptr %69, i64 0, i32 6
  %70 = load ptr, ptr %memberidx1.i130, align 8
  %71 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %71, align 4
  %memberidx1.i.i131 = getelementptr inbounds %FloError, ptr %71, i64 0, i32 2
  store ptr %68, ptr %memberidx1.i.i131, align 8
  %memberidx2.i.i132 = getelementptr inbounds %FloError, ptr %71, i64 0, i32 1
  store ptr %66, ptr %memberidx2.i.i132, align 8
  %memberidx.i.i133 = getelementptr inbounds %Array_FloError_, ptr %70, i64 0, i32 2
  %72 = load i64, ptr %memberidx.i.i133, align 4
  %memberidx1.i2.i134 = getelementptr inbounds %Array_FloError_, ptr %70, i64 0, i32 3
  %73 = load i64, ptr %memberidx1.i2.i134, align 4
  %.not.i.i135 = icmp slt i64 %72, %73
  br i1 %.not.i.i135, label %if.entry21.TypeChecker_error.exit141_crit_edge, label %if.entry.i.i138

if.entry21.TypeChecker_error.exit141_crit_edge:   ; preds = %if.entry21
  %memberidx4.i.i139.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %70, i64 0, i32 1
  %.pre18 = load ptr, ptr %memberidx4.i.i139.phi.trans.insert, align 8
  br label %TypeChecker_error.exit141

if.entry.i.i138:                                  ; preds = %if.entry21
  %74 = shl i64 %73, 1
  store i64 %74, ptr %memberidx1.i2.i134, align 4
  %memberidx2.i.i.i137 = getelementptr inbounds %Array_FloError_, ptr %70, i64 0, i32 1
  %75 = load ptr, ptr %memberidx2.i.i.i137, align 8
  %76 = shl i64 %73, 4
  %77 = tail call ptr @realloc(ptr %75, i64 %76)
  store ptr %77, ptr %memberidx2.i.i.i137, align 8
  %.pre17 = load i64, ptr %memberidx.i.i133, align 4
  br label %TypeChecker_error.exit141

TypeChecker_error.exit141:                        ; preds = %if.entry21.TypeChecker_error.exit141_crit_edge, %if.entry.i.i138
  %78 = phi ptr [ %.pre18, %if.entry21.TypeChecker_error.exit141_crit_edge ], [ %77, %if.entry.i.i138 ]
  %79 = phi i64 [ %72, %if.entry21.TypeChecker_error.exit141_crit_edge ], [ %.pre17, %if.entry.i.i138 ]
  %80 = add i64 %79, 1
  store i64 %80, ptr %memberidx.i.i133, align 4
  %ptridx.i.i140 = getelementptr inbounds ptr, ptr %78, i64 %79
  store ptr %71, ptr %ptridx.i.i140, align 8
  br label %common.ret

ifend23:                                          ; preds = %ifend15
  %81 = load ptr, ptr %0, align 8
  %memberidx.i.i142 = getelementptr inbounds %PropId, ptr %39, i64 0, i32 1
  %82 = load ptr, ptr %memberidx.i.i142, align 8
  %memberidx.i.i.i143 = getelementptr inbounds %Program, ptr %81, i64 0, i32 1
  %83 = load ptr, ptr %memberidx.i.i.i143, align 8
  %84 = load i64, ptr %82, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %83, i64 0, i32 1
  %85 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %85, i64 %84
  %86 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i144 = getelementptr inbounds %Module, ptr %86, i64 0, i32 4
  %87 = load ptr, ptr %memberidx2.i.i.i144, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %82, i64 0, i32 2
  %88 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %87, i64 0, i32 1
  %89 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %89, i64 %88
  %90 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %91 = load i64, ptr %39, align 4
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %ifend23
  %memberidx1.i145 = getelementptr inbounds %Class, ptr %90, i64 0, i32 5
  %93 = load ptr, ptr %memberidx1.i145, align 8
  %memberidx2.i146 = getelementptr inbounds %PropId, ptr %39, i64 0, i32 2
  %94 = load i64, ptr %memberidx2.i146, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %93, i64 0, i32 1
  %95 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %95, i64 %94
  %96 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %96, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %ifend23
  %memberidx4.i = getelementptr inbounds %Class, ptr %90, i64 0, i32 4
  %97 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %39, i64 0, i32 2
  %98 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %97, i64 0, i32 1
  %99 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i147 = getelementptr inbounds ptr, ptr %99, i64 %98
  %100 = load ptr, ptr %ptridx.i.i147, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %100, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i = load ptr, ptr %common.ret.op.in.i, align 8
  br label %ifend6

if.entry28:                                       ; preds = %ifend
  %memberidx31 = getelementptr inbounds %VarAccessExpression, ptr %5, i64 0, i32 4
  %101 = load ptr, ptr %memberidx31, align 8
  %102 = load i64, ptr %101, align 4
  %103 = icmp eq i64 %102, 3
  %memberidx.i148 = getelementptr inbounds %VarId, ptr %101, i64 0, i32 1
  %104 = load i64, ptr %memberidx.i148, align 4
  %105 = load ptr, ptr %0, align 8
  %memberidx1.i.i149 = getelementptr inbounds %Program, ptr %105, i64 0, i32 1
  %106 = load ptr, ptr %memberidx1.i.i149, align 8
  %memberidx.i.i.i150 = getelementptr inbounds %Array_Module_, ptr %106, i64 0, i32 1
  %107 = load ptr, ptr %memberidx.i.i.i150, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %107, i64 %104
  %108 = load ptr, ptr %ptridx.i.i.i, align 8
  br i1 %103, label %if.entry33, label %else34

if.entry33:                                       ; preds = %if.entry28
  %memberidx1.i151 = getelementptr inbounds %Module, ptr %108, i64 0, i32 4
  %109 = load ptr, ptr %memberidx1.i151, align 8
  %memberidx2.i152 = getelementptr inbounds %VarId, ptr %101, i64 0, i32 2
  %110 = load i64, ptr %memberidx2.i152, align 4
  %memberidx.i.i153 = getelementptr inbounds %Array_Class_, ptr %109, i64 0, i32 1
  %111 = load ptr, ptr %memberidx.i.i153, align 8
  %ptridx.i.i154 = getelementptr inbounds ptr, ptr %111, i64 %110
  %112 = load ptr, ptr %ptridx.i.i154, align 8
  %memberidx36 = getelementptr inbounds %Class, ptr %112, i64 0, i32 7
  %113 = load ptr, ptr %memberidx36, align 8
  %114 = load ptr, ptr %113, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %114, i64 0, i32 1
  %115 = load ptr, ptr %memberidx37, align 8
  %116 = tail call ptr %115(ptr nonnull %113, ptr %12)
  %117 = icmp eq ptr %116, null
  br i1 %117, label %if.entry38, label %ifend40

else34:                                           ; preds = %if.entry28
  %memberidx1.i159 = getelementptr inbounds %Module, ptr %108, i64 0, i32 6
  %118 = load ptr, ptr %memberidx1.i159, align 8
  %memberidx2.i160 = getelementptr inbounds %VarId, ptr %101, i64 0, i32 2
  %119 = load i64, ptr %memberidx2.i160, align 4
  %memberidx.i.i161 = getelementptr inbounds %Array_Enum_, ptr %118, i64 0, i32 1
  %120 = load ptr, ptr %memberidx.i.i161, align 8
  %ptridx.i.i162 = getelementptr inbounds ptr, ptr %120, i64 %119
  %121 = load ptr, ptr %ptridx.i.i162, align 8
  %memberidx52 = getelementptr inbounds %Enum, ptr %121, i64 0, i32 3
  %122 = load ptr, ptr %memberidx52, align 8
  %123 = load ptr, ptr %122, align 8
  %memberidx53 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %123, i64 0, i32 1
  %124 = load ptr, ptr %memberidx53, align 8
  %125 = tail call ptr %124(ptr nonnull %122, ptr %12)
  %126 = icmp eq ptr %125, null
  br i1 %126, label %if.entry54, label %ifend56

if.entry38:                                       ; preds = %if.entry33
  %127 = load ptr, ptr %12, align 8
  %memberidx41 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %127, i64 0, i32 5
  %128 = load ptr, ptr %memberidx41, align 8
  %129 = tail call ptr %128(ptr nonnull %12)
  %memberidx42 = getelementptr inbounds %Class, ptr %112, i64 0, i32 1
  %130 = load ptr, ptr %memberidx42, align 8
  %131 = load ptr, ptr %130, align 8
  %memberidx43 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %131, i64 0, i32 5
  %132 = load ptr, ptr %memberidx43, align 8
  %133 = tail call ptr %132(ptr nonnull %130)
  %134 = alloca ptr, align 8
  %135 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %134, ptr nonnull @236, ptr %129, ptr %133)
  %136 = load ptr, ptr %134, align 8
  %137 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %137, align 8
  %memberidx.i163 = getelementptr inbounds %string, ptr %137, i64 0, i32 1
  store ptr %136, ptr %memberidx.i163, align 8
  %memberidx1.i164 = getelementptr inbounds %string, ptr %137, i64 0, i32 2
  store i64 %135, ptr %memberidx1.i164, align 4
  %memberidx2.i165 = getelementptr inbounds %string, ptr %137, i64 0, i32 3
  store i64 %135, ptr %memberidx2.i165, align 4
  tail call void @free(ptr %129)
  tail call void @free(ptr %133)
  %138 = load ptr, ptr %memberidx2, align 8
  %memberidx45 = getelementptr inbounds %Token, ptr %138, i64 0, i32 1
  %139 = load ptr, ptr %memberidx45, align 8
  %140 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i167 = getelementptr inbounds %Compiler, ptr %140, i64 0, i32 6
  %141 = load ptr, ptr %memberidx1.i167, align 8
  %142 = call ptr @malloc(i32 24)
  store i64 1, ptr %142, align 4
  %memberidx1.i.i168 = getelementptr inbounds %FloError, ptr %142, i64 0, i32 2
  store ptr %139, ptr %memberidx1.i.i168, align 8
  %memberidx2.i.i169 = getelementptr inbounds %FloError, ptr %142, i64 0, i32 1
  store ptr %137, ptr %memberidx2.i.i169, align 8
  %memberidx.i.i170 = getelementptr inbounds %Array_FloError_, ptr %141, i64 0, i32 2
  %143 = load i64, ptr %memberidx.i.i170, align 4
  %memberidx1.i2.i171 = getelementptr inbounds %Array_FloError_, ptr %141, i64 0, i32 3
  %144 = load i64, ptr %memberidx1.i2.i171, align 4
  %.not.i.i172 = icmp slt i64 %143, %144
  br i1 %.not.i.i172, label %if.entry38.TypeChecker_error.exit178_crit_edge, label %if.entry.i.i175

if.entry38.TypeChecker_error.exit178_crit_edge:   ; preds = %if.entry38
  %memberidx4.i.i176.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %141, i64 0, i32 1
  %.pre30 = load ptr, ptr %memberidx4.i.i176.phi.trans.insert, align 8
  br label %TypeChecker_error.exit178

if.entry.i.i175:                                  ; preds = %if.entry38
  %145 = shl i64 %144, 1
  store i64 %145, ptr %memberidx1.i2.i171, align 4
  %memberidx2.i.i.i174 = getelementptr inbounds %Array_FloError_, ptr %141, i64 0, i32 1
  %146 = load ptr, ptr %memberidx2.i.i.i174, align 8
  %147 = shl i64 %144, 4
  %148 = call ptr @realloc(ptr %146, i64 %147)
  store ptr %148, ptr %memberidx2.i.i.i174, align 8
  %.pre29 = load i64, ptr %memberidx.i.i170, align 4
  br label %TypeChecker_error.exit178

TypeChecker_error.exit178:                        ; preds = %if.entry38.TypeChecker_error.exit178_crit_edge, %if.entry.i.i175
  %149 = phi ptr [ %.pre30, %if.entry38.TypeChecker_error.exit178_crit_edge ], [ %148, %if.entry.i.i175 ]
  %150 = phi i64 [ %143, %if.entry38.TypeChecker_error.exit178_crit_edge ], [ %.pre29, %if.entry.i.i175 ]
  %151 = add i64 %150, 1
  store i64 %151, ptr %memberidx.i.i170, align 4
  %ptridx.i.i177 = getelementptr inbounds ptr, ptr %149, i64 %150
  store ptr %142, ptr %ptridx.i.i177, align 8
  br label %common.ret

ifend40:                                          ; preds = %if.entry33
  %152 = tail call fastcc ptr @TypeChecker_check_member_access(ptr nonnull %0, ptr nonnull %116)
  %.not = icmp eq ptr %152, null
  br i1 %.not, label %ifend48, label %if.entry46

if.entry46:                                       ; preds = %ifend40
  %153 = load ptr, ptr %memberidx2, align 8
  %memberidx50 = getelementptr inbounds %Token, ptr %153, i64 0, i32 1
  %154 = load ptr, ptr %memberidx50, align 8
  %155 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i180 = getelementptr inbounds %Compiler, ptr %155, i64 0, i32 6
  %156 = load ptr, ptr %memberidx1.i180, align 8
  %157 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %157, align 4
  %memberidx1.i.i181 = getelementptr inbounds %FloError, ptr %157, i64 0, i32 2
  store ptr %154, ptr %memberidx1.i.i181, align 8
  %memberidx2.i.i182 = getelementptr inbounds %FloError, ptr %157, i64 0, i32 1
  store ptr %152, ptr %memberidx2.i.i182, align 8
  %memberidx.i.i183 = getelementptr inbounds %Array_FloError_, ptr %156, i64 0, i32 2
  %158 = load i64, ptr %memberidx.i.i183, align 4
  %memberidx1.i2.i184 = getelementptr inbounds %Array_FloError_, ptr %156, i64 0, i32 3
  %159 = load i64, ptr %memberidx1.i2.i184, align 4
  %.not.i.i185 = icmp slt i64 %158, %159
  br i1 %.not.i.i185, label %if.entry46.TypeChecker_error.exit191_crit_edge, label %if.entry.i.i188

if.entry46.TypeChecker_error.exit191_crit_edge:   ; preds = %if.entry46
  %memberidx4.i.i189.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %156, i64 0, i32 1
  %.pre28 = load ptr, ptr %memberidx4.i.i189.phi.trans.insert, align 8
  br label %TypeChecker_error.exit191

if.entry.i.i188:                                  ; preds = %if.entry46
  %160 = shl i64 %159, 1
  store i64 %160, ptr %memberidx1.i2.i184, align 4
  %memberidx2.i.i.i187 = getelementptr inbounds %Array_FloError_, ptr %156, i64 0, i32 1
  %161 = load ptr, ptr %memberidx2.i.i.i187, align 8
  %162 = shl i64 %159, 4
  %163 = tail call ptr @realloc(ptr %161, i64 %162)
  store ptr %163, ptr %memberidx2.i.i.i187, align 8
  %.pre27 = load i64, ptr %memberidx.i.i183, align 4
  br label %TypeChecker_error.exit191

TypeChecker_error.exit191:                        ; preds = %if.entry46.TypeChecker_error.exit191_crit_edge, %if.entry.i.i188
  %164 = phi ptr [ %.pre28, %if.entry46.TypeChecker_error.exit191_crit_edge ], [ %163, %if.entry.i.i188 ]
  %165 = phi i64 [ %158, %if.entry46.TypeChecker_error.exit191_crit_edge ], [ %.pre27, %if.entry.i.i188 ]
  %166 = add i64 %165, 1
  store i64 %166, ptr %memberidx.i.i183, align 4
  %ptridx.i.i190 = getelementptr inbounds ptr, ptr %164, i64 %165
  store ptr %157, ptr %ptridx.i.i190, align 8
  br label %common.ret

ifend48:                                          ; preds = %ifend40
  %167 = load ptr, ptr %0, align 8
  %memberidx.i.i192 = getelementptr inbounds %PropId, ptr %116, i64 0, i32 1
  %168 = load ptr, ptr %memberidx.i.i192, align 8
  %memberidx.i.i.i193 = getelementptr inbounds %Program, ptr %167, i64 0, i32 1
  %169 = load ptr, ptr %memberidx.i.i.i193, align 8
  %170 = load i64, ptr %168, align 4
  %memberidx.i.i.i.i194 = getelementptr inbounds %Array_Module_, ptr %169, i64 0, i32 1
  %171 = load ptr, ptr %memberidx.i.i.i.i194, align 8
  %ptridx.i.i.i.i195 = getelementptr inbounds ptr, ptr %171, i64 %170
  %172 = load ptr, ptr %ptridx.i.i.i.i195, align 8
  %memberidx2.i.i.i196 = getelementptr inbounds %Module, ptr %172, i64 0, i32 4
  %173 = load ptr, ptr %memberidx2.i.i.i196, align 8
  %memberidx3.i.i.i197 = getelementptr inbounds %TypeId, ptr %168, i64 0, i32 2
  %174 = load i64, ptr %memberidx3.i.i.i197, align 4
  %memberidx.i5.i.i.i198 = getelementptr inbounds %Array_Class_, ptr %173, i64 0, i32 1
  %175 = load ptr, ptr %memberidx.i5.i.i.i198, align 8
  %ptridx.i6.i.i.i199 = getelementptr inbounds ptr, ptr %175, i64 %174
  %176 = load ptr, ptr %ptridx.i6.i.i.i199, align 8
  %177 = load i64, ptr %116, align 4
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %if.entry.i207, label %ifend.i213

if.entry.i207:                                    ; preds = %ifend48
  %memberidx1.i202 = getelementptr inbounds %Class, ptr %176, i64 0, i32 5
  %179 = load ptr, ptr %memberidx1.i202, align 8
  %memberidx2.i203 = getelementptr inbounds %PropId, ptr %116, i64 0, i32 2
  %180 = load i64, ptr %memberidx2.i203, align 4
  %memberidx.i12.i204 = getelementptr inbounds %Array_ClassMethod_, ptr %179, i64 0, i32 1
  %181 = load ptr, ptr %memberidx.i12.i204, align 8
  %ptridx.i13.i205 = getelementptr inbounds ptr, ptr %181, i64 %180
  %182 = load ptr, ptr %ptridx.i13.i205, align 8
  %memberidx3.i206 = getelementptr inbounds %ClassMethod, ptr %182, i64 0, i32 4
  br label %get_class_prop_type.exit214

ifend.i213:                                       ; preds = %ifend48
  %memberidx4.i208 = getelementptr inbounds %Class, ptr %176, i64 0, i32 4
  %183 = load ptr, ptr %memberidx4.i208, align 8
  %memberidx5.i209 = getelementptr inbounds %PropId, ptr %116, i64 0, i32 2
  %184 = load i64, ptr %memberidx5.i209, align 4
  %memberidx.i11.i210 = getelementptr inbounds %Array_ClassField_, ptr %183, i64 0, i32 1
  %185 = load ptr, ptr %memberidx.i11.i210, align 8
  %ptridx.i.i211 = getelementptr inbounds ptr, ptr %185, i64 %184
  %186 = load ptr, ptr %ptridx.i.i211, align 8
  %memberidx6.i212 = getelementptr inbounds %ClassField, ptr %186, i64 0, i32 4
  br label %get_class_prop_type.exit214

get_class_prop_type.exit214:                      ; preds = %if.entry.i207, %ifend.i213
  %common.ret.op.in.i200 = phi ptr [ %memberidx3.i206, %if.entry.i207 ], [ %memberidx6.i212, %ifend.i213 ]
  %common.ret.op.i201 = load ptr, ptr %common.ret.op.in.i200, align 8
  br label %ifend6

if.entry54:                                       ; preds = %else34
  %187 = load ptr, ptr %12, align 8
  %memberidx57 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %187, i64 0, i32 5
  %188 = load ptr, ptr %memberidx57, align 8
  %189 = tail call ptr %188(ptr nonnull %12)
  %memberidx58 = getelementptr inbounds %Enum, ptr %121, i64 0, i32 1
  %190 = load ptr, ptr %memberidx58, align 8
  %191 = load ptr, ptr %190, align 8
  %memberidx59 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %191, i64 0, i32 5
  %192 = load ptr, ptr %memberidx59, align 8
  %193 = tail call ptr %192(ptr nonnull %190)
  %194 = alloca ptr, align 8
  %195 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %194, ptr nonnull @237, ptr %189, ptr %193)
  %196 = load ptr, ptr %194, align 8
  %197 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %197, align 8
  %memberidx.i215 = getelementptr inbounds %string, ptr %197, i64 0, i32 1
  store ptr %196, ptr %memberidx.i215, align 8
  %memberidx1.i216 = getelementptr inbounds %string, ptr %197, i64 0, i32 2
  store i64 %195, ptr %memberidx1.i216, align 4
  %memberidx2.i217 = getelementptr inbounds %string, ptr %197, i64 0, i32 3
  store i64 %195, ptr %memberidx2.i217, align 4
  tail call void @free(ptr %189)
  tail call void @free(ptr %193)
  %198 = load ptr, ptr %memberidx2, align 8
  %memberidx61 = getelementptr inbounds %Token, ptr %198, i64 0, i32 1
  %199 = load ptr, ptr %memberidx61, align 8
  %200 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i219 = getelementptr inbounds %Compiler, ptr %200, i64 0, i32 6
  %201 = load ptr, ptr %memberidx1.i219, align 8
  %202 = call ptr @malloc(i32 24)
  store i64 1, ptr %202, align 4
  %memberidx1.i.i220 = getelementptr inbounds %FloError, ptr %202, i64 0, i32 2
  store ptr %199, ptr %memberidx1.i.i220, align 8
  %memberidx2.i.i221 = getelementptr inbounds %FloError, ptr %202, i64 0, i32 1
  store ptr %197, ptr %memberidx2.i.i221, align 8
  %memberidx.i.i222 = getelementptr inbounds %Array_FloError_, ptr %201, i64 0, i32 2
  %203 = load i64, ptr %memberidx.i.i222, align 4
  %memberidx1.i2.i223 = getelementptr inbounds %Array_FloError_, ptr %201, i64 0, i32 3
  %204 = load i64, ptr %memberidx1.i2.i223, align 4
  %.not.i.i224 = icmp slt i64 %203, %204
  br i1 %.not.i.i224, label %if.entry54.TypeChecker_error.exit230_crit_edge, label %if.entry.i.i227

if.entry54.TypeChecker_error.exit230_crit_edge:   ; preds = %if.entry54
  %memberidx4.i.i228.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %201, i64 0, i32 1
  %.pre26 = load ptr, ptr %memberidx4.i.i228.phi.trans.insert, align 8
  br label %TypeChecker_error.exit230

if.entry.i.i227:                                  ; preds = %if.entry54
  %205 = shl i64 %204, 1
  store i64 %205, ptr %memberidx1.i2.i223, align 4
  %memberidx2.i.i.i226 = getelementptr inbounds %Array_FloError_, ptr %201, i64 0, i32 1
  %206 = load ptr, ptr %memberidx2.i.i.i226, align 8
  %207 = shl i64 %204, 4
  %208 = call ptr @realloc(ptr %206, i64 %207)
  store ptr %208, ptr %memberidx2.i.i.i226, align 8
  %.pre25 = load i64, ptr %memberidx.i.i222, align 4
  br label %TypeChecker_error.exit230

TypeChecker_error.exit230:                        ; preds = %if.entry54.TypeChecker_error.exit230_crit_edge, %if.entry.i.i227
  %209 = phi ptr [ %.pre26, %if.entry54.TypeChecker_error.exit230_crit_edge ], [ %208, %if.entry.i.i227 ]
  %210 = phi i64 [ %203, %if.entry54.TypeChecker_error.exit230_crit_edge ], [ %.pre25, %if.entry.i.i227 ]
  %211 = add i64 %210, 1
  store i64 %211, ptr %memberidx.i.i222, align 4
  %ptridx.i.i229 = getelementptr inbounds ptr, ptr %209, i64 %210
  store ptr %202, ptr %ptridx.i.i229, align 8
  br label %common.ret

ifend56:                                          ; preds = %else34
  %212 = tail call ptr @malloc(i32 16)
  %213 = load ptr, ptr %121, align 8
  store i64 14, ptr %212, align 4
  %memberidx.i231 = getelementptr inbounds %EnumType, ptr %212, i64 0, i32 1
  store ptr %213, ptr %memberidx.i231, align 8
  br label %ifend6

if.entry63:                                       ; preds = %ifend
  %214 = tail call ptr @malloc(i32 72)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %214, ptr noundef nonnull align 8 dereferenceable(9) @238, i64 9, i1 false)
  %215 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %215, align 8
  %memberidx.i.i232 = getelementptr inbounds %string, ptr %215, i64 0, i32 1
  store ptr %214, ptr %memberidx.i.i232, align 8
  %memberidx1.i.i233 = getelementptr inbounds %string, ptr %215, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i233, align 4
  %memberidx2.i.i234 = getelementptr inbounds %string, ptr %215, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i234, align 4
  %memberidx.i235 = getelementptr inbounds %string, ptr %12, i64 0, i32 2
  %216 = load i64, ptr %memberidx.i235, align 4
  %.not.i = icmp eq i64 %216, 9
  br i1 %.not.i, label %ifend.i240, label %else67

ifend.i240:                                       ; preds = %if.entry63
  %memberidx2.i238 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %217 = load ptr, ptr %memberidx2.i238, align 8
  %218 = tail call i64 @memcmp(ptr %217, ptr nonnull %214, i64 9)
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %ifend68, label %else67

else64:                                           ; preds = %if.entry.i2, %ifend
  %220 = load ptr, ptr %12, align 8
  %memberidx85 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %220, i64 0, i32 5
  %221 = load ptr, ptr %memberidx85, align 8
  %222 = tail call ptr %221(ptr nonnull %12)
  %223 = load ptr, ptr %memberidx1, align 8
  %224 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %223)
  %225 = load ptr, ptr %224, align 8
  %memberidx87 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %225, i64 0, i32 5
  %226 = load ptr, ptr %memberidx87, align 8
  %227 = tail call ptr %226(ptr nonnull %224)
  %228 = alloca ptr, align 8
  %229 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %228, ptr nonnull @244, ptr %222, ptr %227)
  %230 = load ptr, ptr %228, align 8
  %231 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %231, align 8
  %memberidx.i241 = getelementptr inbounds %string, ptr %231, i64 0, i32 1
  store ptr %230, ptr %memberidx.i241, align 8
  %memberidx1.i242 = getelementptr inbounds %string, ptr %231, i64 0, i32 2
  store i64 %229, ptr %memberidx1.i242, align 4
  %memberidx2.i243 = getelementptr inbounds %string, ptr %231, i64 0, i32 3
  store i64 %229, ptr %memberidx2.i243, align 4
  tail call void @free(ptr %222)
  tail call void @free(ptr %227)
  %232 = load ptr, ptr %memberidx, align 8
  %233 = load ptr, ptr %232, align 8
  %234 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i245 = getelementptr inbounds %Compiler, ptr %234, i64 0, i32 6
  %235 = load ptr, ptr %memberidx1.i245, align 8
  %236 = call ptr @malloc(i32 24)
  store i64 4, ptr %236, align 4
  %memberidx1.i.i246 = getelementptr inbounds %FloError, ptr %236, i64 0, i32 2
  store ptr %233, ptr %memberidx1.i.i246, align 8
  %memberidx2.i.i247 = getelementptr inbounds %FloError, ptr %236, i64 0, i32 1
  store ptr %231, ptr %memberidx2.i.i247, align 8
  %memberidx.i.i248 = getelementptr inbounds %Array_FloError_, ptr %235, i64 0, i32 2
  %237 = load i64, ptr %memberidx.i.i248, align 4
  %memberidx1.i2.i249 = getelementptr inbounds %Array_FloError_, ptr %235, i64 0, i32 3
  %238 = load i64, ptr %memberidx1.i2.i249, align 4
  %.not.i.i250 = icmp slt i64 %237, %238
  br i1 %.not.i.i250, label %else64.TypeChecker_error.exit256_crit_edge, label %if.entry.i.i253

else64.TypeChecker_error.exit256_crit_edge:       ; preds = %else64
  %memberidx4.i.i254.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %235, i64 0, i32 1
  %.pre32 = load ptr, ptr %memberidx4.i.i254.phi.trans.insert, align 8
  br label %TypeChecker_error.exit256

if.entry.i.i253:                                  ; preds = %else64
  %239 = shl i64 %238, 1
  store i64 %239, ptr %memberidx1.i2.i249, align 4
  %memberidx2.i.i.i252 = getelementptr inbounds %Array_FloError_, ptr %235, i64 0, i32 1
  %240 = load ptr, ptr %memberidx2.i.i.i252, align 8
  %241 = shl i64 %238, 4
  %242 = call ptr @realloc(ptr %240, i64 %241)
  store ptr %242, ptr %memberidx2.i.i.i252, align 8
  %.pre31 = load i64, ptr %memberidx.i.i248, align 4
  br label %TypeChecker_error.exit256

TypeChecker_error.exit256:                        ; preds = %else64.TypeChecker_error.exit256_crit_edge, %if.entry.i.i253
  %243 = phi ptr [ %.pre32, %else64.TypeChecker_error.exit256_crit_edge ], [ %242, %if.entry.i.i253 ]
  %244 = phi i64 [ %237, %else64.TypeChecker_error.exit256_crit_edge ], [ %.pre31, %if.entry.i.i253 ]
  %245 = add i64 %244, 1
  store i64 %245, ptr %memberidx.i.i248, align 4
  %ptridx.i.i255 = getelementptr inbounds ptr, ptr %243, i64 %244
  store ptr %236, ptr %ptridx.i.i255, align 8
  br label %common.ret

else67:                                           ; preds = %if.entry63, %ifend.i240
  %246 = tail call ptr @malloc(i32 72)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %246, ptr noundef nonnull align 8 dereferenceable(9) @239, i64 9, i1 false)
  %247 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %247, align 8
  %memberidx.i.i257 = getelementptr inbounds %string, ptr %247, i64 0, i32 1
  store ptr %246, ptr %memberidx.i.i257, align 8
  %memberidx1.i.i258 = getelementptr inbounds %string, ptr %247, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i258, align 4
  %memberidx2.i.i259 = getelementptr inbounds %string, ptr %247, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i259, align 4
  %248 = load i64, ptr %memberidx.i235, align 4
  %.not.i262 = icmp eq i64 %248, 9
  br i1 %.not.i262, label %ifend.i266, label %else70

ifend.i266:                                       ; preds = %else67
  %memberidx2.i264 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %249 = load ptr, ptr %memberidx2.i264, align 8
  %250 = tail call i64 @memcmp(ptr %249, ptr nonnull %246, i64 9)
  %251 = icmp eq i64 %250, 0
  br i1 %251, label %ifend68, label %else70

ifend68:                                          ; preds = %ifend.i314, %ifend.i303, %ifend.i292, %ifend.i266, %ifend.i240
  %252 = phi i64 [ 3, %ifend.i240 ], [ 4, %ifend.i266 ], [ 5, %ifend.i292 ], [ 6, %ifend.i303 ], [ 7, %ifend.i314 ]
  %253 = tail call ptr @malloc(i32 41)
  store i64 8, ptr %253, align 4
  %memberidx.i.i268 = getelementptr inbounds %Expression, ptr %253, i64 0, i32 2
  store i64 16, ptr %memberidx.i.i268, align 4
  %memberidx1.i.i269 = getelementptr inbounds %Expression, ptr %253, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i269, align 1
  %memberidx.i270 = getelementptr inbounds %IntrinsicCall, ptr %253, i64 0, i32 4
  store i64 %252, ptr %memberidx.i270, align 4
  %memberidx1.i271 = getelementptr inbounds %IntrinsicCall, ptr %253, i64 0, i32 5
  %254 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %254, align 8
  %memberidx.i7.i = getelementptr inbounds %Array_Expression_, ptr %254, i64 0, i32 2
  store i64 0, ptr %memberidx.i7.i, align 4
  %memberidx1.i8.i = getelementptr inbounds %Array_Expression_, ptr %254, i64 0, i32 3
  store i64 8, ptr %memberidx1.i8.i, align 4
  %memberidx2.i.i272 = getelementptr inbounds %Array_Expression_, ptr %254, i64 0, i32 1
  %255 = tail call ptr @malloc(i32 64)
  store ptr %255, ptr %memberidx2.i.i272, align 8
  store i64 0, ptr %memberidx.i7.i, align 4
  store ptr %254, ptr %memberidx1.i271, align 8
  %memberidx4.i274 = getelementptr inbounds %Expression, ptr %253, i64 0, i32 3
  %256 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %256, align 4
  store ptr %256, ptr %memberidx4.i274, align 8
  %257 = load i64, ptr %memberidx.i7.i, align 4
  %258 = load i64, ptr %memberidx1.i8.i, align 4
  %.not.i277 = icmp slt i64 %257, %258
  br i1 %.not.i277, label %ifend68.Array_Expression____sl__.exit_crit_edge, label %if.entry.i280

ifend68.Array_Expression____sl__.exit_crit_edge:  ; preds = %ifend68
  %.pre24 = load ptr, ptr %memberidx2.i.i272, align 8
  br label %Array_Expression____sl__.exit

if.entry.i280:                                    ; preds = %ifend68
  %259 = shl i64 %258, 1
  store i64 %259, ptr %memberidx1.i8.i, align 4
  %260 = load ptr, ptr %memberidx2.i.i272, align 8
  %261 = shl i64 %258, 4
  %262 = tail call ptr @realloc(ptr %260, i64 %261)
  store ptr %262, ptr %memberidx2.i.i272, align 8
  %.pre23 = load i64, ptr %memberidx.i7.i, align 4
  br label %Array_Expression____sl__.exit

Array_Expression____sl__.exit:                    ; preds = %ifend68.Array_Expression____sl__.exit_crit_edge, %if.entry.i280
  %263 = phi ptr [ %.pre24, %ifend68.Array_Expression____sl__.exit_crit_edge ], [ %262, %if.entry.i280 ]
  %264 = phi i64 [ %257, %ifend68.Array_Expression____sl__.exit_crit_edge ], [ %.pre23, %if.entry.i280 ]
  %265 = add i64 %264, 1
  store i64 %265, ptr %memberidx.i7.i, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %263, i64 %264
  store ptr %5, ptr %ptridx.i, align 8
  br label %common.ret

else70:                                           ; preds = %else67, %ifend.i266
  %266 = tail call ptr @malloc(i32 72)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %266, ptr noundef nonnull align 8 dereferenceable(9) @240, i64 9, i1 false)
  %267 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %267, align 8
  %memberidx.i.i283 = getelementptr inbounds %string, ptr %267, i64 0, i32 1
  store ptr %266, ptr %memberidx.i.i283, align 8
  %memberidx1.i.i284 = getelementptr inbounds %string, ptr %267, i64 0, i32 2
  store i64 9, ptr %memberidx1.i.i284, align 4
  %memberidx2.i.i285 = getelementptr inbounds %string, ptr %267, i64 0, i32 3
  store i64 9, ptr %memberidx2.i.i285, align 4
  %268 = load i64, ptr %memberidx.i235, align 4
  %.not.i288 = icmp eq i64 %268, 9
  br i1 %.not.i288, label %ifend.i292, label %else73

ifend.i292:                                       ; preds = %else70
  %memberidx2.i290 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %269 = load ptr, ptr %memberidx2.i290, align 8
  %270 = tail call i64 @memcmp(ptr %269, ptr nonnull %266, i64 9)
  %271 = icmp eq i64 %270, 0
  br i1 %271, label %ifend68, label %else73

else73:                                           ; preds = %else70, %ifend.i292
  %272 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %272, ptr noundef nonnull align 8 dereferenceable(6) @241, i64 6, i1 false)
  %273 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %273, align 8
  %memberidx.i.i294 = getelementptr inbounds %string, ptr %273, i64 0, i32 1
  store ptr %272, ptr %memberidx.i.i294, align 8
  %memberidx1.i.i295 = getelementptr inbounds %string, ptr %273, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i295, align 4
  %memberidx2.i.i296 = getelementptr inbounds %string, ptr %273, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i296, align 4
  %274 = load i64, ptr %memberidx.i235, align 4
  %.not.i299 = icmp eq i64 %274, 6
  br i1 %.not.i299, label %ifend.i303, label %else76

ifend.i303:                                       ; preds = %else73
  %memberidx2.i301 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %275 = load ptr, ptr %memberidx2.i301, align 8
  %276 = tail call i64 @memcmp(ptr %275, ptr nonnull %272, i64 6)
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %ifend68, label %else76

else76:                                           ; preds = %else73, %ifend.i303
  %278 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %278, ptr noundef nonnull align 8 dereferenceable(7) @242, i64 7, i1 false)
  %279 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %279, align 8
  %memberidx.i.i305 = getelementptr inbounds %string, ptr %279, i64 0, i32 1
  store ptr %278, ptr %memberidx.i.i305, align 8
  %memberidx1.i.i306 = getelementptr inbounds %string, ptr %279, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i306, align 4
  %memberidx2.i.i307 = getelementptr inbounds %string, ptr %279, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i307, align 4
  %280 = load i64, ptr %memberidx.i235, align 4
  %.not.i310 = icmp eq i64 %280, 7
  br i1 %.not.i310, label %ifend.i314, label %else79

ifend.i314:                                       ; preds = %else76
  %memberidx2.i312 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %281 = load ptr, ptr %memberidx2.i312, align 8
  %282 = tail call i64 @memcmp(ptr %281, ptr nonnull %278, i64 7)
  %283 = icmp eq i64 %282, 0
  br i1 %283, label %ifend68, label %else79

else79:                                           ; preds = %else76, %ifend.i314
  %284 = load ptr, ptr %12, align 8
  %memberidx81 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %284, i64 0, i32 5
  %285 = load ptr, ptr %memberidx81, align 8
  %286 = tail call ptr %285(ptr nonnull %12)
  %287 = alloca ptr, align 8
  %288 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %287, ptr nonnull @243, ptr %286)
  %289 = load ptr, ptr %287, align 8
  %290 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %290, align 8
  %memberidx.i316 = getelementptr inbounds %string, ptr %290, i64 0, i32 1
  store ptr %289, ptr %memberidx.i316, align 8
  %memberidx1.i317 = getelementptr inbounds %string, ptr %290, i64 0, i32 2
  store i64 %288, ptr %memberidx1.i317, align 4
  %memberidx2.i318 = getelementptr inbounds %string, ptr %290, i64 0, i32 3
  store i64 %288, ptr %memberidx2.i318, align 4
  tail call void @free(ptr %286)
  %291 = load ptr, ptr %memberidx2, align 8
  %memberidx83 = getelementptr inbounds %Token, ptr %291, i64 0, i32 1
  %292 = load ptr, ptr %memberidx83, align 8
  %293 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i320 = getelementptr inbounds %Compiler, ptr %293, i64 0, i32 6
  %294 = load ptr, ptr %memberidx1.i320, align 8
  %295 = call ptr @malloc(i32 24)
  store i64 1, ptr %295, align 4
  %memberidx1.i.i321 = getelementptr inbounds %FloError, ptr %295, i64 0, i32 2
  store ptr %292, ptr %memberidx1.i.i321, align 8
  %memberidx2.i.i322 = getelementptr inbounds %FloError, ptr %295, i64 0, i32 1
  store ptr %290, ptr %memberidx2.i.i322, align 8
  %memberidx.i.i323 = getelementptr inbounds %Array_FloError_, ptr %294, i64 0, i32 2
  %296 = load i64, ptr %memberidx.i.i323, align 4
  %memberidx1.i2.i324 = getelementptr inbounds %Array_FloError_, ptr %294, i64 0, i32 3
  %297 = load i64, ptr %memberidx1.i2.i324, align 4
  %.not.i.i325 = icmp slt i64 %296, %297
  br i1 %.not.i.i325, label %else79.TypeChecker_error.exit331_crit_edge, label %if.entry.i.i328

else79.TypeChecker_error.exit331_crit_edge:       ; preds = %else79
  %memberidx4.i.i329.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %294, i64 0, i32 1
  %.pre22 = load ptr, ptr %memberidx4.i.i329.phi.trans.insert, align 8
  br label %TypeChecker_error.exit331

if.entry.i.i328:                                  ; preds = %else79
  %298 = shl i64 %297, 1
  store i64 %298, ptr %memberidx1.i2.i324, align 4
  %memberidx2.i.i.i327 = getelementptr inbounds %Array_FloError_, ptr %294, i64 0, i32 1
  %299 = load ptr, ptr %memberidx2.i.i.i327, align 8
  %300 = shl i64 %297, 4
  %301 = call ptr @realloc(ptr %299, i64 %300)
  store ptr %301, ptr %memberidx2.i.i.i327, align 8
  %.pre21 = load i64, ptr %memberidx.i.i323, align 4
  br label %TypeChecker_error.exit331

TypeChecker_error.exit331:                        ; preds = %else79.TypeChecker_error.exit331_crit_edge, %if.entry.i.i328
  %302 = phi ptr [ %.pre22, %else79.TypeChecker_error.exit331_crit_edge ], [ %301, %if.entry.i.i328 ]
  %303 = phi i64 [ %296, %else79.TypeChecker_error.exit331_crit_edge ], [ %.pre21, %if.entry.i.i328 ]
  %304 = add i64 %303, 1
  store i64 %304, ptr %memberidx.i.i323, align 4
  %ptridx.i.i330 = getelementptr inbounds ptr, ptr %302, i64 %303
  store ptr %295, ptr %ptridx.i.i330, align 8
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_assignment(ptr %0, ptr %1, ptr %2, ptr nocapture readonly %3) unnamed_addr {
  %memberidx = getelementptr inbounds %BinaryExpressionNode, ptr %3, i64 0, i32 4
  %5 = load i64, ptr %memberidx, align 4
  %.not = icmp eq i64 %5, 19
  br i1 %.not, label %ifend, label %if.entry

if.entry:                                         ; preds = %4
  %memberidx1 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 3
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = load i64, ptr %6, align 4
  %8 = icmp eq i64 %7, 20
  br i1 %8, label %if.entry.i103, label %is_object.exit

if.entry.i103:                                    ; preds = %if.entry, %if.entry.i103
  %.tr5.i = phi ptr [ %9, %if.entry.i103 ], [ %6, %if.entry ]
  %memberidx1.i102 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %9 = load ptr, ptr %memberidx1.i102, align 8
  %10 = load i64, ptr %9, align 4
  %11 = icmp eq i64 %10, 20
  br i1 %11, label %if.entry.i103, label %is_object.exit

is_object.exit:                                   ; preds = %if.entry.i103, %if.entry
  %.lcssa.i = phi i64 [ %7, %if.entry ], [ %10, %if.entry.i103 ]
  %12 = icmp eq i64 %.lcssa.i, 13
  br i1 %12, label %if.entry2, label %ifend4

ifend:                                            ; preds = %4, %ifend4
  %right.0 = phi ptr [ %45, %ifend4 ], [ %2, %4 ]
  %memberidx9 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 3
  %13 = load ptr, ptr %memberidx9, align 8
  %14 = load i64, ptr %13, align 4
  %15 = icmp eq i64 %14, 18
  br i1 %15, label %if.entry11, label %ifend13

if.entry2:                                        ; preds = %is_object.exit
  %16 = tail call fastcc ptr @TypeChecker_check_object_bin_assign(ptr %0, ptr %1, ptr %3)
  %17 = icmp ne ptr %16, null
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %18 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %18, i64 0, i32 6
  %19 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %19, i64 0, i32 2
  %20 = load i64, ptr %memberidx2.i, align 4
  %21 = icmp sgt i64 %20, 0
  %22 = or i1 %17, %21
  br i1 %22, label %common.ret, label %if.entry2.ifend4_crit_edge

if.entry2.ifend4_crit_edge:                       ; preds = %if.entry2
  %.pre = load ptr, ptr %memberidx1, align 8
  %.pre104 = load i64, ptr %memberidx, align 4
  br label %ifend4

ifend4:                                           ; preds = %if.entry2.ifend4_crit_edge, %is_object.exit
  %23 = phi i64 [ %.pre104, %if.entry2.ifend4_crit_edge ], [ %5, %is_object.exit ]
  %24 = phi ptr [ %.pre, %if.entry2.ifend4_crit_edge ], [ %6, %is_object.exit ]
  %25 = icmp eq i64 %23, 20
  %spec.store.select.i = select i1 %25, i64 1, i64 %23
  %26 = icmp eq i64 %spec.store.select.i, 21
  %spec.store.select34.i = select i1 %26, i64 2, i64 %spec.store.select.i
  %27 = icmp eq i64 %spec.store.select34.i, 22
  %spec.store.select30.i = select i1 %27, i64 3, i64 %spec.store.select34.i
  %28 = icmp eq i64 %spec.store.select30.i, 23
  %spec.store.select37.i = select i1 %28, i64 4, i64 %spec.store.select30.i
  %29 = icmp eq i64 %spec.store.select37.i, 24
  %spec.store.select31.i = select i1 %29, i64 5, i64 %spec.store.select37.i
  %30 = icmp eq i64 %spec.store.select31.i, 25
  %spec.store.select35.i = select i1 %30, i64 6, i64 %spec.store.select31.i
  %31 = icmp eq i64 %spec.store.select35.i, 26
  %spec.store.select32.i = select i1 %31, i64 16, i64 %spec.store.select35.i
  %32 = icmp eq i64 %spec.store.select32.i, 27
  %spec.store.select38.i = select i1 %32, i64 15, i64 %spec.store.select32.i
  %33 = icmp eq i64 %spec.store.select38.i, 29
  %spec.store.select33.i = select i1 %33, i64 13, i64 %spec.store.select38.i
  %34 = icmp eq i64 %spec.store.select33.i, 30
  %spec.store.select36.i = select i1 %34, i64 14, i64 %spec.store.select33.i
  %35 = tail call ptr @malloc(i32 48)
  %memberidx28.i = getelementptr inbounds %BinaryExpressionNode, ptr %3, i64 0, i32 3
  %36 = load ptr, ptr %memberidx28.i, align 8
  %memberidx29.i = getelementptr inbounds %BinaryExpressionNode, ptr %3, i64 0, i32 5
  %37 = load ptr, ptr %memberidx29.i, align 8
  %38 = load ptr, ptr %36, align 8
  %39 = load ptr, ptr %37, align 8
  %40 = tail call ptr @malloc(i32 32)
  %41 = load i64, ptr %38, align 4
  %memberidx1.i.i.i = getelementptr inbounds %FloRange, ptr %39, i64 0, i32 1
  %42 = load i64, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %FloRange, ptr %38, i64 0, i32 2
  %43 = load i64, ptr %memberidx2.i.i.i, align 4
  %memberidx3.i.i.i = getelementptr inbounds %FloRange, ptr %39, i64 0, i32 3
  %44 = load i64, ptr %memberidx3.i.i.i, align 4
  store i64 %41, ptr %40, align 4
  %memberidx1.i.i.i.i = getelementptr inbounds %FloRange, ptr %40, i64 0, i32 1
  store i64 %42, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %FloRange, ptr %40, i64 0, i32 2
  store i64 %43, ptr %memberidx2.i.i.i.i, align 4
  %memberidx3.i.i.i.i = getelementptr inbounds %FloRange, ptr %40, i64 0, i32 3
  store i64 %44, ptr %memberidx3.i.i.i.i, align 4
  store ptr %40, ptr %35, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %StatementNode, ptr %35, i64 0, i32 1
  store i64 8, ptr %memberidx.i.i.i.i, align 4
  %memberidx.i.i.i = getelementptr inbounds %ExpressionNode, ptr %35, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %BinaryExpressionNode, ptr %35, i64 0, i32 3
  store ptr %36, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %BinaryExpressionNode, ptr %35, i64 0, i32 4
  store i64 %spec.store.select36.i, ptr %memberidx3.i.i, align 4
  %memberidx4.i.i = getelementptr inbounds %BinaryExpressionNode, ptr %35, i64 0, i32 5
  store ptr %37, ptr %memberidx4.i.i, align 8
  %45 = tail call fastcc ptr @TypeChecker_check_bin_expr(ptr %0, ptr %24, ptr nonnull %35)
  br label %ifend

common.ret:                                       ; preds = %if.entry2, %ifend23, %TypeChecker_error.exit96, %TypeChecker_error.exit80, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit80 ], [ null, %TypeChecker_error.exit96 ], [ %112, %ifend23 ], [ %16, %if.entry2 ]
  ret ptr %common.ret.op

if.entry11:                                       ; preds = %ifend
  %46 = tail call ptr @malloc(i32 264)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(33) %46, ptr noundef nonnull align 8 dereferenceable(33) @208, i64 33, i1 false)
  %47 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %47, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %47, i64 0, i32 1
  store ptr %46, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %47, i64 0, i32 2
  store i64 33, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i54 = getelementptr inbounds %string, ptr %47, i64 0, i32 3
  store i64 33, ptr %memberidx2.i.i54, align 4
  %48 = load ptr, ptr %3, align 8
  %memberidx.i55 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %49 = load ptr, ptr %memberidx.i55, align 8
  %memberidx1.i56 = getelementptr inbounds %Compiler, ptr %49, i64 0, i32 6
  %50 = load ptr, ptr %memberidx1.i56, align 8
  %51 = tail call ptr @malloc(i32 24)
  store i64 5, ptr %51, align 4
  %memberidx1.i.i57 = getelementptr inbounds %FloError, ptr %51, i64 0, i32 2
  store ptr %48, ptr %memberidx1.i.i57, align 8
  %memberidx2.i.i58 = getelementptr inbounds %FloError, ptr %51, i64 0, i32 1
  store ptr %47, ptr %memberidx2.i.i58, align 8
  %memberidx.i.i59 = getelementptr inbounds %Array_FloError_, ptr %50, i64 0, i32 2
  %52 = load i64, ptr %memberidx.i.i59, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %50, i64 0, i32 3
  %53 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %52, %53
  br i1 %.not.i.i, label %if.entry11.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry11.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry11
  %memberidx4.i.i62.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %50, i64 0, i32 1
  %.pre110 = load ptr, ptr %memberidx4.i.i62.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry11
  %54 = shl i64 %53, 1
  store i64 %54, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i61 = getelementptr inbounds %Array_FloError_, ptr %50, i64 0, i32 1
  %55 = load ptr, ptr %memberidx2.i.i.i61, align 8
  %56 = shl i64 %53, 4
  %57 = tail call ptr @realloc(ptr %55, i64 %56)
  store ptr %57, ptr %memberidx2.i.i.i61, align 8
  %.pre109 = load i64, ptr %memberidx.i.i59, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry11.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %58 = phi ptr [ %.pre110, %if.entry11.TypeChecker_error.exit_crit_edge ], [ %57, %if.entry.i.i ]
  %59 = phi i64 [ %52, %if.entry11.TypeChecker_error.exit_crit_edge ], [ %.pre109, %if.entry.i.i ]
  %60 = add i64 %59, 1
  store i64 %60, ptr %memberidx.i.i59, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %58, i64 %59
  store ptr %51, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend13:                                          ; preds = %ifend
  %memberidx.i63 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 2
  %61 = load i64, ptr %memberidx.i63, align 4
  switch i64 %61, label %if.entry15 [
    i64 7, label %if.entry.i
    i64 12, label %check_is_var.exit
    i64 13, label %ifend17
  ]

if.entry.i:                                       ; preds = %ifend13
  %memberidx1.i64 = getelementptr inbounds %VarAccessExpression, ptr %1, i64 0, i32 4
  %62 = load ptr, ptr %memberidx1.i64, align 8
  %63 = load i64, ptr %62, align 4
  %64 = icmp eq i64 %63, 1
  br i1 %64, label %ifend17, label %if.entry15

check_is_var.exit:                                ; preds = %ifend13
  %memberidx7.i = getelementptr inbounds %MemberExpression, ptr %1, i64 0, i32 5
  %65 = load ptr, ptr %memberidx7.i, align 8
  %66 = load i64, ptr %65, align 4
  %67 = icmp eq i64 %66, 1
  br i1 %67, label %ifend17, label %if.entry15

if.entry15:                                       ; preds = %if.entry.i, %ifend13, %check_is_var.exit
  %68 = tail call ptr @malloc(i32 280)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(35) %68, ptr noundef nonnull align 8 dereferenceable(35) @209, i64 35, i1 false)
  %69 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %69, align 8
  %memberidx.i.i65 = getelementptr inbounds %string, ptr %69, i64 0, i32 1
  store ptr %68, ptr %memberidx.i.i65, align 8
  %memberidx1.i.i66 = getelementptr inbounds %string, ptr %69, i64 0, i32 2
  store i64 35, ptr %memberidx1.i.i66, align 4
  %memberidx2.i.i67 = getelementptr inbounds %string, ptr %69, i64 0, i32 3
  store i64 35, ptr %memberidx2.i.i67, align 4
  %70 = load ptr, ptr %3, align 8
  %memberidx.i68 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %71 = load ptr, ptr %memberidx.i68, align 8
  %memberidx1.i69 = getelementptr inbounds %Compiler, ptr %71, i64 0, i32 6
  %72 = load ptr, ptr %memberidx1.i69, align 8
  %73 = tail call ptr @malloc(i32 24)
  store i64 5, ptr %73, align 4
  %memberidx1.i.i70 = getelementptr inbounds %FloError, ptr %73, i64 0, i32 2
  store ptr %70, ptr %memberidx1.i.i70, align 8
  %memberidx2.i.i71 = getelementptr inbounds %FloError, ptr %73, i64 0, i32 1
  store ptr %69, ptr %memberidx2.i.i71, align 8
  %memberidx.i.i72 = getelementptr inbounds %Array_FloError_, ptr %72, i64 0, i32 2
  %74 = load i64, ptr %memberidx.i.i72, align 4
  %memberidx1.i2.i73 = getelementptr inbounds %Array_FloError_, ptr %72, i64 0, i32 3
  %75 = load i64, ptr %memberidx1.i2.i73, align 4
  %.not.i.i74 = icmp slt i64 %74, %75
  br i1 %.not.i.i74, label %if.entry15.TypeChecker_error.exit80_crit_edge, label %if.entry.i.i77

if.entry15.TypeChecker_error.exit80_crit_edge:    ; preds = %if.entry15
  %memberidx4.i.i78.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %72, i64 0, i32 1
  %.pre108 = load ptr, ptr %memberidx4.i.i78.phi.trans.insert, align 8
  br label %TypeChecker_error.exit80

if.entry.i.i77:                                   ; preds = %if.entry15
  %76 = shl i64 %75, 1
  store i64 %76, ptr %memberidx1.i2.i73, align 4
  %memberidx2.i.i.i76 = getelementptr inbounds %Array_FloError_, ptr %72, i64 0, i32 1
  %77 = load ptr, ptr %memberidx2.i.i.i76, align 8
  %78 = shl i64 %75, 4
  %79 = tail call ptr @realloc(ptr %77, i64 %78)
  store ptr %79, ptr %memberidx2.i.i.i76, align 8
  %.pre107 = load i64, ptr %memberidx.i.i72, align 4
  br label %TypeChecker_error.exit80

TypeChecker_error.exit80:                         ; preds = %if.entry15.TypeChecker_error.exit80_crit_edge, %if.entry.i.i77
  %80 = phi ptr [ %.pre108, %if.entry15.TypeChecker_error.exit80_crit_edge ], [ %79, %if.entry.i.i77 ]
  %81 = phi i64 [ %74, %if.entry15.TypeChecker_error.exit80_crit_edge ], [ %.pre107, %if.entry.i.i77 ]
  %82 = add i64 %81, 1
  store i64 %82, ptr %memberidx.i.i72, align 4
  %ptridx.i.i79 = getelementptr inbounds ptr, ptr %80, i64 %81
  store ptr %73, ptr %ptridx.i.i79, align 8
  br label %common.ret

ifend17:                                          ; preds = %if.entry.i, %ifend13, %check_is_var.exit
  %memberidx20 = getelementptr inbounds %Expression, ptr %right.0, i64 0, i32 3
  %83 = load ptr, ptr %memberidx20, align 8
  %84 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr nonnull %13, ptr %83)
  br i1 %84, label %ifend23, label %if.entry21

if.entry21:                                       ; preds = %ifend17
  %85 = load ptr, ptr %memberidx20, align 8
  %86 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %85)
  %87 = load ptr, ptr %86, align 8
  %memberidx25 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %87, i64 0, i32 5
  %88 = load ptr, ptr %memberidx25, align 8
  %89 = tail call ptr %88(ptr nonnull %86)
  %90 = load ptr, ptr %memberidx9, align 8
  %91 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %90)
  %92 = load ptr, ptr %91, align 8
  %memberidx27 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %92, i64 0, i32 5
  %93 = load ptr, ptr %memberidx27, align 8
  %94 = tail call ptr %93(ptr nonnull %91)
  %95 = alloca ptr, align 8
  %96 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %95, ptr nonnull @210, ptr %89, ptr %94)
  %97 = load ptr, ptr %95, align 8
  %98 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %98, align 8
  %memberidx.i81 = getelementptr inbounds %string, ptr %98, i64 0, i32 1
  store ptr %97, ptr %memberidx.i81, align 8
  %memberidx1.i82 = getelementptr inbounds %string, ptr %98, i64 0, i32 2
  store i64 %96, ptr %memberidx1.i82, align 4
  %memberidx2.i83 = getelementptr inbounds %string, ptr %98, i64 0, i32 3
  store i64 %96, ptr %memberidx2.i83, align 4
  tail call void @free(ptr %89)
  tail call void @free(ptr %94)
  %99 = load ptr, ptr %3, align 8
  %memberidx.i84 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %100 = load ptr, ptr %memberidx.i84, align 8
  %memberidx1.i85 = getelementptr inbounds %Compiler, ptr %100, i64 0, i32 6
  %101 = load ptr, ptr %memberidx1.i85, align 8
  %102 = call ptr @malloc(i32 24)
  store i64 5, ptr %102, align 4
  %memberidx1.i.i86 = getelementptr inbounds %FloError, ptr %102, i64 0, i32 2
  store ptr %99, ptr %memberidx1.i.i86, align 8
  %memberidx2.i.i87 = getelementptr inbounds %FloError, ptr %102, i64 0, i32 1
  store ptr %98, ptr %memberidx2.i.i87, align 8
  %memberidx.i.i88 = getelementptr inbounds %Array_FloError_, ptr %101, i64 0, i32 2
  %103 = load i64, ptr %memberidx.i.i88, align 4
  %memberidx1.i2.i89 = getelementptr inbounds %Array_FloError_, ptr %101, i64 0, i32 3
  %104 = load i64, ptr %memberidx1.i2.i89, align 4
  %.not.i.i90 = icmp slt i64 %103, %104
  br i1 %.not.i.i90, label %if.entry21.TypeChecker_error.exit96_crit_edge, label %if.entry.i.i93

if.entry21.TypeChecker_error.exit96_crit_edge:    ; preds = %if.entry21
  %memberidx4.i.i94.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %101, i64 0, i32 1
  %.pre106 = load ptr, ptr %memberidx4.i.i94.phi.trans.insert, align 8
  br label %TypeChecker_error.exit96

if.entry.i.i93:                                   ; preds = %if.entry21
  %105 = shl i64 %104, 1
  store i64 %105, ptr %memberidx1.i2.i89, align 4
  %memberidx2.i.i.i92 = getelementptr inbounds %Array_FloError_, ptr %101, i64 0, i32 1
  %106 = load ptr, ptr %memberidx2.i.i.i92, align 8
  %107 = shl i64 %104, 4
  %108 = call ptr @realloc(ptr %106, i64 %107)
  store ptr %108, ptr %memberidx2.i.i.i92, align 8
  %.pre105 = load i64, ptr %memberidx.i.i88, align 4
  br label %TypeChecker_error.exit96

TypeChecker_error.exit96:                         ; preds = %if.entry21.TypeChecker_error.exit96_crit_edge, %if.entry.i.i93
  %109 = phi ptr [ %.pre106, %if.entry21.TypeChecker_error.exit96_crit_edge ], [ %108, %if.entry.i.i93 ]
  %110 = phi i64 [ %103, %if.entry21.TypeChecker_error.exit96_crit_edge ], [ %.pre105, %if.entry.i.i93 ]
  %111 = add i64 %110, 1
  store i64 %111, ptr %memberidx.i.i88, align 4
  %ptridx.i.i95 = getelementptr inbounds ptr, ptr %109, i64 %110
  store ptr %102, ptr %ptridx.i.i95, align 8
  br label %common.ret

ifend23:                                          ; preds = %ifend17
  %112 = tail call ptr @malloc(i32 49)
  %113 = load ptr, ptr %memberidx20, align 8
  store i64 8, ptr %112, align 4
  %memberidx.i.i97 = getelementptr inbounds %Expression, ptr %112, i64 0, i32 2
  store i64 8, ptr %memberidx.i.i97, align 4
  %memberidx1.i.i98 = getelementptr inbounds %Expression, ptr %112, i64 0, i32 1
  %memberidx.i99 = getelementptr inbounds %BinaryExpression, ptr %112, i64 0, i32 4
  store ptr %1, ptr %memberidx.i99, align 8
  %memberidx1.i100 = getelementptr inbounds %BinaryExpression, ptr %112, i64 0, i32 5
  store i64 19, ptr %memberidx1.i100, align 4
  %memberidx2.i101 = getelementptr inbounds %BinaryExpression, ptr %112, i64 0, i32 6
  store ptr %right.0, ptr %memberidx2.i101, align 8
  %memberidx3.i = getelementptr inbounds %Expression, ptr %112, i64 0, i32 3
  store ptr %113, ptr %memberidx3.i, align 8
  store i1 false, ptr %memberidx1.i.i98, align 1
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_init_function_signature(ptr %0, ptr nocapture readonly %1, ptr %2, ptr nocapture %3) unnamed_addr {
for.entry:
  %4 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Type_, ptr %4, align 8
  %memberidx.i = getelementptr inbounds %Array_Type_, ptr %4, i64 0, i32 2
  store i64 0, ptr %memberidx.i, align 4
  %memberidx1.i = getelementptr inbounds %Array_Type_, ptr %4, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_Type_, ptr %4, i64 0, i32 1
  %5 = tail call ptr @malloc(i32 64)
  store ptr %5, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %6 = tail call ptr @malloc(i32 33)
  %memberidx.i55 = getelementptr inbounds %Array_ArgNode_, ptr %1, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i55, align 8
  %memberidx1.i56 = getelementptr inbounds %Array_ArgNode_, ptr %1, i64 0, i32 2
  %8 = load i64, ptr %memberidx1.i56, align 4
  store ptr @VTableArrayIterator_ArgNode_, ptr %6, align 8
  %memberidx.i.i = getelementptr inbounds %Iterator_ArgNode_, ptr %6, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i, align 1
  %memberidx1.i.i = getelementptr inbounds %ArrayIterator_ArgNode_, ptr %6, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %ArrayIterator_ArgNode_, ptr %6, i64 0, i32 4
  store ptr %7, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_ArgNode_, ptr %6, i64 0, i32 3
  store i64 %8, ptr %memberidx3.i.i, align 4
  %9 = load ptr, ptr @VTableArrayIterator_ArgNode_, align 8
  %10 = tail call ptr %9(ptr nonnull %6)
  %11 = load i1, ptr %memberidx.i.i, align 1
  br i1 %11, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx.i76 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %memberidx.i61 = getelementptr inbounds %Array_FunctionArg_, ptr %3, i64 0, i32 2
  %memberidx1.i62 = getelementptr inbounds %Array_FunctionArg_, ptr %3, i64 0, i32 3
  %memberidx2.i.i64 = getelementptr inbounds %Array_FunctionArg_, ptr %3, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %Array_Type____sl__.exit
  %arg.082 = phi ptr [ %10, %for.body.lr.ph ], [ %50, %Array_Type____sl__.exit ]
  %12 = tail call ptr @malloc(i32 49)
  store i64 8, ptr %12, align 4
  %memberidx.i.i57 = getelementptr inbounds %Expression, ptr %12, i64 0, i32 2
  store i64 7, ptr %memberidx.i.i57, align 4
  %memberidx1.i.i58 = getelementptr inbounds %Expression, ptr %12, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i58, align 1
  %memberidx4 = getelementptr inbounds %FunctionArg, ptr %12, i64 0, i32 5
  %13 = load ptr, ptr %arg.082, align 8
  %memberidx6 = getelementptr inbounds %IdentifierToken, ptr %13, i64 0, i32 2
  %14 = load ptr, ptr %memberidx6, align 8
  store ptr %14, ptr %memberidx4, align 8
  %memberidx7 = getelementptr inbounds %FunctionArg, ptr %12, i64 0, i32 6
  store ptr null, ptr %memberidx7, align 8
  %15 = call ptr @malloc(i32 8)
  store i64 21, ptr %15, align 4
  %memberidx8 = getelementptr inbounds %ArgNode, ptr %arg.082, i64 0, i32 1
  %16 = load ptr, ptr %memberidx8, align 8
  %.not = icmp eq ptr %16, null
  br i1 %.not, label %ifend, label %if.entry

for.end:                                          ; preds = %Array_Type____sl__.exit, %for.entry
  tail call void @free(ptr nonnull %6)
  %17 = call fastcc ptr @TypeChecker_check_type(ptr %0, ptr %2)
  %18 = tail call ptr @malloc(i32 25)
  store i64 17, ptr %18, align 4
  %memberidx.i59 = getelementptr inbounds %FunctionType, ptr %18, i64 0, i32 1
  store ptr %4, ptr %memberidx.i59, align 8
  %memberidx1.i60 = getelementptr inbounds %FunctionType, ptr %18, i64 0, i32 2
  store ptr %17, ptr %memberidx1.i60, align 8
  ret ptr %18

if.entry:                                         ; preds = %for.body
  %19 = call fastcc ptr @TypeChecker_check_type(ptr %0, ptr nonnull %16)
  br label %ifend

ifend:                                            ; preds = %for.body, %if.entry
  %20 = phi ptr [ %15, %for.body ], [ %19, %if.entry ]
  %memberidx10 = getelementptr inbounds %ArgNode, ptr %arg.082, i64 0, i32 2
  %21 = load ptr, ptr %memberidx10, align 8
  %.not54 = icmp eq ptr %21, null
  br i1 %.not54, label %ifend13, label %if.entry11

if.entry11:                                       ; preds = %ifend
  %22 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %20, ptr nonnull %21)
  store ptr %22, ptr %memberidx7, align 8
  %23 = load i64, ptr %20, align 4
  %24 = icmp eq i64 %23, 21
  %memberidx21 = getelementptr inbounds %Expression, ptr %22, i64 0, i32 3
  %25 = load ptr, ptr %memberidx21, align 8
  br i1 %24, label %ifend13, label %else18

ifend13:                                          ; preds = %if.entry11, %TypeChecker_error.exit, %else18, %ifend
  %26 = phi ptr [ %20, %TypeChecker_error.exit ], [ %20, %else18 ], [ %20, %ifend ], [ %25, %if.entry11 ]
  %27 = load i64, ptr %memberidx.i61, align 4
  %28 = load i64, ptr %memberidx1.i62, align 4
  %.not.i = icmp slt i64 %27, %28
  br i1 %.not.i, label %ifend13.Array_FunctionArg____sl__.exit_crit_edge, label %if.entry.i

ifend13.Array_FunctionArg____sl__.exit_crit_edge: ; preds = %ifend13
  %.pre85 = load ptr, ptr %memberidx2.i.i64, align 8
  br label %Array_FunctionArg____sl__.exit

if.entry.i:                                       ; preds = %ifend13
  %29 = shl i64 %28, 1
  store i64 %29, ptr %memberidx1.i62, align 4
  %30 = load ptr, ptr %memberidx2.i.i64, align 8
  %31 = shl i64 %28, 4
  %32 = call ptr @realloc(ptr %30, i64 %31)
  store ptr %32, ptr %memberidx2.i.i64, align 8
  %.pre84 = load i64, ptr %memberidx.i61, align 4
  br label %Array_FunctionArg____sl__.exit

Array_FunctionArg____sl__.exit:                   ; preds = %ifend13.Array_FunctionArg____sl__.exit_crit_edge, %if.entry.i
  %33 = phi ptr [ %.pre85, %ifend13.Array_FunctionArg____sl__.exit_crit_edge ], [ %32, %if.entry.i ]
  %34 = phi i64 [ %27, %ifend13.Array_FunctionArg____sl__.exit_crit_edge ], [ %.pre84, %if.entry.i ]
  %35 = add i64 %34, 1
  store i64 %35, ptr %memberidx.i61, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %33, i64 %34
  store ptr %12, ptr %ptridx.i, align 8
  %memberidx33 = getelementptr inbounds %Expression, ptr %12, i64 0, i32 3
  store ptr %26, ptr %memberidx33, align 8
  %36 = load ptr, ptr %memberidx4, align 8
  %37 = call fastcc ptr @TypeChecker_declare_var_within_current_scope(ptr %0, ptr %36, ptr nonnull %12, ptr %26)
  %memberidx35 = getelementptr inbounds %FunctionArg, ptr %12, i64 0, i32 4
  %memberidx36 = getelementptr inbounds %Var, ptr %37, i64 0, i32 1
  %38 = load ptr, ptr %memberidx36, align 8
  store ptr %38, ptr %memberidx35, align 8
  %39 = load i64, ptr %memberidx.i, align 4
  %40 = load i64, ptr %memberidx1.i, align 4
  %.not.i67 = icmp slt i64 %39, %40
  br i1 %.not.i67, label %Array_FunctionArg____sl__.exit.Array_Type____sl__.exit_crit_edge, label %if.entry.i70

Array_FunctionArg____sl__.exit.Array_Type____sl__.exit_crit_edge: ; preds = %Array_FunctionArg____sl__.exit
  %.pre87 = load ptr, ptr %memberidx2.i, align 8
  br label %Array_Type____sl__.exit

if.entry.i70:                                     ; preds = %Array_FunctionArg____sl__.exit
  %41 = shl i64 %40, 1
  store i64 %41, ptr %memberidx1.i, align 4
  %42 = load ptr, ptr %memberidx2.i, align 8
  %43 = shl i64 %40, 4
  %44 = call ptr @realloc(ptr %42, i64 %43)
  store ptr %44, ptr %memberidx2.i, align 8
  %.pre86 = load i64, ptr %memberidx.i, align 4
  br label %Array_Type____sl__.exit

Array_Type____sl__.exit:                          ; preds = %Array_FunctionArg____sl__.exit.Array_Type____sl__.exit_crit_edge, %if.entry.i70
  %45 = phi ptr [ %.pre87, %Array_FunctionArg____sl__.exit.Array_Type____sl__.exit_crit_edge ], [ %44, %if.entry.i70 ]
  %46 = phi i64 [ %39, %Array_FunctionArg____sl__.exit.Array_Type____sl__.exit_crit_edge ], [ %.pre86, %if.entry.i70 ]
  %47 = add i64 %46, 1
  store i64 %47, ptr %memberidx.i, align 4
  %ptridx.i72 = getelementptr inbounds ptr, ptr %45, i64 %46
  store ptr %26, ptr %ptridx.i72, align 8
  %48 = load ptr, ptr %6, align 8
  %49 = load ptr, ptr %48, align 8
  %50 = call ptr %49(ptr nonnull %6)
  %51 = load i1, ptr %memberidx.i.i, align 1
  br i1 %51, label %for.end, label %for.body

else18:                                           ; preds = %if.entry11
  %52 = call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr nonnull %20, ptr %25)
  br i1 %52, label %ifend13, label %if.entry24

if.entry24:                                       ; preds = %else18
  %53 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %20)
  %54 = load ptr, ptr %53, align 8
  %memberidx27 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %54, i64 0, i32 5
  %55 = load ptr, ptr %memberidx27, align 8
  %56 = call ptr %55(ptr nonnull %53)
  %57 = load ptr, ptr %memberidx7, align 8
  %memberidx29 = getelementptr inbounds %Expression, ptr %57, i64 0, i32 3
  %58 = load ptr, ptr %memberidx29, align 8
  %59 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %58)
  %60 = load ptr, ptr %59, align 8
  %memberidx30 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %60, i64 0, i32 5
  %61 = load ptr, ptr %memberidx30, align 8
  %62 = call ptr %61(ptr nonnull %59)
  %63 = alloca ptr, align 8
  %64 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %63, ptr nonnull @151, ptr %56, ptr %62)
  %65 = load ptr, ptr %63, align 8
  %66 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %66, align 8
  %memberidx.i73 = getelementptr inbounds %string, ptr %66, i64 0, i32 1
  store ptr %65, ptr %memberidx.i73, align 8
  %memberidx1.i74 = getelementptr inbounds %string, ptr %66, i64 0, i32 2
  store i64 %64, ptr %memberidx1.i74, align 4
  %memberidx2.i75 = getelementptr inbounds %string, ptr %66, i64 0, i32 3
  store i64 %64, ptr %memberidx2.i75, align 4
  tail call void @free(ptr %56)
  tail call void @free(ptr %62)
  %67 = load ptr, ptr %memberidx10, align 8
  %68 = load ptr, ptr %67, align 8
  %69 = load ptr, ptr %memberidx.i76, align 8
  %memberidx1.i77 = getelementptr inbounds %Compiler, ptr %69, i64 0, i32 6
  %70 = load ptr, ptr %memberidx1.i77, align 8
  %71 = call ptr @malloc(i32 24)
  store i64 5, ptr %71, align 4
  %memberidx1.i.i78 = getelementptr inbounds %FloError, ptr %71, i64 0, i32 2
  store ptr %68, ptr %memberidx1.i.i78, align 8
  %memberidx2.i.i79 = getelementptr inbounds %FloError, ptr %71, i64 0, i32 1
  store ptr %66, ptr %memberidx2.i.i79, align 8
  %memberidx.i.i80 = getelementptr inbounds %Array_FloError_, ptr %70, i64 0, i32 2
  %72 = load i64, ptr %memberidx.i.i80, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %70, i64 0, i32 3
  %73 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %72, %73
  br i1 %.not.i.i, label %if.entry24.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry24.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry24
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %70, i64 0, i32 1
  %.pre83 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry24
  %74 = shl i64 %73, 1
  store i64 %74, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %70, i64 0, i32 1
  %75 = load ptr, ptr %memberidx2.i.i.i, align 8
  %76 = shl i64 %73, 4
  %77 = call ptr @realloc(ptr %75, i64 %76)
  store ptr %77, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i80, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry24.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %78 = phi ptr [ %.pre83, %if.entry24.TypeChecker_error.exit_crit_edge ], [ %77, %if.entry.i.i ]
  %79 = phi i64 [ %72, %if.entry24.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %80 = add i64 %79, 1
  store i64 %80, ptr %memberidx.i.i80, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %78, i64 %79
  store ptr %71, ptr %ptridx.i.i, align 8
  br label %ifend13
}

define internal fastcc ptr @TypeChecker_check_constructor_call(ptr %0, ptr nocapture readonly %1, ptr nocapture readonly %2, ptr nocapture writeonly %3) unnamed_addr {
  %5 = load ptr, ptr %0, align 8
  %memberidx.i = getelementptr inbounds %Program, ptr %5, i64 0, i32 1
  %6 = load ptr, ptr %memberidx.i, align 8
  %7 = load i64, ptr %1, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Module_, ptr %6, i64 0, i32 1
  %8 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %8, i64 %7
  %9 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %9, i64 0, i32 4
  %10 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %TypeId, ptr %1, i64 0, i32 2
  %11 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Class_, ptr %10, i64 0, i32 1
  %12 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %12, i64 %11
  %13 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx1 = getelementptr inbounds %Class, ptr %13, i64 0, i32 3
  %14 = load ptr, ptr %memberidx1, align 8
  %15 = icmp eq ptr %14, null
  br i1 %15, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %else13, %if.entry12, %ifend11, %if.entry
  %common.ret.op = phi ptr [ %17, %if.entry ], [ null, %ifend11 ], [ %47, %if.entry12 ], [ %65, %else13 ], [ null, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %4
  %16 = tail call ptr @malloc(i32 352)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(44) %16, ptr noundef nonnull align 8 dereferenceable(44) @226, i64 44, i1 false)
  %17 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %17, align 8
  %memberidx.i.i30 = getelementptr inbounds %string, ptr %17, i64 0, i32 1
  store ptr %16, ptr %memberidx.i.i30, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %17, i64 0, i32 2
  store i64 44, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %17, i64 0, i32 3
  store i64 44, ptr %memberidx2.i.i, align 4
  br label %common.ret

ifend:                                            ; preds = %4
  %memberidx2 = getelementptr inbounds %Class, ptr %13, i64 0, i32 5
  %18 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %PropId, ptr %14, i64 0, i32 2
  %19 = load i64, ptr %memberidx3, align 4
  %memberidx.i31 = getelementptr inbounds %Array_ClassMethod_, ptr %18, i64 0, i32 1
  %20 = load ptr, ptr %memberidx.i31, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %20, i64 %19
  %21 = load ptr, ptr %ptridx.i, align 8
  %memberidx4 = getelementptr inbounds %ClassMethod, ptr %21, i64 0, i32 4
  %22 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %ClassMethod, ptr %21, i64 0, i32 6
  %23 = load ptr, ptr %memberidx5, align 8
  %24 = tail call fastcc ptr @TypeChecker_fill_in_call_args(ptr nonnull %0, ptr %22, ptr %23, ptr %2)
  %memberidx.i32 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %25 = load ptr, ptr %memberidx.i32, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %25, i64 0, i32 6
  %26 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i33 = getelementptr inbounds %Array_FloError_, ptr %26, i64 0, i32 2
  %27 = load i64, ptr %memberidx2.i33, align 4
  %28 = icmp sgt i64 %27, 0
  br i1 %28, label %common.ret, label %ifend8

ifend8:                                           ; preds = %ifend
  %memberidx.i45 = getelementptr inbounds %FunctionType, ptr %22, i64 0, i32 1
  %29 = load ptr, ptr %memberidx.i45, align 8
  %memberidx1.i46 = getelementptr inbounds %Array_Type_, ptr %29, i64 0, i32 2
  %30 = load i64, ptr %memberidx1.i46, align 4
  %memberidx2.i47 = getelementptr inbounds %Array_Expression_, ptr %24, i64 0, i32 2
  %31 = load i64, ptr %memberidx2.i47, align 4
  %.not.i = icmp eq i64 %30, %31
  br i1 %.not.i, label %for.cond.preheader.i, label %if.entry12

for.cond.preheader.i:                             ; preds = %ifend8
  %32 = icmp sgt i64 %30, 0
  br i1 %32, label %for.body.lr.ph.i, label %ifend11

for.body.lr.ph.i:                                 ; preds = %for.cond.preheader.i
  %memberidx.i12.i = getelementptr inbounds %Array_Expression_, ptr %24, i64 0, i32 1
  br label %for.body.i

for.body.i:                                       ; preds = %ifend8.i, %for.body.lr.ph.i
  %storemerge14.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %40, %ifend8.i ]
  %33 = load ptr, ptr %memberidx.i45, align 8
  %memberidx.i.i48 = getelementptr inbounds %Array_Type_, ptr %33, i64 0, i32 1
  %34 = load ptr, ptr %memberidx.i.i48, align 8
  %ptridx.i.i49 = getelementptr inbounds ptr, ptr %34, i64 %storemerge14.i
  %35 = load ptr, ptr %ptridx.i.i49, align 8
  %36 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %36, i64 %storemerge14.i
  %37 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx5.i = getelementptr inbounds %Expression, ptr %37, i64 0, i32 3
  %38 = load ptr, ptr %memberidx5.i, align 8
  %39 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %35, ptr %38)
  br i1 %39, label %ifend8.i, label %else13

ifend8.i:                                         ; preds = %for.body.i
  %40 = add nuw nsw i64 %storemerge14.i, 1
  %41 = load i64, ptr %memberidx2.i47, align 4
  %42 = icmp slt i64 %40, %41
  br i1 %42, label %for.body.i, label %ifend11

ifend11:                                          ; preds = %ifend8.i, %for.cond.preheader.i
  store ptr %24, ptr %3, align 8
  br label %common.ret

if.entry12:                                       ; preds = %ifend8
  %memberidx17 = getelementptr inbounds %Array_ExpressionNode_, ptr %2, i64 0, i32 2
  %43 = load i64, ptr %memberidx17, align 4
  %44 = alloca ptr, align 8
  %45 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %44, ptr nonnull @227, i64 %30, i64 %43)
  %46 = load ptr, ptr %44, align 8
  %47 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %47, align 8
  %memberidx.i34 = getelementptr inbounds %string, ptr %47, i64 0, i32 1
  store ptr %46, ptr %memberidx.i34, align 8
  %memberidx1.i35 = getelementptr inbounds %string, ptr %47, i64 0, i32 2
  store i64 %45, ptr %memberidx1.i35, align 4
  %memberidx2.i36 = getelementptr inbounds %string, ptr %47, i64 0, i32 3
  store i64 %45, ptr %memberidx2.i36, align 4
  br label %common.ret

else13:                                           ; preds = %for.body.i
  %48 = load ptr, ptr %memberidx.i45, align 8
  %memberidx.i37 = getelementptr inbounds %Array_Type_, ptr %48, i64 0, i32 1
  %49 = load ptr, ptr %memberidx.i37, align 8
  %ptridx.i38 = getelementptr inbounds ptr, ptr %49, i64 %storemerge14.i
  %50 = load ptr, ptr %ptridx.i38, align 8
  %51 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %50)
  %52 = load ptr, ptr %51, align 8
  %memberidx19 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %52, i64 0, i32 5
  %53 = load ptr, ptr %memberidx19, align 8
  %54 = tail call ptr %53(ptr nonnull %51)
  %55 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i40 = getelementptr inbounds ptr, ptr %55, i64 %storemerge14.i
  %56 = load ptr, ptr %ptridx.i40, align 8
  %memberidx20 = getelementptr inbounds %Expression, ptr %56, i64 0, i32 3
  %57 = load ptr, ptr %memberidx20, align 8
  %58 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %57)
  %59 = load ptr, ptr %58, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %59, i64 0, i32 5
  %60 = load ptr, ptr %memberidx21, align 8
  %61 = tail call ptr %60(ptr nonnull %58)
  %62 = alloca ptr, align 8
  %63 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %62, ptr nonnull @228, ptr %54, ptr %61, i64 %storemerge14.i)
  %64 = load ptr, ptr %62, align 8
  %65 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %65, align 8
  %memberidx.i41 = getelementptr inbounds %string, ptr %65, i64 0, i32 1
  store ptr %64, ptr %memberidx.i41, align 8
  %memberidx1.i42 = getelementptr inbounds %string, ptr %65, i64 0, i32 2
  store i64 %63, ptr %memberidx1.i42, align 4
  %memberidx2.i43 = getelementptr inbounds %string, ptr %65, i64 0, i32 3
  store i64 %63, ptr %memberidx2.i43, align 4
  tail call void @free(ptr %54)
  tail call void @free(ptr %61)
  br label %common.ret
}

define internal fastcc void @TypeChecker_declare_class_methods(ptr %0, ptr nocapture %1, ptr nocapture readonly %2) unnamed_addr {
for.entry:
  %memberidx1 = getelementptr inbounds %ClassDeclarationNode, ptr %2, i64 0, i32 4
  %3 = load ptr, ptr %memberidx1, align 8
  %memberidx2509 = getelementptr inbounds %Array_MethodNode_, ptr %3, i64 0, i32 2
  %4 = load i64, ptr %memberidx2509, align 4
  %5 = icmp sgt i64 %4, 0
  br i1 %5, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx = getelementptr inbounds %Class, ptr %1, i64 0, i32 8
  %6 = load i64, ptr %memberidx, align 4
  %memberidx1.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 5
  %memberidx39 = getelementptr inbounds %Class, ptr %1, i64 0, i32 6
  %memberidx110 = getelementptr inbounds %Class, ptr %1, i64 0, i32 3
  %memberidx126 = getelementptr inbounds %Class, ptr %1, i64 0, i32 2
  %memberidx97 = getelementptr inbounds %Class, ptr %1, i64 0, i32 7
  %memberidx139 = getelementptr inbounds %Class, ptr %1, i64 0, i32 5
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %Array_ClassMethod____sl__.exit
  %7 = phi ptr [ %3, %for.body.lr.ph ], [ %238, %Array_ClassMethod____sl__.exit ]
  %i.0511 = phi i64 [ 0, %for.body.lr.ph ], [ %237, %Array_ClassMethod____sl__.exit ]
  %current_vtable_index.0510 = phi i64 [ %6, %for.body.lr.ph ], [ %current_vtable_index.1, %Array_ClassMethod____sl__.exit ]
  %memberidx.i = getelementptr inbounds %Array_MethodNode_, ptr %7, i64 0, i32 1
  %8 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %8, i64 %i.0511
  %9 = load ptr, ptr %ptridx.i, align 8
  %10 = tail call ptr @malloc(i32 66)
  %memberidx.i186 = getelementptr inbounds %ClassMethod, ptr %10, i64 0, i32 7
  store i1 false, ptr %memberidx.i186, align 1
  %11 = load ptr, ptr %9, align 8
  %memberidx5 = getelementptr inbounds %IdentifierToken, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx5, align 8
  %memberidx6 = getelementptr inbounds %ClassMethod, ptr %10, i64 0, i32 3
  store ptr %12, ptr %memberidx6, align 8
  %13 = tail call fastcc ptr @TypeChecker_create_scope(ptr %0)
  %memberidx.i187 = getelementptr inbounds %Scope, ptr %13, i64 0, i32 5
  %14 = load ptr, ptr %memberidx1.i, align 8
  store ptr %14, ptr %memberidx.i187, align 8
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %memberidx1.i, align 8
  %memberidx9 = getelementptr inbounds %ClassMethod, ptr %10, i64 0, i32 6
  %16 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_FunctionArg_, ptr %16, align 8
  %memberidx.i188 = getelementptr inbounds %Array_FunctionArg_, ptr %16, i64 0, i32 2
  store i64 0, ptr %memberidx.i188, align 4
  %memberidx1.i189 = getelementptr inbounds %Array_FunctionArg_, ptr %16, i64 0, i32 3
  store i64 8, ptr %memberidx1.i189, align 4
  %memberidx2.i = getelementptr inbounds %Array_FunctionArg_, ptr %16, i64 0, i32 1
  %17 = tail call ptr @malloc(i32 64)
  store ptr %17, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i188, align 4
  store ptr %16, ptr %memberidx9, align 8
  %18 = tail call fastcc i1 @is_operator_overload_name(ptr %12)
  br i1 %18, label %if.entry, label %ifend

common.ret:                                       ; preds = %Array_ClassMethod____sl__.exit, %for.entry, %TypeChecker_error.exit423, %TypeChecker_error.exit407, %TypeChecker_error.exit387, %TypeChecker_error.exit360, %TypeChecker_error.exit302, %TypeChecker_error.exit281, %TypeChecker_error.exit234, %TypeChecker_error.exit216, %TypeChecker_error.exit
  ret void

if.entry:                                         ; preds = %for.body
  %19 = tail call ptr @malloc(i32 88)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %19, ptr noundef nonnull align 8 dereferenceable(11) @167, i64 11, i1 false)
  %20 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %20, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 1
  store ptr %19, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i, align 4
  %memberidx.i190 = getelementptr inbounds %string, ptr %12, i64 0, i32 2
  %21 = load i64, ptr %memberidx.i190, align 4
  %.not.i = icmp eq i64 %21, 11
  br i1 %.not.i, label %string___eq__.exit, label %string___eq__.exit.thread

string___eq__.exit:                               ; preds = %if.entry
  %memberidx2.i192 = getelementptr inbounds %string, ptr %12, i64 0, i32 1
  %22 = load ptr, ptr %memberidx2.i192, align 8
  %23 = tail call i64 @memcmp(ptr %22, ptr nonnull %19, i64 11)
  %.fr = freeze i64 %23
  %24 = icmp eq i64 %.fr, 0
  %spec.select = select i1 %24, i64 2, i64 1
  br label %string___eq__.exit.thread

string___eq__.exit.thread:                        ; preds = %string___eq__.exit, %if.entry
  %25 = phi i64 [ 1, %if.entry ], [ %spec.select, %string___eq__.exit ]
  %memberidx12 = getelementptr inbounds %MethodNode, ptr %9, i64 0, i32 1
  %26 = load ptr, ptr %memberidx12, align 8
  %memberidx13 = getelementptr inbounds %Array_ArgNode_, ptr %26, i64 0, i32 2
  %27 = load i64, ptr %memberidx13, align 4
  %.not185 = icmp eq i64 %27, %25
  br i1 %.not185, label %ifend16, label %if.entry14

ifend:                                            ; preds = %ifend16, %for.body
  %memberidx30 = getelementptr inbounds %MethodNode, ptr %9, i64 0, i32 6
  %28 = load i1, ptr %memberidx30, align 1
  store i1 %28, ptr %memberidx.i186, align 1
  %memberidx31 = getelementptr inbounds %ClassMethod, ptr %10, i64 0, i32 1
  %memberidx32 = getelementptr inbounds %MethodNode, ptr %9, i64 0, i32 5
  %29 = load i1, ptr %memberidx32, align 1
  store i1 %29, ptr %memberidx31, align 1
  %memberidx33 = getelementptr inbounds %ClassMethod, ptr %10, i64 0, i32 2
  %memberidx34 = getelementptr inbounds %MethodNode, ptr %9, i64 0, i32 3
  %30 = load i64, ptr %memberidx34, align 4
  store i64 %30, ptr %memberidx33, align 4
  %memberidx35 = getelementptr inbounds %ClassMethod, ptr %10, i64 0, i32 4
  %memberidx36 = getelementptr inbounds %MethodNode, ptr %9, i64 0, i32 1
  %31 = load ptr, ptr %memberidx36, align 8
  %memberidx37 = getelementptr inbounds %MethodNode, ptr %9, i64 0, i32 4
  %32 = load ptr, ptr %memberidx37, align 8
  %33 = load ptr, ptr %memberidx9, align 8
  %34 = tail call fastcc ptr @TypeChecker_init_function_signature(ptr nonnull %0, ptr %31, ptr %32, ptr %33)
  store ptr %34, ptr %memberidx35, align 8
  %35 = load ptr, ptr %memberidx39, align 8
  %36 = load ptr, ptr %35, align 8
  %memberidx40 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %36, i64 0, i32 1
  %37 = load ptr, ptr %memberidx40, align 8
  %38 = tail call ptr %37(ptr nonnull %35, ptr %12)
  %.not = icmp eq ptr %38, null
  br i1 %.not, label %else42, label %if.entry41

if.entry14:                                       ; preds = %string___eq__.exit.thread
  %39 = load ptr, ptr %12, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %39, i64 0, i32 5
  %40 = load ptr, ptr %memberidx17, align 8
  %41 = tail call ptr %40(ptr nonnull %12)
  %42 = load ptr, ptr %memberidx12, align 8
  %memberidx19 = getelementptr inbounds %Array_ArgNode_, ptr %42, i64 0, i32 2
  %43 = load i64, ptr %memberidx19, align 4
  %44 = alloca ptr, align 8
  %45 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %44, ptr nonnull @186, i64 %25, ptr %41, i64 %43)
  %46 = load ptr, ptr %44, align 8
  %47 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %47, align 8
  %memberidx.i193 = getelementptr inbounds %string, ptr %47, i64 0, i32 1
  store ptr %46, ptr %memberidx.i193, align 8
  %memberidx1.i194 = getelementptr inbounds %string, ptr %47, i64 0, i32 2
  store i64 %45, ptr %memberidx1.i194, align 4
  %memberidx2.i195 = getelementptr inbounds %string, ptr %47, i64 0, i32 3
  store i64 %45, ptr %memberidx2.i195, align 4
  tail call void @free(ptr %41)
  %48 = load ptr, ptr %9, align 8
  %memberidx21 = getelementptr inbounds %Token, ptr %48, i64 0, i32 1
  %49 = load ptr, ptr %memberidx21, align 8
  %memberidx.i196 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %50 = load ptr, ptr %memberidx.i196, align 8
  %memberidx1.i197 = getelementptr inbounds %Compiler, ptr %50, i64 0, i32 6
  %51 = load ptr, ptr %memberidx1.i197, align 8
  %52 = call ptr @malloc(i32 24)
  store i64 4, ptr %52, align 4
  %memberidx1.i.i198 = getelementptr inbounds %FloError, ptr %52, i64 0, i32 2
  store ptr %49, ptr %memberidx1.i.i198, align 8
  %memberidx2.i.i199 = getelementptr inbounds %FloError, ptr %52, i64 0, i32 1
  store ptr %47, ptr %memberidx2.i.i199, align 8
  %memberidx.i.i200 = getelementptr inbounds %Array_FloError_, ptr %51, i64 0, i32 2
  %53 = load i64, ptr %memberidx.i.i200, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %51, i64 0, i32 3
  %54 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %53, %54
  br i1 %.not.i.i, label %if.entry14.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry14.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry14
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %51, i64 0, i32 1
  %.pre548 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry14
  %55 = shl i64 %54, 1
  store i64 %55, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %51, i64 0, i32 1
  %56 = load ptr, ptr %memberidx2.i.i.i, align 8
  %57 = shl i64 %54, 4
  %58 = call ptr @realloc(ptr %56, i64 %57)
  store ptr %58, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i200, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry14.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %59 = phi ptr [ %.pre548, %if.entry14.TypeChecker_error.exit_crit_edge ], [ %58, %if.entry.i.i ]
  %60 = phi i64 [ %53, %if.entry14.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %61 = add i64 %60, 1
  store i64 %61, ptr %memberidx.i.i200, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %59, i64 %60
  store ptr %52, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend16:                                          ; preds = %string___eq__.exit.thread
  %memberidx22 = getelementptr inbounds %MethodNode, ptr %9, i64 0, i32 5
  %62 = load i1, ptr %memberidx22, align 1
  br i1 %62, label %if.entry23, label %ifend

if.entry23:                                       ; preds = %ifend16
  %63 = load ptr, ptr %12, align 8
  %memberidx26 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %63, i64 0, i32 5
  %64 = load ptr, ptr %memberidx26, align 8
  %65 = tail call ptr %64(ptr nonnull %12)
  %66 = alloca ptr, align 8
  %67 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %66, ptr nonnull @187, ptr %65)
  %68 = load ptr, ptr %66, align 8
  %69 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %69, align 8
  %memberidx.i201 = getelementptr inbounds %string, ptr %69, i64 0, i32 1
  store ptr %68, ptr %memberidx.i201, align 8
  %memberidx1.i202 = getelementptr inbounds %string, ptr %69, i64 0, i32 2
  store i64 %67, ptr %memberidx1.i202, align 4
  %memberidx2.i203 = getelementptr inbounds %string, ptr %69, i64 0, i32 3
  store i64 %67, ptr %memberidx2.i203, align 4
  tail call void @free(ptr %65)
  %70 = load ptr, ptr %9, align 8
  %memberidx28 = getelementptr inbounds %Token, ptr %70, i64 0, i32 1
  %71 = load ptr, ptr %memberidx28, align 8
  %memberidx.i204 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %72 = load ptr, ptr %memberidx.i204, align 8
  %memberidx1.i205 = getelementptr inbounds %Compiler, ptr %72, i64 0, i32 6
  %73 = load ptr, ptr %memberidx1.i205, align 8
  %74 = call ptr @malloc(i32 24)
  store i64 4, ptr %74, align 4
  %memberidx1.i.i206 = getelementptr inbounds %FloError, ptr %74, i64 0, i32 2
  store ptr %71, ptr %memberidx1.i.i206, align 8
  %memberidx2.i.i207 = getelementptr inbounds %FloError, ptr %74, i64 0, i32 1
  store ptr %69, ptr %memberidx2.i.i207, align 8
  %memberidx.i.i208 = getelementptr inbounds %Array_FloError_, ptr %73, i64 0, i32 2
  %75 = load i64, ptr %memberidx.i.i208, align 4
  %memberidx1.i2.i209 = getelementptr inbounds %Array_FloError_, ptr %73, i64 0, i32 3
  %76 = load i64, ptr %memberidx1.i2.i209, align 4
  %.not.i.i210 = icmp slt i64 %75, %76
  br i1 %.not.i.i210, label %if.entry23.TypeChecker_error.exit216_crit_edge, label %if.entry.i.i213

if.entry23.TypeChecker_error.exit216_crit_edge:   ; preds = %if.entry23
  %memberidx4.i.i214.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %73, i64 0, i32 1
  %.pre566 = load ptr, ptr %memberidx4.i.i214.phi.trans.insert, align 8
  br label %TypeChecker_error.exit216

if.entry.i.i213:                                  ; preds = %if.entry23
  %77 = shl i64 %76, 1
  store i64 %77, ptr %memberidx1.i2.i209, align 4
  %memberidx2.i.i.i212 = getelementptr inbounds %Array_FloError_, ptr %73, i64 0, i32 1
  %78 = load ptr, ptr %memberidx2.i.i.i212, align 8
  %79 = shl i64 %76, 4
  %80 = call ptr @realloc(ptr %78, i64 %79)
  store ptr %80, ptr %memberidx2.i.i.i212, align 8
  %.pre565 = load i64, ptr %memberidx.i.i208, align 4
  br label %TypeChecker_error.exit216

TypeChecker_error.exit216:                        ; preds = %if.entry23.TypeChecker_error.exit216_crit_edge, %if.entry.i.i213
  %81 = phi ptr [ %.pre566, %if.entry23.TypeChecker_error.exit216_crit_edge ], [ %80, %if.entry.i.i213 ]
  %82 = phi i64 [ %75, %if.entry23.TypeChecker_error.exit216_crit_edge ], [ %.pre565, %if.entry.i.i213 ]
  %83 = add i64 %82, 1
  store i64 %83, ptr %memberidx.i.i208, align 4
  %ptridx.i.i215 = getelementptr inbounds ptr, ptr %81, i64 %82
  store ptr %74, ptr %ptridx.i.i215, align 8
  br label %common.ret

if.entry41:                                       ; preds = %ifend
  %memberidx44 = getelementptr inbounds %PropId, ptr %38, i64 0, i32 1
  %84 = load ptr, ptr %memberidx44, align 8
  %85 = load ptr, ptr %1, align 8
  %86 = icmp eq ptr %84, %85
  br i1 %86, label %if.entry46, label %ifend48

else42:                                           ; preds = %ifend
  %memberidx78 = getelementptr inbounds %ClassMethod, ptr %10, i64 0, i32 9
  store i64 %current_vtable_index.0510, ptr %memberidx78, align 4
  br label %ifend43

ifend43:                                          ; preds = %else42, %get_vtable_index.exit
  %87 = tail call ptr @malloc(i32 24)
  %88 = load ptr, ptr %1, align 8
  store i64 0, ptr %87, align 4
  %memberidx1.i217 = getelementptr inbounds %PropId, ptr %87, i64 0, i32 1
  store ptr %88, ptr %memberidx1.i217, align 8
  %memberidx2.i218 = getelementptr inbounds %PropId, ptr %87, i64 0, i32 2
  store i64 %i.0511, ptr %memberidx2.i218, align 4
  store ptr %87, ptr %10, align 8
  %89 = load i1, ptr %memberidx32, align 1
  br i1 %89, label %if.entry82, label %else83

if.entry46:                                       ; preds = %if.entry41
  %90 = load ptr, ptr %12, align 8
  %memberidx49 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %90, i64 0, i32 5
  %91 = load ptr, ptr %memberidx49, align 8
  %92 = tail call ptr %91(ptr nonnull %12)
  %memberidx50 = getelementptr inbounds %Class, ptr %1, i64 0, i32 1
  %93 = load ptr, ptr %memberidx50, align 8
  %94 = load ptr, ptr %93, align 8
  %memberidx51 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %94, i64 0, i32 5
  %95 = load ptr, ptr %memberidx51, align 8
  %96 = tail call ptr %95(ptr nonnull %93)
  %97 = alloca ptr, align 8
  %98 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %97, ptr nonnull @188, ptr %92, ptr %96)
  %99 = load ptr, ptr %97, align 8
  %100 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %100, align 8
  %memberidx.i219 = getelementptr inbounds %string, ptr %100, i64 0, i32 1
  store ptr %99, ptr %memberidx.i219, align 8
  %memberidx1.i220 = getelementptr inbounds %string, ptr %100, i64 0, i32 2
  store i64 %98, ptr %memberidx1.i220, align 4
  %memberidx2.i221 = getelementptr inbounds %string, ptr %100, i64 0, i32 3
  store i64 %98, ptr %memberidx2.i221, align 4
  tail call void @free(ptr %92)
  tail call void @free(ptr %96)
  %101 = load ptr, ptr %9, align 8
  %memberidx53 = getelementptr inbounds %Token, ptr %101, i64 0, i32 1
  %102 = load ptr, ptr %memberidx53, align 8
  %memberidx.i222 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %103 = load ptr, ptr %memberidx.i222, align 8
  %memberidx1.i223 = getelementptr inbounds %Compiler, ptr %103, i64 0, i32 6
  %104 = load ptr, ptr %memberidx1.i223, align 8
  %105 = call ptr @malloc(i32 24)
  store i64 1, ptr %105, align 4
  %memberidx1.i.i224 = getelementptr inbounds %FloError, ptr %105, i64 0, i32 2
  store ptr %102, ptr %memberidx1.i.i224, align 8
  %memberidx2.i.i225 = getelementptr inbounds %FloError, ptr %105, i64 0, i32 1
  store ptr %100, ptr %memberidx2.i.i225, align 8
  %memberidx.i.i226 = getelementptr inbounds %Array_FloError_, ptr %104, i64 0, i32 2
  %106 = load i64, ptr %memberidx.i.i226, align 4
  %memberidx1.i2.i227 = getelementptr inbounds %Array_FloError_, ptr %104, i64 0, i32 3
  %107 = load i64, ptr %memberidx1.i2.i227, align 4
  %.not.i.i228 = icmp slt i64 %106, %107
  br i1 %.not.i.i228, label %if.entry46.TypeChecker_error.exit234_crit_edge, label %if.entry.i.i231

if.entry46.TypeChecker_error.exit234_crit_edge:   ; preds = %if.entry46
  %memberidx4.i.i232.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %104, i64 0, i32 1
  %.pre554 = load ptr, ptr %memberidx4.i.i232.phi.trans.insert, align 8
  br label %TypeChecker_error.exit234

if.entry.i.i231:                                  ; preds = %if.entry46
  %108 = shl i64 %107, 1
  store i64 %108, ptr %memberidx1.i2.i227, align 4
  %memberidx2.i.i.i230 = getelementptr inbounds %Array_FloError_, ptr %104, i64 0, i32 1
  %109 = load ptr, ptr %memberidx2.i.i.i230, align 8
  %110 = shl i64 %107, 4
  %111 = call ptr @realloc(ptr %109, i64 %110)
  store ptr %111, ptr %memberidx2.i.i.i230, align 8
  %.pre553 = load i64, ptr %memberidx.i.i226, align 4
  br label %TypeChecker_error.exit234

TypeChecker_error.exit234:                        ; preds = %if.entry46.TypeChecker_error.exit234_crit_edge, %if.entry.i.i231
  %112 = phi ptr [ %.pre554, %if.entry46.TypeChecker_error.exit234_crit_edge ], [ %111, %if.entry.i.i231 ]
  %113 = phi i64 [ %106, %if.entry46.TypeChecker_error.exit234_crit_edge ], [ %.pre553, %if.entry.i.i231 ]
  %114 = add i64 %113, 1
  store i64 %114, ptr %memberidx.i.i226, align 4
  %ptridx.i.i233 = getelementptr inbounds ptr, ptr %112, i64 %113
  store ptr %105, ptr %ptridx.i.i233, align 8
  br label %common.ret

ifend48:                                          ; preds = %if.entry41
  %115 = load ptr, ptr %0, align 8
  %memberidx.i.i.i236 = getelementptr inbounds %Program, ptr %115, i64 0, i32 1
  %116 = load ptr, ptr %memberidx.i.i.i236, align 8
  %117 = load i64, ptr %84, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %116, i64 0, i32 1
  %118 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %118, i64 %117
  %119 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i237 = getelementptr inbounds %Module, ptr %119, i64 0, i32 4
  %120 = load ptr, ptr %memberidx2.i.i.i237, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %84, i64 0, i32 2
  %121 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %120, i64 0, i32 1
  %122 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %122, i64 %121
  %123 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %124 = load i64, ptr %38, align 4
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %if.entry.i259, label %ifend.i265

if.entry.i259:                                    ; preds = %ifend48
  %memberidx1.i239 = getelementptr inbounds %Class, ptr %123, i64 0, i32 5
  %126 = load ptr, ptr %memberidx1.i239, align 8
  %memberidx2.i240 = getelementptr inbounds %PropId, ptr %38, i64 0, i32 2
  %127 = load i64, ptr %memberidx2.i240, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %126, i64 0, i32 1
  %128 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %128, i64 %127
  %129 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i241 = getelementptr inbounds %ClassMethod, ptr %129, i64 0, i32 4
  %parent_prop_visibility470 = alloca i64, align 8
  %memberidx3.i258 = getelementptr inbounds %ClassMethod, ptr %129, i64 0, i32 2
  br label %get_class_prop_visibility.exit

ifend.i265:                                       ; preds = %ifend48
  %memberidx4.i = getelementptr inbounds %Class, ptr %123, i64 0, i32 4
  %130 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %38, i64 0, i32 2
  %131 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %130, i64 0, i32 1
  %132 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i242 = getelementptr inbounds ptr, ptr %132, i64 %131
  %133 = load ptr, ptr %ptridx.i.i242, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %133, i64 0, i32 4
  %parent_prop_visibility = alloca i64, align 8
  %memberidx6.i264 = getelementptr inbounds %ClassField, ptr %133, i64 0, i32 2
  br label %get_class_prop_visibility.exit

get_class_prop_visibility.exit:                   ; preds = %if.entry.i259, %ifend.i265
  %parent_prop_visibility473 = phi ptr [ %parent_prop_visibility470, %if.entry.i259 ], [ %parent_prop_visibility, %ifend.i265 ]
  %common.ret.op.i238471.in = phi ptr [ %memberidx3.i241, %if.entry.i259 ], [ %memberidx6.i, %ifend.i265 ]
  %common.ret.op.in.i252 = phi ptr [ %memberidx3.i258, %if.entry.i259 ], [ %memberidx6.i264, %ifend.i265 ]
  %common.ret.op.i238471 = load ptr, ptr %common.ret.op.i238471.in, align 8
  %common.ret.op.i253 = load i64, ptr %common.ret.op.in.i252, align 4
  store i64 %common.ret.op.i253, ptr %parent_prop_visibility473, align 8
  %134 = load ptr, ptr %memberidx35, align 8
  %135 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %common.ret.op.i238471, ptr %134)
  br i1 %135, label %ifend59, label %if.entry57

if.entry57:                                       ; preds = %get_class_prop_visibility.exit
  %136 = load ptr, ptr %12, align 8
  %memberidx60 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %136, i64 0, i32 5
  %137 = load ptr, ptr %memberidx60, align 8
  %138 = tail call ptr %137(ptr nonnull %12)
  %memberidx61 = getelementptr inbounds %Class, ptr %1, i64 0, i32 1
  %139 = load ptr, ptr %memberidx61, align 8
  %140 = load ptr, ptr %139, align 8
  %memberidx62 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %140, i64 0, i32 5
  %141 = load ptr, ptr %memberidx62, align 8
  %142 = tail call ptr %141(ptr nonnull %139)
  %143 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %common.ret.op.i238471)
  %144 = load ptr, ptr %143, align 8
  %memberidx63 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %144, i64 0, i32 5
  %145 = load ptr, ptr %memberidx63, align 8
  %146 = tail call ptr %145(ptr nonnull %143)
  %147 = alloca ptr, align 8
  %148 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %147, ptr nonnull @189, ptr %138, ptr %142, ptr %146)
  %149 = load ptr, ptr %147, align 8
  %150 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %150, align 8
  %memberidx.i266 = getelementptr inbounds %string, ptr %150, i64 0, i32 1
  store ptr %149, ptr %memberidx.i266, align 8
  %memberidx1.i267 = getelementptr inbounds %string, ptr %150, i64 0, i32 2
  store i64 %148, ptr %memberidx1.i267, align 4
  %memberidx2.i268 = getelementptr inbounds %string, ptr %150, i64 0, i32 3
  store i64 %148, ptr %memberidx2.i268, align 4
  tail call void @free(ptr %138)
  tail call void @free(ptr %142)
  tail call void @free(ptr %146)
  %151 = load ptr, ptr %9, align 8
  %memberidx65 = getelementptr inbounds %Token, ptr %151, i64 0, i32 1
  %152 = load ptr, ptr %memberidx65, align 8
  %memberidx.i269 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %153 = load ptr, ptr %memberidx.i269, align 8
  %memberidx1.i270 = getelementptr inbounds %Compiler, ptr %153, i64 0, i32 6
  %154 = load ptr, ptr %memberidx1.i270, align 8
  %155 = call ptr @malloc(i32 24)
  store i64 5, ptr %155, align 4
  %memberidx1.i.i271 = getelementptr inbounds %FloError, ptr %155, i64 0, i32 2
  store ptr %152, ptr %memberidx1.i.i271, align 8
  %memberidx2.i.i272 = getelementptr inbounds %FloError, ptr %155, i64 0, i32 1
  store ptr %150, ptr %memberidx2.i.i272, align 8
  %memberidx.i.i273 = getelementptr inbounds %Array_FloError_, ptr %154, i64 0, i32 2
  %156 = load i64, ptr %memberidx.i.i273, align 4
  %memberidx1.i2.i274 = getelementptr inbounds %Array_FloError_, ptr %154, i64 0, i32 3
  %157 = load i64, ptr %memberidx1.i2.i274, align 4
  %.not.i.i275 = icmp slt i64 %156, %157
  br i1 %.not.i.i275, label %if.entry57.TypeChecker_error.exit281_crit_edge, label %if.entry.i.i278

if.entry57.TypeChecker_error.exit281_crit_edge:   ; preds = %if.entry57
  %memberidx4.i.i279.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %154, i64 0, i32 1
  %.pre550 = load ptr, ptr %memberidx4.i.i279.phi.trans.insert, align 8
  br label %TypeChecker_error.exit281

if.entry.i.i278:                                  ; preds = %if.entry57
  %158 = shl i64 %157, 1
  store i64 %158, ptr %memberidx1.i2.i274, align 4
  %memberidx2.i.i.i277 = getelementptr inbounds %Array_FloError_, ptr %154, i64 0, i32 1
  %159 = load ptr, ptr %memberidx2.i.i.i277, align 8
  %160 = shl i64 %157, 4
  %161 = call ptr @realloc(ptr %159, i64 %160)
  store ptr %161, ptr %memberidx2.i.i.i277, align 8
  %.pre549 = load i64, ptr %memberidx.i.i273, align 4
  br label %TypeChecker_error.exit281

TypeChecker_error.exit281:                        ; preds = %if.entry57.TypeChecker_error.exit281_crit_edge, %if.entry.i.i278
  %162 = phi ptr [ %.pre550, %if.entry57.TypeChecker_error.exit281_crit_edge ], [ %161, %if.entry.i.i278 ]
  %163 = phi i64 [ %156, %if.entry57.TypeChecker_error.exit281_crit_edge ], [ %.pre549, %if.entry.i.i278 ]
  %164 = add i64 %163, 1
  store i64 %164, ptr %memberidx.i.i273, align 4
  %ptridx.i.i280 = getelementptr inbounds ptr, ptr %162, i64 %163
  store ptr %155, ptr %ptridx.i.i280, align 8
  br label %common.ret

ifend59:                                          ; preds = %get_class_prop_visibility.exit
  %165 = load i64, ptr %memberidx33, align 4
  %.not184 = icmp eq i64 %165, %common.ret.op.i253
  br i1 %.not184, label %ifend69, label %if.entry67

if.entry67:                                       ; preds = %ifend59
  %166 = load ptr, ptr %12, align 8
  %memberidx70 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %166, i64 0, i32 5
  %167 = load ptr, ptr %memberidx70, align 8
  %168 = tail call ptr %167(ptr nonnull %12)
  %memberidx71 = getelementptr inbounds %Class, ptr %1, i64 0, i32 1
  %169 = load ptr, ptr %memberidx71, align 8
  %170 = load ptr, ptr %169, align 8
  %memberidx72 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %170, i64 0, i32 5
  %171 = load ptr, ptr %memberidx72, align 8
  %172 = tail call ptr %171(ptr nonnull %169)
  switch i64 %common.ret.op.i253, label %ifend3.i [
    i64 1, label %if.entry.i285
    i64 2, label %if.entry1.i
  ]

if.entry.i285:                                    ; preds = %if.entry67
  %173 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %173, ptr noundef nonnull align 8 dereferenceable(7) @48, i64 7, i1 false)
  br label %dump_access.exit

if.entry1.i:                                      ; preds = %if.entry67
  %174 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %174, ptr noundef nonnull align 8 dereferenceable(6) @49, i64 6, i1 false)
  br label %dump_access.exit

ifend3.i:                                         ; preds = %if.entry67
  %175 = tail call ptr @malloc(i32 72)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %175, ptr noundef nonnull align 8 dereferenceable(9) @50, i64 9, i1 false)
  br label %dump_access.exit

dump_access.exit:                                 ; preds = %if.entry.i285, %if.entry1.i, %ifend3.i
  %.sink595 = phi ptr [ %173, %if.entry.i285 ], [ %174, %if.entry1.i ], [ %175, %ifend3.i ]
  %.sink593 = phi i64 [ 7, %if.entry.i285 ], [ 6, %if.entry1.i ], [ 9, %ifend3.i ]
  %176 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %176, align 8
  %memberidx.i.i.i283 = getelementptr inbounds %string, ptr %176, i64 0, i32 1
  store ptr %.sink595, ptr %memberidx.i.i.i283, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %176, i64 0, i32 2
  store i64 %.sink593, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i284 = getelementptr inbounds %string, ptr %176, i64 0, i32 3
  store i64 %.sink593, ptr %memberidx2.i.i.i284, align 4
  %177 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %178 = tail call ptr %177(ptr nonnull %176)
  %179 = alloca ptr, align 8
  %180 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %179, ptr nonnull @190, ptr %168, ptr %172, ptr %178)
  %181 = load ptr, ptr %179, align 8
  %182 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %182, align 8
  %memberidx.i287 = getelementptr inbounds %string, ptr %182, i64 0, i32 1
  store ptr %181, ptr %memberidx.i287, align 8
  %memberidx1.i288 = getelementptr inbounds %string, ptr %182, i64 0, i32 2
  store i64 %180, ptr %memberidx1.i288, align 4
  %memberidx2.i289 = getelementptr inbounds %string, ptr %182, i64 0, i32 3
  store i64 %180, ptr %memberidx2.i289, align 4
  tail call void @free(ptr %168)
  tail call void @free(ptr %172)
  tail call void @free(ptr %178)
  %183 = load ptr, ptr %9, align 8
  %memberidx75 = getelementptr inbounds %Token, ptr %183, i64 0, i32 1
  %184 = load ptr, ptr %memberidx75, align 8
  %memberidx.i290 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %185 = load ptr, ptr %memberidx.i290, align 8
  %memberidx1.i291 = getelementptr inbounds %Compiler, ptr %185, i64 0, i32 6
  %186 = load ptr, ptr %memberidx1.i291, align 8
  %187 = call ptr @malloc(i32 24)
  store i64 4, ptr %187, align 4
  %memberidx1.i.i292 = getelementptr inbounds %FloError, ptr %187, i64 0, i32 2
  store ptr %184, ptr %memberidx1.i.i292, align 8
  %memberidx2.i.i293 = getelementptr inbounds %FloError, ptr %187, i64 0, i32 1
  store ptr %182, ptr %memberidx2.i.i293, align 8
  %memberidx.i.i294 = getelementptr inbounds %Array_FloError_, ptr %186, i64 0, i32 2
  %188 = load i64, ptr %memberidx.i.i294, align 4
  %memberidx1.i2.i295 = getelementptr inbounds %Array_FloError_, ptr %186, i64 0, i32 3
  %189 = load i64, ptr %memberidx1.i2.i295, align 4
  %.not.i.i296 = icmp slt i64 %188, %189
  br i1 %.not.i.i296, label %dump_access.exit.TypeChecker_error.exit302_crit_edge, label %if.entry.i.i299

dump_access.exit.TypeChecker_error.exit302_crit_edge: ; preds = %dump_access.exit
  %memberidx4.i.i300.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %186, i64 0, i32 1
  %.pre552 = load ptr, ptr %memberidx4.i.i300.phi.trans.insert, align 8
  br label %TypeChecker_error.exit302

if.entry.i.i299:                                  ; preds = %dump_access.exit
  %190 = shl i64 %189, 1
  store i64 %190, ptr %memberidx1.i2.i295, align 4
  %memberidx2.i.i.i298 = getelementptr inbounds %Array_FloError_, ptr %186, i64 0, i32 1
  %191 = load ptr, ptr %memberidx2.i.i.i298, align 8
  %192 = shl i64 %189, 4
  %193 = call ptr @realloc(ptr %191, i64 %192)
  store ptr %193, ptr %memberidx2.i.i.i298, align 8
  %.pre551 = load i64, ptr %memberidx.i.i294, align 4
  br label %TypeChecker_error.exit302

TypeChecker_error.exit302:                        ; preds = %dump_access.exit.TypeChecker_error.exit302_crit_edge, %if.entry.i.i299
  %194 = phi ptr [ %.pre552, %dump_access.exit.TypeChecker_error.exit302_crit_edge ], [ %193, %if.entry.i.i299 ]
  %195 = phi i64 [ %188, %dump_access.exit.TypeChecker_error.exit302_crit_edge ], [ %.pre551, %if.entry.i.i299 ]
  %196 = add i64 %195, 1
  store i64 %196, ptr %memberidx.i.i294, align 4
  %ptridx.i.i301 = getelementptr inbounds ptr, ptr %194, i64 %195
  store ptr %187, ptr %ptridx.i.i301, align 8
  br label %common.ret

ifend69:                                          ; preds = %ifend59
  %memberidx76 = getelementptr inbounds %ClassMethod, ptr %10, i64 0, i32 9
  %197 = load ptr, ptr %0, align 8
  %198 = load ptr, ptr %memberidx44, align 8
  %memberidx.i.i.i304 = getelementptr inbounds %Program, ptr %197, i64 0, i32 1
  %199 = load ptr, ptr %memberidx.i.i.i304, align 8
  %200 = load i64, ptr %198, align 4
  %memberidx.i.i.i.i305 = getelementptr inbounds %Array_Module_, ptr %199, i64 0, i32 1
  %201 = load ptr, ptr %memberidx.i.i.i.i305, align 8
  %ptridx.i.i.i.i306 = getelementptr inbounds ptr, ptr %201, i64 %200
  %202 = load ptr, ptr %ptridx.i.i.i.i306, align 8
  %memberidx2.i.i.i307 = getelementptr inbounds %Module, ptr %202, i64 0, i32 4
  %203 = load ptr, ptr %memberidx2.i.i.i307, align 8
  %memberidx3.i.i.i308 = getelementptr inbounds %TypeId, ptr %198, i64 0, i32 2
  %204 = load i64, ptr %memberidx3.i.i.i308, align 4
  %memberidx.i5.i.i.i309 = getelementptr inbounds %Array_Class_, ptr %203, i64 0, i32 1
  %205 = load ptr, ptr %memberidx.i5.i.i.i309, align 8
  %ptridx.i6.i.i.i310 = getelementptr inbounds ptr, ptr %205, i64 %204
  %206 = load ptr, ptr %ptridx.i6.i.i.i310, align 8
  %207 = load i64, ptr %38, align 4
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %if.entry.i318, label %ifend.i324

if.entry.i318:                                    ; preds = %ifend69
  %memberidx1.i313 = getelementptr inbounds %Class, ptr %206, i64 0, i32 5
  %209 = load ptr, ptr %memberidx1.i313, align 8
  %memberidx2.i314 = getelementptr inbounds %PropId, ptr %38, i64 0, i32 2
  %210 = load i64, ptr %memberidx2.i314, align 4
  %memberidx.i12.i315 = getelementptr inbounds %Array_ClassMethod_, ptr %209, i64 0, i32 1
  %211 = load ptr, ptr %memberidx.i12.i315, align 8
  %ptridx.i13.i316 = getelementptr inbounds ptr, ptr %211, i64 %210
  %212 = load ptr, ptr %ptridx.i13.i316, align 8
  %memberidx3.i317 = getelementptr inbounds %ClassMethod, ptr %212, i64 0, i32 9
  br label %get_vtable_index.exit

ifend.i324:                                       ; preds = %ifend69
  %memberidx4.i319 = getelementptr inbounds %Class, ptr %206, i64 0, i32 4
  %213 = load ptr, ptr %memberidx4.i319, align 8
  %memberidx5.i320 = getelementptr inbounds %PropId, ptr %38, i64 0, i32 2
  %214 = load i64, ptr %memberidx5.i320, align 4
  %memberidx.i11.i321 = getelementptr inbounds %Array_ClassField_, ptr %213, i64 0, i32 1
  %215 = load ptr, ptr %memberidx.i11.i321, align 8
  %ptridx.i.i322 = getelementptr inbounds ptr, ptr %215, i64 %214
  %216 = load ptr, ptr %ptridx.i.i322, align 8
  %memberidx6.i323 = getelementptr inbounds %ClassField, ptr %216, i64 0, i32 6
  br label %get_vtable_index.exit

get_vtable_index.exit:                            ; preds = %if.entry.i318, %ifend.i324
  %common.ret.op.in.i311 = phi ptr [ %memberidx3.i317, %if.entry.i318 ], [ %memberidx6.i323, %ifend.i324 ]
  %common.ret.op.i312 = load i64, ptr %common.ret.op.in.i311, align 4
  store i64 %common.ret.op.i312, ptr %memberidx76, align 4
  br label %ifend43

if.entry82:                                       ; preds = %ifend43
  %217 = load i1, ptr %memberidx30, align 1
  br i1 %217, label %if.entry86, label %ifend88

else83:                                           ; preds = %ifend43
  %218 = load ptr, ptr %memberidx6, align 8
  %219 = tail call ptr @malloc(i32 88)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %219, ptr noundef nonnull align 8 dereferenceable(11) @192, i64 11, i1 false)
  %220 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %220, align 8
  %memberidx.i.i325 = getelementptr inbounds %string, ptr %220, i64 0, i32 1
  store ptr %219, ptr %memberidx.i.i325, align 8
  %memberidx1.i.i326 = getelementptr inbounds %string, ptr %220, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i326, align 4
  %memberidx2.i.i327 = getelementptr inbounds %string, ptr %220, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i327, align 4
  %memberidx.i328 = getelementptr inbounds %string, ptr %218, i64 0, i32 2
  %221 = load i64, ptr %memberidx.i328, align 4
  %.not.i330 = icmp eq i64 %221, 11
  br i1 %.not.i330, label %ifend.i334, label %else102

ifend.i334:                                       ; preds = %else83
  %memberidx2.i332 = getelementptr inbounds %string, ptr %218, i64 0, i32 1
  %222 = load ptr, ptr %memberidx2.i332, align 8
  %223 = tail call i64 @memcmp(ptr %222, ptr nonnull %219, i64 11)
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %if.entry101, label %else102

ifend84:                                          ; preds = %get_class_prop_type.exit446, %if.entry3.i, %ifend103, %ifend94
  %current_vtable_index.1 = phi i64 [ %current_vtable_index.0510, %ifend94 ], [ %current_vtable_index.2, %get_class_prop_type.exit446 ], [ %current_vtable_index.2, %if.entry3.i ], [ %current_vtable_index.2, %ifend103 ]
  %memberidx137 = getelementptr inbounds %ClassMethod, ptr %10, i64 0, i32 8
  %225 = load ptr, ptr %13, align 8
  store ptr %225, ptr %memberidx137, align 8
  %226 = load ptr, ptr %memberidx139, align 8
  %memberidx.i336 = getelementptr inbounds %Array_ClassMethod_, ptr %226, i64 0, i32 2
  %227 = load i64, ptr %memberidx.i336, align 4
  %memberidx1.i337 = getelementptr inbounds %Array_ClassMethod_, ptr %226, i64 0, i32 3
  %228 = load i64, ptr %memberidx1.i337, align 4
  %.not.i338 = icmp slt i64 %227, %228
  br i1 %.not.i338, label %ifend84.Array_ClassMethod____sl__.exit_crit_edge, label %if.entry.i341

ifend84.Array_ClassMethod____sl__.exit_crit_edge: ; preds = %ifend84
  %memberidx4.i342.phi.trans.insert = getelementptr inbounds %Array_ClassMethod_, ptr %226, i64 0, i32 1
  %.pre560 = load ptr, ptr %memberidx4.i342.phi.trans.insert, align 8
  br label %Array_ClassMethod____sl__.exit

if.entry.i341:                                    ; preds = %ifend84
  %229 = shl i64 %228, 1
  store i64 %229, ptr %memberidx1.i337, align 4
  %memberidx2.i.i340 = getelementptr inbounds %Array_ClassMethod_, ptr %226, i64 0, i32 1
  %230 = load ptr, ptr %memberidx2.i.i340, align 8
  %231 = shl i64 %228, 4
  %232 = tail call ptr @realloc(ptr %230, i64 %231)
  store ptr %232, ptr %memberidx2.i.i340, align 8
  %.pre559 = load i64, ptr %memberidx.i336, align 4
  br label %Array_ClassMethod____sl__.exit

Array_ClassMethod____sl__.exit:                   ; preds = %ifend84.Array_ClassMethod____sl__.exit_crit_edge, %if.entry.i341
  %233 = phi ptr [ %.pre560, %ifend84.Array_ClassMethod____sl__.exit_crit_edge ], [ %232, %if.entry.i341 ]
  %234 = phi i64 [ %227, %ifend84.Array_ClassMethod____sl__.exit_crit_edge ], [ %.pre559, %if.entry.i341 ]
  %235 = add i64 %234, 1
  store i64 %235, ptr %memberidx.i336, align 4
  %ptridx.i343 = getelementptr inbounds ptr, ptr %233, i64 %234
  store ptr %10, ptr %ptridx.i343, align 8
  %236 = load ptr, ptr %memberidx.i187, align 8
  store ptr %236, ptr %memberidx1.i, align 8
  %237 = add nuw nsw i64 %i.0511, 1
  %238 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Array_MethodNode_, ptr %238, i64 0, i32 2
  %239 = load i64, ptr %memberidx2, align 4
  %240 = icmp slt i64 %237, %239
  br i1 %240, label %for.body, label %common.ret

if.entry86:                                       ; preds = %if.entry82
  %241 = tail call ptr @malloc(i32 248)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(31) %241, ptr noundef nonnull align 8 dereferenceable(31) @191, i64 31, i1 false)
  %242 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %242, align 8
  %memberidx.i.i345 = getelementptr inbounds %string, ptr %242, i64 0, i32 1
  store ptr %241, ptr %memberidx.i.i345, align 8
  %memberidx1.i.i346 = getelementptr inbounds %string, ptr %242, i64 0, i32 2
  store i64 31, ptr %memberidx1.i.i346, align 4
  %memberidx2.i.i347 = getelementptr inbounds %string, ptr %242, i64 0, i32 3
  store i64 31, ptr %memberidx2.i.i347, align 4
  %243 = load ptr, ptr %9, align 8
  %memberidx90 = getelementptr inbounds %Token, ptr %243, i64 0, i32 1
  %244 = load ptr, ptr %memberidx90, align 8
  %memberidx.i348 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %245 = load ptr, ptr %memberidx.i348, align 8
  %memberidx1.i349 = getelementptr inbounds %Compiler, ptr %245, i64 0, i32 6
  %246 = load ptr, ptr %memberidx1.i349, align 8
  %247 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %247, align 4
  %memberidx1.i.i350 = getelementptr inbounds %FloError, ptr %247, i64 0, i32 2
  store ptr %244, ptr %memberidx1.i.i350, align 8
  %memberidx2.i.i351 = getelementptr inbounds %FloError, ptr %247, i64 0, i32 1
  store ptr %242, ptr %memberidx2.i.i351, align 8
  %memberidx.i.i352 = getelementptr inbounds %Array_FloError_, ptr %246, i64 0, i32 2
  %248 = load i64, ptr %memberidx.i.i352, align 4
  %memberidx1.i2.i353 = getelementptr inbounds %Array_FloError_, ptr %246, i64 0, i32 3
  %249 = load i64, ptr %memberidx1.i2.i353, align 4
  %.not.i.i354 = icmp slt i64 %248, %249
  br i1 %.not.i.i354, label %if.entry86.TypeChecker_error.exit360_crit_edge, label %if.entry.i.i357

if.entry86.TypeChecker_error.exit360_crit_edge:   ; preds = %if.entry86
  %memberidx4.i.i358.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %246, i64 0, i32 1
  %.pre564 = load ptr, ptr %memberidx4.i.i358.phi.trans.insert, align 8
  br label %TypeChecker_error.exit360

if.entry.i.i357:                                  ; preds = %if.entry86
  %250 = shl i64 %249, 1
  store i64 %250, ptr %memberidx1.i2.i353, align 4
  %memberidx2.i.i.i356 = getelementptr inbounds %Array_FloError_, ptr %246, i64 0, i32 1
  %251 = load ptr, ptr %memberidx2.i.i.i356, align 8
  %252 = shl i64 %249, 4
  %253 = tail call ptr @realloc(ptr %251, i64 %252)
  store ptr %253, ptr %memberidx2.i.i.i356, align 8
  %.pre563 = load i64, ptr %memberidx.i.i352, align 4
  br label %TypeChecker_error.exit360

TypeChecker_error.exit360:                        ; preds = %if.entry86.TypeChecker_error.exit360_crit_edge, %if.entry.i.i357
  %254 = phi ptr [ %.pre564, %if.entry86.TypeChecker_error.exit360_crit_edge ], [ %253, %if.entry.i.i357 ]
  %255 = phi i64 [ %248, %if.entry86.TypeChecker_error.exit360_crit_edge ], [ %.pre563, %if.entry.i.i357 ]
  %256 = add i64 %255, 1
  store i64 %256, ptr %memberidx.i.i352, align 4
  %ptridx.i.i359 = getelementptr inbounds ptr, ptr %254, i64 %255
  store ptr %247, ptr %ptridx.i.i359, align 8
  br label %common.ret

ifend88:                                          ; preds = %if.entry82
  %257 = load ptr, ptr %memberidx6, align 8
  %258 = tail call ptr @malloc(i32 88)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %258, ptr noundef nonnull align 8 dereferenceable(11) @192, i64 11, i1 false)
  %259 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %259, align 8
  %memberidx.i.i361 = getelementptr inbounds %string, ptr %259, i64 0, i32 1
  store ptr %258, ptr %memberidx.i.i361, align 8
  %memberidx1.i.i362 = getelementptr inbounds %string, ptr %259, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i362, align 4
  %memberidx2.i.i363 = getelementptr inbounds %string, ptr %259, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i363, align 4
  %memberidx.i364 = getelementptr inbounds %string, ptr %257, i64 0, i32 2
  %260 = load i64, ptr %memberidx.i364, align 4
  %.not.i366 = icmp eq i64 %260, 11
  br i1 %.not.i366, label %ifend.i370, label %ifend94

ifend.i370:                                       ; preds = %ifend88
  %memberidx2.i368 = getelementptr inbounds %string, ptr %257, i64 0, i32 1
  %261 = load ptr, ptr %memberidx2.i368, align 8
  %262 = tail call i64 @memcmp(ptr %261, ptr nonnull %258, i64 11)
  %263 = icmp eq i64 %262, 0
  br i1 %263, label %if.entry92, label %ifend94

if.entry92:                                       ; preds = %ifend.i370
  %264 = tail call ptr @malloc(i32 264)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(33) %264, ptr noundef nonnull align 8 dereferenceable(33) @193, i64 33, i1 false)
  %265 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %265, align 8
  %memberidx.i.i372 = getelementptr inbounds %string, ptr %265, i64 0, i32 1
  store ptr %264, ptr %memberidx.i.i372, align 8
  %memberidx1.i.i373 = getelementptr inbounds %string, ptr %265, i64 0, i32 2
  store i64 33, ptr %memberidx1.i.i373, align 4
  %memberidx2.i.i374 = getelementptr inbounds %string, ptr %265, i64 0, i32 3
  store i64 33, ptr %memberidx2.i.i374, align 4
  %266 = load ptr, ptr %9, align 8
  %memberidx96 = getelementptr inbounds %Token, ptr %266, i64 0, i32 1
  %267 = load ptr, ptr %memberidx96, align 8
  %memberidx.i375 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %268 = load ptr, ptr %memberidx.i375, align 8
  %memberidx1.i376 = getelementptr inbounds %Compiler, ptr %268, i64 0, i32 6
  %269 = load ptr, ptr %memberidx1.i376, align 8
  %270 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %270, align 4
  %memberidx1.i.i377 = getelementptr inbounds %FloError, ptr %270, i64 0, i32 2
  store ptr %267, ptr %memberidx1.i.i377, align 8
  %memberidx2.i.i378 = getelementptr inbounds %FloError, ptr %270, i64 0, i32 1
  store ptr %265, ptr %memberidx2.i.i378, align 8
  %memberidx.i.i379 = getelementptr inbounds %Array_FloError_, ptr %269, i64 0, i32 2
  %271 = load i64, ptr %memberidx.i.i379, align 4
  %memberidx1.i2.i380 = getelementptr inbounds %Array_FloError_, ptr %269, i64 0, i32 3
  %272 = load i64, ptr %memberidx1.i2.i380, align 4
  %.not.i.i381 = icmp slt i64 %271, %272
  br i1 %.not.i.i381, label %if.entry92.TypeChecker_error.exit387_crit_edge, label %if.entry.i.i384

if.entry92.TypeChecker_error.exit387_crit_edge:   ; preds = %if.entry92
  %memberidx4.i.i385.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %269, i64 0, i32 1
  %.pre562 = load ptr, ptr %memberidx4.i.i385.phi.trans.insert, align 8
  br label %TypeChecker_error.exit387

if.entry.i.i384:                                  ; preds = %if.entry92
  %273 = shl i64 %272, 1
  store i64 %273, ptr %memberidx1.i2.i380, align 4
  %memberidx2.i.i.i383 = getelementptr inbounds %Array_FloError_, ptr %269, i64 0, i32 1
  %274 = load ptr, ptr %memberidx2.i.i.i383, align 8
  %275 = shl i64 %272, 4
  %276 = tail call ptr @realloc(ptr %274, i64 %275)
  store ptr %276, ptr %memberidx2.i.i.i383, align 8
  %.pre561 = load i64, ptr %memberidx.i.i379, align 4
  br label %TypeChecker_error.exit387

TypeChecker_error.exit387:                        ; preds = %if.entry92.TypeChecker_error.exit387_crit_edge, %if.entry.i.i384
  %277 = phi ptr [ %.pre562, %if.entry92.TypeChecker_error.exit387_crit_edge ], [ %276, %if.entry.i.i384 ]
  %278 = phi i64 [ %271, %if.entry92.TypeChecker_error.exit387_crit_edge ], [ %.pre561, %if.entry.i.i384 ]
  %279 = add i64 %278, 1
  store i64 %279, ptr %memberidx.i.i379, align 4
  %ptridx.i.i386 = getelementptr inbounds ptr, ptr %277, i64 %278
  store ptr %270, ptr %ptridx.i.i386, align 8
  br label %common.ret

ifend94:                                          ; preds = %ifend88, %ifend.i370
  %280 = load ptr, ptr %memberidx97, align 8
  %281 = load ptr, ptr %280, align 8
  %282 = load ptr, ptr %281, align 8
  %283 = load ptr, ptr %10, align 8
  tail call void %282(ptr nonnull %280, ptr %12, ptr %283)
  br label %ifend84

if.entry101:                                      ; preds = %ifend.i334
  %284 = load i1, ptr %memberidx30, align 1
  br i1 %284, label %if.entry105, label %ifend107

else102:                                          ; preds = %else83, %ifend.i334
  %285 = load i64, ptr %memberidx33, align 4
  %.not181 = icmp eq i64 %285, 1
  br i1 %.not181, label %else114, label %if.entry113

ifend103:                                         ; preds = %ifend115, %ifend107
  %current_vtable_index.2 = phi i64 [ %current_vtable_index.0510, %ifend107 ], [ %current_vtable_index.3, %ifend115 ]
  %286 = tail call ptr @malloc(i32 16)
  %287 = load ptr, ptr %1, align 8
  store i64 13, ptr %286, align 4
  %memberidx.i388 = getelementptr inbounds %ObjectType, ptr %286, i64 0, i32 1
  store ptr %287, ptr %memberidx.i388, align 8
  %288 = tail call ptr @malloc(i32 32)
  store i32 1936287860, ptr %288, align 8
  %289 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %289, align 8
  %memberidx.i.i389 = getelementptr inbounds %string, ptr %289, i64 0, i32 1
  store ptr %288, ptr %memberidx.i.i389, align 8
  %memberidx1.i.i390 = getelementptr inbounds %string, ptr %289, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i390, align 4
  %memberidx2.i.i391 = getelementptr inbounds %string, ptr %289, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i391, align 4
  %290 = tail call fastcc ptr @TypeChecker_declare_const_within_current_scope(ptr nonnull %0, ptr nonnull %289, ptr null, ptr nonnull %286)
  %291 = load ptr, ptr %memberidx126, align 8
  %.not182 = icmp eq ptr %291, null
  br i1 %.not182, label %ifend84, label %if.entry127

if.entry105:                                      ; preds = %if.entry101
  %292 = tail call ptr @malloc(i32 280)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(35) %292, ptr noundef nonnull align 8 dereferenceable(35) @194, i64 35, i1 false)
  %293 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %293, align 8
  %memberidx.i.i392 = getelementptr inbounds %string, ptr %293, i64 0, i32 1
  store ptr %292, ptr %memberidx.i.i392, align 8
  %memberidx1.i.i393 = getelementptr inbounds %string, ptr %293, i64 0, i32 2
  store i64 35, ptr %memberidx1.i.i393, align 4
  %memberidx2.i.i394 = getelementptr inbounds %string, ptr %293, i64 0, i32 3
  store i64 35, ptr %memberidx2.i.i394, align 4
  %294 = load ptr, ptr %9, align 8
  %memberidx109 = getelementptr inbounds %Token, ptr %294, i64 0, i32 1
  %295 = load ptr, ptr %memberidx109, align 8
  %memberidx.i395 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %296 = load ptr, ptr %memberidx.i395, align 8
  %memberidx1.i396 = getelementptr inbounds %Compiler, ptr %296, i64 0, i32 6
  %297 = load ptr, ptr %memberidx1.i396, align 8
  %298 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %298, align 4
  %memberidx1.i.i397 = getelementptr inbounds %FloError, ptr %298, i64 0, i32 2
  store ptr %295, ptr %memberidx1.i.i397, align 8
  %memberidx2.i.i398 = getelementptr inbounds %FloError, ptr %298, i64 0, i32 1
  store ptr %293, ptr %memberidx2.i.i398, align 8
  %memberidx.i.i399 = getelementptr inbounds %Array_FloError_, ptr %297, i64 0, i32 2
  %299 = load i64, ptr %memberidx.i.i399, align 4
  %memberidx1.i2.i400 = getelementptr inbounds %Array_FloError_, ptr %297, i64 0, i32 3
  %300 = load i64, ptr %memberidx1.i2.i400, align 4
  %.not.i.i401 = icmp slt i64 %299, %300
  br i1 %.not.i.i401, label %if.entry105.TypeChecker_error.exit407_crit_edge, label %if.entry.i.i404

if.entry105.TypeChecker_error.exit407_crit_edge:  ; preds = %if.entry105
  %memberidx4.i.i405.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %297, i64 0, i32 1
  %.pre558 = load ptr, ptr %memberidx4.i.i405.phi.trans.insert, align 8
  br label %TypeChecker_error.exit407

if.entry.i.i404:                                  ; preds = %if.entry105
  %301 = shl i64 %300, 1
  store i64 %301, ptr %memberidx1.i2.i400, align 4
  %memberidx2.i.i.i403 = getelementptr inbounds %Array_FloError_, ptr %297, i64 0, i32 1
  %302 = load ptr, ptr %memberidx2.i.i.i403, align 8
  %303 = shl i64 %300, 4
  %304 = tail call ptr @realloc(ptr %302, i64 %303)
  store ptr %304, ptr %memberidx2.i.i.i403, align 8
  %.pre557 = load i64, ptr %memberidx.i.i399, align 4
  br label %TypeChecker_error.exit407

TypeChecker_error.exit407:                        ; preds = %if.entry105.TypeChecker_error.exit407_crit_edge, %if.entry.i.i404
  %305 = phi ptr [ %.pre558, %if.entry105.TypeChecker_error.exit407_crit_edge ], [ %304, %if.entry.i.i404 ]
  %306 = phi i64 [ %299, %if.entry105.TypeChecker_error.exit407_crit_edge ], [ %.pre557, %if.entry.i.i404 ]
  %307 = add i64 %306, 1
  store i64 %307, ptr %memberidx.i.i399, align 4
  %ptridx.i.i406 = getelementptr inbounds ptr, ptr %305, i64 %306
  store ptr %298, ptr %ptridx.i.i406, align 8
  br label %common.ret

ifend107:                                         ; preds = %if.entry101
  %308 = load ptr, ptr %10, align 8
  store ptr %308, ptr %memberidx110, align 8
  br label %ifend103

if.entry113:                                      ; preds = %else102
  %309 = add i64 %current_vtable_index.0510, 1
  br label %ifend115

else114:                                          ; preds = %else102
  %310 = load i1, ptr %memberidx30, align 1
  br i1 %310, label %if.entry117, label %ifend115

ifend115:                                         ; preds = %else114, %if.entry113
  %current_vtable_index.3 = phi i64 [ %309, %if.entry113 ], [ %current_vtable_index.0510, %else114 ]
  %311 = load ptr, ptr %memberidx39, align 8
  %312 = load ptr, ptr %311, align 8
  %313 = load ptr, ptr %312, align 8
  %314 = load ptr, ptr %10, align 8
  tail call void %313(ptr nonnull %311, ptr %12, ptr %314)
  br label %ifend103

if.entry117:                                      ; preds = %else114
  %315 = tail call ptr @malloc(i32 464)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(58) %315, ptr noundef nonnull align 8 dereferenceable(58) @195, i64 58, i1 false)
  %316 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %316, align 8
  %memberidx.i.i408 = getelementptr inbounds %string, ptr %316, i64 0, i32 1
  store ptr %315, ptr %memberidx.i.i408, align 8
  %memberidx1.i.i409 = getelementptr inbounds %string, ptr %316, i64 0, i32 2
  store i64 58, ptr %memberidx1.i.i409, align 4
  %memberidx2.i.i410 = getelementptr inbounds %string, ptr %316, i64 0, i32 3
  store i64 58, ptr %memberidx2.i.i410, align 4
  %317 = load ptr, ptr %9, align 8
  %memberidx121 = getelementptr inbounds %Token, ptr %317, i64 0, i32 1
  %318 = load ptr, ptr %memberidx121, align 8
  %memberidx.i411 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %319 = load ptr, ptr %memberidx.i411, align 8
  %memberidx1.i412 = getelementptr inbounds %Compiler, ptr %319, i64 0, i32 6
  %320 = load ptr, ptr %memberidx1.i412, align 8
  %321 = tail call ptr @malloc(i32 24)
  store i64 4, ptr %321, align 4
  %memberidx1.i.i413 = getelementptr inbounds %FloError, ptr %321, i64 0, i32 2
  store ptr %318, ptr %memberidx1.i.i413, align 8
  %memberidx2.i.i414 = getelementptr inbounds %FloError, ptr %321, i64 0, i32 1
  store ptr %316, ptr %memberidx2.i.i414, align 8
  %memberidx.i.i415 = getelementptr inbounds %Array_FloError_, ptr %320, i64 0, i32 2
  %322 = load i64, ptr %memberidx.i.i415, align 4
  %memberidx1.i2.i416 = getelementptr inbounds %Array_FloError_, ptr %320, i64 0, i32 3
  %323 = load i64, ptr %memberidx1.i2.i416, align 4
  %.not.i.i417 = icmp slt i64 %322, %323
  br i1 %.not.i.i417, label %if.entry117.TypeChecker_error.exit423_crit_edge, label %if.entry.i.i420

if.entry117.TypeChecker_error.exit423_crit_edge:  ; preds = %if.entry117
  %memberidx4.i.i421.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %320, i64 0, i32 1
  %.pre556 = load ptr, ptr %memberidx4.i.i421.phi.trans.insert, align 8
  br label %TypeChecker_error.exit423

if.entry.i.i420:                                  ; preds = %if.entry117
  %324 = shl i64 %323, 1
  store i64 %324, ptr %memberidx1.i2.i416, align 4
  %memberidx2.i.i.i419 = getelementptr inbounds %Array_FloError_, ptr %320, i64 0, i32 1
  %325 = load ptr, ptr %memberidx2.i.i.i419, align 8
  %326 = shl i64 %323, 4
  %327 = tail call ptr @realloc(ptr %325, i64 %326)
  store ptr %327, ptr %memberidx2.i.i.i419, align 8
  %.pre555 = load i64, ptr %memberidx.i.i415, align 4
  br label %TypeChecker_error.exit423

TypeChecker_error.exit423:                        ; preds = %if.entry117.TypeChecker_error.exit423_crit_edge, %if.entry.i.i420
  %328 = phi ptr [ %.pre556, %if.entry117.TypeChecker_error.exit423_crit_edge ], [ %327, %if.entry.i.i420 ]
  %329 = phi i64 [ %322, %if.entry117.TypeChecker_error.exit423_crit_edge ], [ %.pre555, %if.entry.i.i420 ]
  %330 = add i64 %329, 1
  store i64 %330, ptr %memberidx.i.i415, align 4
  %ptridx.i.i422 = getelementptr inbounds ptr, ptr %328, i64 %329
  store ptr %321, ptr %ptridx.i.i422, align 8
  br label %common.ret

if.entry127:                                      ; preds = %ifend103
  %331 = load ptr, ptr %0, align 8
  %332 = load i64, ptr %291, align 4
  %switch507 = icmp eq i64 %332, 20
  br i1 %switch507, label %if.entry.i461, label %if.entry3.i

if.entry.i461:                                    ; preds = %if.entry127, %if.entry.i461
  %.tr11.i508 = phi ptr [ %333, %if.entry.i461 ], [ %291, %if.entry127 ]
  %memberidx1.i460 = getelementptr inbounds %GenericType, ptr %.tr11.i508, i64 0, i32 3
  %333 = load ptr, ptr %memberidx1.i460, align 8
  %334 = load i64, ptr %333, align 4
  %switch = icmp eq i64 %334, 20
  br i1 %switch, label %if.entry.i461, label %if.entry3.i

if.entry3.i:                                      ; preds = %if.entry.i461, %if.entry127
  %.tr11.i.lcssa = phi ptr [ %291, %if.entry127 ], [ %333, %if.entry.i461 ]
  %memberidx6.i462 = getelementptr inbounds %ObjectType, ptr %.tr11.i.lcssa, i64 0, i32 1
  %335 = load ptr, ptr %memberidx6.i462, align 8
  %memberidx.i.i463 = getelementptr inbounds %Program, ptr %331, i64 0, i32 1
  %336 = load ptr, ptr %memberidx.i.i463, align 8
  %337 = load i64, ptr %335, align 4
  %memberidx.i.i.i464 = getelementptr inbounds %Array_Module_, ptr %336, i64 0, i32 1
  %338 = load ptr, ptr %memberidx.i.i.i464, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %338, i64 %337
  %339 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i465 = getelementptr inbounds %Module, ptr %339, i64 0, i32 4
  %340 = load ptr, ptr %memberidx2.i.i465, align 8
  %memberidx3.i.i = getelementptr inbounds %TypeId, ptr %335, i64 0, i32 2
  %341 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %340, i64 0, i32 1
  %342 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %342, i64 %341
  %343 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx132 = getelementptr inbounds %Class, ptr %343, i64 0, i32 3
  %344 = load ptr, ptr %memberidx132, align 8
  %.not183 = icmp eq ptr %344, null
  br i1 %.not183, label %ifend84, label %if.entry133

if.entry133:                                      ; preds = %if.entry3.i
  %memberidx.i.i424 = getelementptr inbounds %PropId, ptr %344, i64 0, i32 1
  %345 = load ptr, ptr %memberidx.i.i424, align 8
  %346 = load i64, ptr %345, align 4
  %ptridx.i.i.i.i427 = getelementptr inbounds ptr, ptr %338, i64 %346
  %347 = load ptr, ptr %ptridx.i.i.i.i427, align 8
  %memberidx2.i.i.i428 = getelementptr inbounds %Module, ptr %347, i64 0, i32 4
  %348 = load ptr, ptr %memberidx2.i.i.i428, align 8
  %memberidx3.i.i.i429 = getelementptr inbounds %TypeId, ptr %345, i64 0, i32 2
  %349 = load i64, ptr %memberidx3.i.i.i429, align 4
  %memberidx.i5.i.i.i430 = getelementptr inbounds %Array_Class_, ptr %348, i64 0, i32 1
  %350 = load ptr, ptr %memberidx.i5.i.i.i430, align 8
  %ptridx.i6.i.i.i431 = getelementptr inbounds ptr, ptr %350, i64 %349
  %351 = load ptr, ptr %ptridx.i6.i.i.i431, align 8
  %352 = load i64, ptr %344, align 4
  %353 = icmp eq i64 %352, 0
  br i1 %353, label %if.entry.i439, label %ifend.i445

if.entry.i439:                                    ; preds = %if.entry133
  %memberidx1.i434 = getelementptr inbounds %Class, ptr %351, i64 0, i32 5
  %354 = load ptr, ptr %memberidx1.i434, align 8
  %memberidx2.i435 = getelementptr inbounds %PropId, ptr %344, i64 0, i32 2
  %355 = load i64, ptr %memberidx2.i435, align 4
  %memberidx.i12.i436 = getelementptr inbounds %Array_ClassMethod_, ptr %354, i64 0, i32 1
  %356 = load ptr, ptr %memberidx.i12.i436, align 8
  %ptridx.i13.i437 = getelementptr inbounds ptr, ptr %356, i64 %355
  %357 = load ptr, ptr %ptridx.i13.i437, align 8
  %memberidx3.i438 = getelementptr inbounds %ClassMethod, ptr %357, i64 0, i32 4
  br label %get_class_prop_type.exit446

ifend.i445:                                       ; preds = %if.entry133
  %memberidx4.i440 = getelementptr inbounds %Class, ptr %351, i64 0, i32 4
  %358 = load ptr, ptr %memberidx4.i440, align 8
  %memberidx5.i441 = getelementptr inbounds %PropId, ptr %344, i64 0, i32 2
  %359 = load i64, ptr %memberidx5.i441, align 4
  %memberidx.i11.i442 = getelementptr inbounds %Array_ClassField_, ptr %358, i64 0, i32 1
  %360 = load ptr, ptr %memberidx.i11.i442, align 8
  %ptridx.i.i443 = getelementptr inbounds ptr, ptr %360, i64 %359
  %361 = load ptr, ptr %ptridx.i.i443, align 8
  %memberidx6.i444 = getelementptr inbounds %ClassField, ptr %361, i64 0, i32 4
  br label %get_class_prop_type.exit446

get_class_prop_type.exit446:                      ; preds = %if.entry.i439, %ifend.i445
  %common.ret.op.in.i432 = phi ptr [ %memberidx3.i438, %if.entry.i439 ], [ %memberidx6.i444, %ifend.i445 ]
  %common.ret.op.i433 = load ptr, ptr %common.ret.op.in.i432, align 8
  %362 = tail call ptr @malloc(i32 40)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %362, ptr noundef nonnull align 8 dereferenceable(5) @196, i64 5, i1 false)
  %363 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %363, align 8
  %memberidx.i.i447 = getelementptr inbounds %string, ptr %363, i64 0, i32 1
  store ptr %362, ptr %memberidx.i.i447, align 8
  %memberidx1.i.i448 = getelementptr inbounds %string, ptr %363, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i448, align 4
  %memberidx2.i.i449 = getelementptr inbounds %string, ptr %363, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i449, align 4
  %364 = tail call fastcc ptr @TypeChecker_declare_const_within_current_scope(ptr nonnull %0, ptr nonnull %363, ptr null, ptr %common.ret.op.i433)
  br label %ifend84
}

define internal fastcc ptr @TypeChecker_check_array_expression(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx.i96 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %4 = load ptr, ptr %memberidx.i96, align 8
  %memberidx1.i97 = getelementptr inbounds %Compiler, ptr %4, i64 0, i32 6
  %5 = load ptr, ptr %memberidx1.i97, align 8
  %memberidx2.i98 = getelementptr inbounds %Array_FloError_, ptr %5, i64 0, i32 2
  %6 = load i64, ptr %memberidx2.i98, align 4
  %7 = icmp sgt i64 %6, 0
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %for.body, %Array_Expression____sl__.exit, %3, %ArrayExpression_constructor.exit, %TypeChecker_error.exit, %TypeChecker_error.exit123
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit123 ], [ null, %TypeChecker_error.exit ], [ %141, %ArrayExpression_constructor.exit ], [ null, %3 ], [ null, %Array_Expression____sl__.exit ], [ null, %for.body ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %3
  %8 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %8, align 8
  %memberidx.i99 = getelementptr inbounds %Array_Expression_, ptr %8, i64 0, i32 2
  store i64 0, ptr %memberidx.i99, align 4
  %memberidx1.i100 = getelementptr inbounds %Array_Expression_, ptr %8, i64 0, i32 3
  store i64 8, ptr %memberidx1.i100, align 4
  %memberidx2.i101 = getelementptr inbounds %Array_Expression_, ptr %8, i64 0, i32 1
  %9 = tail call ptr @malloc(i32 64)
  store ptr %9, ptr %memberidx2.i101, align 8
  store i64 0, ptr %memberidx.i99, align 4
  %10 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %10, align 4
  %11 = load i64, ptr %1, align 4
  switch i64 %11, label %ifend5 [
    i64 16, label %if.entry3
    i64 20, label %if.entry.i159
  ]

if.entry3:                                        ; preds = %ifend
  %memberidx6 = getelementptr inbounds %ArrayType, ptr %1, i64 0, i32 1
  br label %ifend5.sink.split

ifend5.sink.split:                                ; preds = %if.entry3, %if.entry12
  %.sink = phi ptr [ %31, %if.entry12 ], [ %memberidx6, %if.entry3 ]
  %.ph = phi i1 [ false, %if.entry12 ], [ true, %if.entry3 ]
  %12 = load ptr, ptr %.sink, align 8
  br label %ifend5

ifend5:                                           ; preds = %ifend5.sink.split, %is_object.exit, %ifend, %string___eq__.exit
  %13 = phi i1 [ false, %is_object.exit ], [ true, %ifend ], [ false, %string___eq__.exit ], [ %.ph, %ifend5.sink.split ]
  %14 = phi ptr [ %10, %is_object.exit ], [ %10, %ifend ], [ %10, %string___eq__.exit ], [ %12, %ifend5.sink.split ]
  %memberidx16 = getelementptr inbounds %ArrayExpressionNode, ptr %2, i64 0, i32 3
  %15 = load ptr, ptr %memberidx16, align 8
  %memberidx17 = getelementptr inbounds %Array_ExpressionNode_, ptr %15, i64 0, i32 2
  %16 = load i64, ptr %memberidx17, align 4
  %17 = icmp sgt i64 %16, 0
  br i1 %17, label %if.entry18, label %ifend20

if.entry.i159:                                    ; preds = %ifend, %if.entry.i159
  %.tr5.i = phi ptr [ %18, %if.entry.i159 ], [ %1, %ifend ]
  %memberidx1.i158 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %18 = load ptr, ptr %memberidx1.i158, align 8
  %19 = load i64, ptr %18, align 4
  %20 = icmp eq i64 %19, 20
  br i1 %20, label %if.entry.i159, label %is_object.exit

is_object.exit:                                   ; preds = %if.entry.i159
  %memberidx11 = getelementptr inbounds %GenericType, ptr %1, i64 0, i32 1
  %21 = load ptr, ptr %memberidx11, align 8
  %22 = tail call ptr @malloc(i32 40)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %22, ptr noundef nonnull align 8 dereferenceable(5) @131, i64 5, i1 false)
  %23 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %23, align 8
  %memberidx.i.i102 = getelementptr inbounds %string, ptr %23, i64 0, i32 1
  store ptr %22, ptr %memberidx.i.i102, align 8
  %memberidx1.i.i103 = getelementptr inbounds %string, ptr %23, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i103, align 4
  %memberidx2.i.i104 = getelementptr inbounds %string, ptr %23, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i104, align 4
  %memberidx.i105 = getelementptr inbounds %string, ptr %21, i64 0, i32 2
  %24 = load i64, ptr %memberidx.i105, align 4
  %.not.i = icmp eq i64 %24, 5
  br i1 %.not.i, label %string___eq__.exit, label %ifend5

string___eq__.exit:                               ; preds = %is_object.exit
  %25 = icmp eq i64 %19, 13
  %memberidx2.i107 = getelementptr inbounds %string, ptr %21, i64 0, i32 1
  %26 = load ptr, ptr %memberidx2.i107, align 8
  %27 = tail call i64 @memcmp(ptr %26, ptr nonnull %22, i64 5)
  %28 = icmp eq i64 %27, 0
  %29 = and i1 %25, %28
  br i1 %29, label %if.entry12, label %ifend5

if.entry12:                                       ; preds = %string___eq__.exit
  %memberidx15 = getelementptr inbounds %GenericType, ptr %1, i64 0, i32 2
  %30 = load ptr, ptr %memberidx15, align 8
  %memberidx.i109 = getelementptr inbounds %Array_Type_, ptr %30, i64 0, i32 1
  %31 = load ptr, ptr %memberidx.i109, align 8
  br label %ifend5.sink.split

if.entry18:                                       ; preds = %ifend5
  %memberidx.i110 = getelementptr inbounds %Array_ExpressionNode_, ptr %15, i64 0, i32 1
  %32 = load ptr, ptr %memberidx.i110, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %14, ptr %33)
  %35 = load i64, ptr %memberidx.i99, align 4
  %36 = load i64, ptr %memberidx1.i100, align 4
  %.not.i126 = icmp slt i64 %35, %36
  br i1 %.not.i126, label %if.entry18.Array_Expression____sl__.exit_crit_edge, label %if.entry.i129

if.entry18.Array_Expression____sl__.exit_crit_edge: ; preds = %if.entry18
  %.pre178 = load ptr, ptr %memberidx2.i101, align 8
  br label %Array_Expression____sl__.exit

if.entry.i129:                                    ; preds = %if.entry18
  %37 = shl i64 %36, 1
  store i64 %37, ptr %memberidx1.i100, align 4
  %38 = load ptr, ptr %memberidx2.i101, align 8
  %39 = shl i64 %36, 4
  %40 = tail call ptr @realloc(ptr %38, i64 %39)
  store ptr %40, ptr %memberidx2.i101, align 8
  %.pre = load i64, ptr %memberidx.i99, align 4
  br label %Array_Expression____sl__.exit

Array_Expression____sl__.exit:                    ; preds = %if.entry18.Array_Expression____sl__.exit_crit_edge, %if.entry.i129
  %41 = phi ptr [ %.pre178, %if.entry18.Array_Expression____sl__.exit_crit_edge ], [ %40, %if.entry.i129 ]
  %42 = phi i64 [ %35, %if.entry18.Array_Expression____sl__.exit_crit_edge ], [ %.pre, %if.entry.i129 ]
  %43 = add i64 %42, 1
  store i64 %43, ptr %memberidx.i99, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %41, i64 %42
  store ptr %34, ptr %ptridx.i, align 8
  %44 = load ptr, ptr %memberidx.i96, align 8
  %memberidx1.i132 = getelementptr inbounds %Compiler, ptr %44, i64 0, i32 6
  %45 = load ptr, ptr %memberidx1.i132, align 8
  %memberidx2.i133 = getelementptr inbounds %Array_FloError_, ptr %45, i64 0, i32 2
  %46 = load i64, ptr %memberidx2.i133, align 4
  %47 = icmp sgt i64 %46, 0
  br i1 %47, label %common.ret, label %ifend24

ifend20:                                          ; preds = %Array_Expression____sl__.exit152, %for.entry, %ifend5
  %48 = phi i1 [ %13, %ifend5 ], [ %55, %for.entry ], [ %73, %Array_Expression____sl__.exit152 ]
  %49 = phi ptr [ %14, %ifend5 ], [ %59, %for.entry ], [ %59, %Array_Expression____sl__.exit152 ]
  %50 = load i64, ptr %49, align 4
  %51 = icmp eq i64 %50, 21
  br i1 %51, label %if.entry48, label %ifend50

ifend24:                                          ; preds = %Array_Expression____sl__.exit
  %52 = load ptr, ptr %memberidx2.i101, align 8
  %53 = load ptr, ptr %52, align 8
  %memberidx25 = getelementptr inbounds %Expression, ptr %53, i64 0, i32 1
  %54 = load i1, ptr %memberidx25, align 1
  %55 = and i1 %13, %54
  %56 = load i64, ptr %14, align 4
  %57 = icmp eq i64 %56, 21
  br i1 %57, label %if.entry27, label %for.entry

if.entry27:                                       ; preds = %ifend24
  %memberidx30 = getelementptr inbounds %Expression, ptr %53, i64 0, i32 3
  %58 = load ptr, ptr %memberidx30, align 8
  br label %for.entry

for.entry:                                        ; preds = %if.entry27, %ifend24
  %59 = phi ptr [ %58, %if.entry27 ], [ %14, %ifend24 ]
  %60 = load ptr, ptr %memberidx16, align 8
  %memberidx32168 = getelementptr inbounds %Array_ExpressionNode_, ptr %60, i64 0, i32 2
  %61 = load i64, ptr %memberidx32168, align 4
  %62 = icmp sgt i64 %61, 1
  br i1 %62, label %for.body, label %ifend20

for.body:                                         ; preds = %for.entry, %Array_Expression____sl__.exit152
  %63 = phi ptr [ %86, %Array_Expression____sl__.exit152 ], [ %60, %for.entry ]
  %storemerge169 = phi i64 [ %85, %Array_Expression____sl__.exit152 ], [ 1, %for.entry ]
  %64 = phi i1 [ %73, %Array_Expression____sl__.exit152 ], [ %55, %for.entry ]
  %memberidx.i136 = getelementptr inbounds %Array_ExpressionNode_, ptr %63, i64 0, i32 1
  %65 = load ptr, ptr %memberidx.i136, align 8
  %ptridx.i137 = getelementptr inbounds ptr, ptr %65, i64 %storemerge169
  %66 = load ptr, ptr %ptridx.i137, align 8
  %67 = tail call fastcc ptr @TypeChecker_check_expression(ptr nonnull %0, ptr %59, ptr %66)
  %68 = load ptr, ptr %memberidx.i96, align 8
  %memberidx1.i141 = getelementptr inbounds %Compiler, ptr %68, i64 0, i32 6
  %69 = load ptr, ptr %memberidx1.i141, align 8
  %memberidx2.i142 = getelementptr inbounds %Array_FloError_, ptr %69, i64 0, i32 2
  %70 = load i64, ptr %memberidx2.i142, align 4
  %71 = icmp sgt i64 %70, 0
  br i1 %71, label %common.ret, label %ifend36

ifend36:                                          ; preds = %for.body
  %memberidx37 = getelementptr inbounds %Expression, ptr %67, i64 0, i32 1
  %72 = load i1, ptr %memberidx37, align 1
  %73 = and i1 %64, %72
  %memberidx38 = getelementptr inbounds %Expression, ptr %67, i64 0, i32 3
  %74 = load ptr, ptr %memberidx38, align 8
  %75 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr nonnull %0, ptr %59, ptr %74)
  br i1 %75, label %if.entry39, label %else40

if.entry39:                                       ; preds = %ifend36
  %76 = load i64, ptr %memberidx.i99, align 4
  %77 = load i64, ptr %memberidx1.i100, align 4
  %.not.i145 = icmp slt i64 %76, %77
  br i1 %.not.i145, label %if.entry39.Array_Expression____sl__.exit152_crit_edge, label %if.entry.i148

if.entry39.Array_Expression____sl__.exit152_crit_edge: ; preds = %if.entry39
  %.pre182 = load ptr, ptr %memberidx2.i101, align 8
  br label %Array_Expression____sl__.exit152

if.entry.i148:                                    ; preds = %if.entry39
  %78 = shl i64 %77, 1
  store i64 %78, ptr %memberidx1.i100, align 4
  %79 = load ptr, ptr %memberidx2.i101, align 8
  %80 = shl i64 %77, 4
  %81 = tail call ptr @realloc(ptr %79, i64 %80)
  store ptr %81, ptr %memberidx2.i101, align 8
  %.pre181 = load i64, ptr %memberidx.i99, align 4
  br label %Array_Expression____sl__.exit152

Array_Expression____sl__.exit152:                 ; preds = %if.entry39.Array_Expression____sl__.exit152_crit_edge, %if.entry.i148
  %82 = phi ptr [ %.pre182, %if.entry39.Array_Expression____sl__.exit152_crit_edge ], [ %81, %if.entry.i148 ]
  %83 = phi i64 [ %76, %if.entry39.Array_Expression____sl__.exit152_crit_edge ], [ %.pre181, %if.entry.i148 ]
  %84 = add i64 %83, 1
  store i64 %84, ptr %memberidx.i99, align 4
  %ptridx.i150 = getelementptr inbounds ptr, ptr %82, i64 %83
  store ptr %67, ptr %ptridx.i150, align 8
  %85 = add nuw nsw i64 %storemerge169, 1
  %86 = load ptr, ptr %memberidx16, align 8
  %memberidx32 = getelementptr inbounds %Array_ExpressionNode_, ptr %86, i64 0, i32 2
  %87 = load i64, ptr %memberidx32, align 4
  %88 = icmp slt i64 %85, %87
  br i1 %88, label %for.body, label %ifend20

else40:                                           ; preds = %ifend36
  %89 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %59)
  %90 = load ptr, ptr %89, align 8
  %memberidx42 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %90, i64 0, i32 5
  %91 = load ptr, ptr %memberidx42, align 8
  %92 = tail call ptr %91(ptr nonnull %89)
  %93 = load ptr, ptr %memberidx38, align 8
  %94 = tail call fastcc ptr @TypeChecker_dump_type(ptr nonnull %0, ptr %93)
  %95 = load ptr, ptr %94, align 8
  %memberidx44 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %95, i64 0, i32 5
  %96 = load ptr, ptr %memberidx44, align 8
  %97 = tail call ptr %96(ptr nonnull %94)
  %98 = alloca ptr, align 8
  %99 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %98, ptr nonnull @205, ptr %92, ptr %97)
  %100 = load ptr, ptr %98, align 8
  %101 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %101, align 8
  %memberidx.i153 = getelementptr inbounds %string, ptr %101, i64 0, i32 1
  store ptr %100, ptr %memberidx.i153, align 8
  %memberidx1.i154 = getelementptr inbounds %string, ptr %101, i64 0, i32 2
  store i64 %99, ptr %memberidx1.i154, align 4
  %memberidx2.i155 = getelementptr inbounds %string, ptr %101, i64 0, i32 3
  store i64 %99, ptr %memberidx2.i155, align 4
  tail call void @free(ptr %92)
  tail call void @free(ptr %97)
  %102 = load ptr, ptr %memberidx16, align 8
  %memberidx.i138 = getelementptr inbounds %Array_ExpressionNode_, ptr %102, i64 0, i32 1
  %103 = load ptr, ptr %memberidx.i138, align 8
  %ptridx.i139 = getelementptr inbounds ptr, ptr %103, i64 %storemerge169
  %104 = load ptr, ptr %ptridx.i139, align 8
  %105 = load ptr, ptr %104, align 8
  %106 = load ptr, ptr %memberidx.i96, align 8
  %memberidx1.i112 = getelementptr inbounds %Compiler, ptr %106, i64 0, i32 6
  %107 = load ptr, ptr %memberidx1.i112, align 8
  %108 = call ptr @malloc(i32 24)
  store i64 5, ptr %108, align 4
  %memberidx1.i.i113 = getelementptr inbounds %FloError, ptr %108, i64 0, i32 2
  store ptr %105, ptr %memberidx1.i.i113, align 8
  %memberidx2.i.i114 = getelementptr inbounds %FloError, ptr %108, i64 0, i32 1
  store ptr %101, ptr %memberidx2.i.i114, align 8
  %memberidx.i.i115 = getelementptr inbounds %Array_FloError_, ptr %107, i64 0, i32 2
  %109 = load i64, ptr %memberidx.i.i115, align 4
  %memberidx1.i2.i116 = getelementptr inbounds %Array_FloError_, ptr %107, i64 0, i32 3
  %110 = load i64, ptr %memberidx1.i2.i116, align 4
  %.not.i.i117 = icmp slt i64 %109, %110
  br i1 %.not.i.i117, label %else40.TypeChecker_error.exit123_crit_edge, label %if.entry.i.i120

else40.TypeChecker_error.exit123_crit_edge:       ; preds = %else40
  %memberidx4.i.i121.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %107, i64 0, i32 1
  %.pre180 = load ptr, ptr %memberidx4.i.i121.phi.trans.insert, align 8
  br label %TypeChecker_error.exit123

if.entry.i.i120:                                  ; preds = %else40
  %111 = shl i64 %110, 1
  store i64 %111, ptr %memberidx1.i2.i116, align 4
  %memberidx2.i.i.i119 = getelementptr inbounds %Array_FloError_, ptr %107, i64 0, i32 1
  %112 = load ptr, ptr %memberidx2.i.i.i119, align 8
  %113 = shl i64 %110, 4
  %114 = call ptr @realloc(ptr %112, i64 %113)
  store ptr %114, ptr %memberidx2.i.i.i119, align 8
  %.pre179 = load i64, ptr %memberidx.i.i115, align 4
  br label %TypeChecker_error.exit123

TypeChecker_error.exit123:                        ; preds = %else40.TypeChecker_error.exit123_crit_edge, %if.entry.i.i120
  %115 = phi ptr [ %.pre180, %else40.TypeChecker_error.exit123_crit_edge ], [ %114, %if.entry.i.i120 ]
  %116 = phi i64 [ %109, %else40.TypeChecker_error.exit123_crit_edge ], [ %.pre179, %if.entry.i.i120 ]
  %117 = add i64 %116, 1
  store i64 %117, ptr %memberidx.i.i115, align 4
  %ptridx.i.i122 = getelementptr inbounds ptr, ptr %115, i64 %116
  store ptr %108, ptr %ptridx.i.i122, align 8
  br label %common.ret

if.entry48:                                       ; preds = %ifend20
  %118 = tail call ptr @malloc(i32 296)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(37) %118, ptr noundef nonnull align 8 dereferenceable(37) @206, i64 37, i1 false)
  %119 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %119, align 8
  %memberidx.i.i93 = getelementptr inbounds %string, ptr %119, i64 0, i32 1
  store ptr %118, ptr %memberidx.i.i93, align 8
  %memberidx1.i.i94 = getelementptr inbounds %string, ptr %119, i64 0, i32 2
  store i64 37, ptr %memberidx1.i.i94, align 4
  %memberidx2.i.i95 = getelementptr inbounds %string, ptr %119, i64 0, i32 3
  store i64 37, ptr %memberidx2.i.i95, align 4
  %120 = load ptr, ptr %2, align 8
  %121 = load ptr, ptr %memberidx.i96, align 8
  %memberidx1.i89 = getelementptr inbounds %Compiler, ptr %121, i64 0, i32 6
  %122 = load ptr, ptr %memberidx1.i89, align 8
  %123 = tail call ptr @malloc(i32 24)
  store i64 5, ptr %123, align 4
  %memberidx1.i.i90 = getelementptr inbounds %FloError, ptr %123, i64 0, i32 2
  store ptr %120, ptr %memberidx1.i.i90, align 8
  %memberidx2.i.i91 = getelementptr inbounds %FloError, ptr %123, i64 0, i32 1
  store ptr %119, ptr %memberidx2.i.i91, align 8
  %memberidx.i.i92 = getelementptr inbounds %Array_FloError_, ptr %122, i64 0, i32 2
  %124 = load i64, ptr %memberidx.i.i92, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %122, i64 0, i32 3
  %125 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %124, %125
  br i1 %.not.i.i, label %if.entry48.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry48.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry48
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %122, i64 0, i32 1
  %.pre184 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry48
  %126 = shl i64 %125, 1
  store i64 %126, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %122, i64 0, i32 1
  %127 = load ptr, ptr %memberidx2.i.i.i, align 8
  %128 = shl i64 %125, 4
  %129 = tail call ptr @realloc(ptr %127, i64 %128)
  store ptr %129, ptr %memberidx2.i.i.i, align 8
  %.pre183 = load i64, ptr %memberidx.i.i92, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry48.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %130 = phi ptr [ %.pre184, %if.entry48.TypeChecker_error.exit_crit_edge ], [ %129, %if.entry.i.i ]
  %131 = phi i64 [ %124, %if.entry48.TypeChecker_error.exit_crit_edge ], [ %.pre183, %if.entry.i.i ]
  %132 = add i64 %131, 1
  store i64 %132, ptr %memberidx.i.i92, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %130, i64 %131
  store ptr %123, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend50:                                          ; preds = %ifend20
  %133 = load i64, ptr %1, align 4
  %.not = icmp eq i64 %133, 16
  br i1 %.not, label %ifend55, label %if.entry53

if.entry53:                                       ; preds = %ifend50
  %134 = tail call ptr @malloc(i32 40)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %134, ptr noundef nonnull align 8 dereferenceable(5) @131, i64 5, i1 false)
  %135 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %135, align 8
  %memberidx.i.i86 = getelementptr inbounds %string, ptr %135, i64 0, i32 1
  store ptr %134, ptr %memberidx.i.i86, align 8
  %memberidx1.i.i87 = getelementptr inbounds %string, ptr %135, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i87, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %135, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i, align 4
  %136 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Type_, ptr %136, align 8
  %memberidx.i83 = getelementptr inbounds %Array_Type_, ptr %136, i64 0, i32 2
  store i64 0, ptr %memberidx.i83, align 4
  %memberidx1.i84 = getelementptr inbounds %Array_Type_, ptr %136, i64 0, i32 3
  store i64 8, ptr %memberidx1.i84, align 4
  %memberidx2.i85 = getelementptr inbounds %Array_Type_, ptr %136, i64 0, i32 1
  %137 = tail call ptr @malloc(i32 64)
  store ptr %137, ptr %memberidx2.i85, align 8
  store ptr %49, ptr %137, align 8
  store i64 1, ptr %memberidx.i83, align 4
  %138 = tail call fastcc ptr @TypeChecker_create_generic_instance_in_module(ptr %0, ptr nonnull %135, ptr nonnull %136)
  %.not82 = icmp eq ptr %138, null
  %spec.select = select i1 %.not82, ptr %1, ptr %138
  %spec.select190 = select i1 %.not82, i1 %48, i1 false
  br label %ifend55

ifend55:                                          ; preds = %if.entry53, %ifend50
  %139 = phi ptr [ %1, %ifend50 ], [ %spec.select, %if.entry53 ]
  %140 = phi i1 [ %48, %ifend50 ], [ %spec.select190, %if.entry53 ]
  %141 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %141, align 4
  %memberidx.i.i = getelementptr inbounds %Expression, ptr %141, i64 0, i32 2
  store i64 6, ptr %memberidx.i.i, align 4
  %memberidx1.i.i = getelementptr inbounds %Expression, ptr %141, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i, align 1
  %memberidx.i = getelementptr inbounds %ArrayExpression, ptr %141, i64 0, i32 4
  store ptr %8, ptr %memberidx.i, align 8
  %142 = load i64, ptr %memberidx.i99, align 4
  %143 = icmp sgt i64 %142, 0
  br i1 %143, label %if.entry.i, label %ArrayExpression_constructor.exit

if.entry.i:                                       ; preds = %ifend55
  %memberidx2.i = getelementptr inbounds %Expression, ptr %141, i64 0, i32 3
  %144 = tail call ptr @malloc(i32 24)
  %145 = load ptr, ptr %memberidx2.i101, align 8
  %146 = load ptr, ptr %145, align 8
  %memberidx3.i = getelementptr inbounds %Expression, ptr %146, i64 0, i32 3
  %147 = load ptr, ptr %memberidx3.i, align 8
  %148 = load i64, ptr %memberidx.i99, align 4
  store i64 16, ptr %144, align 4
  %memberidx.i9.i = getelementptr inbounds %ArrayType, ptr %144, i64 0, i32 1
  store ptr %147, ptr %memberidx.i9.i, align 8
  %memberidx1.i10.i = getelementptr inbounds %ArrayType, ptr %144, i64 0, i32 2
  store i64 %148, ptr %memberidx1.i10.i, align 4
  store ptr %144, ptr %memberidx2.i, align 8
  br label %ArrayExpression_constructor.exit

ArrayExpression_constructor.exit:                 ; preds = %ifend55, %if.entry.i
  store i1 %140, ptr %memberidx1.i.i, align 1
  %memberidx62 = getelementptr inbounds %Expression, ptr %141, i64 0, i32 3
  store ptr %139, ptr %memberidx62, align 8
  br label %common.ret
}

define internal fastcc void @TypeChecker_check_enum_body(ptr %0, ptr nocapture readonly %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %EnumNode, ptr %2, i64 0, i32 2
  %4 = load ptr, ptr %memberidx, align 8
  %5 = icmp eq ptr %4, null
  br i1 %5, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %6 = tail call ptr @malloc(i32 8)
  store i64 7, ptr %6, align 4
  br label %ifend

else:                                             ; preds = %3
  %7 = tail call fastcc ptr @TypeChecker_check_type(ptr %0, ptr nonnull %4)
  %8 = load i64, ptr %7, align 4
  %9 = add i64 %8, -1
  %10 = icmp ult i64 %9, 7
  br i1 %10, label %ifend, label %if.entry2

ifend:                                            ; preds = %TypeChecker_error.exit83, %else, %if.entry
  %enum_variant.0 = phi ptr [ %6, %if.entry ], [ %7, %TypeChecker_error.exit83 ], [ %7, %else ]
  %memberidx8 = getelementptr inbounds %EnumNode, ptr %2, i64 0, i32 1
  %11 = load ptr, ptr %memberidx8, align 8
  %memberidx9123 = getelementptr inbounds %Array_EnumNodeField_, ptr %11, i64 0, i32 2
  %12 = load i64, ptr %memberidx9123, align 4
  %13 = icmp sgt i64 %12, 0
  br i1 %13, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %ifend
  %memberidx44 = getelementptr inbounds %Enum, ptr %1, i64 0, i32 3
  %memberidx47 = getelementptr inbounds %Enum, ptr %1, i64 0, i32 2
  br label %for.body

if.entry2:                                        ; preds = %else
  %14 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %7)
  %15 = load ptr, ptr %14, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %15, i64 0, i32 5
  %16 = load ptr, ptr %memberidx5, align 8
  %17 = tail call ptr %16(ptr nonnull %14)
  %18 = alloca ptr, align 8
  %19 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %18, ptr nonnull @156, ptr %17)
  %20 = load ptr, ptr %18, align 8
  %21 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %21, align 8
  %memberidx.i69 = getelementptr inbounds %string, ptr %21, i64 0, i32 1
  store ptr %20, ptr %memberidx.i69, align 8
  %memberidx1.i70 = getelementptr inbounds %string, ptr %21, i64 0, i32 2
  store i64 %19, ptr %memberidx1.i70, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %21, i64 0, i32 3
  store i64 %19, ptr %memberidx2.i, align 4
  tail call void @free(ptr %17)
  %22 = load ptr, ptr %memberidx, align 8
  %23 = load ptr, ptr %22, align 8
  %memberidx.i71 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %24 = load ptr, ptr %memberidx.i71, align 8
  %memberidx1.i72 = getelementptr inbounds %Compiler, ptr %24, i64 0, i32 6
  %25 = load ptr, ptr %memberidx1.i72, align 8
  %26 = call ptr @malloc(i32 24)
  store i64 5, ptr %26, align 4
  %memberidx1.i.i73 = getelementptr inbounds %FloError, ptr %26, i64 0, i32 2
  store ptr %23, ptr %memberidx1.i.i73, align 8
  %memberidx2.i.i74 = getelementptr inbounds %FloError, ptr %26, i64 0, i32 1
  store ptr %21, ptr %memberidx2.i.i74, align 8
  %memberidx.i.i75 = getelementptr inbounds %Array_FloError_, ptr %25, i64 0, i32 2
  %27 = load i64, ptr %memberidx.i.i75, align 4
  %memberidx1.i2.i76 = getelementptr inbounds %Array_FloError_, ptr %25, i64 0, i32 3
  %28 = load i64, ptr %memberidx1.i2.i76, align 4
  %.not.i.i77 = icmp slt i64 %27, %28
  br i1 %.not.i.i77, label %if.entry2.TypeChecker_error.exit83_crit_edge, label %if.entry.i.i80

if.entry2.TypeChecker_error.exit83_crit_edge:     ; preds = %if.entry2
  %memberidx4.i.i81.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %25, i64 0, i32 1
  %.pre129 = load ptr, ptr %memberidx4.i.i81.phi.trans.insert, align 8
  br label %TypeChecker_error.exit83

if.entry.i.i80:                                   ; preds = %if.entry2
  %29 = shl i64 %28, 1
  store i64 %29, ptr %memberidx1.i2.i76, align 4
  %memberidx2.i.i.i79 = getelementptr inbounds %Array_FloError_, ptr %25, i64 0, i32 1
  %30 = load ptr, ptr %memberidx2.i.i.i79, align 8
  %31 = shl i64 %28, 4
  %32 = call ptr @realloc(ptr %30, i64 %31)
  store ptr %32, ptr %memberidx2.i.i.i79, align 8
  %.pre = load i64, ptr %memberidx.i.i75, align 4
  br label %TypeChecker_error.exit83

TypeChecker_error.exit83:                         ; preds = %if.entry2.TypeChecker_error.exit83_crit_edge, %if.entry.i.i80
  %33 = phi ptr [ %.pre129, %if.entry2.TypeChecker_error.exit83_crit_edge ], [ %32, %if.entry.i.i80 ]
  %34 = phi i64 [ %27, %if.entry2.TypeChecker_error.exit83_crit_edge ], [ %.pre, %if.entry.i.i80 ]
  %35 = add i64 %34, 1
  store i64 %35, ptr %memberidx.i.i75, align 4
  %ptridx.i.i82 = getelementptr inbounds ptr, ptr %33, i64 %34
  store ptr %26, ptr %ptridx.i.i82, align 8
  br label %ifend

for.body:                                         ; preds = %for.body.lr.ph, %Array_EnumField____sl__.exit
  %36 = phi ptr [ %11, %for.body.lr.ph ], [ %64, %Array_EnumField____sl__.exit ]
  %storemerge125 = phi i64 [ 0, %for.body.lr.ph ], [ %63, %Array_EnumField____sl__.exit ]
  %storemerge68120124 = phi i64 [ 0, %for.body.lr.ph ], [ %storemerge68, %Array_EnumField____sl__.exit ]
  %memberidx.i84 = getelementptr inbounds %Array_EnumNodeField_, ptr %36, i64 0, i32 1
  %37 = load ptr, ptr %memberidx.i84, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %37, i64 %storemerge125
  %38 = load ptr, ptr %ptridx.i, align 8
  %39 = load ptr, ptr %38, align 8
  %memberidx12 = getelementptr inbounds %IdentifierToken, ptr %39, i64 0, i32 2
  %40 = load ptr, ptr %memberidx12, align 8
  %41 = tail call ptr @malloc(i32 24)
  %memberidx.i85 = getelementptr inbounds %EnumField, ptr %41, i64 0, i32 1
  store ptr %40, ptr %memberidx.i85, align 8
  %42 = tail call ptr @malloc(i32 24)
  %43 = load ptr, ptr %1, align 8
  store i64 1, ptr %42, align 4
  %memberidx1.i89 = getelementptr inbounds %PropId, ptr %42, i64 0, i32 1
  store ptr %43, ptr %memberidx1.i89, align 8
  %memberidx2.i90 = getelementptr inbounds %PropId, ptr %42, i64 0, i32 2
  store i64 %storemerge125, ptr %memberidx2.i90, align 4
  store ptr %42, ptr %41, align 8
  %memberidx15 = getelementptr inbounds %EnumNodeField, ptr %38, i64 0, i32 1
  %44 = load ptr, ptr %memberidx15, align 8
  %.not = icmp eq ptr %44, null
  %memberidx41 = getelementptr inbounds %EnumField, ptr %41, i64 0, i32 2
  br i1 %.not, label %else17, label %if.entry16

common.ret:                                       ; preds = %Array_EnumField____sl__.exit, %ifend, %TypeChecker_error.exit, %TypeChecker_error.exit116
  ret void

if.entry16:                                       ; preds = %for.body
  %45 = call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %enum_variant.0, ptr nonnull %44)
  store ptr %45, ptr %memberidx41, align 8
  %memberidx22 = getelementptr inbounds %Expression, ptr %45, i64 0, i32 1
  %46 = load i1, ptr %memberidx22, align 1
  br i1 %46, label %ifend25, label %if.entry23

else17:                                           ; preds = %for.body
  %47 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %47, align 4
  %memberidx.i.i91 = getelementptr inbounds %Expression, ptr %47, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i91, align 4
  %memberidx1.i.i92 = getelementptr inbounds %Expression, ptr %47, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i92, align 1
  %memberidx.i93 = getelementptr inbounds %Expression, ptr %47, i64 0, i32 3
  %48 = call ptr @malloc(i32 8)
  store i64 7, ptr %48, align 4
  %memberidx1.i94 = getelementptr inbounds %IntExpression, ptr %47, i64 0, i32 4
  store i64 %storemerge68120124, ptr %memberidx1.i94, align 4
  store i1 true, ptr %memberidx1.i.i92, align 1
  store ptr %47, ptr %memberidx41, align 8
  store ptr %enum_variant.0, ptr %memberidx.i93, align 8
  br label %ifend18

ifend18:                                          ; preds = %else17, %ifend32
  %storemerge68.in = phi i64 [ %115, %ifend32 ], [ %storemerge68120124, %else17 ]
  %storemerge68 = add i64 %storemerge68.in, 1
  %49 = load ptr, ptr %memberidx44, align 8
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %41, align 8
  call void %51(ptr nonnull %49, ptr %40, ptr %52)
  %53 = load ptr, ptr %memberidx47, align 8
  %memberidx.i96 = getelementptr inbounds %Array_EnumField_, ptr %53, i64 0, i32 2
  %54 = load i64, ptr %memberidx.i96, align 4
  %memberidx1.i97 = getelementptr inbounds %Array_EnumField_, ptr %53, i64 0, i32 3
  %55 = load i64, ptr %memberidx1.i97, align 4
  %.not.i = icmp slt i64 %54, %55
  br i1 %.not.i, label %ifend18.Array_EnumField____sl__.exit_crit_edge, label %if.entry.i

ifend18.Array_EnumField____sl__.exit_crit_edge:   ; preds = %ifend18
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_EnumField_, ptr %53, i64 0, i32 1
  %.pre135 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_EnumField____sl__.exit

if.entry.i:                                       ; preds = %ifend18
  %56 = shl i64 %55, 1
  store i64 %56, ptr %memberidx1.i97, align 4
  %memberidx2.i.i99 = getelementptr inbounds %Array_EnumField_, ptr %53, i64 0, i32 1
  %57 = load ptr, ptr %memberidx2.i.i99, align 8
  %58 = shl i64 %55, 4
  %59 = call ptr @realloc(ptr %57, i64 %58)
  store ptr %59, ptr %memberidx2.i.i99, align 8
  %.pre134 = load i64, ptr %memberidx.i96, align 4
  br label %Array_EnumField____sl__.exit

Array_EnumField____sl__.exit:                     ; preds = %ifend18.Array_EnumField____sl__.exit_crit_edge, %if.entry.i
  %60 = phi ptr [ %.pre135, %ifend18.Array_EnumField____sl__.exit_crit_edge ], [ %59, %if.entry.i ]
  %61 = phi i64 [ %54, %ifend18.Array_EnumField____sl__.exit_crit_edge ], [ %.pre134, %if.entry.i ]
  %62 = add i64 %61, 1
  store i64 %62, ptr %memberidx.i96, align 4
  %ptridx.i100 = getelementptr inbounds ptr, ptr %60, i64 %61
  store ptr %41, ptr %ptridx.i100, align 8
  %63 = add nuw nsw i64 %storemerge125, 1
  %64 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %Array_EnumNodeField_, ptr %64, i64 0, i32 2
  %65 = load i64, ptr %memberidx9, align 4
  %66 = icmp slt i64 %63, %65
  br i1 %66, label %for.body, label %common.ret

if.entry23:                                       ; preds = %if.entry16
  %67 = call ptr @malloc(i32 296)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(37) %67, ptr noundef nonnull align 8 dereferenceable(37) @157, i64 37, i1 false)
  %68 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %68, align 8
  %memberidx.i.i101 = getelementptr inbounds %string, ptr %68, i64 0, i32 1
  store ptr %67, ptr %memberidx.i.i101, align 8
  %memberidx1.i.i102 = getelementptr inbounds %string, ptr %68, i64 0, i32 2
  store i64 37, ptr %memberidx1.i.i102, align 4
  %memberidx2.i.i103 = getelementptr inbounds %string, ptr %68, i64 0, i32 3
  store i64 37, ptr %memberidx2.i.i103, align 4
  %69 = load ptr, ptr %memberidx15, align 8
  %70 = load ptr, ptr %69, align 8
  %memberidx.i104 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %71 = load ptr, ptr %memberidx.i104, align 8
  %memberidx1.i105 = getelementptr inbounds %Compiler, ptr %71, i64 0, i32 6
  %72 = load ptr, ptr %memberidx1.i105, align 8
  %73 = call ptr @malloc(i32 24)
  store i64 5, ptr %73, align 4
  %memberidx1.i.i106 = getelementptr inbounds %FloError, ptr %73, i64 0, i32 2
  store ptr %70, ptr %memberidx1.i.i106, align 8
  %memberidx2.i.i107 = getelementptr inbounds %FloError, ptr %73, i64 0, i32 1
  store ptr %68, ptr %memberidx2.i.i107, align 8
  %memberidx.i.i108 = getelementptr inbounds %Array_FloError_, ptr %72, i64 0, i32 2
  %74 = load i64, ptr %memberidx.i.i108, align 4
  %memberidx1.i2.i109 = getelementptr inbounds %Array_FloError_, ptr %72, i64 0, i32 3
  %75 = load i64, ptr %memberidx1.i2.i109, align 4
  %.not.i.i110 = icmp slt i64 %74, %75
  br i1 %.not.i.i110, label %if.entry23.TypeChecker_error.exit116_crit_edge, label %if.entry.i.i113

if.entry23.TypeChecker_error.exit116_crit_edge:   ; preds = %if.entry23
  %memberidx4.i.i114.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %72, i64 0, i32 1
  %.pre131 = load ptr, ptr %memberidx4.i.i114.phi.trans.insert, align 8
  br label %TypeChecker_error.exit116

if.entry.i.i113:                                  ; preds = %if.entry23
  %76 = shl i64 %75, 1
  store i64 %76, ptr %memberidx1.i2.i109, align 4
  %memberidx2.i.i.i112 = getelementptr inbounds %Array_FloError_, ptr %72, i64 0, i32 1
  %77 = load ptr, ptr %memberidx2.i.i.i112, align 8
  %78 = shl i64 %75, 4
  %79 = call ptr @realloc(ptr %77, i64 %78)
  store ptr %79, ptr %memberidx2.i.i.i112, align 8
  %.pre130 = load i64, ptr %memberidx.i.i108, align 4
  br label %TypeChecker_error.exit116

TypeChecker_error.exit116:                        ; preds = %if.entry23.TypeChecker_error.exit116_crit_edge, %if.entry.i.i113
  %80 = phi ptr [ %.pre131, %if.entry23.TypeChecker_error.exit116_crit_edge ], [ %79, %if.entry.i.i113 ]
  %81 = phi i64 [ %74, %if.entry23.TypeChecker_error.exit116_crit_edge ], [ %.pre130, %if.entry.i.i113 ]
  %82 = add i64 %81, 1
  store i64 %82, ptr %memberidx.i.i108, align 4
  %ptridx.i.i115 = getelementptr inbounds ptr, ptr %80, i64 %81
  store ptr %73, ptr %ptridx.i.i115, align 8
  br label %common.ret

ifend25:                                          ; preds = %if.entry16
  %memberidx29 = getelementptr inbounds %Expression, ptr %45, i64 0, i32 3
  %83 = load ptr, ptr %memberidx29, align 8
  %84 = call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr nonnull %enum_variant.0, ptr %83)
  br i1 %84, label %ifend32, label %if.entry30

if.entry30:                                       ; preds = %ifend25
  %85 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %enum_variant.0)
  %86 = load ptr, ptr %85, align 8
  %memberidx33 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %86, i64 0, i32 5
  %87 = load ptr, ptr %memberidx33, align 8
  %88 = call ptr %87(ptr nonnull %85)
  %89 = load ptr, ptr %memberidx41, align 8
  %memberidx35 = getelementptr inbounds %Expression, ptr %89, i64 0, i32 3
  %90 = load ptr, ptr %memberidx35, align 8
  %91 = call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %90)
  %92 = load ptr, ptr %91, align 8
  %memberidx36 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %92, i64 0, i32 5
  %93 = load ptr, ptr %memberidx36, align 8
  %94 = call ptr %93(ptr nonnull %91)
  %95 = alloca ptr, align 8
  %96 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %95, ptr nonnull @158, ptr %88, ptr %94)
  %97 = load ptr, ptr %95, align 8
  %98 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %98, align 8
  %memberidx.i86 = getelementptr inbounds %string, ptr %98, i64 0, i32 1
  store ptr %97, ptr %memberidx.i86, align 8
  %memberidx1.i87 = getelementptr inbounds %string, ptr %98, i64 0, i32 2
  store i64 %96, ptr %memberidx1.i87, align 4
  %memberidx2.i88 = getelementptr inbounds %string, ptr %98, i64 0, i32 3
  store i64 %96, ptr %memberidx2.i88, align 4
  tail call void @free(ptr %88)
  tail call void @free(ptr %94)
  %99 = load ptr, ptr %memberidx15, align 8
  %100 = load ptr, ptr %99, align 8
  %memberidx.i = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %101 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Compiler, ptr %101, i64 0, i32 6
  %102 = load ptr, ptr %memberidx1.i, align 8
  %103 = call ptr @malloc(i32 24)
  store i64 5, ptr %103, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %103, i64 0, i32 2
  store ptr %100, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %FloError, ptr %103, i64 0, i32 1
  store ptr %98, ptr %memberidx2.i.i, align 8
  %memberidx.i.i = getelementptr inbounds %Array_FloError_, ptr %102, i64 0, i32 2
  %104 = load i64, ptr %memberidx.i.i, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %102, i64 0, i32 3
  %105 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %104, %105
  br i1 %.not.i.i, label %if.entry30.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry30.TypeChecker_error.exit_crit_edge:      ; preds = %if.entry30
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %102, i64 0, i32 1
  %.pre133 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry30
  %106 = shl i64 %105, 1
  store i64 %106, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %102, i64 0, i32 1
  %107 = load ptr, ptr %memberidx2.i.i.i, align 8
  %108 = shl i64 %105, 4
  %109 = call ptr @realloc(ptr %107, i64 %108)
  store ptr %109, ptr %memberidx2.i.i.i, align 8
  %.pre132 = load i64, ptr %memberidx.i.i, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry30.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %110 = phi ptr [ %.pre133, %if.entry30.TypeChecker_error.exit_crit_edge ], [ %109, %if.entry.i.i ]
  %111 = phi i64 [ %104, %if.entry30.TypeChecker_error.exit_crit_edge ], [ %.pre132, %if.entry.i.i ]
  %112 = add i64 %111, 1
  store i64 %112, ptr %memberidx.i.i, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %110, i64 %111
  store ptr %103, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend32:                                          ; preds = %ifend25
  %113 = load ptr, ptr %0, align 8
  %114 = load ptr, ptr %memberidx41, align 8
  %115 = call fastcc i64 @evaluate_const_int_expression(ptr %113, ptr %114)
  br label %ifend18
}

define internal fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %ExpressionNode, ptr %2, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  switch i64 %4, label %common.ret [
    i64 0, label %if.entry
    i64 1, label %if.entry2
    i64 3, label %if.entry6
    i64 2, label %if.entry10
    i64 6, label %if.entry14
    i64 7, label %if.entry18
    i64 8, label %if.entry22
    i64 9, label %if.entry26
    i64 15, label %if.entry30
    i64 10, label %if.entry34
    i64 11, label %if.entry38
    i64 12, label %if.entry42
    i64 13, label %if.entry46
    i64 14, label %if.entry50
  ]

common.ret:                                       ; preds = %3, %if.entry.i, %if.entry2, %if.entry.i119, %if.entry, %if.entry50, %if.entry46, %if.entry42, %if.entry38, %if.entry34, %if.entry30, %if.entry26, %if.entry22, %if.entry18, %if.entry14, %TypeChecker_check_string_expression.exit, %if.entry6
  %common.ret.op = phi ptr [ %19, %if.entry6 ], [ %56, %TypeChecker_check_string_expression.exit ], [ %60, %if.entry14 ], [ %61, %if.entry18 ], [ %62, %if.entry22 ], [ %63, %if.entry26 ], [ %64, %if.entry30 ], [ %65, %if.entry34 ], [ %66, %if.entry38 ], [ %67, %if.entry42 ], [ %68, %if.entry46 ], [ %69, %if.entry50 ], [ %5, %if.entry ], [ %5, %if.entry.i119 ], [ %12, %if.entry2 ], [ %12, %if.entry.i ], [ null, %3 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %3
  %5 = tail call ptr @malloc(i32 33)
  %memberidx.i111 = getelementptr inbounds %IntExpressionNode, ptr %2, i64 0, i32 3
  %6 = load ptr, ptr %memberidx.i111, align 8
  %memberidx1.i112 = getelementptr inbounds %IntToken, ptr %6, i64 0, i32 2
  %7 = load i64, ptr %memberidx1.i112, align 4
  store i64 8, ptr %5, align 4
  %memberidx.i.i.i113 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i.i113, align 4
  %memberidx1.i.i.i114 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 1
  %memberidx.i.i115 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 3
  %8 = tail call ptr @malloc(i32 8)
  store i64 7, ptr %8, align 4
  store ptr %8, ptr %memberidx.i.i115, align 8
  %memberidx1.i.i116 = getelementptr inbounds %IntExpression, ptr %5, i64 0, i32 4
  store i64 %7, ptr %memberidx1.i.i116, align 4
  store i1 true, ptr %memberidx1.i.i.i114, align 1
  %9 = load i64, ptr %1, align 4
  %10 = add i64 %9, -1
  %11 = icmp ult i64 %10, 7
  br i1 %11, label %if.entry.i119, label %common.ret

if.entry.i119:                                    ; preds = %if.entry
  store ptr %1, ptr %memberidx.i.i115, align 8
  br label %common.ret

if.entry2:                                        ; preds = %3
  %12 = tail call ptr @malloc(i32 33)
  %memberidx.i103 = getelementptr inbounds %FloatExpressionNode, ptr %2, i64 0, i32 3
  %13 = load ptr, ptr %memberidx.i103, align 8
  %memberidx1.i104 = getelementptr inbounds %FloatToken, ptr %13, i64 0, i32 2
  %14 = load double, ptr %memberidx1.i104, align 8
  store i64 8, ptr %12, align 4
  %memberidx.i.i.i105 = getelementptr inbounds %Expression, ptr %12, i64 0, i32 2
  store i64 1, ptr %memberidx.i.i.i105, align 4
  %memberidx1.i.i.i106 = getelementptr inbounds %Expression, ptr %12, i64 0, i32 1
  %memberidx.i.i107 = getelementptr inbounds %Expression, ptr %12, i64 0, i32 3
  %15 = tail call ptr @malloc(i32 8)
  store i64 11, ptr %15, align 4
  store ptr %15, ptr %memberidx.i.i107, align 8
  %memberidx1.i.i108 = getelementptr inbounds %FloatExpression, ptr %12, i64 0, i32 4
  store double %14, ptr %memberidx1.i.i108, align 8
  store i1 true, ptr %memberidx1.i.i.i106, align 1
  %16 = load i64, ptr %1, align 4
  %17 = and i64 %16, -4
  %18 = icmp eq i64 %17, 8
  br i1 %18, label %if.entry.i, label %common.ret

if.entry.i:                                       ; preds = %if.entry2
  store ptr %1, ptr %memberidx.i.i107, align 8
  br label %common.ret

if.entry6:                                        ; preds = %3
  %19 = tail call ptr @malloc(i32 33)
  %memberidx.i = getelementptr inbounds %CharExpressionNode, ptr %2, i64 0, i32 3
  %20 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %CharToken, ptr %20, i64 0, i32 2
  %21 = load i8, ptr %memberidx1.i, align 1
  %22 = sext i8 %21 to i64
  store i64 8, ptr %19, align 4
  %memberidx.i.i.i = getelementptr inbounds %Expression, ptr %19, i64 0, i32 2
  store i64 0, ptr %memberidx.i.i.i, align 4
  %memberidx1.i.i.i = getelementptr inbounds %Expression, ptr %19, i64 0, i32 1
  %memberidx.i.i = getelementptr inbounds %Expression, ptr %19, i64 0, i32 3
  %23 = tail call ptr @malloc(i32 8)
  store ptr %23, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %IntExpression, ptr %19, i64 0, i32 4
  store i64 %22, ptr %memberidx1.i.i, align 4
  store i1 true, ptr %memberidx1.i.i.i, align 1
  store i64 2, ptr %23, align 4
  br label %common.ret

if.entry10:                                       ; preds = %3
  %24 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Expression_, ptr %24, align 8
  %memberidx.i34.i = getelementptr inbounds %Array_Expression_, ptr %24, i64 0, i32 2
  store i64 0, ptr %memberidx.i34.i, align 4
  %memberidx1.i35.i = getelementptr inbounds %Array_Expression_, ptr %24, i64 0, i32 3
  store i64 8, ptr %memberidx1.i35.i, align 4
  %memberidx2.i36.i = getelementptr inbounds %Array_Expression_, ptr %24, i64 0, i32 1
  %25 = tail call ptr @malloc(i32 64)
  store ptr %25, ptr %memberidx2.i36.i, align 8
  store i64 0, ptr %memberidx.i34.i, align 4
  %memberidx2.i121 = getelementptr inbounds %StringExpressionNode, ptr %2, i64 0, i32 4
  %26 = load ptr, ptr %memberidx2.i121, align 8
  %27 = tail call ptr @malloc(i32 33)
  %memberidx.i29.i = getelementptr inbounds %Array_ExpressionNode_, ptr %26, i64 0, i32 1
  %28 = load ptr, ptr %memberidx.i29.i, align 8
  %memberidx1.i30.i = getelementptr inbounds %Array_ExpressionNode_, ptr %26, i64 0, i32 2
  %29 = load i64, ptr %memberidx1.i30.i, align 4
  store ptr @VTableArrayIterator_ExpressionNode_, ptr %27, align 8
  %memberidx.i.i31.i = getelementptr inbounds %Iterator_ExpressionNode_, ptr %27, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i31.i, align 1
  %memberidx1.i.i32.i = getelementptr inbounds %ArrayIterator_ExpressionNode_, ptr %27, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i32.i, align 4
  %memberidx2.i.i33.i = getelementptr inbounds %ArrayIterator_ExpressionNode_, ptr %27, i64 0, i32 4
  store ptr %28, ptr %memberidx2.i.i33.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ArrayIterator_ExpressionNode_, ptr %27, i64 0, i32 3
  store i64 %29, ptr %memberidx3.i.i.i, align 4
  %30 = load ptr, ptr @VTableArrayIterator_ExpressionNode_, align 8
  %31 = tail call ptr %30(ptr nonnull %27)
  %32 = load i1, ptr %memberidx.i.i31.i, align 1
  br i1 %32, label %for.end.i, label %for.body.i

for.body.i:                                       ; preds = %if.entry10, %Array_Expression____sl__.exit.i
  %arg.0.i128 = phi ptr [ %46, %Array_Expression____sl__.exit.i ], [ %31, %if.entry10 ]
  %33 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %33, align 4
  %34 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr nonnull %33, ptr %arg.0.i128)
  %35 = load i64, ptr %memberidx.i34.i, align 4
  %36 = load i64, ptr %memberidx1.i35.i, align 4
  %.not.i.i = icmp slt i64 %35, %36
  br i1 %.not.i.i, label %for.body.i.Array_Expression____sl__.exit.i_crit_edge, label %if.entry.i27.i

for.body.i.Array_Expression____sl__.exit.i_crit_edge: ; preds = %for.body.i
  %.pre129 = load ptr, ptr %memberidx2.i36.i, align 8
  br label %Array_Expression____sl__.exit.i

if.entry.i27.i:                                   ; preds = %for.body.i
  %37 = shl i64 %36, 1
  store i64 %37, ptr %memberidx1.i35.i, align 4
  %38 = load ptr, ptr %memberidx2.i36.i, align 8
  %39 = shl i64 %36, 4
  %40 = tail call ptr @realloc(ptr %38, i64 %39)
  store ptr %40, ptr %memberidx2.i36.i, align 8
  %.pre = load i64, ptr %memberidx.i34.i, align 4
  br label %Array_Expression____sl__.exit.i

Array_Expression____sl__.exit.i:                  ; preds = %for.body.i.Array_Expression____sl__.exit.i_crit_edge, %if.entry.i27.i
  %41 = phi ptr [ %40, %if.entry.i27.i ], [ %.pre129, %for.body.i.Array_Expression____sl__.exit.i_crit_edge ]
  %42 = phi i64 [ %.pre, %if.entry.i27.i ], [ %35, %for.body.i.Array_Expression____sl__.exit.i_crit_edge ]
  %43 = add i64 %42, 1
  store i64 %43, ptr %memberidx.i34.i, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %41, i64 %42
  store ptr %34, ptr %ptridx.i.i, align 8
  %44 = load ptr, ptr %27, align 8
  %45 = load ptr, ptr %44, align 8
  %46 = tail call ptr %45(ptr nonnull %27)
  %47 = load i1, ptr %memberidx.i.i31.i, align 1
  br i1 %47, label %for.end.i, label %for.body.i

for.end.i:                                        ; preds = %Array_Expression____sl__.exit.i, %if.entry10
  tail call void @free(ptr nonnull %27)
  %48 = load i64, ptr %1, align 4
  %49 = icmp eq i64 %48, 15
  br i1 %49, label %if.entry.i.i, label %if.entry.i122

if.entry.i.i:                                     ; preds = %for.end.i
  %memberidx1.i22.i = getelementptr inbounds %PointerType, ptr %1, i64 0, i32 1
  %50 = load ptr, ptr %memberidx1.i22.i, align 8
  %51 = load i64, ptr %50, align 4
  %52 = icmp eq i64 %51, 2
  br i1 %52, label %TypeChecker_check_string_expression.exit, label %if.entry.i122

if.entry.i122:                                    ; preds = %for.end.i, %if.entry.i.i
  %53 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %53, ptr noundef nonnull align 8 dereferenceable(6) @224, i64 6, i1 false)
  %54 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %54, align 8
  %memberidx.i.i20.i = getelementptr inbounds %string, ptr %54, i64 0, i32 1
  store ptr %53, ptr %memberidx.i.i20.i, align 8
  %memberidx1.i.i21.i = getelementptr inbounds %string, ptr %54, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i21.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %54, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i.i, align 4
  %55 = tail call fastcc ptr @TypeChecker_get_type_from_current_scope(ptr %0, ptr nonnull %54)
  br label %TypeChecker_check_string_expression.exit

TypeChecker_check_string_expression.exit:         ; preds = %if.entry.i.i, %if.entry.i122
  %expected_type.0.i = phi ptr [ %55, %if.entry.i122 ], [ %1, %if.entry.i.i ]
  %56 = tail call ptr @malloc(i32 49)
  %memberidx6.i = getelementptr inbounds %StringExpressionNode, ptr %2, i64 0, i32 3
  %57 = load ptr, ptr %memberidx6.i, align 8
  %memberidx7.i = getelementptr inbounds %StrToken, ptr %57, i64 0, i32 2
  %58 = load ptr, ptr %memberidx7.i, align 8
  %memberidx9.i = getelementptr inbounds %StrToken, ptr %57, i64 0, i32 3
  %59 = load ptr, ptr %memberidx9.i, align 8
  store i64 8, ptr %56, align 4
  %memberidx.i.i.i123 = getelementptr inbounds %Expression, ptr %56, i64 0, i32 2
  store i64 2, ptr %memberidx.i.i.i123, align 4
  %memberidx1.i.i.i124 = getelementptr inbounds %Expression, ptr %56, i64 0, i32 1
  %memberidx.i.i125 = getelementptr inbounds %StringExpression, ptr %56, i64 0, i32 6
  store ptr %24, ptr %memberidx.i.i125, align 8
  %memberidx1.i.i126 = getelementptr inbounds %StringExpression, ptr %56, i64 0, i32 5
  store ptr %59, ptr %memberidx1.i.i126, align 8
  %memberidx2.i.i127 = getelementptr inbounds %Expression, ptr %56, i64 0, i32 3
  %memberidx3.i.i = getelementptr inbounds %StringExpression, ptr %56, i64 0, i32 4
  store ptr %58, ptr %memberidx3.i.i, align 8
  store i1 true, ptr %memberidx1.i.i.i124, align 1
  store ptr %expected_type.0.i, ptr %memberidx2.i.i127, align 8
  br label %common.ret

if.entry14:                                       ; preds = %3
  %60 = tail call fastcc ptr @TypeChecker_check_array_expression(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret

if.entry18:                                       ; preds = %3
  %61 = tail call fastcc ptr @TypeChecker_check_var_access_expr(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret

if.entry22:                                       ; preds = %3
  %62 = tail call fastcc ptr @TypeChecker_check_bin_expr(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret

if.entry26:                                       ; preds = %3
  %63 = tail call fastcc ptr @TypeChecker_check_unary_expr(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret

if.entry30:                                       ; preds = %3
  %64 = tail call fastcc ptr @TypeChecker_check_ternary_expr(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret

if.entry34:                                       ; preds = %3
  %65 = tail call fastcc ptr @TypeChecker_check_typecast_expr(ptr %0, ptr nonnull %2)
  br label %common.ret

if.entry38:                                       ; preds = %3
  %66 = tail call fastcc ptr @TypeChecker_check_new_expr(ptr %0, ptr nonnull %2)
  br label %common.ret

if.entry42:                                       ; preds = %3
  %67 = tail call fastcc ptr @TypeChecker_check_member_expr(ptr %0, ptr nonnull %2)
  br label %common.ret

if.entry46:                                       ; preds = %3
  %68 = tail call fastcc ptr @TypeChecker_check_index_expr(ptr %0, ptr nonnull %2)
  br label %common.ret

if.entry50:                                       ; preds = %3
  %69 = tail call fastcc ptr @TypeChecker_check_call_expr(ptr %0, ptr nonnull %2)
  br label %common.ret
}

define internal fastcc ptr @TypeChecker_check_var_access_expr(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %VarAccessExpressionNode, ptr %2, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IdentifierToken, ptr %4, i64 0, i32 2
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = tail call ptr @malloc(i32 32)
  store i32 1702195828, ptr %6, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i, align 4
  %memberidx.i = getelementptr inbounds %string, ptr %5, i64 0, i32 2
  %8 = load i64, ptr %memberidx.i, align 4
  %.not.i = icmp eq i64 %8, 4
  br i1 %.not.i, label %ifend.i, label %ifend

ifend.i:                                          ; preds = %3
  %memberidx2.i = getelementptr inbounds %string, ptr %5, i64 0, i32 1
  %9 = load ptr, ptr %memberidx2.i, align 8
  %10 = tail call i64 @memcmp(ptr %9, ptr nonnull %6, i64 4)
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend14, %TypeChecker_error.exit, %if.entry5, %if.entry2, %if.entry
  %common.ret.op = phi ptr [ %12, %if.entry ], [ %20, %if.entry2 ], [ %28, %if.entry5 ], [ null, %TypeChecker_error.exit ], [ %63, %ifend14 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %ifend.i
  %12 = tail call ptr @malloc(i32 26)
  store i64 8, ptr %12, align 4
  %memberidx.i.i46 = getelementptr inbounds %Expression, ptr %12, i64 0, i32 2
  store i64 4, ptr %memberidx.i.i46, align 4
  %memberidx1.i.i47 = getelementptr inbounds %Expression, ptr %12, i64 0, i32 1
  %13 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %13, align 4
  %memberidx.i48 = getelementptr inbounds %Expression, ptr %12, i64 0, i32 3
  store ptr %13, ptr %memberidx.i48, align 8
  %memberidx1.i49 = getelementptr inbounds %BooleanExpression, ptr %12, i64 0, i32 4
  store i1 true, ptr %memberidx1.i49, align 1
  store i1 true, ptr %memberidx1.i.i47, align 1
  br label %common.ret

ifend:                                            ; preds = %3, %ifend.i
  %14 = tail call ptr @malloc(i32 40)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %14, ptr noundef nonnull align 8 dereferenceable(5) @145, i64 5, i1 false)
  %15 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %15, align 8
  %memberidx.i.i51 = getelementptr inbounds %string, ptr %15, i64 0, i32 1
  store ptr %14, ptr %memberidx.i.i51, align 8
  %memberidx1.i.i52 = getelementptr inbounds %string, ptr %15, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i52, align 4
  %memberidx2.i.i53 = getelementptr inbounds %string, ptr %15, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i53, align 4
  %16 = load i64, ptr %memberidx.i, align 4
  %.not.i56 = icmp eq i64 %16, 5
  br i1 %.not.i56, label %ifend.i60, label %ifend4

ifend.i60:                                        ; preds = %ifend
  %memberidx2.i58 = getelementptr inbounds %string, ptr %5, i64 0, i32 1
  %17 = load ptr, ptr %memberidx2.i58, align 8
  %18 = tail call i64 @memcmp(ptr %17, ptr nonnull %14, i64 5)
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend.i60
  %20 = tail call ptr @malloc(i32 26)
  store i64 8, ptr %20, align 4
  %memberidx.i.i62 = getelementptr inbounds %Expression, ptr %20, i64 0, i32 2
  store i64 4, ptr %memberidx.i.i62, align 4
  %memberidx1.i.i63 = getelementptr inbounds %Expression, ptr %20, i64 0, i32 1
  %21 = tail call ptr @malloc(i32 8)
  store i64 0, ptr %21, align 4
  %memberidx.i64 = getelementptr inbounds %Expression, ptr %20, i64 0, i32 3
  store ptr %21, ptr %memberidx.i64, align 8
  %memberidx1.i65 = getelementptr inbounds %BooleanExpression, ptr %20, i64 0, i32 4
  store i1 false, ptr %memberidx1.i65, align 1
  store i1 true, ptr %memberidx1.i.i63, align 1
  br label %common.ret

ifend4:                                           ; preds = %ifend, %ifend.i60
  %22 = tail call ptr @malloc(i32 32)
  store i32 1819047278, ptr %22, align 8
  %23 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %23, align 8
  %memberidx.i.i67 = getelementptr inbounds %string, ptr %23, i64 0, i32 1
  store ptr %22, ptr %memberidx.i.i67, align 8
  %memberidx1.i.i68 = getelementptr inbounds %string, ptr %23, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i68, align 4
  %memberidx2.i.i69 = getelementptr inbounds %string, ptr %23, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i69, align 4
  %24 = load i64, ptr %memberidx.i, align 4
  %.not.i72 = icmp eq i64 %24, 4
  br i1 %.not.i72, label %ifend.i76, label %ifend7

ifend.i76:                                        ; preds = %ifend4
  %memberidx2.i74 = getelementptr inbounds %string, ptr %5, i64 0, i32 1
  %25 = load ptr, ptr %memberidx2.i74, align 8
  %26 = tail call i64 @memcmp(ptr %25, ptr nonnull %22, i64 4)
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %if.entry5, label %ifend7

if.entry5:                                        ; preds = %ifend.i76
  %28 = tail call ptr @malloc(i32 25)
  store i64 8, ptr %28, align 4
  %memberidx.i.i78 = getelementptr inbounds %Expression, ptr %28, i64 0, i32 2
  store i64 5, ptr %memberidx.i.i78, align 4
  %memberidx1.i.i79 = getelementptr inbounds %Expression, ptr %28, i64 0, i32 1
  %memberidx.i80 = getelementptr inbounds %Expression, ptr %28, i64 0, i32 3
  store ptr %1, ptr %memberidx.i80, align 8
  store i1 true, ptr %memberidx1.i.i79, align 1
  br label %common.ret

ifend7:                                           ; preds = %ifend4, %ifend.i76
  %29 = tail call fastcc ptr @TypeChecker_get_var_from_current_scope(ptr %0, ptr nonnull %5)
  %30 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %30, align 4
  %.not = icmp eq ptr %29, null
  br i1 %.not, label %ifend10, label %if.entry8

if.entry8:                                        ; preds = %ifend7
  %31 = load i64, ptr %29, align 4
  switch i64 %31, label %else25 [
    i64 0, label %if.entry12
    i64 1, label %if.entry18
    i64 2, label %if.entry24
  ]

ifend10:                                          ; preds = %ifend7
  %32 = load ptr, ptr %5, align 8
  %memberidx34 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %32, i64 0, i32 5
  %33 = load ptr, ptr %memberidx34, align 8
  %34 = tail call ptr %33(ptr nonnull %5)
  %35 = alloca ptr, align 8
  %36 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %35, ptr nonnull @207, ptr %34)
  %37 = load ptr, ptr %35, align 8
  %38 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %38, align 8
  %memberidx.i85 = getelementptr inbounds %string, ptr %38, i64 0, i32 1
  store ptr %37, ptr %memberidx.i85, align 8
  %memberidx1.i86 = getelementptr inbounds %string, ptr %38, i64 0, i32 2
  store i64 %36, ptr %memberidx1.i86, align 4
  %memberidx2.i87 = getelementptr inbounds %string, ptr %38, i64 0, i32 3
  store i64 %36, ptr %memberidx2.i87, align 4
  tail call void @free(ptr %34)
  %39 = load ptr, ptr %2, align 8
  %memberidx.i88 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %40 = load ptr, ptr %memberidx.i88, align 8
  %memberidx1.i89 = getelementptr inbounds %Compiler, ptr %40, i64 0, i32 6
  %41 = load ptr, ptr %memberidx1.i89, align 8
  %42 = call ptr @malloc(i32 24)
  store i64 1, ptr %42, align 4
  %memberidx1.i.i90 = getelementptr inbounds %FloError, ptr %42, i64 0, i32 2
  store ptr %39, ptr %memberidx1.i.i90, align 8
  %memberidx2.i.i91 = getelementptr inbounds %FloError, ptr %42, i64 0, i32 1
  store ptr %38, ptr %memberidx2.i.i91, align 8
  %memberidx.i.i92 = getelementptr inbounds %Array_FloError_, ptr %41, i64 0, i32 2
  %43 = load i64, ptr %memberidx.i.i92, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %41, i64 0, i32 3
  %44 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %43, %44
  br i1 %.not.i.i, label %ifend10.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

ifend10.TypeChecker_error.exit_crit_edge:         ; preds = %ifend10
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %41, i64 0, i32 1
  %.pre125 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %ifend10
  %45 = shl i64 %44, 1
  store i64 %45, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %41, i64 0, i32 1
  %46 = load ptr, ptr %memberidx2.i.i.i, align 8
  %47 = shl i64 %44, 4
  %48 = call ptr @realloc(ptr %46, i64 %47)
  store ptr %48, ptr %memberidx2.i.i.i, align 8
  %.pre = load i64, ptr %memberidx.i.i92, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %ifend10.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %49 = phi ptr [ %.pre125, %ifend10.TypeChecker_error.exit_crit_edge ], [ %48, %if.entry.i.i ]
  %50 = phi i64 [ %43, %ifend10.TypeChecker_error.exit_crit_edge ], [ %.pre, %if.entry.i.i ]
  %51 = add i64 %50, 1
  store i64 %51, ptr %memberidx.i.i92, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %49, i64 %50
  store ptr %42, ptr %ptridx.i.i, align 8
  br label %common.ret

if.entry12:                                       ; preds = %if.entry8
  %52 = load ptr, ptr %0, align 8
  %memberidx.i94 = getelementptr inbounds %Program, ptr %52, i64 0, i32 1
  %53 = load ptr, ptr %memberidx.i94, align 8
  %memberidx1.i95 = getelementptr inbounds %VarId, ptr %29, i64 0, i32 1
  %54 = load i64, ptr %memberidx1.i95, align 4
  %memberidx.i.i96 = getelementptr inbounds %Array_Module_, ptr %53, i64 0, i32 1
  %55 = load ptr, ptr %memberidx.i.i96, align 8
  %ptridx.i.i97 = getelementptr inbounds ptr, ptr %55, i64 %54
  %56 = load ptr, ptr %ptridx.i.i97, align 8
  %memberidx2.i98 = getelementptr inbounds %Module, ptr %56, i64 0, i32 5
  %57 = load ptr, ptr %memberidx2.i98, align 8
  %memberidx3.i99 = getelementptr inbounds %VarId, ptr %29, i64 0, i32 2
  %58 = load i64, ptr %memberidx3.i99, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Function_, ptr %57, i64 0, i32 1
  %59 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %59, i64 %58
  %60 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx16 = getelementptr inbounds %Function, ptr %60, i64 0, i32 4
  %61 = load ptr, ptr %memberidx16, align 8
  br label %ifend14

ifend14:                                          ; preds = %if.entry31, %else25, %if.entry24, %if.entry18, %if.entry12
  %62 = phi ptr [ %88, %if.entry31 ], [ %30, %else25 ], [ %85, %if.entry24 ], [ %75, %if.entry18 ], [ %61, %if.entry12 ]
  %63 = tail call ptr @malloc(i32 33)
  store i64 8, ptr %63, align 4
  %memberidx.i.i100 = getelementptr inbounds %Expression, ptr %63, i64 0, i32 2
  store i64 7, ptr %memberidx.i.i100, align 4
  %memberidx1.i.i101 = getelementptr inbounds %Expression, ptr %63, i64 0, i32 1
  %memberidx.i102 = getelementptr inbounds %VarAccessExpression, ptr %63, i64 0, i32 4
  store ptr %29, ptr %memberidx.i102, align 8
  %memberidx1.i103 = getelementptr inbounds %Expression, ptr %63, i64 0, i32 3
  store ptr %62, ptr %memberidx1.i103, align 8
  %64 = load i64, ptr %29, align 4
  %65 = icmp eq i64 %64, 2
  store i1 %65, ptr %memberidx1.i.i101, align 1
  br label %common.ret

if.entry18:                                       ; preds = %if.entry8
  %66 = load ptr, ptr %0, align 8
  %memberidx.i113 = getelementptr inbounds %Program, ptr %66, i64 0, i32 1
  %67 = load ptr, ptr %memberidx.i113, align 8
  %memberidx1.i114 = getelementptr inbounds %VarId, ptr %29, i64 0, i32 1
  %68 = load i64, ptr %memberidx1.i114, align 4
  %memberidx.i.i115 = getelementptr inbounds %Array_Module_, ptr %67, i64 0, i32 1
  %69 = load ptr, ptr %memberidx.i.i115, align 8
  %ptridx.i.i116 = getelementptr inbounds ptr, ptr %69, i64 %68
  %70 = load ptr, ptr %ptridx.i.i116, align 8
  %memberidx2.i117 = getelementptr inbounds %Module, ptr %70, i64 0, i32 2
  %71 = load ptr, ptr %memberidx2.i117, align 8
  %memberidx3.i118 = getelementptr inbounds %VarId, ptr %29, i64 0, i32 2
  %72 = load i64, ptr %memberidx3.i118, align 4
  %memberidx.i5.i119 = getelementptr inbounds %Array_Var_, ptr %71, i64 0, i32 1
  %73 = load ptr, ptr %memberidx.i5.i119, align 8
  %ptridx.i6.i120 = getelementptr inbounds ptr, ptr %73, i64 %72
  %74 = load ptr, ptr %ptridx.i6.i120, align 8
  %75 = load ptr, ptr %74, align 8
  br label %ifend14

if.entry24:                                       ; preds = %if.entry8
  %76 = load ptr, ptr %0, align 8
  %memberidx.i105 = getelementptr inbounds %Program, ptr %76, i64 0, i32 1
  %77 = load ptr, ptr %memberidx.i105, align 8
  %memberidx1.i106 = getelementptr inbounds %VarId, ptr %29, i64 0, i32 1
  %78 = load i64, ptr %memberidx1.i106, align 4
  %memberidx.i.i107 = getelementptr inbounds %Array_Module_, ptr %77, i64 0, i32 1
  %79 = load ptr, ptr %memberidx.i.i107, align 8
  %ptridx.i.i108 = getelementptr inbounds ptr, ptr %79, i64 %78
  %80 = load ptr, ptr %ptridx.i.i108, align 8
  %memberidx2.i109 = getelementptr inbounds %Module, ptr %80, i64 0, i32 3
  %81 = load ptr, ptr %memberidx2.i109, align 8
  %memberidx3.i110 = getelementptr inbounds %VarId, ptr %29, i64 0, i32 2
  %82 = load i64, ptr %memberidx3.i110, align 4
  %memberidx.i5.i111 = getelementptr inbounds %Array_Const_, ptr %81, i64 0, i32 1
  %83 = load ptr, ptr %memberidx.i5.i111, align 8
  %ptridx.i6.i112 = getelementptr inbounds ptr, ptr %83, i64 %82
  %84 = load ptr, ptr %ptridx.i6.i112, align 8
  %85 = load ptr, ptr %84, align 8
  br label %ifend14

else25:                                           ; preds = %if.entry8
  %86 = add i64 %31, -3
  %87 = icmp ult i64 %86, 2
  br i1 %87, label %if.entry31, label %ifend14

if.entry31:                                       ; preds = %else25
  %88 = tail call ptr @malloc(i32 8)
  store i64 18, ptr %88, align 4
  br label %ifend14
}

define internal fastcc ptr @TypeChecker_check_intrinsic_call(ptr %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
for.entry:
  %memberidx = getelementptr inbounds %CallExpressionNode, ptr %2, i64 0, i32 4
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %IntrinsicCall, ptr %1, i64 0, i32 4
  %4 = load i64, ptr %memberidx1, align 4
  %5 = add i64 %4, -3
  %6 = icmp ult i64 %5, 2
  %7 = icmp eq i64 %4, 7
  %8 = or i1 %7, %6
  %memberidx2 = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i64 0, i32 2
  %9 = load i64, ptr %memberidx2, align 4
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx3 = getelementptr inbounds %IntrinsicCall, ptr %1, i64 0, i32 5
  %memberidx.i135 = getelementptr inbounds %Array_ExpressionNode_, ptr %3, i64 0, i32 1
  %memberidx.i138 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  br label %for.body

for.cond:                                         ; preds = %Array_Expression____sl__.exit
  %11 = add nuw nsw i64 %i.0248, 1
  %12 = load i64, ptr %memberidx2, align 4
  %13 = icmp slt i64 %11, %12
  br i1 %13, label %for.body, label %for.end

for.body:                                         ; preds = %for.body.lr.ph, %for.cond
  %i.0248 = phi i64 [ 0, %for.body.lr.ph ], [ %11, %for.cond ]
  %14 = icmp eq i64 %i.0248, 1
  %15 = and i1 %8, %14
  br i1 %15, label %true_block, label %false_block

for.end:                                          ; preds = %for.cond, %for.entry
  %memberidx6 = getelementptr inbounds %IntrinsicCall, ptr %1, i64 0, i32 5
  %16 = load ptr, ptr %memberidx6, align 8
  %memberidx.i = getelementptr inbounds %Array_Expression_, ptr %16, i64 0, i32 1
  %17 = load ptr, ptr %memberidx.i, align 8
  %18 = load ptr, ptr %17, align 8
  %memberidx7 = getelementptr inbounds %Expression, ptr %18, i64 0, i32 3
  %19 = load ptr, ptr %memberidx7, align 8
  %20 = load i64, ptr %19, align 4
  %21 = icmp eq i64 %20, 15
  br i1 %21, label %ifend10, label %if.entry8

true_block:                                       ; preds = %for.body
  %22 = tail call ptr @malloc(i32 8)
  store i64 21, ptr %22, align 4
  %.pre = load ptr, ptr %memberidx3, align 8
  br label %end

false_block:                                      ; preds = %for.body
  %23 = load ptr, ptr %memberidx3, align 8
  %memberidx.i134 = getelementptr inbounds %Array_Expression_, ptr %23, i64 0, i32 1
  %24 = load ptr, ptr %memberidx.i134, align 8
  %25 = load ptr, ptr %24, align 8
  %memberidx4 = getelementptr inbounds %Expression, ptr %25, i64 0, i32 3
  %26 = load ptr, ptr %memberidx4, align 8
  br label %end

end:                                              ; preds = %false_block, %true_block
  %27 = phi ptr [ %.pre, %true_block ], [ %23, %false_block ]
  %ternary = phi ptr [ %22, %true_block ], [ %26, %false_block ]
  %28 = load ptr, ptr %memberidx.i135, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %28, i64 %i.0248
  %29 = load ptr, ptr %ptridx.i, align 8
  %30 = tail call fastcc ptr @TypeChecker_check_expression(ptr %0, ptr %ternary, ptr %29)
  %memberidx.i136 = getelementptr inbounds %Array_Expression_, ptr %27, i64 0, i32 2
  %31 = load i64, ptr %memberidx.i136, align 4
  %memberidx1.i = getelementptr inbounds %Array_Expression_, ptr %27, i64 0, i32 3
  %32 = load i64, ptr %memberidx1.i, align 4
  %.not.i = icmp slt i64 %31, %32
  br i1 %.not.i, label %end.Array_Expression____sl__.exit_crit_edge, label %if.entry.i

end.Array_Expression____sl__.exit_crit_edge:      ; preds = %end
  %memberidx4.i.phi.trans.insert = getelementptr inbounds %Array_Expression_, ptr %27, i64 0, i32 1
  %.pre250 = load ptr, ptr %memberidx4.i.phi.trans.insert, align 8
  br label %Array_Expression____sl__.exit

if.entry.i:                                       ; preds = %end
  %33 = shl i64 %32, 1
  store i64 %33, ptr %memberidx1.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_Expression_, ptr %27, i64 0, i32 1
  %34 = load ptr, ptr %memberidx2.i.i, align 8
  %35 = shl i64 %32, 4
  %36 = tail call ptr @realloc(ptr %34, i64 %35)
  store ptr %36, ptr %memberidx2.i.i, align 8
  %.pre249 = load i64, ptr %memberidx.i136, align 4
  br label %Array_Expression____sl__.exit

Array_Expression____sl__.exit:                    ; preds = %end.Array_Expression____sl__.exit_crit_edge, %if.entry.i
  %37 = phi ptr [ %.pre250, %end.Array_Expression____sl__.exit_crit_edge ], [ %36, %if.entry.i ]
  %38 = phi i64 [ %31, %end.Array_Expression____sl__.exit_crit_edge ], [ %.pre249, %if.entry.i ]
  %39 = add i64 %38, 1
  store i64 %39, ptr %memberidx.i136, align 4
  %ptridx.i137 = getelementptr inbounds ptr, ptr %37, i64 %38
  store ptr %30, ptr %ptridx.i137, align 8
  %40 = load ptr, ptr %memberidx.i138, align 8
  %memberidx1.i139 = getelementptr inbounds %Compiler, ptr %40, i64 0, i32 6
  %41 = load ptr, ptr %memberidx1.i139, align 8
  %memberidx2.i = getelementptr inbounds %Array_FloError_, ptr %41, i64 0, i32 2
  %42 = load i64, ptr %memberidx2.i, align 4
  %43 = icmp sgt i64 %42, 0
  br i1 %43, label %common.ret, label %for.cond

common.ret:                                       ; preds = %Array_Expression____sl__.exit, %ifend23, %ifend73, %if.entry79, %else17, %TypeChecker_error.exit245, %TypeChecker_error.exit223, %TypeChecker_error.exit201, %TypeChecker_error.exit185, %TypeChecker_error.exit163, %TypeChecker_error.exit
  %common.ret.op = phi ptr [ null, %TypeChecker_error.exit ], [ null, %TypeChecker_error.exit163 ], [ null, %TypeChecker_error.exit185 ], [ null, %TypeChecker_error.exit201 ], [ null, %TypeChecker_error.exit223 ], [ null, %TypeChecker_error.exit245 ], [ %1, %else17 ], [ %1, %if.entry79 ], [ %1, %ifend73 ], [ %1, %ifend23 ], [ null, %Array_Expression____sl__.exit ]
  ret ptr %common.ret.op

if.entry8:                                        ; preds = %for.end
  %44 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %19)
  %45 = load ptr, ptr %44, align 8
  %memberidx13 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %45, i64 0, i32 5
  %46 = load ptr, ptr %memberidx13, align 8
  %47 = tail call ptr %46(ptr nonnull %44)
  %48 = alloca ptr, align 8
  %49 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %48, ptr nonnull @252, ptr %47)
  %50 = load ptr, ptr %48, align 8
  %51 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %51, align 8
  %memberidx.i141 = getelementptr inbounds %string, ptr %51, i64 0, i32 1
  store ptr %50, ptr %memberidx.i141, align 8
  %memberidx1.i142 = getelementptr inbounds %string, ptr %51, i64 0, i32 2
  store i64 %49, ptr %memberidx1.i142, align 4
  %memberidx2.i143 = getelementptr inbounds %string, ptr %51, i64 0, i32 3
  store i64 %49, ptr %memberidx2.i143, align 4
  tail call void @free(ptr %47)
  %memberidx14 = getelementptr inbounds %CallExpressionNode, ptr %2, i64 0, i32 3
  %52 = load ptr, ptr %memberidx14, align 8
  %53 = load ptr, ptr %52, align 8
  %memberidx.i144 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %54 = load ptr, ptr %memberidx.i144, align 8
  %memberidx1.i145 = getelementptr inbounds %Compiler, ptr %54, i64 0, i32 6
  %55 = load ptr, ptr %memberidx1.i145, align 8
  %56 = call ptr @malloc(i32 24)
  store i64 5, ptr %56, align 4
  %memberidx1.i.i = getelementptr inbounds %FloError, ptr %56, i64 0, i32 2
  store ptr %53, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i146 = getelementptr inbounds %FloError, ptr %56, i64 0, i32 1
  store ptr %51, ptr %memberidx2.i.i146, align 8
  %memberidx.i.i147 = getelementptr inbounds %Array_FloError_, ptr %55, i64 0, i32 2
  %57 = load i64, ptr %memberidx.i.i147, align 4
  %memberidx1.i2.i = getelementptr inbounds %Array_FloError_, ptr %55, i64 0, i32 3
  %58 = load i64, ptr %memberidx1.i2.i, align 4
  %.not.i.i = icmp slt i64 %57, %58
  br i1 %.not.i.i, label %if.entry8.TypeChecker_error.exit_crit_edge, label %if.entry.i.i

if.entry8.TypeChecker_error.exit_crit_edge:       ; preds = %if.entry8
  %memberidx4.i.i.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %55, i64 0, i32 1
  %.pre252 = load ptr, ptr %memberidx4.i.i.phi.trans.insert, align 8
  br label %TypeChecker_error.exit

if.entry.i.i:                                     ; preds = %if.entry8
  %59 = shl i64 %58, 1
  store i64 %59, ptr %memberidx1.i2.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %Array_FloError_, ptr %55, i64 0, i32 1
  %60 = load ptr, ptr %memberidx2.i.i.i, align 8
  %61 = shl i64 %58, 4
  %62 = call ptr @realloc(ptr %60, i64 %61)
  store ptr %62, ptr %memberidx2.i.i.i, align 8
  %.pre251 = load i64, ptr %memberidx.i.i147, align 4
  br label %TypeChecker_error.exit

TypeChecker_error.exit:                           ; preds = %if.entry8.TypeChecker_error.exit_crit_edge, %if.entry.i.i
  %63 = phi ptr [ %.pre252, %if.entry8.TypeChecker_error.exit_crit_edge ], [ %62, %if.entry.i.i ]
  %64 = phi i64 [ %57, %if.entry8.TypeChecker_error.exit_crit_edge ], [ %.pre251, %if.entry.i.i ]
  %65 = add i64 %64, 1
  store i64 %65, ptr %memberidx.i.i147, align 4
  %ptridx.i.i = getelementptr inbounds ptr, ptr %63, i64 %64
  store ptr %56, ptr %ptridx.i.i, align 8
  br label %common.ret

ifend10:                                          ; preds = %for.end
  %66 = icmp eq i64 %4, 6
  br i1 %66, label %if.entry16, label %else17

if.entry16:                                       ; preds = %ifend10
  %memberidx20 = getelementptr inbounds %Array_Expression_, ptr %16, i64 0, i32 2
  %67 = load i64, ptr %memberidx20, align 4
  %.not133 = icmp eq i64 %67, 2
  br i1 %.not133, label %ifend23, label %if.entry21

else17:                                           ; preds = %ifend10
  %68 = icmp eq i64 %4, 5
  switch i64 %4, label %common.ret [
    i64 7, label %if.entry40
    i64 5, label %if.entry40
    i64 4, label %if.entry40
    i64 3, label %if.entry40
  ]

if.entry21:                                       ; preds = %if.entry16
  %69 = alloca ptr, align 8
  %70 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %69, ptr nonnull @253, i64 %67)
  %71 = load ptr, ptr %69, align 8
  %72 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %72, align 8
  %memberidx.i148 = getelementptr inbounds %string, ptr %72, i64 0, i32 1
  store ptr %71, ptr %memberidx.i148, align 8
  %memberidx1.i149 = getelementptr inbounds %string, ptr %72, i64 0, i32 2
  store i64 %70, ptr %memberidx1.i149, align 4
  %memberidx2.i150 = getelementptr inbounds %string, ptr %72, i64 0, i32 3
  store i64 %70, ptr %memberidx2.i150, align 4
  %73 = load ptr, ptr %2, align 8
  %memberidx.i151 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %74 = load ptr, ptr %memberidx.i151, align 8
  %memberidx1.i152 = getelementptr inbounds %Compiler, ptr %74, i64 0, i32 6
  %75 = load ptr, ptr %memberidx1.i152, align 8
  %76 = call ptr @malloc(i32 24)
  store i64 4, ptr %76, align 4
  %memberidx1.i.i153 = getelementptr inbounds %FloError, ptr %76, i64 0, i32 2
  store ptr %73, ptr %memberidx1.i.i153, align 8
  %memberidx2.i.i154 = getelementptr inbounds %FloError, ptr %76, i64 0, i32 1
  store ptr %72, ptr %memberidx2.i.i154, align 8
  %memberidx.i.i155 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 2
  %77 = load i64, ptr %memberidx.i.i155, align 4
  %memberidx1.i2.i156 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 3
  %78 = load i64, ptr %memberidx1.i2.i156, align 4
  %.not.i.i157 = icmp slt i64 %77, %78
  br i1 %.not.i.i157, label %if.entry21.TypeChecker_error.exit163_crit_edge, label %if.entry.i.i160

if.entry21.TypeChecker_error.exit163_crit_edge:   ; preds = %if.entry21
  %memberidx4.i.i161.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 1
  %.pre260 = load ptr, ptr %memberidx4.i.i161.phi.trans.insert, align 8
  br label %TypeChecker_error.exit163

if.entry.i.i160:                                  ; preds = %if.entry21
  %79 = shl i64 %78, 1
  store i64 %79, ptr %memberidx1.i2.i156, align 4
  %memberidx2.i.i.i159 = getelementptr inbounds %Array_FloError_, ptr %75, i64 0, i32 1
  %80 = load ptr, ptr %memberidx2.i.i.i159, align 8
  %81 = shl i64 %78, 4
  %82 = call ptr @realloc(ptr %80, i64 %81)
  store ptr %82, ptr %memberidx2.i.i.i159, align 8
  %.pre259 = load i64, ptr %memberidx.i.i155, align 4
  br label %TypeChecker_error.exit163

TypeChecker_error.exit163:                        ; preds = %if.entry21.TypeChecker_error.exit163_crit_edge, %if.entry.i.i160
  %83 = phi ptr [ %.pre260, %if.entry21.TypeChecker_error.exit163_crit_edge ], [ %82, %if.entry.i.i160 ]
  %84 = phi i64 [ %77, %if.entry21.TypeChecker_error.exit163_crit_edge ], [ %.pre259, %if.entry.i.i160 ]
  %85 = add i64 %84, 1
  store i64 %85, ptr %memberidx.i.i155, align 4
  %ptridx.i.i162 = getelementptr inbounds ptr, ptr %83, i64 %84
  store ptr %76, ptr %ptridx.i.i162, align 8
  br label %common.ret

ifend23:                                          ; preds = %if.entry16
  %memberidx27 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 3
  store ptr %19, ptr %memberidx27, align 8
  %86 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i166 = getelementptr inbounds ptr, ptr %86, i64 1
  %87 = load ptr, ptr %ptridx.i166, align 8
  %memberidx31 = getelementptr inbounds %Expression, ptr %87, i64 0, i32 3
  %88 = load ptr, ptr %memberidx31, align 8
  %89 = load i64, ptr %88, align 4
  %90 = add i64 %89, -1
  %91 = icmp ult i64 %90, 7
  br i1 %91, label %common.ret, label %if.entry32

if.entry32:                                       ; preds = %ifend23
  %92 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %88)
  %93 = load ptr, ptr %92, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %93, i64 0, i32 5
  %94 = load ptr, ptr %memberidx37, align 8
  %95 = tail call ptr %94(ptr nonnull %92)
  %96 = alloca ptr, align 8
  %97 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %96, ptr nonnull @254, ptr %95)
  %98 = load ptr, ptr %96, align 8
  %99 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %99, align 8
  %memberidx.i169 = getelementptr inbounds %string, ptr %99, i64 0, i32 1
  store ptr %98, ptr %memberidx.i169, align 8
  %memberidx1.i170 = getelementptr inbounds %string, ptr %99, i64 0, i32 2
  store i64 %97, ptr %memberidx1.i170, align 4
  %memberidx2.i171 = getelementptr inbounds %string, ptr %99, i64 0, i32 3
  store i64 %97, ptr %memberidx2.i171, align 4
  tail call void @free(ptr %95)
  %100 = load ptr, ptr %memberidx, align 8
  %memberidx.i172 = getelementptr inbounds %Array_ExpressionNode_, ptr %100, i64 0, i32 1
  %101 = load ptr, ptr %memberidx.i172, align 8
  %102 = load ptr, ptr %101, align 8
  %103 = load ptr, ptr %102, align 8
  %memberidx.i173 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %104 = load ptr, ptr %memberidx.i173, align 8
  %memberidx1.i174 = getelementptr inbounds %Compiler, ptr %104, i64 0, i32 6
  %105 = load ptr, ptr %memberidx1.i174, align 8
  %106 = call ptr @malloc(i32 24)
  store i64 5, ptr %106, align 4
  %memberidx1.i.i175 = getelementptr inbounds %FloError, ptr %106, i64 0, i32 2
  store ptr %103, ptr %memberidx1.i.i175, align 8
  %memberidx2.i.i176 = getelementptr inbounds %FloError, ptr %106, i64 0, i32 1
  store ptr %99, ptr %memberidx2.i.i176, align 8
  %memberidx.i.i177 = getelementptr inbounds %Array_FloError_, ptr %105, i64 0, i32 2
  %107 = load i64, ptr %memberidx.i.i177, align 4
  %memberidx1.i2.i178 = getelementptr inbounds %Array_FloError_, ptr %105, i64 0, i32 3
  %108 = load i64, ptr %memberidx1.i2.i178, align 4
  %.not.i.i179 = icmp slt i64 %107, %108
  br i1 %.not.i.i179, label %if.entry32.TypeChecker_error.exit185_crit_edge, label %if.entry.i.i182

if.entry32.TypeChecker_error.exit185_crit_edge:   ; preds = %if.entry32
  %memberidx4.i.i183.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %105, i64 0, i32 1
  %.pre262 = load ptr, ptr %memberidx4.i.i183.phi.trans.insert, align 8
  br label %TypeChecker_error.exit185

if.entry.i.i182:                                  ; preds = %if.entry32
  %109 = shl i64 %108, 1
  store i64 %109, ptr %memberidx1.i2.i178, align 4
  %memberidx2.i.i.i181 = getelementptr inbounds %Array_FloError_, ptr %105, i64 0, i32 1
  %110 = load ptr, ptr %memberidx2.i.i.i181, align 8
  %111 = shl i64 %108, 4
  %112 = call ptr @realloc(ptr %110, i64 %111)
  store ptr %112, ptr %memberidx2.i.i.i181, align 8
  %.pre261 = load i64, ptr %memberidx.i.i177, align 4
  br label %TypeChecker_error.exit185

TypeChecker_error.exit185:                        ; preds = %if.entry32.TypeChecker_error.exit185_crit_edge, %if.entry.i.i182
  %113 = phi ptr [ %.pre262, %if.entry32.TypeChecker_error.exit185_crit_edge ], [ %112, %if.entry.i.i182 ]
  %114 = phi i64 [ %107, %if.entry32.TypeChecker_error.exit185_crit_edge ], [ %.pre261, %if.entry.i.i182 ]
  %115 = add i64 %114, 1
  store i64 %115, ptr %memberidx.i.i177, align 4
  %ptridx.i.i184 = getelementptr inbounds ptr, ptr %113, i64 %114
  store ptr %106, ptr %ptridx.i.i184, align 8
  br label %common.ret

if.entry40:                                       ; preds = %else17, %else17, %else17, %else17
  %memberidx44 = getelementptr inbounds %Array_Expression_, ptr %16, i64 0, i32 2
  %116 = load i64, ptr %memberidx44, align 4
  %.not = icmp eq i64 %116, 3
  br i1 %.not, label %ifend47, label %if.entry45

if.entry45:                                       ; preds = %if.entry40
  %117 = alloca ptr, align 8
  %118 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %117, ptr nonnull @255, i64 %116)
  %119 = load ptr, ptr %117, align 8
  %120 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %120, align 8
  %memberidx.i186 = getelementptr inbounds %string, ptr %120, i64 0, i32 1
  store ptr %119, ptr %memberidx.i186, align 8
  %memberidx1.i187 = getelementptr inbounds %string, ptr %120, i64 0, i32 2
  store i64 %118, ptr %memberidx1.i187, align 4
  %memberidx2.i188 = getelementptr inbounds %string, ptr %120, i64 0, i32 3
  store i64 %118, ptr %memberidx2.i188, align 4
  %121 = load ptr, ptr %2, align 8
  %memberidx.i189 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %122 = load ptr, ptr %memberidx.i189, align 8
  %memberidx1.i190 = getelementptr inbounds %Compiler, ptr %122, i64 0, i32 6
  %123 = load ptr, ptr %memberidx1.i190, align 8
  %124 = call ptr @malloc(i32 24)
  store i64 4, ptr %124, align 4
  %memberidx1.i.i191 = getelementptr inbounds %FloError, ptr %124, i64 0, i32 2
  store ptr %121, ptr %memberidx1.i.i191, align 8
  %memberidx2.i.i192 = getelementptr inbounds %FloError, ptr %124, i64 0, i32 1
  store ptr %120, ptr %memberidx2.i.i192, align 8
  %memberidx.i.i193 = getelementptr inbounds %Array_FloError_, ptr %123, i64 0, i32 2
  %125 = load i64, ptr %memberidx.i.i193, align 4
  %memberidx1.i2.i194 = getelementptr inbounds %Array_FloError_, ptr %123, i64 0, i32 3
  %126 = load i64, ptr %memberidx1.i2.i194, align 4
  %.not.i.i195 = icmp slt i64 %125, %126
  br i1 %.not.i.i195, label %if.entry45.TypeChecker_error.exit201_crit_edge, label %if.entry.i.i198

if.entry45.TypeChecker_error.exit201_crit_edge:   ; preds = %if.entry45
  %memberidx4.i.i199.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %123, i64 0, i32 1
  %.pre254 = load ptr, ptr %memberidx4.i.i199.phi.trans.insert, align 8
  br label %TypeChecker_error.exit201

if.entry.i.i198:                                  ; preds = %if.entry45
  %127 = shl i64 %126, 1
  store i64 %127, ptr %memberidx1.i2.i194, align 4
  %memberidx2.i.i.i197 = getelementptr inbounds %Array_FloError_, ptr %123, i64 0, i32 1
  %128 = load ptr, ptr %memberidx2.i.i.i197, align 8
  %129 = shl i64 %126, 4
  %130 = call ptr @realloc(ptr %128, i64 %129)
  store ptr %130, ptr %memberidx2.i.i.i197, align 8
  %.pre253 = load i64, ptr %memberidx.i.i193, align 4
  br label %TypeChecker_error.exit201

TypeChecker_error.exit201:                        ; preds = %if.entry45.TypeChecker_error.exit201_crit_edge, %if.entry.i.i198
  %131 = phi ptr [ %.pre254, %if.entry45.TypeChecker_error.exit201_crit_edge ], [ %130, %if.entry.i.i198 ]
  %132 = phi i64 [ %125, %if.entry45.TypeChecker_error.exit201_crit_edge ], [ %.pre253, %if.entry.i.i198 ]
  %133 = add i64 %132, 1
  store i64 %133, ptr %memberidx.i.i193, align 4
  %ptridx.i.i200 = getelementptr inbounds ptr, ptr %131, i64 %132
  store ptr %124, ptr %ptridx.i.i200, align 8
  br label %common.ret

ifend47:                                          ; preds = %if.entry40
  %memberidx53 = getelementptr inbounds %Expression, ptr %1, i64 0, i32 3
  store ptr %19, ptr %memberidx53, align 8
  br i1 %68, label %if.entry54, label %ifend56

if.entry54:                                       ; preds = %ifend47
  %memberidx57 = getelementptr inbounds %PointerType, ptr %19, i64 0, i32 1
  %134 = load ptr, ptr %memberidx57, align 8
  br label %ifend56

ifend56:                                          ; preds = %ifend47, %if.entry54
  %135 = phi ptr [ %19, %ifend47 ], [ %134, %if.entry54 ]
  %136 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i204 = getelementptr inbounds ptr, ptr %136, i64 1
  %137 = load ptr, ptr %ptridx.i204, align 8
  %memberidx59 = getelementptr inbounds %Expression, ptr %137, i64 0, i32 3
  %138 = load ptr, ptr %memberidx59, align 8
  %139 = tail call fastcc i1 @TypeChecker_types_are_eq(ptr %0, ptr %135, ptr %138)
  br i1 %139, label %ifend62, label %if.entry60

if.entry60:                                       ; preds = %ifend56
  %140 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %135)
  %141 = load ptr, ptr %140, align 8
  %memberidx63 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %141, i64 0, i32 5
  %142 = load ptr, ptr %memberidx63, align 8
  %143 = tail call ptr %142(ptr nonnull %140)
  %144 = load ptr, ptr %memberidx6, align 8
  %memberidx.i205 = getelementptr inbounds %Array_Expression_, ptr %144, i64 0, i32 1
  %145 = load ptr, ptr %memberidx.i205, align 8
  %ptridx.i206 = getelementptr inbounds ptr, ptr %145, i64 1
  %146 = load ptr, ptr %ptridx.i206, align 8
  %memberidx65 = getelementptr inbounds %Expression, ptr %146, i64 0, i32 3
  %147 = load ptr, ptr %memberidx65, align 8
  %148 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr %147)
  %149 = load ptr, ptr %148, align 8
  %memberidx66 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %149, i64 0, i32 5
  %150 = load ptr, ptr %memberidx66, align 8
  %151 = tail call ptr %150(ptr nonnull %148)
  %152 = alloca ptr, align 8
  %153 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %152, ptr nonnull @256, ptr %143, ptr %151)
  %154 = load ptr, ptr %152, align 8
  %155 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %155, align 8
  %memberidx.i207 = getelementptr inbounds %string, ptr %155, i64 0, i32 1
  store ptr %154, ptr %memberidx.i207, align 8
  %memberidx1.i208 = getelementptr inbounds %string, ptr %155, i64 0, i32 2
  store i64 %153, ptr %memberidx1.i208, align 4
  %memberidx2.i209 = getelementptr inbounds %string, ptr %155, i64 0, i32 3
  store i64 %153, ptr %memberidx2.i209, align 4
  tail call void @free(ptr %143)
  tail call void @free(ptr %151)
  %156 = load ptr, ptr %memberidx, align 8
  %memberidx.i210 = getelementptr inbounds %Array_ExpressionNode_, ptr %156, i64 0, i32 1
  %157 = load ptr, ptr %memberidx.i210, align 8
  %158 = load ptr, ptr %157, align 8
  %159 = load ptr, ptr %158, align 8
  %memberidx.i211 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %160 = load ptr, ptr %memberidx.i211, align 8
  %memberidx1.i212 = getelementptr inbounds %Compiler, ptr %160, i64 0, i32 6
  %161 = load ptr, ptr %memberidx1.i212, align 8
  %162 = call ptr @malloc(i32 24)
  store i64 5, ptr %162, align 4
  %memberidx1.i.i213 = getelementptr inbounds %FloError, ptr %162, i64 0, i32 2
  store ptr %159, ptr %memberidx1.i.i213, align 8
  %memberidx2.i.i214 = getelementptr inbounds %FloError, ptr %162, i64 0, i32 1
  store ptr %155, ptr %memberidx2.i.i214, align 8
  %memberidx.i.i215 = getelementptr inbounds %Array_FloError_, ptr %161, i64 0, i32 2
  %163 = load i64, ptr %memberidx.i.i215, align 4
  %memberidx1.i2.i216 = getelementptr inbounds %Array_FloError_, ptr %161, i64 0, i32 3
  %164 = load i64, ptr %memberidx1.i2.i216, align 4
  %.not.i.i217 = icmp slt i64 %163, %164
  br i1 %.not.i.i217, label %if.entry60.TypeChecker_error.exit223_crit_edge, label %if.entry.i.i220

if.entry60.TypeChecker_error.exit223_crit_edge:   ; preds = %if.entry60
  %memberidx4.i.i221.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %161, i64 0, i32 1
  %.pre256 = load ptr, ptr %memberidx4.i.i221.phi.trans.insert, align 8
  br label %TypeChecker_error.exit223

if.entry.i.i220:                                  ; preds = %if.entry60
  %165 = shl i64 %164, 1
  store i64 %165, ptr %memberidx1.i2.i216, align 4
  %memberidx2.i.i.i219 = getelementptr inbounds %Array_FloError_, ptr %161, i64 0, i32 1
  %166 = load ptr, ptr %memberidx2.i.i.i219, align 8
  %167 = shl i64 %164, 4
  %168 = call ptr @realloc(ptr %166, i64 %167)
  store ptr %168, ptr %memberidx2.i.i.i219, align 8
  %.pre255 = load i64, ptr %memberidx.i.i215, align 4
  br label %TypeChecker_error.exit223

TypeChecker_error.exit223:                        ; preds = %if.entry60.TypeChecker_error.exit223_crit_edge, %if.entry.i.i220
  %169 = phi ptr [ %.pre256, %if.entry60.TypeChecker_error.exit223_crit_edge ], [ %168, %if.entry.i.i220 ]
  %170 = phi i64 [ %163, %if.entry60.TypeChecker_error.exit223_crit_edge ], [ %.pre255, %if.entry.i.i220 ]
  %171 = add i64 %170, 1
  store i64 %171, ptr %memberidx.i.i215, align 4
  %ptridx.i.i222 = getelementptr inbounds ptr, ptr %169, i64 %170
  store ptr %162, ptr %ptridx.i.i222, align 8
  br label %common.ret

ifend62:                                          ; preds = %ifend56
  %172 = load ptr, ptr %memberidx6, align 8
  %memberidx.i224 = getelementptr inbounds %Array_Expression_, ptr %172, i64 0, i32 1
  %173 = load ptr, ptr %memberidx.i224, align 8
  %ptridx.i225 = getelementptr inbounds ptr, ptr %173, i64 2
  %174 = load ptr, ptr %ptridx.i225, align 8
  %memberidx70 = getelementptr inbounds %Expression, ptr %174, i64 0, i32 3
  %175 = load ptr, ptr %memberidx70, align 8
  %176 = load i64, ptr %175, align 4
  %177 = add i64 %176, -1
  %178 = icmp ult i64 %177, 7
  br i1 %178, label %ifend73, label %if.entry71

if.entry71:                                       ; preds = %ifend62
  %179 = tail call fastcc ptr @TypeChecker_dump_type(ptr %0, ptr nonnull %175)
  %180 = load ptr, ptr %179, align 8
  %memberidx76 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %180, i64 0, i32 5
  %181 = load ptr, ptr %memberidx76, align 8
  %182 = tail call ptr %181(ptr nonnull %179)
  %183 = alloca ptr, align 8
  %184 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %183, ptr nonnull @254, ptr %182)
  %185 = load ptr, ptr %183, align 8
  %186 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %186, align 8
  %memberidx.i228 = getelementptr inbounds %string, ptr %186, i64 0, i32 1
  store ptr %185, ptr %memberidx.i228, align 8
  %memberidx1.i229 = getelementptr inbounds %string, ptr %186, i64 0, i32 2
  store i64 %184, ptr %memberidx1.i229, align 4
  %memberidx2.i230 = getelementptr inbounds %string, ptr %186, i64 0, i32 3
  store i64 %184, ptr %memberidx2.i230, align 4
  tail call void @free(ptr %182)
  %187 = load ptr, ptr %memberidx, align 8
  %memberidx.i231 = getelementptr inbounds %Array_ExpressionNode_, ptr %187, i64 0, i32 1
  %188 = load ptr, ptr %memberidx.i231, align 8
  %ptridx.i232 = getelementptr inbounds ptr, ptr %188, i64 1
  %189 = load ptr, ptr %ptridx.i232, align 8
  %190 = load ptr, ptr %189, align 8
  %memberidx.i233 = getelementptr inbounds %TypeChecker, ptr %0, i64 0, i32 6
  %191 = load ptr, ptr %memberidx.i233, align 8
  %memberidx1.i234 = getelementptr inbounds %Compiler, ptr %191, i64 0, i32 6
  %192 = load ptr, ptr %memberidx1.i234, align 8
  %193 = call ptr @malloc(i32 24)
  store i64 5, ptr %193, align 4
  %memberidx1.i.i235 = getelementptr inbounds %FloError, ptr %193, i64 0, i32 2
  store ptr %190, ptr %memberidx1.i.i235, align 8
  %memberidx2.i.i236 = getelementptr inbounds %FloError, ptr %193, i64 0, i32 1
  store ptr %186, ptr %memberidx2.i.i236, align 8
  %memberidx.i.i237 = getelementptr inbounds %Array_FloError_, ptr %192, i64 0, i32 2
  %194 = load i64, ptr %memberidx.i.i237, align 4
  %memberidx1.i2.i238 = getelementptr inbounds %Array_FloError_, ptr %192, i64 0, i32 3
  %195 = load i64, ptr %memberidx1.i2.i238, align 4
  %.not.i.i239 = icmp slt i64 %194, %195
  br i1 %.not.i.i239, label %if.entry71.TypeChecker_error.exit245_crit_edge, label %if.entry.i.i242

if.entry71.TypeChecker_error.exit245_crit_edge:   ; preds = %if.entry71
  %memberidx4.i.i243.phi.trans.insert = getelementptr inbounds %Array_FloError_, ptr %192, i64 0, i32 1
  %.pre258 = load ptr, ptr %memberidx4.i.i243.phi.trans.insert, align 8
  br label %TypeChecker_error.exit245

if.entry.i.i242:                                  ; preds = %if.entry71
  %196 = shl i64 %195, 1
  store i64 %196, ptr %memberidx1.i2.i238, align 4
  %memberidx2.i.i.i241 = getelementptr inbounds %Array_FloError_, ptr %192, i64 0, i32 1
  %197 = load ptr, ptr %memberidx2.i.i.i241, align 8
  %198 = shl i64 %195, 4
  %199 = call ptr @realloc(ptr %197, i64 %198)
  store ptr %199, ptr %memberidx2.i.i.i241, align 8
  %.pre257 = load i64, ptr %memberidx.i.i237, align 4
  br label %TypeChecker_error.exit245

TypeChecker_error.exit245:                        ; preds = %if.entry71.TypeChecker_error.exit245_crit_edge, %if.entry.i.i242
  %200 = phi ptr [ %.pre258, %if.entry71.TypeChecker_error.exit245_crit_edge ], [ %199, %if.entry.i.i242 ]
  %201 = phi i64 [ %194, %if.entry71.TypeChecker_error.exit245_crit_edge ], [ %.pre257, %if.entry.i.i242 ]
  %202 = add i64 %201, 1
  store i64 %202, ptr %memberidx.i.i237, align 4
  %ptridx.i.i244 = getelementptr inbounds ptr, ptr %200, i64 %201
  store ptr %193, ptr %ptridx.i.i244, align 8
  br label %common.ret

ifend73:                                          ; preds = %ifend62
  br i1 %7, label %if.entry79, label %common.ret

if.entry79:                                       ; preds = %ifend73
  %203 = tail call ptr @malloc(i32 8)
  store i64 7, ptr %203, align 4
  store ptr %203, ptr %memberidx53, align 8
  br label %common.ret
}

define internal fastcc noalias ptr @dump_type(ptr nocapture readonly %0, i1 %1) unnamed_addr {
  %3 = load i64, ptr %0, align 4
  switch i64 %3, label %ifend56 [
    i64 0, label %if.entry
    i64 1, label %if.entry2
    i64 2, label %if.entry6
    i64 3, label %if.entry10
    i64 4, label %if.entry14
    i64 5, label %if.entry18
    i64 6, label %if.entry22
    i64 7, label %if.entry26
    i64 8, label %if.entry30
    i64 9, label %if.entry34
    i64 10, label %if.entry38
    i64 11, label %if.entry42
    i64 12, label %if.entry50
    i64 18, label %if.entry54
  ]

common.ret:                                       ; preds = %true_block45, %false_block46, %true_block, %false_block, %ifend56, %if.entry54, %if.entry50, %if.entry38, %if.entry34, %if.entry30, %if.entry22, %if.entry18, %if.entry14, %if.entry10, %if.entry6, %if.entry2, %if.entry
  %.sink119 = phi ptr [ %21, %true_block45 ], [ %22, %false_block46 ], [ %14, %true_block ], [ %15, %false_block ], [ %25, %ifend56 ], [ %24, %if.entry54 ], [ %23, %if.entry50 ], [ %18, %if.entry38 ], [ %17, %if.entry34 ], [ %16, %if.entry30 ], [ %11, %if.entry22 ], [ %10, %if.entry18 ], [ %9, %if.entry14 ], [ %8, %if.entry10 ], [ %7, %if.entry6 ], [ %6, %if.entry2 ], [ %5, %if.entry ]
  %.sink117 = phi i64 [ %20, %true_block45 ], [ 5, %false_block46 ], [ %13, %true_block ], [ 3, %false_block ], [ 7, %ifend56 ], [ 6, %if.entry54 ], [ 4, %if.entry50 ], [ 3, %if.entry38 ], [ 3, %if.entry34 ], [ 3, %if.entry30 ], [ 4, %if.entry22 ], [ 3, %if.entry18 ], [ 3, %if.entry14 ], [ 3, %if.entry10 ], [ 2, %if.entry6 ], [ 2, %if.entry2 ], [ 4, %if.entry ]
  %4 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %4, align 8
  %memberidx.i101 = getelementptr inbounds %string, ptr %4, i64 0, i32 1
  store ptr %.sink119, ptr %memberidx.i101, align 8
  %memberidx1.i102 = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  store i64 %.sink117, ptr %memberidx1.i102, align 4
  %memberidx2.i103 = getelementptr inbounds %string, ptr %4, i64 0, i32 3
  store i64 %.sink117, ptr %memberidx2.i103, align 4
  ret ptr %4

if.entry:                                         ; preds = %2
  %5 = tail call ptr @malloc(i32 32)
  store i32 1819242338, ptr %5, align 8
  br label %common.ret

if.entry2:                                        ; preds = %2
  %6 = tail call ptr @malloc(i32 16)
  store i16 13417, ptr %6, align 8
  br label %common.ret

if.entry6:                                        ; preds = %2
  %7 = tail call ptr @malloc(i32 16)
  store i16 14441, ptr %7, align 8
  br label %common.ret

if.entry10:                                       ; preds = %2
  %8 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %8, ptr noundef nonnull align 8 dereferenceable(3) @34, i64 3, i1 false)
  br label %common.ret

if.entry14:                                       ; preds = %2
  %9 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %9, ptr noundef nonnull align 8 dereferenceable(3) @35, i64 3, i1 false)
  br label %common.ret

if.entry18:                                       ; preds = %2
  %10 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %10, ptr noundef nonnull align 8 dereferenceable(3) @36, i64 3, i1 false)
  br label %common.ret

if.entry22:                                       ; preds = %2
  %11 = tail call ptr @malloc(i32 32)
  store i32 942813545, ptr %11, align 8
  br label %common.ret

if.entry26:                                       ; preds = %2
  br i1 %1, label %true_block, label %false_block

true_block:                                       ; preds = %if.entry26
  %12 = alloca ptr, align 8
  %13 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %12, ptr nonnull @140, i64 64)
  %14 = load ptr, ptr %12, align 8
  br label %common.ret

false_block:                                      ; preds = %if.entry26
  %15 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %15, ptr noundef nonnull align 8 dereferenceable(3) @37, i64 3, i1 false)
  br label %common.ret

if.entry30:                                       ; preds = %2
  %16 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %16, ptr noundef nonnull align 8 dereferenceable(3) @38, i64 3, i1 false)
  br label %common.ret

if.entry34:                                       ; preds = %2
  %17 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %17, ptr noundef nonnull align 8 dereferenceable(3) @39, i64 3, i1 false)
  br label %common.ret

if.entry38:                                       ; preds = %2
  %18 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %18, ptr noundef nonnull align 8 dereferenceable(3) @40, i64 3, i1 false)
  br label %common.ret

if.entry42:                                       ; preds = %2
  br i1 %1, label %true_block45, label %false_block46

true_block45:                                     ; preds = %if.entry42
  %19 = alloca ptr, align 8
  %20 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %19, ptr nonnull @141, i64 64)
  %21 = load ptr, ptr %19, align 8
  br label %common.ret

false_block46:                                    ; preds = %if.entry42
  %22 = tail call ptr @malloc(i32 40)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %22, ptr noundef nonnull align 8 dereferenceable(5) @41, i64 5, i1 false)
  br label %common.ret

if.entry50:                                       ; preds = %2
  %23 = tail call ptr @malloc(i32 32)
  store i32 1684631414, ptr %23, align 8
  br label %common.ret

if.entry54:                                       ; preds = %2
  %24 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %24, ptr noundef nonnull align 8 dereferenceable(6) @142, i64 6, i1 false)
  br label %common.ret

ifend56:                                          ; preds = %2
  %25 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %25, ptr noundef nonnull align 8 dereferenceable(7) @143, i64 7, i1 false)
  br label %common.ret
}

; Function Attrs: nofree nosync nounwind readonly
define internal fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %1) unnamed_addr #14 {
  %memberidx.i = getelementptr inbounds %Program, ptr %0, i64 0, i32 1
  br label %tailrecurse.outer

tailrecurse.outer:                                ; preds = %if.entry12, %2
  %accumulator.tr.ph = phi i64 [ %11, %if.entry12 ], [ 0, %2 ]
  %.tr125.ph = phi ptr [ %10, %if.entry12 ], [ %1, %2 ]
  br label %tailrecurse

tailrecurse:                                      ; preds = %tailrecurse.outer, %if.entry86
  %.tr125 = phi ptr [ %72, %if.entry86 ], [ %.tr125.ph, %tailrecurse.outer ]
  %memberidx = getelementptr inbounds %Expression, ptr %.tr125, i64 0, i32 2
  %3 = load i64, ptr %memberidx, align 4
  switch i64 %3, label %common.ret [
    i64 0, label %if.entry
    i64 1, label %if.entry3
    i64 8, label %if.entry8
    i64 9, label %if.entry72
    i64 7, label %if.entry86
  ]

common.ret137:                                    ; preds = %if.entry81, %if.entry76, %if.entry66, %if.entry60, %if.entry54, %if.entry48, %if.entry42, %if.entry36, %if.entry30, %if.entry24, %if.entry18, %common.ret
  %common.ret137.op = phi i64 [ %accumulator.ret.tr, %common.ret ], [ %accumulator.ret.tr126, %if.entry18 ], [ %accumulator.ret.tr127, %if.entry24 ], [ %accumulator.ret.tr128, %if.entry30 ], [ %accumulator.ret.tr129, %if.entry36 ], [ %accumulator.ret.tr130, %if.entry42 ], [ %accumulator.ret.tr131, %if.entry48 ], [ %accumulator.ret.tr132, %if.entry54 ], [ %accumulator.ret.tr133, %if.entry60 ], [ %accumulator.ret.tr134, %if.entry66 ], [ %accumulator.ret.tr135, %if.entry76 ], [ %accumulator.ret.tr136, %if.entry81 ]
  ret i64 %common.ret137.op

common.ret:                                       ; preds = %if.entry8, %tailrecurse, %if.entry72, %if.entry3, %if.entry
  %common.ret.op = phi i64 [ %4, %if.entry ], [ %6, %if.entry3 ], [ -99999999, %if.entry72 ], [ -99999999, %tailrecurse ], [ -99999999, %if.entry8 ]
  %accumulator.ret.tr = add i64 %common.ret.op, %accumulator.tr.ph
  br label %common.ret137

if.entry:                                         ; preds = %tailrecurse
  %memberidx1 = getelementptr inbounds %IntExpression, ptr %.tr125, i64 0, i32 4
  %4 = load i64, ptr %memberidx1, align 4
  br label %common.ret

if.entry3:                                        ; preds = %tailrecurse
  %memberidx6 = getelementptr inbounds %FloatExpression, ptr %.tr125, i64 0, i32 4
  %5 = load double, ptr %memberidx6, align 8
  %6 = fptosi double %5 to i64
  br label %common.ret

if.entry8:                                        ; preds = %tailrecurse
  %memberidx11 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 5
  %7 = load i64, ptr %memberidx11, align 4
  switch i64 %7, label %common.ret [
    i64 1, label %if.entry12
    i64 2, label %if.entry18
    i64 3, label %if.entry24
    i64 4, label %if.entry30
    i64 5, label %if.entry36
    i64 13, label %if.entry42
    i64 14, label %if.entry48
    i64 15, label %if.entry54
    i64 16, label %if.entry60
    i64 17, label %if.entry66
  ]

if.entry12:                                       ; preds = %if.entry8
  %memberidx15 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 4
  %8 = load ptr, ptr %memberidx15, align 8
  %9 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %8)
  %memberidx16 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 6
  %10 = load ptr, ptr %memberidx16, align 8
  %11 = add i64 %9, %accumulator.tr.ph
  br label %tailrecurse.outer

if.entry18:                                       ; preds = %if.entry8
  %memberidx21 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 4
  %12 = load ptr, ptr %memberidx21, align 8
  %13 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %12)
  %memberidx22 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 6
  %14 = load ptr, ptr %memberidx22, align 8
  %15 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %14)
  %16 = add i64 %13, %accumulator.tr.ph
  %accumulator.ret.tr126 = sub i64 %16, %15
  br label %common.ret137

if.entry24:                                       ; preds = %if.entry8
  %memberidx27 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 4
  %17 = load ptr, ptr %memberidx27, align 8
  %18 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %17)
  %memberidx28 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 6
  %19 = load ptr, ptr %memberidx28, align 8
  %20 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %19)
  %21 = mul i64 %20, %18
  %accumulator.ret.tr127 = add i64 %21, %accumulator.tr.ph
  br label %common.ret137

if.entry30:                                       ; preds = %if.entry8
  %memberidx33 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 4
  %22 = load ptr, ptr %memberidx33, align 8
  %23 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %22)
  %memberidx34 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 6
  %24 = load ptr, ptr %memberidx34, align 8
  %25 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %24)
  %26 = sdiv i64 %23, %25
  %accumulator.ret.tr128 = add i64 %26, %accumulator.tr.ph
  br label %common.ret137

if.entry36:                                       ; preds = %if.entry8
  %memberidx39 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 4
  %27 = load ptr, ptr %memberidx39, align 8
  %28 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %27)
  %memberidx40 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 6
  %29 = load ptr, ptr %memberidx40, align 8
  %30 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %29)
  %31 = srem i64 %28, %30
  %accumulator.ret.tr129 = add i64 %31, %accumulator.tr.ph
  br label %common.ret137

if.entry42:                                       ; preds = %if.entry8
  %memberidx45 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 4
  %32 = load ptr, ptr %memberidx45, align 8
  %33 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %32)
  %memberidx46 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 6
  %34 = load ptr, ptr %memberidx46, align 8
  %35 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %34)
  %36 = shl i64 %33, %35
  %accumulator.ret.tr130 = add i64 %36, %accumulator.tr.ph
  br label %common.ret137

if.entry48:                                       ; preds = %if.entry8
  %memberidx51 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 4
  %37 = load ptr, ptr %memberidx51, align 8
  %38 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %37)
  %memberidx52 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 6
  %39 = load ptr, ptr %memberidx52, align 8
  %40 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %39)
  %41 = ashr i64 %38, %40
  %accumulator.ret.tr131 = add i64 %41, %accumulator.tr.ph
  br label %common.ret137

if.entry54:                                       ; preds = %if.entry8
  %memberidx57 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 4
  %42 = load ptr, ptr %memberidx57, align 8
  %43 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %42)
  %memberidx58 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 6
  %44 = load ptr, ptr %memberidx58, align 8
  %45 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %44)
  %46 = or i64 %45, %43
  %accumulator.ret.tr132 = add i64 %46, %accumulator.tr.ph
  br label %common.ret137

if.entry60:                                       ; preds = %if.entry8
  %memberidx63 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 4
  %47 = load ptr, ptr %memberidx63, align 8
  %48 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %47)
  %memberidx64 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 6
  %49 = load ptr, ptr %memberidx64, align 8
  %50 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %49)
  %51 = and i64 %50, %48
  %accumulator.ret.tr133 = add i64 %51, %accumulator.tr.ph
  br label %common.ret137

if.entry66:                                       ; preds = %if.entry8
  %memberidx69 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 4
  %52 = load ptr, ptr %memberidx69, align 8
  %53 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %52)
  %memberidx70 = getelementptr inbounds %BinaryExpression, ptr %.tr125, i64 0, i32 6
  %54 = load ptr, ptr %memberidx70, align 8
  %55 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %54)
  %56 = xor i64 %55, %53
  %accumulator.ret.tr134 = add i64 %56, %accumulator.tr.ph
  br label %common.ret137

if.entry72:                                       ; preds = %tailrecurse
  %memberidx75 = getelementptr inbounds %UnaryExpression, ptr %.tr125, i64 0, i32 4
  %57 = load i64, ptr %memberidx75, align 4
  switch i64 %57, label %common.ret [
    i64 5, label %if.entry76
    i64 6, label %if.entry81
  ]

if.entry76:                                       ; preds = %if.entry72
  %memberidx79 = getelementptr inbounds %UnaryExpression, ptr %.tr125, i64 0, i32 5
  %58 = load ptr, ptr %memberidx79, align 8
  %59 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %58)
  %accumulator.ret.tr135 = sub i64 %accumulator.tr.ph, %59
  br label %common.ret137

if.entry81:                                       ; preds = %if.entry72
  %memberidx84 = getelementptr inbounds %UnaryExpression, ptr %.tr125, i64 0, i32 5
  %60 = load ptr, ptr %memberidx84, align 8
  %61 = tail call fastcc i64 @evaluate_const_int_expression(ptr %0, ptr %60)
  %62 = xor i64 %61, -1
  %accumulator.ret.tr136 = add i64 %accumulator.tr.ph, %62
  br label %common.ret137

if.entry86:                                       ; preds = %tailrecurse
  %memberidx89 = getelementptr inbounds %VarAccessExpression, ptr %.tr125, i64 0, i32 4
  %63 = load ptr, ptr %memberidx89, align 8
  %64 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %VarId, ptr %63, i64 0, i32 1
  %65 = load i64, ptr %memberidx1.i, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Module_, ptr %64, i64 0, i32 1
  %66 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %66, i64 %65
  %67 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %67, i64 0, i32 3
  %68 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %VarId, ptr %63, i64 0, i32 2
  %69 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Const_, ptr %68, i64 0, i32 1
  %70 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %70, i64 %69
  %71 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx90 = getelementptr inbounds %Const, ptr %71, i64 0, i32 2
  %72 = load ptr, ptr %memberidx90, align 8
  br label %tailrecurse
}

define internal fastcc i1 @is_operator_overload_name(ptr readonly %0) unnamed_addr {
  %2 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %2, ptr noundef nonnull align 8 dereferenceable(6) @159, i64 6, i1 false)
  %3 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %3, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %3, i64 0, i32 1
  store ptr %2, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %3, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %3, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i, align 4
  %memberidx.i = getelementptr inbounds %string, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %memberidx.i, align 4
  %.not.i = icmp eq i64 %4, 6
  br i1 %.not.i, label %ifend.i, label %ifend

ifend.i:                                          ; preds = %1
  %memberidx2.i = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %memberidx2.i, align 8
  %6 = tail call i64 @memcmp(ptr %5, ptr nonnull %2, i64 6)
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend.i419, %ifend81, %ifend.i408, %ifend.i397, %ifend.i386, %ifend.i375, %ifend.i364, %ifend.i353, %ifend.i342, %ifend.i331, %ifend.i320, %ifend.i309, %ifend.i298, %ifend.i287, %ifend.i276, %ifend.i265, %ifend.i254, %ifend.i243, %ifend.i232, %ifend.i221, %ifend.i210, %ifend.i199, %ifend.i188, %ifend.i177, %ifend.i166, %ifend.i155, %ifend.i144, %ifend.i133, %ifend.i122, %ifend.i
  %common.ret.op = phi i1 [ true, %ifend.i ], [ true, %ifend.i122 ], [ true, %ifend.i133 ], [ true, %ifend.i144 ], [ true, %ifend.i155 ], [ true, %ifend.i166 ], [ true, %ifend.i177 ], [ true, %ifend.i188 ], [ true, %ifend.i199 ], [ true, %ifend.i210 ], [ true, %ifend.i221 ], [ true, %ifend.i232 ], [ true, %ifend.i243 ], [ true, %ifend.i254 ], [ true, %ifend.i265 ], [ true, %ifend.i276 ], [ true, %ifend.i287 ], [ true, %ifend.i298 ], [ true, %ifend.i309 ], [ true, %ifend.i320 ], [ true, %ifend.i331 ], [ true, %ifend.i342 ], [ true, %ifend.i353 ], [ true, %ifend.i364 ], [ true, %ifend.i375 ], [ true, %ifend.i386 ], [ true, %ifend.i397 ], [ true, %ifend.i408 ], [ %175, %ifend.i419 ], [ false, %ifend81 ]
  ret i1 %common.ret.op

ifend:                                            ; preds = %1, %ifend.i
  %8 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %8, ptr noundef nonnull align 8 dereferenceable(7) @160, i64 7, i1 false)
  %9 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %9, align 8
  %memberidx.i.i113 = getelementptr inbounds %string, ptr %9, i64 0, i32 1
  store ptr %8, ptr %memberidx.i.i113, align 8
  %memberidx1.i.i114 = getelementptr inbounds %string, ptr %9, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i114, align 4
  %memberidx2.i.i115 = getelementptr inbounds %string, ptr %9, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i115, align 4
  %10 = load i64, ptr %memberidx.i, align 4
  %.not.i118 = icmp eq i64 %10, 7
  br i1 %.not.i118, label %ifend.i122, label %ifend3

ifend.i122:                                       ; preds = %ifend
  %memberidx2.i120 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %11 = load ptr, ptr %memberidx2.i120, align 8
  %12 = tail call i64 @memcmp(ptr %11, ptr nonnull %8, i64 7)
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %common.ret, label %ifend3

ifend3:                                           ; preds = %ifend, %ifend.i122
  %14 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %14, ptr noundef nonnull align 8 dereferenceable(7) @161, i64 7, i1 false)
  %15 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %15, align 8
  %memberidx.i.i124 = getelementptr inbounds %string, ptr %15, i64 0, i32 1
  store ptr %14, ptr %memberidx.i.i124, align 8
  %memberidx1.i.i125 = getelementptr inbounds %string, ptr %15, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i125, align 4
  %memberidx2.i.i126 = getelementptr inbounds %string, ptr %15, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i126, align 4
  %16 = load i64, ptr %memberidx.i, align 4
  %.not.i129 = icmp eq i64 %16, 7
  br i1 %.not.i129, label %ifend.i133, label %ifend6

ifend.i133:                                       ; preds = %ifend3
  %memberidx2.i131 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %17 = load ptr, ptr %memberidx2.i131, align 8
  %18 = tail call i64 @memcmp(ptr %17, ptr nonnull %14, i64 7)
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %common.ret, label %ifend6

ifend6:                                           ; preds = %ifend3, %ifend.i133
  %20 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %20, ptr noundef nonnull align 8 dereferenceable(7) @162, i64 7, i1 false)
  %21 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %21, align 8
  %memberidx.i.i135 = getelementptr inbounds %string, ptr %21, i64 0, i32 1
  store ptr %20, ptr %memberidx.i.i135, align 8
  %memberidx1.i.i136 = getelementptr inbounds %string, ptr %21, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i136, align 4
  %memberidx2.i.i137 = getelementptr inbounds %string, ptr %21, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i137, align 4
  %22 = load i64, ptr %memberidx.i, align 4
  %.not.i140 = icmp eq i64 %22, 7
  br i1 %.not.i140, label %ifend.i144, label %ifend9

ifend.i144:                                       ; preds = %ifend6
  %memberidx2.i142 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %23 = load ptr, ptr %memberidx2.i142, align 8
  %24 = tail call i64 @memcmp(ptr %23, ptr nonnull %20, i64 7)
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %common.ret, label %ifend9

ifend9:                                           ; preds = %ifend6, %ifend.i144
  %26 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %26, ptr noundef nonnull align 8 dereferenceable(7) @163, i64 7, i1 false)
  %27 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %27, align 8
  %memberidx.i.i146 = getelementptr inbounds %string, ptr %27, i64 0, i32 1
  store ptr %26, ptr %memberidx.i.i146, align 8
  %memberidx1.i.i147 = getelementptr inbounds %string, ptr %27, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i147, align 4
  %memberidx2.i.i148 = getelementptr inbounds %string, ptr %27, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i148, align 4
  %28 = load i64, ptr %memberidx.i, align 4
  %.not.i151 = icmp eq i64 %28, 7
  br i1 %.not.i151, label %ifend.i155, label %ifend12

ifend.i155:                                       ; preds = %ifend9
  %memberidx2.i153 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %29 = load ptr, ptr %memberidx2.i153, align 8
  %30 = tail call i64 @memcmp(ptr %29, ptr nonnull %26, i64 7)
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %common.ret, label %ifend12

ifend12:                                          ; preds = %ifend9, %ifend.i155
  %32 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %32, ptr noundef nonnull align 8 dereferenceable(6) @164, i64 6, i1 false)
  %33 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %33, align 8
  %memberidx.i.i157 = getelementptr inbounds %string, ptr %33, i64 0, i32 1
  store ptr %32, ptr %memberidx.i.i157, align 8
  %memberidx1.i.i158 = getelementptr inbounds %string, ptr %33, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i158, align 4
  %memberidx2.i.i159 = getelementptr inbounds %string, ptr %33, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i159, align 4
  %34 = load i64, ptr %memberidx.i, align 4
  %.not.i162 = icmp eq i64 %34, 6
  br i1 %.not.i162, label %ifend.i166, label %ifend15

ifend.i166:                                       ; preds = %ifend12
  %memberidx2.i164 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %35 = load ptr, ptr %memberidx2.i164, align 8
  %36 = tail call i64 @memcmp(ptr %35, ptr nonnull %32, i64 6)
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %common.ret, label %ifend15

ifend15:                                          ; preds = %ifend12, %ifend.i166
  %38 = tail call ptr @malloc(i32 64)
  store i64 6872318640199393119, ptr %38, align 8
  %39 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %39, align 8
  %memberidx.i.i168 = getelementptr inbounds %string, ptr %39, i64 0, i32 1
  store ptr %38, ptr %memberidx.i.i168, align 8
  %memberidx1.i.i169 = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i169, align 4
  %memberidx2.i.i170 = getelementptr inbounds %string, ptr %39, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i170, align 4
  %40 = load i64, ptr %memberidx.i, align 4
  %.not.i173 = icmp eq i64 %40, 8
  br i1 %.not.i173, label %ifend.i177, label %ifend18

ifend.i177:                                       ; preds = %ifend15
  %memberidx2.i175 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %41 = load ptr, ptr %memberidx2.i175, align 8
  %42 = tail call i64 @memcmp(ptr %41, ptr nonnull %38, i64 8)
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %common.ret, label %ifend18

ifend18:                                          ; preds = %ifend15, %ifend.i177
  %44 = tail call ptr @malloc(i32 64)
  store i64 6872318631895850847, ptr %44, align 8
  %45 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %45, align 8
  %memberidx.i.i179 = getelementptr inbounds %string, ptr %45, i64 0, i32 1
  store ptr %44, ptr %memberidx.i.i179, align 8
  %memberidx1.i.i180 = getelementptr inbounds %string, ptr %45, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i180, align 4
  %memberidx2.i.i181 = getelementptr inbounds %string, ptr %45, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i181, align 4
  %46 = load i64, ptr %memberidx.i, align 4
  %.not.i184 = icmp eq i64 %46, 8
  br i1 %.not.i184, label %ifend.i188, label %ifend21

ifend.i188:                                       ; preds = %ifend18
  %memberidx2.i186 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %47 = load ptr, ptr %memberidx2.i186, align 8
  %48 = tail call i64 @memcmp(ptr %47, ptr nonnull %44, i64 8)
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %common.ret, label %ifend21

ifend21:                                          ; preds = %ifend18, %ifend.i188
  %50 = tail call ptr @malloc(i32 64)
  store i64 6872318674845130591, ptr %50, align 8
  %51 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %51, align 8
  %memberidx.i.i190 = getelementptr inbounds %string, ptr %51, i64 0, i32 1
  store ptr %50, ptr %memberidx.i.i190, align 8
  %memberidx1.i.i191 = getelementptr inbounds %string, ptr %51, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i191, align 4
  %memberidx2.i.i192 = getelementptr inbounds %string, ptr %51, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i192, align 4
  %52 = load i64, ptr %memberidx.i, align 4
  %.not.i195 = icmp eq i64 %52, 8
  br i1 %.not.i195, label %ifend.i199, label %ifend24

ifend.i199:                                       ; preds = %ifend21
  %memberidx2.i197 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %53 = load ptr, ptr %memberidx2.i197, align 8
  %54 = tail call i64 @memcmp(ptr %53, ptr nonnull %50, i64 8)
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %common.ret, label %ifend24

ifend24:                                          ; preds = %ifend21, %ifend.i199
  %56 = tail call ptr @malloc(i32 64)
  store i64 6872318717592887135, ptr %56, align 8
  %57 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %57, align 8
  %memberidx.i.i201 = getelementptr inbounds %string, ptr %57, i64 0, i32 1
  store ptr %56, ptr %memberidx.i.i201, align 8
  %memberidx1.i.i202 = getelementptr inbounds %string, ptr %57, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i202, align 4
  %memberidx2.i.i203 = getelementptr inbounds %string, ptr %57, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i203, align 4
  %58 = load i64, ptr %memberidx.i, align 4
  %.not.i206 = icmp eq i64 %58, 8
  br i1 %.not.i206, label %ifend.i210, label %ifend27

ifend.i210:                                       ; preds = %ifend24
  %memberidx2.i208 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %59 = load ptr, ptr %memberidx2.i208, align 8
  %60 = tail call i64 @memcmp(ptr %59, ptr nonnull %56, i64 8)
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %common.ret, label %ifend27

ifend27:                                          ; preds = %ifend24, %ifend.i210
  %62 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %62, ptr noundef nonnull align 8 dereferenceable(7) @165, i64 7, i1 false)
  %63 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %63, align 8
  %memberidx.i.i212 = getelementptr inbounds %string, ptr %63, i64 0, i32 1
  store ptr %62, ptr %memberidx.i.i212, align 8
  %memberidx1.i.i213 = getelementptr inbounds %string, ptr %63, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i213, align 4
  %memberidx2.i.i214 = getelementptr inbounds %string, ptr %63, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i214, align 4
  %64 = load i64, ptr %memberidx.i, align 4
  %.not.i217 = icmp eq i64 %64, 7
  br i1 %.not.i217, label %ifend.i221, label %ifend30

ifend.i221:                                       ; preds = %ifend27
  %memberidx2.i219 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %65 = load ptr, ptr %memberidx2.i219, align 8
  %66 = tail call i64 @memcmp(ptr %65, ptr nonnull %62, i64 7)
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %common.ret, label %ifend30

ifend30:                                          ; preds = %ifend27, %ifend.i221
  %68 = tail call ptr @malloc(i32 64)
  store i64 6872318640367165279, ptr %68, align 8
  %69 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %69, align 8
  %memberidx.i.i223 = getelementptr inbounds %string, ptr %69, i64 0, i32 1
  store ptr %68, ptr %memberidx.i.i223, align 8
  %memberidx1.i.i224 = getelementptr inbounds %string, ptr %69, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i224, align 4
  %memberidx2.i.i225 = getelementptr inbounds %string, ptr %69, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i225, align 4
  %70 = load i64, ptr %memberidx.i, align 4
  %.not.i228 = icmp eq i64 %70, 8
  br i1 %.not.i228, label %ifend.i232, label %ifend33

ifend.i232:                                       ; preds = %ifend30
  %memberidx2.i230 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %71 = load ptr, ptr %memberidx2.i230, align 8
  %72 = tail call i64 @memcmp(ptr %71, ptr nonnull %68, i64 8)
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %common.ret, label %ifend33

ifend33:                                          ; preds = %ifend30, %ifend.i232
  %74 = tail call ptr @malloc(i32 64)
  store i64 6872318700514991967, ptr %74, align 8
  %75 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %75, align 8
  %memberidx.i.i234 = getelementptr inbounds %string, ptr %75, i64 0, i32 1
  store ptr %74, ptr %memberidx.i.i234, align 8
  %memberidx1.i.i235 = getelementptr inbounds %string, ptr %75, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i235, align 4
  %memberidx2.i.i236 = getelementptr inbounds %string, ptr %75, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i236, align 4
  %76 = load i64, ptr %memberidx.i, align 4
  %.not.i239 = icmp eq i64 %76, 8
  br i1 %.not.i239, label %ifend.i243, label %ifend36

ifend.i243:                                       ; preds = %ifend33
  %memberidx2.i241 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %77 = load ptr, ptr %memberidx2.i241, align 8
  %78 = tail call i64 @memcmp(ptr %77, ptr nonnull %74, i64 8)
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %common.ret, label %ifend36

ifend36:                                          ; preds = %ifend33, %ifend.i243
  %80 = tail call ptr @malloc(i32 88)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %80, ptr noundef nonnull align 8 dereferenceable(11) @166, i64 11, i1 false)
  %81 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %81, align 8
  %memberidx.i.i245 = getelementptr inbounds %string, ptr %81, i64 0, i32 1
  store ptr %80, ptr %memberidx.i.i245, align 8
  %memberidx1.i.i246 = getelementptr inbounds %string, ptr %81, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i246, align 4
  %memberidx2.i.i247 = getelementptr inbounds %string, ptr %81, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i247, align 4
  %82 = load i64, ptr %memberidx.i, align 4
  %.not.i250 = icmp eq i64 %82, 11
  br i1 %.not.i250, label %ifend.i254, label %ifend39

ifend.i254:                                       ; preds = %ifend36
  %memberidx2.i252 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %83 = load ptr, ptr %memberidx2.i252, align 8
  %84 = tail call i64 @memcmp(ptr %83, ptr nonnull %80, i64 11)
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %common.ret, label %ifend39

ifend39:                                          ; preds = %ifend36, %ifend.i254
  %86 = tail call ptr @malloc(i32 88)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %86, ptr noundef nonnull align 8 dereferenceable(11) @167, i64 11, i1 false)
  %87 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %87, align 8
  %memberidx.i.i256 = getelementptr inbounds %string, ptr %87, i64 0, i32 1
  store ptr %86, ptr %memberidx.i.i256, align 8
  %memberidx1.i.i257 = getelementptr inbounds %string, ptr %87, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i257, align 4
  %memberidx2.i.i258 = getelementptr inbounds %string, ptr %87, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i258, align 4
  %88 = load i64, ptr %memberidx.i, align 4
  %.not.i261 = icmp eq i64 %88, 11
  br i1 %.not.i261, label %ifend.i265, label %ifend42

ifend.i265:                                       ; preds = %ifend39
  %memberidx2.i263 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %89 = load ptr, ptr %memberidx2.i263, align 8
  %90 = tail call i64 @memcmp(ptr %89, ptr nonnull %86, i64 11)
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %common.ret, label %ifend42

ifend42:                                          ; preds = %ifend39, %ifend.i265
  %92 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %92, ptr noundef nonnull align 8 dereferenceable(6) @168, i64 6, i1 false)
  %93 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %93, align 8
  %memberidx.i.i267 = getelementptr inbounds %string, ptr %93, i64 0, i32 1
  store ptr %92, ptr %memberidx.i.i267, align 8
  %memberidx1.i.i268 = getelementptr inbounds %string, ptr %93, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i268, align 4
  %memberidx2.i.i269 = getelementptr inbounds %string, ptr %93, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i269, align 4
  %94 = load i64, ptr %memberidx.i, align 4
  %.not.i272 = icmp eq i64 %94, 6
  br i1 %.not.i272, label %ifend.i276, label %ifend45

ifend.i276:                                       ; preds = %ifend42
  %memberidx2.i274 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %95 = load ptr, ptr %memberidx2.i274, align 8
  %96 = tail call i64 @memcmp(ptr %95, ptr nonnull %92, i64 6)
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %common.ret, label %ifend45

ifend45:                                          ; preds = %ifend42, %ifend.i276
  %98 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %98, ptr noundef nonnull align 8 dereferenceable(6) @169, i64 6, i1 false)
  %99 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %99, align 8
  %memberidx.i.i278 = getelementptr inbounds %string, ptr %99, i64 0, i32 1
  store ptr %98, ptr %memberidx.i.i278, align 8
  %memberidx1.i.i279 = getelementptr inbounds %string, ptr %99, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i279, align 4
  %memberidx2.i.i280 = getelementptr inbounds %string, ptr %99, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i280, align 4
  %100 = load i64, ptr %memberidx.i, align 4
  %.not.i283 = icmp eq i64 %100, 6
  br i1 %.not.i283, label %ifend.i287, label %ifend48

ifend.i287:                                       ; preds = %ifend45
  %memberidx2.i285 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %101 = load ptr, ptr %memberidx2.i285, align 8
  %102 = tail call i64 @memcmp(ptr %101, ptr nonnull %98, i64 6)
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %common.ret, label %ifend48

ifend48:                                          ; preds = %ifend45, %ifend.i287
  %104 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %104, ptr noundef nonnull align 8 dereferenceable(7) @170, i64 7, i1 false)
  %105 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %105, align 8
  %memberidx.i.i289 = getelementptr inbounds %string, ptr %105, i64 0, i32 1
  store ptr %104, ptr %memberidx.i.i289, align 8
  %memberidx1.i.i290 = getelementptr inbounds %string, ptr %105, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i290, align 4
  %memberidx2.i.i291 = getelementptr inbounds %string, ptr %105, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i291, align 4
  %106 = load i64, ptr %memberidx.i, align 4
  %.not.i294 = icmp eq i64 %106, 7
  br i1 %.not.i294, label %ifend.i298, label %ifend51

ifend.i298:                                       ; preds = %ifend48
  %memberidx2.i296 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %107 = load ptr, ptr %memberidx2.i296, align 8
  %108 = tail call i64 @memcmp(ptr %107, ptr nonnull %104, i64 7)
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %common.ret, label %ifend51

ifend51:                                          ; preds = %ifend48, %ifend.i298
  %110 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %110, ptr noundef nonnull align 8 dereferenceable(7) @171, i64 7, i1 false)
  %111 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %111, align 8
  %memberidx.i.i300 = getelementptr inbounds %string, ptr %111, i64 0, i32 1
  store ptr %110, ptr %memberidx.i.i300, align 8
  %memberidx1.i.i301 = getelementptr inbounds %string, ptr %111, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i301, align 4
  %memberidx2.i.i302 = getelementptr inbounds %string, ptr %111, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i302, align 4
  %112 = load i64, ptr %memberidx.i, align 4
  %.not.i305 = icmp eq i64 %112, 7
  br i1 %.not.i305, label %ifend.i309, label %ifend54

ifend.i309:                                       ; preds = %ifend51
  %memberidx2.i307 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %113 = load ptr, ptr %memberidx2.i307, align 8
  %114 = tail call i64 @memcmp(ptr %113, ptr nonnull %110, i64 7)
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %common.ret, label %ifend54

ifend54:                                          ; preds = %ifend51, %ifend.i309
  %116 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %116, ptr noundef nonnull align 8 dereferenceable(6) @172, i64 6, i1 false)
  %117 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %117, align 8
  %memberidx.i.i311 = getelementptr inbounds %string, ptr %117, i64 0, i32 1
  store ptr %116, ptr %memberidx.i.i311, align 8
  %memberidx1.i.i312 = getelementptr inbounds %string, ptr %117, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i312, align 4
  %memberidx2.i.i313 = getelementptr inbounds %string, ptr %117, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i313, align 4
  %118 = load i64, ptr %memberidx.i, align 4
  %.not.i316 = icmp eq i64 %118, 6
  br i1 %.not.i316, label %ifend.i320, label %ifend57

ifend.i320:                                       ; preds = %ifend54
  %memberidx2.i318 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %119 = load ptr, ptr %memberidx2.i318, align 8
  %120 = tail call i64 @memcmp(ptr %119, ptr nonnull %116, i64 6)
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %common.ret, label %ifend57

ifend57:                                          ; preds = %ifend54, %ifend.i320
  %122 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %122, ptr noundef nonnull align 8 dereferenceable(6) @173, i64 6, i1 false)
  %123 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %123, align 8
  %memberidx.i.i322 = getelementptr inbounds %string, ptr %123, i64 0, i32 1
  store ptr %122, ptr %memberidx.i.i322, align 8
  %memberidx1.i.i323 = getelementptr inbounds %string, ptr %123, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i323, align 4
  %memberidx2.i.i324 = getelementptr inbounds %string, ptr %123, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i324, align 4
  %124 = load i64, ptr %memberidx.i, align 4
  %.not.i327 = icmp eq i64 %124, 6
  br i1 %.not.i327, label %ifend.i331, label %ifend60

ifend.i331:                                       ; preds = %ifend57
  %memberidx2.i329 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %125 = load ptr, ptr %memberidx2.i329, align 8
  %126 = tail call i64 @memcmp(ptr %125, ptr nonnull %122, i64 6)
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %common.ret, label %ifend60

ifend60:                                          ; preds = %ifend57, %ifend.i331
  %128 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %128, ptr noundef nonnull align 8 dereferenceable(6) @174, i64 6, i1 false)
  %129 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %129, align 8
  %memberidx.i.i333 = getelementptr inbounds %string, ptr %129, i64 0, i32 1
  store ptr %128, ptr %memberidx.i.i333, align 8
  %memberidx1.i.i334 = getelementptr inbounds %string, ptr %129, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i334, align 4
  %memberidx2.i.i335 = getelementptr inbounds %string, ptr %129, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i335, align 4
  %130 = load i64, ptr %memberidx.i, align 4
  %.not.i338 = icmp eq i64 %130, 6
  br i1 %.not.i338, label %ifend.i342, label %ifend63

ifend.i342:                                       ; preds = %ifend60
  %memberidx2.i340 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %131 = load ptr, ptr %memberidx2.i340, align 8
  %132 = tail call i64 @memcmp(ptr %131, ptr nonnull %128, i64 6)
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %common.ret, label %ifend63

ifend63:                                          ; preds = %ifend60, %ifend.i342
  %134 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %134, ptr noundef nonnull align 8 dereferenceable(6) @175, i64 6, i1 false)
  %135 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %135, align 8
  %memberidx.i.i344 = getelementptr inbounds %string, ptr %135, i64 0, i32 1
  store ptr %134, ptr %memberidx.i.i344, align 8
  %memberidx1.i.i345 = getelementptr inbounds %string, ptr %135, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i345, align 4
  %memberidx2.i.i346 = getelementptr inbounds %string, ptr %135, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i346, align 4
  %136 = load i64, ptr %memberidx.i, align 4
  %.not.i349 = icmp eq i64 %136, 6
  br i1 %.not.i349, label %ifend.i353, label %ifend66

ifend.i353:                                       ; preds = %ifend63
  %memberidx2.i351 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %137 = load ptr, ptr %memberidx2.i351, align 8
  %138 = tail call i64 @memcmp(ptr %137, ptr nonnull %134, i64 6)
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %common.ret, label %ifend66

ifend66:                                          ; preds = %ifend63, %ifend.i353
  %140 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %140, ptr noundef nonnull align 8 dereferenceable(6) @176, i64 6, i1 false)
  %141 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %141, align 8
  %memberidx.i.i355 = getelementptr inbounds %string, ptr %141, i64 0, i32 1
  store ptr %140, ptr %memberidx.i.i355, align 8
  %memberidx1.i.i356 = getelementptr inbounds %string, ptr %141, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i356, align 4
  %memberidx2.i.i357 = getelementptr inbounds %string, ptr %141, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i357, align 4
  %142 = load i64, ptr %memberidx.i, align 4
  %.not.i360 = icmp eq i64 %142, 6
  br i1 %.not.i360, label %ifend.i364, label %ifend69

ifend.i364:                                       ; preds = %ifend66
  %memberidx2.i362 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %143 = load ptr, ptr %memberidx2.i362, align 8
  %144 = tail call i64 @memcmp(ptr %143, ptr nonnull %140, i64 6)
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %common.ret, label %ifend69

ifend69:                                          ; preds = %ifend66, %ifend.i364
  %146 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %146, ptr noundef nonnull align 8 dereferenceable(6) @177, i64 6, i1 false)
  %147 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %147, align 8
  %memberidx.i.i366 = getelementptr inbounds %string, ptr %147, i64 0, i32 1
  store ptr %146, ptr %memberidx.i.i366, align 8
  %memberidx1.i.i367 = getelementptr inbounds %string, ptr %147, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i367, align 4
  %memberidx2.i.i368 = getelementptr inbounds %string, ptr %147, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i368, align 4
  %148 = load i64, ptr %memberidx.i, align 4
  %.not.i371 = icmp eq i64 %148, 6
  br i1 %.not.i371, label %ifend.i375, label %ifend72

ifend.i375:                                       ; preds = %ifend69
  %memberidx2.i373 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %149 = load ptr, ptr %memberidx2.i373, align 8
  %150 = tail call i64 @memcmp(ptr %149, ptr nonnull %146, i64 6)
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %common.ret, label %ifend72

ifend72:                                          ; preds = %ifend69, %ifend.i375
  %152 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %152, ptr noundef nonnull align 8 dereferenceable(7) @178, i64 7, i1 false)
  %153 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %153, align 8
  %memberidx.i.i377 = getelementptr inbounds %string, ptr %153, i64 0, i32 1
  store ptr %152, ptr %memberidx.i.i377, align 8
  %memberidx1.i.i378 = getelementptr inbounds %string, ptr %153, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i378, align 4
  %memberidx2.i.i379 = getelementptr inbounds %string, ptr %153, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i379, align 4
  %154 = load i64, ptr %memberidx.i, align 4
  %.not.i382 = icmp eq i64 %154, 7
  br i1 %.not.i382, label %ifend.i386, label %ifend75

ifend.i386:                                       ; preds = %ifend72
  %memberidx2.i384 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %155 = load ptr, ptr %memberidx2.i384, align 8
  %156 = tail call i64 @memcmp(ptr %155, ptr nonnull %152, i64 7)
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %common.ret, label %ifend75

ifend75:                                          ; preds = %ifend72, %ifend.i386
  %158 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %158, ptr noundef nonnull align 8 dereferenceable(7) @179, i64 7, i1 false)
  %159 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %159, align 8
  %memberidx.i.i388 = getelementptr inbounds %string, ptr %159, i64 0, i32 1
  store ptr %158, ptr %memberidx.i.i388, align 8
  %memberidx1.i.i389 = getelementptr inbounds %string, ptr %159, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i389, align 4
  %memberidx2.i.i390 = getelementptr inbounds %string, ptr %159, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i390, align 4
  %160 = load i64, ptr %memberidx.i, align 4
  %.not.i393 = icmp eq i64 %160, 7
  br i1 %.not.i393, label %ifend.i397, label %ifend78

ifend.i397:                                       ; preds = %ifend75
  %memberidx2.i395 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %161 = load ptr, ptr %memberidx2.i395, align 8
  %162 = tail call i64 @memcmp(ptr %161, ptr nonnull %158, i64 7)
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %common.ret, label %ifend78

ifend78:                                          ; preds = %ifend75, %ifend.i397
  %164 = tail call ptr @malloc(i32 64)
  store i64 6872318721989304159, ptr %164, align 8
  %165 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %165, align 8
  %memberidx.i.i399 = getelementptr inbounds %string, ptr %165, i64 0, i32 1
  store ptr %164, ptr %memberidx.i.i399, align 8
  %memberidx1.i.i400 = getelementptr inbounds %string, ptr %165, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i400, align 4
  %memberidx2.i.i401 = getelementptr inbounds %string, ptr %165, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i401, align 4
  %166 = load i64, ptr %memberidx.i, align 4
  %.not.i404 = icmp eq i64 %166, 8
  br i1 %.not.i404, label %ifend.i408, label %ifend81

ifend.i408:                                       ; preds = %ifend78
  %memberidx2.i406 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %167 = load ptr, ptr %memberidx2.i406, align 8
  %168 = tail call i64 @memcmp(ptr %167, ptr nonnull %164, i64 8)
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %common.ret, label %ifend81

ifend81:                                          ; preds = %ifend78, %ifend.i408
  %170 = tail call ptr @malloc(i32 64)
  store i64 6872318640384728927, ptr %170, align 8
  %171 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %171, align 8
  %memberidx.i.i410 = getelementptr inbounds %string, ptr %171, i64 0, i32 1
  store ptr %170, ptr %memberidx.i.i410, align 8
  %memberidx1.i.i411 = getelementptr inbounds %string, ptr %171, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i411, align 4
  %memberidx2.i.i412 = getelementptr inbounds %string, ptr %171, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i412, align 4
  %172 = load i64, ptr %memberidx.i, align 4
  %.not.i415 = icmp eq i64 %172, 8
  br i1 %.not.i415, label %ifend.i419, label %common.ret

ifend.i419:                                       ; preds = %ifend81
  %memberidx2.i417 = getelementptr inbounds %string, ptr %0, i64 0, i32 1
  %173 = load ptr, ptr %memberidx2.i417, align 8
  %174 = tail call i64 @memcmp(ptr %173, ptr nonnull %170, i64 8)
  %175 = icmp eq i64 %174, 0
  br label %common.ret
}

define internal fastcc noalias ptr @bin_op_to_op_overload_name(i64 %0) unnamed_addr {
  switch i64 %0, label %common.ret [
    i64 1, label %if.entry
    i64 2, label %if.entry1
    i64 3, label %if.entry4
    i64 4, label %if.entry7
    i64 5, label %if.entry10
    i64 6, label %if.entry13
    i64 20, label %if.entry16
    i64 21, label %if.entry19
    i64 22, label %if.entry22
    i64 23, label %if.entry25
    i64 24, label %if.entry28
    i64 25, label %if.entry31
    i64 7, label %if.entry34
    i64 8, label %if.entry37
    i64 9, label %if.entry40
    i64 10, label %if.entry43
    i64 11, label %if.entry46
    i64 12, label %if.entry49
    i64 13, label %if.entry52
    i64 14, label %if.entry55
    i64 29, label %if.entry58
    i64 30, label %if.entry61
    i64 15, label %if.entry64
    i64 16, label %if.entry67
    i64 17, label %if.entry70
    i64 26, label %if.entry73
    i64 28, label %if.entry76
    i64 18, label %if.entry79
  ]

common.ret.sink.split:                            ; preds = %if.entry, %if.entry1, %if.entry4, %if.entry7, %if.entry10, %if.entry13, %if.entry16, %if.entry19, %if.entry22, %if.entry25, %if.entry28, %if.entry31, %if.entry34, %if.entry37, %if.entry40, %if.entry43, %if.entry46, %if.entry49, %if.entry52, %if.entry55, %if.entry58, %if.entry61, %if.entry64, %if.entry67, %if.entry70, %if.entry73, %if.entry76, %if.entry79
  %.sink193 = phi ptr [ %30, %if.entry79 ], [ %29, %if.entry76 ], [ %28, %if.entry73 ], [ %27, %if.entry70 ], [ %26, %if.entry67 ], [ %25, %if.entry64 ], [ %24, %if.entry61 ], [ %23, %if.entry58 ], [ %22, %if.entry55 ], [ %21, %if.entry52 ], [ %20, %if.entry49 ], [ %19, %if.entry46 ], [ %18, %if.entry43 ], [ %17, %if.entry40 ], [ %16, %if.entry37 ], [ %15, %if.entry34 ], [ %14, %if.entry31 ], [ %13, %if.entry28 ], [ %12, %if.entry25 ], [ %11, %if.entry22 ], [ %10, %if.entry19 ], [ %9, %if.entry16 ], [ %8, %if.entry13 ], [ %7, %if.entry10 ], [ %6, %if.entry7 ], [ %5, %if.entry4 ], [ %4, %if.entry1 ], [ %3, %if.entry ]
  %.sink191 = phi i64 [ 6, %if.entry79 ], [ 8, %if.entry76 ], [ 8, %if.entry73 ], [ 7, %if.entry70 ], [ 7, %if.entry67 ], [ 6, %if.entry64 ], [ 7, %if.entry61 ], [ 7, %if.entry58 ], [ 6, %if.entry55 ], [ 6, %if.entry52 ], [ 6, %if.entry49 ], [ 6, %if.entry46 ], [ 6, %if.entry43 ], [ 6, %if.entry40 ], [ 6, %if.entry37 ], [ 6, %if.entry34 ], [ 8, %if.entry31 ], [ 8, %if.entry28 ], [ 8, %if.entry25 ], [ 8, %if.entry22 ], [ 8, %if.entry19 ], [ 8, %if.entry16 ], [ 7, %if.entry13 ], [ 7, %if.entry10 ], [ 7, %if.entry7 ], [ 7, %if.entry4 ], [ 7, %if.entry1 ], [ 7, %if.entry ]
  %2 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %2, align 8
  %memberidx.i.i187 = getelementptr inbounds %string, ptr %2, i64 0, i32 1
  store ptr %.sink193, ptr %memberidx.i.i187, align 8
  %memberidx1.i.i188 = getelementptr inbounds %string, ptr %2, i64 0, i32 2
  store i64 %.sink191, ptr %memberidx1.i.i188, align 4
  %memberidx2.i.i189 = getelementptr inbounds %string, ptr %2, i64 0, i32 3
  store i64 %.sink191, ptr %memberidx2.i.i189, align 4
  br label %common.ret

common.ret:                                       ; preds = %common.ret.sink.split, %1
  %common.ret.op = phi ptr [ null, %1 ], [ %2, %common.ret.sink.split ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %1
  %3 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %3, ptr noundef nonnull align 8 dereferenceable(7) @160, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry1:                                        ; preds = %1
  %4 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %4, ptr noundef nonnull align 8 dereferenceable(7) @161, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry4:                                        ; preds = %1
  %5 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %5, ptr noundef nonnull align 8 dereferenceable(7) @162, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry7:                                        ; preds = %1
  %6 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %6, ptr noundef nonnull align 8 dereferenceable(7) @163, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry10:                                       ; preds = %1
  %7 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %7, ptr noundef nonnull align 8 dereferenceable(7) @179, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry13:                                       ; preds = %1
  %8 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %8, ptr noundef nonnull align 8 dereferenceable(7) @178, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry16:                                       ; preds = %1
  %9 = tail call ptr @malloc(i32 64)
  store i64 6872318640199393119, ptr %9, align 8
  br label %common.ret.sink.split

if.entry19:                                       ; preds = %1
  %10 = tail call ptr @malloc(i32 64)
  store i64 6872318631895850847, ptr %10, align 8
  br label %common.ret.sink.split

if.entry22:                                       ; preds = %1
  %11 = tail call ptr @malloc(i32 64)
  store i64 6872318674845130591, ptr %11, align 8
  br label %common.ret.sink.split

if.entry25:                                       ; preds = %1
  %12 = tail call ptr @malloc(i32 64)
  store i64 6872318717592887135, ptr %12, align 8
  br label %common.ret.sink.split

if.entry28:                                       ; preds = %1
  %13 = tail call ptr @malloc(i32 64)
  store i64 6872318640384728927, ptr %13, align 8
  br label %common.ret.sink.split

if.entry31:                                       ; preds = %1
  %14 = tail call ptr @malloc(i32 64)
  store i64 6872318721989304159, ptr %14, align 8
  br label %common.ret.sink.split

if.entry34:                                       ; preds = %1
  %15 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %15, ptr noundef nonnull align 8 dereferenceable(6) @211, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry37:                                       ; preds = %1
  %16 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %16, ptr noundef nonnull align 8 dereferenceable(6) @177, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry40:                                       ; preds = %1
  %17 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %17, ptr noundef nonnull align 8 dereferenceable(6) @173, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry43:                                       ; preds = %1
  %18 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %18, ptr noundef nonnull align 8 dereferenceable(6) @176, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry46:                                       ; preds = %1
  %19 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %19, ptr noundef nonnull align 8 dereferenceable(6) @159, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry49:                                       ; preds = %1
  %20 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %20, ptr noundef nonnull align 8 dereferenceable(6) @175, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry52:                                       ; preds = %1
  %21 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %21, ptr noundef nonnull align 8 dereferenceable(6) @168, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry55:                                       ; preds = %1
  %22 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %22, ptr noundef nonnull align 8 dereferenceable(6) @169, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry58:                                       ; preds = %1
  %23 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %23, ptr noundef nonnull align 8 dereferenceable(7) @170, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry61:                                       ; preds = %1
  %24 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %24, ptr noundef nonnull align 8 dereferenceable(7) @171, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry64:                                       ; preds = %1
  %25 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %25, ptr noundef nonnull align 8 dereferenceable(6) @164, i64 6, i1 false)
  br label %common.ret.sink.split

if.entry67:                                       ; preds = %1
  %26 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %26, ptr noundef nonnull align 8 dereferenceable(7) @212, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry70:                                       ; preds = %1
  %27 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %27, ptr noundef nonnull align 8 dereferenceable(7) @213, i64 7, i1 false)
  br label %common.ret.sink.split

if.entry73:                                       ; preds = %1
  %28 = tail call ptr @malloc(i32 64)
  store i64 6872318640367165279, ptr %28, align 8
  br label %common.ret.sink.split

if.entry76:                                       ; preds = %1
  %29 = tail call ptr @malloc(i32 64)
  store i64 6872318700514991967, ptr %29, align 8
  br label %common.ret.sink.split

if.entry79:                                       ; preds = %1
  %30 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %30, ptr noundef nonnull align 8 dereferenceable(6) @172, i64 6, i1 false)
  br label %common.ret.sink.split
}

define internal fastcc noalias ptr @dump_bin_op(i64 %0) unnamed_addr {
  switch i64 %0, label %ifend54 [
    i64 1, label %if.entry
    i64 2, label %if.entry1
    i64 3, label %if.entry4
    i64 4, label %if.entry7
    i64 5, label %if.entry10
    i64 6, label %if.entry13
    i64 7, label %if.entry16
    i64 8, label %if.entry19
    i64 9, label %if.entry22
    i64 10, label %if.entry25
    i64 11, label %if.entry28
    i64 12, label %if.entry31
    i64 13, label %if.entry34
    i64 14, label %if.entry37
    i64 15, label %if.entry40
    i64 16, label %if.entry43
    i64 17, label %if.entry46
    i64 18, label %if.entry49
    i64 19, label %if.entry52
  ]

common.ret:                                       ; preds = %ifend54, %if.entry52, %if.entry49, %if.entry46, %if.entry43, %if.entry40, %if.entry37, %if.entry34, %if.entry31, %if.entry28, %if.entry25, %if.entry22, %if.entry19, %if.entry16, %if.entry13, %if.entry10, %if.entry7, %if.entry4, %if.entry1, %if.entry
  %.sink133 = phi ptr [ %22, %ifend54 ], [ %21, %if.entry52 ], [ %20, %if.entry49 ], [ %19, %if.entry46 ], [ %18, %if.entry43 ], [ %17, %if.entry40 ], [ %16, %if.entry37 ], [ %15, %if.entry34 ], [ %14, %if.entry31 ], [ %13, %if.entry28 ], [ %12, %if.entry25 ], [ %11, %if.entry22 ], [ %10, %if.entry19 ], [ %9, %if.entry16 ], [ %8, %if.entry13 ], [ %7, %if.entry10 ], [ %6, %if.entry7 ], [ %5, %if.entry4 ], [ %4, %if.entry1 ], [ %3, %if.entry ]
  %.sink131 = phi i64 [ 2, %ifend54 ], [ 1, %if.entry52 ], [ 2, %if.entry49 ], [ 3, %if.entry46 ], [ 3, %if.entry43 ], [ 2, %if.entry40 ], [ 2, %if.entry37 ], [ 2, %if.entry34 ], [ 2, %if.entry31 ], [ 2, %if.entry28 ], [ 2, %if.entry25 ], [ 1, %if.entry22 ], [ 2, %if.entry19 ], [ 1, %if.entry16 ], [ 1, %if.entry13 ], [ 1, %if.entry10 ], [ 1, %if.entry7 ], [ 1, %if.entry4 ], [ 1, %if.entry1 ], [ 1, %if.entry ]
  %2 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %2, align 8
  %memberidx.i.i127 = getelementptr inbounds %string, ptr %2, i64 0, i32 1
  store ptr %.sink133, ptr %memberidx.i.i127, align 8
  %memberidx1.i.i128 = getelementptr inbounds %string, ptr %2, i64 0, i32 2
  store i64 %.sink131, ptr %memberidx1.i.i128, align 4
  %memberidx2.i.i129 = getelementptr inbounds %string, ptr %2, i64 0, i32 3
  store i64 %.sink131, ptr %memberidx2.i.i129, align 4
  ret ptr %2

if.entry:                                         ; preds = %1
  %3 = tail call ptr @malloc(i32 8)
  store i8 43, ptr %3, align 8
  br label %common.ret

if.entry1:                                        ; preds = %1
  %4 = tail call ptr @malloc(i32 8)
  store i8 45, ptr %4, align 8
  br label %common.ret

if.entry4:                                        ; preds = %1
  %5 = tail call ptr @malloc(i32 8)
  store i8 42, ptr %5, align 8
  br label %common.ret

if.entry7:                                        ; preds = %1
  %6 = tail call ptr @malloc(i32 8)
  store i8 47, ptr %6, align 8
  br label %common.ret

if.entry10:                                       ; preds = %1
  %7 = tail call ptr @malloc(i32 8)
  store i8 37, ptr %7, align 8
  br label %common.ret

if.entry13:                                       ; preds = %1
  %8 = tail call ptr @malloc(i32 8)
  store i8 94, ptr %8, align 8
  br label %common.ret

if.entry16:                                       ; preds = %1
  %9 = tail call ptr @malloc(i32 8)
  store i8 62, ptr %9, align 8
  br label %common.ret

if.entry19:                                       ; preds = %1
  %10 = tail call ptr @malloc(i32 16)
  store i16 15678, ptr %10, align 8
  br label %common.ret

if.entry22:                                       ; preds = %1
  %11 = tail call ptr @malloc(i32 8)
  store i8 60, ptr %11, align 8
  br label %common.ret

if.entry25:                                       ; preds = %1
  %12 = tail call ptr @malloc(i32 16)
  store i16 15676, ptr %12, align 8
  br label %common.ret

if.entry28:                                       ; preds = %1
  %13 = tail call ptr @malloc(i32 16)
  store i16 15677, ptr %13, align 8
  br label %common.ret

if.entry31:                                       ; preds = %1
  %14 = tail call ptr @malloc(i32 16)
  store i16 15649, ptr %14, align 8
  br label %common.ret

if.entry34:                                       ; preds = %1
  %15 = tail call ptr @malloc(i32 16)
  store i16 15420, ptr %15, align 8
  br label %common.ret

if.entry37:                                       ; preds = %1
  %16 = tail call ptr @malloc(i32 16)
  store i16 15934, ptr %16, align 8
  br label %common.ret

if.entry40:                                       ; preds = %1
  %17 = tail call ptr @malloc(i32 16)
  store i16 29295, ptr %17, align 8
  br label %common.ret

if.entry43:                                       ; preds = %1
  %18 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %18, ptr noundef nonnull align 8 dereferenceable(3) @29, i64 3, i1 false)
  br label %common.ret

if.entry46:                                       ; preds = %1
  %19 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %19, ptr noundef nonnull align 8 dereferenceable(3) @30, i64 3, i1 false)
  br label %common.ret

if.entry49:                                       ; preds = %1
  %20 = tail call ptr @malloc(i32 16)
  store i16 28265, ptr %20, align 8
  br label %common.ret

if.entry52:                                       ; preds = %1
  %21 = tail call ptr @malloc(i32 8)
  store i8 61, ptr %21, align 8
  br label %common.ret

ifend54:                                          ; preds = %1
  %22 = tail call ptr @malloc(i32 16)
  store i16 11822, ptr %22, align 8
  br label %common.ret
}

define internal fastcc noalias ptr @dump_unary_op(i64 %0) unnamed_addr {
  switch i64 %0, label %ifend15 [
    i64 1, label %if.entry
    i64 2, label %if.entry1
    i64 3, label %if.entry4
    i64 4, label %if.entry7
    i64 5, label %if.entry10
    i64 6, label %if.entry13
  ]

common.ret:                                       ; preds = %ifend15, %if.entry13, %if.entry10, %if.entry7, %if.entry4, %if.entry1, %if.entry
  %.sink42 = phi ptr [ %9, %ifend15 ], [ %8, %if.entry13 ], [ %7, %if.entry10 ], [ %6, %if.entry7 ], [ %5, %if.entry4 ], [ %4, %if.entry1 ], [ %3, %if.entry ]
  %.sink40 = phi i64 [ 1, %ifend15 ], [ 1, %if.entry13 ], [ 1, %if.entry10 ], [ 8, %if.entry7 ], [ 8, %if.entry4 ], [ 7, %if.entry1 ], [ 7, %if.entry ]
  %2 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %2, align 8
  %memberidx.i.i36 = getelementptr inbounds %string, ptr %2, i64 0, i32 1
  store ptr %.sink42, ptr %memberidx.i.i36, align 8
  %memberidx1.i.i37 = getelementptr inbounds %string, ptr %2, i64 0, i32 2
  store i64 %.sink40, ptr %memberidx1.i.i37, align 4
  %memberidx2.i.i38 = getelementptr inbounds %string, ptr %2, i64 0, i32 3
  store i64 %.sink40, ptr %memberidx2.i.i38, align 4
  ret ptr %2

if.entry:                                         ; preds = %1
  %3 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %3, ptr noundef nonnull align 8 dereferenceable(7) @220, i64 7, i1 false)
  br label %common.ret

if.entry1:                                        ; preds = %1
  %4 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %4, ptr noundef nonnull align 8 dereferenceable(7) @221, i64 7, i1 false)
  br label %common.ret

if.entry4:                                        ; preds = %1
  %5 = tail call ptr @malloc(i32 64)
  store i64 3110625547759087656, ptr %5, align 8
  br label %common.ret

if.entry7:                                        ; preds = %1
  %6 = tail call ptr @malloc(i32 64)
  store i64 3255303685788364840, ptr %6, align 8
  br label %common.ret

if.entry10:                                       ; preds = %1
  %7 = tail call ptr @malloc(i32 8)
  store i8 45, ptr %7, align 8
  br label %common.ret

if.entry13:                                       ; preds = %1
  %8 = tail call ptr @malloc(i32 8)
  store i8 33, ptr %8, align 8
  br label %common.ret

ifend15:                                          ; preds = %1
  %9 = tail call ptr @malloc(i32 8)
  store i8 38, ptr %9, align 8
  br label %common.ret
}

define internal fastcc void @GeneratedModule_print_errors(ptr nocapture readonly %0) unnamed_addr {
  %2 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %memberidx, align 8
  %4 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %3)
  %5 = trunc i64 %4 to i32
  %mallocsize.i = shl i32 %5, 3
  %6 = tail call ptr @malloc(i32 %mallocsize.i)
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %3, i64 %4, i1 false)
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %7, align 8
  %memberidx.i.i5 = getelementptr inbounds %string, ptr %7, i64 0, i32 1
  store ptr %6, ptr %memberidx.i.i5, align 8
  %memberidx1.i.i6 = getelementptr inbounds %string, ptr %7, i64 0, i32 2
  store i64 %4, ptr %memberidx1.i.i6, align 4
  %memberidx2.i.i7 = getelementptr inbounds %string, ptr %7, i64 0, i32 3
  store i64 %4, ptr %memberidx2.i.i7, align 4
  %8 = load ptr, ptr %memberidx, align 8
  tail call void @LLVMDisposeMessage(ptr %8)
  %9 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %10 = tail call ptr %9(ptr nonnull %7)
  %11 = alloca ptr, align 8
  %12 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %11, ptr nonnull @271, ptr %10)
  %13 = load ptr, ptr %11, align 8
  %14 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %14, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %14, i64 0, i32 1
  store ptr %13, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %14, i64 0, i32 2
  store i64 %12, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %14, i64 0, i32 3
  store i64 %12, ptr %memberidx2.i, align 4
  tail call void @free(ptr %10)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2)
  %15 = load ptr, ptr %14, align 8
  %memberidx.i4 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %15, i64 0, i32 5
  %16 = load ptr, ptr %memberidx.i4, align 8
  %17 = call ptr %16(ptr nonnull %14)
  %18 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %2, ptr nonnull @270, ptr %17)
  %19 = load ptr, ptr %2, align 8
  %20 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %20, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 1
  store ptr %19, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 2
  store i64 %18, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 3
  store i64 %18, ptr %memberidx2.i.i, align 4
  call void @free(ptr %17)
  %21 = load ptr, ptr %20, align 8
  %memberidx.i.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %21, i64 0, i32 3
  %22 = load ptr, ptr %memberidx.i.i.i, align 8
  %23 = call ptr %22(ptr nonnull %20)
  %24 = load i64, ptr %memberidx1.i.i, align 4
  call void @write(i64 1, ptr %23, i64 %24)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2)
  ret void
}

define internal i64 @GeneratedModule_exec(ptr %0) {
  tail call void @LLVMLinkInMCJIT()
  %engine = alloca ptr, align 8
  store ptr null, ptr %engine, align 8
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 1
  %2 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 2
  %3 = call i1 @LLVMCreateExecutionEngineForModule(ptr nonnull %engine, ptr %2, ptr nonnull %memberidx1)
  br i1 %3, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  call fastcc void @GeneratedModule_print_errors(ptr nonnull %0)
  br label %ifend

ifend:                                            ; preds = %1, %if.entry
  %4 = load ptr, ptr %memberidx, align 8
  %5 = call ptr @LLVMGetNamedFunction(ptr %4, ptr nonnull @272)
  %6 = icmp eq ptr %5, null
  br i1 %6, label %if.entry4, label %ifend6

common.ret:                                       ; preds = %if.entry12, %ifend6, %if.entry4
  %common.ret.op = phi i64 [ 1, %if.entry4 ], [ %13, %ifend6 ], [ %13, %if.entry12 ]
  %.sink = load ptr, ptr %engine, align 8
  call void @LLVMDisposeExecutionEngine(ptr %.sink)
  ret i64 %common.ret.op

if.entry4:                                        ; preds = %ifend
  %7 = call ptr @malloc(i32 384)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %7, ptr noundef nonnull align 8 dereferenceable(48) @273, i64 48, i1 false)
  %8 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %8, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 1
  store ptr %7, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 2
  store i64 48, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 3
  store i64 48, ptr %memberidx2.i.i, align 4
  %9 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 3), align 8
  %10 = call ptr %9(ptr nonnull %8)
  %11 = load i64, ptr %memberidx1.i.i, align 4
  call void @write(i64 1, ptr %10, i64 %11)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  br label %common.ret

ifend6:                                           ; preds = %ifend
  %12 = load ptr, ptr %engine, align 8
  %13 = call i64 @LLVMRunFunctionAsMain(ptr %12, ptr nonnull %5, i64 0, ptr null, ptr null)
  %14 = load ptr, ptr %engine, align 8
  %15 = load ptr, ptr %memberidx, align 8
  %16 = call i1 @LLVMRemoveModule(ptr %14, ptr %15, ptr nonnull %memberidx, ptr nonnull %memberidx1)
  br i1 %16, label %if.entry12, label %common.ret

if.entry12:                                       ; preds = %ifend6
  call fastcc void @GeneratedModule_print_errors(ptr nonnull %0)
  br label %common.ret
}

define internal fastcc ptr @GeneratedModule_create_target_machine(ptr %0, ptr %1) unnamed_addr {
  %3 = tail call ptr @malloc(i32 0)
  %4 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %4, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 1
  store ptr %3, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  %memberidx.i = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(16) %memberidx1.i.i, i8 0, i64 16, i1 false)
  %5 = load i64, ptr %memberidx.i, align 4
  %.not.i = icmp eq i64 %5, 0
  br i1 %.not.i, label %ifend.i, label %false_block

ifend.i:                                          ; preds = %2
  %memberidx2.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  %6 = load ptr, ptr %memberidx2.i, align 8
  %7 = tail call i64 @memcmp(ptr %6, ptr %3, i64 0)
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %true_block, label %false_block

true_block:                                       ; preds = %ifend.i
  %9 = tail call ptr @LLVMGetDefaultTargetTriple()
  br label %end

false_block:                                      ; preds = %2, %ifend.i
  %10 = load ptr, ptr %1, align 8
  %memberidx = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %10, i64 0, i32 5
  %11 = load ptr, ptr %memberidx, align 8
  %12 = tail call ptr %11(ptr nonnull %1)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %9, %true_block ], [ %12, %false_block ]
  %target = alloca ptr, align 8
  store ptr null, ptr %target, align 8
  %memberidx1 = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 2
  %13 = call i1 @LLVMGetTargetFromTriple(ptr %ternary, ptr nonnull %target, ptr nonnull %memberidx1)
  br i1 %13, label %if.entry, label %ifend

if.entry:                                         ; preds = %end
  call fastcc void @GeneratedModule_print_errors(ptr %0)
  br label %ifend

ifend:                                            ; preds = %end, %if.entry
  %14 = load ptr, ptr %target, align 8
  %15 = call ptr @LLVMGetHostCPUFeatures()
  %16 = call ptr @LLVMCreateTargetMachine(ptr %14, ptr %ternary, ptr nonnull @274, ptr %15, i64 3, i64 0, i64 0)
  ret ptr %16
}

define internal void @GeneratedModule_write_object(ptr %0, ptr %1, ptr %2) {
  %4 = tail call fastcc ptr @GeneratedModule_create_target_machine(ptr %0, ptr %2)
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = tail call ptr @LLVMCreateTargetDataLayout(ptr %4)
  tail call void @LLVMSetDataLayout(ptr %5, ptr %6)
  %7 = load ptr, ptr %memberidx, align 8
  %8 = tail call ptr @LLVMGetTargetMachineTriple(ptr %4)
  tail call void @LLVMSetTarget(ptr %7, ptr %8)
  %9 = load ptr, ptr %memberidx, align 8
  %10 = load ptr, ptr %1, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %10, i64 0, i32 5
  %11 = load ptr, ptr %memberidx3, align 8
  %12 = tail call ptr %11(ptr nonnull %1)
  %memberidx4 = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 2
  %13 = tail call i1 @LLVMTargetMachineEmitToFile(ptr %4, ptr %9, ptr %12, i64 1, ptr nonnull %memberidx4)
  br i1 %13, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  tail call fastcc void @GeneratedModule_print_errors(ptr nonnull %0)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  tail call void @LLVMDisposeTargetMachine(ptr %4)
  ret void
}

define internal void @GeneratedModule_run_passes(ptr nocapture readonly %0, i64 %1) {
  %3 = tail call ptr @LLVMCreatePassManager()
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call ptr @LLVMCreateFunctionPassManagerForModule(ptr %4)
  %6 = tail call ptr @LLVMPassManagerBuilderCreate()
  tail call void @LLVMAddInternalizePass(ptr %3, i64 1)
  tail call void @LLVMAddGlobalDCEPass(ptr %3)
  tail call void @LLVMAddGlobalOptimizerPass(ptr %3)
  tail call void @LLVMAddInstructionCombiningPass(ptr %3)
  tail call void @LLVMAddScalarReplAggregatesPass(ptr %3)
  tail call void @LLVMAddFunctionInliningPass(ptr %3)
  tail call void @LLVMPassManagerBuilderSetOptLevel(ptr %6, i64 %1)
  tail call void @LLVMPassManagerBuilderUseInlinerWithThreshold(ptr %6, i64 255)
  tail call void @LLVMPassManagerBuilderPopulateFunctionPassManager(ptr %6, ptr %5)
  %7 = load ptr, ptr %memberidx, align 8
  %8 = tail call ptr @LLVMGetFirstFunction(ptr %7)
  %.not = icmp eq ptr %8, null
  br i1 %.not, label %while.end, label %while.entry

while.entry:                                      ; preds = %2, %while.entry
  %func.0 = phi ptr [ %10, %while.entry ], [ %8, %2 ]
  %9 = tail call i1 @LLVMRunFunctionPassManager(ptr %5, ptr nonnull %func.0)
  %10 = tail call ptr @LLVMGetNextFunction(ptr nonnull %func.0)
  %.not22 = icmp eq ptr %10, null
  br i1 %.not22, label %while.end, label %while.entry

while.end:                                        ; preds = %while.entry, %2
  tail call void @LLVMPassManagerBuilderPopulateModulePassManager(ptr %6, ptr %3)
  %11 = load ptr, ptr %memberidx, align 8
  %12 = tail call i1 @LLVMRunPassManager(ptr %3, ptr %11)
  tail call void @LLVMDisposePassManager(ptr %5)
  tail call void @LLVMPassManagerBuilderDispose(ptr %6)
  tail call void @LLVMDisposePassManager(ptr %3)
  ret void
}

define internal void @GeneratedModule_print(ptr %0) {
  %memberidx = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 1
  %2 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %GeneratedModule, ptr %0, i64 0, i32 2
  %3 = tail call i1 @LLVMPrintModuleToFile(ptr %2, ptr nonnull @275, ptr nonnull %memberidx1)
  br i1 %3, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  tail call fastcc void @GeneratedModule_print_errors(ptr nonnull %0)
  br label %ifend

ifend:                                            ; preds = %1, %if.entry
  ret void
}

define internal void @GeneratedModule_llvm_shutdown(ptr nocapture readnone %0) {
  tail call void @LLVMShutdown()
  ret void
}

declare i1 @LLVMVerifyModule(ptr, i64, ptr) local_unnamed_addr

declare void @LLVM_InitializeAllTargetInfos() local_unnamed_addr

declare void @LLVM_InitializeAllTargets() local_unnamed_addr

declare void @LLVM_InitializeAllTargetMCs() local_unnamed_addr

declare void @LLVM_InitializeAllAsmParsers() local_unnamed_addr

declare void @LLVM_InitializeAllAsmPrinters() local_unnamed_addr

declare void @LLVMDisposeMessage(ptr) local_unnamed_addr

declare void @exit(i64) local_unnamed_addr

declare ptr @LLVMCreatePassManager() local_unnamed_addr

declare ptr @LLVMCreateFunctionPassManagerForModule(ptr) local_unnamed_addr

declare ptr @LLVMPassManagerBuilderCreate() local_unnamed_addr

declare void @LLVMAddInternalizePass(ptr, i64) local_unnamed_addr

declare void @LLVMAddGlobalDCEPass(ptr) local_unnamed_addr

declare void @LLVMAddGlobalOptimizerPass(ptr) local_unnamed_addr

declare void @LLVMAddInstructionCombiningPass(ptr) local_unnamed_addr

declare void @LLVMAddScalarReplAggregatesPass(ptr) local_unnamed_addr

declare void @LLVMAddFunctionInliningPass(ptr) local_unnamed_addr

declare void @LLVMPassManagerBuilderSetOptLevel(ptr, i64) local_unnamed_addr

declare void @LLVMPassManagerBuilderUseInlinerWithThreshold(ptr, i64) local_unnamed_addr

declare void @LLVMPassManagerBuilderPopulateFunctionPassManager(ptr, ptr) local_unnamed_addr

declare ptr @LLVMGetFirstFunction(ptr) local_unnamed_addr

declare i1 @LLVMRunFunctionPassManager(ptr, ptr) local_unnamed_addr

declare ptr @LLVMGetNextFunction(ptr) local_unnamed_addr

declare void @LLVMPassManagerBuilderPopulateModulePassManager(ptr, ptr) local_unnamed_addr

declare i1 @LLVMRunPassManager(ptr, ptr) local_unnamed_addr

declare void @LLVMDisposePassManager(ptr) local_unnamed_addr

declare void @LLVMPassManagerBuilderDispose(ptr) local_unnamed_addr

declare void @LLVMLinkInMCJIT() local_unnamed_addr

declare i1 @LLVMCreateExecutionEngineForModule(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMGetNamedFunction(ptr, ptr) local_unnamed_addr

declare void @LLVMDisposeExecutionEngine(ptr) local_unnamed_addr

declare i64 @LLVMRunFunctionAsMain(ptr, ptr, i64, ptr, ptr) local_unnamed_addr

declare i1 @LLVMRemoveModule(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMGetDefaultTargetTriple() local_unnamed_addr

declare i1 @LLVMGetTargetFromTriple(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMCreateTargetMachine(ptr, ptr, ptr, ptr, i64, i64, i64) local_unnamed_addr

declare ptr @LLVMGetHostCPUFeatures() local_unnamed_addr

declare void @LLVMSetDataLayout(ptr, ptr) local_unnamed_addr

declare ptr @LLVMCreateTargetDataLayout(ptr) local_unnamed_addr

declare void @LLVMSetTarget(ptr, ptr) local_unnamed_addr

declare ptr @LLVMGetTargetMachineTriple(ptr) local_unnamed_addr

declare i1 @LLVMTargetMachineEmitToFile(ptr, ptr, ptr, i64, ptr) local_unnamed_addr

declare void @LLVMDisposeTargetMachine(ptr) local_unnamed_addr

declare i1 @LLVMPrintModuleToFile(ptr, ptr, ptr) local_unnamed_addr

declare void @LLVMShutdown() local_unnamed_addr

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_LLVMValueRef__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_LLVMValueRef_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_LLVMValueRef____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_LLVMValueRef_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

define internal fastcc ptr @CodeGen_store_expr_to_mem(ptr nocapture %0, ptr %1, ptr %2, ptr %3) unnamed_addr {
  %memberidx = getelementptr inbounds %Expression, ptr %3, i64 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = icmp ne i64 %5, 6
  %memberidx1 = getelementptr inbounds %Expression, ptr %3, i64 0, i32 1
  %7 = load i1, ptr %memberidx1, align 1
  %8 = or i1 %7, %6
  br i1 %8, label %else, label %if.entry

if.entry:                                         ; preds = %4
  %memberidx2 = getelementptr inbounds %Expression, ptr %3, i64 0, i32 3
  %9 = load ptr, ptr %memberidx2, align 8
  %10 = load i64, ptr %9, align 4
  %.not = icmp eq i64 %10, 20
  br i1 %.not, label %ifend6, label %if.entry4

else:                                             ; preds = %4
  %11 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr nonnull %3)
  br label %ifend

common.ret:                                       ; preds = %if.entry4, %ifend
  %common.ret.op = phi ptr [ %value.0, %ifend ], [ %18, %if.entry4 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %else, %ifend6
  %value.0 = phi ptr [ %19, %ifend6 ], [ %11, %else ]
  %12 = tail call ptr @LLVMBuildStore(ptr %1, ptr %value.0, ptr %2)
  br label %common.ret

if.entry4:                                        ; preds = %if.entry
  %13 = tail call ptr @LLVMIntType(i64 64)
  %14 = tail call ptr @LLVMConstInt(ptr %13, i64 0, i1 false)
  %args = alloca [2 x ptr], align 8
  store ptr %14, ptr %args, align 8
  %15 = getelementptr inbounds ptr, ptr %args, i64 1
  store ptr %14, ptr %15, align 8
  %16 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr nonnull %9, i1 true)
  %17 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %16, ptr %2, ptr nonnull %args, i64 2, ptr nonnull @27)
  %18 = call fastcc ptr @CodeGen_store_array_elements(ptr %0, ptr %1, ptr %17, ptr nonnull %3)
  br label %common.ret

ifend6:                                           ; preds = %if.entry
  %19 = tail call fastcc ptr @CodeGen_codegen_builtin_array(ptr %0, ptr %1, ptr nonnull %9, ptr nonnull %3)
  br label %ifend
}

define internal fastcc ptr @CodeGen_codegen_array_exp(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %memberidx = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = load i64, ptr %4, align 4
  %6 = icmp eq i64 %5, 20
  br i1 %6, label %if.entry, label %ifend

common.ret:                                       ; preds = %for.end, %if.entry
  %common.ret.op = phi ptr [ %7, %if.entry ], [ %35, %for.end ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %3
  %7 = tail call fastcc ptr @CodeGen_codegen_builtin_array(ptr %0, ptr %1, ptr nonnull %4, ptr nonnull %2)
  br label %common.ret

ifend:                                            ; preds = %3
  %memberidx4 = getelementptr inbounds %ArrayType, ptr %4, i64 0, i32 1
  %8 = load ptr, ptr %memberidx4, align 8
  %9 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %8, i1 true)
  %10 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMValueRef_, ptr %10, align 8
  %memberidx.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %10, i64 0, i32 2
  %memberidx1.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %10, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %10, i64 0, i32 1
  %11 = tail call ptr @malloc(i32 64)
  store ptr %11, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %memberidx7 = getelementptr inbounds %ArrayExpression, ptr %2, i64 0, i32 4
  %12 = load ptr, ptr %memberidx7, align 8
  %13 = tail call ptr @malloc(i32 33)
  %memberidx.i20 = getelementptr inbounds %Array_Expression_, ptr %12, i64 0, i32 1
  %14 = load ptr, ptr %memberidx.i20, align 8
  %memberidx1.i21 = getelementptr inbounds %Array_Expression_, ptr %12, i64 0, i32 2
  %15 = load i64, ptr %memberidx1.i21, align 4
  store ptr @VTableArrayIterator_Expression_, ptr %13, align 8
  %memberidx.i.i = getelementptr inbounds %Iterator_Expression_, ptr %13, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i, align 1
  %memberidx1.i.i = getelementptr inbounds %ArrayIterator_Expression_, ptr %13, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %ArrayIterator_Expression_, ptr %13, i64 0, i32 4
  store ptr %14, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_Expression_, ptr %13, i64 0, i32 3
  store i64 %15, ptr %memberidx3.i.i, align 4
  %16 = load ptr, ptr @VTableArrayIterator_Expression_, align 8
  %17 = tail call ptr %16(ptr nonnull %13)
  %18 = load i1, ptr %memberidx.i.i, align 1
  br i1 %18, label %for.end, label %for.body

for.body:                                         ; preds = %ifend, %Array_LLVMValueRef____sl__.exit
  %19 = phi ptr [ %26, %Array_LLVMValueRef____sl__.exit ], [ %11, %ifend ]
  %20 = phi i64 [ %27, %Array_LLVMValueRef____sl__.exit ], [ 8, %ifend ]
  %21 = phi i64 [ %28, %Array_LLVMValueRef____sl__.exit ], [ 0, %ifend ]
  %storemerge26 = phi ptr [ %31, %Array_LLVMValueRef____sl__.exit ], [ %17, %ifend ]
  %22 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %storemerge26)
  %.not.i = icmp slt i64 %21, %20
  br i1 %.not.i, label %Array_LLVMValueRef____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %for.body
  %23 = shl i64 %20, 1
  store i64 %23, ptr %memberidx1.i, align 4
  %24 = shl i64 %20, 4
  %25 = tail call ptr @realloc(ptr %19, i64 %24)
  store ptr %25, ptr %memberidx2.i, align 8
  br label %Array_LLVMValueRef____sl__.exit

Array_LLVMValueRef____sl__.exit:                  ; preds = %for.body, %if.entry.i
  %26 = phi ptr [ %19, %for.body ], [ %25, %if.entry.i ]
  %27 = phi i64 [ %20, %for.body ], [ %23, %if.entry.i ]
  %28 = add i64 %21, 1
  store i64 %28, ptr %memberidx.i, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %26, i64 %21
  store ptr %22, ptr %ptridx.i, align 8
  %29 = load ptr, ptr %13, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = tail call ptr %30(ptr nonnull %13)
  %32 = load i1, ptr %memberidx.i.i, align 1
  br i1 %32, label %for.end, label %for.body

for.end:                                          ; preds = %Array_LLVMValueRef____sl__.exit, %ifend
  %33 = phi i64 [ 0, %ifend ], [ %28, %Array_LLVMValueRef____sl__.exit ]
  %34 = phi ptr [ %11, %ifend ], [ %26, %Array_LLVMValueRef____sl__.exit ]
  tail call void @free(ptr nonnull %13)
  %35 = tail call ptr @LLVMConstArray(ptr %9, ptr %34, i64 %33)
  br label %common.ret
}

define internal fastcc void @CodeGen_codegen_var_declaration(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %VarDeclaration, ptr %2, i64 0, i32 2
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %6 = load ptr, ptr %memberidx1, align 8
  %memberidx.i = getelementptr inbounds %Program, ptr %6, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %VarId, ptr %5, i64 0, i32 1
  %8 = load i64, ptr %memberidx1.i, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Module_, ptr %7, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %9, i64 %8
  %10 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %10, i64 0, i32 2
  %11 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %VarId, ptr %5, i64 0, i32 2
  %12 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Var_, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx2 = getelementptr inbounds %Var, ptr %14, i64 0, i32 2
  %15 = load ptr, ptr %memberidx2, align 8
  %16 = load ptr, ptr %14, align 8
  %17 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %16, i1 true)
  %memberidx4 = getelementptr inbounds %VarDeclaration, ptr %2, i64 0, i32 1
  %18 = load ptr, ptr %memberidx4, align 8
  %19 = load ptr, ptr %18, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %19, i64 0, i32 5
  %20 = load ptr, ptr %memberidx5, align 8
  %21 = tail call ptr %20(ptr nonnull %18)
  %memberidx6 = getelementptr inbounds %VarDeclaration, ptr %2, i64 0, i32 3
  %22 = load i1, ptr %memberidx6, align 1
  br i1 %22, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %23 = tail call fastcc ptr @CodeGen_codegen_expression(ptr nonnull %0, ptr %1, ptr %15)
  %24 = load ptr, ptr %0, align 8
  %25 = tail call ptr @LLVMAddGlobal(ptr %24, ptr %17, ptr %21)
  tail call void @LLVMSetInitializer(ptr %25, ptr %23)
  br label %ifend

else:                                             ; preds = %3
  %26 = tail call ptr @LLVMBuildAlloca(ptr %1, ptr %17, ptr %21)
  %.not = icmp eq ptr %15, null
  br i1 %.not, label %ifend, label %if.entry8

ifend:                                            ; preds = %if.entry8, %else, %if.entry
  %ptr.0 = phi ptr [ %25, %if.entry ], [ %26, %if.entry8 ], [ %26, %else ]
  %memberidx.i28 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 6
  %27 = load ptr, ptr %memberidx.i28, align 8
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %28, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %30 = load i64, ptr %memberidx1.i, align 4
  %31 = load i64, ptr %5, align 4
  %32 = load i64, ptr %memberidx3.i, align 4
  %33 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @276, i64 %30, i64 %31, i64 %32)
  %34 = load ptr, ptr %4, align 8
  %35 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %35, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %35, i64 0, i32 1
  store ptr %34, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %35, i64 0, i32 2
  store i64 %33, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %35, i64 0, i32 3
  store i64 %33, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  call void %29(ptr nonnull %27, ptr nonnull %35, ptr %ptr.0)
  ret void

if.entry8:                                        ; preds = %else
  %36 = tail call fastcc ptr @CodeGen_store_expr_to_mem(ptr nonnull %0, ptr %1, ptr %26, ptr nonnull %15)
  br label %ifend
}

define internal fastcc void @CodeGen_codegen_const_declaration(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %ConstDeclaration, ptr %2, i64 0, i32 2
  %5 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %6 = load ptr, ptr %memberidx1, align 8
  %memberidx.i = getelementptr inbounds %Program, ptr %6, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %VarId, ptr %5, i64 0, i32 1
  %8 = load i64, ptr %memberidx1.i, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Module_, ptr %7, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %9, i64 %8
  %10 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %10, i64 0, i32 3
  %11 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %VarId, ptr %5, i64 0, i32 2
  %12 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Const_, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx2 = getelementptr inbounds %Const, ptr %14, i64 0, i32 2
  %15 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %15, i64 0, i32 3
  %16 = load ptr, ptr %memberidx3, align 8
  %17 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %16, i1 true)
  %memberidx4 = getelementptr inbounds %ConstDeclaration, ptr %2, i64 0, i32 1
  %18 = load ptr, ptr %memberidx4, align 8
  %19 = load ptr, ptr %18, align 8
  %memberidx5 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %19, i64 0, i32 5
  %20 = load ptr, ptr %memberidx5, align 8
  %21 = tail call ptr %20(ptr nonnull %18)
  %memberidx6 = getelementptr inbounds %ConstDeclaration, ptr %2, i64 0, i32 3
  %22 = load i1, ptr %memberidx6, align 1
  br i1 %22, label %if.entry, label %else

if.entry:                                         ; preds = %3
  %23 = tail call fastcc ptr @CodeGen_codegen_expression(ptr nonnull %0, ptr %1, ptr nonnull %15)
  %24 = load ptr, ptr %0, align 8
  %25 = tail call ptr @LLVMAddGlobal(ptr %24, ptr %17, ptr %21)
  tail call void @LLVMSetInitializer(ptr %25, ptr %23)
  tail call void @LLVMSetGlobalConstant(ptr %25, i1 true)
  br label %ifend

else:                                             ; preds = %3
  %26 = tail call ptr @LLVMBuildAlloca(ptr %1, ptr %17, ptr %21)
  %27 = tail call fastcc ptr @CodeGen_store_expr_to_mem(ptr nonnull %0, ptr %1, ptr %26, ptr nonnull %15)
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %ptr.0 = phi ptr [ %25, %if.entry ], [ %26, %else ]
  %memberidx.i25 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 6
  %28 = load ptr, ptr %memberidx.i25, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %31 = load i64, ptr %memberidx1.i, align 4
  %32 = load i64, ptr %5, align 4
  %33 = load i64, ptr %memberidx3.i, align 4
  %34 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @276, i64 %31, i64 %32, i64 %33)
  %35 = load ptr, ptr %4, align 8
  %36 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %36, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %36, i64 0, i32 1
  store ptr %35, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %36, i64 0, i32 2
  store i64 %34, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %36, i64 0, i32 3
  store i64 %34, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  call void %30(ptr nonnull %28, ptr nonnull %36, ptr %ptr.0)
  ret void
}

define internal fastcc void @CodeGen_codegen_if_stmt(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %IfStatement, ptr %2, i64 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %4)
  %memberidx1 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %memberidx1, align 8
  %7 = tail call ptr @LLVMAppendBasicBlock(ptr %6, ptr nonnull @308)
  %8 = load ptr, ptr %memberidx1, align 8
  %9 = tail call ptr @LLVMAppendBasicBlock(ptr %8, ptr nonnull @33)
  %10 = load ptr, ptr %memberidx1, align 8
  %11 = tail call ptr @LLVMAppendBasicBlock(ptr %10, ptr nonnull @309)
  %12 = tail call ptr @LLVMBuildCondBr(ptr %1, ptr %5, ptr %7, ptr %9)
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %7)
  %memberidx4 = getelementptr inbounds %IfStatement, ptr %2, i64 0, i32 2
  %13 = load ptr, ptr %memberidx4, align 8
  %memberidx.i46 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 5
  %14 = load i1, ptr %memberidx.i46, align 1
  store i1 false, ptr %memberidx.i46, align 1
  %15 = load ptr, ptr %13, align 8
  %16 = tail call ptr @malloc(i32 33)
  %memberidx.i.i47 = getelementptr inbounds %Array_Statement_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx.i.i47, align 8
  %memberidx1.i.i48 = getelementptr inbounds %Array_Statement_, ptr %15, i64 0, i32 2
  %18 = load i64, ptr %memberidx1.i.i48, align 4
  store ptr @VTableArrayIterator_Statement_, ptr %16, align 8
  %memberidx.i.i.i49 = getelementptr inbounds %Iterator_Statement_, ptr %16, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i.i49, align 1
  %memberidx1.i.i.i50 = getelementptr inbounds %ArrayIterator_Statement_, ptr %16, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i.i50, align 4
  %memberidx2.i.i.i51 = getelementptr inbounds %ArrayIterator_Statement_, ptr %16, i64 0, i32 4
  store ptr %17, ptr %memberidx2.i.i.i51, align 8
  %memberidx3.i.i.i52 = getelementptr inbounds %ArrayIterator_Statement_, ptr %16, i64 0, i32 3
  store i64 %18, ptr %memberidx3.i.i.i52, align 4
  %19 = load ptr, ptr @VTableArrayIterator_Statement_, align 8
  %20 = tail call ptr %19(ptr nonnull %16)
  %21 = load i1, ptr %memberidx.i.i.i49, align 1
  br i1 %21, label %CodeGen_codegen_block.exit57, label %for.body.i56

for.body.i56:                                     ; preds = %3, %for.body.i56
  %statement.0.i5359 = phi ptr [ %24, %for.body.i56 ], [ %20, %3 ]
  tail call fastcc void @CodeGen_codegen_statement(ptr %0, ptr %1, ptr %statement.0.i5359)
  %22 = load ptr, ptr %16, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = tail call ptr %23(ptr nonnull %16)
  %25 = load i1, ptr %memberidx.i.i.i49, align 1
  br i1 %25, label %CodeGen_codegen_block.exit57, label %for.body.i56

CodeGen_codegen_block.exit57:                     ; preds = %for.body.i56, %3
  tail call void @free(ptr nonnull %16)
  store i1 %14, ptr %memberidx.i46, align 1
  %26 = load ptr, ptr %memberidx4, align 8
  %memberidx.i = getelementptr inbounds %Block, ptr %26, i64 0, i32 1
  %27 = load i1, ptr %memberidx.i, align 1
  %memberidx1.i = getelementptr inbounds %Block, ptr %26, i64 0, i32 2
  %28 = load i1, ptr %memberidx1.i, align 1
  %29 = or i1 %27, %28
  %memberidx2.i = getelementptr inbounds %Block, ptr %26, i64 0, i32 3
  %30 = load i1, ptr %memberidx2.i, align 1
  %31 = or i1 %29, %30
  br i1 %31, label %ifend, label %if.entry

if.entry:                                         ; preds = %CodeGen_codegen_block.exit57
  %32 = tail call ptr @LLVMBuildBr(ptr %1, ptr %11)
  br label %ifend

ifend:                                            ; preds = %CodeGen_codegen_block.exit57, %if.entry
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %9)
  %memberidx6 = getelementptr inbounds %IfStatement, ptr %2, i64 0, i32 3
  %33 = load ptr, ptr %memberidx6, align 8
  %.not = icmp eq ptr %33, null
  br i1 %.not, label %if.entry12, label %if.entry7

if.entry7:                                        ; preds = %ifend
  %34 = load i1, ptr %memberidx.i46, align 1
  store i1 false, ptr %memberidx.i46, align 1
  %35 = load ptr, ptr %33, align 8
  %36 = tail call ptr @malloc(i32 33)
  %memberidx.i.i = getelementptr inbounds %Array_Statement_, ptr %35, i64 0, i32 1
  %37 = load ptr, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %Array_Statement_, ptr %35, i64 0, i32 2
  %38 = load i64, ptr %memberidx1.i.i, align 4
  store ptr @VTableArrayIterator_Statement_, ptr %36, align 8
  %memberidx.i.i.i = getelementptr inbounds %Iterator_Statement_, ptr %36, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i.i, align 1
  %memberidx1.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %36, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %36, i64 0, i32 4
  store ptr %37, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %36, i64 0, i32 3
  store i64 %38, ptr %memberidx3.i.i.i, align 4
  %39 = load ptr, ptr @VTableArrayIterator_Statement_, align 8
  %40 = tail call ptr %39(ptr nonnull %36)
  %41 = load i1, ptr %memberidx.i.i.i, align 1
  br i1 %41, label %ifend9, label %for.body.i

for.body.i:                                       ; preds = %if.entry7, %for.body.i
  %statement.0.i58 = phi ptr [ %44, %for.body.i ], [ %40, %if.entry7 ]
  tail call fastcc void @CodeGen_codegen_statement(ptr %0, ptr %1, ptr %statement.0.i58)
  %42 = load ptr, ptr %36, align 8
  %43 = load ptr, ptr %42, align 8
  %44 = tail call ptr %43(ptr nonnull %36)
  %45 = load i1, ptr %memberidx.i.i.i, align 1
  br i1 %45, label %ifend9, label %for.body.i

ifend9:                                           ; preds = %for.body.i, %if.entry7
  tail call void @free(ptr nonnull %36)
  store i1 %34, ptr %memberidx.i46, align 1
  %46 = load ptr, ptr %memberidx6, align 8
  %memberidx.i42 = getelementptr inbounds %Block, ptr %46, i64 0, i32 1
  %47 = load i1, ptr %memberidx.i42, align 1
  %memberidx1.i43 = getelementptr inbounds %Block, ptr %46, i64 0, i32 2
  %48 = load i1, ptr %memberidx1.i43, align 1
  %49 = or i1 %47, %48
  %memberidx2.i44 = getelementptr inbounds %Block, ptr %46, i64 0, i32 3
  %50 = load i1, ptr %memberidx2.i44, align 1
  %51 = or i1 %49, %50
  br i1 %51, label %else13, label %if.entry12

if.entry12:                                       ; preds = %ifend, %ifend9
  %52 = tail call ptr @LLVMBuildBr(ptr %1, ptr %11)
  br label %ifend14

else13:                                           ; preds = %ifend9
  br i1 %31, label %if.entry15, label %ifend14

ifend14:                                          ; preds = %if.entry15, %else13, %if.entry12
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %11)
  ret void

if.entry15:                                       ; preds = %else13
  tail call void @LLVMDeleteBasicBlock(ptr %11)
  br label %ifend14
}

define internal void @Map_string_LLVMValueRef__set(ptr %0, ptr %1, ptr %2) {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i64 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = sitofp i64 %5 to double
  %memberidx1 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i64 0, i32 3
  %7 = load i64, ptr %memberidx1, align 4
  %8 = sitofp i64 %7 to double
  %9 = fdiv double %6, %8
  %10 = fcmp ogt double %9, 7.500000e-01
  br i1 %10, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %11 = load ptr, ptr %0, align 8
  %memberidx.i36 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx.i36, align 8
  %13 = tail call ptr %12(ptr nonnull %0)
  %14 = load i64, ptr %memberidx1, align 4
  %15 = shl i64 %14, 1
  store i64 %15, ptr %memberidx1, align 4
  store i64 0, ptr %memberidx, align 4
  %memberidx4.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i64 0, i32 1
  %16 = load ptr, ptr %memberidx4.i, align 8
  %17 = shl i64 %14, 4
  %18 = tail call ptr @realloc(ptr %16, i64 %17)
  store ptr %18, ptr %memberidx4.i, align 8
  %19 = load i64, ptr %memberidx1, align 4
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %for.body.i40, label %for.cond11.preheader.i

for.cond11.preheader.i:                           ; preds = %for.body.i40, %if.entry
  %memberidx15.i = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %13, i64 0, i32 2
  %21 = load i64, ptr %memberidx15.i, align 4
  %22 = icmp sgt i64 %21, 0
  br i1 %22, label %for.body12.lr.ph.i, label %ifend

for.body12.lr.ph.i:                               ; preds = %for.cond11.preheader.i
  %memberidx.i32.i = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %13, i64 0, i32 1
  br label %for.body12.i

for.body.i40:                                     ; preds = %if.entry, %for.body.i40
  %i.036.i = phi i64 [ %25, %for.body.i40 ], [ 0, %if.entry ]
  %23 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %23, i64 %i.036.i
  %24 = tail call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_LLVMValueRef_, ptr %24, align 8
  %memberidx.i.i39 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %24, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i39, align 1
  store ptr %24, ptr %ptridx.i, align 8
  %25 = add nuw nsw i64 %i.036.i, 1
  %26 = load i64, ptr %memberidx1, align 4
  %27 = icmp slt i64 %25, %26
  br i1 %27, label %for.body.i40, label %for.cond11.preheader.i

for.body12.i:                                     ; preds = %for.body12.i, %for.body12.lr.ph.i
  %storemerge35.i = phi i64 [ 0, %for.body12.lr.ph.i ], [ %34, %for.body12.i ]
  %28 = load ptr, ptr %0, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %memberidx.i32.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %30, i64 %storemerge35.i
  %31 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx17.i = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %31, i64 0, i32 1
  %32 = load ptr, ptr %memberidx17.i, align 8
  %memberidx18.i = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %31, i64 0, i32 2
  %33 = load ptr, ptr %memberidx18.i, align 8
  tail call void %29(ptr nonnull %0, ptr %32, ptr %33)
  %34 = add nuw nsw i64 %storemerge35.i, 1
  %35 = load i64, ptr %memberidx15.i, align 4
  %36 = icmp slt i64 %34, %35
  br i1 %36, label %for.body12.i, label %ifend

ifend:                                            ; preds = %for.body12.i, %for.cond11.preheader.i, %3
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %37 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %37, i64 0, i32 5
  %38 = load ptr, ptr %memberidx.i, align 8
  %39 = tail call ptr %38(ptr nonnull %1)
  %40 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %39)
  %41 = load ptr, ptr %4, align 8
  %42 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %42, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 1
  store ptr %41, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 2
  store i64 %40, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 3
  store i64 %40, ptr %memberidx2.i.i, align 4
  call void @free(ptr %39)
  %43 = load i64, ptr %memberidx1.i.i, align 4
  %44 = icmp sgt i64 %43, 0
  br i1 %44, label %for.body.i, label %Map_string_LLVMValueRef__hash_fnc.exit

for.body.i:                                       ; preds = %ifend, %for.body.i
  %i.0.i42 = phi i64 [ %51, %for.body.i ], [ 0, %ifend ]
  %hash.0.i41 = phi i64 [ %50, %for.body.i ], [ 0, %ifend ]
  %45 = shl i64 %hash.0.i41, 1
  %46 = load ptr, ptr %42, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i64 0, i32 2
  %47 = load ptr, ptr %memberidx2.i, align 8
  %48 = call i8 %47(ptr nonnull %42, i64 %i.0.i42)
  %49 = sext i8 %48 to i64
  %50 = add i64 %45, %49
  %51 = add nuw nsw i64 %i.0.i42, 1
  %52 = load i64, ptr %memberidx1.i.i, align 4
  %53 = icmp slt i64 %51, %52
  br i1 %53, label %for.body.i, label %Map_string_LLVMValueRef__hash_fnc.exit

Map_string_LLVMValueRef__hash_fnc.exit:           ; preds = %for.body.i, %ifend
  %hash.0.i.lcssa = phi i64 [ 0, %ifend ], [ %50, %for.body.i ]
  %54 = call i64 @llvm.abs.i64(i64 %hash.0.i.lcssa, i1 false)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %55 = load i64, ptr %memberidx1, align 4
  %56 = srem i64 %54, %55
  %memberidx3 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i64 0, i32 1
  %57 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %57, i64 %56
  %58 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %58, i64 0, i32 3
  %59 = load i1, ptr %memberidx4, align 1
  br i1 %59, label %while.end, label %while.entry.preheader

while.entry.preheader:                            ; preds = %Map_string_LLVMValueRef__hash_fnc.exit
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend10
  %60 = phi ptr [ %57, %while.entry.preheader ], [ %78, %ifend10 ]
  %61 = phi i64 [ %55, %while.entry.preheader ], [ %79, %ifend10 ]
  %62 = phi ptr [ %58, %while.entry.preheader ], [ %82, %ifend10 ]
  %63 = phi i64 [ %56, %while.entry.preheader ], [ %81, %ifend10 ]
  %memberidx7 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %62, i64 0, i32 1
  %64 = load ptr, ptr %memberidx7, align 8
  %memberidx.i33 = getelementptr inbounds %string, ptr %64, i64 0, i32 2
  %65 = load i64, ptr %memberidx.i33, align 4
  %66 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %65, %66
  br i1 %.not.i, label %ifend.i, label %ifend10

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i35 = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %67 = load ptr, ptr %memberidx2.i35, align 8
  %68 = load ptr, ptr %memberidx3.i, align 8
  %69 = call i64 @memcmp(ptr %67, ptr %68, i64 %65)
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %ifend.i.while.end.loopexit_crit_edge, label %ifend.i.ifend10_crit_edge

ifend.i.while.end.loopexit_crit_edge:             ; preds = %ifend.i
  %.pre44.pre = load ptr, ptr %memberidx3, align 8
  br label %while.end

ifend.i.ifend10_crit_edge:                        ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx1, align 4
  %.pre43 = load ptr, ptr %memberidx3, align 8
  br label %ifend10

while.end:                                        ; preds = %ifend10, %ifend.i.while.end.loopexit_crit_edge, %Map_string_LLVMValueRef__hash_fnc.exit
  %71 = phi ptr [ %57, %Map_string_LLVMValueRef__hash_fnc.exit ], [ %.pre44.pre, %ifend.i.while.end.loopexit_crit_edge ], [ %78, %ifend10 ]
  %72 = phi i64 [ %56, %Map_string_LLVMValueRef__hash_fnc.exit ], [ %63, %ifend.i.while.end.loopexit_crit_edge ], [ %81, %ifend10 ]
  %73 = load i64, ptr %memberidx, align 4
  %74 = add i64 %73, 1
  store i64 %74, ptr %memberidx, align 4
  %ptridx18 = getelementptr inbounds ptr, ptr %71, i64 %72
  %75 = load ptr, ptr %ptridx18, align 8
  %76 = load ptr, ptr %75, align 8
  %77 = load ptr, ptr %76, align 8
  call void %77(ptr nonnull %75, ptr nonnull %1, ptr %2)
  ret void

ifend10:                                          ; preds = %ifend.i.ifend10_crit_edge, %while.entry
  %78 = phi ptr [ %.pre43, %ifend.i.ifend10_crit_edge ], [ %60, %while.entry ]
  %79 = phi i64 [ %.pre, %ifend.i.ifend10_crit_edge ], [ %61, %while.entry ]
  %80 = add i64 %63, 1
  %81 = srem i64 %80, %79
  %ptridx13 = getelementptr inbounds ptr, ptr %78, i64 %81
  %82 = load ptr, ptr %ptridx13, align 8
  %memberidx14 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %82, i64 0, i32 3
  %83 = load i1, ptr %memberidx14, align 1
  br i1 %83, label %while.end, label %while.entry
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind willreturn writeonly
define internal void @Bucket_string_LLVMValueRef__set(ptr nocapture writeonly %0, ptr %1, ptr %2) #8 {
  %memberidx = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %0, i64 0, i32 3
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %0, i64 0, i32 1
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %0, i64 0, i32 2
  store ptr %2, ptr %memberidx2, align 8
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Bucket_string_LLVMValueRef___find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal noalias ptr @Map_string_LLVMValueRef__get_buckets(ptr nocapture readonly %0) {
for.entry:
  %1 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Bucket_string_LLVMValueRef__, ptr %1, align 8
  %memberidx.i = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %1, i64 0, i32 2
  %memberidx1.i = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %1, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_Bucket_string_LLVMValueRef__, ptr %1, i64 0, i32 1
  %2 = tail call ptr @malloc(i32 64)
  store ptr %2, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %memberidx2 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i64 0, i32 3
  %3 = load i64, ptr %memberidx2, align 4
  %4 = icmp sgt i64 %3, 0
  br i1 %4, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx3 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %5 = phi i64 [ %3, %for.body.lr.ph ], [ %19, %ifend ]
  %6 = phi ptr [ %2, %for.body.lr.ph ], [ %20, %ifend ]
  %7 = phi ptr [ %2, %for.body.lr.ph ], [ %21, %ifend ]
  %8 = phi i64 [ 8, %for.body.lr.ph ], [ %22, %ifend ]
  %9 = phi i64 [ 0, %for.body.lr.ph ], [ %23, %ifend ]
  %i.011 = phi i64 [ 0, %for.body.lr.ph ], [ %24, %ifend ]
  %10 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %i.011
  %11 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %11, i64 0, i32 3
  %12 = load i1, ptr %memberidx4, align 1
  br i1 %12, label %ifend, label %if.entry

for.end:                                          ; preds = %ifend, %for.entry
  ret ptr %1

if.entry:                                         ; preds = %for.body
  %.not.i = icmp slt i64 %9, %8
  br i1 %.not.i, label %Array_Bucket_string_LLVMValueRef_____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %if.entry
  %13 = shl i64 %8, 1
  store i64 %13, ptr %memberidx1.i, align 4
  %14 = shl i64 %8, 4
  %15 = tail call ptr @realloc(ptr %7, i64 %14)
  store ptr %15, ptr %memberidx2.i, align 8
  br label %Array_Bucket_string_LLVMValueRef_____sl__.exit

Array_Bucket_string_LLVMValueRef_____sl__.exit:   ; preds = %if.entry, %if.entry.i
  %16 = phi ptr [ %6, %if.entry ], [ %15, %if.entry.i ]
  %17 = phi i64 [ %8, %if.entry ], [ %13, %if.entry.i ]
  %18 = add i64 %9, 1
  store i64 %18, ptr %memberidx.i, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %16, i64 %9
  store ptr %11, ptr %ptridx.i, align 8
  %.pre = load i64, ptr %memberidx2, align 4
  br label %ifend

ifend:                                            ; preds = %for.body, %Array_Bucket_string_LLVMValueRef_____sl__.exit
  %19 = phi i64 [ %5, %for.body ], [ %.pre, %Array_Bucket_string_LLVMValueRef_____sl__.exit ]
  %20 = phi ptr [ %6, %for.body ], [ %16, %Array_Bucket_string_LLVMValueRef_____sl__.exit ]
  %21 = phi ptr [ %7, %for.body ], [ %16, %Array_Bucket_string_LLVMValueRef_____sl__.exit ]
  %22 = phi i64 [ %8, %for.body ], [ %17, %Array_Bucket_string_LLVMValueRef_____sl__.exit ]
  %23 = phi i64 [ %9, %for.body ], [ %18, %Array_Bucket_string_LLVMValueRef_____sl__.exit ]
  %24 = add nuw nsw i64 %i.011, 1
  %25 = icmp slt i64 %24, %19
  br i1 %25, label %for.body, label %for.end
}

define internal ptr @Map_string_LLVMValueRef__get(ptr nocapture readonly %0, ptr %1) {
  %3 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %4 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i64 0, i32 5
  %5 = load ptr, ptr %memberidx.i, align 8
  %6 = tail call ptr %5(ptr nonnull %1)
  %7 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @22, ptr %6)
  %8 = load ptr, ptr %3, align 8
  %9 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %9, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 1
  store ptr %8, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 2
  store i64 %7, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 3
  store i64 %7, ptr %memberidx2.i.i, align 4
  call void @free(ptr %6)
  %10 = load i64, ptr %memberidx1.i.i, align 4
  %11 = icmp sgt i64 %10, 0
  br i1 %11, label %for.body.i, label %Map_string_LLVMValueRef__hash_fnc.exit

for.body.i:                                       ; preds = %2, %for.body.i
  %i.0.i36 = phi i64 [ %18, %for.body.i ], [ 0, %2 ]
  %hash.0.i35 = phi i64 [ %17, %for.body.i ], [ 0, %2 ]
  %12 = shl i64 %hash.0.i35, 1
  %13 = load ptr, ptr %9, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i64 0, i32 2
  %14 = load ptr, ptr %memberidx2.i, align 8
  %15 = call i8 %14(ptr nonnull %9, i64 %i.0.i36)
  %16 = sext i8 %15 to i64
  %17 = add i64 %12, %16
  %18 = add nuw nsw i64 %i.0.i36, 1
  %19 = load i64, ptr %memberidx1.i.i, align 4
  %20 = icmp slt i64 %18, %19
  br i1 %20, label %for.body.i, label %Map_string_LLVMValueRef__hash_fnc.exit

Map_string_LLVMValueRef__hash_fnc.exit:           ; preds = %for.body.i, %2
  %hash.0.i.lcssa = phi i64 [ 0, %2 ], [ %17, %for.body.i ]
  %21 = call i64 @llvm.abs.i64(i64 %hash.0.i.lcssa, i1 false)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %memberidx = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i64 0, i32 3
  %22 = load i64, ptr %memberidx, align 4
  %23 = srem i64 %21, %22
  %memberidx1 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %0, i64 0, i32 1
  %24 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %24, i64 %23
  %25 = load ptr, ptr %ptridx, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %25, i64 0, i32 3
  %26 = load i1, ptr %memberidx2, align 1
  br i1 %26, label %common.ret, label %while.entry.preheader

while.entry.preheader:                            ; preds = %Map_string_LLVMValueRef__hash_fnc.exit
  %memberidx1.i33 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %else
  %27 = phi ptr [ %37, %else ], [ %24, %while.entry.preheader ]
  %28 = phi i64 [ %38, %else ], [ %22, %while.entry.preheader ]
  %29 = phi ptr [ %41, %else ], [ %25, %while.entry.preheader ]
  %hash.0 = phi i64 [ %40, %else ], [ %23, %while.entry.preheader ]
  %memberidx5 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %29, i64 0, i32 1
  %30 = load ptr, ptr %memberidx5, align 8
  %memberidx.i32 = getelementptr inbounds %string, ptr %30, i64 0, i32 2
  %31 = load i64, ptr %memberidx.i32, align 4
  %32 = load i64, ptr %memberidx1.i33, align 4
  %.not.i = icmp eq i64 %31, %32
  br i1 %.not.i, label %ifend.i, label %else

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i34 = getelementptr inbounds %string, ptr %30, i64 0, i32 1
  %33 = load ptr, ptr %memberidx2.i34, align 8
  %34 = load ptr, ptr %memberidx3.i, align 8
  %35 = call i64 @memcmp(ptr %33, ptr %34, i64 %31)
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %while.end, label %ifend.i.else_crit_edge

ifend.i.else_crit_edge:                           ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx, align 4
  %.pre37 = load ptr, ptr %memberidx1, align 8
  br label %else

while.end:                                        ; preds = %ifend.i
  %.pre38.pre = load ptr, ptr %memberidx1, align 8
  %ptridx11.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre38.pre, i64 %hash.0
  %.pre39.pre = load ptr, ptr %ptridx11.phi.trans.insert.phi.trans.insert, align 8
  %memberidx12.phi.trans.insert.phi.trans.insert = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %.pre39.pre, i64 0, i32 3
  %.pre40.pre = load i1, ptr %memberidx12.phi.trans.insert.phi.trans.insert, align 1
  br i1 %.pre40.pre, label %common.ret, label %if.entry13

else:                                             ; preds = %ifend.i.else_crit_edge, %while.entry
  %37 = phi ptr [ %.pre37, %ifend.i.else_crit_edge ], [ %27, %while.entry ]
  %38 = phi i64 [ %.pre, %ifend.i.else_crit_edge ], [ %28, %while.entry ]
  %39 = add i64 %hash.0, 1
  %40 = srem i64 %39, %38
  %ptridx8 = getelementptr inbounds ptr, ptr %37, i64 %40
  %41 = load ptr, ptr %ptridx8, align 8
  %memberidx9 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %41, i64 0, i32 3
  %42 = load i1, ptr %memberidx9, align 1
  br i1 %42, label %common.ret, label %while.entry

common.ret:                                       ; preds = %else, %Map_string_LLVMValueRef__hash_fnc.exit, %while.end, %if.entry13
  %common.ret.op = phi ptr [ %43, %if.entry13 ], [ null, %while.end ], [ null, %Map_string_LLVMValueRef__hash_fnc.exit ], [ null, %else ]
  ret ptr %common.ret.op

if.entry13:                                       ; preds = %while.end
  %memberidx18 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %.pre39.pre, i64 0, i32 2
  %43 = load ptr, ptr %memberidx18, align 8
  br label %common.ret
}

define internal fastcc ptr @CodeGen_store_array_elements(ptr nocapture %0, ptr %1, ptr %2, ptr nocapture readonly %3) unnamed_addr {
for.entry:
  %next_args = alloca [1 x ptr], align 8
  %4 = tail call ptr @LLVMIntType(i64 64)
  %5 = tail call ptr @LLVMConstInt(ptr %4, i64 1, i1 false)
  store ptr %5, ptr %next_args, align 8
  %6 = tail call ptr @LLVMTypeOf(ptr %2)
  %memberidx = getelementptr inbounds %ArrayExpression, ptr %3, i64 0, i32 4
  %7 = load ptr, ptr %memberidx, align 8
  %8 = tail call ptr @malloc(i32 33)
  %memberidx.i = getelementptr inbounds %Array_Expression_, ptr %7, i64 0, i32 1
  %9 = load ptr, ptr %memberidx.i, align 8
  %memberidx1.i = getelementptr inbounds %Array_Expression_, ptr %7, i64 0, i32 2
  %10 = load i64, ptr %memberidx1.i, align 4
  store ptr @VTableArrayIterator_Expression_, ptr %8, align 8
  %memberidx.i.i = getelementptr inbounds %Iterator_Expression_, ptr %8, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i, align 1
  %memberidx1.i.i = getelementptr inbounds %ArrayIterator_Expression_, ptr %8, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %ArrayIterator_Expression_, ptr %8, i64 0, i32 4
  store ptr %9, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_Expression_, ptr %8, i64 0, i32 3
  store i64 %10, ptr %memberidx3.i.i, align 4
  %11 = load ptr, ptr @VTableArrayIterator_Expression_, align 8
  %12 = tail call ptr %11(ptr nonnull %8)
  %13 = load i1, ptr %memberidx.i.i, align 1
  br i1 %13, label %for.end, label %for.body

for.body:                                         ; preds = %for.entry, %for.body
  %value.015 = phi ptr [ %19, %for.body ], [ %12, %for.entry ]
  %addr.014 = phi ptr [ %16, %for.body ], [ %2, %for.entry ]
  %14 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %value.015)
  %15 = call ptr @LLVMBuildStore(ptr %1, ptr %14, ptr %addr.014)
  %16 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %6, ptr %addr.014, ptr nonnull %next_args, i64 1, ptr nonnull @27)
  %17 = load ptr, ptr %8, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = call ptr %18(ptr nonnull %8)
  %20 = load i1, ptr %memberidx.i.i, align 1
  br i1 %20, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %for.entry
  %addr.0.lcssa = phi ptr [ %2, %for.entry ], [ %16, %for.body ]
  tail call void @free(ptr nonnull %8)
  ret ptr %addr.0.lcssa
}

define internal fastcc ptr @CodeGen_codegen_type(ptr nocapture %0, ptr %1, i1 %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = load i64, ptr %1, align 4
  switch i64 %7, label %ifend40 [
    i64 12, label %if.entry
    i64 0, label %if.entry2
    i64 1, label %if.entry6
    i64 2, label %if.entry10
    i64 3, label %if.entry14
    i64 4, label %if.entry18
    i64 7, label %if.entry22
    i64 5, label %if.entry26
    i64 6, label %if.entry30
    i64 8, label %if.entry34
    i64 9, label %if.entry38
  ]

common.ret165:                                    ; preds = %if.entry80, %if.entry, %if.entry2, %if.entry6, %if.entry10, %if.entry14, %if.entry18, %if.entry22, %if.entry26, %if.entry30, %if.entry34, %if.entry38, %if.entry43, %ifend92, %if.entry94, %true_block, %true_block83, %for.end, %if.entry52, %if.entry47
  %common.ret165.op = phi ptr [ %24, %if.entry47 ], [ %28, %if.entry52 ], [ %8, %if.entry ], [ %9, %if.entry2 ], [ %10, %if.entry6 ], [ %11, %if.entry10 ], [ %12, %if.entry14 ], [ %13, %if.entry18 ], [ %14, %if.entry22 ], [ %15, %if.entry26 ], [ %16, %if.entry30 ], [ %17, %if.entry34 ], [ %18, %if.entry38 ], [ %21, %if.entry43 ], [ null, %ifend92 ], [ %108, %if.entry94 ], [ %59, %true_block ], [ %94, %true_block83 ], [ %58, %for.end ], [ %93, %if.entry80 ]
  ret ptr %common.ret165.op

if.entry:                                         ; preds = %3
  %8 = tail call ptr @LLVMVoidType()
  br label %common.ret165

if.entry2:                                        ; preds = %3
  %9 = tail call ptr @LLVMInt1Type()
  br label %common.ret165

if.entry6:                                        ; preds = %3
  %10 = tail call ptr @LLVMIntType(i64 4)
  br label %common.ret165

if.entry10:                                       ; preds = %3
  %11 = tail call ptr @LLVMInt8Type()
  br label %common.ret165

if.entry14:                                       ; preds = %3
  %12 = tail call ptr @LLVMInt16Type()
  br label %common.ret165

if.entry18:                                       ; preds = %3
  %13 = tail call ptr @LLVMInt32Type()
  br label %common.ret165

if.entry22:                                       ; preds = %3
  %14 = tail call ptr @LLVMIntType(i64 64)
  br label %common.ret165

if.entry26:                                       ; preds = %3
  %15 = tail call ptr @LLVMInt64Type()
  br label %common.ret165

if.entry30:                                       ; preds = %3
  %16 = tail call ptr @LLVMInt128Type()
  br label %common.ret165

if.entry34:                                       ; preds = %3
  %17 = tail call ptr @LLVMHalfType()
  br label %common.ret165

if.entry38:                                       ; preds = %3
  %18 = tail call ptr @LLVMFloatType()
  br label %common.ret165

ifend40:                                          ; preds = %3
  %19 = and i64 %7, -2
  %20 = icmp eq i64 %19, 10
  br i1 %20, label %if.entry43, label %ifend45

if.entry43:                                       ; preds = %ifend40
  %21 = tail call ptr @LLVMDoubleType()
  br label %common.ret165

ifend45:                                          ; preds = %ifend40
  switch i64 %7, label %ifend60 [
    i64 15, label %if.entry47
    i64 16, label %if.entry52
    i64 20, label %if.entry58
  ]

if.entry47:                                       ; preds = %ifend45
  %memberidx50 = getelementptr inbounds %PointerType, ptr %1, i64 0, i32 1
  %22 = load ptr, ptr %memberidx50, align 8
  %23 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %22, i1 true)
  %24 = tail call ptr @LLVMPointerType(ptr %23, i64 0)
  br label %common.ret165

if.entry52:                                       ; preds = %ifend45
  %memberidx55 = getelementptr inbounds %ArrayType, ptr %1, i64 0, i32 1
  %25 = load ptr, ptr %memberidx55, align 8
  %26 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %25, i1 true)
  %memberidx56 = getelementptr inbounds %ArrayType, ptr %1, i64 0, i32 2
  %27 = load i64, ptr %memberidx56, align 4
  %28 = tail call ptr @LLVMArrayType(ptr %26, i64 %27)
  br label %common.ret165

if.entry58:                                       ; preds = %ifend45
  %memberidx61 = getelementptr inbounds %GenericType, ptr %1, i64 0, i32 3
  %29 = load ptr, ptr %memberidx61, align 8
  %.pr = load i64, ptr %29, align 4
  br label %ifend60

ifend60:                                          ; preds = %ifend45, %if.entry58
  %30 = phi i64 [ %7, %ifend45 ], [ %.pr, %if.entry58 ]
  %tt.0 = phi ptr [ %1, %ifend45 ], [ %29, %if.entry58 ]
  switch i64 %30, label %ifend78 [
    i64 17, label %if.entry63
    i64 13, label %if.entry76
  ]

if.entry63:                                       ; preds = %ifend60
  %31 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMTypeRef_, ptr %31, align 8
  %memberidx.i140 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %31, i64 0, i32 2
  %memberidx1.i141 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %31, i64 0, i32 3
  store i64 8, ptr %memberidx1.i141, align 4
  %memberidx2.i = getelementptr inbounds %Array_LLVMTypeRef_, ptr %31, i64 0, i32 1
  %32 = tail call ptr @malloc(i32 64)
  store ptr %32, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i140, align 4
  %memberidx68 = getelementptr inbounds %FunctionType, ptr %tt.0, i64 0, i32 1
  %33 = load ptr, ptr %memberidx68, align 8
  %34 = tail call ptr @malloc(i32 33)
  %memberidx.i135 = getelementptr inbounds %Array_Type_, ptr %33, i64 0, i32 1
  %35 = load ptr, ptr %memberidx.i135, align 8
  %memberidx1.i136 = getelementptr inbounds %Array_Type_, ptr %33, i64 0, i32 2
  %36 = load i64, ptr %memberidx1.i136, align 4
  store ptr @VTableArrayIterator_Type_, ptr %34, align 8
  %memberidx.i.i137 = getelementptr inbounds %Iterator_Type_, ptr %34, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i137, align 1
  %memberidx1.i.i138 = getelementptr inbounds %ArrayIterator_Type_, ptr %34, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i138, align 4
  %memberidx2.i.i139 = getelementptr inbounds %ArrayIterator_Type_, ptr %34, i64 0, i32 4
  store ptr %35, ptr %memberidx2.i.i139, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_Type_, ptr %34, i64 0, i32 3
  store i64 %36, ptr %memberidx3.i.i, align 4
  %37 = load ptr, ptr @VTableArrayIterator_Type_, align 8
  %38 = tail call ptr %37(ptr nonnull %34)
  %39 = load i1, ptr %memberidx.i.i137, align 1
  br i1 %39, label %for.end, label %for.body

for.body:                                         ; preds = %if.entry63, %Array_LLVMTypeRef____sl__.exit
  %40 = phi ptr [ %47, %Array_LLVMTypeRef____sl__.exit ], [ %32, %if.entry63 ]
  %41 = phi i64 [ %48, %Array_LLVMTypeRef____sl__.exit ], [ 8, %if.entry63 ]
  %42 = phi i64 [ %49, %Array_LLVMTypeRef____sl__.exit ], [ 0, %if.entry63 ]
  %storemerge166 = phi ptr [ %52, %Array_LLVMTypeRef____sl__.exit ], [ %38, %if.entry63 ]
  %43 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %storemerge166, i1 true)
  %.not.i = icmp slt i64 %42, %41
  br i1 %.not.i, label %Array_LLVMTypeRef____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %for.body
  %44 = shl i64 %41, 1
  store i64 %44, ptr %memberidx1.i141, align 4
  %45 = shl i64 %41, 4
  %46 = tail call ptr @realloc(ptr %40, i64 %45)
  store ptr %46, ptr %memberidx2.i, align 8
  br label %Array_LLVMTypeRef____sl__.exit

Array_LLVMTypeRef____sl__.exit:                   ; preds = %for.body, %if.entry.i
  %47 = phi ptr [ %40, %for.body ], [ %46, %if.entry.i ]
  %48 = phi i64 [ %41, %for.body ], [ %44, %if.entry.i ]
  %49 = add i64 %42, 1
  store i64 %49, ptr %memberidx.i140, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %47, i64 %42
  store ptr %43, ptr %ptridx.i, align 8
  %50 = load ptr, ptr %34, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = tail call ptr %51(ptr nonnull %34)
  %53 = load i1, ptr %memberidx.i.i137, align 1
  br i1 %53, label %for.end, label %for.body

for.end:                                          ; preds = %Array_LLVMTypeRef____sl__.exit, %if.entry63
  %54 = phi i64 [ 0, %if.entry63 ], [ %49, %Array_LLVMTypeRef____sl__.exit ]
  %55 = phi ptr [ %32, %if.entry63 ], [ %47, %Array_LLVMTypeRef____sl__.exit ]
  tail call void @free(ptr nonnull %34)
  %memberidx72 = getelementptr inbounds %FunctionType, ptr %tt.0, i64 0, i32 2
  %56 = load ptr, ptr %memberidx72, align 8
  %57 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %56, i1 true)
  %58 = tail call ptr @LLVMFunctionType(ptr %57, ptr %55, i64 %54, i1 false)
  br i1 %2, label %true_block, label %common.ret165

true_block:                                       ; preds = %for.end
  %59 = tail call ptr @LLVMPointerType(ptr %58, i64 0)
  br label %common.ret165

if.entry76:                                       ; preds = %ifend60
  %memberidx79 = getelementptr inbounds %ObjectType, ptr %tt.0, i64 0, i32 1
  %60 = load ptr, ptr %memberidx79, align 8
  %memberidx.i149 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 8
  %61 = load ptr, ptr %memberidx.i149, align 8
  %62 = load ptr, ptr %61, align 8
  %memberidx1.i150 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %62, i64 0, i32 1
  %63 = load ptr, ptr %memberidx1.i150, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %64 = load i64, ptr %60, align 4
  %memberidx1.i.i151 = getelementptr inbounds %TypeId, ptr %60, i64 0, i32 1
  %65 = load i64, ptr %memberidx1.i.i151, align 4
  %memberidx2.i.i152 = getelementptr inbounds %TypeId, ptr %60, i64 0, i32 2
  %66 = load i64, ptr %memberidx2.i.i152, align 4
  %67 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @276, i64 %64, i64 %65, i64 %66)
  %68 = load ptr, ptr %5, align 8
  %69 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %69, align 8
  %memberidx.i.i.i153 = getelementptr inbounds %string, ptr %69, i64 0, i32 1
  store ptr %68, ptr %memberidx.i.i.i153, align 8
  %memberidx1.i.i.i154 = getelementptr inbounds %string, ptr %69, i64 0, i32 2
  store i64 %67, ptr %memberidx1.i.i.i154, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %69, i64 0, i32 3
  store i64 %67, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  %70 = call ptr %63(ptr nonnull %61, ptr nonnull %69)
  %.not.i142 = icmp eq ptr %70, null
  br i1 %.not.i142, label %CodeGen_get_or_codegen_class_from_typeid.exit, label %if.entry80

CodeGen_get_or_codegen_class_from_typeid.exit:    ; preds = %if.entry76
  %memberidx.i144 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %71 = load ptr, ptr %memberidx.i144, align 8
  %memberidx.i.i145 = getelementptr inbounds %Program, ptr %71, i64 0, i32 1
  %72 = load ptr, ptr %memberidx.i.i145, align 8
  %73 = load i64, ptr %60, align 4
  %memberidx.i.i.i146 = getelementptr inbounds %Array_Module_, ptr %72, i64 0, i32 1
  %74 = load ptr, ptr %memberidx.i.i.i146, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %74, i64 %73
  %75 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i147 = getelementptr inbounds %Module, ptr %75, i64 0, i32 4
  %76 = load ptr, ptr %memberidx2.i.i147, align 8
  %77 = load i64, ptr %memberidx2.i.i152, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %76, i64 0, i32 1
  %78 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %78, i64 %77
  %79 = load ptr, ptr %ptridx.i6.i.i, align 8
  call fastcc void @CodeGen_declare_class(ptr nonnull %0, ptr %79)
  call fastcc void @CodeGen_codegen_class(ptr nonnull %0, ptr %79)
  %80 = load ptr, ptr %79, align 8
  %81 = load ptr, ptr %memberidx.i149, align 8
  %82 = load ptr, ptr %81, align 8
  %memberidx1.i.i156 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %82, i64 0, i32 1
  %83 = load ptr, ptr %memberidx1.i.i156, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %84 = load i64, ptr %80, align 4
  %memberidx1.i.i.i157 = getelementptr inbounds %TypeId, ptr %80, i64 0, i32 1
  %85 = load i64, ptr %memberidx1.i.i.i157, align 4
  %memberidx2.i.i.i158 = getelementptr inbounds %TypeId, ptr %80, i64 0, i32 2
  %86 = load i64, ptr %memberidx2.i.i.i158, align 4
  %87 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @276, i64 %84, i64 %85, i64 %86)
  %88 = load ptr, ptr %4, align 8
  %89 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %89, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %string, ptr %89, i64 0, i32 1
  store ptr %88, ptr %memberidx.i.i.i.i, align 8
  %memberidx1.i.i.i.i = getelementptr inbounds %string, ptr %89, i64 0, i32 2
  store i64 %87, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %string, ptr %89, i64 0, i32 3
  store i64 %87, ptr %memberidx2.i.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %90 = call ptr %83(ptr nonnull %81, ptr nonnull %89)
  %.not128 = icmp eq ptr %90, null
  br i1 %.not128, label %CodeGen_get_or_codegen_class_from_typeid.exit.ifend78_crit_edge, label %if.entry80

CodeGen_get_or_codegen_class_from_typeid.exit.ifend78_crit_edge: ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit
  %.pre = load i64, ptr %tt.0, align 4
  br label %ifend78

ifend78:                                          ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit.ifend78_crit_edge, %ifend60
  %91 = phi i64 [ %.pre, %CodeGen_get_or_codegen_class_from_typeid.exit.ifend78_crit_edge ], [ %30, %ifend60 ]
  %92 = icmp eq i64 %91, 14
  br i1 %92, label %if.entry90, label %ifend92

if.entry80:                                       ; preds = %if.entry76, %CodeGen_get_or_codegen_class_from_typeid.exit
  %common.ret.op.i164 = phi ptr [ %90, %CodeGen_get_or_codegen_class_from_typeid.exit ], [ %70, %if.entry76 ]
  %93 = load ptr, ptr %common.ret.op.i164, align 8
  br i1 %2, label %true_block83, label %common.ret165

true_block83:                                     ; preds = %if.entry80
  %94 = call ptr @LLVMPointerType(ptr %93, i64 0)
  br label %common.ret165

if.entry90:                                       ; preds = %ifend78
  %memberidx93 = getelementptr inbounds %EnumType, ptr %tt.0, i64 0, i32 1
  %95 = load ptr, ptr %memberidx93, align 8
  %96 = call fastcc ptr @CodeGen_get_or_codegen_enum_from_typeid(ptr %0, ptr %95)
  %.not = icmp eq ptr %96, null
  br i1 %.not, label %ifend92, label %if.entry94

ifend92:                                          ; preds = %if.entry90, %ifend78
  %97 = call ptr @malloc(i32 256)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %97, ptr noundef nonnull align 8 dereferenceable(32) @277, i64 32, i1 false)
  %98 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %98, align 8
  %memberidx.i.i129 = getelementptr inbounds %string, ptr %98, i64 0, i32 1
  store ptr %97, ptr %memberidx.i.i129, align 8
  %memberidx1.i.i130 = getelementptr inbounds %string, ptr %98, i64 0, i32 2
  store i64 32, ptr %memberidx1.i.i130, align 4
  %memberidx2.i.i131 = getelementptr inbounds %string, ptr %98, i64 0, i32 3
  store i64 32, ptr %memberidx2.i.i131, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %99 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %100 = call ptr %99(ptr nonnull %98)
  %101 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %6, ptr nonnull @270, ptr %100)
  %102 = load ptr, ptr %6, align 8
  %103 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %103, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %103, i64 0, i32 1
  store ptr %102, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %103, i64 0, i32 2
  store i64 %101, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %103, i64 0, i32 3
  store i64 %101, ptr %memberidx2.i.i, align 4
  call void @free(ptr %100)
  %104 = load ptr, ptr %103, align 8
  %memberidx.i.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %104, i64 0, i32 3
  %105 = load ptr, ptr %memberidx.i.i.i, align 8
  %106 = call ptr %105(ptr nonnull %103)
  %107 = load i64, ptr %memberidx1.i.i, align 4
  call void @write(i64 1, ptr %106, i64 %107)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  br label %common.ret165

if.entry94:                                       ; preds = %if.entry90
  %108 = load ptr, ptr %96, align 8
  br label %common.ret165
}

define internal fastcc ptr @CodeGen_codegen_var_access_exp(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %VarAccessExpression, ptr %2, i64 0, i32 4
  %5 = load ptr, ptr %memberidx, align 8
  %6 = tail call fastcc ptr @CodeGen_get_or_codegen_var(ptr %0, ptr %5)
  %memberidx1 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %7, i1 true)
  %9 = icmp eq ptr %6, null
  br i1 %9, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %10 = tail call ptr @malloc(i32 400)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(50) %10, ptr noundef nonnull align 8 dereferenceable(50) @298, i64 50, i1 false)
  %11 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %11, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %11, i64 0, i32 1
  store ptr %10, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %11, i64 0, i32 2
  store i64 50, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %11, i64 0, i32 3
  store i64 50, ptr %memberidx2.i.i, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %12 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %13 = tail call ptr %12(ptr nonnull %11)
  %14 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @270, ptr %13)
  %15 = load ptr, ptr %4, align 8
  %16 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %16, align 8
  %memberidx.i.i18 = getelementptr inbounds %string, ptr %16, i64 0, i32 1
  store ptr %15, ptr %memberidx.i.i18, align 8
  %memberidx1.i.i19 = getelementptr inbounds %string, ptr %16, i64 0, i32 2
  store i64 %14, ptr %memberidx1.i.i19, align 4
  %memberidx2.i.i20 = getelementptr inbounds %string, ptr %16, i64 0, i32 3
  store i64 %14, ptr %memberidx2.i.i20, align 4
  call void @free(ptr %13)
  %17 = load ptr, ptr %16, align 8
  %memberidx.i.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %17, i64 0, i32 3
  %18 = load ptr, ptr %memberidx.i.i.i, align 8
  %19 = call ptr %18(ptr nonnull %16)
  %20 = load i64, ptr %memberidx1.i.i19, align 4
  call void @write(i64 1, ptr %19, i64 %20)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %21 = load ptr, ptr %memberidx, align 8
  %22 = load i64, ptr %21, align 4
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %common.ret, label %ifend6

common.ret:                                       ; preds = %ifend, %ifend10, %if.entry8
  %common.ret.op = phi ptr [ %25, %if.entry8 ], [ %26, %ifend10 ], [ %6, %ifend ]
  ret ptr %common.ret.op

ifend6:                                           ; preds = %ifend
  %memberidx7 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 5
  %24 = load i1, ptr %memberidx7, align 1
  br i1 %24, label %if.entry8, label %ifend10

if.entry8:                                        ; preds = %ifend6
  %25 = call ptr @LLVMGetInitializer(ptr %6)
  br label %common.ret

ifend10:                                          ; preds = %ifend6
  %26 = call ptr @LLVMBuildLoad2(ptr %1, ptr %8, ptr %6, ptr nonnull @27)
  br label %common.ret
}

define internal void @Map_string_int__set(ptr %0, ptr %1, i64 %2) {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Map_string_int_, ptr %0, i64 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = sitofp i64 %5 to double
  %memberidx1 = getelementptr inbounds %Map_string_int_, ptr %0, i64 0, i32 3
  %7 = load i64, ptr %memberidx1, align 4
  %8 = sitofp i64 %7 to double
  %9 = fdiv double %6, %8
  %10 = fcmp ogt double %9, 7.500000e-01
  br i1 %10, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %11 = load ptr, ptr %0, align 8
  %memberidx.i36 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx.i36, align 8
  %13 = tail call ptr %12(ptr nonnull %0)
  %14 = load i64, ptr %memberidx1, align 4
  %15 = shl i64 %14, 1
  store i64 %15, ptr %memberidx1, align 4
  store i64 0, ptr %memberidx, align 4
  %memberidx4.i = getelementptr inbounds %Map_string_int_, ptr %0, i64 0, i32 1
  %16 = load ptr, ptr %memberidx4.i, align 8
  %17 = shl i64 %14, 4
  %18 = tail call ptr @realloc(ptr %16, i64 %17)
  store ptr %18, ptr %memberidx4.i, align 8
  %19 = load i64, ptr %memberidx1, align 4
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %for.body.i40, label %for.cond11.preheader.i

for.cond11.preheader.i:                           ; preds = %for.body.i40, %if.entry
  %memberidx15.i = getelementptr inbounds %Array_Bucket_string_int__, ptr %13, i64 0, i32 2
  %21 = load i64, ptr %memberidx15.i, align 4
  %22 = icmp sgt i64 %21, 0
  br i1 %22, label %for.body12.lr.ph.i, label %ifend

for.body12.lr.ph.i:                               ; preds = %for.cond11.preheader.i
  %memberidx.i32.i = getelementptr inbounds %Array_Bucket_string_int__, ptr %13, i64 0, i32 1
  br label %for.body12.i

for.body.i40:                                     ; preds = %if.entry, %for.body.i40
  %i.036.i = phi i64 [ %25, %for.body.i40 ], [ 0, %if.entry ]
  %23 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %23, i64 %i.036.i
  %24 = tail call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_int_, ptr %24, align 8
  %memberidx.i.i39 = getelementptr inbounds %Bucket_string_int_, ptr %24, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i39, align 1
  store ptr %24, ptr %ptridx.i, align 8
  %25 = add nuw nsw i64 %i.036.i, 1
  %26 = load i64, ptr %memberidx1, align 4
  %27 = icmp slt i64 %25, %26
  br i1 %27, label %for.body.i40, label %for.cond11.preheader.i

for.body12.i:                                     ; preds = %for.body12.i, %for.body12.lr.ph.i
  %storemerge35.i = phi i64 [ 0, %for.body12.lr.ph.i ], [ %34, %for.body12.i ]
  %28 = load ptr, ptr %0, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %memberidx.i32.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %30, i64 %storemerge35.i
  %31 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx17.i = getelementptr inbounds %Bucket_string_int_, ptr %31, i64 0, i32 1
  %32 = load ptr, ptr %memberidx17.i, align 8
  %memberidx18.i = getelementptr inbounds %Bucket_string_int_, ptr %31, i64 0, i32 2
  %33 = load i64, ptr %memberidx18.i, align 4
  tail call void %29(ptr nonnull %0, ptr %32, i64 %33)
  %34 = add nuw nsw i64 %storemerge35.i, 1
  %35 = load i64, ptr %memberidx15.i, align 4
  %36 = icmp slt i64 %34, %35
  br i1 %36, label %for.body12.i, label %ifend

ifend:                                            ; preds = %for.body12.i, %for.cond11.preheader.i, %3
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %37 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %37, i64 0, i32 5
  %38 = load ptr, ptr %memberidx.i, align 8
  %39 = tail call ptr %38(ptr nonnull %1)
  %40 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %39)
  %41 = load ptr, ptr %4, align 8
  %42 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %42, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 1
  store ptr %41, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 2
  store i64 %40, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 3
  store i64 %40, ptr %memberidx2.i.i, align 4
  call void @free(ptr %39)
  %43 = load i64, ptr %memberidx1.i.i, align 4
  %44 = icmp sgt i64 %43, 0
  br i1 %44, label %for.body.i, label %Map_string_int__hash_fnc.exit

for.body.i:                                       ; preds = %ifend, %for.body.i
  %i.0.i42 = phi i64 [ %51, %for.body.i ], [ 0, %ifend ]
  %hash.0.i41 = phi i64 [ %50, %for.body.i ], [ 0, %ifend ]
  %45 = shl i64 %hash.0.i41, 1
  %46 = load ptr, ptr %42, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i64 0, i32 2
  %47 = load ptr, ptr %memberidx2.i, align 8
  %48 = call i8 %47(ptr nonnull %42, i64 %i.0.i42)
  %49 = sext i8 %48 to i64
  %50 = add i64 %45, %49
  %51 = add nuw nsw i64 %i.0.i42, 1
  %52 = load i64, ptr %memberidx1.i.i, align 4
  %53 = icmp slt i64 %51, %52
  br i1 %53, label %for.body.i, label %Map_string_int__hash_fnc.exit

Map_string_int__hash_fnc.exit:                    ; preds = %for.body.i, %ifend
  %hash.0.i.lcssa = phi i64 [ 0, %ifend ], [ %50, %for.body.i ]
  %54 = call i64 @llvm.abs.i64(i64 %hash.0.i.lcssa, i1 false)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %55 = load i64, ptr %memberidx1, align 4
  %56 = srem i64 %54, %55
  %memberidx3 = getelementptr inbounds %Map_string_int_, ptr %0, i64 0, i32 1
  %57 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %57, i64 %56
  %58 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_int_, ptr %58, i64 0, i32 3
  %59 = load i1, ptr %memberidx4, align 1
  br i1 %59, label %while.end, label %while.entry.preheader

while.entry.preheader:                            ; preds = %Map_string_int__hash_fnc.exit
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend10
  %60 = phi ptr [ %57, %while.entry.preheader ], [ %78, %ifend10 ]
  %61 = phi i64 [ %55, %while.entry.preheader ], [ %79, %ifend10 ]
  %62 = phi ptr [ %58, %while.entry.preheader ], [ %82, %ifend10 ]
  %63 = phi i64 [ %56, %while.entry.preheader ], [ %81, %ifend10 ]
  %memberidx7 = getelementptr inbounds %Bucket_string_int_, ptr %62, i64 0, i32 1
  %64 = load ptr, ptr %memberidx7, align 8
  %memberidx.i33 = getelementptr inbounds %string, ptr %64, i64 0, i32 2
  %65 = load i64, ptr %memberidx.i33, align 4
  %66 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %65, %66
  br i1 %.not.i, label %ifend.i, label %ifend10

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i35 = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %67 = load ptr, ptr %memberidx2.i35, align 8
  %68 = load ptr, ptr %memberidx3.i, align 8
  %69 = call i64 @memcmp(ptr %67, ptr %68, i64 %65)
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %ifend.i.while.end.loopexit_crit_edge, label %ifend.i.ifend10_crit_edge

ifend.i.while.end.loopexit_crit_edge:             ; preds = %ifend.i
  %.pre44.pre = load ptr, ptr %memberidx3, align 8
  br label %while.end

ifend.i.ifend10_crit_edge:                        ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx1, align 4
  %.pre43 = load ptr, ptr %memberidx3, align 8
  br label %ifend10

while.end:                                        ; preds = %ifend10, %ifend.i.while.end.loopexit_crit_edge, %Map_string_int__hash_fnc.exit
  %71 = phi ptr [ %57, %Map_string_int__hash_fnc.exit ], [ %.pre44.pre, %ifend.i.while.end.loopexit_crit_edge ], [ %78, %ifend10 ]
  %72 = phi i64 [ %56, %Map_string_int__hash_fnc.exit ], [ %63, %ifend.i.while.end.loopexit_crit_edge ], [ %81, %ifend10 ]
  %73 = load i64, ptr %memberidx, align 4
  %74 = add i64 %73, 1
  store i64 %74, ptr %memberidx, align 4
  %ptridx18 = getelementptr inbounds ptr, ptr %71, i64 %72
  %75 = load ptr, ptr %ptridx18, align 8
  %76 = load ptr, ptr %75, align 8
  %77 = load ptr, ptr %76, align 8
  call void %77(ptr nonnull %75, ptr nonnull %1, i64 %2)
  ret void

ifend10:                                          ; preds = %ifend.i.ifend10_crit_edge, %while.entry
  %78 = phi ptr [ %.pre43, %ifend.i.ifend10_crit_edge ], [ %60, %while.entry ]
  %79 = phi i64 [ %.pre, %ifend.i.ifend10_crit_edge ], [ %61, %while.entry ]
  %80 = add i64 %63, 1
  %81 = srem i64 %80, %79
  %ptridx13 = getelementptr inbounds ptr, ptr %78, i64 %81
  %82 = load ptr, ptr %ptridx13, align 8
  %memberidx14 = getelementptr inbounds %Bucket_string_int_, ptr %82, i64 0, i32 3
  %83 = load i1, ptr %memberidx14, align 1
  br i1 %83, label %while.end, label %while.entry
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind willreturn writeonly
define internal void @Bucket_string_int__set(ptr nocapture writeonly %0, ptr %1, i64 %2) #8 {
  %memberidx = getelementptr inbounds %Bucket_string_int_, ptr %0, i64 0, i32 3
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %Bucket_string_int_, ptr %0, i64 0, i32 1
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_int_, ptr %0, i64 0, i32 2
  store i64 %2, ptr %memberidx2, align 4
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Bucket_string_int___find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Bucket_string_int__, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_int__, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal noalias ptr @Map_string_int__get_buckets(ptr nocapture readonly %0) {
for.entry:
  %1 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Bucket_string_int__, ptr %1, align 8
  %memberidx.i = getelementptr inbounds %Array_Bucket_string_int__, ptr %1, i64 0, i32 2
  %memberidx1.i = getelementptr inbounds %Array_Bucket_string_int__, ptr %1, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_Bucket_string_int__, ptr %1, i64 0, i32 1
  %2 = tail call ptr @malloc(i32 64)
  store ptr %2, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %memberidx2 = getelementptr inbounds %Map_string_int_, ptr %0, i64 0, i32 3
  %3 = load i64, ptr %memberidx2, align 4
  %4 = icmp sgt i64 %3, 0
  br i1 %4, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx3 = getelementptr inbounds %Map_string_int_, ptr %0, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %5 = phi i64 [ %3, %for.body.lr.ph ], [ %19, %ifend ]
  %6 = phi ptr [ %2, %for.body.lr.ph ], [ %20, %ifend ]
  %7 = phi ptr [ %2, %for.body.lr.ph ], [ %21, %ifend ]
  %8 = phi i64 [ 8, %for.body.lr.ph ], [ %22, %ifend ]
  %9 = phi i64 [ 0, %for.body.lr.ph ], [ %23, %ifend ]
  %i.011 = phi i64 [ 0, %for.body.lr.ph ], [ %24, %ifend ]
  %10 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %i.011
  %11 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_int_, ptr %11, i64 0, i32 3
  %12 = load i1, ptr %memberidx4, align 1
  br i1 %12, label %ifend, label %if.entry

for.end:                                          ; preds = %ifend, %for.entry
  ret ptr %1

if.entry:                                         ; preds = %for.body
  %.not.i = icmp slt i64 %9, %8
  br i1 %.not.i, label %Array_Bucket_string_int_____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %if.entry
  %13 = shl i64 %8, 1
  store i64 %13, ptr %memberidx1.i, align 4
  %14 = shl i64 %8, 4
  %15 = tail call ptr @realloc(ptr %7, i64 %14)
  store ptr %15, ptr %memberidx2.i, align 8
  br label %Array_Bucket_string_int_____sl__.exit

Array_Bucket_string_int_____sl__.exit:            ; preds = %if.entry, %if.entry.i
  %16 = phi ptr [ %6, %if.entry ], [ %15, %if.entry.i ]
  %17 = phi i64 [ %8, %if.entry ], [ %13, %if.entry.i ]
  %18 = add i64 %9, 1
  store i64 %18, ptr %memberidx.i, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %16, i64 %9
  store ptr %11, ptr %ptridx.i, align 8
  %.pre = load i64, ptr %memberidx2, align 4
  br label %ifend

ifend:                                            ; preds = %for.body, %Array_Bucket_string_int_____sl__.exit
  %19 = phi i64 [ %5, %for.body ], [ %.pre, %Array_Bucket_string_int_____sl__.exit ]
  %20 = phi ptr [ %6, %for.body ], [ %16, %Array_Bucket_string_int_____sl__.exit ]
  %21 = phi ptr [ %7, %for.body ], [ %16, %Array_Bucket_string_int_____sl__.exit ]
  %22 = phi i64 [ %8, %for.body ], [ %17, %Array_Bucket_string_int_____sl__.exit ]
  %23 = phi i64 [ %9, %for.body ], [ %18, %Array_Bucket_string_int_____sl__.exit ]
  %24 = add nuw nsw i64 %i.011, 1
  %25 = icmp slt i64 %24, %19
  br i1 %25, label %for.body, label %for.end
}

define internal i64 @Map_string_int__get(ptr nocapture readonly %0, ptr %1) {
  %3 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %4 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i64 0, i32 5
  %5 = load ptr, ptr %memberidx.i, align 8
  %6 = tail call ptr %5(ptr nonnull %1)
  %7 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @22, ptr %6)
  %8 = load ptr, ptr %3, align 8
  %9 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %9, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 1
  store ptr %8, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 2
  store i64 %7, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 3
  store i64 %7, ptr %memberidx2.i.i, align 4
  call void @free(ptr %6)
  %10 = load i64, ptr %memberidx1.i.i, align 4
  %11 = icmp sgt i64 %10, 0
  br i1 %11, label %for.body.i, label %Map_string_int__hash_fnc.exit

for.body.i:                                       ; preds = %2, %for.body.i
  %i.0.i36 = phi i64 [ %18, %for.body.i ], [ 0, %2 ]
  %hash.0.i35 = phi i64 [ %17, %for.body.i ], [ 0, %2 ]
  %12 = shl i64 %hash.0.i35, 1
  %13 = load ptr, ptr %9, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i64 0, i32 2
  %14 = load ptr, ptr %memberidx2.i, align 8
  %15 = call i8 %14(ptr nonnull %9, i64 %i.0.i36)
  %16 = sext i8 %15 to i64
  %17 = add i64 %12, %16
  %18 = add nuw nsw i64 %i.0.i36, 1
  %19 = load i64, ptr %memberidx1.i.i, align 4
  %20 = icmp slt i64 %18, %19
  br i1 %20, label %for.body.i, label %Map_string_int__hash_fnc.exit

Map_string_int__hash_fnc.exit:                    ; preds = %for.body.i, %2
  %hash.0.i.lcssa = phi i64 [ 0, %2 ], [ %17, %for.body.i ]
  %21 = call i64 @llvm.abs.i64(i64 %hash.0.i.lcssa, i1 false)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %memberidx = getelementptr inbounds %Map_string_int_, ptr %0, i64 0, i32 3
  %22 = load i64, ptr %memberidx, align 4
  %23 = srem i64 %21, %22
  %memberidx1 = getelementptr inbounds %Map_string_int_, ptr %0, i64 0, i32 1
  %24 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %24, i64 %23
  %25 = load ptr, ptr %ptridx, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_int_, ptr %25, i64 0, i32 3
  %26 = load i1, ptr %memberidx2, align 1
  br i1 %26, label %common.ret, label %while.entry.preheader

while.entry.preheader:                            ; preds = %Map_string_int__hash_fnc.exit
  %memberidx1.i33 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %else
  %27 = phi ptr [ %37, %else ], [ %24, %while.entry.preheader ]
  %28 = phi i64 [ %38, %else ], [ %22, %while.entry.preheader ]
  %29 = phi ptr [ %41, %else ], [ %25, %while.entry.preheader ]
  %hash.0 = phi i64 [ %40, %else ], [ %23, %while.entry.preheader ]
  %memberidx5 = getelementptr inbounds %Bucket_string_int_, ptr %29, i64 0, i32 1
  %30 = load ptr, ptr %memberidx5, align 8
  %memberidx.i32 = getelementptr inbounds %string, ptr %30, i64 0, i32 2
  %31 = load i64, ptr %memberidx.i32, align 4
  %32 = load i64, ptr %memberidx1.i33, align 4
  %.not.i = icmp eq i64 %31, %32
  br i1 %.not.i, label %ifend.i, label %else

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i34 = getelementptr inbounds %string, ptr %30, i64 0, i32 1
  %33 = load ptr, ptr %memberidx2.i34, align 8
  %34 = load ptr, ptr %memberidx3.i, align 8
  %35 = call i64 @memcmp(ptr %33, ptr %34, i64 %31)
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %while.end, label %ifend.i.else_crit_edge

ifend.i.else_crit_edge:                           ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx, align 4
  %.pre37 = load ptr, ptr %memberidx1, align 8
  br label %else

while.end:                                        ; preds = %ifend.i
  %.pre38.pre = load ptr, ptr %memberidx1, align 8
  %ptridx11.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre38.pre, i64 %hash.0
  %.pre39.pre = load ptr, ptr %ptridx11.phi.trans.insert.phi.trans.insert, align 8
  %memberidx12.phi.trans.insert.phi.trans.insert = getelementptr inbounds %Bucket_string_int_, ptr %.pre39.pre, i64 0, i32 3
  %.pre40.pre = load i1, ptr %memberidx12.phi.trans.insert.phi.trans.insert, align 1
  br i1 %.pre40.pre, label %common.ret, label %if.entry13

else:                                             ; preds = %ifend.i.else_crit_edge, %while.entry
  %37 = phi ptr [ %.pre37, %ifend.i.else_crit_edge ], [ %27, %while.entry ]
  %38 = phi i64 [ %.pre, %ifend.i.else_crit_edge ], [ %28, %while.entry ]
  %39 = add i64 %hash.0, 1
  %40 = srem i64 %39, %38
  %ptridx8 = getelementptr inbounds ptr, ptr %37, i64 %40
  %41 = load ptr, ptr %ptridx8, align 8
  %memberidx9 = getelementptr inbounds %Bucket_string_int_, ptr %41, i64 0, i32 3
  %42 = load i1, ptr %memberidx9, align 1
  br i1 %42, label %common.ret, label %while.entry

common.ret:                                       ; preds = %else, %Map_string_int__hash_fnc.exit, %while.end, %if.entry13
  %common.ret.op = phi i64 [ %43, %if.entry13 ], [ 0, %while.end ], [ 0, %Map_string_int__hash_fnc.exit ], [ 0, %else ]
  ret i64 %common.ret.op

if.entry13:                                       ; preds = %while.end
  %memberidx18 = getelementptr inbounds %Bucket_string_int_, ptr %.pre39.pre, i64 0, i32 2
  %43 = load i64, ptr %memberidx18, align 4
  br label %common.ret
}

define internal fastcc void @CodeGen_codegen_class(ptr nocapture %0, ptr nocapture readonly %1) unnamed_addr {
for.entry:
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = alloca ptr, align 8
  %11 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 8
  %12 = load ptr, ptr %memberidx.i, align 8
  %13 = load ptr, ptr %12, align 8
  %memberidx1.i = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %13, i64 0, i32 1
  %14 = load ptr, ptr %memberidx1.i, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10)
  %15 = load i64, ptr %11, align 4
  %memberidx1.i.i = getelementptr inbounds %TypeId, ptr %11, i64 0, i32 1
  %16 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %TypeId, ptr %11, i64 0, i32 2
  %17 = load i64, ptr %memberidx2.i.i, align 4
  %18 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %10, ptr nonnull @276, i64 %15, i64 %16, i64 %17)
  %19 = load ptr, ptr %10, align 8
  %20 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %20, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 1
  store ptr %19, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 2
  store i64 %18, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 3
  store i64 %18, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10)
  %21 = call ptr %14(ptr nonnull %12, ptr nonnull %20)
  %memberidx1 = getelementptr inbounds %Class, ptr %1, i64 0, i32 5
  %22 = load ptr, ptr %memberidx1, align 8
  %23 = call ptr @malloc(i32 33)
  %memberidx.i99 = getelementptr inbounds %Array_ClassMethod_, ptr %22, i64 0, i32 1
  %24 = load ptr, ptr %memberidx.i99, align 8
  %memberidx1.i100 = getelementptr inbounds %Array_ClassMethod_, ptr %22, i64 0, i32 2
  %25 = load i64, ptr %memberidx1.i100, align 4
  store ptr @VTableArrayIterator_ClassMethod_, ptr %23, align 8
  %memberidx.i.i = getelementptr inbounds %Iterator_ClassMethod_, ptr %23, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i, align 1
  %memberidx1.i.i101 = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %23, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i101, align 4
  %memberidx2.i.i102 = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %23, i64 0, i32 4
  store ptr %24, ptr %memberidx2.i.i102, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_ClassMethod_, ptr %23, i64 0, i32 3
  store i64 %25, ptr %memberidx3.i.i, align 4
  %26 = load ptr, ptr @VTableArrayIterator_ClassMethod_, align 8
  %27 = call ptr %26(ptr nonnull %23)
  %28 = load i1, ptr %memberidx.i.i, align 1
  br i1 %28, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx6 = getelementptr inbounds %CGClassType, ptr %21, i64 0, i32 3
  %memberidx10 = getelementptr inbounds %Class, ptr %1, i64 0, i32 1
  %memberidx20 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %memberidx.i127 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 6
  %memberidx27 = getelementptr inbounds %CGClassType, ptr %21, i64 0, i32 4
  %memberidx33 = getelementptr inbounds %Class, ptr %1, i64 0, i32 2
  %memberidx46 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 10
  %memberidx60 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 1
  %memberidx.i161 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 5
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.incr
  %method.0190 = phi ptr [ %27, %for.body.lr.ph ], [ %32, %for.incr ]
  %memberidx4 = getelementptr inbounds %ClassMethod, ptr %method.0190, i64 0, i32 7
  %29 = load i1, ptr %memberidx4, align 1
  br i1 %29, label %for.incr, label %ifend

for.incr:                                         ; preds = %for.body, %CodeGen_codegen_block.exit
  %30 = load ptr, ptr %23, align 8
  %31 = load ptr, ptr %30, align 8
  %32 = call ptr %31(ptr nonnull %23)
  %33 = load i1, ptr %memberidx.i.i, align 1
  br i1 %33, label %for.end, label %for.body

for.end:                                          ; preds = %for.incr, %for.entry
  tail call void @free(ptr nonnull %23)
  ret void

ifend:                                            ; preds = %for.body
  %34 = load ptr, ptr %method.0190, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9)
  %memberidx.i103 = getelementptr inbounds %PropId, ptr %34, i64 0, i32 1
  %35 = load ptr, ptr %memberidx.i103, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8)
  %36 = load i64, ptr %35, align 4
  %memberidx1.i.i104 = getelementptr inbounds %TypeId, ptr %35, i64 0, i32 1
  %37 = load i64, ptr %memberidx1.i.i104, align 4
  %memberidx2.i.i105 = getelementptr inbounds %TypeId, ptr %35, i64 0, i32 2
  %38 = load i64, ptr %memberidx2.i.i105, align 4
  %39 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %8, ptr nonnull @276, i64 %36, i64 %37, i64 %38)
  %40 = load ptr, ptr %8, align 8
  %41 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %41, align 8
  %memberidx.i.i.i106 = getelementptr inbounds %string, ptr %41, i64 0, i32 1
  store ptr %40, ptr %memberidx.i.i.i106, align 8
  %memberidx1.i.i.i107 = getelementptr inbounds %string, ptr %41, i64 0, i32 2
  store i64 %39, ptr %memberidx1.i.i.i107, align 4
  %memberidx2.i.i.i108 = getelementptr inbounds %string, ptr %41, i64 0, i32 3
  store i64 %39, ptr %memberidx2.i.i.i108, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8)
  %42 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %43 = call ptr %42(ptr nonnull %41)
  %44 = load i64, ptr %34, align 4
  %memberidx3.i = getelementptr inbounds %PropId, ptr %34, i64 0, i32 2
  %45 = load i64, ptr %memberidx3.i, align 4
  %46 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %9, ptr nonnull @291, ptr %43, i64 %44, i64 %45)
  %47 = load ptr, ptr %9, align 8
  %48 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %48, align 8
  %memberidx.i.i110 = getelementptr inbounds %string, ptr %48, i64 0, i32 1
  store ptr %47, ptr %memberidx.i.i110, align 8
  %memberidx1.i6.i = getelementptr inbounds %string, ptr %48, i64 0, i32 2
  store i64 %46, ptr %memberidx1.i6.i, align 4
  %memberidx2.i7.i = getelementptr inbounds %string, ptr %48, i64 0, i32 3
  store i64 %46, ptr %memberidx2.i7.i, align 4
  call void @free(ptr %43)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9)
  %49 = load ptr, ptr %memberidx6, align 8
  %50 = load ptr, ptr %49, align 8
  %memberidx7 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %50, i64 0, i32 1
  %51 = load ptr, ptr %memberidx7, align 8
  %52 = call ptr %51(ptr nonnull %49, ptr nonnull %48)
  %memberidx8 = getelementptr inbounds %ClassMethod, ptr %method.0190, i64 0, i32 3
  %53 = load ptr, ptr %memberidx8, align 8
  %54 = call ptr @malloc(i32 88)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(11) %54, ptr noundef nonnull align 8 dereferenceable(11) @192, i64 11, i1 false)
  %55 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %55, align 8
  %memberidx.i.i111 = getelementptr inbounds %string, ptr %55, i64 0, i32 1
  store ptr %54, ptr %memberidx.i.i111, align 8
  %memberidx1.i.i112 = getelementptr inbounds %string, ptr %55, i64 0, i32 2
  store i64 11, ptr %memberidx1.i.i112, align 4
  %memberidx2.i.i113 = getelementptr inbounds %string, ptr %55, i64 0, i32 3
  store i64 11, ptr %memberidx2.i.i113, align 4
  %memberidx.i114 = getelementptr inbounds %string, ptr %53, i64 0, i32 2
  %56 = load i64, ptr %memberidx.i114, align 4
  %.not.i = icmp eq i64 %56, 11
  br i1 %.not.i, label %ifend.i, label %string___eq__.exit

ifend.i:                                          ; preds = %ifend
  %memberidx2.i = getelementptr inbounds %string, ptr %53, i64 0, i32 1
  %57 = load ptr, ptr %memberidx2.i, align 8
  %58 = call i64 @memcmp(ptr %57, ptr nonnull %54, i64 11)
  %59 = icmp eq i64 %58, 0
  br label %string___eq__.exit

string___eq__.exit:                               ; preds = %ifend, %ifend.i
  %common.ret.op.i = phi i1 [ %59, %ifend.i ], [ false, %ifend ]
  %60 = load ptr, ptr %0, align 8
  %61 = load ptr, ptr %memberidx10, align 8
  %62 = load ptr, ptr %61, align 8
  %memberidx11 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %62, i64 0, i32 5
  %63 = load ptr, ptr %memberidx11, align 8
  %64 = call ptr %63(ptr nonnull %61)
  %65 = load ptr, ptr %memberidx8, align 8
  %66 = load ptr, ptr %65, align 8
  %memberidx13 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %66, i64 0, i32 5
  %67 = load ptr, ptr %memberidx13, align 8
  %68 = call ptr %67(ptr nonnull %65)
  %69 = alloca ptr, align 8
  %70 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %69, ptr nonnull @149, ptr %64, ptr %68)
  %71 = load ptr, ptr %69, align 8
  %72 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %72, align 8
  %memberidx.i117 = getelementptr inbounds %string, ptr %72, i64 0, i32 1
  store ptr %71, ptr %memberidx.i117, align 8
  %memberidx1.i118 = getelementptr inbounds %string, ptr %72, i64 0, i32 2
  store i64 %70, ptr %memberidx1.i118, align 4
  %memberidx2.i119 = getelementptr inbounds %string, ptr %72, i64 0, i32 3
  store i64 %70, ptr %memberidx2.i119, align 4
  tail call void @free(ptr %64)
  tail call void @free(ptr %68)
  %73 = load ptr, ptr %72, align 8
  %memberidx14 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %73, i64 0, i32 5
  %74 = load ptr, ptr %memberidx14, align 8
  %75 = call ptr %74(ptr nonnull %72)
  %76 = call ptr @LLVMGetNamedFunction(ptr %60, ptr %75)
  %77 = call ptr @LLVMAppendBasicBlock(ptr %76, ptr nonnull @27)
  %78 = call ptr @LLVMCreateBuilder()
  call void @LLVMPositionBuilderAtEnd(ptr %78, ptr %77)
  %memberidx15 = getelementptr inbounds %ClassMethod, ptr %method.0190, i64 0, i32 1
  %79 = load i1, ptr %memberidx15, align 1
  br i1 %79, label %for.entry48, label %if.entry16

if.entry16:                                       ; preds = %string___eq__.exit
  %80 = load ptr, ptr %21, align 8
  %81 = call ptr @LLVMPointerType(ptr %80, i64 0)
  %82 = call ptr @LLVMGetParam(ptr %76, i64 0)
  %83 = call ptr @LLVMBuildAlloca(ptr %78, ptr %81, ptr nonnull @134)
  %84 = load ptr, ptr %memberidx20, align 8
  %memberidx21 = getelementptr inbounds %ClassMethod, ptr %method.0190, i64 0, i32 8
  %85 = load ptr, ptr %memberidx21, align 8
  %memberidx.i120 = getelementptr inbounds %Program, ptr %84, i64 0, i32 1
  %86 = load ptr, ptr %memberidx.i120, align 8
  %87 = load i64, ptr %85, align 4
  %memberidx.i.i121 = getelementptr inbounds %Array_Module_, ptr %86, i64 0, i32 1
  %88 = load ptr, ptr %memberidx.i.i121, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %88, i64 %87
  %89 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i122 = getelementptr inbounds %Module, ptr %89, i64 0, i32 7
  %90 = load ptr, ptr %memberidx2.i122, align 8
  %memberidx3.i123 = getelementptr inbounds %ScopeId, ptr %85, i64 0, i32 1
  %91 = load i64, ptr %memberidx3.i123, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Scope_, ptr %90, i64 0, i32 1
  %92 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %92, i64 %91
  %93 = load ptr, ptr %ptridx.i6.i, align 8
  %memberidx22 = getelementptr inbounds %Scope, ptr %93, i64 0, i32 1
  %94 = load ptr, ptr %memberidx22, align 8
  %95 = load ptr, ptr %94, align 8
  %memberidx23 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %95, i64 0, i32 1
  %96 = load ptr, ptr %memberidx23, align 8
  %97 = call ptr @malloc(i32 32)
  store i32 1936287860, ptr %97, align 8
  %98 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %98, align 8
  %memberidx.i.i124 = getelementptr inbounds %string, ptr %98, i64 0, i32 1
  store ptr %97, ptr %memberidx.i.i124, align 8
  %memberidx1.i.i125 = getelementptr inbounds %string, ptr %98, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i125, align 4
  %memberidx2.i.i126 = getelementptr inbounds %string, ptr %98, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i126, align 4
  %99 = call ptr %96(ptr nonnull %94, ptr nonnull %98)
  %100 = call ptr @LLVMBuildStore(ptr %78, ptr %82, ptr %83)
  %101 = load ptr, ptr %memberidx.i127, align 8
  %102 = load ptr, ptr %101, align 8
  %103 = load ptr, ptr %102, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  %memberidx.i.i128 = getelementptr inbounds %VarId, ptr %99, i64 0, i32 1
  %104 = load i64, ptr %memberidx.i.i128, align 4
  %105 = load i64, ptr %99, align 4
  %memberidx2.i.i129 = getelementptr inbounds %VarId, ptr %99, i64 0, i32 2
  %106 = load i64, ptr %memberidx2.i.i129, align 4
  %107 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %7, ptr nonnull @276, i64 %104, i64 %105, i64 %106)
  %108 = load ptr, ptr %7, align 8
  %109 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %109, align 8
  %memberidx.i.i.i130 = getelementptr inbounds %string, ptr %109, i64 0, i32 1
  store ptr %108, ptr %memberidx.i.i.i130, align 8
  %memberidx1.i.i.i131 = getelementptr inbounds %string, ptr %109, i64 0, i32 2
  store i64 %107, ptr %memberidx1.i.i.i131, align 4
  %memberidx2.i.i.i132 = getelementptr inbounds %string, ptr %109, i64 0, i32 3
  store i64 %107, ptr %memberidx2.i.i.i132, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7)
  call void %103(ptr nonnull %101, ptr nonnull %109, ptr %83)
  br i1 %common.ret.op.i, label %if.entry24, label %for.entry48

if.entry24:                                       ; preds = %if.entry16
  %110 = load ptr, ptr %memberidx27, align 8
  %.not = icmp eq ptr %110, null
  br i1 %.not, label %ifend30, label %if.entry28

if.entry28:                                       ; preds = %if.entry24
  %index = alloca [1 x ptr], align 8
  %111 = call ptr @LLVMIntType(i64 64)
  %112 = call ptr @LLVMConstInt(ptr %111, i64 0, i1 false)
  store ptr %112, ptr %index, align 8
  %113 = call ptr @LLVMBuildInBoundsGEP2(ptr %78, ptr %81, ptr %82, ptr nonnull %index, i64 1, ptr nonnull @27)
  %114 = load ptr, ptr %memberidx27, align 8
  %115 = call ptr @LLVMBuildStore(ptr %78, ptr %114, ptr %113)
  br label %ifend30

ifend30:                                          ; preds = %if.entry24, %if.entry28
  %116 = load ptr, ptr %memberidx33, align 8
  %.not97 = icmp eq ptr %116, null
  br i1 %.not97, label %for.entry48, label %if.entry34

if.entry34:                                       ; preds = %ifend30
  %117 = load ptr, ptr %memberidx20, align 8
  %118 = load ptr, ptr %memberidx21, align 8
  %memberidx.i133 = getelementptr inbounds %Program, ptr %117, i64 0, i32 1
  %119 = load ptr, ptr %memberidx.i133, align 8
  %120 = load i64, ptr %118, align 4
  %memberidx.i.i134 = getelementptr inbounds %Array_Module_, ptr %119, i64 0, i32 1
  %121 = load ptr, ptr %memberidx.i.i134, align 8
  %ptridx.i.i135 = getelementptr inbounds ptr, ptr %121, i64 %120
  %122 = load ptr, ptr %ptridx.i.i135, align 8
  %memberidx2.i136 = getelementptr inbounds %Module, ptr %122, i64 0, i32 7
  %123 = load ptr, ptr %memberidx2.i136, align 8
  %memberidx3.i137 = getelementptr inbounds %ScopeId, ptr %118, i64 0, i32 1
  %124 = load i64, ptr %memberidx3.i137, align 4
  %memberidx.i5.i138 = getelementptr inbounds %Array_Scope_, ptr %123, i64 0, i32 1
  %125 = load ptr, ptr %memberidx.i5.i138, align 8
  %ptridx.i6.i139 = getelementptr inbounds ptr, ptr %125, i64 %124
  %126 = load ptr, ptr %ptridx.i6.i139, align 8
  %memberidx39 = getelementptr inbounds %Scope, ptr %126, i64 0, i32 1
  %127 = load ptr, ptr %memberidx39, align 8
  %128 = load ptr, ptr %127, align 8
  %memberidx40 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %128, i64 0, i32 1
  %129 = load ptr, ptr %memberidx40, align 8
  %130 = call ptr @malloc(i32 40)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %130, ptr noundef nonnull align 8 dereferenceable(5) @196, i64 5, i1 false)
  %131 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %131, align 8
  %memberidx.i.i140 = getelementptr inbounds %string, ptr %131, i64 0, i32 1
  store ptr %130, ptr %memberidx.i.i140, align 8
  %memberidx1.i.i141 = getelementptr inbounds %string, ptr %131, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i141, align 4
  %memberidx2.i.i142 = getelementptr inbounds %string, ptr %131, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i142, align 4
  %132 = call ptr %129(ptr nonnull %127, ptr nonnull %131)
  %.not98 = icmp eq ptr %132, null
  br i1 %.not98, label %for.entry48, label %if.entry41

if.entry41:                                       ; preds = %if.entry34
  %memberidx44 = getelementptr inbounds %ObjectType, ptr %116, i64 0, i32 1
  %133 = load ptr, ptr %memberidx44, align 8
  %134 = load ptr, ptr %memberidx.i, align 8
  %135 = load ptr, ptr %134, align 8
  %memberidx1.i176 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %135, i64 0, i32 1
  %136 = load ptr, ptr %memberidx1.i176, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %137 = load i64, ptr %133, align 4
  %memberidx1.i.i177 = getelementptr inbounds %TypeId, ptr %133, i64 0, i32 1
  %138 = load i64, ptr %memberidx1.i.i177, align 4
  %memberidx2.i.i178 = getelementptr inbounds %TypeId, ptr %133, i64 0, i32 2
  %139 = load i64, ptr %memberidx2.i.i178, align 4
  %140 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @276, i64 %137, i64 %138, i64 %139)
  %141 = load ptr, ptr %3, align 8
  %142 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %142, align 8
  %memberidx.i.i.i179 = getelementptr inbounds %string, ptr %142, i64 0, i32 1
  store ptr %141, ptr %memberidx.i.i.i179, align 8
  %memberidx1.i.i.i180 = getelementptr inbounds %string, ptr %142, i64 0, i32 2
  store i64 %140, ptr %memberidx1.i.i.i180, align 4
  %memberidx2.i.i.i181 = getelementptr inbounds %string, ptr %142, i64 0, i32 3
  store i64 %140, ptr %memberidx2.i.i.i181, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %143 = call ptr %136(ptr nonnull %134, ptr nonnull %142)
  %.not.i167 = icmp eq ptr %143, null
  br i1 %.not.i167, label %ifend.i174, label %CodeGen_get_or_codegen_class_from_typeid.exit

ifend.i174:                                       ; preds = %if.entry41
  %144 = load ptr, ptr %memberidx20, align 8
  %memberidx.i.i170 = getelementptr inbounds %Program, ptr %144, i64 0, i32 1
  %145 = load ptr, ptr %memberidx.i.i170, align 8
  %146 = load i64, ptr %133, align 4
  %memberidx.i.i.i171 = getelementptr inbounds %Array_Module_, ptr %145, i64 0, i32 1
  %147 = load ptr, ptr %memberidx.i.i.i171, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %147, i64 %146
  %148 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i172 = getelementptr inbounds %Module, ptr %148, i64 0, i32 4
  %149 = load ptr, ptr %memberidx2.i.i172, align 8
  %150 = load i64, ptr %memberidx2.i.i178, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %149, i64 0, i32 1
  %151 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %151, i64 %150
  %152 = load ptr, ptr %ptridx.i6.i.i, align 8
  call fastcc void @CodeGen_declare_class(ptr nonnull %0, ptr %152)
  call fastcc void @CodeGen_codegen_class(ptr nonnull %0, ptr %152)
  %153 = load ptr, ptr %152, align 8
  %154 = load ptr, ptr %memberidx.i, align 8
  %155 = load ptr, ptr %154, align 8
  %memberidx1.i.i183 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %155, i64 0, i32 1
  %156 = load ptr, ptr %memberidx1.i.i183, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2)
  %157 = load i64, ptr %153, align 4
  %memberidx1.i.i.i184 = getelementptr inbounds %TypeId, ptr %153, i64 0, i32 1
  %158 = load i64, ptr %memberidx1.i.i.i184, align 4
  %memberidx2.i.i.i185 = getelementptr inbounds %TypeId, ptr %153, i64 0, i32 2
  %159 = load i64, ptr %memberidx2.i.i.i185, align 4
  %160 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %2, ptr nonnull @276, i64 %157, i64 %158, i64 %159)
  %161 = load ptr, ptr %2, align 8
  %162 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %162, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %string, ptr %162, i64 0, i32 1
  store ptr %161, ptr %memberidx.i.i.i.i, align 8
  %memberidx1.i.i.i.i = getelementptr inbounds %string, ptr %162, i64 0, i32 2
  store i64 %160, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %string, ptr %162, i64 0, i32 3
  store i64 %160, ptr %memberidx2.i.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2)
  %163 = call ptr %156(ptr nonnull %154, ptr nonnull %162)
  br label %CodeGen_get_or_codegen_class_from_typeid.exit

CodeGen_get_or_codegen_class_from_typeid.exit:    ; preds = %if.entry41, %ifend.i174
  %common.ret.op.i168 = phi ptr [ %163, %ifend.i174 ], [ %143, %if.entry41 ]
  %memberidx45 = getelementptr inbounds %CGClassType, ptr %common.ret.op.i168, i64 0, i32 6
  %164 = load ptr, ptr %memberidx45, align 8
  %165 = call ptr @LLVMBuildAlloca(ptr %78, ptr %81, ptr nonnull @196)
  %166 = call ptr @LLVMBuildStore(ptr %78, ptr %164, ptr %165)
  %167 = load ptr, ptr %memberidx.i127, align 8
  %168 = load ptr, ptr %167, align 8
  %169 = load ptr, ptr %168, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %memberidx.i.i144 = getelementptr inbounds %VarId, ptr %132, i64 0, i32 1
  %170 = load i64, ptr %memberidx.i.i144, align 4
  %171 = load i64, ptr %132, align 4
  %memberidx2.i.i145 = getelementptr inbounds %VarId, ptr %132, i64 0, i32 2
  %172 = load i64, ptr %memberidx2.i.i145, align 4
  %173 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %6, ptr nonnull @276, i64 %170, i64 %171, i64 %172)
  %174 = load ptr, ptr %6, align 8
  %175 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %175, align 8
  %memberidx.i.i.i146 = getelementptr inbounds %string, ptr %175, i64 0, i32 1
  store ptr %174, ptr %memberidx.i.i.i146, align 8
  %memberidx1.i.i.i147 = getelementptr inbounds %string, ptr %175, i64 0, i32 2
  store i64 %173, ptr %memberidx1.i.i.i147, align 4
  %memberidx2.i.i.i148 = getelementptr inbounds %string, ptr %175, i64 0, i32 3
  store i64 %173, ptr %memberidx2.i.i.i148, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  call void %169(ptr nonnull %167, ptr nonnull %175, ptr %165)
  %176 = load ptr, ptr %memberidx46, align 8
  %177 = load ptr, ptr %176, align 8
  %178 = load ptr, ptr %177, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %179 = load i64, ptr %memberidx.i.i144, align 4
  %180 = load i64, ptr %132, align 4
  %181 = load i64, ptr %memberidx2.i.i145, align 4
  %182 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @276, i64 %179, i64 %180, i64 %181)
  %183 = load ptr, ptr %5, align 8
  %184 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %184, align 8
  %memberidx.i.i151 = getelementptr inbounds %string, ptr %184, i64 0, i32 1
  store ptr %183, ptr %memberidx.i.i151, align 8
  %memberidx1.i.i152 = getelementptr inbounds %string, ptr %184, i64 0, i32 2
  store i64 %182, ptr %memberidx1.i.i152, align 4
  %memberidx2.i.i153 = getelementptr inbounds %string, ptr %184, i64 0, i32 3
  store i64 %182, ptr %memberidx2.i.i153, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  call void %178(ptr nonnull %176, ptr nonnull %184, ptr %82)
  br label %for.entry48

for.entry48:                                      ; preds = %if.entry16, %ifend30, %if.entry34, %CodeGen_get_or_codegen_class_from_typeid.exit, %string___eq__.exit
  %185 = phi i64 [ 0, %string___eq__.exit ], [ 1, %CodeGen_get_or_codegen_class_from_typeid.exit ], [ 1, %if.entry34 ], [ 1, %ifend30 ], [ 1, %if.entry16 ]
  %memberidx53 = getelementptr inbounds %ClassMethod, ptr %method.0190, i64 0, i32 6
  %186 = load ptr, ptr %memberidx53, align 8
  %memberidx54187 = getelementptr inbounds %Array_FunctionArg_, ptr %186, i64 0, i32 2
  %187 = load i64, ptr %memberidx54187, align 4
  %188 = icmp sgt i64 %187, 0
  br i1 %188, label %for.body50, label %for.end52

for.body50:                                       ; preds = %for.entry48, %for.body50
  %189 = phi ptr [ %213, %for.body50 ], [ %186, %for.entry48 ]
  %storemerge188 = phi i64 [ %212, %for.body50 ], [ 0, %for.entry48 ]
  %memberidx.i154 = getelementptr inbounds %Array_FunctionArg_, ptr %189, i64 0, i32 1
  %190 = load ptr, ptr %memberidx.i154, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %190, i64 %storemerge188
  %191 = load ptr, ptr %ptridx.i, align 8
  %192 = add nuw i64 %185, %storemerge188
  %193 = call ptr @LLVMGetParam(ptr %76, i64 %192)
  %memberidx56 = getelementptr inbounds %Expression, ptr %191, i64 0, i32 3
  %194 = load ptr, ptr %memberidx56, align 8
  %195 = call fastcc ptr @CodeGen_codegen_type(ptr nonnull %0, ptr %194, i1 true)
  %memberidx57 = getelementptr inbounds %FunctionArg, ptr %191, i64 0, i32 5
  %196 = load ptr, ptr %memberidx57, align 8
  %197 = load ptr, ptr %196, align 8
  %memberidx58 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %197, i64 0, i32 5
  %198 = load ptr, ptr %memberidx58, align 8
  %199 = call ptr %198(ptr nonnull %196)
  %200 = call ptr @LLVMBuildAlloca(ptr %78, ptr %195, ptr %199)
  %201 = call ptr @LLVMBuildStore(ptr %78, ptr %193, ptr %200)
  %memberidx59 = getelementptr inbounds %FunctionArg, ptr %191, i64 0, i32 4
  %202 = load ptr, ptr %memberidx59, align 8
  %203 = load ptr, ptr %memberidx.i127, align 8
  %204 = load ptr, ptr %203, align 8
  %205 = load ptr, ptr %204, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %memberidx.i.i156 = getelementptr inbounds %VarId, ptr %202, i64 0, i32 1
  %206 = load i64, ptr %memberidx.i.i156, align 4
  %207 = load i64, ptr %202, align 4
  %memberidx2.i.i157 = getelementptr inbounds %VarId, ptr %202, i64 0, i32 2
  %208 = load i64, ptr %memberidx2.i.i157, align 4
  %209 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @276, i64 %206, i64 %207, i64 %208)
  %210 = load ptr, ptr %4, align 8
  %211 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %211, align 8
  %memberidx.i.i.i158 = getelementptr inbounds %string, ptr %211, i64 0, i32 1
  store ptr %210, ptr %memberidx.i.i.i158, align 8
  %memberidx1.i.i.i159 = getelementptr inbounds %string, ptr %211, i64 0, i32 2
  store i64 %209, ptr %memberidx1.i.i.i159, align 4
  %memberidx2.i.i.i160 = getelementptr inbounds %string, ptr %211, i64 0, i32 3
  store i64 %209, ptr %memberidx2.i.i.i160, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  call void %205(ptr nonnull %203, ptr nonnull %211, ptr %200)
  %212 = add nuw nsw i64 %storemerge188, 1
  %213 = load ptr, ptr %memberidx53, align 8
  %memberidx54 = getelementptr inbounds %Array_FunctionArg_, ptr %213, i64 0, i32 2
  %214 = load i64, ptr %memberidx54, align 4
  %215 = icmp slt i64 %212, %214
  br i1 %215, label %for.body50, label %for.end52

for.end52:                                        ; preds = %for.body50, %for.entry48
  %216 = load ptr, ptr %memberidx60, align 8
  store ptr %76, ptr %memberidx60, align 8
  %memberidx62 = getelementptr inbounds %ClassMethod, ptr %method.0190, i64 0, i32 5
  %217 = load ptr, ptr %memberidx62, align 8
  %218 = load i1, ptr %memberidx.i161, align 1
  store i1 false, ptr %memberidx.i161, align 1
  %219 = load ptr, ptr %217, align 8
  %220 = call ptr @malloc(i32 33)
  %memberidx.i.i162 = getelementptr inbounds %Array_Statement_, ptr %219, i64 0, i32 1
  %221 = load ptr, ptr %memberidx.i.i162, align 8
  %memberidx1.i.i163 = getelementptr inbounds %Array_Statement_, ptr %219, i64 0, i32 2
  %222 = load i64, ptr %memberidx1.i.i163, align 4
  store ptr @VTableArrayIterator_Statement_, ptr %220, align 8
  %memberidx.i.i.i164 = getelementptr inbounds %Iterator_Statement_, ptr %220, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i.i164, align 1
  %memberidx1.i.i.i165 = getelementptr inbounds %ArrayIterator_Statement_, ptr %220, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i.i165, align 4
  %memberidx2.i.i.i166 = getelementptr inbounds %ArrayIterator_Statement_, ptr %220, i64 0, i32 4
  store ptr %221, ptr %memberidx2.i.i.i166, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %220, i64 0, i32 3
  store i64 %222, ptr %memberidx3.i.i.i, align 4
  %223 = load ptr, ptr @VTableArrayIterator_Statement_, align 8
  %224 = call ptr %223(ptr nonnull %220)
  %225 = load i1, ptr %memberidx.i.i.i164, align 1
  br i1 %225, label %CodeGen_codegen_block.exit, label %for.body.i

for.body.i:                                       ; preds = %for.end52, %for.body.i
  %statement.0.i189 = phi ptr [ %228, %for.body.i ], [ %224, %for.end52 ]
  call fastcc void @CodeGen_codegen_statement(ptr nonnull %0, ptr %78, ptr %statement.0.i189)
  %226 = load ptr, ptr %220, align 8
  %227 = load ptr, ptr %226, align 8
  %228 = call ptr %227(ptr nonnull %220)
  %229 = load i1, ptr %memberidx.i.i.i164, align 1
  br i1 %229, label %CodeGen_codegen_block.exit, label %for.body.i

CodeGen_codegen_block.exit:                       ; preds = %for.body.i, %for.end52
  call void @free(ptr nonnull %220)
  store i1 %218, ptr %memberidx.i161, align 1
  store ptr %216, ptr %memberidx60, align 8
  call void @LLVMDisposeBuilder(ptr %78)
  br label %for.incr
}

define internal fastcc ptr @CodeGen_codegen_string_to_cstring(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
get_class_from_type.exit:
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %3 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Program, ptr %3, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  %memberidx.i19 = getelementptr inbounds %Array_Module_, ptr %4, i64 0, i32 1
  %5 = load ptr, ptr %memberidx.i19, align 8
  %6 = load ptr, ptr %5, align 8
  %memberidx2 = getelementptr inbounds %Module, ptr %6, i64 0, i32 7
  %7 = load ptr, ptr %memberidx2, align 8
  %memberidx.i20 = getelementptr inbounds %Array_Scope_, ptr %7, i64 0, i32 1
  %8 = load ptr, ptr %memberidx.i20, align 8
  %9 = load ptr, ptr %8, align 8
  %memberidx3 = getelementptr inbounds %Scope, ptr %9, i64 0, i32 2
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = load ptr, ptr %10, align 8
  %memberidx4 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %11, i64 0, i32 1
  %12 = load ptr, ptr %memberidx4, align 8
  %13 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %13, ptr noundef nonnull align 8 dereferenceable(6) @224, i64 6, i1 false)
  %14 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %14, align 8
  %memberidx.i.i21 = getelementptr inbounds %string, ptr %14, i64 0, i32 1
  store ptr %13, ptr %memberidx.i.i21, align 8
  %memberidx1.i.i22 = getelementptr inbounds %string, ptr %14, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i22, align 4
  %memberidx2.i.i23 = getelementptr inbounds %string, ptr %14, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i23, align 4
  %15 = tail call ptr %12(ptr nonnull %10, ptr nonnull %14)
  %16 = alloca %ObjectType, align 8
  store i64 13, ptr %16, align 8
  %memberidx.i18 = getelementptr inbounds %ObjectType, ptr %16, i64 0, i32 1
  store ptr %15, ptr %memberidx.i18, align 8
  %17 = load ptr, ptr %memberidx, align 8
  %18 = tail call ptr @malloc(i32 80)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(10) %18, ptr noundef nonnull align 8 dereferenceable(10) @306, i64 10, i1 false)
  %19 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %19, align 8
  %memberidx.i.i15 = getelementptr inbounds %string, ptr %19, i64 0, i32 1
  store ptr %18, ptr %memberidx.i.i15, align 8
  %memberidx1.i.i16 = getelementptr inbounds %string, ptr %19, i64 0, i32 2
  store i64 10, ptr %memberidx1.i.i16, align 4
  %memberidx2.i.i17 = getelementptr inbounds %string, ptr %19, i64 0, i32 3
  store i64 10, ptr %memberidx2.i.i17, align 4
  %memberidx6.i = getelementptr inbounds %ObjectType, ptr %16, i64 0, i32 1
  %20 = load ptr, ptr %memberidx6.i, align 8
  %memberidx.i.i27 = getelementptr inbounds %Program, ptr %17, i64 0, i32 1
  %21 = load ptr, ptr %memberidx.i.i27, align 8
  %22 = load i64, ptr %20, align 4
  %memberidx.i.i.i28 = getelementptr inbounds %Array_Module_, ptr %21, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i.i.i28, align 8
  %ptridx.i.i.i29 = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx.i.i.i29, align 8
  %memberidx2.i.i30 = getelementptr inbounds %Module, ptr %24, i64 0, i32 4
  %25 = load ptr, ptr %memberidx2.i.i30, align 8
  %memberidx3.i.i31 = getelementptr inbounds %TypeId, ptr %20, i64 0, i32 2
  %26 = load i64, ptr %memberidx3.i.i31, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %25, i64 0, i32 1
  %27 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %27, i64 %26
  %28 = load ptr, ptr %ptridx.i6.i.i, align 8
  %29 = icmp eq ptr %28, null
  br i1 %29, label %get_class_prop_type_with_name.exit, label %ifend.i

ifend.i:                                          ; preds = %get_class_from_type.exit
  %memberidx.i = getelementptr inbounds %Class, ptr %28, i64 0, i32 6
  %30 = load ptr, ptr %memberidx.i, align 8
  %31 = load ptr, ptr %30, align 8
  %memberidx1.i = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %31, i64 0, i32 1
  %32 = load ptr, ptr %memberidx1.i, align 8
  %33 = tail call ptr %32(ptr nonnull %30, ptr nonnull %19)
  %34 = icmp eq ptr %33, null
  br i1 %34, label %get_class_prop_type_with_name.exit, label %ifend4.i

ifend4.i:                                         ; preds = %ifend.i
  %memberidx.i.i.i = getelementptr inbounds %PropId, ptr %33, i64 0, i32 1
  %35 = load ptr, ptr %memberidx.i.i.i, align 8
  %36 = load ptr, ptr %memberidx.i.i27, align 8
  %37 = load i64, ptr %35, align 4
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %36, i64 0, i32 1
  %38 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %38, i64 %37
  %39 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  %memberidx2.i.i.i.i = getelementptr inbounds %Module, ptr %39, i64 0, i32 4
  %40 = load ptr, ptr %memberidx2.i.i.i.i, align 8
  %memberidx3.i.i.i.i = getelementptr inbounds %TypeId, ptr %35, i64 0, i32 2
  %41 = load i64, ptr %memberidx3.i.i.i.i, align 4
  %memberidx.i5.i.i.i.i = getelementptr inbounds %Array_Class_, ptr %40, i64 0, i32 1
  %42 = load ptr, ptr %memberidx.i5.i.i.i.i, align 8
  %ptridx.i6.i.i.i.i = getelementptr inbounds ptr, ptr %42, i64 %41
  %43 = load ptr, ptr %ptridx.i6.i.i.i.i, align 8
  %44 = load i64, ptr %33, align 4
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %if.entry.i.i, label %ifend.i.i

if.entry.i.i:                                     ; preds = %ifend4.i
  %memberidx1.i.i13 = getelementptr inbounds %Class, ptr %43, i64 0, i32 5
  %46 = load ptr, ptr %memberidx1.i.i13, align 8
  %memberidx2.i.i14 = getelementptr inbounds %PropId, ptr %33, i64 0, i32 2
  %47 = load i64, ptr %memberidx2.i.i14, align 4
  %memberidx.i12.i.i = getelementptr inbounds %Array_ClassMethod_, ptr %46, i64 0, i32 1
  %48 = load ptr, ptr %memberidx.i12.i.i, align 8
  %ptridx.i13.i.i = getelementptr inbounds ptr, ptr %48, i64 %47
  %49 = load ptr, ptr %ptridx.i13.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ClassMethod, ptr %49, i64 0, i32 4
  br label %get_class_prop_type.exit.i

ifend.i.i:                                        ; preds = %ifend4.i
  %memberidx4.i.i = getelementptr inbounds %Class, ptr %43, i64 0, i32 4
  %50 = load ptr, ptr %memberidx4.i.i, align 8
  %memberidx5.i.i = getelementptr inbounds %PropId, ptr %33, i64 0, i32 2
  %51 = load i64, ptr %memberidx5.i.i, align 4
  %memberidx.i11.i.i = getelementptr inbounds %Array_ClassField_, ptr %50, i64 0, i32 1
  %52 = load ptr, ptr %memberidx.i11.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %52, i64 %51
  %53 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx6.i.i = getelementptr inbounds %ClassField, ptr %53, i64 0, i32 4
  br label %get_class_prop_type.exit.i

get_class_prop_type.exit.i:                       ; preds = %ifend.i.i, %if.entry.i.i
  %common.ret.op.in.i.i = phi ptr [ %memberidx3.i.i, %if.entry.i.i ], [ %memberidx6.i.i, %ifend.i.i ]
  %common.ret.op.i.i = load ptr, ptr %common.ret.op.in.i.i, align 8
  br label %get_class_prop_type_with_name.exit

get_class_prop_type_with_name.exit:               ; preds = %get_class_from_type.exit, %ifend.i, %get_class_prop_type.exit.i
  %common.ret.op.i = phi ptr [ %common.ret.op.i.i, %get_class_prop_type.exit.i ], [ null, %get_class_from_type.exit ], [ null, %ifend.i ]
  %54 = tail call ptr @malloc(i32 80)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(10) %54, ptr noundef nonnull align 8 dereferenceable(10) @306, i64 10, i1 false)
  %55 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %55, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %55, i64 0, i32 1
  store ptr %54, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %55, i64 0, i32 2
  store i64 10, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %55, i64 0, i32 3
  store i64 10, ptr %memberidx2.i.i, align 4
  %56 = call fastcc ptr @CodeGen_get_member_with_name(ptr nonnull %0, ptr %1, ptr %2, ptr nonnull %16, ptr nonnull %55)
  %args = alloca [1 x ptr], align 8
  store ptr %2, ptr %args, align 8
  %57 = tail call fastcc ptr @CodeGen_codegen_type(ptr nonnull %0, ptr %common.ret.op.i, i1 false)
  %58 = call ptr @LLVMBuildCall2(ptr %1, ptr %57, ptr %56, ptr nonnull %args, i64 1, ptr nonnull @27)
  ret ptr %58
}

define internal fastcc void @CodeGen_codegen_statement(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %4 = load i64, ptr %2, align 4
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  tail call fastcc void @CodeGen_codegen_if_stmt(ptr %0, ptr %1, ptr nonnull %2)
  %.pr = load i64, ptr %2, align 4
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %6 = phi i64 [ %4, %3 ], [ %.pr, %if.entry ]
  %7 = icmp eq i64 %6, 3
  br i1 %7, label %if.entry2, label %ifend4

if.entry2:                                        ; preds = %ifend
  tail call fastcc void @CodeGen_codegen_for_stmt(ptr %0, ptr %1, ptr nonnull %2)
  %.pre = load i64, ptr %2, align 4
  br label %ifend4

ifend4:                                           ; preds = %ifend, %if.entry2
  %8 = phi i64 [ %6, %ifend ], [ %.pre, %if.entry2 ]
  %9 = icmp eq i64 %8, 4
  br i1 %9, label %if.entry6, label %ifend8

if.entry6:                                        ; preds = %ifend4
  %memberidx.i66 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 1
  %10 = load ptr, ptr %memberidx.i66, align 8
  %11 = tail call ptr @LLVMAppendBasicBlock(ptr %10, ptr nonnull @315)
  %12 = load ptr, ptr %memberidx.i66, align 8
  %13 = tail call ptr @LLVMAppendBasicBlock(ptr %12, ptr nonnull @316)
  %memberidx2.i = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 2
  %14 = load ptr, ptr %memberidx2.i, align 8
  %memberidx3.i = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 3
  %15 = load ptr, ptr %memberidx3.i, align 8
  store ptr %13, ptr %memberidx2.i, align 8
  store ptr %11, ptr %memberidx3.i, align 8
  %memberidx6.i = getelementptr inbounds %WhileStatement, ptr %2, i64 0, i32 1
  %16 = load ptr, ptr %memberidx6.i, align 8
  %17 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %16)
  %18 = tail call ptr @LLVMBuildCondBr(ptr %1, ptr %17, ptr %11, ptr %13)
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %11)
  %memberidx7.i = getelementptr inbounds %WhileStatement, ptr %2, i64 0, i32 2
  %19 = load ptr, ptr %memberidx7.i, align 8
  %memberidx.i68 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 5
  %20 = load i1, ptr %memberidx.i68, align 1
  store i1 false, ptr %memberidx.i68, align 1
  %21 = load ptr, ptr %19, align 8
  %22 = tail call ptr @malloc(i32 33)
  %memberidx.i.i69 = getelementptr inbounds %Array_Statement_, ptr %21, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i.i69, align 8
  %memberidx1.i.i70 = getelementptr inbounds %Array_Statement_, ptr %21, i64 0, i32 2
  %24 = load i64, ptr %memberidx1.i.i70, align 4
  store ptr @VTableArrayIterator_Statement_, ptr %22, align 8
  %memberidx.i.i.i = getelementptr inbounds %Iterator_Statement_, ptr %22, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i.i, align 1
  %memberidx1.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %22, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %22, i64 0, i32 4
  store ptr %23, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %22, i64 0, i32 3
  store i64 %24, ptr %memberidx3.i.i.i, align 4
  %25 = load ptr, ptr @VTableArrayIterator_Statement_, align 8
  %26 = tail call ptr %25(ptr nonnull %22)
  %27 = load i1, ptr %memberidx.i.i.i, align 1
  br i1 %27, label %CodeGen_codegen_block.exit, label %for.body.i

for.body.i:                                       ; preds = %if.entry6, %for.body.i
  %statement.0.i74 = phi ptr [ %30, %for.body.i ], [ %26, %if.entry6 ]
  tail call fastcc void @CodeGen_codegen_statement(ptr %0, ptr %1, ptr %statement.0.i74)
  %28 = load ptr, ptr %22, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = tail call ptr %29(ptr nonnull %22)
  %31 = load i1, ptr %memberidx.i.i.i, align 1
  br i1 %31, label %CodeGen_codegen_block.exit, label %for.body.i

CodeGen_codegen_block.exit:                       ; preds = %for.body.i, %if.entry6
  tail call void @free(ptr nonnull %22)
  store i1 %20, ptr %memberidx.i68, align 1
  %32 = load ptr, ptr %memberidx7.i, align 8
  %memberidx.i.i = getelementptr inbounds %Block, ptr %32, i64 0, i32 1
  %33 = load i1, ptr %memberidx.i.i, align 1
  %memberidx1.i.i = getelementptr inbounds %Block, ptr %32, i64 0, i32 2
  %34 = load i1, ptr %memberidx1.i.i, align 1
  %35 = or i1 %33, %34
  %memberidx2.i.i = getelementptr inbounds %Block, ptr %32, i64 0, i32 3
  %36 = load i1, ptr %memberidx2.i.i, align 1
  %37 = or i1 %35, %36
  br i1 %37, label %CodeGen_codegen_while_stmt.exit, label %if.entry.i67

if.entry.i67:                                     ; preds = %CodeGen_codegen_block.exit
  %38 = load ptr, ptr %memberidx6.i, align 8
  %39 = tail call fastcc ptr @CodeGen_codegen_expression(ptr nonnull %0, ptr %1, ptr %38)
  %40 = tail call ptr @LLVMBuildCondBr(ptr %1, ptr %39, ptr %11, ptr %13)
  br label %CodeGen_codegen_while_stmt.exit

CodeGen_codegen_while_stmt.exit:                  ; preds = %CodeGen_codegen_block.exit, %if.entry.i67
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %13)
  store ptr %14, ptr %memberidx2.i, align 8
  store ptr %15, ptr %memberidx3.i, align 8
  %.pr71 = load i64, ptr %2, align 4
  br label %ifend8

ifend8:                                           ; preds = %ifend4, %CodeGen_codegen_while_stmt.exit
  %41 = phi i64 [ %8, %ifend4 ], [ %.pr71, %CodeGen_codegen_while_stmt.exit ]
  %42 = icmp eq i64 %41, 5
  br i1 %42, label %if.entry10, label %ifend12

if.entry10:                                       ; preds = %ifend8
  %memberidx13 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 3
  %43 = load ptr, ptr %memberidx13, align 8
  %44 = tail call ptr @LLVMBuildBr(ptr %1, ptr %43)
  %.pre75 = load i64, ptr %2, align 4
  br label %ifend12

ifend12:                                          ; preds = %ifend8, %if.entry10
  %45 = phi i64 [ %41, %ifend8 ], [ %.pre75, %if.entry10 ]
  %46 = icmp eq i64 %45, 6
  br i1 %46, label %if.entry15, label %ifend17

if.entry15:                                       ; preds = %ifend12
  %memberidx18 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 2
  %47 = load ptr, ptr %memberidx18, align 8
  %48 = tail call ptr @LLVMBuildBr(ptr %1, ptr %47)
  %.pr72 = load i64, ptr %2, align 4
  br label %ifend17

ifend17:                                          ; preds = %ifend12, %if.entry15
  %49 = phi i64 [ %45, %ifend12 ], [ %.pr72, %if.entry15 ]
  %50 = icmp eq i64 %49, 1
  br i1 %50, label %if.entry20, label %ifend22

if.entry20:                                       ; preds = %ifend17
  tail call fastcc void @CodeGen_codegen_var_declaration(ptr %0, ptr %1, ptr nonnull %2)
  %.pre76 = load i64, ptr %2, align 4
  br label %ifend22

ifend22:                                          ; preds = %ifend17, %if.entry20
  %51 = phi i64 [ %49, %ifend17 ], [ %.pre76, %if.entry20 ]
  %52 = icmp eq i64 %51, 2
  br i1 %52, label %if.entry24, label %ifend26

if.entry24:                                       ; preds = %ifend22
  tail call fastcc void @CodeGen_codegen_const_declaration(ptr %0, ptr %1, ptr nonnull %2)
  %.pr73 = load i64, ptr %2, align 4
  br label %ifend26

ifend26:                                          ; preds = %ifend22, %if.entry24
  %53 = phi i64 [ %51, %ifend22 ], [ %.pr73, %if.entry24 ]
  %54 = icmp eq i64 %53, 7
  br i1 %54, label %if.entry28, label %ifend30

if.entry28:                                       ; preds = %ifend26
  %memberidx.i = getelementptr inbounds %ReturnStatement, ptr %2, i64 0, i32 1
  %55 = load ptr, ptr %memberidx.i, align 8
  %.not.i = icmp eq ptr %55, null
  br i1 %.not.i, label %else.i, label %if.entry.i

if.entry.i:                                       ; preds = %if.entry28
  %56 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr nonnull %55)
  %57 = tail call ptr @LLVMBuildRet(ptr %1, ptr %56)
  br label %ifend30

else.i:                                           ; preds = %if.entry28
  %58 = tail call ptr @LLVMBuildRetVoid(ptr %1)
  br label %ifend30

ifend30:                                          ; preds = %else.i, %if.entry.i, %ifend26
  %59 = load i64, ptr %2, align 4
  %60 = icmp eq i64 %59, 8
  br i1 %60, label %if.entry32, label %ifend34

if.entry32:                                       ; preds = %ifend30
  %61 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr nonnull %2)
  br label %ifend34

ifend34:                                          ; preds = %ifend30, %if.entry32
  ret void
}

define internal void @Map_string_CGClassType__set(ptr %0, ptr %1, ptr %2) {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i64 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = sitofp i64 %5 to double
  %memberidx1 = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i64 0, i32 3
  %7 = load i64, ptr %memberidx1, align 4
  %8 = sitofp i64 %7 to double
  %9 = fdiv double %6, %8
  %10 = fcmp ogt double %9, 7.500000e-01
  br i1 %10, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %11 = load ptr, ptr %0, align 8
  %memberidx.i36 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx.i36, align 8
  %13 = tail call ptr %12(ptr nonnull %0)
  %14 = load i64, ptr %memberidx1, align 4
  %15 = shl i64 %14, 1
  store i64 %15, ptr %memberidx1, align 4
  store i64 0, ptr %memberidx, align 4
  %memberidx4.i = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i64 0, i32 1
  %16 = load ptr, ptr %memberidx4.i, align 8
  %17 = shl i64 %14, 4
  %18 = tail call ptr @realloc(ptr %16, i64 %17)
  store ptr %18, ptr %memberidx4.i, align 8
  %19 = load i64, ptr %memberidx1, align 4
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %for.body.i40, label %for.cond11.preheader.i

for.cond11.preheader.i:                           ; preds = %for.body.i40, %if.entry
  %memberidx15.i = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %13, i64 0, i32 2
  %21 = load i64, ptr %memberidx15.i, align 4
  %22 = icmp sgt i64 %21, 0
  br i1 %22, label %for.body12.lr.ph.i, label %ifend

for.body12.lr.ph.i:                               ; preds = %for.cond11.preheader.i
  %memberidx.i32.i = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %13, i64 0, i32 1
  br label %for.body12.i

for.body.i40:                                     ; preds = %if.entry, %for.body.i40
  %i.036.i = phi i64 [ %25, %for.body.i40 ], [ 0, %if.entry ]
  %23 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %23, i64 %i.036.i
  %24 = tail call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_CGClassType_, ptr %24, align 8
  %memberidx.i.i39 = getelementptr inbounds %Bucket_string_CGClassType_, ptr %24, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i39, align 1
  store ptr %24, ptr %ptridx.i, align 8
  %25 = add nuw nsw i64 %i.036.i, 1
  %26 = load i64, ptr %memberidx1, align 4
  %27 = icmp slt i64 %25, %26
  br i1 %27, label %for.body.i40, label %for.cond11.preheader.i

for.body12.i:                                     ; preds = %for.body12.i, %for.body12.lr.ph.i
  %storemerge35.i = phi i64 [ 0, %for.body12.lr.ph.i ], [ %34, %for.body12.i ]
  %28 = load ptr, ptr %0, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %memberidx.i32.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %30, i64 %storemerge35.i
  %31 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx17.i = getelementptr inbounds %Bucket_string_CGClassType_, ptr %31, i64 0, i32 1
  %32 = load ptr, ptr %memberidx17.i, align 8
  %memberidx18.i = getelementptr inbounds %Bucket_string_CGClassType_, ptr %31, i64 0, i32 2
  %33 = load ptr, ptr %memberidx18.i, align 8
  tail call void %29(ptr nonnull %0, ptr %32, ptr %33)
  %34 = add nuw nsw i64 %storemerge35.i, 1
  %35 = load i64, ptr %memberidx15.i, align 4
  %36 = icmp slt i64 %34, %35
  br i1 %36, label %for.body12.i, label %ifend

ifend:                                            ; preds = %for.body12.i, %for.cond11.preheader.i, %3
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %37 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %37, i64 0, i32 5
  %38 = load ptr, ptr %memberidx.i, align 8
  %39 = tail call ptr %38(ptr nonnull %1)
  %40 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %39)
  %41 = load ptr, ptr %4, align 8
  %42 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %42, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 1
  store ptr %41, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 2
  store i64 %40, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 3
  store i64 %40, ptr %memberidx2.i.i, align 4
  call void @free(ptr %39)
  %43 = load i64, ptr %memberidx1.i.i, align 4
  %44 = icmp sgt i64 %43, 0
  br i1 %44, label %for.body.i, label %Map_string_CGClassType__hash_fnc.exit

for.body.i:                                       ; preds = %ifend, %for.body.i
  %i.0.i42 = phi i64 [ %51, %for.body.i ], [ 0, %ifend ]
  %hash.0.i41 = phi i64 [ %50, %for.body.i ], [ 0, %ifend ]
  %45 = shl i64 %hash.0.i41, 1
  %46 = load ptr, ptr %42, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i64 0, i32 2
  %47 = load ptr, ptr %memberidx2.i, align 8
  %48 = call i8 %47(ptr nonnull %42, i64 %i.0.i42)
  %49 = sext i8 %48 to i64
  %50 = add i64 %45, %49
  %51 = add nuw nsw i64 %i.0.i42, 1
  %52 = load i64, ptr %memberidx1.i.i, align 4
  %53 = icmp slt i64 %51, %52
  br i1 %53, label %for.body.i, label %Map_string_CGClassType__hash_fnc.exit

Map_string_CGClassType__hash_fnc.exit:            ; preds = %for.body.i, %ifend
  %hash.0.i.lcssa = phi i64 [ 0, %ifend ], [ %50, %for.body.i ]
  %54 = call i64 @llvm.abs.i64(i64 %hash.0.i.lcssa, i1 false)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %55 = load i64, ptr %memberidx1, align 4
  %56 = srem i64 %54, %55
  %memberidx3 = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i64 0, i32 1
  %57 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %57, i64 %56
  %58 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_CGClassType_, ptr %58, i64 0, i32 3
  %59 = load i1, ptr %memberidx4, align 1
  br i1 %59, label %while.end, label %while.entry.preheader

while.entry.preheader:                            ; preds = %Map_string_CGClassType__hash_fnc.exit
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend10
  %60 = phi ptr [ %57, %while.entry.preheader ], [ %78, %ifend10 ]
  %61 = phi i64 [ %55, %while.entry.preheader ], [ %79, %ifend10 ]
  %62 = phi ptr [ %58, %while.entry.preheader ], [ %82, %ifend10 ]
  %63 = phi i64 [ %56, %while.entry.preheader ], [ %81, %ifend10 ]
  %memberidx7 = getelementptr inbounds %Bucket_string_CGClassType_, ptr %62, i64 0, i32 1
  %64 = load ptr, ptr %memberidx7, align 8
  %memberidx.i33 = getelementptr inbounds %string, ptr %64, i64 0, i32 2
  %65 = load i64, ptr %memberidx.i33, align 4
  %66 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %65, %66
  br i1 %.not.i, label %ifend.i, label %ifend10

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i35 = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %67 = load ptr, ptr %memberidx2.i35, align 8
  %68 = load ptr, ptr %memberidx3.i, align 8
  %69 = call i64 @memcmp(ptr %67, ptr %68, i64 %65)
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %ifend.i.while.end.loopexit_crit_edge, label %ifend.i.ifend10_crit_edge

ifend.i.while.end.loopexit_crit_edge:             ; preds = %ifend.i
  %.pre44.pre = load ptr, ptr %memberidx3, align 8
  br label %while.end

ifend.i.ifend10_crit_edge:                        ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx1, align 4
  %.pre43 = load ptr, ptr %memberidx3, align 8
  br label %ifend10

while.end:                                        ; preds = %ifend10, %ifend.i.while.end.loopexit_crit_edge, %Map_string_CGClassType__hash_fnc.exit
  %71 = phi ptr [ %57, %Map_string_CGClassType__hash_fnc.exit ], [ %.pre44.pre, %ifend.i.while.end.loopexit_crit_edge ], [ %78, %ifend10 ]
  %72 = phi i64 [ %56, %Map_string_CGClassType__hash_fnc.exit ], [ %63, %ifend.i.while.end.loopexit_crit_edge ], [ %81, %ifend10 ]
  %73 = load i64, ptr %memberidx, align 4
  %74 = add i64 %73, 1
  store i64 %74, ptr %memberidx, align 4
  %ptridx18 = getelementptr inbounds ptr, ptr %71, i64 %72
  %75 = load ptr, ptr %ptridx18, align 8
  %76 = load ptr, ptr %75, align 8
  %77 = load ptr, ptr %76, align 8
  call void %77(ptr nonnull %75, ptr nonnull %1, ptr %2)
  ret void

ifend10:                                          ; preds = %ifend.i.ifend10_crit_edge, %while.entry
  %78 = phi ptr [ %.pre43, %ifend.i.ifend10_crit_edge ], [ %60, %while.entry ]
  %79 = phi i64 [ %.pre, %ifend.i.ifend10_crit_edge ], [ %61, %while.entry ]
  %80 = add i64 %63, 1
  %81 = srem i64 %80, %79
  %ptridx13 = getelementptr inbounds ptr, ptr %78, i64 %81
  %82 = load ptr, ptr %ptridx13, align 8
  %memberidx14 = getelementptr inbounds %Bucket_string_CGClassType_, ptr %82, i64 0, i32 3
  %83 = load i1, ptr %memberidx14, align 1
  br i1 %83, label %while.end, label %while.entry
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind willreturn writeonly
define internal void @Bucket_string_CGClassType__set(ptr nocapture writeonly %0, ptr %1, ptr %2) #8 {
  %memberidx = getelementptr inbounds %Bucket_string_CGClassType_, ptr %0, i64 0, i32 3
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %Bucket_string_CGClassType_, ptr %0, i64 0, i32 1
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_CGClassType_, ptr %0, i64 0, i32 2
  store ptr %2, ptr %memberidx2, align 8
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Bucket_string_CGClassType___find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal noalias ptr @Map_string_CGClassType__get_buckets(ptr nocapture readonly %0) {
for.entry:
  %1 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Bucket_string_CGClassType__, ptr %1, align 8
  %memberidx.i = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %1, i64 0, i32 2
  %memberidx1.i = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %1, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_Bucket_string_CGClassType__, ptr %1, i64 0, i32 1
  %2 = tail call ptr @malloc(i32 64)
  store ptr %2, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %memberidx2 = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i64 0, i32 3
  %3 = load i64, ptr %memberidx2, align 4
  %4 = icmp sgt i64 %3, 0
  br i1 %4, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx3 = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %5 = phi i64 [ %3, %for.body.lr.ph ], [ %19, %ifend ]
  %6 = phi ptr [ %2, %for.body.lr.ph ], [ %20, %ifend ]
  %7 = phi ptr [ %2, %for.body.lr.ph ], [ %21, %ifend ]
  %8 = phi i64 [ 8, %for.body.lr.ph ], [ %22, %ifend ]
  %9 = phi i64 [ 0, %for.body.lr.ph ], [ %23, %ifend ]
  %i.011 = phi i64 [ 0, %for.body.lr.ph ], [ %24, %ifend ]
  %10 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %i.011
  %11 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_CGClassType_, ptr %11, i64 0, i32 3
  %12 = load i1, ptr %memberidx4, align 1
  br i1 %12, label %ifend, label %if.entry

for.end:                                          ; preds = %ifend, %for.entry
  ret ptr %1

if.entry:                                         ; preds = %for.body
  %.not.i = icmp slt i64 %9, %8
  br i1 %.not.i, label %Array_Bucket_string_CGClassType_____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %if.entry
  %13 = shl i64 %8, 1
  store i64 %13, ptr %memberidx1.i, align 4
  %14 = shl i64 %8, 4
  %15 = tail call ptr @realloc(ptr %7, i64 %14)
  store ptr %15, ptr %memberidx2.i, align 8
  br label %Array_Bucket_string_CGClassType_____sl__.exit

Array_Bucket_string_CGClassType_____sl__.exit:    ; preds = %if.entry, %if.entry.i
  %16 = phi ptr [ %6, %if.entry ], [ %15, %if.entry.i ]
  %17 = phi i64 [ %8, %if.entry ], [ %13, %if.entry.i ]
  %18 = add i64 %9, 1
  store i64 %18, ptr %memberidx.i, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %16, i64 %9
  store ptr %11, ptr %ptridx.i, align 8
  %.pre = load i64, ptr %memberidx2, align 4
  br label %ifend

ifend:                                            ; preds = %for.body, %Array_Bucket_string_CGClassType_____sl__.exit
  %19 = phi i64 [ %5, %for.body ], [ %.pre, %Array_Bucket_string_CGClassType_____sl__.exit ]
  %20 = phi ptr [ %6, %for.body ], [ %16, %Array_Bucket_string_CGClassType_____sl__.exit ]
  %21 = phi ptr [ %7, %for.body ], [ %16, %Array_Bucket_string_CGClassType_____sl__.exit ]
  %22 = phi i64 [ %8, %for.body ], [ %17, %Array_Bucket_string_CGClassType_____sl__.exit ]
  %23 = phi i64 [ %9, %for.body ], [ %18, %Array_Bucket_string_CGClassType_____sl__.exit ]
  %24 = add nuw nsw i64 %i.011, 1
  %25 = icmp slt i64 %24, %19
  br i1 %25, label %for.body, label %for.end
}

define internal ptr @Map_string_CGClassType__get(ptr nocapture readonly %0, ptr %1) {
  %3 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %4 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i64 0, i32 5
  %5 = load ptr, ptr %memberidx.i, align 8
  %6 = tail call ptr %5(ptr nonnull %1)
  %7 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @22, ptr %6)
  %8 = load ptr, ptr %3, align 8
  %9 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %9, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 1
  store ptr %8, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 2
  store i64 %7, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 3
  store i64 %7, ptr %memberidx2.i.i, align 4
  call void @free(ptr %6)
  %10 = load i64, ptr %memberidx1.i.i, align 4
  %11 = icmp sgt i64 %10, 0
  br i1 %11, label %for.body.i, label %Map_string_CGClassType__hash_fnc.exit

for.body.i:                                       ; preds = %2, %for.body.i
  %i.0.i36 = phi i64 [ %18, %for.body.i ], [ 0, %2 ]
  %hash.0.i35 = phi i64 [ %17, %for.body.i ], [ 0, %2 ]
  %12 = shl i64 %hash.0.i35, 1
  %13 = load ptr, ptr %9, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i64 0, i32 2
  %14 = load ptr, ptr %memberidx2.i, align 8
  %15 = call i8 %14(ptr nonnull %9, i64 %i.0.i36)
  %16 = sext i8 %15 to i64
  %17 = add i64 %12, %16
  %18 = add nuw nsw i64 %i.0.i36, 1
  %19 = load i64, ptr %memberidx1.i.i, align 4
  %20 = icmp slt i64 %18, %19
  br i1 %20, label %for.body.i, label %Map_string_CGClassType__hash_fnc.exit

Map_string_CGClassType__hash_fnc.exit:            ; preds = %for.body.i, %2
  %hash.0.i.lcssa = phi i64 [ 0, %2 ], [ %17, %for.body.i ]
  %21 = call i64 @llvm.abs.i64(i64 %hash.0.i.lcssa, i1 false)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %memberidx = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i64 0, i32 3
  %22 = load i64, ptr %memberidx, align 4
  %23 = srem i64 %21, %22
  %memberidx1 = getelementptr inbounds %Map_string_CGClassType_, ptr %0, i64 0, i32 1
  %24 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %24, i64 %23
  %25 = load ptr, ptr %ptridx, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_CGClassType_, ptr %25, i64 0, i32 3
  %26 = load i1, ptr %memberidx2, align 1
  br i1 %26, label %common.ret, label %while.entry.preheader

while.entry.preheader:                            ; preds = %Map_string_CGClassType__hash_fnc.exit
  %memberidx1.i33 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %else
  %27 = phi ptr [ %37, %else ], [ %24, %while.entry.preheader ]
  %28 = phi i64 [ %38, %else ], [ %22, %while.entry.preheader ]
  %29 = phi ptr [ %41, %else ], [ %25, %while.entry.preheader ]
  %hash.0 = phi i64 [ %40, %else ], [ %23, %while.entry.preheader ]
  %memberidx5 = getelementptr inbounds %Bucket_string_CGClassType_, ptr %29, i64 0, i32 1
  %30 = load ptr, ptr %memberidx5, align 8
  %memberidx.i32 = getelementptr inbounds %string, ptr %30, i64 0, i32 2
  %31 = load i64, ptr %memberidx.i32, align 4
  %32 = load i64, ptr %memberidx1.i33, align 4
  %.not.i = icmp eq i64 %31, %32
  br i1 %.not.i, label %ifend.i, label %else

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i34 = getelementptr inbounds %string, ptr %30, i64 0, i32 1
  %33 = load ptr, ptr %memberidx2.i34, align 8
  %34 = load ptr, ptr %memberidx3.i, align 8
  %35 = call i64 @memcmp(ptr %33, ptr %34, i64 %31)
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %while.end, label %ifend.i.else_crit_edge

ifend.i.else_crit_edge:                           ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx, align 4
  %.pre37 = load ptr, ptr %memberidx1, align 8
  br label %else

while.end:                                        ; preds = %ifend.i
  %.pre38.pre = load ptr, ptr %memberidx1, align 8
  %ptridx11.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre38.pre, i64 %hash.0
  %.pre39.pre = load ptr, ptr %ptridx11.phi.trans.insert.phi.trans.insert, align 8
  %memberidx12.phi.trans.insert.phi.trans.insert = getelementptr inbounds %Bucket_string_CGClassType_, ptr %.pre39.pre, i64 0, i32 3
  %.pre40.pre = load i1, ptr %memberidx12.phi.trans.insert.phi.trans.insert, align 1
  br i1 %.pre40.pre, label %common.ret, label %if.entry13

else:                                             ; preds = %ifend.i.else_crit_edge, %while.entry
  %37 = phi ptr [ %.pre37, %ifend.i.else_crit_edge ], [ %27, %while.entry ]
  %38 = phi i64 [ %.pre, %ifend.i.else_crit_edge ], [ %28, %while.entry ]
  %39 = add i64 %hash.0, 1
  %40 = srem i64 %39, %38
  %ptridx8 = getelementptr inbounds ptr, ptr %37, i64 %40
  %41 = load ptr, ptr %ptridx8, align 8
  %memberidx9 = getelementptr inbounds %Bucket_string_CGClassType_, ptr %41, i64 0, i32 3
  %42 = load i1, ptr %memberidx9, align 1
  br i1 %42, label %common.ret, label %while.entry

common.ret:                                       ; preds = %else, %Map_string_CGClassType__hash_fnc.exit, %while.end, %if.entry13
  %common.ret.op = phi ptr [ %43, %if.entry13 ], [ null, %while.end ], [ null, %Map_string_CGClassType__hash_fnc.exit ], [ null, %else ]
  ret ptr %common.ret.op

if.entry13:                                       ; preds = %while.end
  %memberidx18 = getelementptr inbounds %Bucket_string_CGClassType_, ptr %.pre39.pre, i64 0, i32 2
  %43 = load ptr, ptr %memberidx18, align 8
  br label %common.ret
}

define internal fastcc ptr @CodeGen_get_string_val(ptr nocapture %0, ptr %1, ptr %2, ptr nocapture readonly %3, ptr nocapture %4, i64 %5) unnamed_addr {
  %7 = load i64, ptr %3, align 4
  switch i64 %7, label %is_object.exit214 [
    i64 0, label %if.entry
    i64 20, label %if.entry.i211
  ]

common.ret:                                       ; preds = %ifend3, %if.entry.i, %if.entry39, %if.entry.i118, %if.entry13, %Array_LLVMValueRef____sl__.exit98, %Array_LLVMValueRef____sl__.exit141, %CodeGen_createGlobalLLVMString.exit158
  %common.ret.op = phi ptr [ %36, %CodeGen_createGlobalLLVMString.exit158 ], [ %70, %Array_LLVMValueRef____sl__.exit141 ], [ %186, %Array_LLVMValueRef____sl__.exit98 ], [ %123, %if.entry.i118 ], [ %118, %if.entry13 ], [ %239, %if.entry.i ], [ %234, %if.entry39 ], [ %2, %ifend3 ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %6
  %8 = tail call ptr @malloc(i32 32)
  store i32 1702195828, ptr %8, align 8
  %9 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %9, align 8
  %memberidx.i.i169 = getelementptr inbounds %string, ptr %9, i64 0, i32 1
  store ptr %8, ptr %memberidx.i.i169, align 8
  %memberidx1.i.i170 = getelementptr inbounds %string, ptr %9, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i170, align 4
  %memberidx2.i.i171 = getelementptr inbounds %string, ptr %9, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i171, align 4
  %memberidx.i162 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 7
  %10 = load ptr, ptr %memberidx.i162, align 8
  %11 = load ptr, ptr %10, align 8
  %memberidx1.i163 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %11, i64 0, i32 1
  %12 = load ptr, ptr %memberidx1.i163, align 8
  %13 = tail call ptr %12(ptr nonnull %10, ptr nonnull %9)
  %14 = icmp eq ptr %13, null
  br i1 %14, label %if.entry.i165, label %CodeGen_createGlobalLLVMString.exit168

if.entry.i165:                                    ; preds = %if.entry
  %15 = load ptr, ptr %9, align 8
  %memberidx2.i164 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %15, i64 0, i32 5
  %16 = load ptr, ptr %memberidx2.i164, align 8
  %17 = tail call ptr %16(ptr nonnull %9)
  %18 = tail call ptr @LLVMBuildGlobalString(ptr %1, ptr %17, ptr nonnull @27)
  %19 = load ptr, ptr %memberidx.i162, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %20, align 8
  tail call void %21(ptr nonnull %19, ptr nonnull %9, ptr %18)
  br label %CodeGen_createGlobalLLVMString.exit168

CodeGen_createGlobalLLVMString.exit168:           ; preds = %if.entry, %if.entry.i165
  %str.0.i166 = phi ptr [ %18, %if.entry.i165 ], [ %13, %if.entry ]
  %22 = tail call ptr @malloc(i32 40)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(5) %22, ptr noundef nonnull align 8 dereferenceable(5) @145, i64 5, i1 false)
  %23 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %23, align 8
  %memberidx.i.i159 = getelementptr inbounds %string, ptr %23, i64 0, i32 1
  store ptr %22, ptr %memberidx.i.i159, align 8
  %memberidx1.i.i160 = getelementptr inbounds %string, ptr %23, i64 0, i32 2
  store i64 5, ptr %memberidx1.i.i160, align 4
  %memberidx2.i.i161 = getelementptr inbounds %string, ptr %23, i64 0, i32 3
  store i64 5, ptr %memberidx2.i.i161, align 4
  %24 = load ptr, ptr %memberidx.i162, align 8
  %25 = load ptr, ptr %24, align 8
  %memberidx1.i153 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %25, i64 0, i32 1
  %26 = load ptr, ptr %memberidx1.i153, align 8
  %27 = tail call ptr %26(ptr nonnull %24, ptr nonnull %23)
  %28 = icmp eq ptr %27, null
  br i1 %28, label %if.entry.i155, label %CodeGen_createGlobalLLVMString.exit158

if.entry.i155:                                    ; preds = %CodeGen_createGlobalLLVMString.exit168
  %29 = load ptr, ptr %23, align 8
  %memberidx2.i154 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %29, i64 0, i32 5
  %30 = load ptr, ptr %memberidx2.i154, align 8
  %31 = tail call ptr %30(ptr nonnull %23)
  %32 = tail call ptr @LLVMBuildGlobalString(ptr %1, ptr %31, ptr nonnull @27)
  %33 = load ptr, ptr %memberidx.i162, align 8
  %34 = load ptr, ptr %33, align 8
  %35 = load ptr, ptr %34, align 8
  tail call void %35(ptr nonnull %33, ptr nonnull %23, ptr %32)
  br label %CodeGen_createGlobalLLVMString.exit158

CodeGen_createGlobalLLVMString.exit158:           ; preds = %CodeGen_createGlobalLLVMString.exit168, %if.entry.i155
  %str.0.i156 = phi ptr [ %32, %if.entry.i155 ], [ %27, %CodeGen_createGlobalLLVMString.exit168 ]
  %36 = tail call ptr @LLVMBuildSelect(ptr %1, ptr %2, ptr %str.0.i166, ptr %str.0.i156, ptr nonnull @27)
  br label %common.ret

if.entry.i211:                                    ; preds = %6, %if.entry.i211
  %.tr5.i209 = phi ptr [ %37, %if.entry.i211 ], [ %3, %6 ]
  %memberidx1.i210 = getelementptr inbounds %GenericType, ptr %.tr5.i209, i64 0, i32 3
  %37 = load ptr, ptr %memberidx1.i210, align 8
  %38 = load i64, ptr %37, align 4
  %39 = icmp eq i64 %38, 20
  br i1 %39, label %if.entry.i211, label %is_object.exit214

is_object.exit214:                                ; preds = %if.entry.i211, %6
  %.lcssa.i212 = phi i64 [ %7, %6 ], [ %38, %if.entry.i211 ]
  %40 = icmp eq i64 %.lcssa.i212, 13
  br i1 %40, label %if.entry1, label %ifend3

if.entry1:                                        ; preds = %is_object.exit214
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %41 = load ptr, ptr %memberidx, align 8
  %42 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %42, ptr noundef nonnull align 8 dereferenceable(6) @224, i64 6, i1 false)
  %43 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %43, align 8
  %memberidx.i.i149 = getelementptr inbounds %string, ptr %43, i64 0, i32 1
  store ptr %42, ptr %memberidx.i.i149, align 8
  %memberidx1.i.i150 = getelementptr inbounds %string, ptr %43, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i150, align 4
  %memberidx2.i.i151 = getelementptr inbounds %string, ptr %43, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i151, align 4
  %44 = load i64, ptr %3, align 4
  %45 = icmp eq i64 %44, 20
  br i1 %45, label %if.entry.i205, label %is_object.exit208.thread

if.entry.i205:                                    ; preds = %if.entry1, %if.entry.i205
  %.tr5.i203 = phi ptr [ %46, %if.entry.i205 ], [ %3, %if.entry1 ]
  %memberidx1.i204 = getelementptr inbounds %GenericType, ptr %.tr5.i203, i64 0, i32 3
  %46 = load ptr, ptr %memberidx1.i204, align 8
  %47 = load i64, ptr %46, align 4
  switch i64 %47, label %ifend6 [
    i64 20, label %if.entry.i205
    i64 13, label %tailrecurse.i189.preheader
  ]

is_object.exit208.thread:                         ; preds = %if.entry1
  %48 = icmp eq i64 %44, 13
  br i1 %48, label %if.entry3.i201, label %ifend6

tailrecurse.i189.preheader:                       ; preds = %if.entry.i205
  br i1 %45, label %if.entry.i192, label %if.entry3.i201

if.entry.i192:                                    ; preds = %tailrecurse.i189.preheader, %if.entry.i192
  %.tr11.i188221 = phi ptr [ %49, %if.entry.i192 ], [ %3, %tailrecurse.i189.preheader ]
  %memberidx1.i191 = getelementptr inbounds %GenericType, ptr %.tr11.i188221, i64 0, i32 3
  %49 = load ptr, ptr %memberidx1.i191, align 8
  %50 = load i64, ptr %49, align 4
  %switch = icmp eq i64 %50, 20
  br i1 %switch, label %if.entry.i192, label %if.entry3.i201

if.entry3.i201:                                   ; preds = %if.entry.i192, %is_object.exit208.thread, %tailrecurse.i189.preheader
  %.tr11.i188.lcssa = phi ptr [ %3, %tailrecurse.i189.preheader ], [ %3, %is_object.exit208.thread ], [ %49, %if.entry.i192 ]
  %memberidx6.i193 = getelementptr inbounds %ObjectType, ptr %.tr11.i188.lcssa, i64 0, i32 1
  %51 = load ptr, ptr %memberidx6.i193, align 8
  %memberidx.i.i194 = getelementptr inbounds %Program, ptr %41, i64 0, i32 1
  %52 = load ptr, ptr %memberidx.i.i194, align 8
  %53 = load i64, ptr %51, align 4
  %memberidx.i.i.i195 = getelementptr inbounds %Array_Module_, ptr %52, i64 0, i32 1
  %54 = load ptr, ptr %memberidx.i.i.i195, align 8
  %ptridx.i.i.i196 = getelementptr inbounds ptr, ptr %54, i64 %53
  %55 = load ptr, ptr %ptridx.i.i.i196, align 8
  %memberidx2.i.i197 = getelementptr inbounds %Module, ptr %55, i64 0, i32 4
  %56 = load ptr, ptr %memberidx2.i.i197, align 8
  %memberidx3.i.i198 = getelementptr inbounds %TypeId, ptr %51, i64 0, i32 2
  %57 = load i64, ptr %memberidx3.i.i198, align 4
  %memberidx.i5.i.i199 = getelementptr inbounds %Array_Class_, ptr %56, i64 0, i32 1
  %58 = load ptr, ptr %memberidx.i5.i.i199, align 8
  %ptridx.i6.i.i200 = getelementptr inbounds ptr, ptr %58, i64 %57
  %59 = load ptr, ptr %ptridx.i6.i.i200, align 8
  %memberidx.i143 = getelementptr inbounds %Class, ptr %59, i64 0, i32 1
  %60 = load ptr, ptr %memberidx.i143, align 8
  %memberidx.i.i144 = getelementptr inbounds %string, ptr %60, i64 0, i32 2
  %61 = load i64, ptr %memberidx.i.i144, align 4
  %.not.i.i = icmp eq i64 %61, 6
  br i1 %.not.i.i, label %string___eq__.exit.i, label %ifend6

string___eq__.exit.i:                             ; preds = %if.entry3.i201
  %memberidx2.i.i147 = getelementptr inbounds %string, ptr %60, i64 0, i32 1
  %62 = load ptr, ptr %memberidx2.i.i147, align 8
  %63 = tail call i64 @memcmp(ptr %62, ptr %42, i64 6)
  %64 = icmp eq i64 %63, 0
  %65 = load ptr, ptr %59, align 8
  %66 = load i64, ptr %65, align 4
  %67 = icmp eq i64 %66, 1
  %68 = and i1 %64, %67
  br i1 %68, label %if.entry4, label %ifend6

ifend3:                                           ; preds = %is_object.exit214
  %69 = icmp eq i64 %7, 17
  br i1 %69, label %if.entry39, label %common.ret

if.entry4:                                        ; preds = %string___eq__.exit.i
  %70 = tail call fastcc ptr @CodeGen_codegen_string_to_cstring(ptr %0, ptr %1, ptr %2)
  %memberidx.i132 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 2
  %71 = load i64, ptr %memberidx.i132, align 4
  %memberidx1.i133 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 3
  %72 = load i64, ptr %memberidx1.i133, align 4
  %.not.i134 = icmp slt i64 %71, %72
  br i1 %.not.i134, label %if.entry4.Array_LLVMValueRef____sl__.exit141_crit_edge, label %if.entry.i137

if.entry4.Array_LLVMValueRef____sl__.exit141_crit_edge: ; preds = %if.entry4
  %memberidx4.i138.phi.trans.insert = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 1
  %.pre230 = load ptr, ptr %memberidx4.i138.phi.trans.insert, align 8
  br label %Array_LLVMValueRef____sl__.exit141

if.entry.i137:                                    ; preds = %if.entry4
  %73 = shl i64 %72, 1
  store i64 %73, ptr %memberidx1.i133, align 4
  %memberidx2.i.i136 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 1
  %74 = load ptr, ptr %memberidx2.i.i136, align 8
  %75 = shl i64 %72, 4
  %76 = tail call ptr @realloc(ptr %74, i64 %75)
  store ptr %76, ptr %memberidx2.i.i136, align 8
  %.pre229 = load i64, ptr %memberidx.i132, align 4
  br label %Array_LLVMValueRef____sl__.exit141

Array_LLVMValueRef____sl__.exit141:               ; preds = %if.entry4.Array_LLVMValueRef____sl__.exit141_crit_edge, %if.entry.i137
  %77 = phi ptr [ %.pre230, %if.entry4.Array_LLVMValueRef____sl__.exit141_crit_edge ], [ %76, %if.entry.i137 ]
  %78 = phi i64 [ %71, %if.entry4.Array_LLVMValueRef____sl__.exit141_crit_edge ], [ %.pre229, %if.entry.i137 ]
  %79 = add i64 %78, 1
  store i64 %79, ptr %memberidx.i132, align 4
  %ptridx.i139 = getelementptr inbounds ptr, ptr %77, i64 %78
  store ptr %70, ptr %ptridx.i139, align 8
  br label %common.ret

ifend6:                                           ; preds = %if.entry.i205, %is_object.exit208.thread, %if.entry3.i201, %string___eq__.exit.i
  %80 = load ptr, ptr %memberidx, align 8
  br label %tailrecurse.i

tailrecurse.i:                                    ; preds = %if.entry.i182, %ifend6
  %.tr11.i = phi ptr [ %3, %ifend6 ], [ %82, %if.entry.i182 ]
  %81 = load i64, ptr %.tr11.i, align 4
  switch i64 %81, label %get_class_from_type.exit [
    i64 20, label %if.entry.i182
    i64 13, label %if.entry3.i
  ]

if.entry.i182:                                    ; preds = %tailrecurse.i
  %memberidx1.i181 = getelementptr inbounds %GenericType, ptr %.tr11.i, i64 0, i32 3
  %82 = load ptr, ptr %memberidx1.i181, align 8
  br label %tailrecurse.i

if.entry3.i:                                      ; preds = %tailrecurse.i
  %memberidx6.i183 = getelementptr inbounds %ObjectType, ptr %.tr11.i, i64 0, i32 1
  %83 = load ptr, ptr %memberidx6.i183, align 8
  %memberidx.i.i184 = getelementptr inbounds %Program, ptr %80, i64 0, i32 1
  %84 = load ptr, ptr %memberidx.i.i184, align 8
  %85 = load i64, ptr %83, align 4
  %memberidx.i.i.i185 = getelementptr inbounds %Array_Module_, ptr %84, i64 0, i32 1
  %86 = load ptr, ptr %memberidx.i.i.i185, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %86, i64 %85
  %87 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i186 = getelementptr inbounds %Module, ptr %87, i64 0, i32 4
  %88 = load ptr, ptr %memberidx2.i.i186, align 8
  %memberidx3.i.i187 = getelementptr inbounds %TypeId, ptr %83, i64 0, i32 2
  %89 = load i64, ptr %memberidx3.i.i187, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %88, i64 0, i32 1
  %90 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %90, i64 %89
  %91 = load ptr, ptr %ptridx.i6.i.i, align 8
  br label %get_class_from_type.exit

get_class_from_type.exit:                         ; preds = %tailrecurse.i, %if.entry3.i
  %common.ret.op.i180 = phi ptr [ %91, %if.entry3.i ], [ null, %tailrecurse.i ]
  %92 = alloca %StringBuilder, align 8
  %memberidx8 = getelementptr inbounds %Class, ptr %common.ret.op.i180, i64 0, i32 1
  %93 = load ptr, ptr %memberidx8, align 8
  %memberidx9 = getelementptr inbounds %string, ptr %93, i64 0, i32 2
  %94 = load i64, ptr %memberidx9, align 4
  %95 = add i64 %94, 14
  store ptr @VTableStringBuilder, ptr %92, align 8
  %memberidx.i128 = getelementptr inbounds %StringBuilder, ptr %92, i64 0, i32 2
  store i64 %95, ptr %memberidx.i128, align 8
  %memberidx1.i129 = getelementptr inbounds %StringBuilder, ptr %92, i64 0, i32 1
  %96 = trunc i64 %95 to i32
  %mallocsize.i = shl i32 %96, 3
  %97 = tail call ptr @malloc(i32 %mallocsize.i)
  store ptr %97, ptr %memberidx1.i129, align 8
  %memberidx3.i130 = getelementptr inbounds %StringBuilder, ptr %92, i64 0, i32 3
  store ptr %97, ptr %memberidx3.i130, align 8
  %memberidx5.i131 = getelementptr inbounds %StringBuilder, ptr %92, i64 0, i32 4
  store i64 0, ptr %memberidx5.i131, align 8
  %98 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr }>, ptr @VTableStringBuilder, i64 0, i32 1), align 8
  %99 = load ptr, ptr %memberidx8, align 8
  %100 = load ptr, ptr %99, align 8
  %memberidx12 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %100, i64 0, i32 5
  %101 = load ptr, ptr %memberidx12, align 8
  %102 = tail call ptr %101(ptr nonnull %99)
  %103 = alloca ptr, align 8
  %104 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %103, ptr nonnull @280, ptr %102)
  %105 = load ptr, ptr %103, align 8
  %106 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %106, align 8
  %memberidx.i125 = getelementptr inbounds %string, ptr %106, i64 0, i32 1
  store ptr %105, ptr %memberidx.i125, align 8
  %memberidx1.i126 = getelementptr inbounds %string, ptr %106, i64 0, i32 2
  store i64 %104, ptr %memberidx1.i126, align 4
  %memberidx2.i127 = getelementptr inbounds %string, ptr %106, i64 0, i32 3
  store i64 %104, ptr %memberidx2.i127, align 4
  tail call void @free(ptr %102)
  call void %98(ptr nonnull %92, ptr nonnull %106)
  %107 = icmp eq i64 %5, 3
  br i1 %107, label %if.entry13, label %ifend15

if.entry13:                                       ; preds = %get_class_from_type.exit
  %108 = load ptr, ptr %92, align 8
  %memberidx16 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %108, i64 0, i32 1
  %109 = load ptr, ptr %memberidx16, align 8
  %110 = call ptr @malloc(i32 48)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %110, ptr noundef nonnull align 8 dereferenceable(6) @281, i64 6, i1 false)
  %111 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %111, align 8
  %memberidx.i.i122 = getelementptr inbounds %string, ptr %111, i64 0, i32 1
  store ptr %110, ptr %memberidx.i.i122, align 8
  %memberidx1.i.i123 = getelementptr inbounds %string, ptr %111, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i123, align 4
  %memberidx2.i.i124 = getelementptr inbounds %string, ptr %111, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i124, align 4
  call void %109(ptr nonnull %92, ptr nonnull %111)
  %112 = load ptr, ptr %92, align 8
  %memberidx17 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %112, i64 0, i32 3
  %113 = load ptr, ptr %memberidx17, align 8
  %114 = call ptr %113(ptr nonnull %92)
  %memberidx.i115 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 7
  %115 = load ptr, ptr %memberidx.i115, align 8
  %116 = load ptr, ptr %115, align 8
  %memberidx1.i116 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %116, i64 0, i32 1
  %117 = load ptr, ptr %memberidx1.i116, align 8
  %118 = call ptr %117(ptr nonnull %115, ptr %114)
  %119 = icmp eq ptr %118, null
  br i1 %119, label %if.entry.i118, label %common.ret

if.entry.i118:                                    ; preds = %if.entry13
  %120 = load ptr, ptr %114, align 8
  %memberidx2.i117 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %120, i64 0, i32 5
  %121 = load ptr, ptr %memberidx2.i117, align 8
  %122 = call ptr %121(ptr nonnull %114)
  %123 = call ptr @LLVMBuildGlobalString(ptr %1, ptr %122, ptr nonnull @27)
  %124 = load ptr, ptr %memberidx.i115, align 8
  %125 = load ptr, ptr %124, align 8
  %126 = load ptr, ptr %125, align 8
  call void %126(ptr nonnull %124, ptr nonnull %114, ptr %123)
  br label %common.ret

ifend15:                                          ; preds = %get_class_from_type.exit
  %127 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMValueRef_, ptr %127, align 8
  %memberidx.i112 = getelementptr inbounds %Array_LLVMValueRef_, ptr %127, i64 0, i32 2
  %memberidx1.i113 = getelementptr inbounds %Array_LLVMValueRef_, ptr %127, i64 0, i32 3
  store i64 8, ptr %memberidx1.i113, align 4
  %memberidx2.i114 = getelementptr inbounds %Array_LLVMValueRef_, ptr %127, i64 0, i32 1
  %128 = call ptr @malloc(i32 64)
  store ptr %128, ptr %memberidx2.i114, align 8
  store i64 0, ptr %memberidx.i112, align 4
  %memberidx20 = getelementptr inbounds %Class, ptr %common.ret.op.i180, i64 0, i32 6
  %129 = load ptr, ptr %memberidx20, align 8
  %130 = load ptr, ptr %129, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %130, i64 0, i32 2
  %131 = load ptr, ptr %memberidx21, align 8
  %132 = call ptr %131(ptr nonnull %129)
  %133 = call ptr @malloc(i32 33)
  %memberidx.i107 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %132, i64 0, i32 1
  %134 = load ptr, ptr %memberidx.i107, align 8
  %memberidx1.i108 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %132, i64 0, i32 2
  %135 = load i64, ptr %memberidx1.i108, align 4
  store ptr @VTableArrayIterator_Bucket_string_PropId__, ptr %133, align 8
  %memberidx.i.i109 = getelementptr inbounds %Iterator_Bucket_string_PropId__, ptr %133, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i109, align 1
  %memberidx1.i.i110 = getelementptr inbounds %ArrayIterator_Bucket_string_PropId__, ptr %133, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i110, align 4
  %memberidx2.i.i111 = getelementptr inbounds %ArrayIterator_Bucket_string_PropId__, ptr %133, i64 0, i32 4
  store ptr %134, ptr %memberidx2.i.i111, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_Bucket_string_PropId__, ptr %133, i64 0, i32 3
  store i64 %135, ptr %memberidx3.i.i, align 4
  %136 = load ptr, ptr @VTableArrayIterator_Bucket_string_PropId__, align 8
  %137 = call ptr %136(ptr nonnull %133)
  %138 = load i1, ptr %memberidx.i.i109, align 1
  br i1 %138, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %ifend15
  %139 = add i64 %5, 1
  %memberidx.i81 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 2
  %memberidx1.i82 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 3
  %memberidx2.i.i85 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %Array_LLVMValueRef____sl__.exit
  %140 = phi ptr [ %128, %for.body.lr.ph ], [ %208, %Array_LLVMValueRef____sl__.exit ]
  %141 = phi i64 [ 8, %for.body.lr.ph ], [ %209, %Array_LLVMValueRef____sl__.exit ]
  %142 = phi i64 [ 0, %for.body.lr.ph ], [ %210, %Array_LLVMValueRef____sl__.exit ]
  %storemerge219 = phi ptr [ %137, %for.body.lr.ph ], [ %227, %Array_LLVMValueRef____sl__.exit ]
  %143 = load ptr, ptr %memberidx, align 8
  %memberidx25 = getelementptr inbounds %Bucket_string_PropId_, ptr %storemerge219, i64 0, i32 2
  %144 = load ptr, ptr %memberidx25, align 8
  %memberidx.i.i102 = getelementptr inbounds %PropId, ptr %144, i64 0, i32 1
  %145 = load ptr, ptr %memberidx.i.i102, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %143, i64 0, i32 1
  %146 = load ptr, ptr %memberidx.i.i.i, align 8
  %147 = load i64, ptr %145, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %146, i64 0, i32 1
  %148 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %148, i64 %147
  %149 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %149, i64 0, i32 4
  %150 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %145, i64 0, i32 2
  %151 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %150, i64 0, i32 1
  %152 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %152, i64 %151
  %153 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %154 = load i64, ptr %144, align 4
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %if.entry.i105, label %ifend.i

if.entry.i105:                                    ; preds = %for.body
  %memberidx1.i103 = getelementptr inbounds %Class, ptr %153, i64 0, i32 5
  %156 = load ptr, ptr %memberidx1.i103, align 8
  %memberidx2.i104 = getelementptr inbounds %PropId, ptr %144, i64 0, i32 2
  %157 = load i64, ptr %memberidx2.i104, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %156, i64 0, i32 1
  %158 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %158, i64 %157
  %159 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %159, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %for.body
  %memberidx4.i106 = getelementptr inbounds %Class, ptr %153, i64 0, i32 4
  %160 = load ptr, ptr %memberidx4.i106, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %144, i64 0, i32 2
  %161 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %160, i64 0, i32 1
  %162 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %162, i64 %161
  %163 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %163, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i105, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i105 ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i = load ptr, ptr %common.ret.op.in.i, align 8
  %memberidx26 = getelementptr inbounds %Bucket_string_PropId_, ptr %storemerge219, i64 0, i32 1
  %164 = load ptr, ptr %memberidx26, align 8
  %165 = call fastcc ptr @CodeGen_get_member_with_name(ptr nonnull %0, ptr %1, ptr %2, ptr nonnull %3, ptr %164)
  %166 = call fastcc ptr @CodeGen_get_string_val(ptr nonnull %0, ptr %1, ptr %165, ptr %common.ret.op.i, ptr %4, i64 %139)
  %167 = load i64, ptr %common.ret.op.i, align 4
  %168 = icmp eq i64 %167, 20
  br i1 %168, label %if.entry.i178, label %is_object.exit

if.entry.i178:                                    ; preds = %get_class_prop_type.exit, %if.entry.i178
  %.tr5.i = phi ptr [ %169, %if.entry.i178 ], [ %common.ret.op.i, %get_class_prop_type.exit ]
  %memberidx1.i177 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %169 = load ptr, ptr %memberidx1.i177, align 8
  %170 = load i64, ptr %169, align 4
  %171 = icmp eq i64 %170, 20
  br i1 %171, label %if.entry.i178, label %is_object.exit

is_object.exit:                                   ; preds = %if.entry.i178, %get_class_prop_type.exit
  %.lcssa.i = phi i64 [ %167, %get_class_prop_type.exit ], [ %170, %if.entry.i178 ]
  %172 = icmp eq i64 %.lcssa.i, 13
  %173 = call ptr @LLVMTypeOf(ptr %166)
  %174 = call i64 @LLVMGetTypeKind(ptr %173)
  %175 = icmp ne i64 %174, 12
  %176 = call i1 @LLVMIsGlobalConstant(ptr %166)
  %177 = or i1 %172, %176
  %178 = or i1 %175, %177
  br i1 %178, label %ifend29, label %if.entry27

for.end:                                          ; preds = %Array_LLVMValueRef____sl__.exit, %ifend15
  tail call void @free(ptr nonnull %133)
  %179 = load ptr, ptr %92, align 8
  %memberidx35 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %179, i64 0, i32 1
  %180 = load ptr, ptr %memberidx35, align 8
  %181 = call ptr @malloc(i32 8)
  store i8 125, ptr %181, align 8
  %182 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %182, align 8
  %memberidx.i.i99 = getelementptr inbounds %string, ptr %182, i64 0, i32 1
  store ptr %181, ptr %memberidx.i.i99, align 8
  %memberidx1.i.i100 = getelementptr inbounds %string, ptr %182, i64 0, i32 2
  store i64 1, ptr %memberidx1.i.i100, align 4
  %memberidx2.i.i101 = getelementptr inbounds %string, ptr %182, i64 0, i32 3
  store i64 1, ptr %memberidx2.i.i101, align 4
  call void %180(ptr nonnull %92, ptr nonnull %182)
  %183 = load ptr, ptr %92, align 8
  %memberidx37 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %183, i64 0, i32 3
  %184 = load ptr, ptr %memberidx37, align 8
  %185 = call ptr %184(ptr nonnull %92)
  %186 = call fastcc ptr @CodeGen_codegen_safe_fmt_string(ptr %0, ptr %1, ptr %185, ptr nonnull %127, ptr null)
  %memberidx.i90 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 2
  %187 = load i64, ptr %memberidx.i90, align 4
  %memberidx1.i91 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 3
  %188 = load i64, ptr %memberidx1.i91, align 4
  %.not.i92 = icmp slt i64 %187, %188
  br i1 %.not.i92, label %for.end.Array_LLVMValueRef____sl__.exit98_crit_edge, label %if.entry.i95

for.end.Array_LLVMValueRef____sl__.exit98_crit_edge: ; preds = %for.end
  %memberidx4.i96.phi.trans.insert = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 1
  %.pre228 = load ptr, ptr %memberidx4.i96.phi.trans.insert, align 8
  br label %Array_LLVMValueRef____sl__.exit98

if.entry.i95:                                     ; preds = %for.end
  %189 = shl i64 %188, 1
  store i64 %189, ptr %memberidx1.i91, align 4
  %memberidx2.i.i94 = getelementptr inbounds %Array_LLVMValueRef_, ptr %4, i64 0, i32 1
  %190 = load ptr, ptr %memberidx2.i.i94, align 8
  %191 = shl i64 %188, 4
  %192 = call ptr @realloc(ptr %190, i64 %191)
  store ptr %192, ptr %memberidx2.i.i94, align 8
  %.pre227 = load i64, ptr %memberidx.i90, align 4
  br label %Array_LLVMValueRef____sl__.exit98

Array_LLVMValueRef____sl__.exit98:                ; preds = %for.end.Array_LLVMValueRef____sl__.exit98_crit_edge, %if.entry.i95
  %193 = phi ptr [ %.pre228, %for.end.Array_LLVMValueRef____sl__.exit98_crit_edge ], [ %192, %if.entry.i95 ]
  %194 = phi i64 [ %187, %for.end.Array_LLVMValueRef____sl__.exit98_crit_edge ], [ %.pre227, %if.entry.i95 ]
  %195 = add i64 %194, 1
  store i64 %195, ptr %memberidx.i90, align 4
  %ptridx.i97 = getelementptr inbounds ptr, ptr %193, i64 %194
  store ptr %186, ptr %ptridx.i97, align 8
  br label %common.ret

if.entry27:                                       ; preds = %is_object.exit
  %196 = load i64, ptr %memberidx.i81, align 4
  %197 = load i64, ptr %memberidx1.i82, align 4
  %.not.i83 = icmp slt i64 %196, %197
  br i1 %.not.i83, label %if.entry27.Array_LLVMValueRef____sl__.exit89_crit_edge, label %if.entry.i86

if.entry27.Array_LLVMValueRef____sl__.exit89_crit_edge: ; preds = %if.entry27
  %.pre226 = load ptr, ptr %memberidx2.i.i85, align 8
  br label %Array_LLVMValueRef____sl__.exit89

if.entry.i86:                                     ; preds = %if.entry27
  %198 = shl i64 %197, 1
  store i64 %198, ptr %memberidx1.i82, align 4
  %199 = load ptr, ptr %memberidx2.i.i85, align 8
  %200 = shl i64 %197, 4
  %201 = call ptr @realloc(ptr %199, i64 %200)
  store ptr %201, ptr %memberidx2.i.i85, align 8
  %.pre = load i64, ptr %memberidx.i81, align 4
  br label %Array_LLVMValueRef____sl__.exit89

Array_LLVMValueRef____sl__.exit89:                ; preds = %if.entry27.Array_LLVMValueRef____sl__.exit89_crit_edge, %if.entry.i86
  %202 = phi ptr [ %.pre226, %if.entry27.Array_LLVMValueRef____sl__.exit89_crit_edge ], [ %201, %if.entry.i86 ]
  %203 = phi i64 [ %196, %if.entry27.Array_LLVMValueRef____sl__.exit89_crit_edge ], [ %.pre, %if.entry.i86 ]
  %204 = add i64 %203, 1
  store i64 %204, ptr %memberidx.i81, align 4
  %ptridx.i88 = getelementptr inbounds ptr, ptr %202, i64 %203
  store ptr %166, ptr %ptridx.i88, align 8
  br label %ifend29

ifend29:                                          ; preds = %is_object.exit, %Array_LLVMValueRef____sl__.exit89
  %.not.i = icmp slt i64 %142, %141
  br i1 %.not.i, label %Array_LLVMValueRef____sl__.exit, label %if.entry.i80

if.entry.i80:                                     ; preds = %ifend29
  %205 = shl i64 %141, 1
  store i64 %205, ptr %memberidx1.i113, align 4
  %206 = shl i64 %141, 4
  %207 = call ptr @realloc(ptr %140, i64 %206)
  store ptr %207, ptr %memberidx2.i114, align 8
  br label %Array_LLVMValueRef____sl__.exit

Array_LLVMValueRef____sl__.exit:                  ; preds = %ifend29, %if.entry.i80
  %208 = phi ptr [ %140, %ifend29 ], [ %207, %if.entry.i80 ]
  %209 = phi i64 [ %141, %ifend29 ], [ %205, %if.entry.i80 ]
  %210 = add i64 %142, 1
  store i64 %210, ptr %memberidx.i112, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %208, i64 %142
  store ptr %166, ptr %ptridx.i, align 8
  %211 = load ptr, ptr %92, align 8
  %memberidx30 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %211, i64 0, i32 1
  %212 = load ptr, ptr %memberidx30, align 8
  %213 = load ptr, ptr %memberidx26, align 8
  %214 = load ptr, ptr %213, align 8
  %memberidx32 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %214, i64 0, i32 5
  %215 = load ptr, ptr %memberidx32, align 8
  %216 = call ptr %215(ptr nonnull %213)
  %217 = call fastcc ptr @get_format_from_type(ptr nonnull %common.ret.op.i)
  %218 = load ptr, ptr %217, align 8
  %memberidx33 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %218, i64 0, i32 5
  %219 = load ptr, ptr %memberidx33, align 8
  %220 = call ptr %219(ptr nonnull %217)
  %221 = alloca ptr, align 8
  %222 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %221, ptr nonnull @284, ptr %216, ptr %220)
  %223 = load ptr, ptr %221, align 8
  %224 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %224, align 8
  %memberidx.i73 = getelementptr inbounds %string, ptr %224, i64 0, i32 1
  store ptr %223, ptr %memberidx.i73, align 8
  %memberidx1.i74 = getelementptr inbounds %string, ptr %224, i64 0, i32 2
  store i64 %222, ptr %memberidx1.i74, align 4
  %memberidx2.i75 = getelementptr inbounds %string, ptr %224, i64 0, i32 3
  store i64 %222, ptr %memberidx2.i75, align 4
  tail call void @free(ptr %216)
  tail call void @free(ptr %220)
  call void %212(ptr nonnull %92, ptr nonnull %224)
  %225 = load ptr, ptr %133, align 8
  %226 = load ptr, ptr %225, align 8
  %227 = call ptr %226(ptr nonnull %133)
  %228 = load i1, ptr %memberidx.i.i109, align 1
  br i1 %228, label %for.end, label %for.body

if.entry39:                                       ; preds = %ifend3
  %229 = tail call ptr @malloc(i32 80)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(10) %229, ptr noundef nonnull align 8 dereferenceable(10) @285, i64 10, i1 false)
  %230 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %230, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %230, i64 0, i32 1
  store ptr %229, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %230, i64 0, i32 2
  store i64 10, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %230, i64 0, i32 3
  store i64 10, ptr %memberidx2.i.i, align 4
  %memberidx.i = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 7
  %231 = load ptr, ptr %memberidx.i, align 8
  %232 = load ptr, ptr %231, align 8
  %memberidx1.i = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %232, i64 0, i32 1
  %233 = load ptr, ptr %memberidx1.i, align 8
  %234 = tail call ptr %233(ptr nonnull %231, ptr nonnull %230)
  %235 = icmp eq ptr %234, null
  br i1 %235, label %if.entry.i, label %common.ret

if.entry.i:                                       ; preds = %if.entry39
  %236 = load ptr, ptr %230, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %236, i64 0, i32 5
  %237 = load ptr, ptr %memberidx2.i, align 8
  %238 = tail call ptr %237(ptr nonnull %230)
  %239 = tail call ptr @LLVMBuildGlobalString(ptr %1, ptr %238, ptr nonnull @27)
  %240 = load ptr, ptr %memberidx.i, align 8
  %241 = load ptr, ptr %240, align 8
  %242 = load ptr, ptr %241, align 8
  tail call void %242(ptr nonnull %240, ptr nonnull %230, ptr %239)
  br label %common.ret
}

define internal fastcc ptr @CodeGen_get_var_expr_mem(ptr nocapture %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %VarAccessExpression, ptr %1, i64 0, i32 4
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call fastcc ptr @CodeGen_get_or_codegen_var(ptr %0, ptr %4)
  %6 = icmp eq ptr %5, null
  br i1 %6, label %if.entry, label %ifend

if.entry:                                         ; preds = %2
  %7 = tail call ptr @malloc(i32 360)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(45) %7, ptr noundef nonnull align 8 dereferenceable(45) @288, i64 45, i1 false)
  %8 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %8, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 1
  store ptr %7, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 2
  store i64 45, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %8, i64 0, i32 3
  store i64 45, ptr %memberidx2.i.i, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %9 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %10 = tail call ptr %9(ptr nonnull %8)
  %11 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @270, ptr %10)
  %12 = load ptr, ptr %3, align 8
  %13 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %13, align 8
  %memberidx.i.i2 = getelementptr inbounds %string, ptr %13, i64 0, i32 1
  store ptr %12, ptr %memberidx.i.i2, align 8
  %memberidx1.i.i3 = getelementptr inbounds %string, ptr %13, i64 0, i32 2
  store i64 %11, ptr %memberidx1.i.i3, align 4
  %memberidx2.i.i4 = getelementptr inbounds %string, ptr %13, i64 0, i32 3
  store i64 %11, ptr %memberidx2.i.i4, align 4
  call void @free(ptr %10)
  %14 = load ptr, ptr %13, align 8
  %memberidx.i.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %14, i64 0, i32 3
  %15 = load ptr, ptr %memberidx.i.i.i, align 8
  %16 = call ptr %15(ptr nonnull %13)
  %17 = load i64, ptr %memberidx1.i.i3, align 4
  call void @write(i64 1, ptr %16, i64 %17)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  br label %ifend

ifend:                                            ; preds = %2, %if.entry
  ret ptr %5
}

define internal fastcc ptr @CodeGen_get_index_expr_mem(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %IndexExpression, ptr %2, i64 0, i32 5
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %4)
  %memberidx1 = getelementptr inbounds %IndexExpression, ptr %2, i64 0, i32 4
  %6 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %6, i64 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = load i64, ptr %7, align 4
  %9 = icmp eq i64 %8, 15
  br i1 %9, label %true_block, label %false_block

true_block:                                       ; preds = %3
  %memberidx3 = getelementptr inbounds %PointerType, ptr %7, i64 0, i32 1
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %10, i1 true)
  br label %end

false_block:                                      ; preds = %3
  %12 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr nonnull %7, i1 true)
  br label %end

end:                                              ; preds = %false_block, %true_block
  %ternary = phi ptr [ %11, %true_block ], [ %12, %false_block ]
  %13 = load i64, ptr %7, align 4
  %14 = icmp eq i64 %13, 16
  br i1 %14, label %if.entry, label %ifend

common.ret:                                       ; preds = %ifend, %CodeGen_get_expr_mem.exit
  %common.ret.op = phi ptr [ %24, %CodeGen_get_expr_mem.exit ], [ %27, %ifend ]
  ret ptr %common.ret.op

if.entry:                                         ; preds = %end
  %indices = alloca [2 x ptr], align 8
  %15 = tail call ptr @LLVMIntType(i64 64)
  %16 = tail call ptr @LLVMConstInt(ptr %15, i64 0, i1 false)
  store ptr %16, ptr %indices, align 8
  %17 = getelementptr inbounds ptr, ptr %indices, i64 1
  store ptr %5, ptr %17, align 8
  %18 = load ptr, ptr %memberidx1, align 8
  %memberidx.i = getelementptr inbounds %Expression, ptr %18, i64 0, i32 2
  %19 = load i64, ptr %memberidx.i, align 4
  switch i64 %19, label %ifend8.i [
    i64 7, label %if.entry.i
    i64 13, label %if.entry2.i
    i64 12, label %if.entry6.i
  ]

if.entry.i:                                       ; preds = %if.entry
  %20 = tail call fastcc ptr @CodeGen_get_var_expr_mem(ptr %0, ptr nonnull %18)
  br label %CodeGen_get_expr_mem.exit

if.entry2.i:                                      ; preds = %if.entry
  %21 = tail call fastcc ptr @CodeGen_get_index_expr_mem(ptr %0, ptr %1, ptr nonnull %18)
  br label %CodeGen_get_expr_mem.exit

if.entry6.i:                                      ; preds = %if.entry
  %22 = tail call fastcc ptr @CodeGen_get_member_expr_mem(ptr %0, ptr %1, ptr nonnull %18, ptr null)
  br label %CodeGen_get_expr_mem.exit

ifend8.i:                                         ; preds = %if.entry
  %23 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr nonnull %18)
  br label %CodeGen_get_expr_mem.exit

CodeGen_get_expr_mem.exit:                        ; preds = %if.entry.i, %if.entry2.i, %if.entry6.i, %ifend8.i
  %common.ret.op.i = phi ptr [ %20, %if.entry.i ], [ %21, %if.entry2.i ], [ %22, %if.entry6.i ], [ %23, %ifend8.i ]
  %24 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %ternary, ptr %common.ret.op.i, ptr nonnull %indices, i64 2, ptr nonnull @289)
  br label %common.ret

ifend:                                            ; preds = %end
  %indices_1 = alloca [1 x ptr], align 8
  store ptr %5, ptr %indices_1, align 8
  %25 = load ptr, ptr %memberidx1, align 8
  %26 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %25)
  %27 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %ternary, ptr %26, ptr nonnull %indices_1, i64 1, ptr nonnull @290)
  br label %common.ret
}

define internal fastcc ptr @CodeGen_get_member_expr_mem(ptr nocapture %0, ptr %1, ptr nocapture readonly %2, ptr %3) unnamed_addr {
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %MemberExpression, ptr %2, i64 0, i32 5
  %9 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %PropId, ptr %9, i64 0, i32 1
  %10 = load ptr, ptr %memberidx1, align 8
  %memberidx.i72 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 8
  %11 = load ptr, ptr %memberidx.i72, align 8
  %12 = load ptr, ptr %11, align 8
  %memberidx1.i73 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %12, i64 0, i32 1
  %13 = load ptr, ptr %memberidx1.i73, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %14 = load i64, ptr %10, align 4
  %memberidx1.i.i74 = getelementptr inbounds %TypeId, ptr %10, i64 0, i32 1
  %15 = load i64, ptr %memberidx1.i.i74, align 4
  %memberidx2.i.i75 = getelementptr inbounds %TypeId, ptr %10, i64 0, i32 2
  %16 = load i64, ptr %memberidx2.i.i75, align 4
  %17 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %6, ptr nonnull @276, i64 %14, i64 %15, i64 %16)
  %18 = load ptr, ptr %6, align 8
  %19 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %19, align 8
  %memberidx.i.i.i76 = getelementptr inbounds %string, ptr %19, i64 0, i32 1
  store ptr %18, ptr %memberidx.i.i.i76, align 8
  %memberidx1.i.i.i77 = getelementptr inbounds %string, ptr %19, i64 0, i32 2
  store i64 %17, ptr %memberidx1.i.i.i77, align 4
  %memberidx2.i.i.i78 = getelementptr inbounds %string, ptr %19, i64 0, i32 3
  store i64 %17, ptr %memberidx2.i.i.i78, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %20 = call ptr %13(ptr nonnull %11, ptr nonnull %19)
  %.not.i66 = icmp eq ptr %20, null
  br i1 %.not.i66, label %ifend.i, label %CodeGen_get_or_codegen_class_from_typeid.exit

ifend.i:                                          ; preds = %4
  %memberidx.i68 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %21 = load ptr, ptr %memberidx.i68, align 8
  %memberidx.i.i69 = getelementptr inbounds %Program, ptr %21, i64 0, i32 1
  %22 = load ptr, ptr %memberidx.i.i69, align 8
  %23 = load i64, ptr %10, align 4
  %memberidx.i.i.i70 = getelementptr inbounds %Array_Module_, ptr %22, i64 0, i32 1
  %24 = load ptr, ptr %memberidx.i.i.i70, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %24, i64 %23
  %25 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i71 = getelementptr inbounds %Module, ptr %25, i64 0, i32 4
  %26 = load ptr, ptr %memberidx2.i.i71, align 8
  %27 = load i64, ptr %memberidx2.i.i75, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %26, i64 0, i32 1
  %28 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %28, i64 %27
  %29 = load ptr, ptr %ptridx.i6.i.i, align 8
  call fastcc void @CodeGen_declare_class(ptr nonnull %0, ptr %29)
  call fastcc void @CodeGen_codegen_class(ptr nonnull %0, ptr %29)
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %memberidx.i72, align 8
  %32 = load ptr, ptr %31, align 8
  %memberidx1.i.i80 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %32, i64 0, i32 1
  %33 = load ptr, ptr %memberidx1.i.i80, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %34 = load i64, ptr %30, align 4
  %memberidx1.i.i.i81 = getelementptr inbounds %TypeId, ptr %30, i64 0, i32 1
  %35 = load i64, ptr %memberidx1.i.i.i81, align 4
  %memberidx2.i.i.i82 = getelementptr inbounds %TypeId, ptr %30, i64 0, i32 2
  %36 = load i64, ptr %memberidx2.i.i.i82, align 4
  %37 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @276, i64 %34, i64 %35, i64 %36)
  %38 = load ptr, ptr %5, align 8
  %39 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %39, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %string, ptr %39, i64 0, i32 1
  store ptr %38, ptr %memberidx.i.i.i.i, align 8
  %memberidx1.i.i.i.i = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  store i64 %37, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %string, ptr %39, i64 0, i32 3
  store i64 %37, ptr %memberidx2.i.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  %40 = call ptr %33(ptr nonnull %31, ptr nonnull %39)
  br label %CodeGen_get_or_codegen_class_from_typeid.exit

CodeGen_get_or_codegen_class_from_typeid.exit:    ; preds = %4, %ifend.i
  %common.ret.op.i = phi ptr [ %40, %ifend.i ], [ %20, %4 ]
  %memberidx2 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %41 = load ptr, ptr %memberidx2, align 8
  %42 = load i64, ptr %41, align 4
  %.not48 = icmp eq i64 %42, 17
  %43 = load ptr, ptr %memberidx, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8)
  %memberidx.i = getelementptr inbounds %PropId, ptr %43, i64 0, i32 1
  %44 = load ptr, ptr %memberidx.i, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  %45 = load i64, ptr %44, align 4
  %memberidx1.i.i = getelementptr inbounds %TypeId, ptr %44, i64 0, i32 1
  %46 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %TypeId, ptr %44, i64 0, i32 2
  %47 = load i64, ptr %memberidx2.i.i, align 4
  %48 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %7, ptr nonnull @276, i64 %45, i64 %46, i64 %47)
  %49 = load ptr, ptr %7, align 8
  %50 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %50, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %50, i64 0, i32 1
  store ptr %49, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %50, i64 0, i32 2
  store i64 %48, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %50, i64 0, i32 3
  store i64 %48, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7)
  %51 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %52 = call ptr %51(ptr nonnull %50)
  %53 = load i64, ptr %43, align 4
  %memberidx3.i = getelementptr inbounds %PropId, ptr %43, i64 0, i32 2
  %54 = load i64, ptr %memberidx3.i, align 4
  %55 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %8, ptr nonnull @291, ptr %52, i64 %53, i64 %54)
  %56 = load ptr, ptr %8, align 8
  %57 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %57, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %57, i64 0, i32 1
  store ptr %56, ptr %memberidx.i.i, align 8
  %memberidx1.i6.i = getelementptr inbounds %string, ptr %57, i64 0, i32 2
  store i64 %55, ptr %memberidx1.i6.i, align 4
  %memberidx2.i7.i = getelementptr inbounds %string, ptr %57, i64 0, i32 3
  store i64 %55, ptr %memberidx2.i7.i, align 4
  call void @free(ptr %52)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8)
  %58 = load ptr, ptr %common.ret.op.i, align 8
  %memberidx6 = getelementptr inbounds %CGClassType, ptr %common.ret.op.i, i64 0, i32 3
  %59 = load ptr, ptr %memberidx6, align 8
  %60 = load ptr, ptr %59, align 8
  %memberidx7 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %60, i64 0, i32 1
  %61 = load ptr, ptr %memberidx7, align 8
  %62 = call ptr %61(ptr nonnull %59, ptr nonnull %57)
  %.not = icmp eq ptr %62, null
  br i1 %.not, label %ifend, label %common.ret

common.ret:                                       ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit, %ifend16
  %common.ret.op = phi ptr [ %92, %ifend16 ], [ %62, %CodeGen_get_or_codegen_class_from_typeid.exit ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit
  %63 = icmp eq ptr %3, null
  br i1 %63, label %if.entry8, label %ifend10

if.entry8:                                        ; preds = %ifend
  %memberidx11 = getelementptr inbounds %MemberExpression, ptr %2, i64 0, i32 4
  %64 = load ptr, ptr %memberidx11, align 8
  %65 = call fastcc ptr @CodeGen_codegen_expression(ptr nonnull %0, ptr %1, ptr %64)
  br label %ifend10

ifend10:                                          ; preds = %ifend, %if.entry8
  %ptr.0 = phi ptr [ %65, %if.entry8 ], [ %3, %ifend ]
  %66 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMValueRef_, ptr %66, align 8
  %memberidx.i49 = getelementptr inbounds %Array_LLVMValueRef_, ptr %66, i64 0, i32 2
  %memberidx1.i50 = getelementptr inbounds %Array_LLVMValueRef_, ptr %66, i64 0, i32 3
  store i64 8, ptr %memberidx1.i50, align 4
  %memberidx2.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %66, i64 0, i32 1
  %67 = call ptr @malloc(i32 64)
  store ptr %67, ptr %memberidx2.i, align 8
  %68 = call ptr @LLVMInt32Type()
  %69 = call ptr @LLVMConstInt(ptr %68, i64 0, i1 false)
  store ptr %69, ptr %67, align 8
  store i64 1, ptr %memberidx.i49, align 4
  br i1 %.not48, label %Array_LLVMValueRef____sl__.exit63, label %Array_LLVMValueRef____sl__.exit

Array_LLVMValueRef____sl__.exit:                  ; preds = %ifend10
  %memberidx17 = getelementptr inbounds %CGClassType, ptr %common.ret.op.i, i64 0, i32 5
  %70 = load ptr, ptr %memberidx17, align 8
  %71 = icmp ne ptr %70, null
  %. = zext i1 %71 to i64
  %72 = call ptr @LLVMInt32Type()
  %memberidx18 = getelementptr inbounds %CGClassType, ptr %common.ret.op.i, i64 0, i32 2
  %73 = load ptr, ptr %memberidx18, align 8
  %74 = load ptr, ptr %73, align 8
  %memberidx19 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %74, i64 0, i32 1
  %75 = load ptr, ptr %memberidx19, align 8
  %76 = call i64 %75(ptr nonnull %73, ptr nonnull %57)
  %77 = add i64 %76, %.
  %78 = call ptr @LLVMConstInt(ptr %72, i64 %77, i1 false)
  store i64 2, ptr %memberidx.i49, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %67, i64 1
  store ptr %78, ptr %ptridx.i, align 8
  br label %ifend16

Array_LLVMValueRef____sl__.exit63:                ; preds = %ifend10
  %79 = call ptr @LLVMInt32Type()
  %80 = call ptr @LLVMConstInt(ptr %79, i64 0, i1 false)
  store i64 2, ptr %memberidx.i49, align 4
  %ptridx.i62 = getelementptr inbounds ptr, ptr %67, i64 1
  store ptr %80, ptr %ptridx.i62, align 8
  %81 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %58, ptr %ptr.0, ptr nonnull %67, i64 2, ptr nonnull @27)
  %memberidx22 = getelementptr inbounds %CGClassType, ptr %common.ret.op.i, i64 0, i32 5
  %82 = load ptr, ptr %memberidx22, align 8
  %83 = call ptr @LLVMPointerType(ptr %82, i64 0)
  %84 = call ptr @LLVMBuildLoad2(ptr %1, ptr %83, ptr %81, ptr nonnull @27)
  %85 = call ptr @LLVMInt32Type()
  %memberidx23 = getelementptr inbounds %CGClassType, ptr %common.ret.op.i, i64 0, i32 1
  %86 = load ptr, ptr %memberidx23, align 8
  %87 = load ptr, ptr %86, align 8
  %memberidx24 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %87, i64 0, i32 1
  %88 = load ptr, ptr %memberidx24, align 8
  %89 = call i64 %88(ptr nonnull %86, ptr nonnull %57)
  %90 = call ptr @LLVMConstInt(ptr %85, i64 %89, i1 false)
  store ptr %90, ptr %ptridx.i62, align 8
  %91 = load ptr, ptr %memberidx22, align 8
  br label %ifend16

ifend16:                                          ; preds = %Array_LLVMValueRef____sl__.exit63, %Array_LLVMValueRef____sl__.exit
  %struct_type.0 = phi ptr [ %58, %Array_LLVMValueRef____sl__.exit ], [ %91, %Array_LLVMValueRef____sl__.exit63 ]
  %ptr.1 = phi ptr [ %ptr.0, %Array_LLVMValueRef____sl__.exit ], [ %84, %Array_LLVMValueRef____sl__.exit63 ]
  %92 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %struct_type.0, ptr %ptr.1, ptr nonnull %67, i64 2, ptr nonnull @292)
  br label %common.ret
}

define internal fastcc ptr @CodeGen_codegen_builtin_array(ptr nocapture %0, ptr %1, ptr nocapture readonly %2, ptr %3) unnamed_addr {
end:
  %memberidx = getelementptr inbounds %GenericType, ptr %2, i64 0, i32 3
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %4, i1 false)
  %memberidx1 = getelementptr inbounds %GenericType, ptr %2, i64 0, i32 2
  %6 = load ptr, ptr %memberidx1, align 8
  %memberidx.i = getelementptr inbounds %Array_Type_, ptr %6, i64 0, i32 1
  %7 = load ptr, ptr %memberidx.i, align 8
  %8 = load ptr, ptr %7, align 8
  %9 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %8, i1 true)
  %10 = tail call ptr @LLVMBuildMalloc(ptr %1, ptr %5, ptr nonnull @27)
  %memberidx2 = getelementptr inbounds %ArrayExpression, ptr %3, i64 0, i32 4
  %11 = load ptr, ptr %memberidx2, align 8
  %memberidx3 = getelementptr inbounds %Array_Expression_, ptr %11, i64 0, i32 2
  %12 = load i64, ptr %memberidx3, align 4
  %13 = tail call i64 @llvm.smax.i64(i64 %12, i64 1)
  %14 = tail call ptr @LLVMIntType(i64 64)
  %15 = tail call ptr @LLVMConstInt(ptr %14, i64 %13, i1 false)
  %16 = tail call ptr @LLVMIntType(i64 64)
  %17 = tail call ptr @LLVMConstInt(ptr %16, i64 %12, i1 false)
  %18 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMValueRef_, ptr %18, align 8
  %memberidx.i30 = getelementptr inbounds %Array_LLVMValueRef_, ptr %18, i64 0, i32 2
  %memberidx1.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %18, i64 0, i32 3
  store i64 16, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %18, i64 0, i32 1
  %19 = tail call ptr @malloc(i32 128)
  store ptr %19, ptr %memberidx2.i, align 8
  store ptr %10, ptr %19, align 8
  %20 = getelementptr inbounds ptr, ptr %19, i64 1
  %21 = tail call ptr @LLVMSizeOf(ptr %9)
  %22 = tail call ptr @LLVMConstMul(ptr %15, ptr %21)
  store ptr %22, ptr %20, align 8
  store i64 2, ptr %memberidx.i30, align 4
  tail call fastcc void @CodeGen_build_constructor_call(ptr %0, ptr %1, ptr %4, ptr nonnull %18)
  %23 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %23, ptr noundef nonnull align 8 dereferenceable(6) @293, i64 6, i1 false)
  %24 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %24, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %24, i64 0, i32 1
  store ptr %23, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %24, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %24, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i, align 4
  %25 = tail call fastcc ptr @CodeGen_get_member_mem_with_name(ptr %0, ptr %1, ptr %10, ptr %4, ptr nonnull %24)
  %26 = tail call ptr @LLVMPointerType(ptr %9, i64 0)
  %27 = tail call ptr @LLVMBuildLoad2(ptr %1, ptr %26, ptr %25, ptr nonnull @27)
  %28 = tail call fastcc ptr @CodeGen_store_array_elements(ptr %0, ptr %1, ptr %27, ptr %3)
  %29 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %29, ptr noundef nonnull align 8 dereferenceable(6) @294, i64 6, i1 false)
  %30 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %30, align 8
  %memberidx.i.i31 = getelementptr inbounds %string, ptr %30, i64 0, i32 1
  store ptr %29, ptr %memberidx.i.i31, align 8
  %memberidx1.i.i32 = getelementptr inbounds %string, ptr %30, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i32, align 4
  %memberidx2.i.i33 = getelementptr inbounds %string, ptr %30, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i33, align 4
  %31 = tail call fastcc ptr @CodeGen_get_member_mem_with_name(ptr %0, ptr %1, ptr %10, ptr %4, ptr nonnull %30)
  %32 = tail call ptr @LLVMBuildStore(ptr %1, ptr %17, ptr %31)
  ret ptr %10
}

define internal fastcc void @CodeGen_declare_class(ptr nocapture %0, ptr %1) unnamed_addr {
  %3 = alloca ptr, align 8
  %4 = tail call ptr @malloc(i32 56)
  %5 = tail call ptr @malloc(i32 32)
  store ptr @VTableMap_string_int_, ptr %5, align 8
  %memberidx.i.i80 = getelementptr inbounds %Map_string_int_, ptr %5, i64 0, i32 1
  %6 = tail call ptr @malloc(i32 2048)
  store ptr %6, ptr %memberidx.i.i80, align 8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %2, %for.body.i.i
  %i.0.i.i92 = phi i64 [ 0, %2 ], [ %9, %for.body.i.i ]
  %7 = load ptr, ptr %memberidx.i.i80, align 8
  %ptridx.i.i81 = getelementptr inbounds ptr, ptr %7, i64 %i.0.i.i92
  %8 = tail call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_int_, ptr %8, align 8
  %memberidx.i.i.i82 = getelementptr inbounds %Bucket_string_int_, ptr %8, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i.i82, align 1
  store ptr %8, ptr %ptridx.i.i81, align 8
  %9 = add nuw nsw i64 %i.0.i.i92, 1
  %10 = icmp ult i64 %i.0.i.i92, 255
  br i1 %10, label %for.body.i.i, label %Map_string_int__constructor.exit.i

Map_string_int__constructor.exit.i:               ; preds = %for.body.i.i
  %memberidx.i79 = getelementptr inbounds %CGClassType, ptr %4, i64 0, i32 1
  %memberidx2.i.i83 = getelementptr inbounds %Map_string_int_, ptr %5, i64 0, i32 3
  store i64 256, ptr %memberidx2.i.i83, align 4
  %memberidx3.i.i84 = getelementptr inbounds %Map_string_int_, ptr %5, i64 0, i32 2
  store i64 0, ptr %memberidx3.i.i84, align 4
  store ptr %5, ptr %memberidx.i79, align 8
  %11 = tail call ptr @malloc(i32 32)
  store ptr @VTableMap_string_int_, ptr %11, align 8
  %memberidx.i9.i = getelementptr inbounds %Map_string_int_, ptr %11, i64 0, i32 1
  %12 = tail call ptr @malloc(i32 2048)
  store ptr %12, ptr %memberidx.i9.i, align 8
  br label %for.body.i14.i

for.body.i14.i:                                   ; preds = %Map_string_int__constructor.exit.i, %for.body.i14.i
  %i.0.i10.i91 = phi i64 [ 0, %Map_string_int__constructor.exit.i ], [ %15, %for.body.i14.i ]
  %13 = load ptr, ptr %memberidx.i9.i, align 8
  %ptridx.i12.i = getelementptr inbounds ptr, ptr %13, i64 %i.0.i10.i91
  %14 = tail call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_int_, ptr %14, align 8
  %memberidx.i.i13.i = getelementptr inbounds %Bucket_string_int_, ptr %14, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i13.i, align 1
  store ptr %14, ptr %ptridx.i12.i, align 8
  %15 = add nuw nsw i64 %i.0.i10.i91, 1
  %16 = icmp ult i64 %i.0.i10.i91, 255
  br i1 %16, label %for.body.i14.i, label %Map_string_int__constructor.exit17.i

Map_string_int__constructor.exit17.i:             ; preds = %for.body.i14.i
  %memberidx1.i85 = getelementptr inbounds %CGClassType, ptr %4, i64 0, i32 2
  %memberidx2.i15.i = getelementptr inbounds %Map_string_int_, ptr %11, i64 0, i32 3
  store i64 256, ptr %memberidx2.i15.i, align 4
  %memberidx3.i16.i = getelementptr inbounds %Map_string_int_, ptr %11, i64 0, i32 2
  store i64 0, ptr %memberidx3.i16.i, align 4
  store ptr %11, ptr %memberidx1.i85, align 8
  %17 = tail call ptr @malloc(i32 32)
  store ptr @VTableMap_string_LLVMValueRef_, ptr %17, align 8
  %memberidx.i18.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %17, i64 0, i32 1
  %18 = tail call ptr @malloc(i32 2048)
  store ptr %18, ptr %memberidx.i18.i, align 8
  br label %for.body.i23.i

for.body.i23.i:                                   ; preds = %Map_string_int__constructor.exit17.i, %for.body.i23.i
  %i.0.i19.i90 = phi i64 [ 0, %Map_string_int__constructor.exit17.i ], [ %21, %for.body.i23.i ]
  %19 = load ptr, ptr %memberidx.i18.i, align 8
  %ptridx.i21.i = getelementptr inbounds ptr, ptr %19, i64 %i.0.i19.i90
  %20 = tail call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_LLVMValueRef_, ptr %20, align 8
  %memberidx.i.i22.i = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %20, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i22.i, align 1
  store ptr %20, ptr %ptridx.i21.i, align 8
  %21 = add nuw nsw i64 %i.0.i19.i90, 1
  %22 = icmp ult i64 %i.0.i19.i90, 255
  br i1 %22, label %for.body.i23.i, label %CGClassType_constructor.exit

CGClassType_constructor.exit:                     ; preds = %for.body.i23.i
  %memberidx2.i86 = getelementptr inbounds %CGClassType, ptr %4, i64 0, i32 3
  %memberidx2.i24.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %17, i64 0, i32 3
  store i64 256, ptr %memberidx2.i24.i, align 4
  %memberidx3.i25.i = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %17, i64 0, i32 2
  store i64 0, ptr %memberidx3.i25.i, align 4
  store ptr %17, ptr %memberidx2.i86, align 8
  %memberidx3.i87 = getelementptr inbounds %CGClassType, ptr %4, i64 0, i32 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %memberidx3.i87, i8 0, i64 16, i1 false)
  %23 = load ptr, ptr %0, align 8
  %24 = tail call ptr @LLVMGetModuleContext(ptr %23)
  %memberidx2 = getelementptr inbounds %Class, ptr %1, i64 0, i32 1
  %25 = load ptr, ptr %memberidx2, align 8
  %26 = load ptr, ptr %25, align 8
  %memberidx3 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %26, i64 0, i32 5
  %27 = load ptr, ptr %memberidx3, align 8
  %28 = tail call ptr %27(ptr nonnull %25)
  %29 = tail call ptr @LLVMStructCreateNamed(ptr %24, ptr %28)
  store ptr %29, ptr %4, align 8
  %30 = load ptr, ptr %1, align 8
  %memberidx.i74 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 8
  %31 = load ptr, ptr %memberidx.i74, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %32, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %34 = load i64, ptr %30, align 4
  %memberidx1.i.i75 = getelementptr inbounds %TypeId, ptr %30, i64 0, i32 1
  %35 = load i64, ptr %memberidx1.i.i75, align 4
  %memberidx2.i.i76 = getelementptr inbounds %TypeId, ptr %30, i64 0, i32 2
  %36 = load i64, ptr %memberidx2.i.i76, align 4
  %37 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @276, i64 %34, i64 %35, i64 %36)
  %38 = load ptr, ptr %3, align 8
  %39 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %39, align 8
  %memberidx.i.i.i77 = getelementptr inbounds %string, ptr %39, i64 0, i32 1
  store ptr %38, ptr %memberidx.i.i.i77, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  store i64 %37, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i78 = getelementptr inbounds %string, ptr %39, i64 0, i32 3
  store i64 %37, ptr %memberidx2.i.i.i78, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  call void %33(ptr nonnull %31, ptr nonnull %39, ptr nonnull %4)
  %40 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMTypeRef_, ptr %40, align 8
  %memberidx.i71 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %40, i64 0, i32 2
  %memberidx1.i72 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %40, i64 0, i32 3
  store i64 8, ptr %memberidx1.i72, align 4
  %memberidx2.i73 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %40, i64 0, i32 1
  %41 = call ptr @malloc(i32 64)
  store ptr %41, ptr %memberidx2.i73, align 8
  store i64 0, ptr %memberidx.i71, align 4
  call fastcc void @CodeGen_declare_static_props(ptr nonnull %0, ptr nonnull %4, ptr nonnull %1)
  call fastcc void @CodeGen_declare_class_props(ptr nonnull %0, ptr nonnull %4, ptr nonnull %1, ptr nonnull %40)
  %42 = load ptr, ptr %4, align 8
  %43 = load ptr, ptr %memberidx2.i73, align 8
  %44 = load i64, ptr %memberidx.i71, align 4
  call void @LLVMStructSetBody(ptr %42, ptr %43, i64 %44, i1 true)
  %memberidx10 = getelementptr inbounds %Class, ptr %1, i64 0, i32 3
  %45 = load ptr, ptr %memberidx10, align 8
  %.not = icmp eq ptr %45, null
  br i1 %.not, label %else, label %if.entry

if.entry:                                         ; preds = %CGClassType_constructor.exit
  %memberidx11 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %46 = load ptr, ptr %memberidx11, align 8
  %memberidx.i.i66 = getelementptr inbounds %PropId, ptr %45, i64 0, i32 1
  %47 = load ptr, ptr %memberidx.i.i66, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %46, i64 0, i32 1
  %48 = load ptr, ptr %memberidx.i.i.i, align 8
  %49 = load i64, ptr %47, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %48, i64 0, i32 1
  %50 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %50, i64 %49
  %51 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %51, i64 0, i32 4
  %52 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %47, i64 0, i32 2
  %53 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %52, i64 0, i32 1
  %54 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %54, i64 %53
  %55 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %56 = load i64, ptr %45, align 4
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %if.entry.i69, label %ifend.i

if.entry.i69:                                     ; preds = %if.entry
  %memberidx1.i67 = getelementptr inbounds %Class, ptr %55, i64 0, i32 5
  %58 = load ptr, ptr %memberidx1.i67, align 8
  %memberidx2.i68 = getelementptr inbounds %PropId, ptr %45, i64 0, i32 2
  %59 = load i64, ptr %memberidx2.i68, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %58, i64 0, i32 1
  %60 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %60, i64 %59
  %61 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %61, i64 0, i32 4
  br label %Array_Type____sl__.exit61

ifend.i:                                          ; preds = %if.entry
  %memberidx4.i70 = getelementptr inbounds %Class, ptr %55, i64 0, i32 4
  %62 = load ptr, ptr %memberidx4.i70, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %45, i64 0, i32 2
  %63 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %62, i64 0, i32 1
  %64 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %64, i64 %63
  %65 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %65, i64 0, i32 4
  br label %Array_Type____sl__.exit61

Array_Type____sl__.exit61:                        ; preds = %ifend.i, %if.entry.i69
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i69 ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i = load ptr, ptr %common.ret.op.in.i, align 8
  %66 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Type_, ptr %66, align 8
  %memberidx.i63 = getelementptr inbounds %Array_Type_, ptr %66, i64 0, i32 2
  store i64 0, ptr %memberidx.i63, align 4
  %memberidx1.i64 = getelementptr inbounds %Array_Type_, ptr %66, i64 0, i32 3
  store i64 8, ptr %memberidx1.i64, align 4
  %memberidx2.i65 = getelementptr inbounds %Array_Type_, ptr %66, i64 0, i32 1
  %67 = call ptr @malloc(i32 64)
  store ptr %67, ptr %memberidx2.i65, align 8
  store i64 0, ptr %memberidx.i63, align 4
  %68 = tail call ptr @malloc(i32 16)
  %69 = load ptr, ptr %1, align 8
  store i64 13, ptr %68, align 4
  %memberidx.i62 = getelementptr inbounds %ObjectType, ptr %68, i64 0, i32 1
  store ptr %69, ptr %memberidx.i62, align 8
  store i64 1, ptr %memberidx.i63, align 4
  store ptr %68, ptr %67, align 8
  %memberidx16 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i, i64 0, i32 1
  %70 = load ptr, ptr %memberidx16, align 8
  %71 = call ptr @malloc(i32 33)
  %memberidx.i49 = getelementptr inbounds %Array_Type_, ptr %70, i64 0, i32 1
  %72 = load ptr, ptr %memberidx.i49, align 8
  %memberidx1.i50 = getelementptr inbounds %Array_Type_, ptr %70, i64 0, i32 2
  %73 = load i64, ptr %memberidx1.i50, align 4
  store ptr @VTableArrayIterator_Type_, ptr %71, align 8
  %memberidx.i.i51 = getelementptr inbounds %Iterator_Type_, ptr %71, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i51, align 1
  %memberidx1.i.i = getelementptr inbounds %ArrayIterator_Type_, ptr %71, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i52 = getelementptr inbounds %ArrayIterator_Type_, ptr %71, i64 0, i32 4
  store ptr %72, ptr %memberidx2.i.i52, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_Type_, ptr %71, i64 0, i32 3
  store i64 %73, ptr %memberidx3.i.i, align 4
  %74 = load ptr, ptr @VTableArrayIterator_Type_, align 8
  %75 = call ptr %74(ptr nonnull %71)
  %76 = load i1, ptr %memberidx.i.i51, align 1
  br i1 %76, label %for.end, label %for.body

else:                                             ; preds = %CGClassType_constructor.exit
  %memberidx24 = getelementptr inbounds %CGClassType, ptr %4, i64 0, i32 6
  store ptr null, ptr %memberidx24, align 8
  br label %ifend

ifend:                                            ; preds = %else, %for.end
  ret void

for.body:                                         ; preds = %Array_Type____sl__.exit61, %Array_Type____sl__.exit
  %storemerge89 = phi ptr [ %88, %Array_Type____sl__.exit ], [ %75, %Array_Type____sl__.exit61 ]
  %77 = load i64, ptr %memberidx.i63, align 4
  %78 = load i64, ptr %memberidx1.i64, align 4
  %.not.i = icmp slt i64 %77, %78
  br i1 %.not.i, label %for.body.Array_Type____sl__.exit_crit_edge, label %if.entry.i

for.body.Array_Type____sl__.exit_crit_edge:       ; preds = %for.body
  %.pre93 = load ptr, ptr %memberidx2.i65, align 8
  br label %Array_Type____sl__.exit

if.entry.i:                                       ; preds = %for.body
  %79 = shl i64 %78, 1
  store i64 %79, ptr %memberidx1.i64, align 4
  %80 = load ptr, ptr %memberidx2.i65, align 8
  %81 = shl i64 %78, 4
  %82 = call ptr @realloc(ptr %80, i64 %81)
  store ptr %82, ptr %memberidx2.i65, align 8
  %.pre = load i64, ptr %memberidx.i63, align 4
  br label %Array_Type____sl__.exit

Array_Type____sl__.exit:                          ; preds = %for.body.Array_Type____sl__.exit_crit_edge, %if.entry.i
  %83 = phi ptr [ %.pre93, %for.body.Array_Type____sl__.exit_crit_edge ], [ %82, %if.entry.i ]
  %84 = phi i64 [ %77, %for.body.Array_Type____sl__.exit_crit_edge ], [ %.pre, %if.entry.i ]
  %85 = add i64 %84, 1
  store i64 %85, ptr %memberidx.i63, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %83, i64 %84
  store ptr %storemerge89, ptr %ptridx.i, align 8
  %86 = load ptr, ptr %71, align 8
  %87 = load ptr, ptr %86, align 8
  %88 = call ptr %87(ptr nonnull %71)
  %89 = load i1, ptr %memberidx.i.i51, align 1
  br i1 %89, label %for.end, label %for.body

for.end:                                          ; preds = %Array_Type____sl__.exit, %Array_Type____sl__.exit61
  tail call void @free(ptr nonnull %71)
  store ptr %66, ptr %memberidx16, align 8
  %90 = call fastcc ptr @CodeGen_codegen_type(ptr nonnull %0, ptr %common.ret.op.i, i1 false)
  %memberidx21 = getelementptr inbounds %CGClassType, ptr %4, i64 0, i32 6
  %91 = load ptr, ptr %memberidx2, align 8
  %92 = load ptr, ptr %91, align 8
  %memberidx23 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %92, i64 0, i32 5
  %93 = load ptr, ptr %memberidx23, align 8
  %94 = call ptr %93(ptr nonnull %91)
  %95 = alloca ptr, align 8
  %96 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %95, ptr nonnull @320, ptr %94)
  %97 = load ptr, ptr %95, align 8
  %98 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %98, align 8
  %memberidx.i = getelementptr inbounds %string, ptr %98, i64 0, i32 1
  store ptr %97, ptr %memberidx.i, align 8
  %memberidx1.i46 = getelementptr inbounds %string, ptr %98, i64 0, i32 2
  store i64 %96, ptr %memberidx1.i46, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %98, i64 0, i32 3
  store i64 %96, ptr %memberidx2.i, align 4
  tail call void @free(ptr %94)
  %99 = load ptr, ptr %0, align 8
  %100 = load ptr, ptr %98, align 8
  %memberidx1.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %100, i64 0, i32 5
  %101 = load ptr, ptr %memberidx1.i, align 8
  %102 = call ptr %101(ptr nonnull %98)
  %103 = call ptr @LLVMAddFunction(ptr %99, ptr %102, ptr %90)
  store ptr %103, ptr %memberidx21, align 8
  br label %ifend
}

define internal fastcc ptr @CodeGen_get_or_codegen_enum_from_typeid(ptr nocapture %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %memberidx.i = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 9
  %5 = load ptr, ptr %memberidx.i, align 8
  %6 = load ptr, ptr %5, align 8
  %memberidx1.i = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %6, i64 0, i32 1
  %7 = load ptr, ptr %memberidx1.i, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %8 = load i64, ptr %1, align 4
  %memberidx1.i.i = getelementptr inbounds %TypeId, ptr %1, i64 0, i32 1
  %9 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %TypeId, ptr %1, i64 0, i32 2
  %10 = load i64, ptr %memberidx2.i.i, align 4
  %11 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @276, i64 %8, i64 %9, i64 %10)
  %12 = load ptr, ptr %4, align 8
  %13 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %13, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %13, i64 0, i32 1
  store ptr %12, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %13, i64 0, i32 2
  store i64 %11, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %13, i64 0, i32 3
  store i64 %11, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %14 = call ptr %7(ptr nonnull %5, ptr nonnull %13)
  %.not = icmp eq ptr %14, null
  br i1 %.not, label %ifend, label %common.ret

common.ret:                                       ; preds = %2, %ifend
  %common.ret.op = phi ptr [ %34, %ifend ], [ %14, %2 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %2
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %15 = load ptr, ptr %memberidx, align 8
  %memberidx.i5 = getelementptr inbounds %Program, ptr %15, i64 0, i32 1
  %16 = load ptr, ptr %memberidx.i5, align 8
  %17 = load i64, ptr %1, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Module_, ptr %16, i64 0, i32 1
  %18 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %18, i64 %17
  %19 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i = getelementptr inbounds %Module, ptr %19, i64 0, i32 6
  %20 = load ptr, ptr %memberidx2.i, align 8
  %21 = load i64, ptr %memberidx2.i.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Enum_, ptr %20, i64 0, i32 1
  %22 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %22, i64 %21
  %23 = load ptr, ptr %ptridx.i6.i, align 8
  call fastcc void @CodeGen_declare_enum(ptr nonnull %0, ptr %23)
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %memberidx.i, align 8
  %26 = load ptr, ptr %25, align 8
  %memberidx1.i.i7 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %26, i64 0, i32 1
  %27 = load ptr, ptr %memberidx1.i.i7, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %28 = load i64, ptr %24, align 4
  %memberidx1.i.i.i8 = getelementptr inbounds %TypeId, ptr %24, i64 0, i32 1
  %29 = load i64, ptr %memberidx1.i.i.i8, align 4
  %memberidx2.i.i.i9 = getelementptr inbounds %TypeId, ptr %24, i64 0, i32 2
  %30 = load i64, ptr %memberidx2.i.i.i9, align 4
  %31 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @276, i64 %28, i64 %29, i64 %30)
  %32 = load ptr, ptr %3, align 8
  %33 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %33, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %string, ptr %33, i64 0, i32 1
  store ptr %32, ptr %memberidx.i.i.i.i, align 8
  %memberidx1.i.i.i.i = getelementptr inbounds %string, ptr %33, i64 0, i32 2
  store i64 %31, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %string, ptr %33, i64 0, i32 3
  store i64 %31, ptr %memberidx2.i.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %34 = call ptr %27(ptr nonnull %25, ptr nonnull %33)
  br label %common.ret
}

define internal fastcc ptr @CodeGen_get_member_mem_with_name(ptr nocapture %0, ptr %1, ptr %2, ptr nocapture readonly %3, ptr %4) unnamed_addr {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %6 = load ptr, ptr %memberidx, align 8
  %7 = load i64, ptr %3, align 4
  %switch16 = icmp eq i64 %7, 20
  br i1 %switch16, label %if.entry.i12, label %if.entry3.i

if.entry.i12:                                     ; preds = %5, %if.entry.i12
  %.tr11.i17 = phi ptr [ %8, %if.entry.i12 ], [ %3, %5 ]
  %memberidx1.i11 = getelementptr inbounds %GenericType, ptr %.tr11.i17, i64 0, i32 3
  %8 = load ptr, ptr %memberidx1.i11, align 8
  %9 = load i64, ptr %8, align 4
  %switch = icmp eq i64 %9, 20
  br i1 %switch, label %if.entry.i12, label %if.entry3.i

if.entry3.i:                                      ; preds = %if.entry.i12, %5
  %.tr11.i.lcssa = phi ptr [ %3, %5 ], [ %8, %if.entry.i12 ]
  %memberidx6.i13 = getelementptr inbounds %ObjectType, ptr %.tr11.i.lcssa, i64 0, i32 1
  %10 = load ptr, ptr %memberidx6.i13, align 8
  %memberidx.i.i14 = getelementptr inbounds %Program, ptr %6, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i.i14, align 8
  %12 = load i64, ptr %10, align 4
  %memberidx.i.i.i15 = getelementptr inbounds %Array_Module_, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i.i.i15, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %Module, ptr %14, i64 0, i32 4
  %15 = load ptr, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %TypeId, ptr %10, i64 0, i32 2
  %16 = load i64, ptr %memberidx3.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %17, i64 %16
  %18 = load ptr, ptr %ptridx.i6.i.i, align 8
  %memberidx1 = getelementptr inbounds %Class, ptr %18, i64 0, i32 6
  %19 = load ptr, ptr %memberidx1, align 8
  %20 = load ptr, ptr %19, align 8
  %memberidx2 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %20, i64 0, i32 1
  %21 = load ptr, ptr %memberidx2, align 8
  %22 = tail call ptr %21(ptr nonnull %19, ptr %4)
  %23 = load ptr, ptr %memberidx, align 8
  %memberidx.i.i = getelementptr inbounds %PropId, ptr %22, i64 0, i32 1
  %24 = load ptr, ptr %memberidx.i.i, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %23, i64 0, i32 1
  %25 = load ptr, ptr %memberidx.i.i.i, align 8
  %26 = load i64, ptr %24, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %25, i64 0, i32 1
  %27 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %27, i64 %26
  %28 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %28, i64 0, i32 4
  %29 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %24, i64 0, i32 2
  %30 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %29, i64 0, i32 1
  %31 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %31, i64 %30
  %32 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %33 = load i64, ptr %22, align 4
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %if.entry3.i
  %memberidx1.i = getelementptr inbounds %Class, ptr %32, i64 0, i32 5
  %35 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %PropId, ptr %22, i64 0, i32 2
  %36 = load i64, ptr %memberidx2.i, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %35, i64 0, i32 1
  %37 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %37, i64 %36
  %38 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %38, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %if.entry3.i
  %memberidx4.i = getelementptr inbounds %Class, ptr %32, i64 0, i32 4
  %39 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %22, i64 0, i32 2
  %40 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %39, i64 0, i32 1
  %41 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %41, i64 %40
  %42 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %42, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i = load ptr, ptr %common.ret.op.in.i, align 8
  %43 = alloca %MemberExpression, align 8
  store i64 8, ptr %43, align 8
  %memberidx.i.i7 = getelementptr inbounds %Expression, ptr %43, i64 0, i32 2
  store i64 12, ptr %memberidx.i.i7, align 4
  %memberidx1.i.i = getelementptr inbounds %Expression, ptr %43, i64 0, i32 1
  store i1 false, ptr %memberidx1.i.i, align 8
  %memberidx.i = getelementptr inbounds %MemberExpression, ptr %43, i64 0, i32 4
  store ptr null, ptr %memberidx.i, align 8
  %memberidx1.i8 = getelementptr inbounds %MemberExpression, ptr %43, i64 0, i32 5
  store ptr %22, ptr %memberidx1.i8, align 8
  %memberidx2.i9 = getelementptr inbounds %Expression, ptr %43, i64 0, i32 3
  store ptr %common.ret.op.i, ptr %memberidx2.i9, align 8
  %44 = call fastcc ptr @CodeGen_get_member_expr_mem(ptr nonnull %0, ptr %1, ptr nonnull %43, ptr %2)
  ret ptr %44
}

define internal fastcc ptr @CodeGen_get_member_with_name(ptr nocapture %0, ptr %1, ptr %2, ptr nocapture readonly %3, ptr %4) unnamed_addr {
  %6 = tail call fastcc ptr @CodeGen_get_member_mem_with_name(ptr %0, ptr %1, ptr %2, ptr %3, ptr %4)
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %7 = load ptr, ptr %memberidx, align 8
  br label %tailrecurse.i

tailrecurse.i:                                    ; preds = %if.entry.i, %5
  %.tr11.i = phi ptr [ %3, %5 ], [ %9, %if.entry.i ]
  %8 = load i64, ptr %.tr11.i, align 4
  switch i64 %8, label %get_class_prop_type_with_name.exit [
    i64 20, label %if.entry.i
    i64 13, label %get_class_from_type.exit
  ]

if.entry.i:                                       ; preds = %tailrecurse.i
  %memberidx1.i8 = getelementptr inbounds %GenericType, ptr %.tr11.i, i64 0, i32 3
  %9 = load ptr, ptr %memberidx1.i8, align 8
  br label %tailrecurse.i

get_class_from_type.exit:                         ; preds = %tailrecurse.i
  %memberidx6.i = getelementptr inbounds %ObjectType, ptr %.tr11.i, i64 0, i32 1
  %10 = load ptr, ptr %memberidx6.i, align 8
  %memberidx.i.i = getelementptr inbounds %Program, ptr %7, i64 0, i32 1
  %11 = load ptr, ptr %memberidx.i.i, align 8
  %12 = load i64, ptr %10, align 4
  %memberidx.i.i.i9 = getelementptr inbounds %Array_Module_, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %memberidx.i.i.i9, align 8
  %ptridx.i.i.i10 = getelementptr inbounds ptr, ptr %13, i64 %12
  %14 = load ptr, ptr %ptridx.i.i.i10, align 8
  %memberidx2.i.i11 = getelementptr inbounds %Module, ptr %14, i64 0, i32 4
  %15 = load ptr, ptr %memberidx2.i.i11, align 8
  %memberidx3.i.i12 = getelementptr inbounds %TypeId, ptr %10, i64 0, i32 2
  %16 = load i64, ptr %memberidx3.i.i12, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %17, i64 %16
  %18 = load ptr, ptr %ptridx.i6.i.i, align 8
  %19 = icmp eq ptr %18, null
  br i1 %19, label %get_class_prop_type_with_name.exit, label %ifend.i

ifend.i:                                          ; preds = %get_class_from_type.exit
  %memberidx.i = getelementptr inbounds %Class, ptr %18, i64 0, i32 6
  %20 = load ptr, ptr %memberidx.i, align 8
  %21 = load ptr, ptr %20, align 8
  %memberidx1.i = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %21, i64 0, i32 1
  %22 = load ptr, ptr %memberidx1.i, align 8
  %23 = tail call ptr %22(ptr nonnull %20, ptr %4)
  %24 = icmp eq ptr %23, null
  br i1 %24, label %get_class_prop_type_with_name.exit, label %ifend4.i

ifend4.i:                                         ; preds = %ifend.i
  %memberidx.i.i.i = getelementptr inbounds %PropId, ptr %23, i64 0, i32 1
  %25 = load ptr, ptr %memberidx.i.i.i, align 8
  %26 = load ptr, ptr %memberidx.i.i, align 8
  %27 = load i64, ptr %25, align 4
  %memberidx.i.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %26, i64 0, i32 1
  %28 = load ptr, ptr %memberidx.i.i.i.i.i, align 8
  %ptridx.i.i.i.i.i = getelementptr inbounds ptr, ptr %28, i64 %27
  %29 = load ptr, ptr %ptridx.i.i.i.i.i, align 8
  %memberidx2.i.i.i.i = getelementptr inbounds %Module, ptr %29, i64 0, i32 4
  %30 = load ptr, ptr %memberidx2.i.i.i.i, align 8
  %memberidx3.i.i.i.i = getelementptr inbounds %TypeId, ptr %25, i64 0, i32 2
  %31 = load i64, ptr %memberidx3.i.i.i.i, align 4
  %memberidx.i5.i.i.i.i = getelementptr inbounds %Array_Class_, ptr %30, i64 0, i32 1
  %32 = load ptr, ptr %memberidx.i5.i.i.i.i, align 8
  %ptridx.i6.i.i.i.i = getelementptr inbounds ptr, ptr %32, i64 %31
  %33 = load ptr, ptr %ptridx.i6.i.i.i.i, align 8
  %34 = load i64, ptr %23, align 4
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %if.entry.i.i, label %ifend.i.i

if.entry.i.i:                                     ; preds = %ifend4.i
  %memberidx1.i.i = getelementptr inbounds %Class, ptr %33, i64 0, i32 5
  %36 = load ptr, ptr %memberidx1.i.i, align 8
  %memberidx2.i.i = getelementptr inbounds %PropId, ptr %23, i64 0, i32 2
  %37 = load i64, ptr %memberidx2.i.i, align 4
  %memberidx.i12.i.i = getelementptr inbounds %Array_ClassMethod_, ptr %36, i64 0, i32 1
  %38 = load ptr, ptr %memberidx.i12.i.i, align 8
  %ptridx.i13.i.i = getelementptr inbounds ptr, ptr %38, i64 %37
  %39 = load ptr, ptr %ptridx.i13.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ClassMethod, ptr %39, i64 0, i32 4
  br label %get_class_prop_type.exit.i

ifend.i.i:                                        ; preds = %ifend4.i
  %memberidx4.i.i = getelementptr inbounds %Class, ptr %33, i64 0, i32 4
  %40 = load ptr, ptr %memberidx4.i.i, align 8
  %memberidx5.i.i = getelementptr inbounds %PropId, ptr %23, i64 0, i32 2
  %41 = load i64, ptr %memberidx5.i.i, align 4
  %memberidx.i11.i.i = getelementptr inbounds %Array_ClassField_, ptr %40, i64 0, i32 1
  %42 = load ptr, ptr %memberidx.i11.i.i, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %42, i64 %41
  %43 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx6.i.i = getelementptr inbounds %ClassField, ptr %43, i64 0, i32 4
  br label %get_class_prop_type.exit.i

get_class_prop_type.exit.i:                       ; preds = %ifend.i.i, %if.entry.i.i
  %common.ret.op.in.i.i = phi ptr [ %memberidx3.i.i, %if.entry.i.i ], [ %memberidx6.i.i, %ifend.i.i ]
  %common.ret.op.i.i = load ptr, ptr %common.ret.op.in.i.i, align 8
  br label %get_class_prop_type_with_name.exit

get_class_prop_type_with_name.exit:               ; preds = %tailrecurse.i, %get_class_from_type.exit, %ifend.i, %get_class_prop_type.exit.i
  %common.ret.op.i = phi ptr [ %common.ret.op.i.i, %get_class_prop_type.exit.i ], [ null, %get_class_from_type.exit ], [ null, %ifend.i ], [ null, %tailrecurse.i ]
  %44 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %common.ret.op.i, i1 true)
  %45 = tail call ptr @LLVMBuildLoad2(ptr %1, ptr %44, ptr %6, ptr nonnull @27)
  ret ptr %45
}

define internal fastcc void @CodeGen_codegen_for_stmt(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call ptr @LLVMAppendBasicBlock(ptr %4, ptr nonnull @310)
  %6 = tail call ptr @LLVMBuildBr(ptr %1, ptr %5)
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %5)
  %memberidx1 = getelementptr inbounds %ForStatement, ptr %2, i64 0, i32 1
  %7 = load ptr, ptr %memberidx1, align 8
  %.not = icmp eq ptr %7, null
  br i1 %.not, label %ifend, label %if.entry

if.entry:                                         ; preds = %3
  tail call fastcc void @CodeGen_codegen_statement(ptr nonnull %0, ptr %1, ptr nonnull %7)
  br label %ifend

ifend:                                            ; preds = %3, %if.entry
  %memberidx3 = getelementptr inbounds %ForStatement, ptr %2, i64 0, i32 2
  %8 = load ptr, ptr %memberidx3, align 8
  %.not87 = icmp eq ptr %8, null
  br i1 %.not87, label %ifend6, label %if.entry4

if.entry4:                                        ; preds = %ifend
  tail call fastcc void @CodeGen_codegen_statement(ptr nonnull %0, ptr %1, ptr nonnull %8)
  br label %ifend6

ifend6:                                           ; preds = %ifend, %if.entry4
  %9 = load ptr, ptr %memberidx, align 8
  %10 = tail call ptr @LLVMAppendBasicBlock(ptr %9, ptr nonnull @311)
  %11 = load ptr, ptr %memberidx, align 8
  %12 = tail call ptr @LLVMAppendBasicBlock(ptr %11, ptr nonnull @312)
  %13 = load ptr, ptr %memberidx, align 8
  %14 = tail call ptr @LLVMAppendBasicBlock(ptr %13, ptr nonnull @313)
  %15 = load ptr, ptr %memberidx, align 8
  %16 = tail call ptr @LLVMAppendBasicBlock(ptr %15, ptr nonnull @314)
  %memberidx12 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 2
  %17 = load ptr, ptr %memberidx12, align 8
  %memberidx13 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 3
  %18 = load ptr, ptr %memberidx13, align 8
  store ptr %16, ptr %memberidx12, align 8
  store ptr %14, ptr %memberidx13, align 8
  %19 = tail call ptr @LLVMBuildBr(ptr %1, ptr %10)
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %10)
  %20 = tail call ptr @LLVMInt1Type()
  %21 = tail call ptr @LLVMConstInt(ptr %20, i64 1, i1 false)
  %memberidx16 = getelementptr inbounds %ForStatement, ptr %2, i64 0, i32 3
  %22 = load ptr, ptr %memberidx16, align 8
  %.not88 = icmp eq ptr %22, null
  br i1 %.not88, label %ifend19, label %if.entry17

if.entry17:                                       ; preds = %ifend6
  %23 = tail call fastcc ptr @CodeGen_codegen_expression(ptr nonnull %0, ptr %1, ptr nonnull %22)
  br label %ifend19

ifend19:                                          ; preds = %ifend6, %if.entry17
  %24 = phi ptr [ %21, %ifend6 ], [ %23, %if.entry17 ]
  %25 = tail call ptr @LLVMBuildCondBr(ptr %1, ptr %24, ptr %12, ptr %16)
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %12)
  %memberidx21 = getelementptr inbounds %ForStatement, ptr %2, i64 0, i32 5
  %26 = load ptr, ptr %memberidx21, align 8
  %memberidx.i98 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 5
  %27 = load i1, ptr %memberidx.i98, align 1
  store i1 false, ptr %memberidx.i98, align 1
  %28 = load ptr, ptr %26, align 8
  %29 = tail call ptr @malloc(i32 33)
  %memberidx.i.i99 = getelementptr inbounds %Array_Statement_, ptr %28, i64 0, i32 1
  %30 = load ptr, ptr %memberidx.i.i99, align 8
  %memberidx1.i.i100 = getelementptr inbounds %Array_Statement_, ptr %28, i64 0, i32 2
  %31 = load i64, ptr %memberidx1.i.i100, align 4
  store ptr @VTableArrayIterator_Statement_, ptr %29, align 8
  %memberidx.i.i.i = getelementptr inbounds %Iterator_Statement_, ptr %29, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i.i, align 1
  %memberidx1.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %29, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %29, i64 0, i32 4
  store ptr %30, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %29, i64 0, i32 3
  store i64 %31, ptr %memberidx3.i.i.i, align 4
  %32 = load ptr, ptr @VTableArrayIterator_Statement_, align 8
  %33 = tail call ptr %32(ptr nonnull %29)
  %34 = load i1, ptr %memberidx.i.i.i, align 1
  br i1 %34, label %CodeGen_codegen_block.exit, label %for.body.i

for.body.i:                                       ; preds = %ifend19, %for.body.i
  %statement.0.i105 = phi ptr [ %37, %for.body.i ], [ %33, %ifend19 ]
  tail call fastcc void @CodeGen_codegen_statement(ptr %0, ptr %1, ptr %statement.0.i105)
  %35 = load ptr, ptr %29, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = tail call ptr %36(ptr nonnull %29)
  %38 = load i1, ptr %memberidx.i.i.i, align 1
  br i1 %38, label %CodeGen_codegen_block.exit, label %for.body.i

CodeGen_codegen_block.exit:                       ; preds = %for.body.i, %ifend19
  tail call void @free(ptr nonnull %29)
  store i1 %27, ptr %memberidx.i98, align 1
  %39 = load ptr, ptr %memberidx21, align 8
  %memberidx.i = getelementptr inbounds %Block, ptr %39, i64 0, i32 1
  %40 = load i1, ptr %memberidx.i, align 1
  %memberidx1.i = getelementptr inbounds %Block, ptr %39, i64 0, i32 2
  %41 = load i1, ptr %memberidx1.i, align 1
  %42 = or i1 %40, %41
  %memberidx2.i = getelementptr inbounds %Block, ptr %39, i64 0, i32 3
  %43 = load i1, ptr %memberidx2.i, align 1
  %44 = or i1 %42, %43
  br i1 %44, label %ifend25, label %if.entry23

if.entry23:                                       ; preds = %CodeGen_codegen_block.exit
  %45 = tail call ptr @LLVMBuildBr(ptr %1, ptr %14)
  br label %ifend25

ifend25:                                          ; preds = %CodeGen_codegen_block.exit, %if.entry23
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %14)
  %memberidx26 = getelementptr inbounds %ForStatement, ptr %2, i64 0, i32 4
  %46 = load ptr, ptr %memberidx26, align 8
  %.not89 = icmp eq ptr %46, null
  br i1 %.not89, label %ifend29, label %if.entry27

if.entry27:                                       ; preds = %ifend25
  tail call fastcc void @CodeGen_codegen_statement(ptr nonnull %0, ptr %1, ptr nonnull %46)
  br label %ifend29

ifend29:                                          ; preds = %ifend25, %if.entry27
  %47 = tail call ptr @LLVMBuildBr(ptr %1, ptr %10)
  store ptr %17, ptr %memberidx12, align 8
  store ptr %18, ptr %memberidx13, align 8
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %16)
  %48 = load ptr, ptr %memberidx1, align 8
  %.not90 = icmp eq ptr %48, null
  br i1 %.not90, label %ifend36, label %if.entry34

if.entry34:                                       ; preds = %ifend29
  %memberidx38 = getelementptr inbounds %VarDeclaration, ptr %48, i64 0, i32 2
  %49 = load ptr, ptr %memberidx38, align 8
  %50 = alloca %VarAccessExpression, align 8
  %memberidx39 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %51 = load ptr, ptr %memberidx39, align 8
  %memberidx.i91 = getelementptr inbounds %Program, ptr %51, i64 0, i32 1
  %52 = load ptr, ptr %memberidx.i91, align 8
  %memberidx1.i92 = getelementptr inbounds %VarId, ptr %49, i64 0, i32 1
  %53 = load i64, ptr %memberidx1.i92, align 4
  %memberidx.i.i = getelementptr inbounds %Array_Module_, ptr %52, i64 0, i32 1
  %54 = load ptr, ptr %memberidx.i.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %54, i64 %53
  %55 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx2.i93 = getelementptr inbounds %Module, ptr %55, i64 0, i32 2
  %56 = load ptr, ptr %memberidx2.i93, align 8
  %memberidx3.i = getelementptr inbounds %VarId, ptr %49, i64 0, i32 2
  %57 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i5.i = getelementptr inbounds %Array_Var_, ptr %56, i64 0, i32 1
  %58 = load ptr, ptr %memberidx.i5.i, align 8
  %ptridx.i6.i = getelementptr inbounds ptr, ptr %58, i64 %57
  %59 = load ptr, ptr %ptridx.i6.i, align 8
  %60 = load ptr, ptr %59, align 8
  store i64 8, ptr %50, align 8
  %memberidx.i.i94 = getelementptr inbounds %Expression, ptr %50, i64 0, i32 2
  store i64 7, ptr %memberidx.i.i94, align 4
  %memberidx1.i.i = getelementptr inbounds %Expression, ptr %50, i64 0, i32 1
  %memberidx.i95 = getelementptr inbounds %VarAccessExpression, ptr %50, i64 0, i32 4
  store ptr %49, ptr %memberidx.i95, align 8
  %memberidx1.i96 = getelementptr inbounds %Expression, ptr %50, i64 0, i32 3
  store ptr %60, ptr %memberidx1.i96, align 8
  %61 = load i64, ptr %49, align 4
  %62 = icmp eq i64 %61, 2
  store i1 %62, ptr %memberidx1.i.i, align 8
  %63 = call fastcc ptr @CodeGen_codegen_var_access_exp(ptr nonnull %0, ptr %1, ptr nonnull %50)
  %64 = tail call ptr @LLVMBuildFree(ptr %1, ptr %63)
  br label %ifend36

ifend36:                                          ; preds = %ifend29, %if.entry34
  ret void
}

define internal fastcc ptr @CodeGen_codegen_member_exp(ptr nocapture %0, ptr %1, ptr %2, ptr %3) unnamed_addr {
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = alloca ptr, align 8
  %11 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %MemberExpression, ptr %2, i64 0, i32 4
  %12 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %VarAccessExpression, ptr %12, i64 0, i32 4
  %13 = load ptr, ptr %memberidx1, align 8
  %memberidx3 = getelementptr inbounds %Expression, ptr %12, i64 0, i32 3
  %14 = load ptr, ptr %memberidx3, align 8
  %15 = load i64, ptr %14, align 4
  %16 = icmp eq i64 %15, 20
  br i1 %16, label %if.entry.i119, label %is_object.exit

if.entry.i119:                                    ; preds = %4, %if.entry.i119
  %.tr5.i = phi ptr [ %17, %if.entry.i119 ], [ %14, %4 ]
  %memberidx1.i118 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %17 = load ptr, ptr %memberidx1.i118, align 8
  %18 = load i64, ptr %17, align 4
  %19 = icmp eq i64 %18, 20
  br i1 %19, label %if.entry.i119, label %is_object.exit

is_object.exit:                                   ; preds = %if.entry.i119, %4
  %.lcssa.i = phi i64 [ %15, %4 ], [ %18, %if.entry.i119 ]
  %20 = icmp eq i64 %.lcssa.i, 13
  br i1 %20, label %if.entry, label %ifend

if.entry:                                         ; preds = %is_object.exit
  %21 = tail call fastcc ptr @CodeGen_get_member_expr_mem(ptr %0, ptr %1, ptr %2, ptr %3)
  %memberidx4 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %22 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %MemberExpression, ptr %2, i64 0, i32 5
  %23 = load ptr, ptr %memberidx5, align 8
  %memberidx.i.i = getelementptr inbounds %PropId, ptr %23, i64 0, i32 1
  %24 = load ptr, ptr %memberidx.i.i, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %22, i64 0, i32 1
  %25 = load ptr, ptr %memberidx.i.i.i, align 8
  %26 = load i64, ptr %24, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %25, i64 0, i32 1
  %27 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %27, i64 %26
  %28 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %28, i64 0, i32 4
  %29 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %24, i64 0, i32 2
  %30 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %29, i64 0, i32 1
  %31 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %31, i64 %30
  %32 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %33 = load i64, ptr %23, align 4
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %if.entry
  %memberidx1.i = getelementptr inbounds %Class, ptr %32, i64 0, i32 5
  %35 = load ptr, ptr %memberidx1.i, align 8
  %memberidx2.i = getelementptr inbounds %PropId, ptr %23, i64 0, i32 2
  %36 = load i64, ptr %memberidx2.i, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %35, i64 0, i32 1
  %37 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %37, i64 %36
  %38 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %38, i64 0, i32 2
  br label %get_class_prop_visibility.exit

ifend.i:                                          ; preds = %if.entry
  %memberidx4.i = getelementptr inbounds %Class, ptr %32, i64 0, i32 4
  %39 = load ptr, ptr %memberidx4.i, align 8
  %memberidx5.i = getelementptr inbounds %PropId, ptr %23, i64 0, i32 2
  %40 = load i64, ptr %memberidx5.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %39, i64 0, i32 1
  %41 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %41, i64 %40
  %42 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %42, i64 0, i32 2
  br label %get_class_prop_visibility.exit

get_class_prop_visibility.exit:                   ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i = load i64, ptr %common.ret.op.in.i, align 4
  %43 = icmp eq i64 %common.ret.op.i, 1
  %memberidx6 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %44 = load ptr, ptr %memberidx6, align 8
  %45 = load i64, ptr %44, align 4
  %46 = icmp eq i64 %45, 17
  %47 = and i1 %43, %46
  br i1 %47, label %common.ret, label %ifend10

ifend:                                            ; preds = %is_object.exit
  %memberidx12 = getelementptr inbounds %MemberExpression, ptr %2, i64 0, i32 5
  %48 = load ptr, ptr %memberidx12, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11)
  %memberidx.i = getelementptr inbounds %PropId, ptr %48, i64 0, i32 1
  %49 = load ptr, ptr %memberidx.i, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10)
  %50 = load i64, ptr %49, align 4
  %memberidx1.i.i = getelementptr inbounds %TypeId, ptr %49, i64 0, i32 1
  %51 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %TypeId, ptr %49, i64 0, i32 2
  %52 = load i64, ptr %memberidx2.i.i, align 4
  %53 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %10, ptr nonnull @276, i64 %50, i64 %51, i64 %52)
  %54 = load ptr, ptr %10, align 8
  %55 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %55, align 8
  %memberidx.i.i.i58 = getelementptr inbounds %string, ptr %55, i64 0, i32 1
  store ptr %54, ptr %memberidx.i.i.i58, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %55, i64 0, i32 2
  store i64 %53, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i59 = getelementptr inbounds %string, ptr %55, i64 0, i32 3
  store i64 %53, ptr %memberidx2.i.i.i59, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10)
  %56 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %57 = call ptr %56(ptr nonnull %55)
  %58 = load i64, ptr %48, align 4
  %memberidx3.i61 = getelementptr inbounds %PropId, ptr %48, i64 0, i32 2
  %59 = load i64, ptr %memberidx3.i61, align 4
  %60 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %11, ptr nonnull @291, ptr %57, i64 %58, i64 %59)
  %61 = load ptr, ptr %11, align 8
  %62 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %62, align 8
  %memberidx.i.i62 = getelementptr inbounds %string, ptr %62, i64 0, i32 1
  store ptr %61, ptr %memberidx.i.i62, align 8
  %memberidx1.i6.i = getelementptr inbounds %string, ptr %62, i64 0, i32 2
  store i64 %60, ptr %memberidx1.i6.i, align 4
  %memberidx2.i7.i = getelementptr inbounds %string, ptr %62, i64 0, i32 3
  store i64 %60, ptr %memberidx2.i7.i, align 4
  call void @free(ptr %57)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11)
  %63 = load i64, ptr %13, align 4
  switch i64 %63, label %common.ret [
    i64 3, label %if.entry14
    i64 4, label %if.entry32
  ]

common.ret:                                       ; preds = %ifend24, %get_class_prop_visibility.exit, %ifend, %ifend37, %ifend29, %ifend10
  %common.ret.op = phi ptr [ %65, %ifend10 ], [ %126, %ifend29 ], [ %146, %ifend37 ], [ null, %ifend ], [ %21, %get_class_prop_visibility.exit ], [ %109, %ifend24 ]
  ret ptr %common.ret.op

ifend10:                                          ; preds = %get_class_prop_visibility.exit
  %64 = tail call fastcc ptr @CodeGen_codegen_type(ptr nonnull %0, ptr nonnull %44, i1 true)
  %65 = tail call ptr @LLVMBuildLoad2(ptr %1, ptr %64, ptr %21, ptr nonnull @27)
  br label %common.ret

if.entry14:                                       ; preds = %ifend
  %66 = call ptr @malloc(i32 24)
  %memberidx.i63 = getelementptr inbounds %VarId, ptr %13, i64 0, i32 1
  %67 = load i64, ptr %memberidx.i63, align 4
  %memberidx1.i64 = getelementptr inbounds %VarId, ptr %13, i64 0, i32 2
  %68 = load i64, ptr %memberidx1.i64, align 4
  store i64 %67, ptr %66, align 4
  %memberidx1.i.i.i65 = getelementptr inbounds %TypeId, ptr %66, i64 0, i32 1
  store i64 0, ptr %memberidx1.i.i.i65, align 4
  %memberidx2.i.i.i66 = getelementptr inbounds %TypeId, ptr %66, i64 0, i32 2
  store i64 %68, ptr %memberidx2.i.i.i66, align 4
  %memberidx.i105 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 8
  %69 = load ptr, ptr %memberidx.i105, align 8
  %70 = load ptr, ptr %69, align 8
  %memberidx1.i106 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %70, i64 0, i32 1
  %71 = load ptr, ptr %memberidx1.i106, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %72 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %6, ptr nonnull @276, i64 %67, i64 0, i64 %68)
  %73 = load ptr, ptr %6, align 8
  %74 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %74, align 8
  %memberidx.i.i.i109 = getelementptr inbounds %string, ptr %74, i64 0, i32 1
  store ptr %73, ptr %memberidx.i.i.i109, align 8
  %memberidx1.i.i.i110 = getelementptr inbounds %string, ptr %74, i64 0, i32 2
  store i64 %72, ptr %memberidx1.i.i.i110, align 4
  %memberidx2.i.i.i111 = getelementptr inbounds %string, ptr %74, i64 0, i32 3
  store i64 %72, ptr %memberidx2.i.i.i111, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %75 = call ptr %71(ptr nonnull %69, ptr nonnull %74)
  %.not.i = icmp eq ptr %75, null
  br i1 %.not.i, label %CodeGen_get_or_codegen_class_from_typeid.exit, label %ifend19

CodeGen_get_or_codegen_class_from_typeid.exit:    ; preds = %if.entry14
  %memberidx.i100 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %76 = load ptr, ptr %memberidx.i100, align 8
  %memberidx.i.i101 = getelementptr inbounds %Program, ptr %76, i64 0, i32 1
  %77 = load ptr, ptr %memberidx.i.i101, align 8
  %memberidx.i.i.i102 = getelementptr inbounds %Array_Module_, ptr %77, i64 0, i32 1
  %78 = load ptr, ptr %memberidx.i.i.i102, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %78, i64 %67
  %79 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i103 = getelementptr inbounds %Module, ptr %79, i64 0, i32 4
  %80 = load ptr, ptr %memberidx2.i.i103, align 8
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %80, i64 0, i32 1
  %81 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %81, i64 %68
  %82 = load ptr, ptr %ptridx.i6.i.i, align 8
  call fastcc void @CodeGen_declare_class(ptr nonnull %0, ptr %82)
  call fastcc void @CodeGen_codegen_class(ptr nonnull %0, ptr %82)
  %83 = load ptr, ptr %82, align 8
  %84 = load ptr, ptr %memberidx.i105, align 8
  %85 = load ptr, ptr %84, align 8
  %memberidx1.i.i113 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %85, i64 0, i32 1
  %86 = load ptr, ptr %memberidx1.i.i113, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %87 = load i64, ptr %83, align 4
  %memberidx1.i.i.i114 = getelementptr inbounds %TypeId, ptr %83, i64 0, i32 1
  %88 = load i64, ptr %memberidx1.i.i.i114, align 4
  %memberidx2.i.i.i115 = getelementptr inbounds %TypeId, ptr %83, i64 0, i32 2
  %89 = load i64, ptr %memberidx2.i.i.i115, align 4
  %90 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @276, i64 %87, i64 %88, i64 %89)
  %91 = load ptr, ptr %5, align 8
  %92 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %92, align 8
  %memberidx.i.i.i.i116 = getelementptr inbounds %string, ptr %92, i64 0, i32 1
  store ptr %91, ptr %memberidx.i.i.i.i116, align 8
  %memberidx1.i.i.i.i = getelementptr inbounds %string, ptr %92, i64 0, i32 2
  store i64 %90, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %string, ptr %92, i64 0, i32 3
  store i64 %90, ptr %memberidx2.i.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  %93 = call ptr %86(ptr nonnull %84, ptr nonnull %92)
  %94 = icmp eq ptr %93, null
  br i1 %94, label %if.entry17, label %ifend19

if.entry17:                                       ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit
  %95 = call ptr @malloc(i32 408)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(51) %95, ptr noundef nonnull align 8 dereferenceable(51) @303, i64 51, i1 false)
  %96 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %96, align 8
  %memberidx.i.i67 = getelementptr inbounds %string, ptr %96, i64 0, i32 1
  store ptr %95, ptr %memberidx.i.i67, align 8
  %memberidx1.i.i68 = getelementptr inbounds %string, ptr %96, i64 0, i32 2
  store i64 51, ptr %memberidx1.i.i68, align 4
  %memberidx2.i.i69 = getelementptr inbounds %string, ptr %96, i64 0, i32 3
  store i64 51, ptr %memberidx2.i.i69, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9)
  %97 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %98 = call ptr %97(ptr nonnull %96)
  %99 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %9, ptr nonnull @270, ptr %98)
  %100 = load ptr, ptr %9, align 8
  %101 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %101, align 8
  %memberidx.i.i71 = getelementptr inbounds %string, ptr %101, i64 0, i32 1
  store ptr %100, ptr %memberidx.i.i71, align 8
  %memberidx1.i.i72 = getelementptr inbounds %string, ptr %101, i64 0, i32 2
  store i64 %99, ptr %memberidx1.i.i72, align 4
  %memberidx2.i.i73 = getelementptr inbounds %string, ptr %101, i64 0, i32 3
  store i64 %99, ptr %memberidx2.i.i73, align 4
  call void @free(ptr %98)
  %102 = load ptr, ptr %101, align 8
  %memberidx.i.i.i74 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %102, i64 0, i32 3
  %103 = load ptr, ptr %memberidx.i.i.i74, align 8
  %104 = call ptr %103(ptr nonnull %101)
  %105 = load i64, ptr %memberidx1.i.i72, align 4
  call void @write(i64 1, ptr %104, i64 %105)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  unreachable

ifend19:                                          ; preds = %if.entry14, %CodeGen_get_or_codegen_class_from_typeid.exit
  %common.ret.op.i98122 = phi ptr [ %93, %CodeGen_get_or_codegen_class_from_typeid.exit ], [ %75, %if.entry14 ]
  %memberidx20 = getelementptr inbounds %CGClassType, ptr %common.ret.op.i98122, i64 0, i32 3
  %106 = load ptr, ptr %memberidx20, align 8
  %107 = load ptr, ptr %106, align 8
  %memberidx21 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %107, i64 0, i32 1
  %108 = load ptr, ptr %memberidx21, align 8
  %109 = call ptr %108(ptr nonnull %106, ptr nonnull %62)
  %110 = icmp eq ptr %109, null
  br i1 %110, label %if.entry22, label %ifend24

if.entry22:                                       ; preds = %ifend19
  %111 = call ptr @malloc(i32 472)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(59) %111, ptr noundef nonnull align 8 dereferenceable(59) @304, i64 59, i1 false)
  %112 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %112, align 8
  %memberidx.i.i76 = getelementptr inbounds %string, ptr %112, i64 0, i32 1
  store ptr %111, ptr %memberidx.i.i76, align 8
  %memberidx1.i.i77 = getelementptr inbounds %string, ptr %112, i64 0, i32 2
  store i64 59, ptr %memberidx1.i.i77, align 4
  %memberidx2.i.i78 = getelementptr inbounds %string, ptr %112, i64 0, i32 3
  store i64 59, ptr %memberidx2.i.i78, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8)
  %113 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %114 = call ptr %113(ptr nonnull %112)
  %115 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %8, ptr nonnull @270, ptr %114)
  %116 = load ptr, ptr %8, align 8
  %117 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %117, align 8
  %memberidx.i.i80 = getelementptr inbounds %string, ptr %117, i64 0, i32 1
  store ptr %116, ptr %memberidx.i.i80, align 8
  %memberidx1.i.i81 = getelementptr inbounds %string, ptr %117, i64 0, i32 2
  store i64 %115, ptr %memberidx1.i.i81, align 4
  %memberidx2.i.i82 = getelementptr inbounds %string, ptr %117, i64 0, i32 3
  store i64 %115, ptr %memberidx2.i.i82, align 4
  call void @free(ptr %114)
  %118 = load ptr, ptr %117, align 8
  %memberidx.i.i.i83 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %118, i64 0, i32 3
  %119 = load ptr, ptr %memberidx.i.i.i83, align 8
  %120 = call ptr %119(ptr nonnull %117)
  %121 = load i64, ptr %memberidx1.i.i81, align 4
  call void @write(i64 1, ptr %120, i64 %121)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8)
  br label %ifend24

ifend24:                                          ; preds = %ifend19, %if.entry22
  %memberidx25 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %122 = load ptr, ptr %memberidx25, align 8
  %123 = load i64, ptr %122, align 4
  %124 = icmp eq i64 %123, 17
  br i1 %124, label %common.ret, label %ifend29

ifend29:                                          ; preds = %ifend24
  %125 = call fastcc ptr @CodeGen_codegen_type(ptr nonnull %0, ptr nonnull %122, i1 true)
  %126 = call ptr @LLVMBuildLoad2(ptr %1, ptr %125, ptr %109, ptr nonnull @27)
  br label %common.ret

if.entry32:                                       ; preds = %ifend
  %127 = call ptr @malloc(i32 24)
  %memberidx.i85 = getelementptr inbounds %VarId, ptr %13, i64 0, i32 1
  %128 = load i64, ptr %memberidx.i85, align 4
  %memberidx1.i86 = getelementptr inbounds %VarId, ptr %13, i64 0, i32 2
  %129 = load i64, ptr %memberidx1.i86, align 4
  store i64 %128, ptr %127, align 4
  %memberidx1.i.i.i87 = getelementptr inbounds %TypeId, ptr %127, i64 0, i32 1
  store i64 1, ptr %memberidx1.i.i.i87, align 4
  %memberidx2.i.i.i88 = getelementptr inbounds %TypeId, ptr %127, i64 0, i32 2
  store i64 %129, ptr %memberidx2.i.i.i88, align 4
  %130 = call fastcc ptr @CodeGen_get_or_codegen_enum_from_typeid(ptr %0, ptr nonnull %127)
  %131 = icmp eq ptr %130, null
  br i1 %131, label %if.entry35, label %ifend37

if.entry35:                                       ; preds = %if.entry32
  %132 = call ptr @malloc(i32 400)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(50) %132, ptr noundef nonnull align 8 dereferenceable(50) @305, i64 50, i1 false)
  %133 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %133, align 8
  %memberidx.i.i89 = getelementptr inbounds %string, ptr %133, i64 0, i32 1
  store ptr %132, ptr %memberidx.i.i89, align 8
  %memberidx1.i.i90 = getelementptr inbounds %string, ptr %133, i64 0, i32 2
  store i64 50, ptr %memberidx1.i.i90, align 4
  %memberidx2.i.i91 = getelementptr inbounds %string, ptr %133, i64 0, i32 3
  store i64 50, ptr %memberidx2.i.i91, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  %134 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %135 = call ptr %134(ptr nonnull %133)
  %136 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %7, ptr nonnull @270, ptr %135)
  %137 = load ptr, ptr %7, align 8
  %138 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %138, align 8
  %memberidx.i.i93 = getelementptr inbounds %string, ptr %138, i64 0, i32 1
  store ptr %137, ptr %memberidx.i.i93, align 8
  %memberidx1.i.i94 = getelementptr inbounds %string, ptr %138, i64 0, i32 2
  store i64 %136, ptr %memberidx1.i.i94, align 4
  %memberidx2.i.i95 = getelementptr inbounds %string, ptr %138, i64 0, i32 3
  store i64 %136, ptr %memberidx2.i.i95, align 4
  call void @free(ptr %135)
  %139 = load ptr, ptr %138, align 8
  %memberidx.i.i.i96 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %139, i64 0, i32 3
  %140 = load ptr, ptr %memberidx.i.i.i96, align 8
  %141 = call ptr %140(ptr nonnull %138)
  %142 = load i64, ptr %memberidx1.i.i94, align 4
  call void @write(i64 1, ptr %141, i64 %142)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7)
  br label %ifend37

ifend37:                                          ; preds = %if.entry32, %if.entry35
  %memberidx38 = getelementptr inbounds %CGEnumType, ptr %130, i64 0, i32 1
  %143 = load ptr, ptr %memberidx38, align 8
  %144 = load ptr, ptr %143, align 8
  %memberidx39 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %144, i64 0, i32 1
  %145 = load ptr, ptr %memberidx39, align 8
  %146 = call ptr %145(ptr nonnull %143, ptr nonnull %62)
  br label %common.ret
}

define internal fastcc void @CodeGen_declare_static_props(ptr nocapture %0, ptr nocapture readonly %1, ptr nocapture readonly %2) unnamed_addr {
for.entry:
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Class, ptr %2, i64 0, i32 7
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load ptr, ptr %5, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %6, i64 0, i32 2
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = tail call ptr %7(ptr nonnull %5)
  %9 = tail call ptr @malloc(i32 33)
  %memberidx.i39 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %8, i64 0, i32 1
  %10 = load ptr, ptr %memberidx.i39, align 8
  %memberidx1.i40 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %8, i64 0, i32 2
  %11 = load i64, ptr %memberidx1.i40, align 4
  store ptr @VTableArrayIterator_Bucket_string_PropId__, ptr %9, align 8
  %memberidx.i.i41 = getelementptr inbounds %Iterator_Bucket_string_PropId__, ptr %9, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i41, align 1
  %memberidx1.i.i42 = getelementptr inbounds %ArrayIterator_Bucket_string_PropId__, ptr %9, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i42, align 4
  %memberidx2.i.i43 = getelementptr inbounds %ArrayIterator_Bucket_string_PropId__, ptr %9, i64 0, i32 4
  store ptr %10, ptr %memberidx2.i.i43, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_Bucket_string_PropId__, ptr %9, i64 0, i32 3
  store i64 %11, ptr %memberidx3.i.i, align 4
  %12 = load ptr, ptr @VTableArrayIterator_Bucket_string_PropId__, align 8
  %13 = tail call ptr %12(ptr nonnull %9)
  %14 = load i1, ptr %memberidx.i.i41, align 1
  br i1 %14, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx6 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %memberidx7 = getelementptr inbounds %Class, ptr %2, i64 0, i32 1
  %memberidx13 = getelementptr inbounds %Class, ptr %2, i64 0, i32 4
  %memberidx16 = getelementptr inbounds %CGClassType, ptr %1, i64 0, i32 3
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %bucket.047 = phi ptr [ %13, %for.body.lr.ph ], [ %89, %ifend ]
  %memberidx4 = getelementptr inbounds %Bucket_string_PropId_, ptr %bucket.047, i64 0, i32 2
  %15 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Bucket_string_PropId_, ptr %bucket.047, i64 0, i32 1
  %16 = load ptr, ptr %memberidx5, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %memberidx.i33 = getelementptr inbounds %PropId, ptr %15, i64 0, i32 1
  %17 = load ptr, ptr %memberidx.i33, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %18 = load i64, ptr %17, align 4
  %memberidx1.i.i = getelementptr inbounds %TypeId, ptr %17, i64 0, i32 1
  %19 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %TypeId, ptr %17, i64 0, i32 2
  %20 = load i64, ptr %memberidx2.i.i, align 4
  %21 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @276, i64 %18, i64 %19, i64 %20)
  %22 = load ptr, ptr %3, align 8
  %23 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %23, align 8
  %memberidx.i.i.i34 = getelementptr inbounds %string, ptr %23, i64 0, i32 1
  store ptr %22, ptr %memberidx.i.i.i34, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %23, i64 0, i32 2
  store i64 %21, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i35 = getelementptr inbounds %string, ptr %23, i64 0, i32 3
  store i64 %21, ptr %memberidx2.i.i.i35, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %24 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %25 = call ptr %24(ptr nonnull %23)
  %26 = load i64, ptr %15, align 4
  %memberidx3.i37 = getelementptr inbounds %PropId, ptr %15, i64 0, i32 2
  %27 = load i64, ptr %memberidx3.i37, align 4
  %28 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @291, ptr %25, i64 %26, i64 %27)
  %29 = load ptr, ptr %4, align 8
  %30 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %30, align 8
  %memberidx.i.i38 = getelementptr inbounds %string, ptr %30, i64 0, i32 1
  store ptr %29, ptr %memberidx.i.i38, align 8
  %memberidx1.i6.i = getelementptr inbounds %string, ptr %30, i64 0, i32 2
  store i64 %28, ptr %memberidx1.i6.i, align 4
  %memberidx2.i7.i = getelementptr inbounds %string, ptr %30, i64 0, i32 3
  store i64 %28, ptr %memberidx2.i7.i, align 4
  call void @free(ptr %25)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %31 = load ptr, ptr %memberidx6, align 8
  %32 = load ptr, ptr %memberidx.i33, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %31, i64 0, i32 1
  %33 = load ptr, ptr %memberidx.i.i.i, align 8
  %34 = load i64, ptr %32, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %33, i64 0, i32 1
  %35 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %35, i64 %34
  %36 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %36, i64 0, i32 4
  %37 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %32, i64 0, i32 2
  %38 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %37, i64 0, i32 1
  %39 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %39, i64 %38
  %40 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %41 = load i64, ptr %15, align 4
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %if.entry.i, label %ifend.i

if.entry.i:                                       ; preds = %for.body
  %memberidx1.i31 = getelementptr inbounds %Class, ptr %40, i64 0, i32 5
  %43 = load ptr, ptr %memberidx1.i31, align 8
  %44 = load i64, ptr %memberidx3.i37, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %43, i64 0, i32 1
  %45 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %45, i64 %44
  %46 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i = getelementptr inbounds %ClassMethod, ptr %46, i64 0, i32 4
  br label %get_class_prop_type.exit

ifend.i:                                          ; preds = %for.body
  %memberidx4.i = getelementptr inbounds %Class, ptr %40, i64 0, i32 4
  %47 = load ptr, ptr %memberidx4.i, align 8
  %48 = load i64, ptr %memberidx3.i37, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %47, i64 0, i32 1
  %49 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %49, i64 %48
  %50 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %50, i64 0, i32 4
  br label %get_class_prop_type.exit

get_class_prop_type.exit:                         ; preds = %if.entry.i, %ifend.i
  %common.ret.op.in.i = phi ptr [ %memberidx3.i, %if.entry.i ], [ %memberidx6.i, %ifend.i ]
  %common.ret.op.i = load ptr, ptr %common.ret.op.in.i, align 8
  %51 = load i64, ptr %common.ret.op.i, align 4
  %52 = icmp eq i64 %51, 20
  br i1 %52, label %if.entry.i45, label %is_object.exit

if.entry.i45:                                     ; preds = %get_class_prop_type.exit, %if.entry.i45
  %.tr5.i = phi ptr [ %53, %if.entry.i45 ], [ %common.ret.op.i, %get_class_prop_type.exit ]
  %memberidx1.i44 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %53 = load ptr, ptr %memberidx1.i44, align 8
  %54 = load i64, ptr %53, align 4
  %55 = icmp eq i64 %54, 20
  br i1 %55, label %if.entry.i45, label %is_object.exit

is_object.exit:                                   ; preds = %if.entry.i45, %get_class_prop_type.exit
  %.lcssa.i = phi i64 [ %51, %get_class_prop_type.exit ], [ %54, %if.entry.i45 ]
  %56 = icmp eq i64 %.lcssa.i, 13
  %57 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr nonnull %common.ret.op.i, i1 %56)
  %58 = load ptr, ptr %memberidx7, align 8
  %59 = load ptr, ptr %58, align 8
  %memberidx8 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %59, i64 0, i32 5
  %60 = load ptr, ptr %memberidx8, align 8
  %61 = call ptr %60(ptr nonnull %58)
  %62 = load ptr, ptr %16, align 8
  %memberidx9 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %62, i64 0, i32 5
  %63 = load ptr, ptr %memberidx9, align 8
  %64 = call ptr %63(ptr nonnull %16)
  %65 = alloca ptr, align 8
  %66 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %65, ptr nonnull @149, ptr %61, ptr %64)
  %67 = load ptr, ptr %65, align 8
  %68 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %68, align 8
  %memberidx.i29 = getelementptr inbounds %string, ptr %68, i64 0, i32 1
  store ptr %67, ptr %memberidx.i29, align 8
  %memberidx1.i30 = getelementptr inbounds %string, ptr %68, i64 0, i32 2
  store i64 %66, ptr %memberidx1.i30, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %68, i64 0, i32 3
  store i64 %66, ptr %memberidx2.i, align 4
  tail call void @free(ptr %61)
  tail call void @free(ptr %64)
  %69 = load i64, ptr %15, align 4
  %70 = icmp eq i64 %69, 0
  %71 = load ptr, ptr %0, align 8
  %72 = load ptr, ptr %68, align 8
  %memberidx1.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %72, i64 0, i32 5
  %73 = load ptr, ptr %memberidx1.i, align 8
  %74 = call ptr %73(ptr nonnull %68)
  br i1 %70, label %if.entry, label %else

for.end:                                          ; preds = %ifend, %for.entry
  tail call void @free(ptr nonnull %9)
  ret void

if.entry:                                         ; preds = %is_object.exit
  %75 = call ptr @LLVMAddFunction(ptr %71, ptr %74, ptr %57)
  br label %ifend

else:                                             ; preds = %is_object.exit
  %76 = call ptr @LLVMAddGlobal(ptr %71, ptr %57, ptr %74)
  %77 = load ptr, ptr %memberidx13, align 8
  %78 = load i64, ptr %memberidx3.i37, align 4
  %memberidx.i = getelementptr inbounds %Array_ClassField_, ptr %77, i64 0, i32 1
  %79 = load ptr, ptr %memberidx.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %79, i64 %78
  %80 = load ptr, ptr %ptridx.i, align 8
  %memberidx15 = getelementptr inbounds %ClassField, ptr %80, i64 0, i32 5
  %81 = load ptr, ptr %memberidx15, align 8
  %82 = call fastcc ptr @CodeGen_codegen_expression(ptr nonnull %0, ptr null, ptr %81)
  call void @LLVMSetInitializer(ptr %76, ptr %82)
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  %83 = phi ptr [ %76, %else ], [ %75, %if.entry ]
  %84 = load ptr, ptr %memberidx16, align 8
  %85 = load ptr, ptr %84, align 8
  %86 = load ptr, ptr %85, align 8
  call void %86(ptr nonnull %84, ptr nonnull %30, ptr %83)
  %87 = load ptr, ptr %9, align 8
  %88 = load ptr, ptr %87, align 8
  %89 = call ptr %88(ptr nonnull %9)
  %90 = load i1, ptr %memberidx.i.i41, align 1
  br i1 %90, label %for.end, label %for.body
}

define internal fastcc void @CodeGen_codegen_function(ptr nocapture %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Function, ptr %1, i64 0, i32 1
  %5 = load ptr, ptr %memberidx, align 8
  %6 = load ptr, ptr %5, align 8
  %memberidx1 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %6, i64 0, i32 5
  %7 = load ptr, ptr %memberidx1, align 8
  %8 = tail call ptr %7(ptr nonnull %5)
  %9 = load ptr, ptr %0, align 8
  %memberidx3 = getelementptr inbounds %Function, ptr %1, i64 0, i32 4
  %10 = load ptr, ptr %memberidx3, align 8
  %11 = tail call fastcc ptr @CodeGen_codegen_type(ptr nonnull %0, ptr %10, i1 false)
  %12 = tail call ptr @LLVMAddFunction(ptr %9, ptr %8, ptr %11)
  %13 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 6
  %14 = load ptr, ptr %memberidx.i, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %memberidx.i.i = getelementptr inbounds %VarId, ptr %13, i64 0, i32 1
  %17 = load i64, ptr %memberidx.i.i, align 4
  %18 = load i64, ptr %13, align 4
  %memberidx2.i.i = getelementptr inbounds %VarId, ptr %13, i64 0, i32 2
  %19 = load i64, ptr %memberidx2.i.i, align 4
  %20 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @276, i64 %17, i64 %18, i64 %19)
  %21 = load ptr, ptr %4, align 8
  %22 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %22, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %22, i64 0, i32 1
  store ptr %21, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %22, i64 0, i32 2
  store i64 %20, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %22, i64 0, i32 3
  store i64 %20, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  call void %16(ptr nonnull %14, ptr nonnull %22, ptr %12)
  %memberidx5 = getelementptr inbounds %Function, ptr %1, i64 0, i32 6
  %23 = load i1, ptr %memberidx5, align 1
  br i1 %23, label %if.entry, label %ifend

common.ret:                                       ; preds = %CodeGen_codegen_block.exit, %if.entry
  ret void

if.entry:                                         ; preds = %2
  call void @LLVMSetLinkage(ptr %12, i64 0)
  br label %common.ret

ifend:                                            ; preds = %2
  %24 = call ptr @LLVMCreateBuilder()
  %25 = call ptr @LLVMAppendBasicBlock(ptr %12, ptr nonnull @27)
  call void @LLVMPositionBuilderAtEnd(ptr %24, ptr %25)
  %memberidx6 = getelementptr inbounds %Function, ptr %1, i64 0, i32 2
  %26 = load ptr, ptr %memberidx6, align 8
  %memberidx748 = getelementptr inbounds %Array_FunctionArg_, ptr %26, i64 0, i32 2
  %27 = load i64, ptr %memberidx748, align 4
  %28 = icmp sgt i64 %27, 0
  br i1 %28, label %for.body, label %for.end

for.body:                                         ; preds = %ifend, %for.body
  %29 = phi ptr [ %52, %for.body ], [ %26, %ifend ]
  %storemerge49 = phi i64 [ %51, %for.body ], [ 0, %ifend ]
  %memberidx.i35 = getelementptr inbounds %Array_FunctionArg_, ptr %29, i64 0, i32 1
  %30 = load ptr, ptr %memberidx.i35, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %30, i64 %storemerge49
  %31 = load ptr, ptr %ptridx.i, align 8
  %32 = call ptr @LLVMGetParam(ptr %12, i64 %storemerge49)
  %memberidx9 = getelementptr inbounds %Expression, ptr %31, i64 0, i32 3
  %33 = load ptr, ptr %memberidx9, align 8
  %34 = call fastcc ptr @CodeGen_codegen_type(ptr nonnull %0, ptr %33, i1 true)
  %memberidx10 = getelementptr inbounds %FunctionArg, ptr %31, i64 0, i32 5
  %35 = load ptr, ptr %memberidx10, align 8
  %36 = load ptr, ptr %35, align 8
  %memberidx11 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %36, i64 0, i32 5
  %37 = load ptr, ptr %memberidx11, align 8
  %38 = call ptr %37(ptr nonnull %35)
  %39 = call ptr @LLVMBuildAlloca(ptr %24, ptr %34, ptr %38)
  %40 = call ptr @LLVMBuildStore(ptr %24, ptr %32, ptr %39)
  %memberidx12 = getelementptr inbounds %FunctionArg, ptr %31, i64 0, i32 4
  %41 = load ptr, ptr %memberidx12, align 8
  %42 = load ptr, ptr %memberidx.i, align 8
  %43 = load ptr, ptr %42, align 8
  %44 = load ptr, ptr %43, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %memberidx.i.i37 = getelementptr inbounds %VarId, ptr %41, i64 0, i32 1
  %45 = load i64, ptr %memberidx.i.i37, align 4
  %46 = load i64, ptr %41, align 4
  %memberidx2.i.i38 = getelementptr inbounds %VarId, ptr %41, i64 0, i32 2
  %47 = load i64, ptr %memberidx2.i.i38, align 4
  %48 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @276, i64 %45, i64 %46, i64 %47)
  %49 = load ptr, ptr %3, align 8
  %50 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %50, align 8
  %memberidx.i.i.i39 = getelementptr inbounds %string, ptr %50, i64 0, i32 1
  store ptr %49, ptr %memberidx.i.i.i39, align 8
  %memberidx1.i.i.i40 = getelementptr inbounds %string, ptr %50, i64 0, i32 2
  store i64 %48, ptr %memberidx1.i.i.i40, align 4
  %memberidx2.i.i.i41 = getelementptr inbounds %string, ptr %50, i64 0, i32 3
  store i64 %48, ptr %memberidx2.i.i.i41, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  call void %44(ptr nonnull %42, ptr nonnull %50, ptr %39)
  %51 = add nuw nsw i64 %storemerge49, 1
  %52 = load ptr, ptr %memberidx6, align 8
  %memberidx7 = getelementptr inbounds %Array_FunctionArg_, ptr %52, i64 0, i32 2
  %53 = load i64, ptr %memberidx7, align 4
  %54 = icmp slt i64 %51, %53
  br i1 %54, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %ifend
  %memberidx13 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 1
  %55 = load ptr, ptr %memberidx13, align 8
  store ptr %12, ptr %memberidx13, align 8
  %memberidx15 = getelementptr inbounds %Function, ptr %1, i64 0, i32 3
  %56 = load ptr, ptr %memberidx15, align 8
  %memberidx.i42 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 5
  %57 = load i1, ptr %memberidx.i42, align 1
  store i1 false, ptr %memberidx.i42, align 1
  %58 = load ptr, ptr %56, align 8
  %59 = call ptr @malloc(i32 33)
  %memberidx.i.i43 = getelementptr inbounds %Array_Statement_, ptr %58, i64 0, i32 1
  %60 = load ptr, ptr %memberidx.i.i43, align 8
  %memberidx1.i.i = getelementptr inbounds %Array_Statement_, ptr %58, i64 0, i32 2
  %61 = load i64, ptr %memberidx1.i.i, align 4
  store ptr @VTableArrayIterator_Statement_, ptr %59, align 8
  %memberidx.i.i.i44 = getelementptr inbounds %Iterator_Statement_, ptr %59, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i.i44, align 1
  %memberidx1.i.i.i45 = getelementptr inbounds %ArrayIterator_Statement_, ptr %59, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i.i45, align 4
  %memberidx2.i.i.i46 = getelementptr inbounds %ArrayIterator_Statement_, ptr %59, i64 0, i32 4
  store ptr %60, ptr %memberidx2.i.i.i46, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ArrayIterator_Statement_, ptr %59, i64 0, i32 3
  store i64 %61, ptr %memberidx3.i.i.i, align 4
  %62 = load ptr, ptr @VTableArrayIterator_Statement_, align 8
  %63 = call ptr %62(ptr nonnull %59)
  %64 = load i1, ptr %memberidx.i.i.i44, align 1
  br i1 %64, label %CodeGen_codegen_block.exit, label %for.body.i

for.body.i:                                       ; preds = %for.end, %for.body.i
  %statement.0.i47 = phi ptr [ %67, %for.body.i ], [ %63, %for.end ]
  call fastcc void @CodeGen_codegen_statement(ptr nonnull %0, ptr %24, ptr %statement.0.i47)
  %65 = load ptr, ptr %59, align 8
  %66 = load ptr, ptr %65, align 8
  %67 = call ptr %66(ptr nonnull %59)
  %68 = load i1, ptr %memberidx.i.i.i44, align 1
  br i1 %68, label %CodeGen_codegen_block.exit, label %for.body.i

CodeGen_codegen_block.exit:                       ; preds = %for.body.i, %for.end
  call void @free(ptr nonnull %59)
  store i1 %57, ptr %memberidx.i42, align 1
  call void @LLVMDisposeBuilder(ptr %24)
  store ptr %55, ptr %memberidx13, align 8
  br label %common.ret
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_LLVMTypeRef__find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define internal ptr @ArrayIterator_LLVMTypeRef____next__(ptr nocapture %0) #11 {
  %memberidx = getelementptr inbounds %ArrayIterator_LLVMTypeRef_, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = add i64 %2, 1
  store i64 %3, ptr %memberidx, align 4
  %memberidx2 = getelementptr inbounds %ArrayIterator_LLVMTypeRef_, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %memberidx2, align 8
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %2
  %5 = load ptr, ptr %ptridx, align 8
  %memberidx3 = getelementptr inbounds %Iterator_LLVMTypeRef_, ptr %0, i64 0, i32 1
  %memberidx5 = getelementptr inbounds %ArrayIterator_LLVMTypeRef_, ptr %0, i64 0, i32 3
  %6 = load i64, ptr %memberidx5, align 4
  %7 = icmp sgt i64 %3, %6
  store i1 %7, ptr %memberidx3, align 1
  ret ptr %5
}

define internal fastcc void @CodeGen_declare_class_props(ptr nocapture %0, ptr nocapture %1, ptr %2, ptr nocapture %3) unnamed_addr {
for.entry:
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMValueRef_, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %7, i64 0, i32 2
  %memberidx1.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %7, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %7, i64 0, i32 1
  %8 = tail call ptr @malloc(i32 64)
  store ptr %8, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %9 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMTypeRef_, ptr %9, align 8
  %memberidx.i137 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %9, i64 0, i32 2
  %memberidx1.i138 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %9, i64 0, i32 3
  store i64 8, ptr %memberidx1.i138, align 4
  %memberidx2.i139 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %9, i64 0, i32 1
  %10 = tail call ptr @malloc(i32 64)
  store ptr %10, ptr %memberidx2.i139, align 8
  store i64 0, ptr %memberidx.i137, align 4
  %11 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMTypeRef_, ptr %11, align 8
  %memberidx.i140 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %11, i64 0, i32 2
  %memberidx1.i141 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %11, i64 0, i32 3
  store i64 8, ptr %memberidx1.i141, align 4
  %memberidx2.i142 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %11, i64 0, i32 1
  %12 = tail call ptr @malloc(i32 64)
  store ptr %12, ptr %memberidx2.i142, align 8
  store i64 0, ptr %memberidx.i140, align 4
  %memberidx6 = getelementptr inbounds %Class, ptr %2, i64 0, i32 6
  %13 = load ptr, ptr %memberidx6, align 8
  %14 = load ptr, ptr %13, align 8
  %memberidx7 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %14, i64 0, i32 2
  %15 = load ptr, ptr %memberidx7, align 8
  %16 = tail call ptr %15(ptr nonnull %13)
  %17 = tail call ptr @malloc(i32 33)
  %memberidx.i143 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %16, i64 0, i32 1
  %18 = load ptr, ptr %memberidx.i143, align 8
  %memberidx1.i144 = getelementptr inbounds %Array_Bucket_string_PropId__, ptr %16, i64 0, i32 2
  %19 = load i64, ptr %memberidx1.i144, align 4
  store ptr @VTableArrayIterator_Bucket_string_PropId__, ptr %17, align 8
  %memberidx.i.i = getelementptr inbounds %Iterator_Bucket_string_PropId__, ptr %17, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i, align 1
  %memberidx1.i.i = getelementptr inbounds %ArrayIterator_Bucket_string_PropId__, ptr %17, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %ArrayIterator_Bucket_string_PropId__, ptr %17, i64 0, i32 4
  store ptr %18, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_Bucket_string_PropId__, ptr %17, i64 0, i32 3
  store i64 %19, ptr %memberidx3.i.i, align 4
  %20 = load ptr, ptr @VTableArrayIterator_Bucket_string_PropId__, align 8
  %21 = tail call ptr %20(ptr nonnull %17)
  %22 = load i1, ptr %memberidx.i.i, align 1
  br i1 %22, label %for.end.thread, label %for.body.lr.ph

for.end.thread:                                   ; preds = %for.entry
  tail call void @free(ptr nonnull %17)
  br label %for.entry91

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx12 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %memberidx15 = getelementptr inbounds %CGClassType, ptr %1, i64 0, i32 2
  %memberidx36 = getelementptr inbounds %Class, ptr %2, i64 0, i32 5
  %memberidx42 = getelementptr inbounds %Class, ptr %2, i64 0, i32 1
  %memberidx63 = getelementptr inbounds %CGClassType, ptr %1, i64 0, i32 1
  %memberidx49 = getelementptr inbounds %CGClassType, ptr %1, i64 0, i32 3
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.incr
  %bucket.0353 = phi ptr [ %21, %for.body.lr.ph ], [ %62, %for.incr ]
  %memberidx10 = getelementptr inbounds %Bucket_string_PropId_, ptr %bucket.0353, i64 0, i32 2
  %23 = load ptr, ptr %memberidx10, align 8
  %memberidx11 = getelementptr inbounds %Bucket_string_PropId_, ptr %bucket.0353, i64 0, i32 1
  %24 = load ptr, ptr %memberidx11, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %memberidx.i145 = getelementptr inbounds %PropId, ptr %23, i64 0, i32 1
  %25 = load ptr, ptr %memberidx.i145, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %26 = load i64, ptr %25, align 4
  %memberidx1.i.i146 = getelementptr inbounds %TypeId, ptr %25, i64 0, i32 1
  %27 = load i64, ptr %memberidx1.i.i146, align 4
  %memberidx2.i.i147 = getelementptr inbounds %TypeId, ptr %25, i64 0, i32 2
  %28 = load i64, ptr %memberidx2.i.i147, align 4
  %29 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @276, i64 %26, i64 %27, i64 %28)
  %30 = load ptr, ptr %5, align 8
  %31 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %31, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %31, i64 0, i32 1
  store ptr %30, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %31, i64 0, i32 2
  store i64 %29, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %31, i64 0, i32 3
  store i64 %29, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  %32 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %33 = call ptr %32(ptr nonnull %31)
  %34 = load i64, ptr %23, align 4
  %memberidx3.i = getelementptr inbounds %PropId, ptr %23, i64 0, i32 2
  %35 = load i64, ptr %memberidx3.i, align 4
  %36 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %6, ptr nonnull @291, ptr %33, i64 %34, i64 %35)
  %37 = load ptr, ptr %6, align 8
  %38 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %38, align 8
  %memberidx.i.i149 = getelementptr inbounds %string, ptr %38, i64 0, i32 1
  store ptr %37, ptr %memberidx.i.i149, align 8
  %memberidx1.i6.i = getelementptr inbounds %string, ptr %38, i64 0, i32 2
  store i64 %36, ptr %memberidx1.i6.i, align 4
  %memberidx2.i7.i = getelementptr inbounds %string, ptr %38, i64 0, i32 3
  store i64 %36, ptr %memberidx2.i7.i, align 4
  call void @free(ptr %33)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %39 = load ptr, ptr %memberidx12, align 8
  %40 = load ptr, ptr %memberidx.i145, align 8
  %memberidx.i.i.i151 = getelementptr inbounds %Program, ptr %39, i64 0, i32 1
  %41 = load ptr, ptr %memberidx.i.i.i151, align 8
  %42 = load i64, ptr %40, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %41, i64 0, i32 1
  %43 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %43, i64 %42
  %44 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i152 = getelementptr inbounds %Module, ptr %44, i64 0, i32 4
  %45 = load ptr, ptr %memberidx2.i.i.i152, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %40, i64 0, i32 2
  %46 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %45, i64 0, i32 1
  %47 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %47, i64 %46
  %48 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %49 = load i64, ptr %23, align 4
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %get_vtable_index.exit.thread, label %get_vtable_index.exit

get_vtable_index.exit.thread:                     ; preds = %for.body
  %memberidx1.i153 = getelementptr inbounds %Class, ptr %48, i64 0, i32 5
  %51 = load ptr, ptr %memberidx1.i153, align 8
  %52 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i12.i = getelementptr inbounds %Array_ClassMethod_, ptr %51, i64 0, i32 1
  %53 = load ptr, ptr %memberidx.i12.i, align 8
  %ptridx.i13.i = getelementptr inbounds ptr, ptr %53, i64 %52
  %54 = load ptr, ptr %ptridx.i13.i, align 8
  %memberidx3.i155 = getelementptr inbounds %ClassMethod, ptr %54, i64 0, i32 4
  %common.ret.op.i325 = load ptr, ptr %memberidx3.i155, align 8
  %prop_index326 = alloca i64, align 8
  %memberidx3.i170 = getelementptr inbounds %ClassMethod, ptr %54, i64 0, i32 9
  %common.ret.op.i165334 = load i64, ptr %memberidx3.i170, align 4
  store i64 %common.ret.op.i165334, ptr %prop_index326, align 8
  br label %else

get_vtable_index.exit:                            ; preds = %for.body
  %memberidx4.i = getelementptr inbounds %Class, ptr %48, i64 0, i32 4
  %55 = load ptr, ptr %memberidx4.i, align 8
  %56 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i11.i = getelementptr inbounds %Array_ClassField_, ptr %55, i64 0, i32 1
  %57 = load ptr, ptr %memberidx.i11.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %57, i64 %56
  %58 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx6.i = getelementptr inbounds %ClassField, ptr %58, i64 0, i32 4
  %common.ret.op.i = load ptr, ptr %memberidx6.i, align 8
  %prop_index = alloca i64, align 8
  %memberidx6.i176 = getelementptr inbounds %ClassField, ptr %58, i64 0, i32 6
  %common.ret.op.i165 = load i64, ptr %memberidx6.i176, align 4
  store i64 %common.ret.op.i165, ptr %prop_index, align 8
  %59 = icmp eq i64 %49, 1
  br i1 %59, label %if.entry, label %else

for.incr:                                         ; preds = %resize_type_array.exit, %resize_type_array.exit290, %if.entry46
  %60 = load ptr, ptr %17, align 8
  %61 = load ptr, ptr %60, align 8
  %62 = call ptr %61(ptr nonnull %17)
  %63 = load i1, ptr %memberidx.i.i, align 1
  br i1 %63, label %for.end, label %for.body

for.end:                                          ; preds = %for.incr
  %.pre368 = load i64, ptr %memberidx.i137, align 4
  tail call void @free(ptr nonnull %17)
  %64 = icmp sgt i64 %.pre368, 0
  br i1 %64, label %if.entry73, label %for.entry91

if.entry:                                         ; preds = %get_vtable_index.exit
  %65 = call fastcc ptr @CodeGen_codegen_type(ptr nonnull %0, ptr %common.ret.op.i, i1 true)
  %66 = load ptr, ptr %memberidx15, align 8
  %67 = load ptr, ptr %66, align 8
  %68 = load ptr, ptr %67, align 8
  call void %68(ptr nonnull %66, ptr nonnull %38, i64 %common.ret.op.i165)
  %69 = load i64, ptr %memberidx.i140, align 4
  %.not.i338 = icmp sgt i64 %69, %common.ret.op.i165
  br i1 %.not.i338, label %if.entry.resize_type_array.exit_crit_edge, label %for.body.i.lr.ph

if.entry.resize_type_array.exit_crit_edge:        ; preds = %if.entry
  %.pre = load ptr, ptr %memberidx2.i142, align 8
  br label %resize_type_array.exit

for.body.i.lr.ph:                                 ; preds = %if.entry
  %memberidx1.i141.promoted = load i64, ptr %memberidx1.i141, align 4
  %memberidx2.i142.promoted = load ptr, ptr %memberidx2.i142, align 8
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i.lr.ph, %Array_LLVMTypeRef____sl__.exit.i
  %70 = phi ptr [ %memberidx2.i142.promoted, %for.body.i.lr.ph ], [ %76, %Array_LLVMTypeRef____sl__.exit.i ]
  %71 = phi i64 [ %memberidx1.i141.promoted, %for.body.i.lr.ph ], [ %77, %Array_LLVMTypeRef____sl__.exit.i ]
  %72 = phi i64 [ %69, %for.body.i.lr.ph ], [ %78, %Array_LLVMTypeRef____sl__.exit.i ]
  %i.0.i339 = phi i64 [ %69, %for.body.i.lr.ph ], [ %79, %Array_LLVMTypeRef____sl__.exit.i ]
  %.not.i.i = icmp slt i64 %72, %71
  br i1 %.not.i.i, label %Array_LLVMTypeRef____sl__.exit.i, label %if.entry.i.i

if.entry.i.i:                                     ; preds = %for.body.i
  %73 = shl i64 %71, 1
  %74 = shl i64 %71, 4
  %75 = call ptr @realloc(ptr %70, i64 %74)
  br label %Array_LLVMTypeRef____sl__.exit.i

Array_LLVMTypeRef____sl__.exit.i:                 ; preds = %if.entry.i.i, %for.body.i
  %76 = phi ptr [ %75, %if.entry.i.i ], [ %70, %for.body.i ]
  %77 = phi i64 [ %73, %if.entry.i.i ], [ %71, %for.body.i ]
  %78 = add i64 %72, 1
  %ptridx.i.i183 = getelementptr inbounds ptr, ptr %76, i64 %72
  store ptr null, ptr %ptridx.i.i183, align 8
  %79 = add i64 %i.0.i339, 1
  %.not.i = icmp sgt i64 %79, %common.ret.op.i165
  br i1 %.not.i, label %for.cond.i.resize_type_array.exit_crit_edge, label %for.body.i

for.cond.i.resize_type_array.exit_crit_edge:      ; preds = %Array_LLVMTypeRef____sl__.exit.i
  store i64 %78, ptr %memberidx.i140, align 4
  store i64 %77, ptr %memberidx1.i141, align 4
  store ptr %76, ptr %memberidx2.i142, align 8
  br label %resize_type_array.exit

resize_type_array.exit:                           ; preds = %if.entry.resize_type_array.exit_crit_edge, %for.cond.i.resize_type_array.exit_crit_edge
  %80 = phi ptr [ %.pre, %if.entry.resize_type_array.exit_crit_edge ], [ %76, %for.cond.i.resize_type_array.exit_crit_edge ]
  %ptridx.i = getelementptr inbounds ptr, ptr %80, i64 %common.ret.op.i165
  store ptr %65, ptr %ptridx.i, align 8
  br label %for.incr

else:                                             ; preds = %get_vtable_index.exit.thread, %get_vtable_index.exit
  %common.ret.op.i327336 = phi ptr [ %common.ret.op.i325, %get_vtable_index.exit.thread ], [ %common.ret.op.i, %get_vtable_index.exit ]
  %prop_index329335 = phi ptr [ %prop_index326, %get_vtable_index.exit.thread ], [ %prop_index, %get_vtable_index.exit ]
  %llvm_method_val = alloca ptr, align 8
  store ptr null, ptr %llvm_method_val, align 8
  %llvm_method_type = alloca ptr, align 8
  %81 = load ptr, ptr %2, align 8
  %82 = icmp eq ptr %40, %81
  br i1 %82, label %if.entry19, label %else20

if.entry19:                                       ; preds = %else
  %83 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Type_, ptr %83, align 8
  %memberidx.i185 = getelementptr inbounds %Array_Type_, ptr %83, i64 0, i32 2
  store i64 0, ptr %memberidx.i185, align 4
  %memberidx1.i186 = getelementptr inbounds %Array_Type_, ptr %83, i64 0, i32 3
  store i64 8, ptr %memberidx1.i186, align 4
  %memberidx2.i187 = getelementptr inbounds %Array_Type_, ptr %83, i64 0, i32 1
  %84 = call ptr @malloc(i32 64)
  store ptr %84, ptr %memberidx2.i187, align 8
  store i64 0, ptr %memberidx.i185, align 4
  %85 = tail call ptr @malloc(i32 16)
  %86 = load ptr, ptr %2, align 8
  store i64 13, ptr %85, align 4
  %memberidx.i188 = getelementptr inbounds %ObjectType, ptr %85, i64 0, i32 1
  store ptr %86, ptr %memberidx.i188, align 8
  %87 = load i64, ptr %memberidx.i185, align 4
  %88 = load i64, ptr %memberidx1.i186, align 4
  %.not.i191 = icmp slt i64 %87, %88
  br i1 %.not.i191, label %if.entry19.Array_Type____sl__.exit_crit_edge, label %if.entry.i194

if.entry19.Array_Type____sl__.exit_crit_edge:     ; preds = %if.entry19
  %.pre363 = load ptr, ptr %memberidx2.i187, align 8
  br label %Array_Type____sl__.exit

if.entry.i194:                                    ; preds = %if.entry19
  %89 = shl i64 %88, 1
  store i64 %89, ptr %memberidx1.i186, align 4
  %90 = load ptr, ptr %memberidx2.i187, align 8
  %91 = shl i64 %88, 4
  %92 = call ptr @realloc(ptr %90, i64 %91)
  store ptr %92, ptr %memberidx2.i187, align 8
  %.pre362 = load i64, ptr %memberidx.i185, align 4
  br label %Array_Type____sl__.exit

Array_Type____sl__.exit:                          ; preds = %if.entry19.Array_Type____sl__.exit_crit_edge, %if.entry.i194
  %93 = phi ptr [ %.pre363, %if.entry19.Array_Type____sl__.exit_crit_edge ], [ %92, %if.entry.i194 ]
  %94 = phi i64 [ %87, %if.entry19.Array_Type____sl__.exit_crit_edge ], [ %.pre362, %if.entry.i194 ]
  %95 = add i64 %94, 1
  store i64 %95, ptr %memberidx.i185, align 4
  %ptridx.i196 = getelementptr inbounds ptr, ptr %93, i64 %94
  store ptr %85, ptr %ptridx.i196, align 8
  %memberidx27 = getelementptr inbounds %FunctionType, ptr %common.ret.op.i327336, i64 0, i32 1
  %96 = load ptr, ptr %memberidx27, align 8
  %97 = call ptr @malloc(i32 33)
  %memberidx.i198 = getelementptr inbounds %Array_Type_, ptr %96, i64 0, i32 1
  %98 = load ptr, ptr %memberidx.i198, align 8
  %memberidx1.i199 = getelementptr inbounds %Array_Type_, ptr %96, i64 0, i32 2
  %99 = load i64, ptr %memberidx1.i199, align 4
  store ptr @VTableArrayIterator_Type_, ptr %97, align 8
  %memberidx.i.i200 = getelementptr inbounds %Iterator_Type_, ptr %97, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i200, align 1
  %memberidx1.i.i201 = getelementptr inbounds %ArrayIterator_Type_, ptr %97, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i201, align 4
  %memberidx2.i.i202 = getelementptr inbounds %ArrayIterator_Type_, ptr %97, i64 0, i32 4
  store ptr %98, ptr %memberidx2.i.i202, align 8
  %memberidx3.i.i203 = getelementptr inbounds %ArrayIterator_Type_, ptr %97, i64 0, i32 3
  store i64 %99, ptr %memberidx3.i.i203, align 4
  %100 = load ptr, ptr @VTableArrayIterator_Type_, align 8
  %101 = call ptr %100(ptr nonnull %97)
  %102 = load i1, ptr %memberidx.i.i200, align 1
  br i1 %102, label %for.end32, label %for.body30

else20:                                           ; preds = %else
  %103 = call fastcc ptr @CodeGen_codegen_type(ptr nonnull %0, ptr %common.ret.op.i327336, i1 false)
  store ptr %103, ptr %llvm_method_type, align 8
  %104 = load ptr, ptr %memberidx12, align 8
  %105 = load ptr, ptr %memberidx.i145, align 8
  %memberidx.i.i205 = getelementptr inbounds %Program, ptr %104, i64 0, i32 1
  %106 = load ptr, ptr %memberidx.i.i205, align 8
  %107 = load i64, ptr %105, align 4
  %memberidx.i.i.i206 = getelementptr inbounds %Array_Module_, ptr %106, i64 0, i32 1
  %108 = load ptr, ptr %memberidx.i.i.i206, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %108, i64 %107
  %109 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i207 = getelementptr inbounds %Module, ptr %109, i64 0, i32 4
  %110 = load ptr, ptr %memberidx2.i.i207, align 8
  %memberidx3.i.i208 = getelementptr inbounds %TypeId, ptr %105, i64 0, i32 2
  %111 = load i64, ptr %memberidx3.i.i208, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %110, i64 0, i32 1
  %112 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %112, i64 %111
  %113 = load ptr, ptr %ptridx.i6.i.i, align 8
  %114 = load ptr, ptr %0, align 8
  %memberidx53 = getelementptr inbounds %Class, ptr %113, i64 0, i32 1
  %115 = load ptr, ptr %memberidx53, align 8
  %116 = load ptr, ptr %115, align 8
  %memberidx54 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %116, i64 0, i32 5
  %117 = load ptr, ptr %memberidx54, align 8
  %118 = call ptr %117(ptr nonnull %115)
  %119 = load ptr, ptr %24, align 8
  %memberidx55 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %119, i64 0, i32 5
  %120 = load ptr, ptr %memberidx55, align 8
  %121 = call ptr %120(ptr nonnull %24)
  %122 = alloca ptr, align 8
  %123 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %122, ptr nonnull @149, ptr %118, ptr %121)
  %124 = load ptr, ptr %122, align 8
  %125 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %125, align 8
  %memberidx.i209 = getelementptr inbounds %string, ptr %125, i64 0, i32 1
  store ptr %124, ptr %memberidx.i209, align 8
  %memberidx1.i210 = getelementptr inbounds %string, ptr %125, i64 0, i32 2
  store i64 %123, ptr %memberidx1.i210, align 4
  %memberidx2.i211 = getelementptr inbounds %string, ptr %125, i64 0, i32 3
  store i64 %123, ptr %memberidx2.i211, align 4
  tail call void @free(ptr %118)
  tail call void @free(ptr %121)
  %126 = load ptr, ptr %125, align 8
  %memberidx56 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %126, i64 0, i32 5
  %127 = load ptr, ptr %memberidx56, align 8
  %128 = call ptr %127(ptr nonnull %125)
  %129 = call ptr @LLVMGetNamedFunction(ptr %114, ptr %128)
  store ptr %129, ptr %llvm_method_val, align 8
  %130 = icmp eq ptr %129, null
  br i1 %130, label %if.entry57, label %ifend21

ifend21:                                          ; preds = %if.entry57, %else20, %get_class_prop_visibility.exit
  %131 = phi ptr [ null, %if.entry57 ], [ %129, %else20 ], [ %177, %get_class_prop_visibility.exit ]
  %132 = phi ptr [ %113, %if.entry57 ], [ %113, %else20 ], [ %2, %get_class_prop_visibility.exit ]
  %133 = load ptr, ptr %memberidx63, align 8
  %134 = load ptr, ptr %133, align 8
  %135 = load ptr, ptr %134, align 8
  %136 = load i64, ptr %prop_index329335, align 8
  call void %135(ptr nonnull %133, ptr nonnull %38, i64 %136)
  %memberidx65 = getelementptr inbounds %Class, ptr %132, i64 0, i32 5
  %137 = load ptr, ptr %memberidx65, align 8
  %138 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i212 = getelementptr inbounds %Array_ClassMethod_, ptr %137, i64 0, i32 1
  %139 = load ptr, ptr %memberidx.i212, align 8
  %ptridx.i213 = getelementptr inbounds ptr, ptr %139, i64 %138
  %140 = load ptr, ptr %ptridx.i213, align 8
  %memberidx67 = getelementptr inbounds %ClassMethod, ptr %140, i64 0, i32 7
  %141 = load i1, ptr %memberidx67, align 1
  br i1 %141, label %ifend70, label %if.entry68

for.body30:                                       ; preds = %Array_Type____sl__.exit, %Array_Type____sl__.exit223
  %storemerge136342 = phi ptr [ %153, %Array_Type____sl__.exit223 ], [ %101, %Array_Type____sl__.exit ]
  %142 = load i64, ptr %memberidx.i185, align 4
  %143 = load i64, ptr %memberidx1.i186, align 4
  %.not.i216 = icmp slt i64 %142, %143
  br i1 %.not.i216, label %for.body30.Array_Type____sl__.exit223_crit_edge, label %if.entry.i219

for.body30.Array_Type____sl__.exit223_crit_edge:  ; preds = %for.body30
  %.pre365 = load ptr, ptr %memberidx2.i187, align 8
  br label %Array_Type____sl__.exit223

if.entry.i219:                                    ; preds = %for.body30
  %144 = shl i64 %143, 1
  store i64 %144, ptr %memberidx1.i186, align 4
  %145 = load ptr, ptr %memberidx2.i187, align 8
  %146 = shl i64 %143, 4
  %147 = call ptr @realloc(ptr %145, i64 %146)
  store ptr %147, ptr %memberidx2.i187, align 8
  %.pre364 = load i64, ptr %memberidx.i185, align 4
  br label %Array_Type____sl__.exit223

Array_Type____sl__.exit223:                       ; preds = %for.body30.Array_Type____sl__.exit223_crit_edge, %if.entry.i219
  %148 = phi ptr [ %.pre365, %for.body30.Array_Type____sl__.exit223_crit_edge ], [ %147, %if.entry.i219 ]
  %149 = phi i64 [ %142, %for.body30.Array_Type____sl__.exit223_crit_edge ], [ %.pre364, %if.entry.i219 ]
  %150 = add i64 %149, 1
  store i64 %150, ptr %memberidx.i185, align 4
  %ptridx.i221 = getelementptr inbounds ptr, ptr %148, i64 %149
  store ptr %storemerge136342, ptr %ptridx.i221, align 8
  %151 = load ptr, ptr %97, align 8
  %152 = load ptr, ptr %151, align 8
  %153 = call ptr %152(ptr nonnull %97)
  %154 = load i1, ptr %memberidx.i.i200, align 1
  br i1 %154, label %for.end32, label %for.body30

for.end32:                                        ; preds = %Array_Type____sl__.exit223, %Array_Type____sl__.exit
  tail call void @free(ptr nonnull %97)
  store ptr %83, ptr %memberidx27, align 8
  %155 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %common.ret.op.i327336, i1 false)
  store ptr %155, ptr %llvm_method_type, align 8
  %156 = load ptr, ptr %memberidx36, align 8
  %157 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i224 = getelementptr inbounds %Array_ClassMethod_, ptr %156, i64 0, i32 1
  %158 = load ptr, ptr %memberidx.i224, align 8
  %ptridx.i225 = getelementptr inbounds ptr, ptr %158, i64 %157
  %159 = load ptr, ptr %ptridx.i225, align 8
  %memberidx38 = getelementptr inbounds %ClassMethod, ptr %159, i64 0, i32 7
  %160 = load i1, ptr %memberidx38, align 1
  br i1 %160, label %ifend41, label %if.entry39

if.entry39:                                       ; preds = %for.end32
  %161 = load ptr, ptr %memberidx42, align 8
  %162 = load ptr, ptr %161, align 8
  %memberidx43 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %162, i64 0, i32 5
  %163 = load ptr, ptr %memberidx43, align 8
  %164 = call ptr %163(ptr nonnull %161)
  %165 = load ptr, ptr %24, align 8
  %memberidx44 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %165, i64 0, i32 5
  %166 = load ptr, ptr %memberidx44, align 8
  %167 = call ptr %166(ptr nonnull %24)
  %168 = alloca ptr, align 8
  %169 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %168, ptr nonnull @149, ptr %164, ptr %167)
  %170 = load ptr, ptr %168, align 8
  %171 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %171, align 8
  %memberidx.i226 = getelementptr inbounds %string, ptr %171, i64 0, i32 1
  store ptr %170, ptr %memberidx.i226, align 8
  %memberidx1.i227 = getelementptr inbounds %string, ptr %171, i64 0, i32 2
  store i64 %169, ptr %memberidx1.i227, align 4
  %memberidx2.i228 = getelementptr inbounds %string, ptr %171, i64 0, i32 3
  store i64 %169, ptr %memberidx2.i228, align 4
  tail call void @free(ptr %164)
  tail call void @free(ptr %167)
  %172 = load ptr, ptr %0, align 8
  %173 = load ptr, ptr %171, align 8
  %memberidx1.i229 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %173, i64 0, i32 5
  %174 = load ptr, ptr %memberidx1.i229, align 8
  %175 = call ptr %174(ptr nonnull %171)
  %176 = call ptr @LLVMAddFunction(ptr %172, ptr %175, ptr %155)
  store ptr %176, ptr %llvm_method_val, align 8
  br label %ifend41

ifend41:                                          ; preds = %for.end32, %if.entry39
  %177 = phi ptr [ null, %for.end32 ], [ %176, %if.entry39 ]
  %178 = load ptr, ptr %memberidx12, align 8
  %179 = load ptr, ptr %memberidx.i145, align 8
  %memberidx.i.i.i231 = getelementptr inbounds %Program, ptr %178, i64 0, i32 1
  %180 = load ptr, ptr %memberidx.i.i.i231, align 8
  %181 = load i64, ptr %179, align 4
  %memberidx.i.i.i.i232 = getelementptr inbounds %Array_Module_, ptr %180, i64 0, i32 1
  %182 = load ptr, ptr %memberidx.i.i.i.i232, align 8
  %ptridx.i.i.i.i233 = getelementptr inbounds ptr, ptr %182, i64 %181
  %183 = load ptr, ptr %ptridx.i.i.i.i233, align 8
  %memberidx2.i.i.i234 = getelementptr inbounds %Module, ptr %183, i64 0, i32 4
  %184 = load ptr, ptr %memberidx2.i.i.i234, align 8
  %memberidx3.i.i.i235 = getelementptr inbounds %TypeId, ptr %179, i64 0, i32 2
  %185 = load i64, ptr %memberidx3.i.i.i235, align 4
  %memberidx.i5.i.i.i236 = getelementptr inbounds %Array_Class_, ptr %184, i64 0, i32 1
  %186 = load ptr, ptr %memberidx.i5.i.i.i236, align 8
  %ptridx.i6.i.i.i237 = getelementptr inbounds ptr, ptr %186, i64 %185
  %187 = load ptr, ptr %ptridx.i6.i.i.i237, align 8
  %188 = load i64, ptr %23, align 4
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %if.entry.i245, label %ifend.i251

if.entry.i245:                                    ; preds = %ifend41
  %memberidx1.i240 = getelementptr inbounds %Class, ptr %187, i64 0, i32 5
  %190 = load ptr, ptr %memberidx1.i240, align 8
  %191 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i12.i242 = getelementptr inbounds %Array_ClassMethod_, ptr %190, i64 0, i32 1
  %192 = load ptr, ptr %memberidx.i12.i242, align 8
  %ptridx.i13.i243 = getelementptr inbounds ptr, ptr %192, i64 %191
  %193 = load ptr, ptr %ptridx.i13.i243, align 8
  %memberidx3.i244 = getelementptr inbounds %ClassMethod, ptr %193, i64 0, i32 2
  br label %get_class_prop_visibility.exit

ifend.i251:                                       ; preds = %ifend41
  %memberidx4.i246 = getelementptr inbounds %Class, ptr %187, i64 0, i32 4
  %194 = load ptr, ptr %memberidx4.i246, align 8
  %195 = load i64, ptr %memberidx3.i, align 4
  %memberidx.i11.i248 = getelementptr inbounds %Array_ClassField_, ptr %194, i64 0, i32 1
  %196 = load ptr, ptr %memberidx.i11.i248, align 8
  %ptridx.i.i249 = getelementptr inbounds ptr, ptr %196, i64 %195
  %197 = load ptr, ptr %ptridx.i.i249, align 8
  %memberidx6.i250 = getelementptr inbounds %ClassField, ptr %197, i64 0, i32 2
  br label %get_class_prop_visibility.exit

get_class_prop_visibility.exit:                   ; preds = %if.entry.i245, %ifend.i251
  %common.ret.op.in.i238 = phi ptr [ %memberidx3.i244, %if.entry.i245 ], [ %memberidx6.i250, %ifend.i251 ]
  %common.ret.op.i239 = load i64, ptr %common.ret.op.in.i238, align 4
  %198 = icmp eq i64 %common.ret.op.i239, 1
  br i1 %198, label %if.entry46, label %ifend21

if.entry46:                                       ; preds = %get_class_prop_visibility.exit
  %199 = load ptr, ptr %memberidx49, align 8
  %200 = load ptr, ptr %199, align 8
  %201 = load ptr, ptr %200, align 8
  call void %201(ptr nonnull %199, ptr nonnull %38, ptr %177)
  br label %for.incr

if.entry57:                                       ; preds = %else20
  %202 = load ptr, ptr %memberidx53, align 8
  %203 = load ptr, ptr %202, align 8
  %memberidx61 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %203, i64 0, i32 5
  %204 = load ptr, ptr %memberidx61, align 8
  %205 = call ptr %204(ptr nonnull %202)
  %206 = load ptr, ptr %24, align 8
  %memberidx62 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %206, i64 0, i32 5
  %207 = load ptr, ptr %memberidx62, align 8
  %208 = call ptr %207(ptr nonnull %24)
  %209 = alloca ptr, align 8
  %210 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %209, ptr nonnull @318, ptr %205, ptr %208)
  %211 = load ptr, ptr %209, align 8
  %212 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %212, align 8
  %memberidx.i252 = getelementptr inbounds %string, ptr %212, i64 0, i32 1
  store ptr %211, ptr %memberidx.i252, align 8
  %memberidx1.i253 = getelementptr inbounds %string, ptr %212, i64 0, i32 2
  store i64 %210, ptr %memberidx1.i253, align 4
  %memberidx2.i254 = getelementptr inbounds %string, ptr %212, i64 0, i32 3
  store i64 %210, ptr %memberidx2.i254, align 4
  tail call void @free(ptr %205)
  tail call void @free(ptr %208)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %213 = load ptr, ptr %212, align 8
  %memberidx.i255 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %213, i64 0, i32 5
  %214 = load ptr, ptr %memberidx.i255, align 8
  %215 = call ptr %214(ptr nonnull %212)
  %216 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @270, ptr %215)
  %217 = load ptr, ptr %4, align 8
  %218 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %218, align 8
  %memberidx.i.i256 = getelementptr inbounds %string, ptr %218, i64 0, i32 1
  store ptr %217, ptr %memberidx.i.i256, align 8
  %memberidx1.i.i257 = getelementptr inbounds %string, ptr %218, i64 0, i32 2
  store i64 %216, ptr %memberidx1.i.i257, align 4
  %memberidx2.i.i258 = getelementptr inbounds %string, ptr %218, i64 0, i32 3
  store i64 %216, ptr %memberidx2.i.i258, align 4
  call void @free(ptr %215)
  %219 = load ptr, ptr %218, align 8
  %memberidx.i.i.i259 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %219, i64 0, i32 3
  %220 = load ptr, ptr %memberidx.i.i.i259, align 8
  %221 = call ptr %220(ptr nonnull %218)
  %222 = load i64, ptr %memberidx1.i.i257, align 4
  call void @write(i64 1, ptr %221, i64 %222)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  br label %ifend21

if.entry68:                                       ; preds = %ifend21
  %223 = load i64, ptr %memberidx.i, align 4
  %.not.i263343 = icmp sgt i64 %223, %136
  br i1 %.not.i263343, label %if.entry68.resize_value_array.exit_crit_edge, label %for.body.i268.lr.ph

if.entry68.resize_value_array.exit_crit_edge:     ; preds = %if.entry68
  %.pre367 = load ptr, ptr %memberidx2.i, align 8
  br label %resize_value_array.exit

for.body.i268.lr.ph:                              ; preds = %if.entry68
  %memberidx1.i.promoted = load i64, ptr %memberidx1.i, align 4
  %memberidx2.i.promoted = load ptr, ptr %memberidx2.i, align 8
  br label %for.body.i268

for.body.i268:                                    ; preds = %for.body.i268.lr.ph, %Array_LLVMValueRef____sl__.exit.i
  %224 = phi ptr [ %memberidx2.i.promoted, %for.body.i268.lr.ph ], [ %230, %Array_LLVMValueRef____sl__.exit.i ]
  %225 = phi i64 [ %memberidx1.i.promoted, %for.body.i268.lr.ph ], [ %231, %Array_LLVMValueRef____sl__.exit.i ]
  %226 = phi i64 [ %223, %for.body.i268.lr.ph ], [ %232, %Array_LLVMValueRef____sl__.exit.i ]
  %i.0.i262344 = phi i64 [ %223, %for.body.i268.lr.ph ], [ %233, %Array_LLVMValueRef____sl__.exit.i ]
  %.not.i.i267 = icmp slt i64 %226, %225
  br i1 %.not.i.i267, label %Array_LLVMValueRef____sl__.exit.i, label %if.entry.i.i271

if.entry.i.i271:                                  ; preds = %for.body.i268
  %227 = shl i64 %225, 1
  %228 = shl i64 %225, 4
  %229 = call ptr @realloc(ptr %224, i64 %228)
  br label %Array_LLVMValueRef____sl__.exit.i

Array_LLVMValueRef____sl__.exit.i:                ; preds = %if.entry.i.i271, %for.body.i268
  %230 = phi ptr [ %229, %if.entry.i.i271 ], [ %224, %for.body.i268 ]
  %231 = phi i64 [ %227, %if.entry.i.i271 ], [ %225, %for.body.i268 ]
  %232 = add i64 %226, 1
  %ptridx.i.i273 = getelementptr inbounds ptr, ptr %230, i64 %226
  store ptr null, ptr %ptridx.i.i273, align 8
  %233 = add i64 %i.0.i262344, 1
  %.not.i263 = icmp sgt i64 %233, %136
  br i1 %.not.i263, label %for.cond.i264.resize_value_array.exit_crit_edge, label %for.body.i268

for.cond.i264.resize_value_array.exit_crit_edge:  ; preds = %Array_LLVMValueRef____sl__.exit.i
  store i64 %232, ptr %memberidx.i, align 4
  store i64 %231, ptr %memberidx1.i, align 4
  store ptr %230, ptr %memberidx2.i, align 8
  %.pre366 = load ptr, ptr %llvm_method_val, align 8
  br label %resize_value_array.exit

resize_value_array.exit:                          ; preds = %if.entry68.resize_value_array.exit_crit_edge, %for.cond.i264.resize_value_array.exit_crit_edge
  %234 = phi ptr [ %230, %for.cond.i264.resize_value_array.exit_crit_edge ], [ %.pre367, %if.entry68.resize_value_array.exit_crit_edge ]
  %235 = phi ptr [ %.pre366, %for.cond.i264.resize_value_array.exit_crit_edge ], [ %131, %if.entry68.resize_value_array.exit_crit_edge ]
  %ptridx.i275 = getelementptr inbounds ptr, ptr %234, i64 %136
  store ptr %235, ptr %ptridx.i275, align 8
  br label %ifend70

ifend70:                                          ; preds = %ifend21, %resize_value_array.exit
  %236 = load i64, ptr %memberidx.i137, align 4
  %.not.i278348 = icmp sgt i64 %236, %136
  br i1 %.not.i278348, label %resize_type_array.exit290, label %for.body.i283.lr.ph

for.body.i283.lr.ph:                              ; preds = %ifend70
  %memberidx1.i138.promoted = load i64, ptr %memberidx1.i138, align 4
  %memberidx2.i139.promoted = load ptr, ptr %memberidx2.i139, align 8
  br label %for.body.i283

for.body.i283:                                    ; preds = %for.body.i283.lr.ph, %Array_LLVMTypeRef____sl__.exit.i289
  %237 = phi ptr [ %memberidx2.i139.promoted, %for.body.i283.lr.ph ], [ %243, %Array_LLVMTypeRef____sl__.exit.i289 ]
  %238 = phi i64 [ %memberidx1.i138.promoted, %for.body.i283.lr.ph ], [ %244, %Array_LLVMTypeRef____sl__.exit.i289 ]
  %239 = phi i64 [ %236, %for.body.i283.lr.ph ], [ %245, %Array_LLVMTypeRef____sl__.exit.i289 ]
  %i.0.i277349 = phi i64 [ %236, %for.body.i283.lr.ph ], [ %246, %Array_LLVMTypeRef____sl__.exit.i289 ]
  %.not.i.i282 = icmp slt i64 %239, %238
  br i1 %.not.i.i282, label %Array_LLVMTypeRef____sl__.exit.i289, label %if.entry.i.i286

if.entry.i.i286:                                  ; preds = %for.body.i283
  %240 = shl i64 %238, 1
  %241 = shl i64 %238, 4
  %242 = call ptr @realloc(ptr %237, i64 %241)
  br label %Array_LLVMTypeRef____sl__.exit.i289

Array_LLVMTypeRef____sl__.exit.i289:              ; preds = %if.entry.i.i286, %for.body.i283
  %243 = phi ptr [ %242, %if.entry.i.i286 ], [ %237, %for.body.i283 ]
  %244 = phi i64 [ %240, %if.entry.i.i286 ], [ %238, %for.body.i283 ]
  %245 = add i64 %239, 1
  %ptridx.i.i288 = getelementptr inbounds ptr, ptr %243, i64 %239
  store ptr null, ptr %ptridx.i.i288, align 8
  %246 = add i64 %i.0.i277349, 1
  %.not.i278 = icmp sgt i64 %246, %136
  br i1 %.not.i278, label %for.cond.i279.resize_type_array.exit290_crit_edge, label %for.body.i283

for.cond.i279.resize_type_array.exit290_crit_edge: ; preds = %Array_LLVMTypeRef____sl__.exit.i289
  store i64 %245, ptr %memberidx.i137, align 4
  store i64 %244, ptr %memberidx1.i138, align 4
  store ptr %243, ptr %memberidx2.i139, align 8
  br label %resize_type_array.exit290

resize_type_array.exit290:                        ; preds = %for.cond.i279.resize_type_array.exit290_crit_edge, %ifend70
  %247 = load ptr, ptr %llvm_method_type, align 8
  %248 = call ptr @LLVMPointerType(ptr %247, i64 0)
  %249 = load ptr, ptr %memberidx2.i139, align 8
  %ptridx.i292 = getelementptr inbounds ptr, ptr %249, i64 %136
  store ptr %248, ptr %ptridx.i292, align 8
  br label %for.incr

if.entry73:                                       ; preds = %for.end
  %250 = load ptr, ptr %memberidx2.i139, align 8
  %251 = call ptr @LLVMStructType(ptr %250, i64 %.pre368, i1 true)
  %memberidx78 = getelementptr inbounds %Class, ptr %2, i64 0, i32 10
  %252 = load i1, ptr %memberidx78, align 1
  br i1 %252, label %ifend81, label %if.entry79

if.entry79:                                       ; preds = %if.entry73
  %memberidx82 = getelementptr inbounds %CGClassType, ptr %1, i64 0, i32 4
  %253 = load ptr, ptr %0, align 8
  %memberidx84 = getelementptr inbounds %Class, ptr %2, i64 0, i32 1
  %254 = load ptr, ptr %memberidx84, align 8
  %255 = load ptr, ptr %254, align 8
  %memberidx85 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %255, i64 0, i32 5
  %256 = load ptr, ptr %memberidx85, align 8
  %257 = call ptr %256(ptr nonnull %254)
  %258 = alloca ptr, align 8
  %259 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %258, ptr nonnull @319, ptr %257)
  %260 = load ptr, ptr %258, align 8
  %261 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %261, align 8
  %memberidx.i293 = getelementptr inbounds %string, ptr %261, i64 0, i32 1
  store ptr %260, ptr %memberidx.i293, align 8
  %memberidx1.i294 = getelementptr inbounds %string, ptr %261, i64 0, i32 2
  store i64 %259, ptr %memberidx1.i294, align 4
  %memberidx2.i295 = getelementptr inbounds %string, ptr %261, i64 0, i32 3
  store i64 %259, ptr %memberidx2.i295, align 4
  tail call void @free(ptr %257)
  %262 = load ptr, ptr %261, align 8
  %memberidx86 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %262, i64 0, i32 5
  %263 = load ptr, ptr %memberidx86, align 8
  %264 = call ptr %263(ptr nonnull %261)
  %265 = call ptr @LLVMAddGlobal(ptr %253, ptr %251, ptr %264)
  store ptr %265, ptr %memberidx82, align 8
  %266 = load ptr, ptr %memberidx2.i, align 8
  %267 = load i64, ptr %memberidx.i, align 4
  %268 = call ptr @LLVMConstStruct(ptr %266, i64 %267, i1 true)
  %269 = load ptr, ptr %memberidx82, align 8
  call void @LLVMSetInitializer(ptr %269, ptr %268)
  br label %ifend81

ifend81:                                          ; preds = %if.entry73, %if.entry79
  %memberidx90 = getelementptr inbounds %CGClassType, ptr %1, i64 0, i32 5
  store ptr %251, ptr %memberidx90, align 8
  %270 = call ptr @LLVMPointerType(ptr %251, i64 0)
  %memberidx.i296 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i64 0, i32 2
  %271 = load i64, ptr %memberidx.i296, align 4
  %memberidx1.i297 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i64 0, i32 3
  %272 = load i64, ptr %memberidx1.i297, align 4
  %.not.i298 = icmp slt i64 %271, %272
  br i1 %.not.i298, label %ifend81.Array_LLVMTypeRef____sl__.exit_crit_edge, label %if.entry.i301

ifend81.Array_LLVMTypeRef____sl__.exit_crit_edge: ; preds = %ifend81
  %memberidx4.i302.phi.trans.insert = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i64 0, i32 1
  %.pre370 = load ptr, ptr %memberidx4.i302.phi.trans.insert, align 8
  br label %Array_LLVMTypeRef____sl__.exit

if.entry.i301:                                    ; preds = %ifend81
  %273 = shl i64 %272, 1
  store i64 %273, ptr %memberidx1.i297, align 4
  %memberidx2.i.i300 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i64 0, i32 1
  %274 = load ptr, ptr %memberidx2.i.i300, align 8
  %275 = shl i64 %272, 4
  %276 = call ptr @realloc(ptr %274, i64 %275)
  store ptr %276, ptr %memberidx2.i.i300, align 8
  %.pre369 = load i64, ptr %memberidx.i296, align 4
  br label %Array_LLVMTypeRef____sl__.exit

Array_LLVMTypeRef____sl__.exit:                   ; preds = %ifend81.Array_LLVMTypeRef____sl__.exit_crit_edge, %if.entry.i301
  %277 = phi ptr [ %.pre370, %ifend81.Array_LLVMTypeRef____sl__.exit_crit_edge ], [ %276, %if.entry.i301 ]
  %278 = phi i64 [ %271, %ifend81.Array_LLVMTypeRef____sl__.exit_crit_edge ], [ %.pre369, %if.entry.i301 ]
  %279 = add i64 %278, 1
  store i64 %279, ptr %memberidx.i296, align 4
  %ptridx.i303 = getelementptr inbounds ptr, ptr %277, i64 %278
  store ptr %270, ptr %ptridx.i303, align 8
  br label %for.entry91

for.entry91:                                      ; preds = %for.end.thread, %Array_LLVMTypeRef____sl__.exit, %for.end
  %280 = call ptr @malloc(i32 33)
  %281 = load ptr, ptr %memberidx2.i142, align 8
  %282 = load i64, ptr %memberidx.i140, align 4
  store ptr @VTableArrayIterator_LLVMTypeRef_, ptr %280, align 8
  %memberidx.i.i307 = getelementptr inbounds %Iterator_LLVMTypeRef_, ptr %280, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i307, align 1
  %memberidx1.i.i308 = getelementptr inbounds %ArrayIterator_LLVMTypeRef_, ptr %280, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i308, align 4
  %memberidx2.i.i309 = getelementptr inbounds %ArrayIterator_LLVMTypeRef_, ptr %280, i64 0, i32 4
  store ptr %281, ptr %memberidx2.i.i309, align 8
  %memberidx3.i.i310 = getelementptr inbounds %ArrayIterator_LLVMTypeRef_, ptr %280, i64 0, i32 3
  store i64 %282, ptr %memberidx3.i.i310, align 4
  %283 = load ptr, ptr @VTableArrayIterator_LLVMTypeRef_, align 8
  %284 = call ptr %283(ptr nonnull %280)
  %285 = load i1, ptr %memberidx.i.i307, align 1
  br i1 %285, label %for.end98, label %for.body96.lr.ph

for.body96.lr.ph:                                 ; preds = %for.entry91
  %memberidx.i311 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i64 0, i32 2
  %memberidx1.i312 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i64 0, i32 3
  %memberidx2.i.i315 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %3, i64 0, i32 1
  br label %for.body96

for.body96:                                       ; preds = %for.body96.lr.ph, %Array_LLVMTypeRef____sl__.exit320
  %storemerge337 = phi ptr [ %284, %for.body96.lr.ph ], [ %297, %Array_LLVMTypeRef____sl__.exit320 ]
  %286 = load i64, ptr %memberidx.i311, align 4
  %287 = load i64, ptr %memberidx1.i312, align 4
  %.not.i313 = icmp slt i64 %286, %287
  br i1 %.not.i313, label %for.body96.Array_LLVMTypeRef____sl__.exit320_crit_edge, label %if.entry.i316

for.body96.Array_LLVMTypeRef____sl__.exit320_crit_edge: ; preds = %for.body96
  %.pre372 = load ptr, ptr %memberidx2.i.i315, align 8
  br label %Array_LLVMTypeRef____sl__.exit320

if.entry.i316:                                    ; preds = %for.body96
  %288 = shl i64 %287, 1
  store i64 %288, ptr %memberidx1.i312, align 4
  %289 = load ptr, ptr %memberidx2.i.i315, align 8
  %290 = shl i64 %287, 4
  %291 = call ptr @realloc(ptr %289, i64 %290)
  store ptr %291, ptr %memberidx2.i.i315, align 8
  %.pre371 = load i64, ptr %memberidx.i311, align 4
  br label %Array_LLVMTypeRef____sl__.exit320

Array_LLVMTypeRef____sl__.exit320:                ; preds = %for.body96.Array_LLVMTypeRef____sl__.exit320_crit_edge, %if.entry.i316
  %292 = phi ptr [ %.pre372, %for.body96.Array_LLVMTypeRef____sl__.exit320_crit_edge ], [ %291, %if.entry.i316 ]
  %293 = phi i64 [ %286, %for.body96.Array_LLVMTypeRef____sl__.exit320_crit_edge ], [ %.pre371, %if.entry.i316 ]
  %294 = add i64 %293, 1
  store i64 %294, ptr %memberidx.i311, align 4
  %ptridx.i318 = getelementptr inbounds ptr, ptr %292, i64 %293
  store ptr %storemerge337, ptr %ptridx.i318, align 8
  %295 = load ptr, ptr %280, align 8
  %296 = load ptr, ptr %295, align 8
  %297 = call ptr %296(ptr nonnull %280)
  %298 = load i1, ptr %memberidx.i.i307, align 1
  br i1 %298, label %for.end98, label %for.body96

for.end98:                                        ; preds = %Array_LLVMTypeRef____sl__.exit320, %for.entry91
  tail call void @free(ptr nonnull %280)
  ret void
}

define internal fastcc ptr @CodeGen_get_or_codegen_var(ptr nocapture %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %memberidx.i = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 6
  %7 = load ptr, ptr %memberidx.i, align 8
  %8 = load ptr, ptr %7, align 8
  %memberidx1.i = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %8, i64 0, i32 1
  %9 = load ptr, ptr %memberidx1.i, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %memberidx.i.i = getelementptr inbounds %VarId, ptr %1, i64 0, i32 1
  %10 = load i64, ptr %memberidx.i.i, align 4
  %11 = load i64, ptr %1, align 4
  %memberidx2.i.i = getelementptr inbounds %VarId, ptr %1, i64 0, i32 2
  %12 = load i64, ptr %memberidx2.i.i, align 4
  %13 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %6, ptr nonnull @276, i64 %10, i64 %11, i64 %12)
  %14 = load ptr, ptr %6, align 8
  %15 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %15, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %15, i64 0, i32 1
  store ptr %14, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %15, i64 0, i32 2
  store i64 %13, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %15, i64 0, i32 3
  store i64 %13, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %16 = call ptr %9(ptr nonnull %7, ptr nonnull %15)
  %.not = icmp eq ptr %16, null
  br i1 %.not, label %ifend, label %common.ret

common.ret:                                       ; preds = %2, %for.end48, %ifend20, %if.entry53, %if.entry33, %if.entry13
  %common.ret.op = phi ptr [ %46, %if.entry13 ], [ %73, %if.entry33 ], [ %98, %if.entry53 ], [ null, %ifend20 ], [ null, %for.end48 ], [ %16, %2 ]
  ret ptr %common.ret.op

ifend:                                            ; preds = %2
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %17 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Program, ptr %17, i64 0, i32 1
  %18 = load ptr, ptr %memberidx1, align 8
  %19 = load i64, ptr %memberidx.i.i, align 4
  %memberidx.i77 = getelementptr inbounds %Array_Module_, ptr %18, i64 0, i32 1
  %20 = load ptr, ptr %memberidx.i77, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %20, i64 %19
  %21 = load ptr, ptr %ptridx.i, align 8
  %22 = load i64, ptr %1, align 4
  %23 = icmp eq i64 %22, 2
  br i1 %23, label %for.entry, label %ifend6

ifend6:                                           ; preds = %ifend, %for.end
  %24 = phi i64 [ %22, %ifend ], [ %.pr, %for.end ]
  %25 = icmp eq i64 %24, 1
  br i1 %25, label %for.entry21, label %ifend20

for.entry:                                        ; preds = %ifend
  %memberidx7 = getelementptr inbounds %Module, ptr %21, i64 0, i32 8
  %26 = load ptr, ptr %memberidx7, align 8
  %27 = call ptr @malloc(i32 33)
  %memberidx.i78 = getelementptr inbounds %Array_ConstDeclaration_, ptr %26, i64 0, i32 1
  %28 = load ptr, ptr %memberidx.i78, align 8
  %memberidx1.i79 = getelementptr inbounds %Array_ConstDeclaration_, ptr %26, i64 0, i32 2
  %29 = load i64, ptr %memberidx1.i79, align 4
  store ptr @VTableArrayIterator_ConstDeclaration_, ptr %27, align 8
  %memberidx.i.i80 = getelementptr inbounds %Iterator_ConstDeclaration_, ptr %27, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i80, align 1
  %memberidx1.i.i = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %27, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i81 = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %27, i64 0, i32 4
  store ptr %28, ptr %memberidx2.i.i81, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_ConstDeclaration_, ptr %27, i64 0, i32 3
  store i64 %29, ptr %memberidx3.i.i, align 4
  %30 = load ptr, ptr @VTableArrayIterator_ConstDeclaration_, align 8
  %31 = call ptr %30(ptr nonnull %27)
  %32 = load i1, ptr %memberidx.i.i80, align 1
  br i1 %32, label %for.end, label %for.body

for.body:                                         ; preds = %for.entry, %ifend15
  %storemerge76120 = phi ptr [ %49, %ifend15 ], [ %31, %for.entry ]
  %memberidx10 = getelementptr inbounds %ConstDeclaration, ptr %storemerge76120, i64 0, i32 2
  %33 = load ptr, ptr %memberidx10, align 8
  %memberidx11 = getelementptr inbounds %VarId, ptr %33, i64 0, i32 2
  %34 = load i64, ptr %memberidx11, align 4
  %35 = load i64, ptr %memberidx2.i.i, align 4
  %36 = icmp eq i64 %34, %35
  br i1 %36, label %if.entry13, label %ifend15

for.end:                                          ; preds = %ifend15, %for.entry
  tail call void @free(ptr nonnull %27)
  %.pr = load i64, ptr %1, align 4
  br label %ifend6

if.entry13:                                       ; preds = %for.body
  call fastcc void @CodeGen_codegen_const_declaration(ptr %0, ptr null, ptr nonnull %storemerge76120)
  %37 = load ptr, ptr %memberidx.i, align 8
  %38 = load ptr, ptr %37, align 8
  %memberidx1.i83 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %38, i64 0, i32 1
  %39 = load ptr, ptr %memberidx1.i83, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %40 = load i64, ptr %memberidx.i.i, align 4
  %41 = load i64, ptr %1, align 4
  %42 = load i64, ptr %memberidx2.i.i, align 4
  %43 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @276, i64 %40, i64 %41, i64 %42)
  %44 = load ptr, ptr %5, align 8
  %45 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %45, align 8
  %memberidx.i.i.i86 = getelementptr inbounds %string, ptr %45, i64 0, i32 1
  store ptr %44, ptr %memberidx.i.i.i86, align 8
  %memberidx1.i.i.i87 = getelementptr inbounds %string, ptr %45, i64 0, i32 2
  store i64 %43, ptr %memberidx1.i.i.i87, align 4
  %memberidx2.i.i.i88 = getelementptr inbounds %string, ptr %45, i64 0, i32 3
  store i64 %43, ptr %memberidx2.i.i.i88, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  %46 = call ptr %39(ptr nonnull %37, ptr nonnull %45)
  br label %common.ret

ifend15:                                          ; preds = %for.body
  %47 = load ptr, ptr %27, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call ptr %48(ptr nonnull %27)
  %50 = load i1, ptr %memberidx.i.i80, align 1
  br i1 %50, label %for.end, label %for.body

ifend20:                                          ; preds = %ifend6, %for.end28
  %51 = phi i64 [ %24, %ifend6 ], [ %.pre, %for.end28 ]
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %for.entry41, label %common.ret

for.entry21:                                      ; preds = %ifend6
  %memberidx23 = getelementptr inbounds %Module, ptr %21, i64 0, i32 9
  %53 = load ptr, ptr %memberidx23, align 8
  %54 = call ptr @malloc(i32 33)
  %memberidx.i89 = getelementptr inbounds %Array_VarDeclaration_, ptr %53, i64 0, i32 1
  %55 = load ptr, ptr %memberidx.i89, align 8
  %memberidx1.i90 = getelementptr inbounds %Array_VarDeclaration_, ptr %53, i64 0, i32 2
  %56 = load i64, ptr %memberidx1.i90, align 4
  store ptr @VTableArrayIterator_VarDeclaration_, ptr %54, align 8
  %memberidx.i.i91 = getelementptr inbounds %Iterator_VarDeclaration_, ptr %54, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i91, align 1
  %memberidx1.i.i92 = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %54, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i92, align 4
  %memberidx2.i.i93 = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %54, i64 0, i32 4
  store ptr %55, ptr %memberidx2.i.i93, align 8
  %memberidx3.i.i94 = getelementptr inbounds %ArrayIterator_VarDeclaration_, ptr %54, i64 0, i32 3
  store i64 %56, ptr %memberidx3.i.i94, align 4
  %57 = load ptr, ptr @VTableArrayIterator_VarDeclaration_, align 8
  %58 = call ptr %57(ptr nonnull %54)
  %59 = load i1, ptr %memberidx.i.i91, align 1
  br i1 %59, label %for.end28, label %for.body26

for.body26:                                       ; preds = %for.entry21, %ifend35
  %storemerge75119 = phi ptr [ %76, %ifend35 ], [ %58, %for.entry21 ]
  %memberidx30 = getelementptr inbounds %VarDeclaration, ptr %storemerge75119, i64 0, i32 2
  %60 = load ptr, ptr %memberidx30, align 8
  %memberidx31 = getelementptr inbounds %VarId, ptr %60, i64 0, i32 2
  %61 = load i64, ptr %memberidx31, align 4
  %62 = load i64, ptr %memberidx2.i.i, align 4
  %63 = icmp eq i64 %61, %62
  br i1 %63, label %if.entry33, label %ifend35

for.end28:                                        ; preds = %ifend35, %for.entry21
  tail call void @free(ptr nonnull %54)
  %.pre = load i64, ptr %1, align 4
  br label %ifend20

if.entry33:                                       ; preds = %for.body26
  call fastcc void @CodeGen_codegen_var_declaration(ptr %0, ptr null, ptr nonnull %storemerge75119)
  %64 = load ptr, ptr %memberidx.i, align 8
  %65 = load ptr, ptr %64, align 8
  %memberidx1.i96 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %65, i64 0, i32 1
  %66 = load ptr, ptr %memberidx1.i96, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %67 = load i64, ptr %memberidx.i.i, align 4
  %68 = load i64, ptr %1, align 4
  %69 = load i64, ptr %memberidx2.i.i, align 4
  %70 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @276, i64 %67, i64 %68, i64 %69)
  %71 = load ptr, ptr %4, align 8
  %72 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %72, align 8
  %memberidx.i.i.i99 = getelementptr inbounds %string, ptr %72, i64 0, i32 1
  store ptr %71, ptr %memberidx.i.i.i99, align 8
  %memberidx1.i.i.i100 = getelementptr inbounds %string, ptr %72, i64 0, i32 2
  store i64 %70, ptr %memberidx1.i.i.i100, align 4
  %memberidx2.i.i.i101 = getelementptr inbounds %string, ptr %72, i64 0, i32 3
  store i64 %70, ptr %memberidx2.i.i.i101, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %73 = call ptr %66(ptr nonnull %64, ptr nonnull %72)
  br label %common.ret

ifend35:                                          ; preds = %for.body26
  %74 = load ptr, ptr %54, align 8
  %75 = load ptr, ptr %74, align 8
  %76 = call ptr %75(ptr nonnull %54)
  %77 = load i1, ptr %memberidx.i.i91, align 1
  br i1 %77, label %for.end28, label %for.body26

for.entry41:                                      ; preds = %ifend20
  %memberidx43 = getelementptr inbounds %Module, ptr %21, i64 0, i32 5
  %78 = load ptr, ptr %memberidx43, align 8
  %79 = call ptr @malloc(i32 33)
  %memberidx.i102 = getelementptr inbounds %Array_Function_, ptr %78, i64 0, i32 1
  %80 = load ptr, ptr %memberidx.i102, align 8
  %memberidx1.i103 = getelementptr inbounds %Array_Function_, ptr %78, i64 0, i32 2
  %81 = load i64, ptr %memberidx1.i103, align 4
  store ptr @VTableArrayIterator_Function_, ptr %79, align 8
  %memberidx.i.i104 = getelementptr inbounds %Iterator_Function_, ptr %79, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i104, align 1
  %memberidx1.i.i105 = getelementptr inbounds %ArrayIterator_Function_, ptr %79, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i105, align 4
  %memberidx2.i.i106 = getelementptr inbounds %ArrayIterator_Function_, ptr %79, i64 0, i32 4
  store ptr %80, ptr %memberidx2.i.i106, align 8
  %memberidx3.i.i107 = getelementptr inbounds %ArrayIterator_Function_, ptr %79, i64 0, i32 3
  store i64 %81, ptr %memberidx3.i.i107, align 4
  %82 = load ptr, ptr @VTableArrayIterator_Function_, align 8
  %83 = call ptr %82(ptr nonnull %79)
  %84 = load i1, ptr %memberidx.i.i104, align 1
  br i1 %84, label %for.end48, label %for.body46

for.body46:                                       ; preds = %for.entry41, %ifend55
  %storemerge118 = phi ptr [ %101, %ifend55 ], [ %83, %for.entry41 ]
  %85 = load ptr, ptr %storemerge118, align 8
  %memberidx51 = getelementptr inbounds %VarId, ptr %85, i64 0, i32 2
  %86 = load i64, ptr %memberidx51, align 4
  %87 = load i64, ptr %memberidx2.i.i, align 4
  %88 = icmp eq i64 %86, %87
  br i1 %88, label %if.entry53, label %ifend55

for.end48:                                        ; preds = %ifend55, %for.entry41
  tail call void @free(ptr nonnull %79)
  br label %common.ret

if.entry53:                                       ; preds = %for.body46
  call fastcc void @CodeGen_codegen_function(ptr %0, ptr nonnull %storemerge118)
  %89 = load ptr, ptr %memberidx.i, align 8
  %90 = load ptr, ptr %89, align 8
  %memberidx1.i109 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %90, i64 0, i32 1
  %91 = load ptr, ptr %memberidx1.i109, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %92 = load i64, ptr %memberidx.i.i, align 4
  %93 = load i64, ptr %1, align 4
  %94 = load i64, ptr %memberidx2.i.i, align 4
  %95 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @276, i64 %92, i64 %93, i64 %94)
  %96 = load ptr, ptr %3, align 8
  %97 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %97, align 8
  %memberidx.i.i.i112 = getelementptr inbounds %string, ptr %97, i64 0, i32 1
  store ptr %96, ptr %memberidx.i.i.i112, align 8
  %memberidx1.i.i.i113 = getelementptr inbounds %string, ptr %97, i64 0, i32 2
  store i64 %95, ptr %memberidx1.i.i.i113, align 4
  %memberidx2.i.i.i114 = getelementptr inbounds %string, ptr %97, i64 0, i32 3
  store i64 %95, ptr %memberidx2.i.i.i114, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %98 = call ptr %91(ptr nonnull %89, ptr nonnull %97)
  br label %common.ret

ifend55:                                          ; preds = %for.body46
  %99 = load ptr, ptr %79, align 8
  %100 = load ptr, ptr %99, align 8
  %101 = call ptr %100(ptr nonnull %79)
  %102 = load i1, ptr %memberidx.i.i104, align 1
  br i1 %102, label %for.end48, label %for.body46
}

define internal fastcc void @CodeGen_declare_enum(ptr nocapture %0, ptr nocapture readonly %1) unnamed_addr {
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = tail call ptr @malloc(i32 16)
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTableMap_string_LLVMValueRef_, ptr %7, align 8
  %memberidx.i.i38 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %7, i64 0, i32 1
  %8 = tail call ptr @malloc(i32 2048)
  store ptr %8, ptr %memberidx.i.i38, align 8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %2, %for.body.i.i
  %i.0.i.i43 = phi i64 [ 0, %2 ], [ %11, %for.body.i.i ]
  %9 = load ptr, ptr %memberidx.i.i38, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %9, i64 %i.0.i.i43
  %10 = tail call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_LLVMValueRef_, ptr %10, align 8
  %memberidx.i.i.i39 = getelementptr inbounds %Bucket_string_LLVMValueRef_, ptr %10, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i.i39, align 1
  store ptr %10, ptr %ptridx.i.i, align 8
  %11 = add nuw nsw i64 %i.0.i.i43, 1
  %12 = icmp ult i64 %i.0.i.i43, 255
  br i1 %12, label %for.body.i.i, label %CGEnumType_constructor.exit

CGEnumType_constructor.exit:                      ; preds = %for.body.i.i
  %memberidx.i37 = getelementptr inbounds %CGEnumType, ptr %6, i64 0, i32 1
  %memberidx2.i.i40 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %7, i64 0, i32 3
  store i64 256, ptr %memberidx2.i.i40, align 4
  %memberidx3.i.i41 = getelementptr inbounds %Map_string_LLVMValueRef_, ptr %7, i64 0, i32 2
  store i64 0, ptr %memberidx3.i.i41, align 4
  store ptr %7, ptr %memberidx.i37, align 8
  %memberidx = getelementptr inbounds %Enum, ptr %1, i64 0, i32 2
  %13 = load ptr, ptr %memberidx, align 8
  %memberidx1 = getelementptr inbounds %Array_EnumField_, ptr %13, i64 0, i32 2
  %14 = load i64, ptr %memberidx1, align 4
  %15 = icmp sgt i64 %14, 0
  br i1 %15, label %if.entry, label %else

if.entry:                                         ; preds = %CGEnumType_constructor.exit
  %memberidx.i36 = getelementptr inbounds %Array_EnumField_, ptr %13, i64 0, i32 1
  %16 = load ptr, ptr %memberidx.i36, align 8
  %17 = load ptr, ptr %16, align 8
  %memberidx4 = getelementptr inbounds %EnumField, ptr %17, i64 0, i32 2
  %18 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Expression, ptr %18, i64 0, i32 3
  %19 = load ptr, ptr %memberidx5, align 8
  %20 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %19, i1 true)
  br label %for.entry

else:                                             ; preds = %CGEnumType_constructor.exit
  %21 = tail call ptr @LLVMIntType(i64 64)
  br label %for.entry

for.entry:                                        ; preds = %if.entry, %else
  %storemerge = phi ptr [ %21, %else ], [ %20, %if.entry ]
  store ptr %storemerge, ptr %6, align 8
  %22 = load ptr, ptr %memberidx, align 8
  %23 = tail call ptr @malloc(i32 33)
  %memberidx.i31 = getelementptr inbounds %Array_EnumField_, ptr %22, i64 0, i32 1
  %24 = load ptr, ptr %memberidx.i31, align 8
  %memberidx1.i32 = getelementptr inbounds %Array_EnumField_, ptr %22, i64 0, i32 2
  %25 = load i64, ptr %memberidx1.i32, align 4
  store ptr @VTableArrayIterator_EnumField_, ptr %23, align 8
  %memberidx.i.i33 = getelementptr inbounds %Iterator_EnumField_, ptr %23, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i33, align 1
  %memberidx1.i.i34 = getelementptr inbounds %ArrayIterator_EnumField_, ptr %23, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i34, align 4
  %memberidx2.i.i35 = getelementptr inbounds %ArrayIterator_EnumField_, ptr %23, i64 0, i32 4
  store ptr %24, ptr %memberidx2.i.i35, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_EnumField_, ptr %23, i64 0, i32 3
  store i64 %25, ptr %memberidx3.i.i, align 4
  %26 = load ptr, ptr @VTableArrayIterator_EnumField_, align 8
  %27 = tail call ptr %26(ptr nonnull %23)
  %28 = load i1, ptr %memberidx.i.i33, align 1
  br i1 %28, label %for.end, label %for.body

for.body:                                         ; preds = %for.entry, %for.body
  %storemerge2442 = phi ptr [ %51, %for.body ], [ %27, %for.entry ]
  %29 = load ptr, ptr %storemerge2442, align 8
  %30 = load ptr, ptr %memberidx.i37, align 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %31, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %memberidx.i25 = getelementptr inbounds %PropId, ptr %29, i64 0, i32 1
  %33 = load ptr, ptr %memberidx.i25, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %34 = load i64, ptr %33, align 4
  %memberidx1.i.i26 = getelementptr inbounds %TypeId, ptr %33, i64 0, i32 1
  %35 = load i64, ptr %memberidx1.i.i26, align 4
  %memberidx2.i.i27 = getelementptr inbounds %TypeId, ptr %33, i64 0, i32 2
  %36 = load i64, ptr %memberidx2.i.i27, align 4
  %37 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @276, i64 %34, i64 %35, i64 %36)
  %38 = load ptr, ptr %3, align 8
  %39 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %39, align 8
  %memberidx.i.i.i28 = getelementptr inbounds %string, ptr %39, i64 0, i32 1
  store ptr %38, ptr %memberidx.i.i.i28, align 8
  %memberidx1.i.i.i29 = getelementptr inbounds %string, ptr %39, i64 0, i32 2
  store i64 %37, ptr %memberidx1.i.i.i29, align 4
  %memberidx2.i.i.i30 = getelementptr inbounds %string, ptr %39, i64 0, i32 3
  store i64 %37, ptr %memberidx2.i.i.i30, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %40 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %41 = call ptr %40(ptr nonnull %39)
  %42 = load i64, ptr %29, align 4
  %memberidx3.i = getelementptr inbounds %PropId, ptr %29, i64 0, i32 2
  %43 = load i64, ptr %memberidx3.i, align 4
  %44 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @291, ptr %41, i64 %42, i64 %43)
  %45 = load ptr, ptr %4, align 8
  %46 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %46, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %46, i64 0, i32 1
  store ptr %45, ptr %memberidx.i.i, align 8
  %memberidx1.i6.i = getelementptr inbounds %string, ptr %46, i64 0, i32 2
  store i64 %44, ptr %memberidx1.i6.i, align 4
  %memberidx2.i7.i = getelementptr inbounds %string, ptr %46, i64 0, i32 3
  store i64 %44, ptr %memberidx2.i7.i, align 4
  call void @free(ptr %41)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %memberidx13 = getelementptr inbounds %EnumField, ptr %storemerge2442, i64 0, i32 2
  %47 = load ptr, ptr %memberidx13, align 8
  %48 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr null, ptr %47)
  call void %32(ptr nonnull %30, ptr nonnull %46, ptr %48)
  %49 = load ptr, ptr %23, align 8
  %50 = load ptr, ptr %49, align 8
  %51 = call ptr %50(ptr nonnull %23)
  %52 = load i1, ptr %memberidx.i.i33, align 1
  br i1 %52, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %for.entry
  tail call void @free(ptr nonnull %23)
  %53 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 9
  %54 = load ptr, ptr %memberidx.i, align 8
  %55 = load ptr, ptr %54, align 8
  %56 = load ptr, ptr %55, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %57 = load i64, ptr %53, align 4
  %memberidx1.i.i = getelementptr inbounds %TypeId, ptr %53, i64 0, i32 1
  %58 = load i64, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %TypeId, ptr %53, i64 0, i32 2
  %59 = load i64, ptr %memberidx2.i.i, align 4
  %60 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @276, i64 %57, i64 %58, i64 %59)
  %61 = load ptr, ptr %5, align 8
  %62 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %62, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %62, i64 0, i32 1
  store ptr %61, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %62, i64 0, i32 2
  store i64 %60, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %62, i64 0, i32 3
  store i64 %60, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  call void %56(ptr nonnull %54, ptr nonnull %62, ptr nonnull %6)
  ret void
}

define internal fastcc void @CodeGen_build_constructor_call(ptr nocapture %0, ptr %1, ptr nocapture readonly %2, ptr nocapture readonly %3) unnamed_addr {
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %8 = load i64, ptr %2, align 4
  %cond36 = icmp eq i64 %8, 20
  br i1 %cond36, label %if.entry.i, label %get_class_from_type.exit

if.entry.i:                                       ; preds = %4, %if.entry.i
  %.tr11.i37 = phi ptr [ %9, %if.entry.i ], [ %2, %4 ]
  %memberidx1.i28 = getelementptr inbounds %GenericType, ptr %.tr11.i37, i64 0, i32 3
  %9 = load ptr, ptr %memberidx1.i28, align 8
  %10 = load i64, ptr %9, align 4
  %cond = icmp eq i64 %10, 20
  br i1 %cond, label %if.entry.i, label %get_class_from_type.exit

get_class_from_type.exit:                         ; preds = %if.entry.i, %4
  %memberidx1 = getelementptr inbounds %ObjectType, ptr %2, i64 0, i32 1
  %11 = load ptr, ptr %memberidx1, align 8
  %memberidx.i17 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 8
  %12 = load ptr, ptr %memberidx.i17, align 8
  %13 = load ptr, ptr %12, align 8
  %memberidx1.i = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %13, i64 0, i32 1
  %14 = load ptr, ptr %memberidx1.i, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %15 = load i64, ptr %11, align 4
  %memberidx1.i.i18 = getelementptr inbounds %TypeId, ptr %11, i64 0, i32 1
  %16 = load i64, ptr %memberidx1.i.i18, align 4
  %memberidx2.i.i19 = getelementptr inbounds %TypeId, ptr %11, i64 0, i32 2
  %17 = load i64, ptr %memberidx2.i.i19, align 4
  %18 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %6, ptr nonnull @276, i64 %15, i64 %16, i64 %17)
  %19 = load ptr, ptr %6, align 8
  %20 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %20, align 8
  %memberidx.i.i.i20 = getelementptr inbounds %string, ptr %20, i64 0, i32 1
  store ptr %19, ptr %memberidx.i.i.i20, align 8
  %memberidx1.i.i.i21 = getelementptr inbounds %string, ptr %20, i64 0, i32 2
  store i64 %18, ptr %memberidx1.i.i.i21, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %20, i64 0, i32 3
  store i64 %18, ptr %memberidx2.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %21 = call ptr %14(ptr nonnull %12, ptr nonnull %20)
  %.not.i = icmp eq ptr %21, null
  br i1 %.not.i, label %ifend.i, label %CodeGen_get_or_codegen_class_from_typeid.exit

ifend.i:                                          ; preds = %get_class_from_type.exit
  %22 = load ptr, ptr %memberidx, align 8
  %memberidx.i.i14 = getelementptr inbounds %Program, ptr %22, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i.i14, align 8
  %24 = load i64, ptr %11, align 4
  %memberidx.i.i.i15 = getelementptr inbounds %Array_Module_, ptr %23, i64 0, i32 1
  %25 = load ptr, ptr %memberidx.i.i.i15, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %25, i64 %24
  %26 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i16 = getelementptr inbounds %Module, ptr %26, i64 0, i32 4
  %27 = load ptr, ptr %memberidx2.i.i16, align 8
  %28 = load i64, ptr %memberidx2.i.i19, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %27, i64 0, i32 1
  %29 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %29, i64 %28
  %30 = load ptr, ptr %ptridx.i6.i.i, align 8
  call fastcc void @CodeGen_declare_class(ptr nonnull %0, ptr %30)
  call fastcc void @CodeGen_codegen_class(ptr nonnull %0, ptr %30)
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %memberidx.i17, align 8
  %33 = load ptr, ptr %32, align 8
  %memberidx1.i.i23 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %33, i64 0, i32 1
  %34 = load ptr, ptr %memberidx1.i.i23, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %35 = load i64, ptr %31, align 4
  %memberidx1.i.i.i24 = getelementptr inbounds %TypeId, ptr %31, i64 0, i32 1
  %36 = load i64, ptr %memberidx1.i.i.i24, align 4
  %memberidx2.i.i.i25 = getelementptr inbounds %TypeId, ptr %31, i64 0, i32 2
  %37 = load i64, ptr %memberidx2.i.i.i25, align 4
  %38 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @276, i64 %35, i64 %36, i64 %37)
  %39 = load ptr, ptr %5, align 8
  %40 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %40, align 8
  %memberidx.i.i.i.i = getelementptr inbounds %string, ptr %40, i64 0, i32 1
  store ptr %39, ptr %memberidx.i.i.i.i, align 8
  %memberidx1.i.i.i.i = getelementptr inbounds %string, ptr %40, i64 0, i32 2
  store i64 %38, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %string, ptr %40, i64 0, i32 3
  store i64 %38, ptr %memberidx2.i.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  %41 = call ptr %34(ptr nonnull %32, ptr nonnull %40)
  br label %CodeGen_get_or_codegen_class_from_typeid.exit

CodeGen_get_or_codegen_class_from_typeid.exit:    ; preds = %get_class_from_type.exit, %ifend.i
  %common.ret.op.i = phi ptr [ %41, %ifend.i ], [ %21, %get_class_from_type.exit ]
  %memberidx2 = getelementptr inbounds %CGClassType, ptr %common.ret.op.i, i64 0, i32 6
  %42 = load ptr, ptr %memberidx2, align 8
  %.not = icmp eq ptr %42, null
  br i1 %.not, label %else, label %if.entry

if.entry:                                         ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit
  %43 = call ptr @LLVM_GetFunctionType(ptr nonnull %42)
  %memberidx3 = getelementptr inbounds %Array_LLVMValueRef_, ptr %3, i64 0, i32 1
  %44 = load ptr, ptr %memberidx3, align 8
  %memberidx4 = getelementptr inbounds %Array_LLVMValueRef_, ptr %3, i64 0, i32 2
  %45 = load i64, ptr %memberidx4, align 4
  %46 = call ptr @LLVMBuildCall2(ptr %1, ptr %43, ptr nonnull %42, ptr %44, i64 %45, ptr nonnull @27)
  br label %ifend

else:                                             ; preds = %CodeGen_get_or_codegen_class_from_typeid.exit
  %47 = call ptr @malloc(i32 376)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(47) %47, ptr noundef nonnull align 8 dereferenceable(47) @317, i64 47, i1 false)
  %48 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %48, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %48, i64 0, i32 1
  store ptr %47, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %48, i64 0, i32 2
  store i64 47, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %48, i64 0, i32 3
  store i64 47, ptr %memberidx2.i.i, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  %49 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %50 = call ptr %49(ptr nonnull %48)
  %51 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %7, ptr nonnull @270, ptr %50)
  %52 = load ptr, ptr %7, align 8
  %53 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %53, align 8
  %memberidx.i.i10 = getelementptr inbounds %string, ptr %53, i64 0, i32 1
  store ptr %52, ptr %memberidx.i.i10, align 8
  %memberidx1.i.i11 = getelementptr inbounds %string, ptr %53, i64 0, i32 2
  store i64 %51, ptr %memberidx1.i.i11, align 4
  %memberidx2.i.i12 = getelementptr inbounds %string, ptr %53, i64 0, i32 3
  store i64 %51, ptr %memberidx2.i.i12, align 4
  call void @free(ptr %50)
  %54 = load ptr, ptr %53, align 8
  %memberidx.i.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %54, i64 0, i32 3
  %55 = load ptr, ptr %memberidx.i.i.i, align 8
  %56 = call ptr %55(ptr nonnull %53)
  %57 = load i64, ptr %memberidx1.i.i11, align 4
  call void @write(i64 1, ptr %56, i64 %57)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7)
  br label %ifend

ifend:                                            ; preds = %else, %if.entry
  ret void
}

define internal fastcc ptr @CodeGen_codegen_safe_fmt_string(ptr nocapture readonly %0, ptr %1, ptr %2, ptr nocapture readonly %3, ptr writeonly %4) unnamed_addr {
for.entry:
  %5 = tail call ptr @LLVMInt8Type()
  %6 = tail call ptr @LLVMPointerType(ptr %5, i64 0)
  %7 = tail call ptr @LLVMIntType(i64 64)
  %8 = tail call ptr @LLVMBuildAlloca(ptr %1, ptr %6, ptr nonnull @27)
  %memberidx.i = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 7
  %9 = load ptr, ptr %memberidx.i, align 8
  %10 = load ptr, ptr %9, align 8
  %memberidx1.i = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %10, i64 0, i32 1
  %11 = load ptr, ptr %memberidx1.i, align 8
  %12 = tail call ptr %11(ptr nonnull %9, ptr %2)
  %13 = icmp eq ptr %12, null
  br i1 %13, label %if.entry.i, label %CodeGen_createGlobalLLVMString.exit

if.entry.i:                                       ; preds = %for.entry
  %14 = load ptr, ptr %2, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %14, i64 0, i32 5
  %15 = load ptr, ptr %memberidx2.i, align 8
  %16 = tail call ptr %15(ptr nonnull %2)
  %17 = tail call ptr @LLVMBuildGlobalString(ptr %1, ptr %16, ptr nonnull @27)
  %18 = load ptr, ptr %memberidx.i, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = load ptr, ptr %19, align 8
  tail call void %20(ptr nonnull %18, ptr nonnull %2, ptr %17)
  br label %CodeGen_createGlobalLLVMString.exit

CodeGen_createGlobalLLVMString.exit:              ; preds = %for.entry, %if.entry.i
  %str.0.i = phi ptr [ %17, %if.entry.i ], [ %12, %for.entry ]
  %21 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMValueRef_, ptr %21, align 8
  %memberidx.i26 = getelementptr inbounds %Array_LLVMValueRef_, ptr %21, i64 0, i32 2
  %memberidx1.i27 = getelementptr inbounds %Array_LLVMValueRef_, ptr %21, i64 0, i32 3
  store i64 16, ptr %memberidx1.i27, align 4
  %memberidx2.i28 = getelementptr inbounds %Array_LLVMValueRef_, ptr %21, i64 0, i32 1
  %22 = tail call ptr @malloc(i32 128)
  store ptr %22, ptr %memberidx2.i28, align 8
  store ptr %8, ptr %22, align 8
  %23 = getelementptr inbounds ptr, ptr %22, i64 1
  store ptr %str.0.i, ptr %23, align 8
  store i64 2, ptr %memberidx.i26, align 4
  %24 = tail call ptr @malloc(i32 33)
  %memberidx.i29 = getelementptr inbounds %Array_LLVMValueRef_, ptr %3, i64 0, i32 1
  %25 = load ptr, ptr %memberidx.i29, align 8
  %memberidx1.i30 = getelementptr inbounds %Array_LLVMValueRef_, ptr %3, i64 0, i32 2
  %26 = load i64, ptr %memberidx1.i30, align 4
  store ptr @VTableArrayIterator_LLVMValueRef_, ptr %24, align 8
  %memberidx.i.i = getelementptr inbounds %Iterator_LLVMValueRef_, ptr %24, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i, align 1
  %memberidx1.i.i = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %24, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %24, i64 0, i32 4
  store ptr %25, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %24, i64 0, i32 3
  store i64 %26, ptr %memberidx3.i.i, align 4
  %27 = load ptr, ptr @VTableArrayIterator_LLVMValueRef_, align 8
  %28 = tail call ptr %27(ptr nonnull %24)
  %29 = load i1, ptr %memberidx.i.i, align 1
  br i1 %29, label %for.end, label %for.body

for.body:                                         ; preds = %CodeGen_createGlobalLLVMString.exit, %Array_LLVMValueRef____sl__.exit
  %30 = phi ptr [ %36, %Array_LLVMValueRef____sl__.exit ], [ %22, %CodeGen_createGlobalLLVMString.exit ]
  %31 = phi i64 [ %37, %Array_LLVMValueRef____sl__.exit ], [ 16, %CodeGen_createGlobalLLVMString.exit ]
  %32 = phi i64 [ %38, %Array_LLVMValueRef____sl__.exit ], [ 2, %CodeGen_createGlobalLLVMString.exit ]
  %arg.050 = phi ptr [ %41, %Array_LLVMValueRef____sl__.exit ], [ %28, %CodeGen_createGlobalLLVMString.exit ]
  %.not.i = icmp slt i64 %32, %31
  br i1 %.not.i, label %Array_LLVMValueRef____sl__.exit, label %if.entry.i35

if.entry.i35:                                     ; preds = %for.body
  %33 = shl i64 %31, 1
  %34 = shl i64 %31, 4
  %35 = tail call ptr @realloc(ptr %30, i64 %34)
  br label %Array_LLVMValueRef____sl__.exit

Array_LLVMValueRef____sl__.exit:                  ; preds = %for.body, %if.entry.i35
  %36 = phi ptr [ %30, %for.body ], [ %35, %if.entry.i35 ]
  %37 = phi i64 [ %31, %for.body ], [ %33, %if.entry.i35 ]
  %38 = add i64 %32, 1
  %ptridx.i = getelementptr inbounds ptr, ptr %36, i64 %32
  store ptr %arg.050, ptr %ptridx.i, align 8
  %39 = load ptr, ptr %24, align 8
  %40 = load ptr, ptr %39, align 8
  %41 = tail call ptr %40(ptr nonnull %24)
  %42 = load i1, ptr %memberidx.i.i, align 1
  br i1 %42, label %for.cond.for.end_crit_edge, label %for.body

for.cond.for.end_crit_edge:                       ; preds = %Array_LLVMValueRef____sl__.exit
  store i64 %38, ptr %memberidx.i26, align 4
  store i64 %37, ptr %memberidx1.i27, align 4
  store ptr %36, ptr %memberidx2.i28, align 8
  br label %for.end

for.end:                                          ; preds = %for.cond.for.end_crit_edge, %CodeGen_createGlobalLLVMString.exit
  %43 = phi i64 [ %38, %for.cond.for.end_crit_edge ], [ 2, %CodeGen_createGlobalLLVMString.exit ]
  %44 = phi ptr [ %36, %for.cond.for.end_crit_edge ], [ %22, %CodeGen_createGlobalLLVMString.exit ]
  tail call void @free(ptr nonnull %24)
  %45 = load ptr, ptr %0, align 8
  %46 = tail call ptr @malloc(i32 64)
  store i64 7382647088337679201, ptr %46, align 8
  %47 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %47, align 8
  %memberidx.i.i36 = getelementptr inbounds %string, ptr %47, i64 0, i32 1
  store ptr %46, ptr %memberidx.i.i36, align 8
  %memberidx1.i.i37 = getelementptr inbounds %string, ptr %47, i64 0, i32 2
  store i64 8, ptr %memberidx1.i.i37, align 4
  %memberidx2.i.i38 = getelementptr inbounds %string, ptr %47, i64 0, i32 3
  store i64 8, ptr %memberidx2.i.i38, align 4
  %48 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMTypeRef_, ptr %48, align 8
  %memberidx.i39 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %48, i64 0, i32 2
  %memberidx1.i40 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %48, i64 0, i32 3
  store i64 16, ptr %memberidx1.i40, align 4
  %memberidx2.i41 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %48, i64 0, i32 1
  %49 = tail call ptr @malloc(i32 128)
  store ptr %49, ptr %memberidx2.i41, align 8
  store ptr %6, ptr %49, align 8
  %50 = getelementptr inbounds ptr, ptr %49, i64 1
  store ptr %6, ptr %50, align 8
  store i64 2, ptr %memberidx.i39, align 4
  %51 = tail call ptr @malloc(i32 16)
  %memberidx1.i.i42 = getelementptr inbounds %IntrinsicResult, ptr %51, i64 0, i32 1
  store i64 0, ptr %51, align 8
  %52 = tail call ptr @LLVMFunctionType(ptr %7, ptr nonnull %49, i64 2, i1 true)
  store ptr %52, ptr %memberidx1.i.i42, align 8
  %53 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %54 = tail call ptr %53(ptr nonnull %47)
  %55 = tail call ptr @LLVMGetNamedFunction(ptr %45, ptr %54)
  %.not.i46 = icmp eq ptr %55, null
  br i1 %.not.i46, label %else.i, label %get_intrinsic.exit

else.i:                                           ; preds = %for.end
  %56 = tail call ptr @LLVMAddFunction(ptr %45, ptr %54, ptr %52)
  br label %get_intrinsic.exit

get_intrinsic.exit:                               ; preds = %for.end, %else.i
  %storemerge.i = phi ptr [ %56, %else.i ], [ %55, %for.end ]
  store ptr %storemerge.i, ptr %51, align 8
  %57 = tail call ptr @LLVMBuildCall2(ptr %1, ptr %52, ptr %storemerge.i, ptr nonnull %44, i64 %43, ptr nonnull @27)
  %.not = icmp eq ptr %4, null
  br i1 %.not, label %ifend, label %if.entry

if.entry:                                         ; preds = %get_intrinsic.exit
  store ptr %57, ptr %4, align 8
  br label %ifend

ifend:                                            ; preds = %get_intrinsic.exit, %if.entry
  %58 = tail call ptr @LLVMBuildLoad2(ptr %1, ptr %6, ptr %8, ptr nonnull @27)
  ret ptr %58
}

define internal fastcc ptr @CodeGen_codegen_string(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
for.entry:
  %3 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %StringExpression, ptr %2, i64 0, i32 4
  %4 = load ptr, ptr %memberidx, align 8
  %5 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMValueRef_, ptr %5, align 8
  %memberidx.i107 = getelementptr inbounds %Array_LLVMValueRef_, ptr %5, i64 0, i32 2
  %memberidx1.i108 = getelementptr inbounds %Array_LLVMValueRef_, ptr %5, i64 0, i32 3
  store i64 8, ptr %memberidx1.i108, align 4
  %memberidx2.i109 = getelementptr inbounds %Array_LLVMValueRef_, ptr %5, i64 0, i32 1
  %6 = tail call ptr @malloc(i32 64)
  store ptr %6, ptr %memberidx2.i109, align 8
  store i64 0, ptr %memberidx.i107, align 4
  %7 = alloca %StringBuilder, align 8
  %memberidx3 = getelementptr inbounds %string, ptr %4, i64 0, i32 2
  %8 = load i64, ptr %memberidx3, align 4
  %memberidx4 = getelementptr inbounds %StringExpression, ptr %2, i64 0, i32 5
  %9 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Array_int_, ptr %9, i64 0, i32 2
  %10 = load i64, ptr %memberidx5, align 4
  %11 = shl i64 %10, 1
  %12 = add i64 %11, %8
  store ptr @VTableStringBuilder, ptr %7, align 8
  %memberidx.i105 = getelementptr inbounds %StringBuilder, ptr %7, i64 0, i32 2
  store i64 %12, ptr %memberidx.i105, align 8
  %memberidx1.i106 = getelementptr inbounds %StringBuilder, ptr %7, i64 0, i32 1
  %13 = trunc i64 %12 to i32
  %mallocsize.i = shl i32 %13, 3
  %14 = tail call ptr @malloc(i32 %mallocsize.i)
  store ptr %14, ptr %memberidx1.i106, align 8
  %memberidx3.i = getelementptr inbounds %StringBuilder, ptr %7, i64 0, i32 3
  store ptr %14, ptr %memberidx3.i, align 8
  %memberidx5.i = getelementptr inbounds %StringBuilder, ptr %7, i64 0, i32 4
  store i64 0, ptr %memberidx5.i, align 8
  %15 = load ptr, ptr %4, align 8
  %memberidx6 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %15, i64 0, i32 3
  %16 = load ptr, ptr %memberidx6, align 8
  %17 = tail call ptr %16(ptr nonnull %4)
  %18 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMValueRef_, ptr %18, align 8
  %memberidx.i102 = getelementptr inbounds %Array_LLVMValueRef_, ptr %18, i64 0, i32 2
  %memberidx1.i103 = getelementptr inbounds %Array_LLVMValueRef_, ptr %18, i64 0, i32 3
  store i64 8, ptr %memberidx1.i103, align 4
  %memberidx2.i104 = getelementptr inbounds %Array_LLVMValueRef_, ptr %18, i64 0, i32 1
  %19 = tail call ptr @malloc(i32 64)
  store ptr %19, ptr %memberidx2.i104, align 8
  store i64 0, ptr %memberidx.i102, align 4
  %memberidx9 = getelementptr inbounds %StringExpression, ptr %2, i64 0, i32 6
  %20 = load ptr, ptr %memberidx9, align 8
  %memberidx10113 = getelementptr inbounds %Array_Expression_, ptr %20, i64 0, i32 2
  %21 = load i64, ptr %memberidx10113, align 4
  %22 = icmp sgt i64 %21, 0
  br i1 %22, label %for.body, label %for.end

for.body:                                         ; preds = %for.entry, %Array_LLVMValueRef____sl__.exit
  %23 = phi ptr [ %45, %Array_LLVMValueRef____sl__.exit ], [ %6, %for.entry ]
  %24 = phi i64 [ %46, %Array_LLVMValueRef____sl__.exit ], [ 8, %for.entry ]
  %25 = phi i64 [ %47, %Array_LLVMValueRef____sl__.exit ], [ 0, %for.entry ]
  %26 = phi ptr [ %49, %Array_LLVMValueRef____sl__.exit ], [ %20, %for.entry ]
  %i.0116 = phi i64 [ %48, %Array_LLVMValueRef____sl__.exit ], [ 0, %for.entry ]
  %curr_ind.0115 = phi i64 [ %33, %Array_LLVMValueRef____sl__.exit ], [ 0, %for.entry ]
  %chars.0114 = phi ptr [ %39, %Array_LLVMValueRef____sl__.exit ], [ %17, %for.entry ]
  %memberidx.i100 = getelementptr inbounds %Array_Expression_, ptr %26, i64 0, i32 1
  %27 = load ptr, ptr %memberidx.i100, align 8
  %ptridx.i101 = getelementptr inbounds ptr, ptr %27, i64 %i.0116
  %28 = load ptr, ptr %ptridx.i101, align 8
  %memberidx12 = getelementptr inbounds %Expression, ptr %28, i64 0, i32 3
  %29 = load ptr, ptr %memberidx12, align 8
  %30 = call fastcc ptr @get_format_from_type(ptr %29)
  %31 = load ptr, ptr %memberidx4, align 8
  %memberidx.i98 = getelementptr inbounds %Array_int_, ptr %31, i64 0, i32 1
  %32 = load ptr, ptr %memberidx.i98, align 8
  %ptridx.i99 = getelementptr inbounds i64, ptr %32, i64 %i.0116
  %33 = load i64, ptr %ptridx.i99, align 4
  %34 = sub i64 %33, %curr_ind.0115
  %35 = load ptr, ptr %7, align 8
  %36 = load ptr, ptr %35, align 8
  call void %36(ptr nonnull %7, ptr %chars.0114, i64 %34)
  %37 = load ptr, ptr %7, align 8
  %memberidx15 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %37, i64 0, i32 1
  %38 = load ptr, ptr %memberidx15, align 8
  call void %38(ptr nonnull %7, ptr %30)
  %39 = getelementptr inbounds i8, ptr %chars.0114, i64 %34
  %40 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %28)
  %41 = call fastcc ptr @CodeGen_get_string_val(ptr %0, ptr %1, ptr %40, ptr %29, ptr nonnull %18, i64 0)
  %.not.i = icmp slt i64 %25, %24
  br i1 %.not.i, label %Array_LLVMValueRef____sl__.exit, label %if.entry.i97

if.entry.i97:                                     ; preds = %for.body
  %42 = shl i64 %24, 1
  store i64 %42, ptr %memberidx1.i108, align 4
  %43 = shl i64 %24, 4
  %44 = call ptr @realloc(ptr %23, i64 %43)
  store ptr %44, ptr %memberidx2.i109, align 8
  br label %Array_LLVMValueRef____sl__.exit

Array_LLVMValueRef____sl__.exit:                  ; preds = %for.body, %if.entry.i97
  %45 = phi ptr [ %23, %for.body ], [ %44, %if.entry.i97 ]
  %46 = phi i64 [ %24, %for.body ], [ %42, %if.entry.i97 ]
  %47 = add i64 %25, 1
  store i64 %47, ptr %memberidx.i107, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %45, i64 %25
  store ptr %41, ptr %ptridx.i, align 8
  %48 = add nuw nsw i64 %i.0116, 1
  %49 = load ptr, ptr %memberidx9, align 8
  %memberidx10 = getelementptr inbounds %Array_Expression_, ptr %49, i64 0, i32 2
  %50 = load i64, ptr %memberidx10, align 4
  %51 = icmp slt i64 %48, %50
  br i1 %51, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %Array_LLVMValueRef____sl__.exit
  %.pre = load ptr, ptr %7, align 8
  %phi.cmp = icmp ult i64 %25, 9223372036854775807
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.entry
  %52 = phi i1 [ false, %for.entry ], [ %phi.cmp, %for.end.loopexit ]
  %53 = phi ptr [ @VTableStringBuilder, %for.entry ], [ %.pre, %for.end.loopexit ]
  %chars.0.lcssa = phi ptr [ %17, %for.entry ], [ %39, %for.end.loopexit ]
  %curr_ind.0.lcssa = phi i64 [ 0, %for.entry ], [ %33, %for.end.loopexit ]
  %54 = load ptr, ptr %53, align 8
  %55 = load i64, ptr %memberidx3, align 4
  %56 = sub i64 %55, %curr_ind.0.lcssa
  call void %54(ptr nonnull %7, ptr %chars.0.lcssa, i64 %56)
  %57 = load ptr, ptr %7, align 8
  %memberidx18 = getelementptr inbounds <{ ptr, ptr, ptr, ptr }>, ptr %57, i64 0, i32 3
  %58 = load ptr, ptr %memberidx18, align 8
  %59 = call ptr %58(ptr nonnull %7)
  %str_len = alloca ptr, align 8
  %memberidx19 = getelementptr inbounds %string, ptr %59, i64 0, i32 2
  %60 = load i64, ptr %memberidx19, align 4
  %61 = call ptr @LLVMIntType(i64 64)
  %62 = call ptr @LLVMConstInt(ptr %61, i64 %60, i1 false)
  store ptr %62, ptr %str_len, align 8
  br i1 %52, label %true_block, label %false_block

true_block:                                       ; preds = %for.end
  %63 = call fastcc ptr @CodeGen_codegen_safe_fmt_string(ptr %0, ptr %1, ptr nonnull %59, ptr nonnull %5, ptr nonnull %str_len)
  br label %end

false_block:                                      ; preds = %for.end
  %memberidx.i90 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 7
  %64 = load ptr, ptr %memberidx.i90, align 8
  %65 = load ptr, ptr %64, align 8
  %memberidx1.i91 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %65, i64 0, i32 1
  %66 = load ptr, ptr %memberidx1.i91, align 8
  %67 = call ptr %66(ptr nonnull %64, ptr nonnull %59)
  %68 = icmp eq ptr %67, null
  br i1 %68, label %if.entry.i, label %end

if.entry.i:                                       ; preds = %false_block
  %69 = load ptr, ptr %59, align 8
  %memberidx2.i92 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %69, i64 0, i32 5
  %70 = load ptr, ptr %memberidx2.i92, align 8
  %71 = call ptr %70(ptr nonnull %59)
  %72 = call ptr @LLVMBuildGlobalString(ptr %1, ptr %71, ptr nonnull @27)
  %73 = load ptr, ptr %memberidx.i90, align 8
  %74 = load ptr, ptr %73, align 8
  %75 = load ptr, ptr %74, align 8
  call void %75(ptr nonnull %73, ptr nonnull %59, ptr %72)
  br label %end

end:                                              ; preds = %if.entry.i, %false_block, %true_block
  %ternary = phi ptr [ %63, %true_block ], [ %72, %if.entry.i ], [ %67, %false_block ]
  %memberidx21 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %76 = load ptr, ptr %memberidx21, align 8
  %77 = load i64, ptr %76, align 4
  %78 = icmp eq i64 %77, 20
  br i1 %78, label %if.entry.i111, label %is_object.exit

if.entry.i111:                                    ; preds = %end, %if.entry.i111
  %.tr5.i = phi ptr [ %79, %if.entry.i111 ], [ %76, %end ]
  %memberidx1.i110 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %79 = load ptr, ptr %memberidx1.i110, align 8
  %80 = load i64, ptr %79, align 4
  %81 = icmp eq i64 %80, 20
  br i1 %81, label %if.entry.i111, label %is_object.exit

is_object.exit:                                   ; preds = %if.entry.i111, %end
  %.lcssa.i = phi i64 [ %77, %end ], [ %80, %if.entry.i111 ]
  %82 = icmp eq i64 %.lcssa.i, 13
  br i1 %82, label %if.entry, label %for.entry34

if.entry:                                         ; preds = %is_object.exit
  %83 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr nonnull %76, i1 false)
  %84 = call i1 @LLVMIsConstant(ptr %ternary)
  %85 = call i1 @LLVMIsGlobalConstant(ptr %ternary)
  %86 = and i1 %84, %85
  br i1 %86, label %if.entry23, label %else24

if.entry23:                                       ; preds = %if.entry
  %87 = load ptr, ptr %0, align 8
  %88 = call ptr @LLVMGetNamedFunction(ptr %87, ptr nonnull @286)
  %89 = icmp eq ptr %88, null
  br i1 %89, label %if.entry27, label %ifend29

else24:                                           ; preds = %if.entry
  %90 = call ptr @LLVMBuildMalloc(ptr %1, ptr %83, ptr nonnull @27)
  %91 = load ptr, ptr %memberidx21, align 8
  %92 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMValueRef_, ptr %92, align 8
  %memberidx.i88 = getelementptr inbounds %Array_LLVMValueRef_, ptr %92, i64 0, i32 2
  %memberidx1.i89 = getelementptr inbounds %Array_LLVMValueRef_, ptr %92, i64 0, i32 3
  store i64 24, ptr %memberidx1.i89, align 4
  %memberidx2.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %92, i64 0, i32 1
  %93 = call ptr @malloc(i32 192)
  store ptr %93, ptr %memberidx2.i, align 8
  store ptr %90, ptr %93, align 8
  %94 = getelementptr inbounds ptr, ptr %93, i64 1
  store ptr %ternary, ptr %94, align 8
  %95 = getelementptr inbounds ptr, ptr %93, i64 2
  %96 = load ptr, ptr %str_len, align 8
  store ptr %96, ptr %95, align 8
  store i64 3, ptr %memberidx.i88, align 4
  call fastcc void @CodeGen_build_constructor_call(ptr %0, ptr %1, ptr %91, ptr nonnull %92)
  br label %for.entry34

if.entry27:                                       ; preds = %if.entry23
  %97 = call ptr @malloc(i32 432)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(54) %97, ptr noundef nonnull align 8 dereferenceable(54) @287, i64 54, i1 false)
  %98 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %98, align 8
  %memberidx.i.i85 = getelementptr inbounds %string, ptr %98, i64 0, i32 1
  store ptr %97, ptr %memberidx.i.i85, align 8
  %memberidx1.i.i86 = getelementptr inbounds %string, ptr %98, i64 0, i32 2
  store i64 54, ptr %memberidx1.i.i86, align 4
  %memberidx2.i.i87 = getelementptr inbounds %string, ptr %98, i64 0, i32 3
  store i64 54, ptr %memberidx2.i.i87, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %99 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %100 = call ptr %99(ptr nonnull %98)
  %101 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @270, ptr %100)
  %102 = load ptr, ptr %3, align 8
  %103 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %103, align 8
  %memberidx.i.i82 = getelementptr inbounds %string, ptr %103, i64 0, i32 1
  store ptr %102, ptr %memberidx.i.i82, align 8
  %memberidx1.i.i83 = getelementptr inbounds %string, ptr %103, i64 0, i32 2
  store i64 %101, ptr %memberidx1.i.i83, align 4
  %memberidx2.i.i84 = getelementptr inbounds %string, ptr %103, i64 0, i32 3
  store i64 %101, ptr %memberidx2.i.i84, align 4
  call void @free(ptr %100)
  %104 = load ptr, ptr %103, align 8
  %memberidx.i.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %104, i64 0, i32 3
  %105 = load ptr, ptr %memberidx.i.i.i, align 8
  %106 = call ptr %105(ptr nonnull %103)
  %107 = load i64, ptr %memberidx1.i.i83, align 4
  call void @write(i64 1, ptr %106, i64 %107)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  br label %ifend29

ifend29:                                          ; preds = %if.entry23, %if.entry27
  %args = alloca [2 x ptr], align 8
  store ptr %ternary, ptr %args, align 8
  %108 = getelementptr inbounds ptr, ptr %args, i64 1
  %109 = load ptr, ptr %str_len, align 8
  store ptr %109, ptr %108, align 8
  %110 = call ptr @LLVM_GetFunctionType(ptr %88)
  %111 = call ptr @LLVMBuildCall2(ptr %1, ptr %110, ptr %88, ptr nonnull %args, i64 2, ptr nonnull @27)
  br label %for.entry34

for.entry34:                                      ; preds = %ifend29, %else24, %is_object.exit
  %112 = phi ptr [ %111, %ifend29 ], [ %90, %else24 ], [ %ternary, %is_object.exit ]
  %113 = call ptr @malloc(i32 33)
  %114 = load ptr, ptr %memberidx2.i104, align 8
  %115 = load i64, ptr %memberidx.i102, align 4
  store ptr @VTableArrayIterator_LLVMValueRef_, ptr %113, align 8
  %memberidx.i.i = getelementptr inbounds %Iterator_LLVMValueRef_, ptr %113, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i, align 1
  %memberidx1.i.i = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %113, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %113, i64 0, i32 4
  store ptr %114, ptr %memberidx2.i.i, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_LLVMValueRef_, ptr %113, i64 0, i32 3
  store i64 %115, ptr %memberidx3.i.i, align 4
  %116 = load ptr, ptr @VTableArrayIterator_LLVMValueRef_, align 8
  %117 = call ptr %116(ptr nonnull %113)
  %118 = load i1, ptr %memberidx.i.i, align 1
  br i1 %118, label %for.end39, label %for.body37

for.body37:                                       ; preds = %for.entry34, %for.body37
  %storemerge112 = phi ptr [ %122, %for.body37 ], [ %117, %for.entry34 ]
  %119 = call ptr @LLVMBuildFree(ptr %1, ptr %storemerge112)
  %120 = load ptr, ptr %113, align 8
  %121 = load ptr, ptr %120, align 8
  %122 = call ptr %121(ptr nonnull %113)
  %123 = load i1, ptr %memberidx.i.i, align 1
  br i1 %123, label %for.end39, label %for.body37

for.end39:                                        ; preds = %for.body37, %for.entry34
  tail call void @free(ptr nonnull %113)
  ret ptr %112
}

define internal fastcc ptr @CodeGen_codegen_expression(ptr nocapture %0, ptr %1, ptr %2) unnamed_addr {
  %incomming_vals.i = alloca [2 x ptr], align 8
  %blocks.i = alloca [2 x ptr], align 8
  %memberidx = getelementptr inbounds %Expression, ptr %2, i64 0, i32 2
  %4 = load i64, ptr %memberidx, align 4
  switch i64 %4, label %common.ret173 [
    i64 4, label %if.entry
    i64 0, label %if.entry2
    i64 1, label %if.entry6
    i64 5, label %if.entry10
    i64 2, label %if.entry14
    i64 7, label %if.entry18
    i64 8, label %if.entry22
    i64 9, label %if.entry26
    i64 14, label %if.entry30
    i64 13, label %CodeGen_get_expr_mem.exit
    i64 12, label %if.entry38
    i64 11, label %if.entry42
    i64 15, label %if.entry46
    i64 10, label %if.entry50
    i64 6, label %if.entry54
    i64 16, label %if.entry58
  ]

common.ret173:                                    ; preds = %if.entry, %if.entry2, %if.entry6, %if.entry10, %if.entry14, %if.entry18, %if.entry22, %if.entry26, %if.entry30, %CodeGen_get_expr_mem.exit, %if.entry38, %if.entry54, %if.entry58, %is_object.exit, %if.entry5.i, %else6.i, %CodeGen_evaluate_expression_list.exit151, %true_block.i, %false_block.i, %true_block6.i, %false_block7.i, %true_block14.i, %false_block15.i, %true_block22.i, %false_block23.i, %true_block30.i, %false_block31.i, %true_block34.i, %false_block35.i, %3, %if.entry46
  %common.ret173.op = phi ptr [ %109, %if.entry46 ], [ %7, %if.entry ], [ %11, %if.entry2 ], [ %15, %if.entry6 ], [ %18, %if.entry10 ], [ %19, %if.entry14 ], [ %20, %if.entry18 ], [ %21, %if.entry22 ], [ %22, %if.entry26 ], [ %23, %if.entry30 ], [ %27, %CodeGen_get_expr_mem.exit ], [ %28, %if.entry38 ], [ %148, %if.entry54 ], [ %149, %if.entry58 ], [ %65, %if.entry5.i ], [ %66, %else6.i ], [ %ptr.1.i, %CodeGen_evaluate_expression_list.exit151 ], [ null, %is_object.exit ], [ %129, %true_block.i ], [ %130, %false_block.i ], [ %136, %true_block6.i ], [ %137, %false_block7.i ], [ %139, %true_block14.i ], [ %140, %false_block15.i ], [ %142, %true_block22.i ], [ %143, %false_block23.i ], [ %144, %true_block30.i ], [ %145, %false_block31.i ], [ %146, %true_block34.i ], [ %147, %false_block35.i ], [ null, %3 ]
  ret ptr %common.ret173.op

if.entry:                                         ; preds = %3
  %memberidx.i = getelementptr inbounds %BooleanExpression, ptr %2, i64 0, i32 4
  %5 = load i1, ptr %memberidx.i, align 1
  %6 = tail call ptr @LLVMInt1Type()
  %..i.i = zext i1 %5 to i64
  %7 = tail call ptr @LLVMConstInt(ptr %6, i64 %..i.i, i1 false)
  br label %common.ret173

if.entry2:                                        ; preds = %3
  %memberidx.i118 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %8 = load ptr, ptr %memberidx.i118, align 8
  %9 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %8, i1 true)
  %memberidx1.i = getelementptr inbounds %IntExpression, ptr %2, i64 0, i32 4
  %10 = load i64, ptr %memberidx1.i, align 4
  %11 = tail call ptr @LLVMConstInt(ptr %9, i64 %10, i1 true)
  br label %common.ret173

if.entry6:                                        ; preds = %3
  %memberidx.i119 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %12 = load ptr, ptr %memberidx.i119, align 8
  %13 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %12, i1 true)
  %memberidx1.i120 = getelementptr inbounds %FloatExpression, ptr %2, i64 0, i32 4
  %14 = load double, ptr %memberidx1.i120, align 8
  %15 = tail call ptr @LLVMConstReal(ptr %13, double %14)
  br label %common.ret173

if.entry10:                                       ; preds = %3
  %memberidx.i121 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %16 = load ptr, ptr %memberidx.i121, align 8
  %17 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %16, i1 true)
  %18 = tail call ptr @LLVMConstNull(ptr %17)
  br label %common.ret173

if.entry14:                                       ; preds = %3
  %19 = tail call fastcc ptr @CodeGen_codegen_string(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret173

if.entry18:                                       ; preds = %3
  %20 = tail call fastcc ptr @CodeGen_codegen_var_access_exp(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret173

if.entry22:                                       ; preds = %3
  %21 = tail call fastcc ptr @CodeGen_codegen_bin_exp(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret173

if.entry26:                                       ; preds = %3
  %22 = tail call fastcc ptr @CodeGen_codegen_unary_exp(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret173

if.entry30:                                       ; preds = %3
  %23 = tail call fastcc ptr @CodeGen_codegen_call_exp(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret173

CodeGen_get_expr_mem.exit:                        ; preds = %3
  %24 = tail call fastcc ptr @CodeGen_get_index_expr_mem(ptr %0, ptr %1, ptr nonnull %2)
  %memberidx.i122 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %25 = load ptr, ptr %memberidx.i122, align 8
  %26 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %25, i1 true)
  %27 = tail call ptr @LLVMBuildLoad2(ptr %1, ptr %26, ptr %24, ptr nonnull @27)
  br label %common.ret173

if.entry38:                                       ; preds = %3
  %28 = tail call fastcc ptr @CodeGen_codegen_member_exp(ptr %0, ptr %1, ptr nonnull %2, ptr null)
  br label %common.ret173

if.entry42:                                       ; preds = %3
  %memberidx.i123 = getelementptr inbounds %NewExpression, ptr %2, i64 0, i32 6
  %29 = load ptr, ptr %memberidx.i123, align 8
  %30 = load i64, ptr %29, align 4
  %31 = icmp eq i64 %30, 15
  %32 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMValueRef_, ptr %32, align 8
  %memberidx.i.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %32, i64 0, i32 2
  %memberidx1.i.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %32, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %32, i64 0, i32 1
  %33 = tail call ptr @malloc(i32 64)
  store ptr %33, ptr %memberidx2.i.i, align 8
  store i64 0, ptr %memberidx.i.i, align 4
  br i1 %31, label %if.entry.i, label %else.i

if.entry.i:                                       ; preds = %if.entry42
  %34 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr nonnull %29, i1 true)
  %memberidx3.i = getelementptr inbounds %NewExpression, ptr %2, i64 0, i32 4
  %35 = load ptr, ptr %memberidx3.i, align 8
  %36 = tail call ptr @malloc(i32 33)
  %memberidx.i.i136 = getelementptr inbounds %Array_Expression_, ptr %35, i64 0, i32 1
  %37 = load ptr, ptr %memberidx.i.i136, align 8
  %memberidx1.i.i137 = getelementptr inbounds %Array_Expression_, ptr %35, i64 0, i32 2
  %38 = load i64, ptr %memberidx1.i.i137, align 4
  store ptr @VTableArrayIterator_Expression_, ptr %36, align 8
  %memberidx.i.i.i138 = getelementptr inbounds %Iterator_Expression_, ptr %36, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i.i138, align 1
  %memberidx1.i.i.i = getelementptr inbounds %ArrayIterator_Expression_, ptr %36, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i139 = getelementptr inbounds %ArrayIterator_Expression_, ptr %36, i64 0, i32 4
  store ptr %37, ptr %memberidx2.i.i.i139, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ArrayIterator_Expression_, ptr %36, i64 0, i32 3
  store i64 %38, ptr %memberidx3.i.i.i, align 4
  %39 = load ptr, ptr @VTableArrayIterator_Expression_, align 8
  %40 = tail call ptr %39(ptr nonnull %36)
  %41 = load i1, ptr %memberidx.i.i.i138, align 1
  br i1 %41, label %CodeGen_evaluate_expression_list.exit, label %for.body.i

for.body.i:                                       ; preds = %if.entry.i, %Array_LLVMValueRef____sl__.exit
  %42 = phi ptr [ %49, %Array_LLVMValueRef____sl__.exit ], [ %33, %if.entry.i ]
  %43 = phi i64 [ %50, %Array_LLVMValueRef____sl__.exit ], [ 8, %if.entry.i ]
  %44 = phi i64 [ %51, %Array_LLVMValueRef____sl__.exit ], [ 0, %if.entry.i ]
  %item.0.i174 = phi ptr [ %54, %Array_LLVMValueRef____sl__.exit ], [ %40, %if.entry.i ]
  %45 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %item.0.i174)
  %.not.i = icmp slt i64 %44, %43
  br i1 %.not.i, label %Array_LLVMValueRef____sl__.exit, label %if.entry.i156

if.entry.i156:                                    ; preds = %for.body.i
  %46 = shl i64 %43, 1
  store i64 %46, ptr %memberidx1.i.i, align 4
  %47 = shl i64 %43, 4
  %48 = tail call ptr @realloc(ptr %42, i64 %47)
  store ptr %48, ptr %memberidx2.i.i, align 8
  br label %Array_LLVMValueRef____sl__.exit

Array_LLVMValueRef____sl__.exit:                  ; preds = %for.body.i, %if.entry.i156
  %49 = phi ptr [ %42, %for.body.i ], [ %48, %if.entry.i156 ]
  %50 = phi i64 [ %43, %for.body.i ], [ %46, %if.entry.i156 ]
  %51 = add i64 %44, 1
  store i64 %51, ptr %memberidx.i.i, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %49, i64 %44
  store ptr %45, ptr %ptridx.i, align 8
  %52 = load ptr, ptr %36, align 8
  %53 = load ptr, ptr %52, align 8
  %54 = tail call ptr %53(ptr nonnull %36)
  %55 = load i1, ptr %memberidx.i.i.i138, align 1
  br i1 %55, label %CodeGen_evaluate_expression_list.exit, label %for.body.i

CodeGen_evaluate_expression_list.exit:            ; preds = %Array_LLVMValueRef____sl__.exit, %if.entry.i
  %56 = phi ptr [ %33, %if.entry.i ], [ %49, %Array_LLVMValueRef____sl__.exit ]
  tail call void @free(ptr nonnull %36)
  %memberidx4.i = getelementptr inbounds %NewExpression, ptr %2, i64 0, i32 5
  %57 = load i1, ptr %memberidx4.i, align 1
  %58 = load ptr, ptr %56, align 8
  br i1 %57, label %if.entry5.i, label %else6.i

else.i:                                           ; preds = %if.entry42
  %59 = load i64, ptr %29, align 4
  %60 = icmp eq i64 %59, 20
  br i1 %60, label %if.entry.i171, label %is_object.exit

if.entry.i171:                                    ; preds = %else.i, %if.entry.i171
  %.tr5.i = phi ptr [ %61, %if.entry.i171 ], [ %29, %else.i ]
  %memberidx1.i170 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %61 = load ptr, ptr %memberidx1.i170, align 8
  %62 = load i64, ptr %61, align 4
  %63 = icmp eq i64 %62, 20
  br i1 %63, label %if.entry.i171, label %is_object.exit

is_object.exit:                                   ; preds = %if.entry.i171, %else.i
  %.lcssa.i = phi i64 [ %59, %else.i ], [ %62, %if.entry.i171 ]
  %64 = icmp eq i64 %.lcssa.i, 13
  br i1 %64, label %if.entry8.i, label %common.ret173

if.entry5.i:                                      ; preds = %CodeGen_evaluate_expression_list.exit
  %65 = tail call ptr @LLVMBuildArrayMalloc(ptr %1, ptr %34, ptr %58, ptr nonnull @27)
  br label %common.ret173

else6.i:                                          ; preds = %CodeGen_evaluate_expression_list.exit
  %66 = tail call ptr @LLVMBuildArrayAlloca(ptr %1, ptr %34, ptr %58, ptr nonnull @27)
  br label %common.ret173

if.entry8.i:                                      ; preds = %is_object.exit
  %67 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr nonnull %29, i1 false)
  %memberidx11.i = getelementptr inbounds %NewExpression, ptr %2, i64 0, i32 5
  %68 = load i1, ptr %memberidx11.i, align 1
  br i1 %68, label %if.entry12.i, label %else13.i

if.entry12.i:                                     ; preds = %if.entry8.i
  %69 = tail call ptr @LLVMBuildMalloc(ptr %1, ptr %67, ptr nonnull @27)
  br label %Array_LLVMValueRef____sl__.exit.i

else13.i:                                         ; preds = %if.entry8.i
  %70 = tail call ptr @LLVMBuildAlloca(ptr %1, ptr %67, ptr nonnull @27)
  br label %Array_LLVMValueRef____sl__.exit.i

Array_LLVMValueRef____sl__.exit.i:                ; preds = %else13.i, %if.entry12.i
  %ptr.1.i = phi ptr [ %69, %if.entry12.i ], [ %70, %else13.i ]
  %memberidx15.i.phi.trans.insert = getelementptr inbounds %NewExpression, ptr %2, i64 0, i32 4
  %.pre = load ptr, ptr %memberidx15.i.phi.trans.insert, align 8
  store i64 1, ptr %memberidx.i.i, align 4
  store ptr %ptr.1.i, ptr %33, align 8
  %71 = tail call ptr @malloc(i32 33)
  %memberidx.i.i141 = getelementptr inbounds %Array_Expression_, ptr %.pre, i64 0, i32 1
  %72 = load ptr, ptr %memberidx.i.i141, align 8
  %memberidx1.i.i142 = getelementptr inbounds %Array_Expression_, ptr %.pre, i64 0, i32 2
  %73 = load i64, ptr %memberidx1.i.i142, align 4
  store ptr @VTableArrayIterator_Expression_, ptr %71, align 8
  %memberidx.i.i.i143 = getelementptr inbounds %Iterator_Expression_, ptr %71, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i.i143, align 1
  %memberidx1.i.i.i144 = getelementptr inbounds %ArrayIterator_Expression_, ptr %71, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i.i144, align 4
  %memberidx2.i.i.i145 = getelementptr inbounds %ArrayIterator_Expression_, ptr %71, i64 0, i32 4
  store ptr %72, ptr %memberidx2.i.i.i145, align 8
  %memberidx3.i.i.i146 = getelementptr inbounds %ArrayIterator_Expression_, ptr %71, i64 0, i32 3
  store i64 %73, ptr %memberidx3.i.i.i146, align 4
  %74 = load ptr, ptr @VTableArrayIterator_Expression_, align 8
  %75 = tail call ptr %74(ptr nonnull %71)
  %76 = load i1, ptr %memberidx.i.i.i143, align 1
  br i1 %76, label %CodeGen_evaluate_expression_list.exit151, label %for.body.i150

for.body.i150:                                    ; preds = %Array_LLVMValueRef____sl__.exit.i, %Array_LLVMValueRef____sl__.exit168
  %77 = phi ptr [ %84, %Array_LLVMValueRef____sl__.exit168 ], [ %33, %Array_LLVMValueRef____sl__.exit.i ]
  %78 = phi i64 [ %85, %Array_LLVMValueRef____sl__.exit168 ], [ 8, %Array_LLVMValueRef____sl__.exit.i ]
  %79 = phi i64 [ %86, %Array_LLVMValueRef____sl__.exit168 ], [ 1, %Array_LLVMValueRef____sl__.exit.i ]
  %item.0.i147175 = phi ptr [ %89, %Array_LLVMValueRef____sl__.exit168 ], [ %75, %Array_LLVMValueRef____sl__.exit.i ]
  %80 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %item.0.i147175)
  %.not.i161 = icmp slt i64 %79, %78
  br i1 %.not.i161, label %Array_LLVMValueRef____sl__.exit168, label %if.entry.i164

if.entry.i164:                                    ; preds = %for.body.i150
  %81 = shl i64 %78, 1
  store i64 %81, ptr %memberidx1.i.i, align 4
  %82 = shl i64 %78, 4
  %83 = tail call ptr @realloc(ptr %77, i64 %82)
  store ptr %83, ptr %memberidx2.i.i, align 8
  br label %Array_LLVMValueRef____sl__.exit168

Array_LLVMValueRef____sl__.exit168:               ; preds = %for.body.i150, %if.entry.i164
  %84 = phi ptr [ %77, %for.body.i150 ], [ %83, %if.entry.i164 ]
  %85 = phi i64 [ %78, %for.body.i150 ], [ %81, %if.entry.i164 ]
  %86 = add i64 %79, 1
  store i64 %86, ptr %memberidx.i.i, align 4
  %ptridx.i166 = getelementptr inbounds ptr, ptr %84, i64 %79
  store ptr %80, ptr %ptridx.i166, align 8
  %87 = load ptr, ptr %71, align 8
  %88 = load ptr, ptr %87, align 8
  %89 = tail call ptr %88(ptr nonnull %71)
  %90 = load i1, ptr %memberidx.i.i.i143, align 1
  br i1 %90, label %CodeGen_evaluate_expression_list.exit151, label %for.body.i150

CodeGen_evaluate_expression_list.exit151:         ; preds = %Array_LLVMValueRef____sl__.exit168, %Array_LLVMValueRef____sl__.exit.i
  tail call void @free(ptr nonnull %71)
  tail call fastcc void @CodeGen_build_constructor_call(ptr %0, ptr %1, ptr nonnull %29, ptr nonnull %32)
  br label %common.ret173

if.entry46:                                       ; preds = %3
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %incomming_vals.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %blocks.i)
  %memberidx.i124 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 1
  %91 = load ptr, ptr %memberidx.i124, align 8
  %92 = tail call ptr @LLVMAppendBasicBlock(ptr %91, ptr nonnull @299)
  %93 = load ptr, ptr %memberidx.i124, align 8
  %94 = tail call ptr @LLVMAppendBasicBlock(ptr %93, ptr nonnull @300)
  %95 = load ptr, ptr %memberidx.i124, align 8
  %96 = tail call ptr @LLVMAppendBasicBlock(ptr %95, ptr nonnull @301)
  %memberidx3.i125 = getelementptr inbounds %TernaryExpression, ptr %2, i64 0, i32 4
  %97 = load ptr, ptr %memberidx3.i125, align 8
  %98 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %97)
  %99 = tail call ptr @LLVMBuildCondBr(ptr %1, ptr %98, ptr %92, ptr %94)
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %92)
  %memberidx4.i126 = getelementptr inbounds %TernaryExpression, ptr %2, i64 0, i32 5
  %100 = load ptr, ptr %memberidx4.i126, align 8
  %101 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %100)
  %102 = tail call ptr @LLVMBuildBr(ptr %1, ptr %96)
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %94)
  %memberidx5.i = getelementptr inbounds %TernaryExpression, ptr %2, i64 0, i32 6
  %103 = load ptr, ptr %memberidx5.i, align 8
  %104 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %103)
  %105 = tail call ptr @LLVMBuildBr(ptr %1, ptr %96)
  tail call void @LLVMPositionBuilderAtEnd(ptr %1, ptr %96)
  %106 = load ptr, ptr %memberidx4.i126, align 8
  %memberidx7.i = getelementptr inbounds %Expression, ptr %106, i64 0, i32 3
  %107 = load ptr, ptr %memberidx7.i, align 8
  %108 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %107, i1 true)
  %109 = tail call ptr @LLVMBuildPhi(ptr %1, ptr %108, ptr nonnull @302)
  store ptr %101, ptr %incomming_vals.i, align 8
  %110 = getelementptr inbounds ptr, ptr %incomming_vals.i, i64 1
  store ptr %104, ptr %110, align 8
  store ptr %92, ptr %blocks.i, align 8
  %111 = getelementptr inbounds ptr, ptr %blocks.i, i64 1
  store ptr %94, ptr %111, align 8
  call void @LLVMAddIncoming(ptr %109, ptr nonnull %incomming_vals.i, ptr nonnull %blocks.i, i64 2)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %incomming_vals.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %blocks.i)
  br label %common.ret173

if.entry50:                                       ; preds = %3
  %memberidx.i127 = getelementptr inbounds %TypeCastExpression, ptr %2, i64 0, i32 4
  %112 = load ptr, ptr %memberidx.i127, align 8
  %memberidx1.i128 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %113 = load ptr, ptr %memberidx1.i128, align 8
  %114 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %112)
  %115 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %113, i1 true)
  %116 = tail call i1 @LLVMIsConstant(ptr %114)
  %117 = load i64, ptr %113, align 4
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %if.entry.i129, label %ifend.i

if.entry.i129:                                    ; preds = %if.entry50
  br i1 %116, label %true_block.i, label %false_block.i

ifend.i:                                          ; preds = %if.entry50
  %memberidx2.i130 = getelementptr inbounds %Expression, ptr %112, i64 0, i32 3
  %119 = load ptr, ptr %memberidx2.i130, align 8
  %120 = load i64, ptr %119, align 4
  %121 = add i64 %120, -1
  %122 = icmp ult i64 %121, 7
  %123 = and i64 %117, -4
  %124 = icmp eq i64 %123, 8
  %125 = and i1 %124, %122
  br i1 %125, label %if.entry3.i, label %else4.i

true_block.i:                                     ; preds = %if.entry.i129
  %126 = tail call i1 @LLVMIsNull(ptr %114)
  %127 = xor i1 %126, true
  %128 = tail call ptr @LLVMInt1Type()
  %..i.i131 = zext i1 %127 to i64
  %129 = tail call ptr @LLVMConstInt(ptr %128, i64 %..i.i131, i1 false)
  br label %common.ret173

false_block.i:                                    ; preds = %if.entry.i129
  %130 = tail call ptr @LLVMBuildIsNotNull(ptr %1, ptr %114, ptr nonnull @27)
  br label %common.ret173

if.entry3.i:                                      ; preds = %ifend.i
  br i1 %116, label %true_block6.i, label %false_block7.i

else4.i:                                          ; preds = %ifend.i
  %131 = and i64 %120, -4
  %132 = icmp eq i64 %131, 8
  %133 = add i64 %117, -1
  %134 = icmp ult i64 %133, 7
  %135 = and i1 %134, %132
  br i1 %135, label %if.entry11.i, label %else12.i

true_block6.i:                                    ; preds = %if.entry3.i
  %136 = tail call ptr @LLVMConstSIToFP(ptr %114, ptr %115)
  br label %common.ret173

false_block7.i:                                   ; preds = %if.entry3.i
  %137 = tail call ptr @LLVMBuildSIToFP(ptr %1, ptr %114, ptr %115, ptr nonnull @27)
  br label %common.ret173

if.entry11.i:                                     ; preds = %else4.i
  br i1 %116, label %true_block14.i, label %false_block15.i

else12.i:                                         ; preds = %else4.i
  %138 = and i1 %134, %122
  br i1 %138, label %if.entry19.i, label %else20.i

true_block14.i:                                   ; preds = %if.entry11.i
  %139 = tail call ptr @LLVMConstFPToSI(ptr %114, ptr %115)
  br label %common.ret173

false_block15.i:                                  ; preds = %if.entry11.i
  %140 = tail call ptr @LLVMBuildFPToSI(ptr %1, ptr %114, ptr %115, ptr nonnull @27)
  br label %common.ret173

if.entry19.i:                                     ; preds = %else12.i
  br i1 %116, label %true_block22.i, label %false_block23.i

else20.i:                                         ; preds = %else12.i
  %141 = and i1 %124, %132
  br i1 %141, label %if.entry27.i, label %ifend29.i

true_block22.i:                                   ; preds = %if.entry19.i
  %142 = tail call ptr @LLVMConstIntCast(ptr %114, ptr %115, i1 true)
  br label %common.ret173

false_block23.i:                                  ; preds = %if.entry19.i
  %143 = tail call ptr @LLVMBuildIntCast2(ptr %1, ptr %114, ptr %115, i1 true, ptr nonnull @27)
  br label %common.ret173

if.entry27.i:                                     ; preds = %else20.i
  br i1 %116, label %true_block30.i, label %false_block31.i

ifend29.i:                                        ; preds = %else20.i
  br i1 %116, label %true_block34.i, label %false_block35.i

true_block30.i:                                   ; preds = %if.entry27.i
  %144 = tail call ptr @LLVMConstFPCast(ptr %114, ptr %115)
  br label %common.ret173

false_block31.i:                                  ; preds = %if.entry27.i
  %145 = tail call ptr @LLVMBuildFPCast(ptr %1, ptr %114, ptr %115, ptr nonnull @27)
  br label %common.ret173

true_block34.i:                                   ; preds = %ifend29.i
  %146 = tail call ptr @LLVMConstBitCast(ptr %114, ptr %115)
  br label %common.ret173

false_block35.i:                                  ; preds = %ifend29.i
  %147 = tail call ptr @LLVMBuildBitCast(ptr %1, ptr %114, ptr %115, ptr nonnull @27)
  br label %common.ret173

if.entry54:                                       ; preds = %3
  %148 = tail call fastcc ptr @CodeGen_codegen_array_exp(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret173

if.entry58:                                       ; preds = %3
  %149 = tail call fastcc ptr @CodeGen_codegen_intrinsic_exp(ptr %0, ptr %1, ptr nonnull %2)
  br label %common.ret173
}

define internal void @Map_string_CGEnumType__set(ptr %0, ptr %1, ptr %2) {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i64 0, i32 2
  %5 = load i64, ptr %memberidx, align 4
  %6 = sitofp i64 %5 to double
  %memberidx1 = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i64 0, i32 3
  %7 = load i64, ptr %memberidx1, align 4
  %8 = sitofp i64 %7 to double
  %9 = fdiv double %6, %8
  %10 = fcmp ogt double %9, 7.500000e-01
  br i1 %10, label %if.entry, label %ifend

if.entry:                                         ; preds = %3
  %11 = load ptr, ptr %0, align 8
  %memberidx.i36 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %11, i64 0, i32 2
  %12 = load ptr, ptr %memberidx.i36, align 8
  %13 = tail call ptr %12(ptr nonnull %0)
  %14 = load i64, ptr %memberidx1, align 4
  %15 = shl i64 %14, 1
  store i64 %15, ptr %memberidx1, align 4
  store i64 0, ptr %memberidx, align 4
  %memberidx4.i = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i64 0, i32 1
  %16 = load ptr, ptr %memberidx4.i, align 8
  %17 = shl i64 %14, 4
  %18 = tail call ptr @realloc(ptr %16, i64 %17)
  store ptr %18, ptr %memberidx4.i, align 8
  %19 = load i64, ptr %memberidx1, align 4
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %for.body.i40, label %for.cond11.preheader.i

for.cond11.preheader.i:                           ; preds = %for.body.i40, %if.entry
  %memberidx15.i = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %13, i64 0, i32 2
  %21 = load i64, ptr %memberidx15.i, align 4
  %22 = icmp sgt i64 %21, 0
  br i1 %22, label %for.body12.lr.ph.i, label %ifend

for.body12.lr.ph.i:                               ; preds = %for.cond11.preheader.i
  %memberidx.i32.i = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %13, i64 0, i32 1
  br label %for.body12.i

for.body.i40:                                     ; preds = %if.entry, %for.body.i40
  %i.036.i = phi i64 [ %25, %for.body.i40 ], [ 0, %if.entry ]
  %23 = load ptr, ptr %memberidx4.i, align 8
  %ptridx.i = getelementptr inbounds ptr, ptr %23, i64 %i.036.i
  %24 = tail call ptr @malloc(i32 25)
  store ptr @VTableBucket_string_CGEnumType_, ptr %24, align 8
  %memberidx.i.i39 = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %24, i64 0, i32 3
  store i1 true, ptr %memberidx.i.i39, align 1
  store ptr %24, ptr %ptridx.i, align 8
  %25 = add nuw nsw i64 %i.036.i, 1
  %26 = load i64, ptr %memberidx1, align 4
  %27 = icmp slt i64 %25, %26
  br i1 %27, label %for.body.i40, label %for.cond11.preheader.i

for.body12.i:                                     ; preds = %for.body12.i, %for.body12.lr.ph.i
  %storemerge35.i = phi i64 [ 0, %for.body12.lr.ph.i ], [ %34, %for.body12.i ]
  %28 = load ptr, ptr %0, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %memberidx.i32.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %30, i64 %storemerge35.i
  %31 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx17.i = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %31, i64 0, i32 1
  %32 = load ptr, ptr %memberidx17.i, align 8
  %memberidx18.i = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %31, i64 0, i32 2
  %33 = load ptr, ptr %memberidx18.i, align 8
  tail call void %29(ptr nonnull %0, ptr %32, ptr %33)
  %34 = add nuw nsw i64 %storemerge35.i, 1
  %35 = load i64, ptr %memberidx15.i, align 4
  %36 = icmp slt i64 %34, %35
  br i1 %36, label %for.body12.i, label %ifend

ifend:                                            ; preds = %for.body12.i, %for.cond11.preheader.i, %3
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %37 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %37, i64 0, i32 5
  %38 = load ptr, ptr %memberidx.i, align 8
  %39 = tail call ptr %38(ptr nonnull %1)
  %40 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @22, ptr %39)
  %41 = load ptr, ptr %4, align 8
  %42 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %42, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 1
  store ptr %41, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 2
  store i64 %40, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 3
  store i64 %40, ptr %memberidx2.i.i, align 4
  call void @free(ptr %39)
  %43 = load i64, ptr %memberidx1.i.i, align 4
  %44 = icmp sgt i64 %43, 0
  br i1 %44, label %for.body.i, label %Map_string_CGEnumType__hash_fnc.exit

for.body.i:                                       ; preds = %ifend, %for.body.i
  %i.0.i42 = phi i64 [ %51, %for.body.i ], [ 0, %ifend ]
  %hash.0.i41 = phi i64 [ %50, %for.body.i ], [ 0, %ifend ]
  %45 = shl i64 %hash.0.i41, 1
  %46 = load ptr, ptr %42, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %46, i64 0, i32 2
  %47 = load ptr, ptr %memberidx2.i, align 8
  %48 = call i8 %47(ptr nonnull %42, i64 %i.0.i42)
  %49 = sext i8 %48 to i64
  %50 = add i64 %45, %49
  %51 = add nuw nsw i64 %i.0.i42, 1
  %52 = load i64, ptr %memberidx1.i.i, align 4
  %53 = icmp slt i64 %51, %52
  br i1 %53, label %for.body.i, label %Map_string_CGEnumType__hash_fnc.exit

Map_string_CGEnumType__hash_fnc.exit:             ; preds = %for.body.i, %ifend
  %hash.0.i.lcssa = phi i64 [ 0, %ifend ], [ %50, %for.body.i ]
  %54 = call i64 @llvm.abs.i64(i64 %hash.0.i.lcssa, i1 false)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %55 = load i64, ptr %memberidx1, align 4
  %56 = srem i64 %54, %55
  %memberidx3 = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i64 0, i32 1
  %57 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %57, i64 %56
  %58 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %58, i64 0, i32 3
  %59 = load i1, ptr %memberidx4, align 1
  br i1 %59, label %while.end, label %while.entry.preheader

while.entry.preheader:                            ; preds = %Map_string_CGEnumType__hash_fnc.exit
  %memberidx1.i34 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %ifend10
  %60 = phi ptr [ %57, %while.entry.preheader ], [ %78, %ifend10 ]
  %61 = phi i64 [ %55, %while.entry.preheader ], [ %79, %ifend10 ]
  %62 = phi ptr [ %58, %while.entry.preheader ], [ %82, %ifend10 ]
  %63 = phi i64 [ %56, %while.entry.preheader ], [ %81, %ifend10 ]
  %memberidx7 = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %62, i64 0, i32 1
  %64 = load ptr, ptr %memberidx7, align 8
  %memberidx.i33 = getelementptr inbounds %string, ptr %64, i64 0, i32 2
  %65 = load i64, ptr %memberidx.i33, align 4
  %66 = load i64, ptr %memberidx1.i34, align 4
  %.not.i = icmp eq i64 %65, %66
  br i1 %.not.i, label %ifend.i, label %ifend10

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i35 = getelementptr inbounds %string, ptr %64, i64 0, i32 1
  %67 = load ptr, ptr %memberidx2.i35, align 8
  %68 = load ptr, ptr %memberidx3.i, align 8
  %69 = call i64 @memcmp(ptr %67, ptr %68, i64 %65)
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %ifend.i.while.end.loopexit_crit_edge, label %ifend.i.ifend10_crit_edge

ifend.i.while.end.loopexit_crit_edge:             ; preds = %ifend.i
  %.pre44.pre = load ptr, ptr %memberidx3, align 8
  br label %while.end

ifend.i.ifend10_crit_edge:                        ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx1, align 4
  %.pre43 = load ptr, ptr %memberidx3, align 8
  br label %ifend10

while.end:                                        ; preds = %ifend10, %ifend.i.while.end.loopexit_crit_edge, %Map_string_CGEnumType__hash_fnc.exit
  %71 = phi ptr [ %57, %Map_string_CGEnumType__hash_fnc.exit ], [ %.pre44.pre, %ifend.i.while.end.loopexit_crit_edge ], [ %78, %ifend10 ]
  %72 = phi i64 [ %56, %Map_string_CGEnumType__hash_fnc.exit ], [ %63, %ifend.i.while.end.loopexit_crit_edge ], [ %81, %ifend10 ]
  %73 = load i64, ptr %memberidx, align 4
  %74 = add i64 %73, 1
  store i64 %74, ptr %memberidx, align 4
  %ptridx18 = getelementptr inbounds ptr, ptr %71, i64 %72
  %75 = load ptr, ptr %ptridx18, align 8
  %76 = load ptr, ptr %75, align 8
  %77 = load ptr, ptr %76, align 8
  call void %77(ptr nonnull %75, ptr nonnull %1, ptr %2)
  ret void

ifend10:                                          ; preds = %ifend.i.ifend10_crit_edge, %while.entry
  %78 = phi ptr [ %.pre43, %ifend.i.ifend10_crit_edge ], [ %60, %while.entry ]
  %79 = phi i64 [ %.pre, %ifend.i.ifend10_crit_edge ], [ %61, %while.entry ]
  %80 = add i64 %63, 1
  %81 = srem i64 %80, %79
  %ptridx13 = getelementptr inbounds ptr, ptr %78, i64 %81
  %82 = load ptr, ptr %ptridx13, align 8
  %memberidx14 = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %82, i64 0, i32 3
  %83 = load i1, ptr %memberidx14, align 1
  br i1 %83, label %while.end, label %while.entry
}

; Function Attrs: argmemonly mustprogress nofree norecurse nosync nounwind willreturn writeonly
define internal void @Bucket_string_CGEnumType__set(ptr nocapture writeonly %0, ptr %1, ptr %2) #8 {
  %memberidx = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %0, i64 0, i32 3
  store i1 false, ptr %memberidx, align 1
  %memberidx1 = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %0, i64 0, i32 1
  store ptr %1, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %0, i64 0, i32 2
  store ptr %2, ptr %memberidx2, align 8
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind readonly
define internal i64 @Array_Bucket_string_CGEnumType___find(ptr nocapture readonly %0, ptr readnone %1) #0 {
for.entry:
  %memberidx = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %0, i64 0, i32 2
  %2 = load i64, ptr %memberidx, align 4
  %3 = icmp sgt i64 %2, 0
  br i1 %3, label %for.body.lr.ph, label %common.ret

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx1 = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %memberidx1, align 8
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %7, %ifend ]
  %ptridx = getelementptr inbounds ptr, ptr %4, i64 %i.06
  %5 = load ptr, ptr %ptridx, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %common.ret, label %ifend

common.ret:                                       ; preds = %ifend, %for.body, %for.entry
  %common.ret.op = phi i64 [ -1, %for.entry ], [ %i.06, %for.body ], [ -1, %ifend ]
  ret i64 %common.ret.op

ifend:                                            ; preds = %for.body
  %7 = add nuw nsw i64 %i.06, 1
  %8 = icmp slt i64 %7, %2
  br i1 %8, label %for.body, label %common.ret
}

define internal noalias ptr @Map_string_CGEnumType__get_buckets(ptr nocapture readonly %0) {
for.entry:
  %1 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_Bucket_string_CGEnumType__, ptr %1, align 8
  %memberidx.i = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %1, i64 0, i32 2
  %memberidx1.i = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %1, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_Bucket_string_CGEnumType__, ptr %1, i64 0, i32 1
  %2 = tail call ptr @malloc(i32 64)
  store ptr %2, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %memberidx2 = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i64 0, i32 3
  %3 = load i64, ptr %memberidx2, align 4
  %4 = icmp sgt i64 %3, 0
  br i1 %4, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %for.entry
  %memberidx3 = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %ifend
  %5 = phi i64 [ %3, %for.body.lr.ph ], [ %19, %ifend ]
  %6 = phi ptr [ %2, %for.body.lr.ph ], [ %20, %ifend ]
  %7 = phi ptr [ %2, %for.body.lr.ph ], [ %21, %ifend ]
  %8 = phi i64 [ 8, %for.body.lr.ph ], [ %22, %ifend ]
  %9 = phi i64 [ 0, %for.body.lr.ph ], [ %23, %ifend ]
  %i.011 = phi i64 [ 0, %for.body.lr.ph ], [ %24, %ifend ]
  %10 = load ptr, ptr %memberidx3, align 8
  %ptridx = getelementptr inbounds ptr, ptr %10, i64 %i.011
  %11 = load ptr, ptr %ptridx, align 8
  %memberidx4 = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %11, i64 0, i32 3
  %12 = load i1, ptr %memberidx4, align 1
  br i1 %12, label %ifend, label %if.entry

for.end:                                          ; preds = %ifend, %for.entry
  ret ptr %1

if.entry:                                         ; preds = %for.body
  %.not.i = icmp slt i64 %9, %8
  br i1 %.not.i, label %Array_Bucket_string_CGEnumType_____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %if.entry
  %13 = shl i64 %8, 1
  store i64 %13, ptr %memberidx1.i, align 4
  %14 = shl i64 %8, 4
  %15 = tail call ptr @realloc(ptr %7, i64 %14)
  store ptr %15, ptr %memberidx2.i, align 8
  br label %Array_Bucket_string_CGEnumType_____sl__.exit

Array_Bucket_string_CGEnumType_____sl__.exit:     ; preds = %if.entry, %if.entry.i
  %16 = phi ptr [ %6, %if.entry ], [ %15, %if.entry.i ]
  %17 = phi i64 [ %8, %if.entry ], [ %13, %if.entry.i ]
  %18 = add i64 %9, 1
  store i64 %18, ptr %memberidx.i, align 4
  %ptridx.i = getelementptr inbounds ptr, ptr %16, i64 %9
  store ptr %11, ptr %ptridx.i, align 8
  %.pre = load i64, ptr %memberidx2, align 4
  br label %ifend

ifend:                                            ; preds = %for.body, %Array_Bucket_string_CGEnumType_____sl__.exit
  %19 = phi i64 [ %5, %for.body ], [ %.pre, %Array_Bucket_string_CGEnumType_____sl__.exit ]
  %20 = phi ptr [ %6, %for.body ], [ %16, %Array_Bucket_string_CGEnumType_____sl__.exit ]
  %21 = phi ptr [ %7, %for.body ], [ %16, %Array_Bucket_string_CGEnumType_____sl__.exit ]
  %22 = phi i64 [ %8, %for.body ], [ %17, %Array_Bucket_string_CGEnumType_____sl__.exit ]
  %23 = phi i64 [ %9, %for.body ], [ %18, %Array_Bucket_string_CGEnumType_____sl__.exit ]
  %24 = add nuw nsw i64 %i.011, 1
  %25 = icmp slt i64 %24, %19
  br i1 %25, label %for.body, label %for.end
}

define internal ptr @Map_string_CGEnumType__get(ptr nocapture readonly %0, ptr %1) {
  %3 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %4 = load ptr, ptr %1, align 8
  %memberidx.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %4, i64 0, i32 5
  %5 = load ptr, ptr %memberidx.i, align 8
  %6 = tail call ptr %5(ptr nonnull %1)
  %7 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %3, ptr nonnull @22, ptr %6)
  %8 = load ptr, ptr %3, align 8
  %9 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %9, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 1
  store ptr %8, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 2
  store i64 %7, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %9, i64 0, i32 3
  store i64 %7, ptr %memberidx2.i.i, align 4
  call void @free(ptr %6)
  %10 = load i64, ptr %memberidx1.i.i, align 4
  %11 = icmp sgt i64 %10, 0
  br i1 %11, label %for.body.i, label %Map_string_CGEnumType__hash_fnc.exit

for.body.i:                                       ; preds = %2, %for.body.i
  %i.0.i36 = phi i64 [ %18, %for.body.i ], [ 0, %2 ]
  %hash.0.i35 = phi i64 [ %17, %for.body.i ], [ 0, %2 ]
  %12 = shl i64 %hash.0.i35, 1
  %13 = load ptr, ptr %9, align 8
  %memberidx2.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %13, i64 0, i32 2
  %14 = load ptr, ptr %memberidx2.i, align 8
  %15 = call i8 %14(ptr nonnull %9, i64 %i.0.i36)
  %16 = sext i8 %15 to i64
  %17 = add i64 %12, %16
  %18 = add nuw nsw i64 %i.0.i36, 1
  %19 = load i64, ptr %memberidx1.i.i, align 4
  %20 = icmp slt i64 %18, %19
  br i1 %20, label %for.body.i, label %Map_string_CGEnumType__hash_fnc.exit

Map_string_CGEnumType__hash_fnc.exit:             ; preds = %for.body.i, %2
  %hash.0.i.lcssa = phi i64 [ 0, %2 ], [ %17, %for.body.i ]
  %21 = call i64 @llvm.abs.i64(i64 %hash.0.i.lcssa, i1 false)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %memberidx = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i64 0, i32 3
  %22 = load i64, ptr %memberidx, align 4
  %23 = srem i64 %21, %22
  %memberidx1 = getelementptr inbounds %Map_string_CGEnumType_, ptr %0, i64 0, i32 1
  %24 = load ptr, ptr %memberidx1, align 8
  %ptridx = getelementptr inbounds ptr, ptr %24, i64 %23
  %25 = load ptr, ptr %ptridx, align 8
  %memberidx2 = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %25, i64 0, i32 3
  %26 = load i1, ptr %memberidx2, align 1
  br i1 %26, label %common.ret, label %while.entry.preheader

while.entry.preheader:                            ; preds = %Map_string_CGEnumType__hash_fnc.exit
  %memberidx1.i33 = getelementptr inbounds %string, ptr %1, i64 0, i32 2
  %memberidx3.i = getelementptr inbounds %string, ptr %1, i64 0, i32 1
  br label %while.entry

while.entry:                                      ; preds = %while.entry.preheader, %else
  %27 = phi ptr [ %37, %else ], [ %24, %while.entry.preheader ]
  %28 = phi i64 [ %38, %else ], [ %22, %while.entry.preheader ]
  %29 = phi ptr [ %41, %else ], [ %25, %while.entry.preheader ]
  %hash.0 = phi i64 [ %40, %else ], [ %23, %while.entry.preheader ]
  %memberidx5 = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %29, i64 0, i32 1
  %30 = load ptr, ptr %memberidx5, align 8
  %memberidx.i32 = getelementptr inbounds %string, ptr %30, i64 0, i32 2
  %31 = load i64, ptr %memberidx.i32, align 4
  %32 = load i64, ptr %memberidx1.i33, align 4
  %.not.i = icmp eq i64 %31, %32
  br i1 %.not.i, label %ifend.i, label %else

ifend.i:                                          ; preds = %while.entry
  %memberidx2.i34 = getelementptr inbounds %string, ptr %30, i64 0, i32 1
  %33 = load ptr, ptr %memberidx2.i34, align 8
  %34 = load ptr, ptr %memberidx3.i, align 8
  %35 = call i64 @memcmp(ptr %33, ptr %34, i64 %31)
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %while.end, label %ifend.i.else_crit_edge

ifend.i.else_crit_edge:                           ; preds = %ifend.i
  %.pre = load i64, ptr %memberidx, align 4
  %.pre37 = load ptr, ptr %memberidx1, align 8
  br label %else

while.end:                                        ; preds = %ifend.i
  %.pre38.pre = load ptr, ptr %memberidx1, align 8
  %ptridx11.phi.trans.insert.phi.trans.insert = getelementptr inbounds ptr, ptr %.pre38.pre, i64 %hash.0
  %.pre39.pre = load ptr, ptr %ptridx11.phi.trans.insert.phi.trans.insert, align 8
  %memberidx12.phi.trans.insert.phi.trans.insert = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %.pre39.pre, i64 0, i32 3
  %.pre40.pre = load i1, ptr %memberidx12.phi.trans.insert.phi.trans.insert, align 1
  br i1 %.pre40.pre, label %common.ret, label %if.entry13

else:                                             ; preds = %ifend.i.else_crit_edge, %while.entry
  %37 = phi ptr [ %.pre37, %ifend.i.else_crit_edge ], [ %27, %while.entry ]
  %38 = phi i64 [ %.pre, %ifend.i.else_crit_edge ], [ %28, %while.entry ]
  %39 = add i64 %hash.0, 1
  %40 = srem i64 %39, %38
  %ptridx8 = getelementptr inbounds ptr, ptr %37, i64 %40
  %41 = load ptr, ptr %ptridx8, align 8
  %memberidx9 = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %41, i64 0, i32 3
  %42 = load i1, ptr %memberidx9, align 1
  br i1 %42, label %common.ret, label %while.entry

common.ret:                                       ; preds = %else, %Map_string_CGEnumType__hash_fnc.exit, %while.end, %if.entry13
  %common.ret.op = phi ptr [ %43, %if.entry13 ], [ null, %while.end ], [ null, %Map_string_CGEnumType__hash_fnc.exit ], [ null, %else ]
  ret ptr %common.ret.op

if.entry13:                                       ; preds = %while.end
  %memberidx18 = getelementptr inbounds %Bucket_string_CGEnumType_, ptr %.pre39.pre, i64 0, i32 2
  %43 = load ptr, ptr %memberidx18, align 8
  br label %common.ret
}

define internal fastcc ptr @CodeGen_codegen_bin_exp(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %args.i = alloca [2 x ptr], align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %BinaryExpression, ptr %2, i64 0, i32 5
  %6 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %BinaryExpression, ptr %2, i64 0, i32 4
  %7 = load ptr, ptr %memberidx1, align 8
  %memberidx2 = getelementptr inbounds %Expression, ptr %7, i64 0, i32 3
  %8 = load ptr, ptr %memberidx2, align 8
  %9 = load i64, ptr %8, align 4
  %memberidx4 = getelementptr inbounds %BinaryExpression, ptr %2, i64 0, i32 6
  %10 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Expression, ptr %10, i64 0, i32 3
  %11 = load ptr, ptr %memberidx5, align 8
  %12 = load i64, ptr %11, align 4
  %.not = icmp eq i64 %9, %12
  br i1 %.not, label %ifend, label %if.entry

if.entry:                                         ; preds = %3
  switch i64 %6, label %ifend15 [
    i64 11, label %if.entry7
    i64 12, label %if.entry10
    i64 19, label %if.entry13
  ]

ifend:                                            ; preds = %3
  %13 = icmp eq i64 %6, 19
  br i1 %13, label %if.entry13, label %ifend15

common.ret:                                       ; preds = %true_block181, %false_block182, %true_block174, %false_block175, %true_block167, %false_block168, %true_block157, %false_block158, %true_block146, %false_block147, %true_block121, %false_block122, %true_block114, %false_block115, %true_block107, %false_block108, %true_block100, %false_block101, %true_block93, %false_block94, %true_block86, %false_block87, %true_block79, %false_block80, %true_block66, %false_block67, %true_block59, %false_block60, %true_block52, %false_block53, %true_block25, %false_block26, %if.entry140, %if.entry137, %if.entry134, %if.entry131, %if.entry128, %if.entry73, %if.entry70, %ifend48, %end41, %CodeGen_codegen_pow_expr.exit, %if.entry22, %CodeGen_get_expr_mem.exit, %if.entry10, %if.entry7
  %common.ret.op = phi ptr [ %15, %if.entry7 ], [ %17, %if.entry10 ], [ %24, %CodeGen_get_expr_mem.exit ], [ %47, %if.entry22 ], [ %70, %CodeGen_codegen_pow_expr.exit ], [ %97, %end41 ], [ null, %ifend48 ], [ %125, %if.entry70 ], [ %126, %if.entry73 ], [ %146, %if.entry128 ], [ %147, %if.entry131 ], [ %148, %if.entry134 ], [ %149, %if.entry137 ], [ %150, %if.entry140 ], [ %48, %true_block25 ], [ %49, %false_block26 ], [ %119, %true_block52 ], [ %120, %false_block53 ], [ %121, %true_block59 ], [ %122, %false_block60 ], [ %123, %true_block66 ], [ %124, %false_block67 ], [ %130, %true_block79 ], [ %131, %false_block80 ], [ %133, %true_block86 ], [ %134, %false_block87 ], [ %135, %true_block93 ], [ %136, %false_block94 ], [ %137, %true_block100 ], [ %138, %false_block101 ], [ %139, %true_block107 ], [ %140, %false_block108 ], [ %141, %true_block114 ], [ %142, %false_block115 ], [ %143, %true_block121 ], [ %144, %false_block122 ], [ %154, %true_block146 ], [ %155, %false_block147 ], [ %156, %true_block157 ], [ %157, %false_block158 ], [ %158, %true_block167 ], [ %159, %false_block168 ], [ %160, %true_block174 ], [ %161, %false_block175 ], [ %162, %true_block181 ], [ %163, %false_block182 ]
  ret ptr %common.ret.op

if.entry7:                                        ; preds = %if.entry
  %14 = tail call ptr @LLVMInt1Type()
  %15 = tail call ptr @LLVMConstInt(ptr %14, i64 0, i1 false)
  br label %common.ret

if.entry10:                                       ; preds = %if.entry
  %16 = tail call ptr @LLVMInt1Type()
  %17 = tail call ptr @LLVMConstInt(ptr %16, i64 1, i1 false)
  br label %common.ret

if.entry13:                                       ; preds = %if.entry, %ifend
  %memberidx.i284 = getelementptr inbounds %Expression, ptr %7, i64 0, i32 2
  %18 = load i64, ptr %memberidx.i284, align 4
  switch i64 %18, label %ifend8.i [
    i64 7, label %if.entry.i
    i64 13, label %if.entry2.i
    i64 12, label %if.entry6.i
  ]

if.entry.i:                                       ; preds = %if.entry13
  %19 = tail call fastcc ptr @CodeGen_get_var_expr_mem(ptr %0, ptr nonnull %7)
  br label %CodeGen_get_expr_mem.exit

if.entry2.i:                                      ; preds = %if.entry13
  %20 = tail call fastcc ptr @CodeGen_get_index_expr_mem(ptr %0, ptr %1, ptr nonnull %7)
  br label %CodeGen_get_expr_mem.exit

if.entry6.i:                                      ; preds = %if.entry13
  %21 = tail call fastcc ptr @CodeGen_get_member_expr_mem(ptr %0, ptr %1, ptr nonnull %7, ptr null)
  br label %CodeGen_get_expr_mem.exit

ifend8.i:                                         ; preds = %if.entry13
  %22 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr nonnull %7)
  br label %CodeGen_get_expr_mem.exit

CodeGen_get_expr_mem.exit:                        ; preds = %if.entry.i, %if.entry2.i, %if.entry6.i, %ifend8.i
  %common.ret.op.i = phi ptr [ %19, %if.entry.i ], [ %20, %if.entry2.i ], [ %21, %if.entry6.i ], [ %22, %ifend8.i ]
  %23 = load ptr, ptr %memberidx4, align 8
  %24 = tail call fastcc ptr @CodeGen_store_expr_to_mem(ptr %0, ptr %1, ptr %common.ret.op.i, ptr %23)
  br label %common.ret

ifend15:                                          ; preds = %if.entry, %ifend
  %25 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr nonnull %7)
  %26 = load ptr, ptr %memberidx4, align 8
  %27 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %26)
  %28 = load ptr, ptr %memberidx4, align 8
  %memberidx.i = getelementptr inbounds %Expression, ptr %28, i64 0, i32 2
  %29 = load i64, ptr %memberidx.i, align 4
  %30 = icmp eq i64 %29, 5
  %31 = icmp eq i64 %6, 11
  %32 = icmp eq i64 %6, 12
  %33 = add i64 %6, -11
  %34 = icmp ult i64 %33, 2
  %35 = and i1 %34, %30
  br i1 %35, label %if.entry19, label %ifend21

if.entry19:                                       ; preds = %ifend15
  %36 = tail call i1 @LLVMIsConstant(ptr %25)
  br i1 %36, label %if.entry22, label %ifend24

ifend21:                                          ; preds = %ifend15
  %37 = load ptr, ptr %memberidx1, align 8
  %memberidx30 = getelementptr inbounds %Expression, ptr %37, i64 0, i32 3
  %38 = load ptr, ptr %memberidx30, align 8
  %memberidx32 = getelementptr inbounds %Expression, ptr %28, i64 0, i32 3
  %39 = load ptr, ptr %memberidx32, align 8
  %40 = load i64, ptr %39, align 4
  %41 = add i64 %40, -1
  %42 = icmp ult i64 %41, 11
  %43 = icmp eq i64 %6, 6
  %44 = and i1 %43, %42
  br i1 %44, label %if.entry33, label %ifend35

if.entry22:                                       ; preds = %if.entry19
  %45 = tail call i1 @LLVMIsNull(ptr %25)
  %46 = tail call ptr @LLVMInt1Type()
  %..i = zext i1 %45 to i64
  %47 = tail call ptr @LLVMConstInt(ptr %46, i64 %..i, i1 false)
  br label %common.ret

ifend24:                                          ; preds = %if.entry19
  br i1 %31, label %true_block25, label %false_block26

true_block25:                                     ; preds = %ifend24
  %48 = tail call ptr @LLVMBuildIsNull(ptr %1, ptr %25, ptr nonnull @27)
  br label %common.ret

false_block26:                                    ; preds = %ifend24
  %49 = tail call ptr @LLVMBuildIsNotNull(ptr %1, ptr %25, ptr nonnull @27)
  br label %common.ret

if.entry33:                                       ; preds = %ifend21
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %args.i)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  store ptr %25, ptr %args.i, align 8
  %50 = getelementptr inbounds ptr, ptr %args.i, i64 1
  store ptr %27, ptr %50, align 8
  %51 = tail call fastcc ptr @dump_type(ptr nonnull %39, i1 true)
  %52 = load ptr, ptr %51, align 8
  %memberidx.i276 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %52, i64 0, i32 5
  %53 = load ptr, ptr %memberidx.i276, align 8
  %54 = tail call ptr %53(ptr nonnull %51)
  %55 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @295, ptr %54)
  %56 = load ptr, ptr %4, align 8
  %57 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %57, align 8
  %memberidx.i.i277 = getelementptr inbounds %string, ptr %57, i64 0, i32 1
  store ptr %56, ptr %memberidx.i.i277, align 8
  %memberidx1.i.i278 = getelementptr inbounds %string, ptr %57, i64 0, i32 2
  store i64 %55, ptr %memberidx1.i.i278, align 4
  %memberidx2.i.i279 = getelementptr inbounds %string, ptr %57, i64 0, i32 3
  store i64 %55, ptr %memberidx2.i.i279, align 4
  call void @free(ptr %54)
  %58 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr nonnull %39, i1 true)
  %59 = load ptr, ptr %0, align 8
  %60 = call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMTypeRef_, ptr %60, align 8
  %memberidx.i12.i = getelementptr inbounds %Array_LLVMTypeRef_, ptr %60, i64 0, i32 2
  %memberidx1.i13.i = getelementptr inbounds %Array_LLVMTypeRef_, ptr %60, i64 0, i32 3
  store i64 16, ptr %memberidx1.i13.i, align 4
  %memberidx2.i14.i = getelementptr inbounds %Array_LLVMTypeRef_, ptr %60, i64 0, i32 1
  %61 = call ptr @malloc(i32 128)
  store ptr %61, ptr %memberidx2.i14.i, align 8
  store ptr %58, ptr %61, align 8
  %62 = getelementptr inbounds ptr, ptr %61, i64 1
  store ptr %58, ptr %62, align 8
  store i64 2, ptr %memberidx.i12.i, align 4
  %63 = call ptr @malloc(i32 16)
  %memberidx1.i.i.i281 = getelementptr inbounds %IntrinsicResult, ptr %63, i64 0, i32 1
  store i64 0, ptr %63, align 8
  %64 = call ptr @LLVMFunctionType(ptr %58, ptr nonnull %61, i64 2, i1 false)
  store ptr %64, ptr %memberidx1.i.i.i281, align 8
  %65 = load ptr, ptr %57, align 8
  %memberidx3.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %65, i64 0, i32 5
  %66 = load ptr, ptr %memberidx3.i.i, align 8
  %67 = call ptr %66(ptr nonnull %57)
  %68 = call ptr @LLVMGetNamedFunction(ptr %59, ptr %67)
  %.not.i.i = icmp eq ptr %68, null
  br i1 %.not.i.i, label %else.i.i, label %CodeGen_codegen_pow_expr.exit

else.i.i:                                         ; preds = %if.entry33
  %69 = call ptr @LLVMAddFunction(ptr %59, ptr %67, ptr %64)
  br label %CodeGen_codegen_pow_expr.exit

CodeGen_codegen_pow_expr.exit:                    ; preds = %if.entry33, %else.i.i
  %storemerge.i.i = phi ptr [ %69, %else.i.i ], [ %68, %if.entry33 ]
  store ptr %storemerge.i.i, ptr %63, align 8
  %70 = call ptr @LLVMBuildCall2(ptr %1, ptr %64, ptr %storemerge.i.i, ptr nonnull %args.i, i64 2, ptr nonnull @27)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %args.i)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  br label %common.ret

ifend35:                                          ; preds = %ifend21
  %71 = load i64, ptr %38, align 4
  %72 = icmp eq i64 %71, 15
  br i1 %72, label %if.entry36, label %ifend38

if.entry36:                                       ; preds = %ifend35
  %indices = alloca [1 x ptr], align 8
  %73 = icmp eq i64 %6, 1
  br i1 %73, label %end41, label %false_block40

ifend38:                                          ; preds = %ifend35
  %74 = tail call i1 @LLVMIsConstant(ptr %25)
  %75 = tail call i1 @LLVMIsConstant(ptr %27)
  %76 = and i1 %74, %75
  %77 = load i64, ptr %39, align 4
  %78 = load i64, ptr %38, align 4
  %79 = icmp eq i64 %78, 20
  br i1 %79, label %if.entry.i288, label %is_object.exit

if.entry.i288:                                    ; preds = %ifend38, %if.entry.i288
  %.tr5.i = phi ptr [ %80, %if.entry.i288 ], [ %38, %ifend38 ]
  %memberidx1.i287 = getelementptr inbounds %GenericType, ptr %.tr5.i, i64 0, i32 3
  %80 = load ptr, ptr %memberidx1.i287, align 8
  %81 = load i64, ptr %80, align 4
  %82 = icmp eq i64 %81, 20
  br i1 %82, label %if.entry.i288, label %is_object.exit

is_object.exit:                                   ; preds = %if.entry.i288, %ifend38
  %.lcssa.i = phi i64 [ %78, %ifend38 ], [ %81, %if.entry.i288 ]
  %83 = icmp eq i64 %.lcssa.i, 13
  %84 = icmp eq i64 %77, 20
  br i1 %84, label %if.entry.i291, label %is_object.exit293

if.entry.i291:                                    ; preds = %is_object.exit, %if.entry.i291
  %.tr5.i289 = phi ptr [ %85, %if.entry.i291 ], [ %39, %is_object.exit ]
  %memberidx1.i290 = getelementptr inbounds %GenericType, ptr %.tr5.i289, i64 0, i32 3
  %85 = load ptr, ptr %memberidx1.i290, align 8
  %86 = load i64, ptr %85, align 4
  %87 = icmp eq i64 %86, 20
  br i1 %87, label %if.entry.i291, label %is_object.exit293

is_object.exit293:                                ; preds = %if.entry.i291, %is_object.exit
  %.lcssa.i292 = phi i64 [ %77, %is_object.exit ], [ %86, %if.entry.i291 ]
  %88 = icmp eq i64 %.lcssa.i292, 13
  %89 = and i1 %83, %88
  %90 = and i1 %34, %89
  %91 = freeze i1 %90
  br i1 %91, label %if.entry46, label %switch.early.test

switch.early.test:                                ; preds = %is_object.exit293
  switch i64 %77, label %else47 [
    i64 14, label %if.entry46
    i64 7, label %if.entry46
    i64 6, label %if.entry46
    i64 5, label %if.entry46
    i64 4, label %if.entry46
    i64 3, label %if.entry46
    i64 2, label %if.entry46
    i64 1, label %if.entry46
  ]

false_block40:                                    ; preds = %if.entry36
  %92 = tail call i1 @LLVMIsConstant(ptr %27)
  br i1 %92, label %true_block.i, label %false_block.i

true_block.i:                                     ; preds = %false_block40
  %93 = tail call ptr @LLVMConstNeg(ptr %27)
  br label %end41

false_block.i:                                    ; preds = %false_block40
  %94 = tail call ptr @LLVMBuildNeg(ptr %1, ptr %27, ptr nonnull @27)
  br label %end41

end41:                                            ; preds = %if.entry36, %false_block.i, %true_block.i
  %ternary42 = phi ptr [ %93, %true_block.i ], [ %94, %false_block.i ], [ %27, %if.entry36 ]
  store ptr %ternary42, ptr %indices, align 8
  %memberidx43 = getelementptr inbounds %PointerType, ptr %38, i64 0, i32 1
  %95 = load ptr, ptr %memberidx43, align 8
  %96 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %95, i1 true)
  %97 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %96, ptr %25, ptr nonnull %indices, i64 1, ptr nonnull @27)
  br label %common.ret

if.entry46:                                       ; preds = %switch.early.test, %switch.early.test, %switch.early.test, %switch.early.test, %switch.early.test, %switch.early.test, %switch.early.test, %switch.early.test, %is_object.exit293
  switch i64 %6, label %else74 [
    i64 1, label %if.entry49
    i64 2, label %if.entry56
    i64 3, label %if.entry63
    i64 4, label %if.entry70
    i64 5, label %if.entry73
  ]

else47:                                           ; preds = %switch.early.test
  %98 = and i64 %77, -4
  %99 = icmp eq i64 %98, 8
  br i1 %99, label %if.entry125, label %else126

ifend48:                                          ; preds = %else84, %else172, %else126, %else144
  %100 = tail call fastcc ptr @dump_bin_op(i64 %6)
  %101 = load ptr, ptr %100, align 8
  %memberidx186 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %101, i64 0, i32 5
  %102 = load ptr, ptr %memberidx186, align 8
  %103 = tail call ptr %102(ptr nonnull %100)
  %104 = load i64, ptr %39, align 4
  %105 = alloca ptr, align 8
  %106 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %105, ptr nonnull @296, i64 %78, ptr %103, i64 %104)
  %107 = load ptr, ptr %105, align 8
  %108 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %108, align 8
  %memberidx.i274 = getelementptr inbounds %string, ptr %108, i64 0, i32 1
  store ptr %107, ptr %memberidx.i274, align 8
  %memberidx1.i = getelementptr inbounds %string, ptr %108, i64 0, i32 2
  store i64 %106, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %string, ptr %108, i64 0, i32 3
  store i64 %106, ptr %memberidx2.i, align 4
  tail call void @free(ptr %103)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %109 = load ptr, ptr %108, align 8
  %memberidx.i275 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %109, i64 0, i32 5
  %110 = load ptr, ptr %memberidx.i275, align 8
  %111 = call ptr %110(ptr nonnull %108)
  %112 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @270, ptr %111)
  %113 = load ptr, ptr %5, align 8
  %114 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %114, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %114, i64 0, i32 1
  store ptr %113, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %114, i64 0, i32 2
  store i64 %112, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %114, i64 0, i32 3
  store i64 %112, ptr %memberidx2.i.i, align 4
  call void @free(ptr %111)
  %115 = load ptr, ptr %114, align 8
  %memberidx.i.i.i = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %115, i64 0, i32 3
  %116 = load ptr, ptr %memberidx.i.i.i, align 8
  %117 = call ptr %116(ptr nonnull %114)
  %118 = load i64, ptr %memberidx1.i.i, align 4
  call void @write(i64 1, ptr %117, i64 %118)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  br label %common.ret

if.entry49:                                       ; preds = %if.entry46
  br i1 %76, label %true_block52, label %false_block53

true_block52:                                     ; preds = %if.entry49
  %119 = tail call ptr @LLVMConstAdd(ptr %25, ptr %27)
  br label %common.ret

false_block53:                                    ; preds = %if.entry49
  %120 = tail call ptr @LLVMBuildAdd(ptr %1, ptr %25, ptr %27, ptr nonnull @27)
  br label %common.ret

if.entry56:                                       ; preds = %if.entry46
  br i1 %76, label %true_block59, label %false_block60

true_block59:                                     ; preds = %if.entry56
  %121 = tail call ptr @LLVMConstSub(ptr %25, ptr %27)
  br label %common.ret

false_block60:                                    ; preds = %if.entry56
  %122 = tail call ptr @LLVMBuildSub(ptr %1, ptr %25, ptr %27, ptr nonnull @27)
  br label %common.ret

if.entry63:                                       ; preds = %if.entry46
  br i1 %76, label %true_block66, label %false_block67

true_block66:                                     ; preds = %if.entry63
  %123 = tail call ptr @LLVMConstMul(ptr %25, ptr %27)
  br label %common.ret

false_block67:                                    ; preds = %if.entry63
  %124 = tail call ptr @LLVMBuildMul(ptr %1, ptr %25, ptr %27, ptr nonnull @27)
  br label %common.ret

if.entry70:                                       ; preds = %if.entry46
  %125 = tail call ptr @LLVMBuildSDiv(ptr %1, ptr %25, ptr %27, ptr nonnull @27)
  br label %common.ret

if.entry73:                                       ; preds = %if.entry46
  %126 = tail call ptr @LLVMBuildSRem(ptr %1, ptr %25, ptr %27, ptr nonnull @27)
  br label %common.ret

else74:                                           ; preds = %if.entry46
  %127 = add i64 %6, -7
  %128 = icmp ult i64 %127, 4
  br i1 %128, label %if.entry76, label %else77

if.entry76:                                       ; preds = %else74
  %129 = add nuw nsw i64 %6, 31
  br i1 %76, label %true_block79, label %false_block80

else77:                                           ; preds = %else74
  br i1 %34, label %if.entry83, label %else84

true_block79:                                     ; preds = %if.entry76
  %130 = tail call ptr @LLVMConstICmp(i64 %129, ptr %25, ptr %27)
  br label %common.ret

false_block80:                                    ; preds = %if.entry76
  %131 = tail call ptr @LLVMBuildICmp(ptr %1, i64 %129, ptr %25, ptr %27, ptr nonnull @27)
  br label %common.ret

if.entry83:                                       ; preds = %else77
  %132 = add nuw nsw i64 %6, 21
  br i1 %76, label %true_block86, label %false_block87

else84:                                           ; preds = %else77
  switch i64 %6, label %ifend48 [
    i64 13, label %if.entry90
    i64 14, label %if.entry97
    i64 15, label %if.entry104
    i64 16, label %if.entry111
    i64 17, label %if.entry118
  ]

true_block86:                                     ; preds = %if.entry83
  %133 = tail call ptr @LLVMConstICmp(i64 %132, ptr %25, ptr %27)
  br label %common.ret

false_block87:                                    ; preds = %if.entry83
  %134 = tail call ptr @LLVMBuildICmp(ptr %1, i64 %132, ptr %25, ptr %27, ptr nonnull @27)
  br label %common.ret

if.entry90:                                       ; preds = %else84
  br i1 %76, label %true_block93, label %false_block94

true_block93:                                     ; preds = %if.entry90
  %135 = tail call ptr @LLVMConstShl(ptr %25, ptr %27)
  br label %common.ret

false_block94:                                    ; preds = %if.entry90
  %136 = tail call ptr @LLVMBuildShl(ptr %1, ptr %25, ptr %27, ptr nonnull @27)
  br label %common.ret

if.entry97:                                       ; preds = %else84
  br i1 %76, label %true_block100, label %false_block101

true_block100:                                    ; preds = %if.entry97
  %137 = tail call ptr @LLVMConstAShr(ptr %25, ptr %27)
  br label %common.ret

false_block101:                                   ; preds = %if.entry97
  %138 = tail call ptr @LLVMBuildAShr(ptr %1, ptr %25, ptr %27, ptr nonnull @27)
  br label %common.ret

if.entry104:                                      ; preds = %else84
  br i1 %76, label %true_block107, label %false_block108

true_block107:                                    ; preds = %if.entry104
  %139 = tail call ptr @LLVMConstOr(ptr %25, ptr %27)
  br label %common.ret

false_block108:                                   ; preds = %if.entry104
  %140 = tail call ptr @LLVMBuildOr(ptr %1, ptr %25, ptr %27, ptr nonnull @27)
  br label %common.ret

if.entry111:                                      ; preds = %else84
  br i1 %76, label %true_block114, label %false_block115

true_block114:                                    ; preds = %if.entry111
  %141 = tail call ptr @LLVMConstAnd(ptr %25, ptr %27)
  br label %common.ret

false_block115:                                   ; preds = %if.entry111
  %142 = tail call ptr @LLVMBuildAnd(ptr %1, ptr %25, ptr %27, ptr nonnull @27)
  br label %common.ret

if.entry118:                                      ; preds = %else84
  br i1 %76, label %true_block121, label %false_block122

true_block121:                                    ; preds = %if.entry118
  %143 = tail call ptr @LLVMConstXor(ptr %25, ptr %27)
  br label %common.ret

false_block122:                                   ; preds = %if.entry118
  %144 = tail call ptr @LLVMBuildXor(ptr %1, ptr %25, ptr %27, ptr nonnull @27)
  br label %common.ret

if.entry125:                                      ; preds = %else47
  switch i64 %6, label %else141 [
    i64 1, label %if.entry128
    i64 2, label %if.entry131
    i64 3, label %if.entry134
    i64 4, label %if.entry137
    i64 5, label %if.entry140
  ]

else126:                                          ; preds = %else47
  %145 = icmp eq i64 %77, 0
  br i1 %145, label %if.entry161, label %ifend48

if.entry128:                                      ; preds = %if.entry125
  %146 = tail call ptr @LLVMBuildFAdd(ptr %1, ptr %25, ptr %27, ptr nonnull @27)
  br label %common.ret

if.entry131:                                      ; preds = %if.entry125
  %147 = tail call ptr @LLVMBuildFSub(ptr %1, ptr %25, ptr %27, ptr nonnull @27)
  br label %common.ret

if.entry134:                                      ; preds = %if.entry125
  %148 = tail call ptr @LLVMBuildFMul(ptr %1, ptr %25, ptr %27, ptr nonnull @27)
  br label %common.ret

if.entry137:                                      ; preds = %if.entry125
  %149 = tail call ptr @LLVMBuildFDiv(ptr %1, ptr %25, ptr %27, ptr nonnull @27)
  br label %common.ret

if.entry140:                                      ; preds = %if.entry125
  %150 = tail call ptr @LLVMBuildFRem(ptr %1, ptr %25, ptr %27, ptr nonnull @27)
  br label %common.ret

else141:                                          ; preds = %if.entry125
  %151 = add i64 %6, -7
  %152 = icmp ult i64 %151, 4
  br i1 %152, label %if.entry143, label %else144

if.entry143:                                      ; preds = %else141
  %153 = add nsw i64 %6, -5
  br i1 %76, label %true_block146, label %false_block147

else144:                                          ; preds = %else141
  br i1 %34, label %if.entry150, label %ifend48

true_block146:                                    ; preds = %if.entry143
  %154 = tail call ptr @LLVMConstFCmp(i64 %153, ptr %25, ptr %27)
  br label %common.ret

false_block147:                                   ; preds = %if.entry143
  %155 = tail call ptr @LLVMBuildFCmp(ptr %1, i64 %153, ptr %25, ptr %27, ptr nonnull @27)
  br label %common.ret

if.entry150:                                      ; preds = %else144
  %. = select i1 %32, i64 6, i64 1
  br i1 %76, label %true_block157, label %false_block158

true_block157:                                    ; preds = %if.entry150
  %156 = tail call ptr @LLVMConstFCmp(i64 %., ptr %25, ptr %27)
  br label %common.ret

false_block158:                                   ; preds = %if.entry150
  %157 = tail call ptr @LLVMBuildFCmp(ptr %1, i64 %., ptr %25, ptr %27, ptr nonnull @27)
  br label %common.ret

if.entry161:                                      ; preds = %else126
  switch i64 %6, label %else172 [
    i64 16, label %if.entry164
    i64 11, label %if.entry164
    i64 15, label %if.entry171
  ]

if.entry164:                                      ; preds = %if.entry161, %if.entry161
  br i1 %76, label %true_block167, label %false_block168

true_block167:                                    ; preds = %if.entry164
  %158 = tail call ptr @LLVMConstAnd(ptr %25, ptr %27)
  br label %common.ret

false_block168:                                   ; preds = %if.entry164
  %159 = tail call ptr @LLVMBuildAnd(ptr %1, ptr %25, ptr %27, ptr nonnull @27)
  br label %common.ret

if.entry171:                                      ; preds = %if.entry161
  br i1 %76, label %true_block174, label %false_block175

else172:                                          ; preds = %if.entry161
  br i1 %32, label %if.entry178, label %ifend48

true_block174:                                    ; preds = %if.entry171
  %160 = tail call ptr @LLVMConstOr(ptr %25, ptr %27)
  br label %common.ret

false_block175:                                   ; preds = %if.entry171
  %161 = tail call ptr @LLVMBuildOr(ptr %1, ptr %25, ptr %27, ptr nonnull @27)
  br label %common.ret

if.entry178:                                      ; preds = %else172
  br i1 %76, label %true_block181, label %false_block182

true_block181:                                    ; preds = %if.entry178
  %162 = tail call ptr @LLVMConstXor(ptr %25, ptr %27)
  br label %common.ret

false_block182:                                   ; preds = %if.entry178
  %163 = tail call ptr @LLVMBuildXor(ptr %1, ptr %25, ptr %27, ptr nonnull @27)
  br label %common.ret
}

define internal fastcc ptr @CodeGen_codegen_call_exp(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMValueRef_, ptr %7, align 8
  %memberidx.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %7, i64 0, i32 2
  %memberidx1.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %7, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %7, i64 0, i32 1
  %8 = tail call ptr @malloc(i32 64)
  store ptr %8, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %9 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMTypeRef_, ptr %9, align 8
  %memberidx.i68 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %9, i64 0, i32 2
  %memberidx1.i69 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %9, i64 0, i32 3
  store i64 8, ptr %memberidx1.i69, align 4
  %memberidx2.i70 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %9, i64 0, i32 1
  %10 = tail call ptr @malloc(i32 64)
  store ptr %10, ptr %memberidx2.i70, align 8
  store i64 0, ptr %memberidx.i68, align 4
  %memberidx4 = getelementptr inbounds %CallExpression, ptr %2, i64 0, i32 4
  %11 = load ptr, ptr %memberidx4, align 8
  %memberidx5 = getelementptr inbounds %Expression, ptr %11, i64 0, i32 2
  %12 = load i64, ptr %memberidx5, align 4
  %13 = icmp eq i64 %12, 12
  br i1 %13, label %if.entry, label %if.entry17

if.entry:                                         ; preds = %3
  %memberidx7 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 4
  %14 = load ptr, ptr %memberidx7, align 8
  %memberidx8 = getelementptr inbounds %MemberExpression, ptr %11, i64 0, i32 5
  %15 = load ptr, ptr %memberidx8, align 8
  %memberidx.i.i = getelementptr inbounds %PropId, ptr %15, i64 0, i32 1
  %16 = load ptr, ptr %memberidx.i.i, align 8
  %memberidx.i.i.i = getelementptr inbounds %Program, ptr %14, i64 0, i32 1
  %17 = load ptr, ptr %memberidx.i.i.i, align 8
  %18 = load i64, ptr %16, align 4
  %memberidx.i.i.i.i = getelementptr inbounds %Array_Module_, ptr %17, i64 0, i32 1
  %19 = load ptr, ptr %memberidx.i.i.i.i, align 8
  %ptridx.i.i.i.i = getelementptr inbounds ptr, ptr %19, i64 %18
  %20 = load ptr, ptr %ptridx.i.i.i.i, align 8
  %memberidx2.i.i.i = getelementptr inbounds %Module, ptr %20, i64 0, i32 4
  %21 = load ptr, ptr %memberidx2.i.i.i, align 8
  %memberidx3.i.i.i = getelementptr inbounds %TypeId, ptr %16, i64 0, i32 2
  %22 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i.i = getelementptr inbounds %Array_Class_, ptr %21, i64 0, i32 1
  %23 = load ptr, ptr %memberidx.i5.i.i.i, align 8
  %ptridx.i6.i.i.i = getelementptr inbounds ptr, ptr %23, i64 %22
  %24 = load ptr, ptr %ptridx.i6.i.i.i, align 8
  %memberidx.i71 = getelementptr inbounds %Class, ptr %24, i64 0, i32 5
  %25 = load ptr, ptr %memberidx.i71, align 8
  %memberidx1.i72 = getelementptr inbounds %PropId, ptr %15, i64 0, i32 2
  %26 = load i64, ptr %memberidx1.i72, align 4
  %memberidx.i3.i = getelementptr inbounds %Array_ClassMethod_, ptr %25, i64 0, i32 1
  %27 = load ptr, ptr %memberidx.i3.i, align 8
  %ptridx.i.i = getelementptr inbounds ptr, ptr %27, i64 %26
  %28 = load ptr, ptr %ptridx.i.i, align 8
  %memberidx9 = getelementptr inbounds %ClassMethod, ptr %28, i64 0, i32 1
  %29 = load i1, ptr %memberidx9, align 1
  br i1 %29, label %ifend24, label %if.entry10

ifend:                                            ; preds = %if.entry10, %ifend.i
  %common.ret.op.i = phi ptr [ %63, %ifend.i ], [ %43, %if.entry10 ]
  %memberidx15 = getelementptr inbounds %MemberExpression, ptr %11, i64 0, i32 4
  %30 = load ptr, ptr %memberidx15, align 8
  %31 = call fastcc ptr @CodeGen_codegen_expression(ptr nonnull %0, ptr %1, ptr %30)
  %32 = call fastcc ptr @CodeGen_codegen_member_exp(ptr nonnull %0, ptr %1, ptr nonnull %11, ptr %31)
  store i64 1, ptr %memberidx.i, align 4
  store ptr %31, ptr %8, align 8
  %33 = load ptr, ptr %common.ret.op.i, align 8
  %34 = call ptr @LLVMPointerType(ptr %33, i64 0)
  store i64 1, ptr %memberidx.i68, align 4
  store ptr %34, ptr %10, align 8
  %35 = icmp eq ptr %32, null
  br i1 %35, label %ifend.if.entry17_crit_edge, label %for.entry

ifend.if.entry17_crit_edge:                       ; preds = %ifend
  %.pre = load ptr, ptr %memberidx4, align 8
  %memberidx21.phi.trans.insert = getelementptr inbounds %Expression, ptr %.pre, i64 0, i32 2
  %.pre150 = load i64, ptr %memberidx21.phi.trans.insert, align 4
  br label %if.entry17

if.entry10:                                       ; preds = %if.entry
  %memberidx.i136 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 8
  %36 = load ptr, ptr %memberidx.i136, align 8
  %37 = load ptr, ptr %36, align 8
  %memberidx1.i137 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %37, i64 0, i32 1
  %38 = load ptr, ptr %memberidx1.i137, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %memberidx1.i.i138 = getelementptr inbounds %TypeId, ptr %16, i64 0, i32 1
  %39 = load i64, ptr %memberidx1.i.i138, align 4
  %40 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %5, ptr nonnull @276, i64 %18, i64 %39, i64 %22)
  %41 = load ptr, ptr %5, align 8
  %42 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %42, align 8
  %memberidx.i.i.i140 = getelementptr inbounds %string, ptr %42, i64 0, i32 1
  store ptr %41, ptr %memberidx.i.i.i140, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %42, i64 0, i32 2
  store i64 %40, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i141 = getelementptr inbounds %string, ptr %42, i64 0, i32 3
  store i64 %40, ptr %memberidx2.i.i.i141, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  %43 = call ptr %38(ptr nonnull %36, ptr nonnull %42)
  %.not.i129 = icmp eq ptr %43, null
  br i1 %.not.i129, label %ifend.i, label %ifend

ifend.i:                                          ; preds = %if.entry10
  %44 = load ptr, ptr %memberidx7, align 8
  %memberidx.i.i132 = getelementptr inbounds %Program, ptr %44, i64 0, i32 1
  %45 = load ptr, ptr %memberidx.i.i132, align 8
  %46 = load i64, ptr %16, align 4
  %memberidx.i.i.i133 = getelementptr inbounds %Array_Module_, ptr %45, i64 0, i32 1
  %47 = load ptr, ptr %memberidx.i.i.i133, align 8
  %ptridx.i.i.i = getelementptr inbounds ptr, ptr %47, i64 %46
  %48 = load ptr, ptr %ptridx.i.i.i, align 8
  %memberidx2.i.i134 = getelementptr inbounds %Module, ptr %48, i64 0, i32 4
  %49 = load ptr, ptr %memberidx2.i.i134, align 8
  %50 = load i64, ptr %memberidx3.i.i.i, align 4
  %memberidx.i5.i.i = getelementptr inbounds %Array_Class_, ptr %49, i64 0, i32 1
  %51 = load ptr, ptr %memberidx.i5.i.i, align 8
  %ptridx.i6.i.i = getelementptr inbounds ptr, ptr %51, i64 %50
  %52 = load ptr, ptr %ptridx.i6.i.i, align 8
  call fastcc void @CodeGen_declare_class(ptr nonnull %0, ptr %52)
  call fastcc void @CodeGen_codegen_class(ptr nonnull %0, ptr %52)
  %53 = load ptr, ptr %52, align 8
  %54 = load ptr, ptr %memberidx.i136, align 8
  %55 = load ptr, ptr %54, align 8
  %memberidx1.i.i143 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %55, i64 0, i32 1
  %56 = load ptr, ptr %memberidx1.i.i143, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %57 = load i64, ptr %53, align 4
  %memberidx1.i.i.i144 = getelementptr inbounds %TypeId, ptr %53, i64 0, i32 1
  %58 = load i64, ptr %memberidx1.i.i.i144, align 4
  %memberidx2.i.i.i145 = getelementptr inbounds %TypeId, ptr %53, i64 0, i32 2
  %59 = load i64, ptr %memberidx2.i.i.i145, align 4
  %60 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @276, i64 %57, i64 %58, i64 %59)
  %61 = load ptr, ptr %4, align 8
  %62 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %62, align 8
  %memberidx.i.i.i.i146 = getelementptr inbounds %string, ptr %62, i64 0, i32 1
  store ptr %61, ptr %memberidx.i.i.i.i146, align 8
  %memberidx1.i.i.i.i = getelementptr inbounds %string, ptr %62, i64 0, i32 2
  store i64 %60, ptr %memberidx1.i.i.i.i, align 4
  %memberidx2.i.i.i.i = getelementptr inbounds %string, ptr %62, i64 0, i32 3
  store i64 %60, ptr %memberidx2.i.i.i.i, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  %63 = call ptr %56(ptr nonnull %54, ptr nonnull %62)
  br label %ifend

if.entry17:                                       ; preds = %ifend.if.entry17_crit_edge, %3
  %64 = phi i64 [ 1, %ifend.if.entry17_crit_edge ], [ 0, %3 ]
  %65 = phi i64 [ %.pre150, %ifend.if.entry17_crit_edge ], [ %12, %3 ]
  %66 = phi ptr [ %.pre, %ifend.if.entry17_crit_edge ], [ %11, %3 ]
  %67 = icmp eq i64 %65, 7
  br i1 %67, label %if.entry22, label %ifend24

if.entry22:                                       ; preds = %if.entry17
  %memberidx26 = getelementptr inbounds %VarAccessExpression, ptr %66, i64 0, i32 4
  %68 = load ptr, ptr %memberidx26, align 8
  %memberidx27 = getelementptr inbounds %CodeGen, ptr %0, i64 0, i32 10
  %69 = load ptr, ptr %memberidx27, align 8
  %70 = load ptr, ptr %69, align 8
  %memberidx28 = getelementptr inbounds <{ ptr, ptr, ptr }>, ptr %70, i64 0, i32 1
  %71 = load ptr, ptr %memberidx28, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  %memberidx.i84 = getelementptr inbounds %VarId, ptr %68, i64 0, i32 1
  %72 = load i64, ptr %memberidx.i84, align 4
  %73 = load i64, ptr %68, align 4
  %memberidx2.i85 = getelementptr inbounds %VarId, ptr %68, i64 0, i32 2
  %74 = load i64, ptr %memberidx2.i85, align 4
  %75 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %6, ptr nonnull @276, i64 %72, i64 %73, i64 %74)
  %76 = load ptr, ptr %6, align 8
  %77 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %77, align 8
  %memberidx.i.i86 = getelementptr inbounds %string, ptr %77, i64 0, i32 1
  store ptr %76, ptr %memberidx.i.i86, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %77, i64 0, i32 2
  store i64 %75, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i87 = getelementptr inbounds %string, ptr %77, i64 0, i32 3
  store i64 %75, ptr %memberidx2.i.i87, align 4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  %78 = call ptr %71(ptr nonnull %69, ptr nonnull %77)
  %.not = icmp eq ptr %78, null
  br i1 %.not, label %ifend24, label %Array_LLVMTypeRef____sl__.exit105

ifend24:                                          ; preds = %if.entry, %Array_LLVMTypeRef____sl__.exit105, %if.entry22, %if.entry17
  %79 = phi i64 [ %82, %Array_LLVMTypeRef____sl__.exit105 ], [ %64, %if.entry22 ], [ %64, %if.entry17 ], [ 0, %if.entry ]
  %80 = load ptr, ptr %memberidx4, align 8
  %81 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %80)
  br label %for.entry

Array_LLVMTypeRef____sl__.exit105:                ; preds = %if.entry22
  %82 = add nuw nsw i64 %64, 1
  store i64 %82, ptr %memberidx.i, align 4
  %ptridx.i95 = getelementptr inbounds ptr, ptr %8, i64 %64
  store ptr %78, ptr %ptridx.i95, align 8
  %83 = call ptr @LLVMInt8Type()
  %84 = call ptr @LLVMPointerType(ptr %83, i64 0)
  store i64 %82, ptr %memberidx.i68, align 4
  %ptridx.i104 = getelementptr inbounds ptr, ptr %10, i64 %64
  store ptr %84, ptr %ptridx.i104, align 8
  br label %ifend24

for.entry:                                        ; preds = %ifend24, %ifend
  %85 = phi i64 [ %79, %ifend24 ], [ 1, %ifend ]
  %func.1 = phi ptr [ %81, %ifend24 ], [ %32, %ifend ]
  %memberidx33 = getelementptr inbounds %CallExpression, ptr %2, i64 0, i32 5
  %86 = load ptr, ptr %memberidx33, align 8
  %87 = call ptr @malloc(i32 33)
  %memberidx.i106 = getelementptr inbounds %Array_Expression_, ptr %86, i64 0, i32 1
  %88 = load ptr, ptr %memberidx.i106, align 8
  %memberidx1.i107 = getelementptr inbounds %Array_Expression_, ptr %86, i64 0, i32 2
  %89 = load i64, ptr %memberidx1.i107, align 4
  store ptr @VTableArrayIterator_Expression_, ptr %87, align 8
  %memberidx.i.i108 = getelementptr inbounds %Iterator_Expression_, ptr %87, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i108, align 1
  %memberidx1.i.i109 = getelementptr inbounds %ArrayIterator_Expression_, ptr %87, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i109, align 4
  %memberidx2.i.i110 = getelementptr inbounds %ArrayIterator_Expression_, ptr %87, i64 0, i32 4
  store ptr %88, ptr %memberidx2.i.i110, align 8
  %memberidx3.i.i = getelementptr inbounds %ArrayIterator_Expression_, ptr %87, i64 0, i32 3
  store i64 %89, ptr %memberidx3.i.i, align 4
  %90 = load ptr, ptr @VTableArrayIterator_Expression_, align 8
  %91 = call ptr %90(ptr nonnull %87)
  %92 = load i1, ptr %memberidx.i.i108, align 1
  br i1 %92, label %for.end, label %for.body

for.body:                                         ; preds = %for.entry, %Array_LLVMTypeRef____sl__.exit128
  %93 = phi ptr [ %100, %Array_LLVMTypeRef____sl__.exit128 ], [ %8, %for.entry ]
  %94 = phi i64 [ %101, %Array_LLVMTypeRef____sl__.exit128 ], [ 8, %for.entry ]
  %95 = phi i64 [ %102, %Array_LLVMTypeRef____sl__.exit128 ], [ %85, %for.entry ]
  %storemerge149 = phi ptr [ %114, %Array_LLVMTypeRef____sl__.exit128 ], [ %91, %for.entry ]
  %96 = call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %storemerge149)
  %.not.i113 = icmp slt i64 %95, %94
  br i1 %.not.i113, label %Array_LLVMValueRef____sl__.exit119, label %if.entry.i116

if.entry.i116:                                    ; preds = %for.body
  %97 = shl i64 %94, 1
  store i64 %97, ptr %memberidx1.i, align 4
  %98 = shl i64 %94, 4
  %99 = call ptr @realloc(ptr %93, i64 %98)
  store ptr %99, ptr %memberidx2.i, align 8
  br label %Array_LLVMValueRef____sl__.exit119

Array_LLVMValueRef____sl__.exit119:               ; preds = %for.body, %if.entry.i116
  %100 = phi ptr [ %93, %for.body ], [ %99, %if.entry.i116 ]
  %101 = phi i64 [ %94, %for.body ], [ %97, %if.entry.i116 ]
  %102 = add i64 %95, 1
  store i64 %102, ptr %memberidx.i, align 4
  %ptridx.i118 = getelementptr inbounds ptr, ptr %100, i64 %95
  store ptr %96, ptr %ptridx.i118, align 8
  %103 = call ptr @LLVMTypeOf(ptr %96)
  %104 = load i64, ptr %memberidx.i68, align 4
  %105 = load i64, ptr %memberidx1.i69, align 4
  %.not.i122 = icmp slt i64 %104, %105
  br i1 %.not.i122, label %Array_LLVMValueRef____sl__.exit119.Array_LLVMTypeRef____sl__.exit128_crit_edge, label %if.entry.i125

Array_LLVMValueRef____sl__.exit119.Array_LLVMTypeRef____sl__.exit128_crit_edge: ; preds = %Array_LLVMValueRef____sl__.exit119
  %.pre151 = load ptr, ptr %memberidx2.i70, align 8
  br label %Array_LLVMTypeRef____sl__.exit128

if.entry.i125:                                    ; preds = %Array_LLVMValueRef____sl__.exit119
  %106 = shl i64 %105, 1
  store i64 %106, ptr %memberidx1.i69, align 4
  %107 = load ptr, ptr %memberidx2.i70, align 8
  %108 = shl i64 %105, 4
  %109 = call ptr @realloc(ptr %107, i64 %108)
  store ptr %109, ptr %memberidx2.i70, align 8
  br label %Array_LLVMTypeRef____sl__.exit128

Array_LLVMTypeRef____sl__.exit128:                ; preds = %Array_LLVMValueRef____sl__.exit119.Array_LLVMTypeRef____sl__.exit128_crit_edge, %if.entry.i125
  %110 = phi ptr [ %.pre151, %Array_LLVMValueRef____sl__.exit119.Array_LLVMTypeRef____sl__.exit128_crit_edge ], [ %109, %if.entry.i125 ]
  %111 = add i64 %104, 1
  store i64 %111, ptr %memberidx.i68, align 4
  %ptridx.i127 = getelementptr inbounds ptr, ptr %110, i64 %104
  store ptr %103, ptr %ptridx.i127, align 8
  %112 = load ptr, ptr %87, align 8
  %113 = load ptr, ptr %112, align 8
  %114 = call ptr %113(ptr nonnull %87)
  %115 = load i1, ptr %memberidx.i.i108, align 1
  br i1 %115, label %for.end, label %for.body

for.end:                                          ; preds = %Array_LLVMTypeRef____sl__.exit128, %for.entry
  %116 = phi i64 [ %85, %for.entry ], [ %102, %Array_LLVMTypeRef____sl__.exit128 ]
  %117 = phi ptr [ %8, %for.entry ], [ %100, %Array_LLVMTypeRef____sl__.exit128 ]
  %118 = phi i64 [ %85, %for.entry ], [ %111, %Array_LLVMTypeRef____sl__.exit128 ]
  %119 = phi ptr [ %10, %for.entry ], [ %110, %Array_LLVMTypeRef____sl__.exit128 ]
  tail call void @free(ptr nonnull %87)
  %memberidx37 = getelementptr inbounds %Expression, ptr %2, i64 0, i32 3
  %120 = load ptr, ptr %memberidx37, align 8
  %121 = call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %120, i1 true)
  %122 = call ptr @LLVMFunctionType(ptr %121, ptr %119, i64 %118, i1 false)
  %123 = call ptr @LLVMBuildCall2(ptr %1, ptr %122, ptr %func.1, ptr %117, i64 %116, ptr nonnull @27)
  ret ptr %123
}

define internal fastcc ptr @CodeGen_codegen_unary_exp(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %memberidx = getelementptr inbounds %UnaryExpression, ptr %2, i64 0, i32 4
  %4 = load i64, ptr %memberidx, align 4
  %memberidx1 = getelementptr inbounds %UnaryExpression, ptr %2, i64 0, i32 5
  %5 = load ptr, ptr %memberidx1, align 8
  %6 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %5)
  switch i64 %4, label %ifend12 [
    i64 5, label %if.entry
    i64 6, label %if.entry10
  ]

if.entry:                                         ; preds = %3
  %memberidx2 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 3
  %7 = load ptr, ptr %memberidx2, align 8
  %8 = load i64, ptr %7, align 4
  %9 = add i64 %8, -1
  %10 = icmp ult i64 %9, 7
  br i1 %10, label %if.entry3, label %else4

common.ret:                                       ; preds = %else4, %CodeGen_get_expr_mem.exit, %ifend12, %false_block.i, %true_block.i, %true_block, %false_block, %ifend27, %if.entry7
  %common.ret.op = phi ptr [ %16, %if.entry7 ], [ %ternary43, %ifend27 ], [ %19, %true_block ], [ %20, %false_block ], [ %12, %true_block.i ], [ %13, %false_block.i ], [ %6, %ifend12 ], [ %common.ret.op.i, %CodeGen_get_expr_mem.exit ], [ %6, %else4 ]
  ret ptr %common.ret.op

if.entry3:                                        ; preds = %if.entry
  %11 = tail call i1 @LLVMIsConstant(ptr %6)
  br i1 %11, label %true_block.i, label %false_block.i

true_block.i:                                     ; preds = %if.entry3
  %12 = tail call ptr @LLVMConstNeg(ptr %6)
  br label %common.ret

false_block.i:                                    ; preds = %if.entry3
  %13 = tail call ptr @LLVMBuildNeg(ptr %1, ptr %6, ptr nonnull @27)
  br label %common.ret

else4:                                            ; preds = %if.entry
  %14 = and i64 %8, -4
  %15 = icmp eq i64 %14, 8
  br i1 %15, label %if.entry7, label %common.ret

if.entry7:                                        ; preds = %else4
  %16 = tail call ptr @LLVMBuildFNeg(ptr %1, ptr %6, ptr nonnull @27)
  br label %common.ret

if.entry10:                                       ; preds = %3
  %17 = tail call i1 @LLVMIsConstant(ptr %6)
  br i1 %17, label %true_block, label %false_block

ifend12:                                          ; preds = %3
  %18 = icmp eq i64 %4, 7
  switch i64 %4, label %common.ret [
    i64 7, label %if.entry13
    i64 4, label %if.entry13
    i64 3, label %if.entry13
    i64 2, label %if.entry13
    i64 1, label %if.entry13
  ]

true_block:                                       ; preds = %if.entry10
  %19 = tail call ptr @LLVMConstNot(ptr %6)
  br label %common.ret

false_block:                                      ; preds = %if.entry10
  %20 = tail call ptr @LLVMBuildNot(ptr %1, ptr %6, ptr nonnull @27)
  br label %common.ret

if.entry13:                                       ; preds = %ifend12, %ifend12, %ifend12, %ifend12, %ifend12
  %memberidx.i = getelementptr inbounds %Expression, ptr %5, i64 0, i32 2
  %21 = load i64, ptr %memberidx.i, align 4
  switch i64 %21, label %ifend8.i [
    i64 7, label %if.entry.i
    i64 13, label %if.entry2.i
    i64 12, label %if.entry6.i
  ]

if.entry.i:                                       ; preds = %if.entry13
  %22 = tail call fastcc ptr @CodeGen_get_var_expr_mem(ptr %0, ptr nonnull %5)
  br label %CodeGen_get_expr_mem.exit

if.entry2.i:                                      ; preds = %if.entry13
  %23 = tail call fastcc ptr @CodeGen_get_index_expr_mem(ptr %0, ptr %1, ptr nonnull %5)
  br label %CodeGen_get_expr_mem.exit

if.entry6.i:                                      ; preds = %if.entry13
  %24 = tail call fastcc ptr @CodeGen_get_member_expr_mem(ptr %0, ptr %1, ptr nonnull %5, ptr null)
  br label %CodeGen_get_expr_mem.exit

ifend8.i:                                         ; preds = %if.entry13
  %25 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr nonnull %5)
  br label %CodeGen_get_expr_mem.exit

CodeGen_get_expr_mem.exit:                        ; preds = %if.entry.i, %if.entry2.i, %if.entry6.i, %ifend8.i
  %common.ret.op.i = phi ptr [ %22, %if.entry.i ], [ %23, %if.entry2.i ], [ %24, %if.entry6.i ], [ %25, %ifend8.i ]
  br i1 %18, label %common.ret, label %ifend18

ifend18:                                          ; preds = %CodeGen_get_expr_mem.exit
  %memberidx19 = getelementptr inbounds %Expression, ptr %5, i64 0, i32 3
  %26 = load ptr, ptr %memberidx19, align 8
  %27 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %26, i1 true)
  %28 = and i64 %4, -3
  %29 = icmp eq i64 %28, 1
  %. = select i1 %29, i64 1, i64 -1
  %30 = load ptr, ptr %memberidx19, align 8
  %31 = load i64, ptr %30, align 4
  %32 = icmp eq i64 %31, 15
  br i1 %32, label %if.entry25, label %else26

if.entry25:                                       ; preds = %ifend18
  %memberidx29 = getelementptr inbounds %PointerType, ptr %30, i64 0, i32 1
  %33 = load ptr, ptr %memberidx29, align 8
  %34 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %33, i1 true)
  %indices = alloca [1 x ptr], align 8
  %35 = tail call ptr @LLVMIntType(i64 64)
  %36 = tail call ptr @LLVMConstInt(ptr %35, i64 %., i1 false)
  store ptr %36, ptr %indices, align 8
  %37 = call ptr @LLVMBuildInBoundsGEP2(ptr %1, ptr %34, ptr %6, ptr nonnull %indices, i64 1, ptr nonnull @297)
  br label %ifend27

else26:                                           ; preds = %ifend18
  %38 = add i64 %31, -1
  %39 = icmp ult i64 %38, 11
  br i1 %39, label %if.entry32, label %ifend27

ifend27:                                          ; preds = %end37, %else26, %if.entry25
  %40 = phi ptr [ %47, %end37 ], [ null, %else26 ], [ %37, %if.entry25 ]
  %41 = call ptr @LLVMBuildStore(ptr %1, ptr %40, ptr %common.ret.op.i)
  %42 = icmp ugt i64 %4, 1
  %ternary43 = select i1 %42, ptr %6, ptr %40
  br label %common.ret

if.entry32:                                       ; preds = %else26
  %43 = icmp ult i64 %38, 7
  br i1 %43, label %true_block35, label %false_block36

true_block35:                                     ; preds = %if.entry32
  %44 = tail call ptr @LLVMConstInt(ptr %27, i64 %., i1 false)
  br label %end37

false_block36:                                    ; preds = %if.entry32
  %45 = sitofp i64 %. to double
  %46 = tail call ptr @LLVMConstReal(ptr %27, double %45)
  br label %end37

end37:                                            ; preds = %false_block36, %true_block35
  %ternary39 = phi ptr [ %44, %true_block35 ], [ %46, %false_block36 ]
  %47 = tail call ptr @LLVMBuildAdd(ptr %1, ptr %6, ptr %ternary39, ptr nonnull @27)
  br label %ifend27
}

define internal fastcc ptr @CodeGen_codegen_intrinsic_exp(ptr nocapture %0, ptr %1, ptr nocapture readonly %2) unnamed_addr {
  %4 = alloca ptr, align 8
  %memberidx = getelementptr inbounds %IntrinsicCall, ptr %2, i64 0, i32 4
  %5 = load i64, ptr %memberidx, align 4
  %6 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMValueRef_, ptr %6, align 8
  %memberidx.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %6, i64 0, i32 2
  %memberidx1.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %6, i64 0, i32 3
  store i64 8, ptr %memberidx1.i, align 4
  %memberidx2.i = getelementptr inbounds %Array_LLVMValueRef_, ptr %6, i64 0, i32 1
  %7 = tail call ptr @malloc(i32 64)
  store ptr %7, ptr %memberidx2.i, align 8
  store i64 0, ptr %memberidx.i, align 4
  %memberidx3 = getelementptr inbounds %IntrinsicCall, ptr %2, i64 0, i32 5
  %8 = load ptr, ptr %memberidx3, align 8
  %9 = tail call ptr @malloc(i32 33)
  %memberidx.i.i204 = getelementptr inbounds %Array_Expression_, ptr %8, i64 0, i32 1
  %10 = load ptr, ptr %memberidx.i.i204, align 8
  %memberidx1.i.i205 = getelementptr inbounds %Array_Expression_, ptr %8, i64 0, i32 2
  %11 = load i64, ptr %memberidx1.i.i205, align 4
  store ptr @VTableArrayIterator_Expression_, ptr %9, align 8
  %memberidx.i.i.i206 = getelementptr inbounds %Iterator_Expression_, ptr %9, i64 0, i32 1
  store i1 false, ptr %memberidx.i.i.i206, align 1
  %memberidx1.i.i.i207 = getelementptr inbounds %ArrayIterator_Expression_, ptr %9, i64 0, i32 2
  store i64 0, ptr %memberidx1.i.i.i207, align 4
  %memberidx2.i.i.i208 = getelementptr inbounds %ArrayIterator_Expression_, ptr %9, i64 0, i32 4
  store ptr %10, ptr %memberidx2.i.i.i208, align 8
  %memberidx3.i.i.i = getelementptr inbounds %ArrayIterator_Expression_, ptr %9, i64 0, i32 3
  store i64 %11, ptr %memberidx3.i.i.i, align 4
  %12 = load ptr, ptr @VTableArrayIterator_Expression_, align 8
  %13 = tail call ptr %12(ptr nonnull %9)
  %14 = load i1, ptr %memberidx.i.i.i206, align 1
  br i1 %14, label %CodeGen_evaluate_expression_list.exit, label %for.body.i

for.body.i:                                       ; preds = %3, %Array_LLVMValueRef____sl__.exit
  %15 = phi ptr [ %22, %Array_LLVMValueRef____sl__.exit ], [ %7, %3 ]
  %16 = phi i64 [ %23, %Array_LLVMValueRef____sl__.exit ], [ 8, %3 ]
  %17 = phi i64 [ %24, %Array_LLVMValueRef____sl__.exit ], [ 0, %3 ]
  %item.0.i220 = phi ptr [ %27, %Array_LLVMValueRef____sl__.exit ], [ %13, %3 ]
  %18 = tail call fastcc ptr @CodeGen_codegen_expression(ptr %0, ptr %1, ptr %item.0.i220)
  %.not.i = icmp slt i64 %17, %16
  br i1 %.not.i, label %Array_LLVMValueRef____sl__.exit, label %if.entry.i

if.entry.i:                                       ; preds = %for.body.i
  %19 = shl i64 %16, 1
  store i64 %19, ptr %memberidx1.i, align 4
  %20 = shl i64 %16, 4
  %21 = tail call ptr @realloc(ptr %15, i64 %20)
  store ptr %21, ptr %memberidx2.i, align 8
  br label %Array_LLVMValueRef____sl__.exit

Array_LLVMValueRef____sl__.exit:                  ; preds = %for.body.i, %if.entry.i
  %22 = phi ptr [ %15, %for.body.i ], [ %21, %if.entry.i ]
  %23 = phi i64 [ %16, %for.body.i ], [ %19, %if.entry.i ]
  %24 = add i64 %17, 1
  store i64 %24, ptr %memberidx.i, align 4
  %ptridx.i214 = getelementptr inbounds ptr, ptr %22, i64 %17
  store ptr %18, ptr %ptridx.i214, align 8
  %25 = load ptr, ptr %9, align 8
  %26 = load ptr, ptr %25, align 8
  %27 = tail call ptr %26(ptr nonnull %9)
  %28 = load i1, ptr %memberidx.i.i.i206, align 1
  br i1 %28, label %CodeGen_evaluate_expression_list.exit, label %for.body.i

CodeGen_evaluate_expression_list.exit:            ; preds = %Array_LLVMValueRef____sl__.exit, %3
  %29 = phi ptr [ %7, %3 ], [ %22, %Array_LLVMValueRef____sl__.exit ]
  tail call void @free(ptr nonnull %9)
  %30 = icmp slt i64 %5, 3
  br i1 %30, label %if.entry, label %ifend

if.entry:                                         ; preds = %CodeGen_evaluate_expression_list.exit
  %31 = load ptr, ptr %29, align 8
  %32 = tail call fastcc ptr @CodeGen_codegen_string_to_cstring(ptr %0, ptr %1, ptr %31)
  switch i64 %5, label %ifend16 [
    i64 0, label %if.entry4
    i64 1, label %if.entry9
    i64 2, label %if.entry14
  ]

ifend:                                            ; preds = %CodeGen_evaluate_expression_list.exit
  %33 = load ptr, ptr %memberidx3, align 8
  %memberidx.i86 = getelementptr inbounds %Array_Expression_, ptr %33, i64 0, i32 1
  %34 = load ptr, ptr %memberidx.i86, align 8
  %35 = load ptr, ptr %34, align 8
  %memberidx20 = getelementptr inbounds %Expression, ptr %35, i64 0, i32 3
  %36 = load ptr, ptr %memberidx20, align 8
  %memberidx21 = getelementptr inbounds %PointerType, ptr %36, i64 0, i32 1
  %37 = load ptr, ptr %memberidx21, align 8
  %38 = tail call fastcc ptr @CodeGen_codegen_type(ptr %0, ptr %37, i1 true)
  %39 = tail call ptr @LLVMSizeOf(ptr %38)
  %40 = icmp eq i64 %5, 6
  br i1 %40, label %if.entry22, label %ifend24

if.entry4:                                        ; preds = %if.entry
  %41 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMValueRef_, ptr %41, align 8
  %memberidx.i87 = getelementptr inbounds %Array_LLVMValueRef_, ptr %41, i64 0, i32 2
  %memberidx1.i88 = getelementptr inbounds %Array_LLVMValueRef_, ptr %41, i64 0, i32 3
  store i64 8, ptr %memberidx1.i88, align 4
  %memberidx2.i89 = getelementptr inbounds %Array_LLVMValueRef_, ptr %41, i64 0, i32 1
  %42 = tail call ptr @malloc(i32 64)
  store ptr %42, ptr %memberidx2.i89, align 8
  store ptr %32, ptr %42, align 8
  store i64 1, ptr %memberidx.i87, align 4
  %43 = tail call ptr @LLVMInt8Type()
  %44 = tail call ptr @LLVMPointerType(ptr %43, i64 0)
  %45 = tail call ptr @LLVMDoubleType()
  %46 = load ptr, ptr %0, align 8
  %47 = tail call ptr @malloc(i32 32)
  store i32 1718580321, ptr %47, align 8
  %48 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %48, align 8
  %memberidx.i.i.i = getelementptr inbounds %string, ptr %48, i64 0, i32 1
  store ptr %47, ptr %memberidx.i.i.i, align 8
  %memberidx1.i.i.i = getelementptr inbounds %string, ptr %48, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i.i, align 4
  %memberidx2.i.i.i = getelementptr inbounds %string, ptr %48, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i.i, align 4
  %49 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMTypeRef_, ptr %49, align 8
  %memberidx.i.i = getelementptr inbounds %Array_LLVMTypeRef_, ptr %49, i64 0, i32 2
  %memberidx1.i.i = getelementptr inbounds %Array_LLVMTypeRef_, ptr %49, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %Array_LLVMTypeRef_, ptr %49, i64 0, i32 1
  %50 = tail call ptr @malloc(i32 64)
  store ptr %50, ptr %memberidx2.i.i, align 8
  store ptr %44, ptr %50, align 8
  store i64 1, ptr %memberidx.i.i, align 4
  %51 = tail call ptr @malloc(i32 16)
  %memberidx1.i.i9.i = getelementptr inbounds %IntrinsicResult, ptr %51, i64 0, i32 1
  store i64 0, ptr %51, align 8
  %52 = tail call ptr @LLVMFunctionType(ptr %45, ptr nonnull %50, i64 1, i1 false)
  store ptr %52, ptr %memberidx1.i.i9.i, align 8
  %53 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %54 = tail call ptr %53(ptr nonnull %48)
  %55 = tail call ptr @LLVMGetNamedFunction(ptr %46, ptr %54)
  %.not.i.i = icmp eq ptr %55, null
  br i1 %.not.i.i, label %else.i.i, label %CodeGen_codegen_atof_call.exit

else.i.i:                                         ; preds = %if.entry4
  %56 = tail call ptr @LLVMAddFunction(ptr %46, ptr %54, ptr %52)
  br label %CodeGen_codegen_atof_call.exit

CodeGen_codegen_atof_call.exit:                   ; preds = %if.entry4, %else.i.i
  %storemerge.i.i = phi ptr [ %56, %else.i.i ], [ %55, %if.entry4 ]
  store ptr %storemerge.i.i, ptr %51, align 8
  %57 = tail call ptr @LLVMBuildCall2(ptr %1, ptr %52, ptr %storemerge.i.i, ptr nonnull %42, i64 1, ptr nonnull @27)
  br label %ifend16

if.entry9:                                        ; preds = %if.entry
  %58 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMValueRef_, ptr %58, align 8
  %memberidx.i92 = getelementptr inbounds %Array_LLVMValueRef_, ptr %58, i64 0, i32 2
  %memberidx1.i93 = getelementptr inbounds %Array_LLVMValueRef_, ptr %58, i64 0, i32 3
  store i64 8, ptr %memberidx1.i93, align 4
  %memberidx2.i94 = getelementptr inbounds %Array_LLVMValueRef_, ptr %58, i64 0, i32 1
  %59 = tail call ptr @malloc(i32 64)
  store ptr %59, ptr %memberidx2.i94, align 8
  store ptr %32, ptr %59, align 8
  store i64 1, ptr %memberidx.i92, align 4
  %60 = tail call ptr @LLVMInt8Type()
  %61 = tail call ptr @LLVMPointerType(ptr %60, i64 0)
  %62 = tail call ptr @LLVMInt32Type()
  %63 = load ptr, ptr %0, align 8
  %64 = tail call ptr @malloc(i32 32)
  store i32 1768911969, ptr %64, align 8
  %65 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %65, align 8
  %memberidx.i.i.i95 = getelementptr inbounds %string, ptr %65, i64 0, i32 1
  store ptr %64, ptr %memberidx.i.i.i95, align 8
  %memberidx1.i.i.i96 = getelementptr inbounds %string, ptr %65, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i.i96, align 4
  %memberidx2.i.i.i97 = getelementptr inbounds %string, ptr %65, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i.i97, align 4
  %66 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMTypeRef_, ptr %66, align 8
  %memberidx.i.i98 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %66, i64 0, i32 2
  %memberidx1.i.i99 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %66, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i99, align 4
  %memberidx2.i.i100 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %66, i64 0, i32 1
  %67 = tail call ptr @malloc(i32 64)
  store ptr %67, ptr %memberidx2.i.i100, align 8
  store ptr %61, ptr %67, align 8
  store i64 1, ptr %memberidx.i.i98, align 4
  %68 = tail call ptr @malloc(i32 16)
  %memberidx1.i.i9.i103 = getelementptr inbounds %IntrinsicResult, ptr %68, i64 0, i32 1
  store i64 0, ptr %68, align 8
  %69 = tail call ptr @LLVMFunctionType(ptr %62, ptr nonnull %67, i64 1, i1 false)
  store ptr %69, ptr %memberidx1.i.i9.i103, align 8
  %70 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %71 = tail call ptr %70(ptr nonnull %65)
  %72 = tail call ptr @LLVMGetNamedFunction(ptr %63, ptr %71)
  %.not.i.i108 = icmp eq ptr %72, null
  br i1 %.not.i.i108, label %else.i.i110, label %CodeGen_codegen_atoi_call.exit

else.i.i110:                                      ; preds = %if.entry9
  %73 = tail call ptr @LLVMAddFunction(ptr %63, ptr %71, ptr %69)
  br label %CodeGen_codegen_atoi_call.exit

CodeGen_codegen_atoi_call.exit:                   ; preds = %if.entry9, %else.i.i110
  %storemerge.i.i111 = phi ptr [ %73, %else.i.i110 ], [ %72, %if.entry9 ]
  store ptr %storemerge.i.i111, ptr %68, align 8
  %74 = tail call ptr @LLVMBuildCall2(ptr %1, ptr %69, ptr %storemerge.i.i111, ptr nonnull %59, i64 1, ptr nonnull @27)
  br label %ifend16

if.entry14:                                       ; preds = %if.entry
  %75 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMValueRef_, ptr %75, align 8
  %memberidx.i115 = getelementptr inbounds %Array_LLVMValueRef_, ptr %75, i64 0, i32 2
  %memberidx1.i116 = getelementptr inbounds %Array_LLVMValueRef_, ptr %75, i64 0, i32 3
  store i64 8, ptr %memberidx1.i116, align 4
  %memberidx2.i117 = getelementptr inbounds %Array_LLVMValueRef_, ptr %75, i64 0, i32 1
  %76 = tail call ptr @malloc(i32 64)
  store ptr %76, ptr %memberidx2.i117, align 8
  store ptr %32, ptr %76, align 8
  store i64 1, ptr %memberidx.i115, align 4
  %77 = tail call ptr @LLVMInt8Type()
  %78 = tail call ptr @LLVMPointerType(ptr %77, i64 0)
  %79 = tail call ptr @LLVMInt64Type()
  %80 = load ptr, ptr %0, align 8
  %81 = tail call ptr @malloc(i32 32)
  store i32 1819243617, ptr %81, align 8
  %82 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %82, align 8
  %memberidx.i.i.i118 = getelementptr inbounds %string, ptr %82, i64 0, i32 1
  store ptr %81, ptr %memberidx.i.i.i118, align 8
  %memberidx1.i.i.i119 = getelementptr inbounds %string, ptr %82, i64 0, i32 2
  store i64 4, ptr %memberidx1.i.i.i119, align 4
  %memberidx2.i.i.i120 = getelementptr inbounds %string, ptr %82, i64 0, i32 3
  store i64 4, ptr %memberidx2.i.i.i120, align 4
  %83 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMTypeRef_, ptr %83, align 8
  %memberidx.i.i121 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %83, i64 0, i32 2
  %memberidx1.i.i122 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %83, i64 0, i32 3
  store i64 8, ptr %memberidx1.i.i122, align 4
  %memberidx2.i.i123 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %83, i64 0, i32 1
  %84 = tail call ptr @malloc(i32 64)
  store ptr %84, ptr %memberidx2.i.i123, align 8
  store ptr %78, ptr %84, align 8
  store i64 1, ptr %memberidx.i.i121, align 4
  %85 = tail call ptr @malloc(i32 16)
  %memberidx1.i.i9.i126 = getelementptr inbounds %IntrinsicResult, ptr %85, i64 0, i32 1
  store i64 0, ptr %85, align 8
  %86 = tail call ptr @LLVMFunctionType(ptr %79, ptr nonnull %84, i64 1, i1 false)
  store ptr %86, ptr %memberidx1.i.i9.i126, align 8
  %87 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %88 = tail call ptr %87(ptr nonnull %82)
  %89 = tail call ptr @LLVMGetNamedFunction(ptr %80, ptr %88)
  %.not.i.i131 = icmp eq ptr %89, null
  br i1 %.not.i.i131, label %else.i.i133, label %CodeGen_codegen_atol_call.exit

else.i.i133:                                      ; preds = %if.entry14
  %90 = tail call ptr @LLVMAddFunction(ptr %80, ptr %88, ptr %86)
  br label %CodeGen_codegen_atol_call.exit

CodeGen_codegen_atol_call.exit:                   ; preds = %if.entry14, %else.i.i133
  %storemerge.i.i134 = phi ptr [ %90, %else.i.i133 ], [ %89, %if.entry14 ]
  store ptr %storemerge.i.i134, ptr %85, align 8
  %91 = tail call ptr @LLVMBuildCall2(ptr %1, ptr %86, ptr %storemerge.i.i134, ptr nonnull %76, i64 1, ptr nonnull @27)
  br label %ifend16

common.ret:                                       ; preds = %ifend36, %if.entry34, %if.entry31, %if.entry28, %CodeGen_codegen_memcmp_call.exit, %CodeGen_codegen_realloc_call.exit, %ifend16
  %common.ret.op = phi ptr [ %92, %ifend16 ], [ %112, %CodeGen_codegen_realloc_call.exit ], [ %133, %CodeGen_codegen_memcmp_call.exit ], [ %142, %if.entry28 ], [ %148, %if.entry31 ], [ %152, %if.entry34 ], [ null, %ifend36 ]
  ret ptr %common.ret.op

ifend16:                                          ; preds = %CodeGen_codegen_atoi_call.exit, %CodeGen_codegen_atof_call.exit, %if.entry, %CodeGen_codegen_atol_call.exit
  %92 = phi ptr [ %74, %CodeGen_codegen_atoi_call.exit ], [ %57, %CodeGen_codegen_atof_call.exit ], [ null, %if.entry ], [ %91, %CodeGen_codegen_atol_call.exit ]
  %93 = tail call ptr @LLVMBuildFree(ptr %1, ptr %32)
  br label %common.ret

if.entry22:                                       ; preds = %ifend
  %ptridx.i = getelementptr inbounds ptr, ptr %29, i64 1
  %94 = load ptr, ptr %ptridx.i, align 8
  %95 = tail call ptr @LLVMBuildMul(ptr %1, ptr %94, ptr %39, ptr nonnull @27)
  store ptr %95, ptr %ptridx.i, align 8
  %96 = tail call ptr @LLVMInt8Type()
  %97 = tail call ptr @LLVMPointerType(ptr %96, i64 0)
  %98 = tail call ptr @LLVMIntType(i64 64)
  %99 = load ptr, ptr %0, align 8
  %100 = tail call ptr @malloc(i32 56)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(7) %100, ptr noundef nonnull align 8 dereferenceable(7) @278, i64 7, i1 false)
  %101 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %101, align 8
  %memberidx.i.i.i141 = getelementptr inbounds %string, ptr %101, i64 0, i32 1
  store ptr %100, ptr %memberidx.i.i.i141, align 8
  %memberidx1.i.i.i142 = getelementptr inbounds %string, ptr %101, i64 0, i32 2
  store i64 7, ptr %memberidx1.i.i.i142, align 4
  %memberidx2.i.i.i143 = getelementptr inbounds %string, ptr %101, i64 0, i32 3
  store i64 7, ptr %memberidx2.i.i.i143, align 4
  %102 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMTypeRef_, ptr %102, align 8
  %memberidx.i.i144 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %102, i64 0, i32 2
  %memberidx1.i.i145 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %102, i64 0, i32 3
  store i64 16, ptr %memberidx1.i.i145, align 4
  %memberidx2.i.i146 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %102, i64 0, i32 1
  %103 = tail call ptr @malloc(i32 128)
  store ptr %103, ptr %memberidx2.i.i146, align 8
  store ptr %97, ptr %103, align 8
  %104 = getelementptr inbounds ptr, ptr %103, i64 1
  store ptr %98, ptr %104, align 8
  store i64 2, ptr %memberidx.i.i144, align 4
  %105 = tail call ptr @malloc(i32 16)
  %memberidx1.i.i10.i = getelementptr inbounds %IntrinsicResult, ptr %105, i64 0, i32 1
  store i64 0, ptr %105, align 8
  %106 = tail call ptr @LLVMFunctionType(ptr %97, ptr nonnull %103, i64 2, i1 false)
  store ptr %106, ptr %memberidx1.i.i10.i, align 8
  %107 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %108 = tail call ptr %107(ptr nonnull %101)
  %109 = tail call ptr @LLVMGetNamedFunction(ptr %99, ptr %108)
  %.not.i.i150 = icmp eq ptr %109, null
  br i1 %.not.i.i150, label %else.i.i152, label %CodeGen_codegen_realloc_call.exit

else.i.i152:                                      ; preds = %if.entry22
  %110 = tail call ptr @LLVMAddFunction(ptr %99, ptr %108, ptr %106)
  br label %CodeGen_codegen_realloc_call.exit

CodeGen_codegen_realloc_call.exit:                ; preds = %if.entry22, %else.i.i152
  %storemerge.i.i153 = phi ptr [ %110, %else.i.i152 ], [ %109, %if.entry22 ]
  store ptr %storemerge.i.i153, ptr %105, align 8
  %111 = load i64, ptr %memberidx.i, align 4
  %112 = tail call ptr @LLVMBuildCall2(ptr %1, ptr %106, ptr %storemerge.i.i153, ptr nonnull %29, i64 %111, ptr nonnull @27)
  br label %common.ret

ifend24:                                          ; preds = %ifend
  %ptridx.i158 = getelementptr inbounds ptr, ptr %29, i64 2
  %113 = load ptr, ptr %ptridx.i158, align 8
  %114 = tail call ptr @LLVMBuildMul(ptr %1, ptr %113, ptr %39, ptr nonnull @27)
  store ptr %114, ptr %ptridx.i158, align 8
  %115 = icmp eq i64 %5, 7
  br i1 %115, label %if.entry25, label %ifend27

if.entry25:                                       ; preds = %ifend24
  %116 = tail call ptr @LLVMInt8Type()
  %117 = tail call ptr @LLVMPointerType(ptr %116, i64 0)
  %118 = tail call ptr @LLVMIntType(i64 64)
  %119 = load ptr, ptr %0, align 8
  %120 = tail call ptr @malloc(i32 48)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %120, ptr noundef nonnull align 8 dereferenceable(6) @279, i64 6, i1 false)
  %121 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %121, align 8
  %memberidx.i.i.i161 = getelementptr inbounds %string, ptr %121, i64 0, i32 1
  store ptr %120, ptr %memberidx.i.i.i161, align 8
  %memberidx1.i.i.i162 = getelementptr inbounds %string, ptr %121, i64 0, i32 2
  store i64 6, ptr %memberidx1.i.i.i162, align 4
  %memberidx2.i.i.i163 = getelementptr inbounds %string, ptr %121, i64 0, i32 3
  store i64 6, ptr %memberidx2.i.i.i163, align 4
  %122 = tail call ptr @malloc(i32 32)
  store ptr @VTableArray_LLVMTypeRef_, ptr %122, align 8
  %memberidx.i.i164 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %122, i64 0, i32 2
  %memberidx1.i.i165 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %122, i64 0, i32 3
  store i64 24, ptr %memberidx1.i.i165, align 4
  %memberidx2.i.i166 = getelementptr inbounds %Array_LLVMTypeRef_, ptr %122, i64 0, i32 1
  %123 = tail call ptr @malloc(i32 192)
  store ptr %123, ptr %memberidx2.i.i166, align 8
  store ptr %117, ptr %123, align 8
  %124 = getelementptr inbounds ptr, ptr %123, i64 1
  store ptr %117, ptr %124, align 8
  %125 = getelementptr inbounds ptr, ptr %123, i64 2
  store ptr %118, ptr %125, align 8
  store i64 3, ptr %memberidx.i.i164, align 4
  %126 = tail call ptr @malloc(i32 16)
  %memberidx1.i.i11.i = getelementptr inbounds %IntrinsicResult, ptr %126, i64 0, i32 1
  store i64 0, ptr %126, align 8
  %127 = tail call ptr @LLVMFunctionType(ptr %118, ptr nonnull %123, i64 3, i1 false)
  store ptr %127, ptr %memberidx1.i.i11.i, align 8
  %128 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %129 = tail call ptr %128(ptr nonnull %121)
  %130 = tail call ptr @LLVMGetNamedFunction(ptr %119, ptr %129)
  %.not.i.i170 = icmp eq ptr %130, null
  br i1 %.not.i.i170, label %else.i.i172, label %CodeGen_codegen_memcmp_call.exit

else.i.i172:                                      ; preds = %if.entry25
  %131 = tail call ptr @LLVMAddFunction(ptr %119, ptr %129, ptr %127)
  br label %CodeGen_codegen_memcmp_call.exit

CodeGen_codegen_memcmp_call.exit:                 ; preds = %if.entry25, %else.i.i172
  %storemerge.i.i173 = phi ptr [ %131, %else.i.i172 ], [ %130, %if.entry25 ]
  store ptr %storemerge.i.i173, ptr %126, align 8
  %132 = load i64, ptr %memberidx.i, align 4
  %133 = tail call ptr @LLVMBuildCall2(ptr %1, ptr %127, ptr %storemerge.i.i173, ptr nonnull %29, i64 %132, ptr nonnull @27)
  br label %common.ret

ifend27:                                          ; preds = %ifend24
  %134 = load ptr, ptr %29, align 8
  %135 = tail call i64 @LLVMGetAlignment(ptr %134)
  %136 = icmp eq i64 %5, 5
  br i1 %136, label %if.entry28, label %ifend30

if.entry28:                                       ; preds = %ifend27
  %137 = load ptr, ptr %29, align 8
  %ptridx.i180 = getelementptr inbounds ptr, ptr %29, i64 1
  %138 = load ptr, ptr %ptridx.i180, align 8
  %139 = tail call ptr @LLVMInt8Type()
  %140 = tail call ptr @LLVMBuildIntCast2(ptr %1, ptr %138, ptr %139, i1 false, ptr nonnull @27)
  %141 = load ptr, ptr %ptridx.i158, align 8
  %142 = tail call ptr @LLVMBuildMemSet(ptr %1, ptr %137, ptr %140, ptr %141, i64 %135)
  br label %common.ret

ifend30:                                          ; preds = %ifend27
  %ptridx.i184 = getelementptr inbounds ptr, ptr %29, i64 1
  %143 = load ptr, ptr %ptridx.i184, align 8
  %144 = tail call i64 @LLVMGetAlignment(ptr %143)
  switch i64 %5, label %ifend36 [
    i64 3, label %if.entry31
    i64 4, label %if.entry34
  ]

if.entry31:                                       ; preds = %ifend30
  %145 = load ptr, ptr %29, align 8
  %146 = load ptr, ptr %ptridx.i184, align 8
  %147 = load ptr, ptr %ptridx.i158, align 8
  %148 = tail call ptr @LLVMBuildMemCpy(ptr %1, ptr %145, i64 %135, ptr %146, i64 %144, ptr %147)
  br label %common.ret

if.entry34:                                       ; preds = %ifend30
  %149 = load ptr, ptr %29, align 8
  %150 = load ptr, ptr %ptridx.i184, align 8
  %151 = load ptr, ptr %ptridx.i158, align 8
  %152 = tail call ptr @LLVMBuildMemMove(ptr %1, ptr %149, i64 %135, ptr %150, i64 %144, ptr %151)
  br label %common.ret

ifend36:                                          ; preds = %ifend30
  %153 = tail call ptr @malloc(i32 168)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(21) %153, ptr noundef nonnull align 8 dereferenceable(21) @307, i64 21, i1 false)
  %154 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %154, align 8
  %memberidx.i.i195 = getelementptr inbounds %string, ptr %154, i64 0, i32 1
  store ptr %153, ptr %memberidx.i.i195, align 8
  %memberidx1.i.i196 = getelementptr inbounds %string, ptr %154, i64 0, i32 2
  store i64 21, ptr %memberidx1.i.i196, align 4
  %memberidx2.i.i197 = getelementptr inbounds %string, ptr %154, i64 0, i32 3
  store i64 21, ptr %memberidx2.i.i197, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %155 = load ptr, ptr getelementptr inbounds (<{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr @VTablestring, i64 0, i32 5), align 8
  %156 = tail call ptr %155(ptr nonnull %154)
  %157 = call i64 (ptr, ptr, ...) @asprintf(ptr nonnull %4, ptr nonnull @270, ptr %156)
  %158 = load ptr, ptr %4, align 8
  %159 = call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %159, align 8
  %memberidx.i.i199 = getelementptr inbounds %string, ptr %159, i64 0, i32 1
  store ptr %158, ptr %memberidx.i.i199, align 8
  %memberidx1.i.i200 = getelementptr inbounds %string, ptr %159, i64 0, i32 2
  store i64 %157, ptr %memberidx1.i.i200, align 4
  %memberidx2.i.i201 = getelementptr inbounds %string, ptr %159, i64 0, i32 3
  store i64 %157, ptr %memberidx2.i.i201, align 4
  call void @free(ptr %156)
  %160 = load ptr, ptr %159, align 8
  %memberidx.i.i.i202 = getelementptr inbounds <{ ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }>, ptr %160, i64 0, i32 3
  %161 = load ptr, ptr %memberidx.i.i.i202, align 8
  %162 = call ptr %161(ptr nonnull %159)
  %163 = load i64, ptr %memberidx1.i.i200, align 4
  call void @write(i64 1, ptr %162, i64 %163)
  call void @write(i64 1, ptr nonnull @0, i64 1)
  call void @exit(i64 -1)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  br label %common.ret
}

declare ptr @LLVMModuleCreateWithName(ptr) local_unnamed_addr

declare i1 @LLVMIsConstant(ptr) local_unnamed_addr

declare ptr @LLVMConstNeg(ptr) local_unnamed_addr

declare ptr @LLVMBuildNeg(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstInt(ptr, i64, i1) local_unnamed_addr

declare ptr @LLVMInt1Type() local_unnamed_addr

declare ptr @LLVMIntType(i64) local_unnamed_addr

declare ptr @LLVMVoidType() local_unnamed_addr

declare ptr @LLVMInt8Type() local_unnamed_addr

declare ptr @LLVMInt16Type() local_unnamed_addr

declare ptr @LLVMInt32Type() local_unnamed_addr

declare ptr @LLVMInt64Type() local_unnamed_addr

declare ptr @LLVMInt128Type() local_unnamed_addr

declare ptr @LLVMHalfType() local_unnamed_addr

declare ptr @LLVMFloatType() local_unnamed_addr

declare ptr @LLVMDoubleType() local_unnamed_addr

declare ptr @LLVMPointerType(ptr, i64) local_unnamed_addr

declare ptr @LLVMArrayType(ptr, i64) local_unnamed_addr

declare ptr @LLVMFunctionType(ptr, ptr, i64, i1) local_unnamed_addr

declare ptr @LLVMBuildRet(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildRetVoid(ptr) local_unnamed_addr

declare ptr @LLVMConstReal(ptr, double) local_unnamed_addr

declare ptr @LLVMAddFunction(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildCall2(ptr, ptr, ptr, ptr, i64, ptr) local_unnamed_addr

declare ptr @LLVMBuildGlobalString(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildAlloca(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildLoad2(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildSelect(ptr, ptr, ptr, ptr, ptr) local_unnamed_addr

declare i64 @LLVMGetTypeKind(ptr) local_unnamed_addr

declare ptr @LLVMTypeOf(ptr) local_unnamed_addr

declare i1 @LLVMIsGlobalConstant(ptr) local_unnamed_addr

define internal fastcc noalias ptr @get_format_from_type(ptr nocapture readonly %0) unnamed_addr {
  %2 = load i64, ptr %0, align 4
  %3 = add i64 %2, -1
  %4 = icmp ult i64 %3, 7
  br i1 %4, label %if.entry, label %ifend

if.entry:                                         ; preds = %1
  switch i64 %2, label %ifend7 [
    i64 6, label %if.entry1
    i64 5, label %if.entry5
  ]

ifend:                                            ; preds = %1
  %5 = and i64 %2, -2
  switch i64 %5, label %ifend17 [
    i64 8, label %if.entry10
    i64 10, label %if.entry15
  ]

common.ret:                                       ; preds = %ifend20, %if.entry18, %if.entry15, %if.entry10, %ifend7, %if.entry5, %if.entry1
  %.sink49 = phi ptr [ %14, %ifend20 ], [ %13, %if.entry18 ], [ %11, %if.entry15 ], [ %10, %if.entry10 ], [ %9, %ifend7 ], [ %8, %if.entry5 ], [ %7, %if.entry1 ]
  %.sink47 = phi i64 [ 2, %ifend20 ], [ 4, %if.entry18 ], [ 3, %if.entry15 ], [ 2, %if.entry10 ], [ 2, %ifend7 ], [ 2, %if.entry5 ], [ 3, %if.entry1 ]
  %6 = tail call ptr @malloc(i32 32)
  store ptr @VTablestring, ptr %6, align 8
  %memberidx.i.i = getelementptr inbounds %string, ptr %6, i64 0, i32 1
  store ptr %.sink49, ptr %memberidx.i.i, align 8
  %memberidx1.i.i = getelementptr inbounds %string, ptr %6, i64 0, i32 2
  store i64 %.sink47, ptr %memberidx1.i.i, align 4
  %memberidx2.i.i = getelementptr inbounds %string, ptr %6, i64 0, i32 3
  store i64 %.sink47, ptr %memberidx2.i.i, align 4
  ret ptr %6

if.entry1:                                        ; preds = %if.entry
  %7 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %7, ptr noundef nonnull align 8 dereferenceable(3) @282, i64 3, i1 false)
  br label %common.ret

if.entry5:                                        ; preds = %if.entry
  %8 = tail call ptr @malloc(i32 16)
  store i16 25708, ptr %8, align 8
  br label %common.ret

ifend7:                                           ; preds = %if.entry
  %9 = tail call ptr @malloc(i32 16)
  store i16 25637, ptr %9, align 8
  br label %common.ret

if.entry10:                                       ; preds = %ifend
  %10 = tail call ptr @malloc(i32 16)
  store i16 26149, ptr %10, align 8
  br label %common.ret

if.entry15:                                       ; preds = %ifend
  %11 = tail call ptr @malloc(i32 24)
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(3) %11, ptr noundef nonnull align 8 dereferenceable(3) @283, i64 3, i1 false)
  br label %common.ret

ifend17:                                          ; preds = %ifend
  %12 = icmp eq i64 %2, 15
  br i1 %12, label %if.entry18, label %ifend20

if.entry18:                                       ; preds = %ifend17
  %13 = tail call ptr @malloc(i32 32)
  store i32 1478850608, ptr %13, align 8
  br label %common.ret

ifend20:                                          ; preds = %ifend17
  %14 = tail call ptr @malloc(i32 16)
  store i16 29477, ptr %14, align 8
  br label %common.ret
}

declare ptr @LLVM_GetFunctionType(ptr) local_unnamed_addr

declare ptr @LLVMBuildMalloc(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFree(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildStore(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildInBoundsGEP2(ptr, ptr, ptr, ptr, i64, ptr) local_unnamed_addr

declare ptr @LLVMConstArray(ptr, ptr, i64) local_unnamed_addr

declare ptr @LLVMConstMul(ptr, ptr) local_unnamed_addr

declare ptr @LLVMSizeOf(ptr) local_unnamed_addr

declare i1 @LLVMIsNull(ptr) local_unnamed_addr

declare ptr @LLVMBuildIsNull(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildIsNotNull(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstAdd(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildAdd(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstSub(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildSub(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildMul(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildSDiv(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildSRem(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstICmp(i64, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildICmp(ptr, i64, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstShl(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildShl(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstAShr(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildAShr(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstOr(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildOr(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstAnd(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildAnd(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstXor(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildXor(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFAdd(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFSub(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFMul(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFDiv(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFRem(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstFCmp(i64, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFCmp(ptr, i64, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstSIToFP(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildSIToFP(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstFPToSI(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFPToSI(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstIntCast(ptr, ptr, i1) local_unnamed_addr

declare ptr @LLVMBuildIntCast2(ptr, ptr, ptr, i1, ptr) local_unnamed_addr

declare ptr @LLVMConstFPCast(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFPCast(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstBitCast(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildBitCast(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildFNeg(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMConstNot(ptr) local_unnamed_addr

declare ptr @LLVMBuildNot(ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMGetInitializer(ptr) local_unnamed_addr

declare ptr @LLVMConstNull(ptr) local_unnamed_addr

declare ptr @LLVMAppendBasicBlock(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildCondBr(ptr, ptr, ptr, ptr) local_unnamed_addr

declare void @LLVMPositionBuilderAtEnd(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildBr(ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildPhi(ptr, ptr, ptr) local_unnamed_addr

declare void @LLVMAddIncoming(ptr, ptr, ptr, i64) local_unnamed_addr

declare ptr @LLVMBuildArrayMalloc(ptr, ptr, ptr, ptr) local_unnamed_addr

declare ptr @LLVMBuildArrayAlloca(ptr, ptr, ptr, ptr) local_unnamed_addr

declare i64 @LLVMGetAlignment(ptr) local_unnamed_addr

declare ptr @LLVMBuildMemSet(ptr, ptr, ptr, ptr, i64) local_unnamed_addr

declare ptr @LLVMBuildMemCpy(ptr, ptr, i64, ptr, i64, ptr) local_unnamed_addr

declare ptr @LLVMBuildMemMove(ptr, ptr, i64, ptr, i64, ptr) local_unnamed_addr

declare void @LLVMDeleteBasicBlock(ptr) local_unnamed_addr

declare ptr @LLVMAddGlobal(ptr, ptr, ptr) local_unnamed_addr

declare void @LLVMSetInitializer(ptr, ptr) local_unnamed_addr

declare void @LLVMSetGlobalConstant(ptr, i1) local_unnamed_addr

declare void @LLVMSetLinkage(ptr, i64) local_unnamed_addr

declare ptr @LLVMCreateBuilder() local_unnamed_addr

declare ptr @LLVMGetParam(ptr, i64) local_unnamed_addr

declare void @LLVMDisposeBuilder(ptr) local_unnamed_addr

declare ptr @LLVMStructType(ptr, i64, i1) local_unnamed_addr

declare ptr @LLVMConstStruct(ptr, i64, i1) local_unnamed_addr

declare ptr @LLVMStructCreateNamed(ptr, ptr) local_unnamed_addr

declare ptr @LLVMGetModuleContext(ptr) local_unnamed_addr

declare void @LLVMStructSetBody(ptr, ptr, i64, i1) local_unnamed_addr

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.abs.i64(i64, i1 immarg) #15

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.smax.i64(i64, i64) #15

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #16

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #16

; Function Attrs: argmemonly nocallback nofree nounwind willreturn writeonly
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #17

attributes #0 = { nofree norecurse nosync nounwind readonly }
attributes #1 = { argmemonly mustprogress nofree norecurse nosync nounwind readonly willreturn }
attributes #2 = { mustprogress nofree norecurse nosync nounwind readonly willreturn }
attributes #3 = { argmemonly mustprogress nocallback nofree nounwind willreturn }
attributes #4 = { inaccessiblemem_or_argmemonly mustprogress nounwind willreturn allockind("realloc") allocsize(1) "alloc-family"="malloc" }
attributes #5 = { argmemonly mustprogress nofree nounwind readonly willreturn }
attributes #6 = { nofree }
attributes #7 = { inaccessiblemem_or_argmemonly mustprogress nounwind willreturn allockind("free") "alloc-family"="malloc" }
attributes #8 = { argmemonly mustprogress nofree norecurse nosync nounwind willreturn writeonly }
attributes #9 = { nofree nounwind }
attributes #10 = { argmemonly mustprogress nofree norecurse nosync nounwind willreturn }
attributes #11 = { mustprogress nofree norecurse nosync nounwind willreturn }
attributes #12 = { mustprogress nofree nounwind readonly willreturn }
attributes #13 = { mustprogress nounwind willreturn }
attributes #14 = { nofree nosync nounwind readonly }
attributes #15 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #16 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #17 = { argmemonly nocallback nofree nounwind willreturn writeonly }
