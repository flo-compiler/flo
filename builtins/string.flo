import memcmp, memcpy in "@flo/sys"
class string {
    buffer: i8*
    length: int
    size: int
    constructor(this, data: i8*, len: int){
        this.buffer = data
        this.length = len
        this.size = len
    }
    __add__(this, data: string): string {
        let new_str_len = this.length + data.length
        let new_buffer = new i8[new_str_len]
        memcpy(new_buffer, this.buffer, this.length)
        let trailing_buffer = new_buffer + this.length
        memcpy(trailing_buffer, data.buffer, data.length + 1)
        return new string(new_buffer, new_str_len)   
    }
    add_byte(this, char: i8){
        if this.length + 1 >= this.size {
            this.size *= 2
            this.buffer = this.buffer.resize(this.size)
        }
        this.buffer[this.length]  = char
        this.length++
    }
    __getitem__(this, index: int): string {
        let new_buffer = new i8[2]
        new_buffer[0] = this.buffer[index]
        new_buffer[1] = '\0'
        return new string(new_buffer, 2)
    }
    __eq__(this, other: string): bool {
        if this.length != other.length return false
        return memcmp(this.buffer, other.buffer, this.length) == 0
    }
    find(this, search: string): int {
        for let i = 0; i < this.length; i++ {
            if (search.buffer[0] == this.buffer[i]) {
                let x = search.length - 1
                let matches = true
                while x > 0 {
                    if (search.buffer[x] != this.buffer[x+i]){
                        return -1
                    }
                    x--
                }
                if matches return i
            }
        }
        return -1
    }
    __in__(this, other: string): bool {
        return this.find(other) != -1
    }
    substring (this, start: int, length: int): string {
        return new string(this.buffer + start, length)
    }
    get_byte(this, index: int): i8 {
        return (this.buffer[index])
    }
    get_bytes(this): i8* {
        return this.buffer
    }
    to_cstring(this): i8* {
        let c_string = new i8[this.length+1]
        memcpy(c_string, this.buffer, this.length)
        c_string[this.length] = '\0'
        return c_string
    }
}