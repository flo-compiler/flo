import memcmp, memcpy from "@flo/sys"
class string {
    buffer: i8*
    length: int
    fnc constructor(data: i8*, len: int){
        this.buffer = new i8(len)
        this.buffer = data
        this.length = len
    }
    fnc __add__(data: string): string {
        new_str_len = this.length + data.length
        new_buffer = new i8(new_str_len)
        memcpy(new_buffer, this.buffer, this.length)
        trailing_buffer = new_buffer + this.length
        memcpy(trailing_buffer, data.buffer, data.length+1)
        return new string(new_buffer, new_str_len)   
    }
    fnc __getitem__(index: int): string {
        new_buffer = new i8(2)
        new_buffer[0] = this.buffer[index]
        new_buffer[1] = '\0'
        return new string(new_buffer, 2)
    }
    fnc __eq__(other: string): bool {
        return memcmp(this.buffer, other.buffer, this.length) == 0
    }
    fnc find(search: string): int {
        for i = 0; i < this.length; i++ {
            if (search.buffer[0] == this.buffer[i]) {
                x = search.length - 1
                matches = true
                while x > 0 {
                    if (search.buffer[x] != this.buffer[x+i]){
                        return -1
                    }
                    x--
                }
                if matches return i
            }
        }
        return -1
    }
    fnc __as_i8_ptr__(): i8* {
        return this.buffer
    }
    fnc to_cstring(): i8* {
        c_string = new i8(this.length+1)
        memcpy(c_string, this.buffer, this.length)
        c_string[this.length] = '\0'
        return c_string
    }
    // TODO
    fnc split(delim: string){1}
}