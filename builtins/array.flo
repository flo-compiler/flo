class Array <T> {
    buffer: T*
    length: int
    size: int
    constructor(size = 8){
        this.length = 0
        this.size = size
        this.buffer = new T[size]
    }
    resize(){
        this.size = this.size * 2 // * sizeof(int)
        this.buffer = this.buffer.resize(this.size)
    }
    swap(i1: int, i2: int){
        if (i1 in 0..this.length) and (i2 in 0..this.length) {
            let tmp = this.buffer[i1]
            this.buffer[i1] = this.buffer[i2]
            this.buffer[i2] = tmp 
        } 
        // else {
        //     println("Index out of range:", i1, i2)
        // }
    }
    __sl__(element: T){
        if (this.length >= this.size) this.resize()
        this.buffer[this.length++] = element
    }
    __setitem__(index: int, value: T){
        if index in 0..this.length {
            this.buffer[index] = value
        } 
        // else {
        //     println("Index out of range:", index)
        // }
    }
    append(element: T){
        this.__sl__(element)
    }
    __getitem__(index: int): T {
        return this.buffer[index]
    }
    __eq__(other: Array<T>): bool{
        if this.length != other.length {
            return false
        } else {
           for let i = 0; i < this.length; i++ {
               if this[i] != other[i] return false
           }
           return true
        }
        return true
    }
    __in__(element: T): bool {
        for let i = 0; i < this.length; i++ {
            if this[i] == element return true 
        }
        return false
    }
    
    find(search: T): int{
        for let i = 0; i < this.length; i++ {
            if this.buffer[i] == search return i
        }
        return -1
    }
    join(seperator: string): string{
        let res = ""
        let last_index = this.length - 1
        for let i = 0; i < last_index; i++ {
            res += this.buffer[i] + seperator
        }
        return res + this.buffer[i]
    }
    __as_string__(): string {
        return "[" + this.join(", ") + "]"
    }
}